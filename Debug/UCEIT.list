
UCEIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001245c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000123c  0801263c  0801263c  0001363c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013878  08013878  000151f0  2**0
                  CONTENTS
  4 .ARM          00000008  08013878  08013878  00014878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013880  08013880  000151f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013880  08013880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013884  08013884  00014884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08013888  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025c4  200001f0  08013a78  000151f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  200027b4  08013a78  000157b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000151f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027308  00000000  00000000  00015220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005261  00000000  00000000  0003c528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002098  00000000  00000000  00041790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001929  00000000  00000000  00043828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00026a52  00000000  00000000  00045151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000b3af  00000000  00000000  0006bba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00076f52  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009258  00000000  00000000  00076f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005e  00000000  00000000  000801f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012624 	.word	0x08012624

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	08012624 	.word	0x08012624

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_d2f>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab4:	bf24      	itt	cs
 8000ab6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000abe:	d90d      	bls.n	8000adc <__aeabi_d2f+0x30>
 8000ac0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000acc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad4:	bf08      	it	eq
 8000ad6:	f020 0001 	biceq.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae0:	d121      	bne.n	8000b26 <__aeabi_d2f+0x7a>
 8000ae2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ae6:	bfbc      	itt	lt
 8000ae8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aec:	4770      	bxlt	lr
 8000aee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af6:	f1c2 0218 	rsb	r2, r2, #24
 8000afa:	f1c2 0c20 	rsb	ip, r2, #32
 8000afe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b02:	fa20 f002 	lsr.w	r0, r0, r2
 8000b06:	bf18      	it	ne
 8000b08:	f040 0001 	orrne.w	r0, r0, #1
 8000b0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b18:	ea40 000c 	orr.w	r0, r0, ip
 8000b1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b24:	e7cc      	b.n	8000ac0 <__aeabi_d2f+0x14>
 8000b26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2a:	d107      	bne.n	8000b3c <__aeabi_d2f+0x90>
 8000b2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b30:	bf1e      	ittt	ne
 8000b32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3a:	4770      	bxne	lr
 8000b3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b96a 	b.w	8000e38 <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9d08      	ldr	r5, [sp, #32]
 8000b82:	460c      	mov	r4, r1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d14e      	bne.n	8000c26 <__udivmoddi4+0xaa>
 8000b88:	4694      	mov	ip, r2
 8000b8a:	458c      	cmp	ip, r1
 8000b8c:	4686      	mov	lr, r0
 8000b8e:	fab2 f282 	clz	r2, r2
 8000b92:	d962      	bls.n	8000c5a <__udivmoddi4+0xde>
 8000b94:	b14a      	cbz	r2, 8000baa <__udivmoddi4+0x2e>
 8000b96:	f1c2 0320 	rsb	r3, r2, #32
 8000b9a:	4091      	lsls	r1, r2
 8000b9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba4:	4319      	orrs	r1, r3
 8000ba6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000baa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bae:	fa1f f68c 	uxth.w	r6, ip
 8000bb2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bba:	fb07 1114 	mls	r1, r7, r4, r1
 8000bbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc2:	fb04 f106 	mul.w	r1, r4, r6
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x64>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bd2:	f080 8112 	bcs.w	8000dfa <__udivmoddi4+0x27e>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 810f 	bls.w	8000dfa <__udivmoddi4+0x27e>
 8000bdc:	3c02      	subs	r4, #2
 8000bde:	4463      	add	r3, ip
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bea:	fb07 1110 	mls	r1, r7, r0, r1
 8000bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf2:	fb00 f606 	mul.w	r6, r0, r6
 8000bf6:	429e      	cmp	r6, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x94>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c02:	f080 80fc 	bcs.w	8000dfe <__udivmoddi4+0x282>
 8000c06:	429e      	cmp	r6, r3
 8000c08:	f240 80f9 	bls.w	8000dfe <__udivmoddi4+0x282>
 8000c0c:	4463      	add	r3, ip
 8000c0e:	3802      	subs	r0, #2
 8000c10:	1b9b      	subs	r3, r3, r6
 8000c12:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11d      	cbz	r5, 8000c22 <__udivmoddi4+0xa6>
 8000c1a:	40d3      	lsrs	r3, r2
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d905      	bls.n	8000c36 <__udivmoddi4+0xba>
 8000c2a:	b10d      	cbz	r5, 8000c30 <__udivmoddi4+0xb4>
 8000c2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c30:	2100      	movs	r1, #0
 8000c32:	4608      	mov	r0, r1
 8000c34:	e7f5      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000c36:	fab3 f183 	clz	r1, r3
 8000c3a:	2900      	cmp	r1, #0
 8000c3c:	d146      	bne.n	8000ccc <__udivmoddi4+0x150>
 8000c3e:	42a3      	cmp	r3, r4
 8000c40:	d302      	bcc.n	8000c48 <__udivmoddi4+0xcc>
 8000c42:	4290      	cmp	r0, r2
 8000c44:	f0c0 80f0 	bcc.w	8000e28 <__udivmoddi4+0x2ac>
 8000c48:	1a86      	subs	r6, r0, r2
 8000c4a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c4e:	2001      	movs	r0, #1
 8000c50:	2d00      	cmp	r5, #0
 8000c52:	d0e6      	beq.n	8000c22 <__udivmoddi4+0xa6>
 8000c54:	e9c5 6300 	strd	r6, r3, [r5]
 8000c58:	e7e3      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	f040 8090 	bne.w	8000d80 <__udivmoddi4+0x204>
 8000c60:	eba1 040c 	sub.w	r4, r1, ip
 8000c64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c68:	fa1f f78c 	uxth.w	r7, ip
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb08 4416 	mls	r4, r8, r6, r4
 8000c7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c7e:	fb07 f006 	mul.w	r0, r7, r6
 8000c82:	4298      	cmp	r0, r3
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x11c>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x11a>
 8000c90:	4298      	cmp	r0, r3
 8000c92:	f200 80cd 	bhi.w	8000e30 <__udivmoddi4+0x2b4>
 8000c96:	4626      	mov	r6, r4
 8000c98:	1a1c      	subs	r4, r3, r0
 8000c9a:	fa1f f38e 	uxth.w	r3, lr
 8000c9e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ca2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ca6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000caa:	fb00 f707 	mul.w	r7, r0, r7
 8000cae:	429f      	cmp	r7, r3
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0x148>
 8000cb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x146>
 8000cbc:	429f      	cmp	r7, r3
 8000cbe:	f200 80b0 	bhi.w	8000e22 <__udivmoddi4+0x2a6>
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	1bdb      	subs	r3, r3, r7
 8000cc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cca:	e7a5      	b.n	8000c18 <__udivmoddi4+0x9c>
 8000ccc:	f1c1 0620 	rsb	r6, r1, #32
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cdc:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce0:	ea43 030c 	orr.w	r3, r3, ip
 8000ce4:	40f4      	lsrs	r4, r6
 8000ce6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cea:	0c38      	lsrs	r0, r7, #16
 8000cec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cf4:	fa1f fc87 	uxth.w	ip, r7
 8000cf8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cfc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d00:	fb0e f90c 	mul.w	r9, lr, ip
 8000d04:	45a1      	cmp	r9, r4
 8000d06:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0a:	d90a      	bls.n	8000d22 <__udivmoddi4+0x1a6>
 8000d0c:	193c      	adds	r4, r7, r4
 8000d0e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d12:	f080 8084 	bcs.w	8000e1e <__udivmoddi4+0x2a2>
 8000d16:	45a1      	cmp	r9, r4
 8000d18:	f240 8081 	bls.w	8000e1e <__udivmoddi4+0x2a2>
 8000d1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d20:	443c      	add	r4, r7
 8000d22:	eba4 0409 	sub.w	r4, r4, r9
 8000d26:	fa1f f983 	uxth.w	r9, r3
 8000d2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d907      	bls.n	8000d4e <__udivmoddi4+0x1d2>
 8000d3e:	193c      	adds	r4, r7, r4
 8000d40:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d44:	d267      	bcs.n	8000e16 <__udivmoddi4+0x29a>
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0x29a>
 8000d4a:	3b02      	subs	r3, #2
 8000d4c:	443c      	add	r4, r7
 8000d4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d52:	fba0 9302 	umull	r9, r3, r0, r2
 8000d56:	eba4 040c 	sub.w	r4, r4, ip
 8000d5a:	429c      	cmp	r4, r3
 8000d5c:	46ce      	mov	lr, r9
 8000d5e:	469c      	mov	ip, r3
 8000d60:	d351      	bcc.n	8000e06 <__udivmoddi4+0x28a>
 8000d62:	d04e      	beq.n	8000e02 <__udivmoddi4+0x286>
 8000d64:	b155      	cbz	r5, 8000d7c <__udivmoddi4+0x200>
 8000d66:	ebb8 030e 	subs.w	r3, r8, lr
 8000d6a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d72:	40cb      	lsrs	r3, r1
 8000d74:	431e      	orrs	r6, r3
 8000d76:	40cc      	lsrs	r4, r1
 8000d78:	e9c5 6400 	strd	r6, r4, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e750      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f103 	lsr.w	r1, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d90:	4094      	lsls	r4, r2
 8000d92:	430c      	orrs	r4, r1
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d9c:	fa1f f78c 	uxth.w	r7, ip
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3110 	mls	r1, r8, r0, r3
 8000da8:	0c23      	lsrs	r3, r4, #16
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f107 	mul.w	r1, r0, r7
 8000db2:	4299      	cmp	r1, r3
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x24c>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dbe:	d22c      	bcs.n	8000e1a <__udivmoddi4+0x29e>
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d92a      	bls.n	8000e1a <__udivmoddi4+0x29e>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd0:	fb08 3311 	mls	r3, r8, r1, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb01 f307 	mul.w	r3, r1, r7
 8000ddc:	42a3      	cmp	r3, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x276>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000de8:	d213      	bcs.n	8000e12 <__udivmoddi4+0x296>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d911      	bls.n	8000e12 <__udivmoddi4+0x296>
 8000dee:	3902      	subs	r1, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	1ae4      	subs	r4, r4, r3
 8000df4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000df8:	e739      	b.n	8000c6e <__udivmoddi4+0xf2>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	e6f0      	b.n	8000be0 <__udivmoddi4+0x64>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e706      	b.n	8000c10 <__udivmoddi4+0x94>
 8000e02:	45c8      	cmp	r8, r9
 8000e04:	d2ae      	bcs.n	8000d64 <__udivmoddi4+0x1e8>
 8000e06:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e0a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e0e:	3801      	subs	r0, #1
 8000e10:	e7a8      	b.n	8000d64 <__udivmoddi4+0x1e8>
 8000e12:	4631      	mov	r1, r6
 8000e14:	e7ed      	b.n	8000df2 <__udivmoddi4+0x276>
 8000e16:	4603      	mov	r3, r0
 8000e18:	e799      	b.n	8000d4e <__udivmoddi4+0x1d2>
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	e7d4      	b.n	8000dc8 <__udivmoddi4+0x24c>
 8000e1e:	46d6      	mov	lr, sl
 8000e20:	e77f      	b.n	8000d22 <__udivmoddi4+0x1a6>
 8000e22:	4463      	add	r3, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	e74d      	b.n	8000cc4 <__udivmoddi4+0x148>
 8000e28:	4606      	mov	r6, r0
 8000e2a:	4623      	mov	r3, r4
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	e70f      	b.n	8000c50 <__udivmoddi4+0xd4>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	e730      	b.n	8000c98 <__udivmoddi4+0x11c>
 8000e36:	bf00      	nop

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08c      	sub	sp, #48	@ 0x30
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2220      	movs	r2, #32
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f010 ff65 	bl	8011d24 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e5a:	4b33      	ldr	r3, [pc, #204]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000e5c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e60:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e62:	4b31      	ldr	r3, [pc, #196]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000e64:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e68:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e70:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e76:	4b2c      	ldr	r3, [pc, #176]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e82:	4b29      	ldr	r3, [pc, #164]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000e84:	2204      	movs	r2, #4
 8000e86:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e88:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e8e:	4b26      	ldr	r3, [pc, #152]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e94:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e9a:	4b23      	ldr	r3, [pc, #140]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8000ea2:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000ea4:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 8000ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000eac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eb0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eba:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec8:	4817      	ldr	r0, [pc, #92]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000eca:	f001 fff7 	bl	8002ebc <HAL_ADC_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000ed4:	f001 fb74 	bl	80025c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000edc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4811      	ldr	r0, [pc, #68]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000ee4:	f003 ffd6 	bl	8004e94 <HAL_ADCEx_MultiModeConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000eee:	f001 fb67 	bl	80025c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <MX_ADC1_Init+0xf0>)
 8000ef4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef6:	2306      	movs	r3, #6
 8000ef8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000efe:	237f      	movs	r3, #127	@ 0x7f
 8000f00:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f02:	2304      	movs	r3, #4
 8000f04:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4806      	ldr	r0, [pc, #24]	@ (8000f28 <MX_ADC1_Init+0xec>)
 8000f10:	f002 fd86 	bl	8003a20 <HAL_ADC_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f1a:	f001 fb51 	bl	80025c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	3730      	adds	r7, #48	@ 0x30
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000020c 	.word	0x2000020c
 8000f2c:	04300002 	.word	0x04300002

08000f30 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f36:	463b      	mov	r3, r7
 8000f38:	2220      	movs	r2, #32
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f010 fef1 	bl	8011d24 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f42:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000f44:	4a2c      	ldr	r2, [pc, #176]	@ (8000ff8 <MX_ADC2_Init+0xc8>)
 8000f46:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000f4a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f4e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f50:	4b28      	ldr	r3, [pc, #160]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f56:	4b27      	ldr	r3, [pc, #156]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000f5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f62:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f68:	4b22      	ldr	r3, [pc, #136]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8000f88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000f8a:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 8000f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000f90:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000f92:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8000f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000f98:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fae:	4811      	ldr	r0, [pc, #68]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000fb0:	f001 ff84 	bl	8002ebc <HAL_ADC_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000fba:	f001 fb01 	bl	80025c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <MX_ADC2_Init+0xcc>)
 8000fc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fca:	237f      	movs	r3, #127	@ 0x7f
 8000fcc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	@ (8000ff4 <MX_ADC2_Init+0xc4>)
 8000fdc:	f002 fd20 	bl	8003a20 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000fe6:	f001 faeb 	bl	80025c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	3720      	adds	r7, #32
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000278 	.word	0x20000278
 8000ff8:	50000100 	.word	0x50000100
 8000ffc:	0c900008 	.word	0x0c900008

08001000 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	@ 0x30
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2220      	movs	r2, #32
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f010 fe83 	bl	8011d24 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800101e:	4b32      	ldr	r3, [pc, #200]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 8001020:	4a32      	ldr	r2, [pc, #200]	@ (80010ec <MX_ADC3_Init+0xec>)
 8001022:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001024:	4b30      	ldr	r3, [pc, #192]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 8001026:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800102a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800102c:	4b2e      	ldr	r3, [pc, #184]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001032:	4b2d      	ldr	r3, [pc, #180]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001038:	4b2b      	ldr	r3, [pc, #172]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800103e:	4b2a      	ldr	r3, [pc, #168]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001044:	4b28      	ldr	r3, [pc, #160]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 8001046:	2204      	movs	r2, #4
 8001048:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800104a:	4b27      	ldr	r3, [pc, #156]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 800104c:	2200      	movs	r2, #0
 800104e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001050:	4b25      	ldr	r3, [pc, #148]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 8001052:	2200      	movs	r2, #0
 8001054:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001056:	4b24      	ldr	r3, [pc, #144]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 8001058:	2201      	movs	r2, #1
 800105a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800105c:	4b22      	ldr	r3, [pc, #136]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8001064:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 8001066:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 800106a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800106c:	4b1e      	ldr	r3, [pc, #120]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 800106e:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8001072:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001074:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800107c:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 800107e:	2200      	movs	r2, #0
 8001080:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800108a:	4817      	ldr	r0, [pc, #92]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 800108c:	f001 ff16 	bl	8002ebc <HAL_ADC_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8001096:	f001 fa93 	bl	80025c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800109e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a2:	4619      	mov	r1, r3
 80010a4:	4810      	ldr	r0, [pc, #64]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 80010a6:	f003 fef5 	bl	8004e94 <HAL_ADCEx_MultiModeConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80010b0:	f001 fa86 	bl	80025c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <MX_ADC3_Init+0xf0>)
 80010b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b8:	2306      	movs	r3, #6
 80010ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010c0:	237f      	movs	r3, #127	@ 0x7f
 80010c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010c4:	2304      	movs	r3, #4
 80010c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_ADC3_Init+0xe8>)
 80010d2:	f002 fca5 	bl	8003a20 <HAL_ADC_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 80010dc:	f001 fa70 	bl	80025c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3730      	adds	r7, #48	@ 0x30
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200002e4 	.word	0x200002e4
 80010ec:	50000400 	.word	0x50000400
 80010f0:	04300002 	.word	0x04300002

080010f4 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010fa:	463b      	mov	r3, r7
 80010fc:	2220      	movs	r2, #32
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f010 fe0f 	bl	8011d24 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001106:	4b2c      	ldr	r3, [pc, #176]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 8001108:	4a2c      	ldr	r2, [pc, #176]	@ (80011bc <MX_ADC4_Init+0xc8>)
 800110a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800110c:	4b2a      	ldr	r3, [pc, #168]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 800110e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001112:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001114:	4b28      	ldr	r3, [pc, #160]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111a:	4b27      	ldr	r3, [pc, #156]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001120:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001126:	4b24      	ldr	r3, [pc, #144]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112c:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 800112e:	2204      	movs	r2, #4
 8001130:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001132:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 8001134:	2200      	movs	r2, #0
 8001136:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001138:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 800113a:	2200      	movs	r2, #0
 800113c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800113e:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 8001140:	2201      	movs	r2, #1
 8001142:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001144:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 800114c:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 800114e:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 8001152:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 8001156:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800115a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 8001166:	2200      	movs	r2, #0
 8001168:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 800116a:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001172:	4811      	ldr	r0, [pc, #68]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 8001174:	f001 fea2 	bl	8002ebc <HAL_ADC_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_ADC4_Init+0x8e>
  {
    Error_Handler();
 800117e:	f001 fa1f 	bl	80025c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <MX_ADC4_Init+0xcc>)
 8001184:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001186:	2306      	movs	r3, #6
 8001188:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800118e:	237f      	movs	r3, #127	@ 0x7f
 8001190:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001192:	2304      	movs	r3, #4
 8001194:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	@ (80011b8 <MX_ADC4_Init+0xc4>)
 80011a0:	f002 fc3e 	bl	8003a20 <HAL_ADC_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC4_Init+0xba>
  {
    Error_Handler();
 80011aa:	f001 fa09 	bl	80025c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3720      	adds	r7, #32
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000350 	.word	0x20000350
 80011bc:	50000500 	.word	0x50000500
 80011c0:	04300002 	.word	0x04300002

080011c4 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	463b      	mov	r3, r7
 80011cc:	2220      	movs	r2, #32
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f010 fda7 	bl	8011d24 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80011d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001288 <MX_ADC5_Init+0xc4>)
 80011d8:	4a2c      	ldr	r2, [pc, #176]	@ (800128c <MX_ADC5_Init+0xc8>)
 80011da:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <MX_ADC5_Init+0xc4>)
 80011de:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011e2:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80011e4:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <MX_ADC5_Init+0xc4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ea:	4b27      	ldr	r3, [pc, #156]	@ (8001288 <MX_ADC5_Init+0xc4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80011f0:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <MX_ADC5_Init+0xc4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011f6:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <MX_ADC5_Init+0xc4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011fc:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <MX_ADC5_Init+0xc4>)
 80011fe:	2204      	movs	r2, #4
 8001200:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001202:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <MX_ADC5_Init+0xc4>)
 8001204:	2200      	movs	r2, #0
 8001206:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001208:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <MX_ADC5_Init+0xc4>)
 800120a:	2200      	movs	r2, #0
 800120c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800120e:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <MX_ADC5_Init+0xc4>)
 8001210:	2201      	movs	r2, #1
 8001212:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001214:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <MX_ADC5_Init+0xc4>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 800121c:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <MX_ADC5_Init+0xc4>)
 800121e:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 8001222:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001224:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <MX_ADC5_Init+0xc4>)
 8001226:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800122a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 800122c:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <MX_ADC5_Init+0xc4>)
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <MX_ADC5_Init+0xc4>)
 8001236:	2200      	movs	r2, #0
 8001238:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 800123a:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <MX_ADC5_Init+0xc4>)
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001242:	4811      	ldr	r0, [pc, #68]	@ (8001288 <MX_ADC5_Init+0xc4>)
 8001244:	f001 fe3a 	bl	8002ebc <HAL_ADC_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC5_Init+0x8e>
  {
    Error_Handler();
 800124e:	f001 f9b7 	bl	80025c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001252:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <MX_ADC5_Init+0xcc>)
 8001254:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001256:	2306      	movs	r3, #6
 8001258:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800125e:	237f      	movs	r3, #127	@ 0x7f
 8001260:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001262:	2304      	movs	r3, #4
 8001264:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800126a:	463b      	mov	r3, r7
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	@ (8001288 <MX_ADC5_Init+0xc4>)
 8001270:	f002 fbd6 	bl	8003a20 <HAL_ADC_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_ADC5_Init+0xba>
  {
    Error_Handler();
 800127a:	f001 f9a1 	bl	80025c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	3720      	adds	r7, #32
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200003bc 	.word	0x200003bc
 800128c:	50000600 	.word	0x50000600
 8001290:	19200040 	.word	0x19200040

08001294 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b0a6      	sub	sp, #152	@ 0x98
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012b0:	2254      	movs	r2, #84	@ 0x54
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f010 fd35 	bl	8011d24 <memset>
  if(adcHandle->Instance==ADC1)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012c2:	d16c      	bne.n	800139e <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012c8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012ca:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012ce:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012d4:	4618      	mov	r0, r3
 80012d6:	f008 fff7 	bl	800a2c8 <HAL_RCCEx_PeriphCLKConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012e0:	f001 f96e 	bl	80025c0 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012e4:	4ba0      	ldr	r3, [pc, #640]	@ (8001568 <HAL_ADC_MspInit+0x2d4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3301      	adds	r3, #1
 80012ea:	4a9f      	ldr	r2, [pc, #636]	@ (8001568 <HAL_ADC_MspInit+0x2d4>)
 80012ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012ee:	4b9e      	ldr	r3, [pc, #632]	@ (8001568 <HAL_ADC_MspInit+0x2d4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d10b      	bne.n	800130e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012f6:	4b9d      	ldr	r3, [pc, #628]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	4a9c      	ldr	r2, [pc, #624]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 80012fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001302:	4b9a      	ldr	r3, [pc, #616]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800130c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b97      	ldr	r3, [pc, #604]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	4a96      	ldr	r2, [pc, #600]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131a:	4b94      	ldr	r3, [pc, #592]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001326:	2301      	movs	r3, #1
 8001328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132c:	2303      	movs	r3, #3
 800132e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001342:	f004 fc33 	bl	8005bac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001346:	4b8a      	ldr	r3, [pc, #552]	@ (8001570 <HAL_ADC_MspInit+0x2dc>)
 8001348:	4a8a      	ldr	r2, [pc, #552]	@ (8001574 <HAL_ADC_MspInit+0x2e0>)
 800134a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800134c:	4b88      	ldr	r3, [pc, #544]	@ (8001570 <HAL_ADC_MspInit+0x2dc>)
 800134e:	2205      	movs	r2, #5
 8001350:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001352:	4b87      	ldr	r3, [pc, #540]	@ (8001570 <HAL_ADC_MspInit+0x2dc>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001358:	4b85      	ldr	r3, [pc, #532]	@ (8001570 <HAL_ADC_MspInit+0x2dc>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800135e:	4b84      	ldr	r3, [pc, #528]	@ (8001570 <HAL_ADC_MspInit+0x2dc>)
 8001360:	2280      	movs	r2, #128	@ 0x80
 8001362:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001364:	4b82      	ldr	r3, [pc, #520]	@ (8001570 <HAL_ADC_MspInit+0x2dc>)
 8001366:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800136a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800136c:	4b80      	ldr	r3, [pc, #512]	@ (8001570 <HAL_ADC_MspInit+0x2dc>)
 800136e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001372:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001374:	4b7e      	ldr	r3, [pc, #504]	@ (8001570 <HAL_ADC_MspInit+0x2dc>)
 8001376:	2220      	movs	r2, #32
 8001378:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800137a:	4b7d      	ldr	r3, [pc, #500]	@ (8001570 <HAL_ADC_MspInit+0x2dc>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001380:	487b      	ldr	r0, [pc, #492]	@ (8001570 <HAL_ADC_MspInit+0x2dc>)
 8001382:	f004 f8a1 	bl	80054c8 <HAL_DMA_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 800138c:	f001 f918 	bl	80025c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a77      	ldr	r2, [pc, #476]	@ (8001570 <HAL_ADC_MspInit+0x2dc>)
 8001394:	655a      	str	r2, [r3, #84]	@ 0x54
 8001396:	4a76      	ldr	r2, [pc, #472]	@ (8001570 <HAL_ADC_MspInit+0x2dc>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800139c:	e1df      	b.n	800175e <HAL_ADC_MspInit+0x4ca>
  else if(adcHandle->Instance==ADC2)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a75      	ldr	r2, [pc, #468]	@ (8001578 <HAL_ADC_MspInit+0x2e4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d16c      	bne.n	8001482 <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013ac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013ae:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013b2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013b8:	4618      	mov	r0, r3
 80013ba:	f008 ff85 	bl	800a2c8 <HAL_RCCEx_PeriphCLKConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 80013c4:	f001 f8fc 	bl	80025c0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013c8:	4b67      	ldr	r3, [pc, #412]	@ (8001568 <HAL_ADC_MspInit+0x2d4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3301      	adds	r3, #1
 80013ce:	4a66      	ldr	r2, [pc, #408]	@ (8001568 <HAL_ADC_MspInit+0x2d4>)
 80013d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013d2:	4b65      	ldr	r3, [pc, #404]	@ (8001568 <HAL_ADC_MspInit+0x2d4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d10b      	bne.n	80013f2 <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013da:	4b64      	ldr	r3, [pc, #400]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	4a63      	ldr	r2, [pc, #396]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 80013e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e6:	4b61      	ldr	r3, [pc, #388]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b5e      	ldr	r3, [pc, #376]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	4a5d      	ldr	r2, [pc, #372]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fe:	4b5b      	ldr	r3, [pc, #364]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	623b      	str	r3, [r7, #32]
 8001408:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800140a:	2340      	movs	r3, #64	@ 0x40
 800140c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001410:	2303      	movs	r3, #3
 8001412:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001426:	f004 fbc1 	bl	8005bac <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800142a:	4b54      	ldr	r3, [pc, #336]	@ (800157c <HAL_ADC_MspInit+0x2e8>)
 800142c:	4a54      	ldr	r2, [pc, #336]	@ (8001580 <HAL_ADC_MspInit+0x2ec>)
 800142e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001430:	4b52      	ldr	r3, [pc, #328]	@ (800157c <HAL_ADC_MspInit+0x2e8>)
 8001432:	2224      	movs	r2, #36	@ 0x24
 8001434:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001436:	4b51      	ldr	r3, [pc, #324]	@ (800157c <HAL_ADC_MspInit+0x2e8>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800143c:	4b4f      	ldr	r3, [pc, #316]	@ (800157c <HAL_ADC_MspInit+0x2e8>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001442:	4b4e      	ldr	r3, [pc, #312]	@ (800157c <HAL_ADC_MspInit+0x2e8>)
 8001444:	2280      	movs	r2, #128	@ 0x80
 8001446:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001448:	4b4c      	ldr	r3, [pc, #304]	@ (800157c <HAL_ADC_MspInit+0x2e8>)
 800144a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800144e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001450:	4b4a      	ldr	r3, [pc, #296]	@ (800157c <HAL_ADC_MspInit+0x2e8>)
 8001452:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001456:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001458:	4b48      	ldr	r3, [pc, #288]	@ (800157c <HAL_ADC_MspInit+0x2e8>)
 800145a:	2220      	movs	r2, #32
 800145c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800145e:	4b47      	ldr	r3, [pc, #284]	@ (800157c <HAL_ADC_MspInit+0x2e8>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001464:	4845      	ldr	r0, [pc, #276]	@ (800157c <HAL_ADC_MspInit+0x2e8>)
 8001466:	f004 f82f 	bl	80054c8 <HAL_DMA_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8001470:	f001 f8a6 	bl	80025c0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a41      	ldr	r2, [pc, #260]	@ (800157c <HAL_ADC_MspInit+0x2e8>)
 8001478:	655a      	str	r2, [r3, #84]	@ 0x54
 800147a:	4a40      	ldr	r2, [pc, #256]	@ (800157c <HAL_ADC_MspInit+0x2e8>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001480:	e16d      	b.n	800175e <HAL_ADC_MspInit+0x4ca>
  else if(adcHandle->Instance==ADC3)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a3f      	ldr	r2, [pc, #252]	@ (8001584 <HAL_ADC_MspInit+0x2f0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	f040 8085 	bne.w	8001598 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800148e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001492:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001494:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001498:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800149a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800149e:	4618      	mov	r0, r3
 80014a0:	f008 ff12 	bl	800a2c8 <HAL_RCCEx_PeriphCLKConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 80014aa:	f001 f889 	bl	80025c0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014ae:	4b36      	ldr	r3, [pc, #216]	@ (8001588 <HAL_ADC_MspInit+0x2f4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	4a34      	ldr	r2, [pc, #208]	@ (8001588 <HAL_ADC_MspInit+0x2f4>)
 80014b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014b8:	4b33      	ldr	r3, [pc, #204]	@ (8001588 <HAL_ADC_MspInit+0x2f4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d10b      	bne.n	80014d8 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014c0:	4b2a      	ldr	r3, [pc, #168]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c4:	4a29      	ldr	r2, [pc, #164]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 80014c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014cc:	4b27      	ldr	r3, [pc, #156]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d8:	4b24      	ldr	r3, [pc, #144]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 80014da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014dc:	4a23      	ldr	r2, [pc, #140]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e4:	4b21      	ldr	r3, [pc, #132]	@ (800156c <HAL_ADC_MspInit+0x2d8>)
 80014e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014f0:	2302      	movs	r3, #2
 80014f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f6:	2303      	movs	r3, #3
 80014f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001502:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001506:	4619      	mov	r1, r3
 8001508:	4820      	ldr	r0, [pc, #128]	@ (800158c <HAL_ADC_MspInit+0x2f8>)
 800150a:	f004 fb4f 	bl	8005bac <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 800150e:	4b20      	ldr	r3, [pc, #128]	@ (8001590 <HAL_ADC_MspInit+0x2fc>)
 8001510:	4a20      	ldr	r2, [pc, #128]	@ (8001594 <HAL_ADC_MspInit+0x300>)
 8001512:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001514:	4b1e      	ldr	r3, [pc, #120]	@ (8001590 <HAL_ADC_MspInit+0x2fc>)
 8001516:	2225      	movs	r2, #37	@ 0x25
 8001518:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800151a:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <HAL_ADC_MspInit+0x2fc>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001520:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <HAL_ADC_MspInit+0x2fc>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001526:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <HAL_ADC_MspInit+0x2fc>)
 8001528:	2280      	movs	r2, #128	@ 0x80
 800152a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <HAL_ADC_MspInit+0x2fc>)
 800152e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001532:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001534:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <HAL_ADC_MspInit+0x2fc>)
 8001536:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800153a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800153c:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <HAL_ADC_MspInit+0x2fc>)
 800153e:	2220      	movs	r2, #32
 8001540:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001542:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <HAL_ADC_MspInit+0x2fc>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001548:	4811      	ldr	r0, [pc, #68]	@ (8001590 <HAL_ADC_MspInit+0x2fc>)
 800154a:	f003 ffbd 	bl	80054c8 <HAL_DMA_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_ADC_MspInit+0x2c4>
      Error_Handler();
 8001554:	f001 f834 	bl	80025c0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <HAL_ADC_MspInit+0x2fc>)
 800155c:	655a      	str	r2, [r3, #84]	@ 0x54
 800155e:	4a0c      	ldr	r2, [pc, #48]	@ (8001590 <HAL_ADC_MspInit+0x2fc>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001564:	e0fb      	b.n	800175e <HAL_ADC_MspInit+0x4ca>
 8001566:	bf00      	nop
 8001568:	20000608 	.word	0x20000608
 800156c:	40021000 	.word	0x40021000
 8001570:	20000428 	.word	0x20000428
 8001574:	40020008 	.word	0x40020008
 8001578:	50000100 	.word	0x50000100
 800157c:	20000488 	.word	0x20000488
 8001580:	4002001c 	.word	0x4002001c
 8001584:	50000400 	.word	0x50000400
 8001588:	2000060c 	.word	0x2000060c
 800158c:	48000400 	.word	0x48000400
 8001590:	200004e8 	.word	0x200004e8
 8001594:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a72      	ldr	r2, [pc, #456]	@ (8001768 <HAL_ADC_MspInit+0x4d4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d16c      	bne.n	800167c <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015a6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80015ac:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015b2:	4618      	mov	r0, r3
 80015b4:	f008 fe88 	bl	800a2c8 <HAL_RCCEx_PeriphCLKConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 80015be:	f000 ffff 	bl	80025c0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015c2:	4b6a      	ldr	r3, [pc, #424]	@ (800176c <HAL_ADC_MspInit+0x4d8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	4a68      	ldr	r2, [pc, #416]	@ (800176c <HAL_ADC_MspInit+0x4d8>)
 80015ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015cc:	4b67      	ldr	r3, [pc, #412]	@ (800176c <HAL_ADC_MspInit+0x4d8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d10b      	bne.n	80015ec <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80015d4:	4b66      	ldr	r3, [pc, #408]	@ (8001770 <HAL_ADC_MspInit+0x4dc>)
 80015d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d8:	4a65      	ldr	r2, [pc, #404]	@ (8001770 <HAL_ADC_MspInit+0x4dc>)
 80015da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e0:	4b63      	ldr	r3, [pc, #396]	@ (8001770 <HAL_ADC_MspInit+0x4dc>)
 80015e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ec:	4b60      	ldr	r3, [pc, #384]	@ (8001770 <HAL_ADC_MspInit+0x4dc>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f0:	4a5f      	ldr	r2, [pc, #380]	@ (8001770 <HAL_ADC_MspInit+0x4dc>)
 80015f2:	f043 0310 	orr.w	r3, r3, #16
 80015f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f8:	4b5d      	ldr	r3, [pc, #372]	@ (8001770 <HAL_ADC_MspInit+0x4dc>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fc:	f003 0310 	and.w	r3, r3, #16
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001604:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001608:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160c:	2303      	movs	r3, #3
 800160e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001618:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800161c:	4619      	mov	r1, r3
 800161e:	4855      	ldr	r0, [pc, #340]	@ (8001774 <HAL_ADC_MspInit+0x4e0>)
 8001620:	f004 fac4 	bl	8005bac <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8001624:	4b54      	ldr	r3, [pc, #336]	@ (8001778 <HAL_ADC_MspInit+0x4e4>)
 8001626:	4a55      	ldr	r2, [pc, #340]	@ (800177c <HAL_ADC_MspInit+0x4e8>)
 8001628:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800162a:	4b53      	ldr	r3, [pc, #332]	@ (8001778 <HAL_ADC_MspInit+0x4e4>)
 800162c:	2226      	movs	r2, #38	@ 0x26
 800162e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001630:	4b51      	ldr	r3, [pc, #324]	@ (8001778 <HAL_ADC_MspInit+0x4e4>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001636:	4b50      	ldr	r3, [pc, #320]	@ (8001778 <HAL_ADC_MspInit+0x4e4>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800163c:	4b4e      	ldr	r3, [pc, #312]	@ (8001778 <HAL_ADC_MspInit+0x4e4>)
 800163e:	2280      	movs	r2, #128	@ 0x80
 8001640:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001642:	4b4d      	ldr	r3, [pc, #308]	@ (8001778 <HAL_ADC_MspInit+0x4e4>)
 8001644:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001648:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800164a:	4b4b      	ldr	r3, [pc, #300]	@ (8001778 <HAL_ADC_MspInit+0x4e4>)
 800164c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001650:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001652:	4b49      	ldr	r3, [pc, #292]	@ (8001778 <HAL_ADC_MspInit+0x4e4>)
 8001654:	2220      	movs	r2, #32
 8001656:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001658:	4b47      	ldr	r3, [pc, #284]	@ (8001778 <HAL_ADC_MspInit+0x4e4>)
 800165a:	2200      	movs	r2, #0
 800165c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800165e:	4846      	ldr	r0, [pc, #280]	@ (8001778 <HAL_ADC_MspInit+0x4e4>)
 8001660:	f003 ff32 	bl	80054c8 <HAL_DMA_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 800166a:	f000 ffa9 	bl	80025c0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a41      	ldr	r2, [pc, #260]	@ (8001778 <HAL_ADC_MspInit+0x4e4>)
 8001672:	655a      	str	r2, [r3, #84]	@ 0x54
 8001674:	4a40      	ldr	r2, [pc, #256]	@ (8001778 <HAL_ADC_MspInit+0x4e4>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800167a:	e070      	b.n	800175e <HAL_ADC_MspInit+0x4ca>
  else if(adcHandle->Instance==ADC5)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a3f      	ldr	r2, [pc, #252]	@ (8001780 <HAL_ADC_MspInit+0x4ec>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d16b      	bne.n	800175e <HAL_ADC_MspInit+0x4ca>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001686:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800168a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800168c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001690:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001692:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001696:	4618      	mov	r0, r3
 8001698:	f008 fe16 	bl	800a2c8 <HAL_RCCEx_PeriphCLKConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_ADC_MspInit+0x412>
      Error_Handler();
 80016a2:	f000 ff8d 	bl	80025c0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80016a6:	4b31      	ldr	r3, [pc, #196]	@ (800176c <HAL_ADC_MspInit+0x4d8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a2f      	ldr	r2, [pc, #188]	@ (800176c <HAL_ADC_MspInit+0x4d8>)
 80016ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80016b0:	4b2e      	ldr	r3, [pc, #184]	@ (800176c <HAL_ADC_MspInit+0x4d8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d10b      	bne.n	80016d0 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80016b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <HAL_ADC_MspInit+0x4dc>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001770 <HAL_ADC_MspInit+0x4dc>)
 80016be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <HAL_ADC_MspInit+0x4dc>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016d0:	4b27      	ldr	r3, [pc, #156]	@ (8001770 <HAL_ADC_MspInit+0x4dc>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d4:	4a26      	ldr	r2, [pc, #152]	@ (8001770 <HAL_ADC_MspInit+0x4dc>)
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016dc:	4b24      	ldr	r3, [pc, #144]	@ (8001770 <HAL_ADC_MspInit+0x4dc>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e0:	f003 0310 	and.w	r3, r3, #16
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f0:	2303      	movs	r3, #3
 80016f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016fc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001700:	4619      	mov	r1, r3
 8001702:	481c      	ldr	r0, [pc, #112]	@ (8001774 <HAL_ADC_MspInit+0x4e0>)
 8001704:	f004 fa52 	bl	8005bac <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8001708:	4b1e      	ldr	r3, [pc, #120]	@ (8001784 <HAL_ADC_MspInit+0x4f0>)
 800170a:	4a1f      	ldr	r2, [pc, #124]	@ (8001788 <HAL_ADC_MspInit+0x4f4>)
 800170c:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800170e:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <HAL_ADC_MspInit+0x4f0>)
 8001710:	2227      	movs	r2, #39	@ 0x27
 8001712:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <HAL_ADC_MspInit+0x4f0>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 800171a:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <HAL_ADC_MspInit+0x4f0>)
 800171c:	2200      	movs	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8001720:	4b18      	ldr	r3, [pc, #96]	@ (8001784 <HAL_ADC_MspInit+0x4f0>)
 8001722:	2280      	movs	r2, #128	@ 0x80
 8001724:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001726:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <HAL_ADC_MspInit+0x4f0>)
 8001728:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800172c:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <HAL_ADC_MspInit+0x4f0>)
 8001730:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001734:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001736:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <HAL_ADC_MspInit+0x4f0>)
 8001738:	2220      	movs	r2, #32
 800173a:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <HAL_ADC_MspInit+0x4f0>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8001742:	4810      	ldr	r0, [pc, #64]	@ (8001784 <HAL_ADC_MspInit+0x4f0>)
 8001744:	f003 fec0 	bl	80054c8 <HAL_DMA_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_ADC_MspInit+0x4be>
      Error_Handler();
 800174e:	f000 ff37 	bl	80025c0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a0b      	ldr	r2, [pc, #44]	@ (8001784 <HAL_ADC_MspInit+0x4f0>)
 8001756:	655a      	str	r2, [r3, #84]	@ 0x54
 8001758:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <HAL_ADC_MspInit+0x4f0>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800175e:	bf00      	nop
 8001760:	3798      	adds	r7, #152	@ 0x98
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	50000500 	.word	0x50000500
 800176c:	2000060c 	.word	0x2000060c
 8001770:	40021000 	.word	0x40021000
 8001774:	48001000 	.word	0x48001000
 8001778:	20000548 	.word	0x20000548
 800177c:	40020044 	.word	0x40020044
 8001780:	50000600 	.word	0x50000600
 8001784:	200005a8 	.word	0x200005a8
 8001788:	40020058 	.word	0x40020058

0800178c <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <MX_CORDIC_Init+0x20>)
 8001792:	4a07      	ldr	r2, [pc, #28]	@ (80017b0 <MX_CORDIC_Init+0x24>)
 8001794:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	@ (80017ac <MX_CORDIC_Init+0x20>)
 8001798:	f003 fd1a 	bl	80051d0 <HAL_CORDIC_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80017a2:	f000 ff0d 	bl	80025c0 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000610 	.word	0x20000610
 80017b0:	40020c00 	.word	0x40020c00

080017b4 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <HAL_CORDIC_MspInit+0x38>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d10b      	bne.n	80017de <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <HAL_CORDIC_MspInit+0x3c>)
 80017c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ca:	4a09      	ldr	r2, [pc, #36]	@ (80017f0 <HAL_CORDIC_MspInit+0x3c>)
 80017cc:	f043 0308 	orr.w	r3, r3, #8
 80017d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80017d2:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <HAL_CORDIC_MspInit+0x3c>)
 80017d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40020c00 	.word	0x40020c00
 80017f0:	40021000 	.word	0x40021000

080017f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80017fa:	4b2c      	ldr	r3, [pc, #176]	@ (80018ac <MX_DMA_Init+0xb8>)
 80017fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017fe:	4a2b      	ldr	r2, [pc, #172]	@ (80018ac <MX_DMA_Init+0xb8>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6493      	str	r3, [r2, #72]	@ 0x48
 8001806:	4b29      	ldr	r3, [pc, #164]	@ (80018ac <MX_DMA_Init+0xb8>)
 8001808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001812:	4b26      	ldr	r3, [pc, #152]	@ (80018ac <MX_DMA_Init+0xb8>)
 8001814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001816:	4a25      	ldr	r2, [pc, #148]	@ (80018ac <MX_DMA_Init+0xb8>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6493      	str	r3, [r2, #72]	@ 0x48
 800181e:	4b23      	ldr	r3, [pc, #140]	@ (80018ac <MX_DMA_Init+0xb8>)
 8001820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800182a:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <MX_DMA_Init+0xb8>)
 800182c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800182e:	4a1f      	ldr	r2, [pc, #124]	@ (80018ac <MX_DMA_Init+0xb8>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6493      	str	r3, [r2, #72]	@ 0x48
 8001836:	4b1d      	ldr	r3, [pc, #116]	@ (80018ac <MX_DMA_Init+0xb8>)
 8001838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2101      	movs	r1, #1
 8001846:	200b      	movs	r0, #11
 8001848:	f003 fdf0 	bl	800542c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800184c:	200b      	movs	r0, #11
 800184e:	f003 fe17 	bl	8005480 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2101      	movs	r1, #1
 8001856:	200c      	movs	r0, #12
 8001858:	f003 fde8 	bl	800542c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800185c:	200c      	movs	r0, #12
 800185e:	f003 fe0f 	bl	8005480 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 1, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2101      	movs	r1, #1
 8001866:	200d      	movs	r0, #13
 8001868:	f003 fde0 	bl	800542c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800186c:	200d      	movs	r0, #13
 800186e:	f003 fe07 	bl	8005480 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2101      	movs	r1, #1
 8001876:	200e      	movs	r0, #14
 8001878:	f003 fdd8 	bl	800542c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800187c:	200e      	movs	r0, #14
 800187e:	f003 fdff 	bl	8005480 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2101      	movs	r1, #1
 8001886:	200f      	movs	r0, #15
 8001888:	f003 fdd0 	bl	800542c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800188c:	200f      	movs	r0, #15
 800188e:	f003 fdf7 	bl	8005480 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	2038      	movs	r0, #56	@ 0x38
 8001898:	f003 fdc8 	bl	800542c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800189c:	2038      	movs	r0, #56	@ 0x38
 800189e:	f003 fdef 	bl	8005480 <HAL_NVIC_EnableIRQ>

}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000

080018b0 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08c      	sub	sp, #48	@ 0x30
 80018b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c6:	4b9e      	ldr	r3, [pc, #632]	@ (8001b40 <MX_GPIO_Init+0x290>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ca:	4a9d      	ldr	r2, [pc, #628]	@ (8001b40 <MX_GPIO_Init+0x290>)
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d2:	4b9b      	ldr	r3, [pc, #620]	@ (8001b40 <MX_GPIO_Init+0x290>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	4b98      	ldr	r3, [pc, #608]	@ (8001b40 <MX_GPIO_Init+0x290>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e2:	4a97      	ldr	r2, [pc, #604]	@ (8001b40 <MX_GPIO_Init+0x290>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ea:	4b95      	ldr	r3, [pc, #596]	@ (8001b40 <MX_GPIO_Init+0x290>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018f6:	4b92      	ldr	r3, [pc, #584]	@ (8001b40 <MX_GPIO_Init+0x290>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fa:	4a91      	ldr	r2, [pc, #580]	@ (8001b40 <MX_GPIO_Init+0x290>)
 80018fc:	f043 0320 	orr.w	r3, r3, #32
 8001900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001902:	4b8f      	ldr	r3, [pc, #572]	@ (8001b40 <MX_GPIO_Init+0x290>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001906:	f003 0320 	and.w	r3, r3, #32
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800190e:	4b8c      	ldr	r3, [pc, #560]	@ (8001b40 <MX_GPIO_Init+0x290>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001912:	4a8b      	ldr	r2, [pc, #556]	@ (8001b40 <MX_GPIO_Init+0x290>)
 8001914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191a:	4b89      	ldr	r3, [pc, #548]	@ (8001b40 <MX_GPIO_Init+0x290>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b86      	ldr	r3, [pc, #536]	@ (8001b40 <MX_GPIO_Init+0x290>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192a:	4a85      	ldr	r2, [pc, #532]	@ (8001b40 <MX_GPIO_Init+0x290>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001932:	4b83      	ldr	r3, [pc, #524]	@ (8001b40 <MX_GPIO_Init+0x290>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	4b80      	ldr	r3, [pc, #512]	@ (8001b40 <MX_GPIO_Init+0x290>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001942:	4a7f      	ldr	r2, [pc, #508]	@ (8001b40 <MX_GPIO_Init+0x290>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194a:	4b7d      	ldr	r3, [pc, #500]	@ (8001b40 <MX_GPIO_Init+0x290>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001956:	4b7a      	ldr	r3, [pc, #488]	@ (8001b40 <MX_GPIO_Init+0x290>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	4a79      	ldr	r2, [pc, #484]	@ (8001b40 <MX_GPIO_Init+0x290>)
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001962:	4b77      	ldr	r3, [pc, #476]	@ (8001b40 <MX_GPIO_Init+0x290>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800196e:	2200      	movs	r2, #0
 8001970:	f64b 413c 	movw	r1, #48188	@ 0xbc3c
 8001974:	4873      	ldr	r0, [pc, #460]	@ (8001b44 <MX_GPIO_Init+0x294>)
 8001976:	f004 fb6d 	bl	8006054 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800197a:	2200      	movs	r2, #0
 800197c:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8001980:	4871      	ldr	r0, [pc, #452]	@ (8001b48 <MX_GPIO_Init+0x298>)
 8001982:	f004 fb67 	bl	8006054 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800198c:	486f      	ldr	r0, [pc, #444]	@ (8001b4c <MX_GPIO_Init+0x29c>)
 800198e:	f004 fb61 	bl	8006054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001992:	2200      	movs	r2, #0
 8001994:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001998:	486d      	ldr	r0, [pc, #436]	@ (8001b50 <MX_GPIO_Init+0x2a0>)
 800199a:	f004 fb5b 	bl	8006054 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	210f      	movs	r1, #15
 80019a2:	486b      	ldr	r0, [pc, #428]	@ (8001b50 <MX_GPIO_Init+0x2a0>)
 80019a4:	f004 fb56 	bl	8006054 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE10 PE11 PE12 PE13
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80019a8:	f64b 433c 	movw	r3, #48188	@ 0xbc3c
 80019ac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	4619      	mov	r1, r3
 80019c0:	4860      	ldr	r0, [pc, #384]	@ (8001b44 <MX_GPIO_Init+0x294>)
 80019c2:	f004 f8f3 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE9 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_0
 80019c6:	f240 23c3 	movw	r3, #707	@ 0x2c3
 80019ca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019cc:	2303      	movs	r3, #3
 80019ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4619      	mov	r1, r3
 80019da:	485a      	ldr	r0, [pc, #360]	@ (8001b44 <MX_GPIO_Init+0x294>)
 80019dc:	f004 f8e6 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	4853      	ldr	r0, [pc, #332]	@ (8001b48 <MX_GPIO_Init+0x298>)
 80019fa:	f004 f8d7 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019fe:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a04:	2303      	movs	r3, #3
 8001a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4619      	mov	r1, r3
 8001a12:	484d      	ldr	r0, [pc, #308]	@ (8001b48 <MX_GPIO_Init+0x298>)
 8001a14:	f004 f8ca 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF9 PF10 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_2;
 8001a18:	f240 6304 	movw	r3, #1540	@ 0x604
 8001a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4849      	ldr	r0, [pc, #292]	@ (8001b54 <MX_GPIO_Init+0x2a4>)
 8001a2e:	f004 f8bd 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	4619      	mov	r1, r3
 8001a46:	4844      	ldr	r0, [pc, #272]	@ (8001b58 <MX_GPIO_Init+0x2a8>)
 8001a48:	f004 f8b0 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a4c:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001a50:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a52:	2301      	movs	r3, #1
 8001a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	4619      	mov	r1, r3
 8001a64:	4838      	ldr	r0, [pc, #224]	@ (8001b48 <MX_GPIO_Init+0x298>)
 8001a66:	f004 f8a1 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA7 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001a6a:	f248 63be 	movw	r3, #34494	@ 0x86be
 8001a6e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a70:	2303      	movs	r3, #3
 8001a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a82:	f004 f893 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8001a86:	f640 73fd 	movw	r3, #4093	@ 0xffd
 8001a8a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	482c      	ldr	r0, [pc, #176]	@ (8001b4c <MX_GPIO_Init+0x29c>)
 8001a9c:	f004 f886 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001aa0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4824      	ldr	r0, [pc, #144]	@ (8001b4c <MX_GPIO_Init+0x29c>)
 8001aba:	f004 f877 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001abe:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	481d      	ldr	r0, [pc, #116]	@ (8001b4c <MX_GPIO_Init+0x29c>)
 8001ad8:	f004 f868 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001adc:	f64f 730f 	movw	r3, #65295	@ 0xff0f
 8001ae0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	4816      	ldr	r0, [pc, #88]	@ (8001b50 <MX_GPIO_Init+0x2a0>)
 8001af6:	f004 f859 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001afa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b1a:	f004 f847 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b1e:	23f0      	movs	r3, #240	@ 0xf0
 8001b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4807      	ldr	r0, [pc, #28]	@ (8001b50 <MX_GPIO_Init+0x2a0>)
 8001b32:	f004 f83b 	bl	8005bac <HAL_GPIO_Init>

}
 8001b36:	bf00      	nop
 8001b38:	3730      	adds	r7, #48	@ 0x30
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	48001000 	.word	0x48001000
 8001b48:	48000800 	.word	0x48000800
 8001b4c:	48000400 	.word	0x48000400
 8001b50:	48000c00 	.word	0x48000c00
 8001b54:	48001400 	.word	0x48001400
 8001b58:	48001800 	.word	0x48001800

08001b5c <MX_HRTIM1_Init>:
HRTIM_HandleTypeDef hhrtim1;
DMA_HandleTypeDef hdma_hrtim1_a;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08e      	sub	sp, #56	@ 0x38
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 8001b62:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001b6c:	f107 0320 	add.w	r3, r7, #32
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
 8001b88:	615a      	str	r2, [r3, #20]
 8001b8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8001b8c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c8c <MX_HRTIM1_Init+0x130>)
 8001b8e:	4a40      	ldr	r2, [pc, #256]	@ (8001c90 <MX_HRTIM1_Init+0x134>)
 8001b90:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001b92:	4b3e      	ldr	r3, [pc, #248]	@ (8001c8c <MX_HRTIM1_Init+0x130>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001b98:	4b3c      	ldr	r3, [pc, #240]	@ (8001c8c <MX_HRTIM1_Init+0x130>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8001b9e:	483b      	ldr	r0, [pc, #236]	@ (8001c8c <MX_HRTIM1_Init+0x130>)
 8001ba0:	f004 faa6 	bl	80060f0 <HAL_HRTIM_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_HRTIM1_Init+0x52>
  {
    Error_Handler();
 8001baa:	f000 fd09 	bl	80025c0 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8001bae:	210c      	movs	r1, #12
 8001bb0:	4836      	ldr	r0, [pc, #216]	@ (8001c8c <MX_HRTIM1_Init+0x130>)
 8001bb2:	f004 fbc5 	bl	8006340 <HAL_HRTIM_DLLCalibrationStart>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_HRTIM1_Init+0x64>
  {
    Error_Handler();
 8001bbc:	f000 fd00 	bl	80025c0 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8001bc0:	210a      	movs	r1, #10
 8001bc2:	4832      	ldr	r0, [pc, #200]	@ (8001c8c <MX_HRTIM1_Init+0x130>)
 8001bc4:	f004 fc2a 	bl	800641c <HAL_HRTIM_PollForDLLCalibration>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_HRTIM1_Init+0x76>
  {
    Error_Handler();
 8001bce:	f000 fcf7 	bl	80025c0 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_B;
 8001bd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bd6:	633b      	str	r3, [r7, #48]	@ 0x30
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERB_PERIOD;
 8001bd8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001bdc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 8001bde:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001be2:	461a      	mov	r2, r3
 8001be4:	2101      	movs	r1, #1
 8001be6:	4829      	ldr	r0, [pc, #164]	@ (8001c8c <MX_HRTIM1_Init+0x130>)
 8001be8:	f004 fdca 	bl	8006780 <HAL_HRTIM_ADCTriggerConfig>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 8001bf2:	f000 fce5 	bl	80025c0 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 0x0) != HAL_OK)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4824      	ldr	r0, [pc, #144]	@ (8001c8c <MX_HRTIM1_Init+0x130>)
 8001bfc:	f004 fffa 	bl	8006bf4 <HAL_HRTIM_ADCPostScalerConfig>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_HRTIM1_Init+0xae>
  {
    Error_Handler();
 8001c06:	f000 fcdb 	bl	80025c0 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0x0060;
 8001c0a:	2360      	movs	r3, #96	@ 0x60
 8001c0c:	623b      	str	r3, [r7, #32]
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001c16:	2308      	movs	r3, #8
 8001c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001c1a:	f107 0320 	add.w	r3, r7, #32
 8001c1e:	461a      	mov	r2, r3
 8001c20:	2100      	movs	r1, #0
 8001c22:	481a      	ldr	r0, [pc, #104]	@ (8001c8c <MX_HRTIM1_Init+0x130>)
 8001c24:	f004 fc2e 	bl	8006484 <HAL_HRTIM_TimeBaseConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_HRTIM1_Init+0xd6>
  {
    Error_Handler();
 8001c2e:	f000 fcc7 	bl	80025c0 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]

  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4812      	ldr	r0, [pc, #72]	@ (8001c8c <MX_HRTIM1_Init+0x130>)
 8001c42:	f005 f947 	bl	8006ed4 <HAL_HRTIM_WaveformTimerControl>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_HRTIM1_Init+0xf4>
  {
    Error_Handler();
 8001c4c:	f000 fcb8 	bl	80025c0 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xAF80;
 8001c50:	f64a 7380 	movw	r3, #44928	@ 0xaf80
 8001c54:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8001c56:	f107 0320 	add.w	r3, r7, #32
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	480b      	ldr	r0, [pc, #44]	@ (8001c8c <MX_HRTIM1_Init+0x130>)
 8001c60:	f004 fc10 	bl	8006484 <HAL_HRTIM_TimeBaseConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_HRTIM1_Init+0x112>
  {
    Error_Handler();
 8001c6a:	f000 fca9 	bl	80025c0 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	461a      	mov	r2, r3
 8001c72:	2101      	movs	r1, #1
 8001c74:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <MX_HRTIM1_Init+0x130>)
 8001c76:	f005 f92d 	bl	8006ed4 <HAL_HRTIM_WaveformTimerControl>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_HRTIM1_Init+0x128>
  {
    Error_Handler();
 8001c80:	f000 fc9e 	bl	80025c0 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	3738      	adds	r7, #56	@ 0x38
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000638 	.word	0x20000638
 8001c90:	40016800 	.word	0x40016800

08001c94 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d20 <HAL_HRTIM_MspInit+0x8c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d137      	bne.n	8001d16 <HAL_HRTIM_MspInit+0x82>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d24 <HAL_HRTIM_MspInit+0x90>)
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001caa:	4a1e      	ldr	r2, [pc, #120]	@ (8001d24 <HAL_HRTIM_MspInit+0x90>)
 8001cac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <HAL_HRTIM_MspInit+0x90>)
 8001cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]

    /* HRTIM1 DMA Init */
    /* HRTIM1_A Init */
    hdma_hrtim1_a.Instance = DMA2_Channel1;
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d28 <HAL_HRTIM_MspInit+0x94>)
 8001cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d2c <HAL_HRTIM_MspInit+0x98>)
 8001cc2:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_a.Init.Request = DMA_REQUEST_HRTIM1_A;
 8001cc4:	4b18      	ldr	r3, [pc, #96]	@ (8001d28 <HAL_HRTIM_MspInit+0x94>)
 8001cc6:	2260      	movs	r2, #96	@ 0x60
 8001cc8:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cca:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <HAL_HRTIM_MspInit+0x94>)
 8001ccc:	2210      	movs	r2, #16
 8001cce:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd0:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <HAL_HRTIM_MspInit+0x94>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001cd6:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <HAL_HRTIM_MspInit+0x94>)
 8001cd8:	2280      	movs	r2, #128	@ 0x80
 8001cda:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cdc:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <HAL_HRTIM_MspInit+0x94>)
 8001cde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce2:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ce4:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <HAL_HRTIM_MspInit+0x94>)
 8001ce6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cea:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_a.Init.Mode = DMA_CIRCULAR;
 8001cec:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <HAL_HRTIM_MspInit+0x94>)
 8001cee:	2220      	movs	r2, #32
 8001cf0:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <HAL_HRTIM_MspInit+0x94>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_a) != HAL_OK)
 8001cf8:	480b      	ldr	r0, [pc, #44]	@ (8001d28 <HAL_HRTIM_MspInit+0x94>)
 8001cfa:	f003 fbe5 	bl	80054c8 <HAL_DMA_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_HRTIM_MspInit+0x74>
    {
      Error_Handler();
 8001d04:	f000 fc5c 	bl	80025c0 <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerA,hdma_hrtim1_a);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a07      	ldr	r2, [pc, #28]	@ (8001d28 <HAL_HRTIM_MspInit+0x94>)
 8001d0c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8001d10:	4a05      	ldr	r2, [pc, #20]	@ (8001d28 <HAL_HRTIM_MspInit+0x94>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40016800 	.word	0x40016800
 8001d24:	40021000 	.word	0x40021000
 8001d28:	20000734 	.word	0x20000734
 8001d2c:	40020408 	.word	0x40020408

08001d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d36:	f000 fddc 	bl	80028f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d3a:	f000 f979 	bl	8002030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d3e:	f7ff fdb7 	bl	80018b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d42:	f7ff fd57 	bl	80017f4 <MX_DMA_Init>
  MX_USB_Device_Init();
 8001d46:	f00e fd75 	bl	8010834 <MX_USB_Device_Init>
  MX_ADC1_Init();
 8001d4a:	f7ff f877 	bl	8000e3c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001d4e:	f7ff f8ef 	bl	8000f30 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001d52:	f7ff f955 	bl	8001000 <MX_ADC3_Init>
  MX_ADC4_Init();
 8001d56:	f7ff f9cd 	bl	80010f4 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001d5a:	f7ff fa33 	bl	80011c4 <MX_ADC5_Init>
  MX_TIM2_Init();
 8001d5e:	f000 fd2d 	bl	80027bc <MX_TIM2_Init>
  MX_HRTIM1_Init();
 8001d62:	f7ff fefb 	bl	8001b5c <MX_HRTIM1_Init>
  MX_CORDIC_Init();
 8001d66:	f7ff fd11 	bl	800178c <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */

  //---------- ADC Calibration ----------
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8001d6a:	217f      	movs	r1, #127	@ 0x7f
 8001d6c:	4892      	ldr	r0, [pc, #584]	@ (8001fb8 <main+0x288>)
 8001d6e:	f002 fffb 	bl	8004d68 <HAL_ADCEx_Calibration_Start>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <main+0x4c>
  	  Error_Handler();
 8001d78:	f000 fc22 	bl	80025c0 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8001d7c:	217f      	movs	r1, #127	@ 0x7f
 8001d7e:	488f      	ldr	r0, [pc, #572]	@ (8001fbc <main+0x28c>)
 8001d80:	f002 fff2 	bl	8004d68 <HAL_ADCEx_Calibration_Start>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <main+0x5e>
  	  Error_Handler();
 8001d8a:	f000 fc19 	bl	80025c0 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED) != HAL_OK)
 8001d8e:	217f      	movs	r1, #127	@ 0x7f
 8001d90:	488b      	ldr	r0, [pc, #556]	@ (8001fc0 <main+0x290>)
 8001d92:	f002 ffe9 	bl	8004d68 <HAL_ADCEx_Calibration_Start>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <main+0x70>
  	  Error_Handler();
 8001d9c:	f000 fc10 	bl	80025c0 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED) != HAL_OK)
 8001da0:	217f      	movs	r1, #127	@ 0x7f
 8001da2:	4888      	ldr	r0, [pc, #544]	@ (8001fc4 <main+0x294>)
 8001da4:	f002 ffe0 	bl	8004d68 <HAL_ADCEx_Calibration_Start>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <main+0x82>
  	  Error_Handler();
 8001dae:	f000 fc07 	bl	80025c0 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED) != HAL_OK)
 8001db2:	217f      	movs	r1, #127	@ 0x7f
 8001db4:	4884      	ldr	r0, [pc, #528]	@ (8001fc8 <main+0x298>)
 8001db6:	f002 ffd7 	bl	8004d68 <HAL_ADCEx_Calibration_Start>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <main+0x94>
  	  Error_Handler();
 8001dc0:	f000 fbfe 	bl	80025c0 <Error_Handler>

  //---------- ADC Start ----------
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1Buff, BUFFER_SIZE);
 8001dc4:	2219      	movs	r2, #25
 8001dc6:	4981      	ldr	r1, [pc, #516]	@ (8001fcc <main+0x29c>)
 8001dc8:	487b      	ldr	r0, [pc, #492]	@ (8001fb8 <main+0x288>)
 8001dca:	f001 fd17 	bl	80037fc <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2Buff, BUFFER_SIZE);
 8001dce:	2219      	movs	r2, #25
 8001dd0:	497f      	ldr	r1, [pc, #508]	@ (8001fd0 <main+0x2a0>)
 8001dd2:	487a      	ldr	r0, [pc, #488]	@ (8001fbc <main+0x28c>)
 8001dd4:	f001 fd12 	bl	80037fc <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3Buff, BUFFER_SIZE);
 8001dd8:	2219      	movs	r2, #25
 8001dda:	497e      	ldr	r1, [pc, #504]	@ (8001fd4 <main+0x2a4>)
 8001ddc:	4878      	ldr	r0, [pc, #480]	@ (8001fc0 <main+0x290>)
 8001dde:	f001 fd0d 	bl	80037fc <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4Buff, BUFFER_SIZE);
 8001de2:	2219      	movs	r2, #25
 8001de4:	497c      	ldr	r1, [pc, #496]	@ (8001fd8 <main+0x2a8>)
 8001de6:	4877      	ldr	r0, [pc, #476]	@ (8001fc4 <main+0x294>)
 8001de8:	f001 fd08 	bl	80037fc <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5Buff, BUFFER_SIZE);
 8001dec:	2219      	movs	r2, #25
 8001dee:	497b      	ldr	r1, [pc, #492]	@ (8001fdc <main+0x2ac>)
 8001df0:	4875      	ldr	r0, [pc, #468]	@ (8001fc8 <main+0x298>)
 8001df2:	f001 fd03 	bl	80037fc <HAL_ADC_Start_DMA>

  //---------- Timer Period Set ----------
  uint32_t period = (uint32_t)(CLKFREQ / (2*TIMER2_PRESCALAR * TIMER2_FREQ) - 1);
 8001df6:	f240 3351 	movw	r3, #849	@ 0x351
 8001dfa:	607b      	str	r3, [r7, #4]
  TIM2->ARR = period;
 8001dfc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIM2->PSC = TIMER2_PRESCALAR;
 8001e04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e08:	2201      	movs	r2, #1
 8001e0a:	629a      	str	r2, [r3, #40]	@ 0x28


  uint32_t updateFreq = (LUT_SIZE*DAC_FREQ);
 8001e0c:	4b74      	ldr	r3, [pc, #464]	@ (8001fe0 <main+0x2b0>)
 8001e0e:	603b      	str	r3, [r7, #0]
  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].PERxR = HRTIM_MUL*(CLKFREQ/updateFreq);
 8001e10:	6838      	ldr	r0, [r7, #0]
 8001e12:	f7fe fb9f 	bl	8000554 <__aeabi_ui2d>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	a165      	add	r1, pc, #404	@ (adr r1, 8001fb0 <main+0x280>)
 8001e1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e20:	f7fe fd3c 	bl	800089c <__aeabi_ddiv>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe4 <main+0x2b4>)
 8001e32:	f7fe fc09 	bl	8000648 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4c6b      	ldr	r4, [pc, #428]	@ (8001fe8 <main+0x2b8>)
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7fe fe14 	bl	8000a6c <__aeabi_d2uiz>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94

  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR = HRTIM_MUL*(CLKFREQ/SAMPLING_FREQUENCY);
 8001e4a:	4b67      	ldr	r3, [pc, #412]	@ (8001fe8 <main+0x2b8>)
 8001e4c:	f24d 4280 	movw	r2, #54400	@ 0xd480
 8001e50:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114


  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8001e54:	4865      	ldr	r0, [pc, #404]	@ (8001fec <main+0x2bc>)
 8001e56:	f008 ffaf 	bl	800adb8 <HAL_TIM_Base_Start_IT>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <main+0x134>
  	  Error_Handler();
 8001e60:	f000 fbae 	bl	80025c0 <Error_Handler>


  if (HAL_HRTIM_SimpleBaseStart(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B) != HAL_OK)
 8001e64:	2101      	movs	r1, #1
 8001e66:	4862      	ldr	r0, [pc, #392]	@ (8001ff0 <main+0x2c0>)
 8001e68:	f004 fb86 	bl	8006578 <HAL_HRTIM_SimpleBaseStart>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <main+0x146>
    	  Error_Handler();
 8001e72:	f000 fba5 	bl	80025c0 <Error_Handler>

  HAL_Delay(400);
 8001e76:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001e7a:	f000 fdab 	bl	80029d4 <HAL_Delay>

  //---------- LUT Initialisation ----------
  init_lut();
 8001e7e:	f000 fa73 	bl	8002368 <init_lut>
  HAL_Delay(100);
 8001e82:	2064      	movs	r0, #100	@ 0x64
 8001e84:	f000 fda6 	bl	80029d4 <HAL_Delay>


  HAL_HRTIM_SimpleBaseStart_DMA(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, (uint32_t)&sinewave[0], (uint32_t)&GPIOC->ODR, LUT_SIZE);
 8001e88:	4a5a      	ldr	r2, [pc, #360]	@ (8001ff4 <main+0x2c4>)
 8001e8a:	2364      	movs	r3, #100	@ 0x64
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ff8 <main+0x2c8>)
 8001e90:	2100      	movs	r1, #0
 8001e92:	4857      	ldr	r0, [pc, #348]	@ (8001ff0 <main+0x2c0>)
 8001e94:	f004 fbba 	bl	800660c <HAL_HRTIM_SimpleBaseStart_DMA>




  //---------- MUX Enable ----------
  updateCurrent(0);
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f000 fb69 	bl	8002570 <updateCurrent>
  updateVoltage(0);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f000 fa4a 	bl	8002338 <updateVoltage>
//  setGain(1,0b0011);
//  setGain(2,0b0011);
//  setGain(3,0b0011);
//  setGain(4,0b0011);
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001eaa:	4854      	ldr	r0, [pc, #336]	@ (8001ffc <main+0x2cc>)
 8001eac:	f004 f8d2 	bl	8006054 <HAL_GPIO_WritePin>



  omega = 2.0f * PI * DAC_FREQ / SAMPLING_FREQUENCY;
 8001eb0:	4b53      	ldr	r3, [pc, #332]	@ (8002000 <main+0x2d0>)
 8001eb2:	4a54      	ldr	r2, [pc, #336]	@ (8002004 <main+0x2d4>)
 8001eb4:	601a      	str	r2, [r3, #0]
  cosine = arm_cos_f32(omega);
 8001eb6:	4b52      	ldr	r3, [pc, #328]	@ (8002000 <main+0x2d0>)
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec0:	f00c ff02 	bl	800ecc8 <arm_cos_f32>
 8001ec4:	eef0 7a40 	vmov.f32	s15, s0
 8001ec8:	4b4f      	ldr	r3, [pc, #316]	@ (8002008 <main+0x2d8>)
 8001eca:	edc3 7a00 	vstr	s15, [r3]
  sine = arm_sin_f32(omega);
 8001ece:	4b4c      	ldr	r3, [pc, #304]	@ (8002000 <main+0x2d0>)
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed8:	f00c ff7c 	bl	800edd4 <arm_sin_f32>
 8001edc:	eef0 7a40 	vmov.f32	s15, s0
 8001ee0:	4b4a      	ldr	r3, [pc, #296]	@ (800200c <main+0x2dc>)
 8001ee2:	edc3 7a00 	vstr	s15, [r3]
  coeff = 2.0f * cosine;
 8001ee6:	4b48      	ldr	r3, [pc, #288]	@ (8002008 <main+0x2d8>)
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ef0:	4b47      	ldr	r3, [pc, #284]	@ (8002010 <main+0x2e0>)
 8001ef2:	edc3 7a00 	vstr	s15, [r3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (is_main) { // Toggles a status LED
 8001ef6:	4b47      	ldr	r3, [pc, #284]	@ (8002014 <main+0x2e4>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d006      	beq.n	8001f0e <main+0x1de>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8001f00:	2104      	movs	r1, #4
 8001f02:	4845      	ldr	r0, [pc, #276]	@ (8002018 <main+0x2e8>)
 8001f04:	f004 f8d2 	bl	80060ac <HAL_GPIO_TogglePin>
		is_main = 0;
 8001f08:	4b42      	ldr	r3, [pc, #264]	@ (8002014 <main+0x2e4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
	}
	if (is_usb) { //Sends all data and triggers a MUX change
 8001f0e:	4b43      	ldr	r3, [pc, #268]	@ (800201c <main+0x2ec>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d006      	beq.n	8001f26 <main+0x1f6>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_1);
 8001f18:	2102      	movs	r1, #2
 8001f1a:	483f      	ldr	r0, [pc, #252]	@ (8002018 <main+0x2e8>)
 8001f1c:	f004 f8c6 	bl	80060ac <HAL_GPIO_TogglePin>
//		send_all_buffer();
//				clearAllBuffers();
		is_usb = 0;
 8001f20:	4b3e      	ldr	r3, [pc, #248]	@ (800201c <main+0x2ec>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
	  }
	if (is_voltage_mux) { //Updates Voltage MUX and triggers a MUX change
 8001f26:	4b3e      	ldr	r3, [pc, #248]	@ (8002020 <main+0x2f0>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0e2      	beq.n	8001ef6 <main+0x1c6>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_1);
 8001f30:	2102      	movs	r1, #2
 8001f32:	4839      	ldr	r0, [pc, #228]	@ (8002018 <main+0x2e8>)
 8001f34:	f004 f8ba 	bl	80060ac <HAL_GPIO_TogglePin>
		calcMagnitude();
 8001f38:	f000 f964 	bl	8002204 <calcMagnitude>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_1);
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	4836      	ldr	r0, [pc, #216]	@ (8002018 <main+0x2e8>)
 8001f40:	f004 f8b4 	bl	80060ac <HAL_GPIO_TogglePin>
		voltage_mux++;
 8001f44:	4b37      	ldr	r3, [pc, #220]	@ (8002024 <main+0x2f4>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b35      	ldr	r3, [pc, #212]	@ (8002024 <main+0x2f4>)
 8001f4e:	701a      	strb	r2, [r3, #0]
		if (voltage_mux > 3) {
 8001f50:	4b34      	ldr	r3, [pc, #208]	@ (8002024 <main+0x2f4>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d91a      	bls.n	8001f8e <main+0x25e>
			voltage_mux = 0;
 8001f58:	4b32      	ldr	r3, [pc, #200]	@ (8002024 <main+0x2f4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
			current_mux++;
 8001f5e:	4b32      	ldr	r3, [pc, #200]	@ (8002028 <main+0x2f8>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b30      	ldr	r3, [pc, #192]	@ (8002028 <main+0x2f8>)
 8001f68:	701a      	strb	r2, [r3, #0]
			if (current_mux > 15) {
 8001f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002028 <main+0x2f8>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	d90d      	bls.n	8001f8e <main+0x25e>
				  current_mux = 0;
 8001f72:	4b2d      	ldr	r3, [pc, #180]	@ (8002028 <main+0x2f8>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0);
 8001f78:	2101      	movs	r1, #1
 8001f7a:	4827      	ldr	r0, [pc, #156]	@ (8002018 <main+0x2e8>)
 8001f7c:	f004 f896 	bl	80060ac <HAL_GPIO_TogglePin>
				  sendMagnitude(magnitude);
 8001f80:	482a      	ldr	r0, [pc, #168]	@ (800202c <main+0x2fc>)
 8001f82:	f000 f8e3 	bl	800214c <sendMagnitude>
				  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0);
 8001f86:	2101      	movs	r1, #1
 8001f88:	4823      	ldr	r0, [pc, #140]	@ (8002018 <main+0x2e8>)
 8001f8a:	f004 f88f 	bl	80060ac <HAL_GPIO_TogglePin>
				}
		}
		updateVoltage(voltage_mux);
 8001f8e:	4b25      	ldr	r3, [pc, #148]	@ (8002024 <main+0x2f4>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f9d0 	bl	8002338 <updateVoltage>
		updateCurrent(current_mux);
 8001f98:	4b23      	ldr	r3, [pc, #140]	@ (8002028 <main+0x2f8>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fae7 	bl	8002570 <updateCurrent>
		checkStim();
 8001fa2:	f000 fa9b 	bl	80024dc <checkStim>
		is_voltage_mux = 0;
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8002020 <main+0x2f0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
	if (is_main) { // Toggles a status LED
 8001fac:	e7a3      	b.n	8001ef6 <main+0x1c6>
 8001fae:	bf00      	nop
 8001fb0:	00000000 	.word	0x00000000
 8001fb4:	41a443fd 	.word	0x41a443fd
 8001fb8:	2000020c 	.word	0x2000020c
 8001fbc:	20000278 	.word	0x20000278
 8001fc0:	200002e4 	.word	0x200002e4
 8001fc4:	20000350 	.word	0x20000350
 8001fc8:	200003bc 	.word	0x200003bc
 8001fcc:	20000934 	.word	0x20000934
 8001fd0:	20000968 	.word	0x20000968
 8001fd4:	2000099c 	.word	0x2000099c
 8001fd8:	200009d0 	.word	0x200009d0
 8001fdc:	20000a04 	.word	0x20000a04
 8001fe0:	000f4240 	.word	0x000f4240
 8001fe4:	40400000 	.word	0x40400000
 8001fe8:	40016800 	.word	0x40016800
 8001fec:	20000c4c 	.word	0x20000c4c
 8001ff0:	20000638 	.word	0x20000638
 8001ff4:	20000794 	.word	0x20000794
 8001ff8:	48000814 	.word	0x48000814
 8001ffc:	48001000 	.word	0x48001000
 8002000:	20000c38 	.word	0x20000c38
 8002004:	3f20d97c 	.word	0x3f20d97c
 8002008:	20000c3c 	.word	0x20000c3c
 800200c:	20000c40 	.word	0x20000c40
 8002010:	20000c44 	.word	0x20000c44
 8002014:	20000930 	.word	0x20000930
 8002018:	48000c00 	.word	0x48000c00
 800201c:	20000931 	.word	0x20000931
 8002020:	20000932 	.word	0x20000932
 8002024:	20000925 	.word	0x20000925
 8002028:	20000924 	.word	0x20000924
 800202c:	20000a38 	.word	0x20000a38

08002030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b094      	sub	sp, #80	@ 0x50
 8002034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002036:	f107 0318 	add.w	r3, r7, #24
 800203a:	2238      	movs	r2, #56	@ 0x38
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f00f fe70 	bl	8011d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	60da      	str	r2, [r3, #12]
 8002050:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002052:	2000      	movs	r0, #0
 8002054:	f007 f92e 	bl	80092b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002058:	2321      	movs	r3, #33	@ 0x21
 800205a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800205c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002060:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002062:	2301      	movs	r3, #1
 8002064:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002066:	2302      	movs	r3, #2
 8002068:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800206a:	2303      	movs	r3, #3
 800206c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV12;
 800206e:	230c      	movs	r3, #12
 8002070:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002072:	2355      	movs	r3, #85	@ 0x55
 8002074:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002076:	2307      	movs	r3, #7
 8002078:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 800207a:	2306      	movs	r3, #6
 800207c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800207e:	2302      	movs	r3, #2
 8002080:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002082:	f107 0318 	add.w	r3, r7, #24
 8002086:	4618      	mov	r0, r3
 8002088:	f007 f9d8 	bl	800943c <HAL_RCC_OscConfig>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002092:	f000 fa95 	bl	80025c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002096:	230f      	movs	r3, #15
 8002098:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800209a:	2303      	movs	r3, #3
 800209c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	2104      	movs	r1, #4
 80020ae:	4618      	mov	r0, r3
 80020b0:	f007 fdd0 	bl	8009c54 <HAL_RCC_ClockConfig>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80020ba:	f000 fa81 	bl	80025c0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_2);
 80020be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020c2:	f04f 61a0 	mov.w	r1, #83886080	@ 0x5000000
 80020c6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80020ca:	f007 ffc1 	bl	800a050 <HAL_RCC_MCOConfig>
}
 80020ce:	bf00      	nop
 80020d0:	3750      	adds	r7, #80	@ 0x50
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_TIM_PeriodElapsedCallback>:
 * Args:
 * 		htim: Handle type for the timer to define
 * 			which timer has triggered the callback.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80020d8:	b5b0      	push	{r4, r5, r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020e8:	d126      	bne.n	8002138 <HAL_TIM_PeriodElapsedCallback+0x60>
		gl_ticks++;
 80020ea:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	1c54      	adds	r4, r2, #1
 80020f2:	f143 0500 	adc.w	r5, r3, #0
 80020f6:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80020f8:	e9c3 4500 	strd	r4, r5, [r3]

		if (gl_ticks % (uint64_t)(TIMER2_FREQ / MAIN_FREQ) == 1) {
 80020fc:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80020fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002102:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	f7fe fd1f 	bl	8000b4c <__aeabi_uldivmod>
 800210e:	1e51      	subs	r1, r2, #1
 8002110:	430b      	orrs	r3, r1
 8002112:	d102      	bne.n	800211a <HAL_TIM_PeriodElapsedCallback+0x42>
			is_main = 1;
 8002114:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]
		}
//	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / USB_FREQ) == 1) {
//	    	is_usb = 1;
//	    }
	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / VOLTAGE_FREQ) == 1) {
 800211a:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800211c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002120:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	f7fe fd10 	bl	8000b4c <__aeabi_uldivmod>
 800212c:	1e51      	subs	r1, r2, #1
 800212e:	430b      	orrs	r3, r1
 8002130:	d102      	bne.n	8002138 <HAL_TIM_PeriodElapsedCallback+0x60>
	    	is_voltage_mux = 1;
 8002132:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
//        if (gl_ticks >= TIMER2_FREQ) {
//            gl_ticks = 0;
//        }
	}

}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bdb0      	pop	{r4, r5, r7, pc}
 8002140:	20000928 	.word	0x20000928
 8002144:	20000930 	.word	0x20000930
 8002148:	20000932 	.word	0x20000932

0800214c <sendMagnitude>:
//
//    // Send entire buffer in one transmission
//    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
//}

void sendMagnitude(uint16_t *array) {
 800214c:	b580      	push	{r7, lr}
 800214e:	f6ad 0d18 	subw	sp, sp, #2072	@ 0x818
 8002152:	af00      	add	r7, sp, #0
 8002154:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8002158:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 800215c:	6018      	str	r0, [r3, #0]
	char buffer[2048];  // Large enough buffer to hold entire transmission
	char *ptr = buffer;
 800215e:	f107 0308 	add.w	r3, r7, #8
 8002162:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
	size_t remaining = sizeof(buffer);
 8002166:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800216a:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810

	// Convert entire array to string
	for (size_t i = 0; i < MEAS_SIZE; i++) {
 800216e:	2300      	movs	r3, #0
 8002170:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8002174:	e025      	b.n	80021c2 <sendMagnitude+0x76>
		int written = snprintf(ptr, remaining, "%u\r\n", array[i]);
 8002176:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	f607 0218 	addw	r2, r7, #2072	@ 0x818
 8002180:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	4413      	add	r3, r2
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	4a1c      	ldr	r2, [pc, #112]	@ (80021fc <sendMagnitude+0xb0>)
 800218c:	f8d7 1810 	ldr.w	r1, [r7, #2064]	@ 0x810
 8002190:	f8d7 0814 	ldr.w	r0, [r7, #2068]	@ 0x814
 8002194:	f00f fd92 	bl	8011cbc <sniprintf>
 8002198:	f8c7 0808 	str.w	r0, [r7, #2056]	@ 0x808
		ptr += written;
 800219c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80021a0:	f8d7 2814 	ldr.w	r2, [r7, #2068]	@ 0x814
 80021a4:	4413      	add	r3, r2
 80021a6:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
		remaining -= written;
 80021aa:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80021ae:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
	for (size_t i = 0; i < MEAS_SIZE; i++) {
 80021b8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80021bc:	3301      	adds	r3, #1
 80021be:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80021c2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80021c6:	2bff      	cmp	r3, #255	@ 0xff
 80021c8:	d9d5      	bls.n	8002176 <sendMagnitude+0x2a>
	}

	// Append end marker
	snprintf(ptr, remaining, "X\r\n");
 80021ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002200 <sendMagnitude+0xb4>)
 80021cc:	f8d7 1810 	ldr.w	r1, [r7, #2064]	@ 0x810
 80021d0:	f8d7 0814 	ldr.w	r0, [r7, #2068]	@ 0x814
 80021d4:	f00f fd72 	bl	8011cbc <sniprintf>


//    for (size_t total_sent = 0; total_sent <= 2048; total_sent += 64) {
//    	CDC_Transmit_FS((uint8_t*)buffer + total_sent, 64);
//	}
    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer)); // Send only the used portion
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f81f 	bl	8000220 <strlen>
 80021e2:	4603      	mov	r3, r0
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	f107 0308 	add.w	r3, r7, #8
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f00e fbdf 	bl	80109b0 <CDC_Transmit_FS>
}
 80021f2:	bf00      	nop
 80021f4:	f607 0718 	addw	r7, r7, #2072	@ 0x818
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	0801263c 	.word	0x0801263c
 8002200:	08012644 	.word	0x08012644

08002204 <calcMagnitude>:


void calcMagnitude(void) {
 8002204:	b590      	push	{r4, r7, lr}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
	int firstElec_A1 = 4 * (1 - 1) + voltage_mux + 1;
 800220a:	4b34      	ldr	r3, [pc, #208]	@ (80022dc <calcMagnitude+0xd8>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
	int firstElec_A2 = 4 * (2 - 1) + voltage_mux + 1;
 8002212:	4b32      	ldr	r3, [pc, #200]	@ (80022dc <calcMagnitude+0xd8>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	3305      	adds	r3, #5
 8002218:	613b      	str	r3, [r7, #16]
	int firstElec_A3 = 4 * (3 - 1) + voltage_mux + 1;
 800221a:	4b30      	ldr	r3, [pc, #192]	@ (80022dc <calcMagnitude+0xd8>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	3309      	adds	r3, #9
 8002220:	60fb      	str	r3, [r7, #12]
	int firstElec_A4 = 4 * (4 - 1) + voltage_mux + 1;
 8002222:	4b2e      	ldr	r3, [pc, #184]	@ (80022dc <calcMagnitude+0xd8>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	330d      	adds	r3, #13
 8002228:	60bb      	str	r3, [r7, #8]

	int firstStim = current_mux + 1;
 800222a:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <calcMagnitude+0xdc>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	607b      	str	r3, [r7, #4]

	uint8_t idx_A1 = (firstStim - 1) *16 + firstElec_A1 - 1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3b01      	subs	r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	b2da      	uxtb	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	4413      	add	r3, r2
 8002242:	b2db      	uxtb	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	70fb      	strb	r3, [r7, #3]
	uint8_t idx_A2 = (firstStim - 1) *16 + firstElec_A2 - 1;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	b2da      	uxtb	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	4413      	add	r3, r2
 8002258:	b2db      	uxtb	r3, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	70bb      	strb	r3, [r7, #2]
	uint8_t idx_A3 = (firstStim - 1) *16 + firstElec_A3 - 1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3b01      	subs	r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	b2da      	uxtb	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	4413      	add	r3, r2
 800226e:	b2db      	uxtb	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	707b      	strb	r3, [r7, #1]
	uint8_t idx_A4 = (firstStim - 1) *16 + firstElec_A4 - 1;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	b2db      	uxtb	r3, r3
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	b2da      	uxtb	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	4413      	add	r3, r2
 8002284:	b2db      	uxtb	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	703b      	strb	r3, [r7, #0]

	magnitude[idx_A1] = calcMag(adc1Buff);
 800228a:	78fc      	ldrb	r4, [r7, #3]
 800228c:	4815      	ldr	r0, [pc, #84]	@ (80022e4 <calcMagnitude+0xe0>)
 800228e:	f000 f833 	bl	80022f8 <calcMag>
 8002292:	4603      	mov	r3, r0
 8002294:	461a      	mov	r2, r3
 8002296:	4b14      	ldr	r3, [pc, #80]	@ (80022e8 <calcMagnitude+0xe4>)
 8002298:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	magnitude[idx_A2] = calcMag(adc2Buff);
 800229c:	78bc      	ldrb	r4, [r7, #2]
 800229e:	4813      	ldr	r0, [pc, #76]	@ (80022ec <calcMagnitude+0xe8>)
 80022a0:	f000 f82a 	bl	80022f8 <calcMag>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <calcMagnitude+0xe4>)
 80022aa:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	magnitude[idx_A3] = calcMag(adc3Buff);
 80022ae:	787c      	ldrb	r4, [r7, #1]
 80022b0:	480f      	ldr	r0, [pc, #60]	@ (80022f0 <calcMagnitude+0xec>)
 80022b2:	f000 f821 	bl	80022f8 <calcMag>
 80022b6:	4603      	mov	r3, r0
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <calcMagnitude+0xe4>)
 80022bc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	magnitude[idx_A4] = calcMag(adc4Buff);
 80022c0:	783c      	ldrb	r4, [r7, #0]
 80022c2:	480c      	ldr	r0, [pc, #48]	@ (80022f4 <calcMagnitude+0xf0>)
 80022c4:	f000 f818 	bl	80022f8 <calcMag>
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <calcMagnitude+0xe4>)
 80022ce:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
 80022d2:	bf00      	nop
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd90      	pop	{r4, r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000925 	.word	0x20000925
 80022e0:	20000924 	.word	0x20000924
 80022e4:	20000934 	.word	0x20000934
 80022e8:	20000a38 	.word	0x20000a38
 80022ec:	20000968 	.word	0x20000968
 80022f0:	2000099c 	.word	0x2000099c
 80022f4:	200009d0 	.word	0x200009d0

080022f8 <calcMag>:


uint16_t calcMag(uint16_t * array) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	q15_t max, min;
	uint32_t idxMax, idxMin;
	arm_max_q15((q15_t*)array, BUFFER_SIZE, &max, &idxMax);
 8002300:	f107 0310 	add.w	r3, r7, #16
 8002304:	f107 0216 	add.w	r2, r7, #22
 8002308:	2119      	movs	r1, #25
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f00c fde4 	bl	800eed8 <arm_max_q15>
	arm_min_q15((q15_t*)array, BUFFER_SIZE, &min, &idxMin);
 8002310:	f107 030c 	add.w	r3, r7, #12
 8002314:	f107 0214 	add.w	r2, r7, #20
 8002318:	2119      	movs	r1, #25
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f00c fe11 	bl	800ef42 <arm_min_q15>
	return max-min;
 8002320:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002324:	b29a      	uxth	r2, r3
 8002326:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800232a:	b29b      	uxth	r3, r3
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	b29b      	uxth	r3, r3
//	// Compute magnitude using CMSIS
//	float32_t magnitude;
//	arm_sqrt_f32(real * real + imag * imag, &magnitude);
//
//	return (uint16_t)magnitude;
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <updateVoltage>:
 *
 * Args:
 * 		index: The configuration that is being set, only four
 * 			combinations exist to get all readings.
 */
void updateVoltage(uint16_t index) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	80fb      	strh	r3, [r7, #6]
	uint16_t mask = 0xC000; //1100 0000 0000 0000
 8002342:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002346:	81fb      	strh	r3, [r7, #14]
	WriteBits(GPIOB, mask, index);
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	89fb      	ldrh	r3, [r7, #14]
 800234e:	4619      	mov	r1, r3
 8002350:	4803      	ldr	r0, [pc, #12]	@ (8002360 <updateVoltage+0x28>)
 8002352:	f000 f869 	bl	8002428 <WriteBits>
}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	48000400 	.word	0x48000400
 8002364:	00000000 	.word	0x00000000

08002368 <init_lut>:
 * Sets up a look up table of a sinewave with a DC offset
 * and a max 14 bit amplitude. THe frequency is adjusted according
 * to the update rate of the DAC.
 *
 */
void init_lut(void) {
 8002368:	b5b0      	push	{r4, r5, r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
	uint32_t amp = 819;
 800236e:	f240 3333 	movw	r3, #819	@ 0x333
 8002372:	60bb      	str	r3, [r7, #8]
	uint32_t max = 16383;
 8002374:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8002378:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < LUT_SIZE; i++) {
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e041      	b.n	8002404 <init_lut+0x9c>
		float sine = sinf(i * (2.0 * M_PI / LUT_SIZE));
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7fe f8f7 	bl	8000574 <__aeabi_i2d>
 8002386:	a326      	add	r3, pc, #152	@ (adr r3, 8002420 <init_lut+0xb8>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fe f95c 	bl	8000648 <__aeabi_dmul>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	f7fe fb88 	bl	8000aac <__aeabi_d2f>
 800239c:	4603      	mov	r3, r0
 800239e:	ee00 3a10 	vmov	s0, r3
 80023a2:	f00e ff51 	bl	8011248 <sinf>
 80023a6:	ed87 0a00 	vstr	s0, [r7]
		sinewave[i] = (uint16_t)(amp * sine + max * 0.5);
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	ee07 3a90 	vmov	s15, r3
 80023b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023b4:	edd7 7a00 	vldr	s15, [r7]
 80023b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023bc:	ee17 0a90 	vmov	r0, s15
 80023c0:	f7fe f8ea 	bl	8000598 <__aeabi_f2d>
 80023c4:	4604      	mov	r4, r0
 80023c6:	460d      	mov	r5, r1
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7fe f8c3 	bl	8000554 <__aeabi_ui2d>
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <init_lut+0xb0>)
 80023d4:	f7fe f938 	bl	8000648 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4620      	mov	r0, r4
 80023de:	4629      	mov	r1, r5
 80023e0:	f7fd ff7c 	bl	80002dc <__adddf3>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	f7fe fb3e 	bl	8000a6c <__aeabi_d2uiz>
 80023f0:	4603      	mov	r3, r0
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4619      	mov	r1, r3
 80023f6:	4a09      	ldr	r2, [pc, #36]	@ (800241c <init_lut+0xb4>)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < LUT_SIZE; i++) {
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3301      	adds	r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b63      	cmp	r3, #99	@ 0x63
 8002408:	ddba      	ble.n	8002380 <init_lut+0x18>
//		sinewave[i] = (uint16_t)(max * 0.5 * ((amp / max) * sine + 1.0));
	}
}
 800240a:	bf00      	nop
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bdb0      	pop	{r4, r5, r7, pc}
 8002414:	f3af 8000 	nop.w
 8002418:	3fe00000 	.word	0x3fe00000
 800241c:	20000794 	.word	0x20000794
 8002420:	9217271a 	.word	0x9217271a
 8002424:	3fb015bf 	.word	0x3fb015bf

08002428 <WriteBits>:
 * 		pinMask: The binary value of the pins that are
 * 			to be changed.
 * 		value: The binary number that is being written
 * 			to the pins defined in pinMask.
 */
void WriteBits(GPIO_TypeDef* GPIOx, uint16_t pinMask, uint8_t value) {
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	807b      	strh	r3, [r7, #2]
 8002434:	4613      	mov	r3, r2
 8002436:	707b      	strb	r3, [r7, #1]
    // Clear the bits at the positions of pinMask
    GPIOx->ODR &= ~pinMask;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	887a      	ldrh	r2, [r7, #2]
 800243e:	43d2      	mvns	r2, r2
 8002440:	401a      	ands	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	615a      	str	r2, [r3, #20]

    // Set the new value at the positions of pinMask
    GPIOx->ODR |= (value & 0x0F) << __builtin_ctz(pinMask);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	787a      	ldrb	r2, [r7, #1]
 800244c:	f002 010f 	and.w	r1, r2, #15
 8002450:	887a      	ldrh	r2, [r7, #2]
 8002452:	fa92 f2a2 	rbit	r2, r2
 8002456:	fab2 f282 	clz	r2, r2
 800245a:	fa01 f202 	lsl.w	r2, r1, r2
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	615a      	str	r2, [r3, #20]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <setGain>:

void setGain(uint16_t adc, uint8_t gain){
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	460a      	mov	r2, r1
 800247a:	80fb      	strh	r3, [r7, #6]
 800247c:	4613      	mov	r3, r2
 800247e:	717b      	strb	r3, [r7, #5]
	if (adc == 1) {
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d106      	bne.n	8002494 <setGain+0x24>
		WriteBits(GPIOD, 0b0000001100000000, gain); //0000 0011 0000 0000
 8002486:	797b      	ldrb	r3, [r7, #5]
 8002488:	461a      	mov	r2, r3
 800248a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800248e:	4812      	ldr	r0, [pc, #72]	@ (80024d8 <setGain+0x68>)
 8002490:	f7ff ffca 	bl	8002428 <WriteBits>
	}
	if (adc == 2) {
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d106      	bne.n	80024a8 <setGain+0x38>
		WriteBits(GPIOD, 0b0000110000000000, gain); //0000 1100 0000 0000
 800249a:	797b      	ldrb	r3, [r7, #5]
 800249c:	461a      	mov	r2, r3
 800249e:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80024a2:	480d      	ldr	r0, [pc, #52]	@ (80024d8 <setGain+0x68>)
 80024a4:	f7ff ffc0 	bl	8002428 <WriteBits>
	}
	if (adc == 3) {
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d106      	bne.n	80024bc <setGain+0x4c>
		WriteBits(GPIOD, 0b0011000000000000, gain); //0011 0000 0000 0000
 80024ae:	797b      	ldrb	r3, [r7, #5]
 80024b0:	461a      	mov	r2, r3
 80024b2:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80024b6:	4808      	ldr	r0, [pc, #32]	@ (80024d8 <setGain+0x68>)
 80024b8:	f7ff ffb6 	bl	8002428 <WriteBits>
	}
	if (adc == 4) {
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d106      	bne.n	80024d0 <setGain+0x60>
		WriteBits(GPIOD, 0b1100000000000000, gain); //1100 0000 0000 0000
 80024c2:	797b      	ldrb	r3, [r7, #5]
 80024c4:	461a      	mov	r2, r3
 80024c6:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80024ca:	4803      	ldr	r0, [pc, #12]	@ (80024d8 <setGain+0x68>)
 80024cc:	f7ff ffac 	bl	8002428 <WriteBits>
	}
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	48000c00 	.word	0x48000c00

080024dc <checkStim>:

void checkStim(void) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
	for (size_t A = 1; A<5; A++) {
 80024e2:	2301      	movs	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	e037      	b.n	8002558 <checkStim+0x7c>
		int firstElec = 4 * (A - 1) + voltage_mux + 1;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002568 <checkStim+0x8c>)
 80024f0:	7812      	ldrb	r2, [r2, #0]
 80024f2:	4413      	add	r3, r2
 80024f4:	3301      	adds	r3, #1
 80024f6:	613b      	str	r3, [r7, #16]
		int secondElec = (firstElec < 16) ? (firstElec + 1) : 1;
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	2b0f      	cmp	r3, #15
 80024fc:	dc02      	bgt.n	8002504 <checkStim+0x28>
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	3301      	adds	r3, #1
 8002502:	e000      	b.n	8002506 <checkStim+0x2a>
 8002504:	2301      	movs	r3, #1
 8002506:	60fb      	str	r3, [r7, #12]

		int firstStim = current_mux + 1;
 8002508:	4b18      	ldr	r3, [pc, #96]	@ (800256c <checkStim+0x90>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
		int secondStim = (firstStim < 16) ? (firstStim + 1) : 1;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b0f      	cmp	r3, #15
 8002514:	dc02      	bgt.n	800251c <checkStim+0x40>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	3301      	adds	r3, #1
 800251a:	e000      	b.n	800251e <checkStim+0x42>
 800251c:	2301      	movs	r3, #1
 800251e:	607b      	str	r3, [r7, #4]
		if (firstElec != firstStim && firstElec != secondStim && secondElec != firstStim) {
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	429a      	cmp	r2, r3
 8002526:	d00e      	beq.n	8002546 <checkStim+0x6a>
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	429a      	cmp	r2, r3
 800252e:	d00a      	beq.n	8002546 <checkStim+0x6a>
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	429a      	cmp	r2, r3
 8002536:	d006      	beq.n	8002546 <checkStim+0x6a>
			setGain(A,0b0011);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	b29b      	uxth	r3, r3
 800253c:	2103      	movs	r1, #3
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ff96 	bl	8002470 <setGain>
 8002544:	e005      	b.n	8002552 <checkStim+0x76>
		} else {
			setGain(A,0b0000);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	b29b      	uxth	r3, r3
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff8f 	bl	8002470 <setGain>
	for (size_t A = 1; A<5; A++) {
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	3301      	adds	r3, #1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b04      	cmp	r3, #4
 800255c:	d9c4      	bls.n	80024e8 <checkStim+0xc>
		}
	}

}
 800255e:	bf00      	nop
 8002560:	bf00      	nop
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000925 	.word	0x20000925
 800256c:	20000924 	.word	0x20000924

08002570 <updateCurrent>:
 * passed to it defining what electrodes are written to.
 *
 * Args:
 * 		electrodes: The configuration that is being set.
 */
void updateCurrent(uint16_t electrodes) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	80fb      	strh	r3, [r7, #6]
	uint16_t maskP = 0x003C; //0000 0000 0011 1100
 800257a:	233c      	movs	r3, #60	@ 0x3c
 800257c:	81fb      	strh	r3, [r7, #14]
	uint16_t maskN = 0x3C00; //0011 1100 0000 0000
 800257e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002582:	81bb      	strh	r3, [r7, #12]
	uint8_t pinsP = (uint8_t)electrodes; //1,2
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	72fb      	strb	r3, [r7, #11]
	uint8_t pinsN = pinsP < 15 ? pinsP + 1 : 0;
 8002588:	7afb      	ldrb	r3, [r7, #11]
 800258a:	2b0e      	cmp	r3, #14
 800258c:	d803      	bhi.n	8002596 <updateCurrent+0x26>
 800258e:	7afb      	ldrb	r3, [r7, #11]
 8002590:	3301      	adds	r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	e000      	b.n	8002598 <updateCurrent+0x28>
 8002596:	2300      	movs	r3, #0
 8002598:	72bb      	strb	r3, [r7, #10]
	WriteBits(GPIOE, maskP, pinsP);
 800259a:	7afa      	ldrb	r2, [r7, #11]
 800259c:	89fb      	ldrh	r3, [r7, #14]
 800259e:	4619      	mov	r1, r3
 80025a0:	4806      	ldr	r0, [pc, #24]	@ (80025bc <updateCurrent+0x4c>)
 80025a2:	f7ff ff41 	bl	8002428 <WriteBits>
	WriteBits(GPIOE, maskN, pinsN);
 80025a6:	7aba      	ldrb	r2, [r7, #10]
 80025a8:	89bb      	ldrh	r3, [r7, #12]
 80025aa:	4619      	mov	r1, r3
 80025ac:	4803      	ldr	r0, [pc, #12]	@ (80025bc <updateCurrent+0x4c>)
 80025ae:	f7ff ff3b 	bl	8002428 <WriteBits>
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	48001000 	.word	0x48001000

080025c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025c4:	b672      	cpsid	i
}
 80025c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025c8:	bf00      	nop
 80025ca:	e7fd      	b.n	80025c8 <Error_Handler+0x8>

080025cc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002628 <HAL_MspInit+0x44>)
 80025ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002628 <HAL_MspInit+0x44>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80025f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002628 <HAL_MspInit+0x44>)
 80025f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <HAL_MspInit+0x44>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	4a08      	ldr	r2, [pc, #32]	@ (8002628 <HAL_MspInit+0x44>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800260c:	6593      	str	r3, [r2, #88]	@ 0x58
 800260e:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <HAL_MspInit+0x44>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800261a:	f006 feff 	bl	800941c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000

0800262c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <NMI_Handler+0x4>

08002634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002638:	bf00      	nop
 800263a:	e7fd      	b.n	8002638 <HardFault_Handler+0x4>

0800263c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <MemManage_Handler+0x4>

08002644 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002648:	bf00      	nop
 800264a:	e7fd      	b.n	8002648 <BusFault_Handler+0x4>

0800264c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002650:	bf00      	nop
 8002652:	e7fd      	b.n	8002650 <UsageFault_Handler+0x4>

08002654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002682:	f000 f989 	bl	8002998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002690:	4802      	ldr	r0, [pc, #8]	@ (800269c <DMA1_Channel1_IRQHandler+0x10>)
 8002692:	f003 f93b 	bl	800590c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000428 	.word	0x20000428

080026a0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80026a4:	4802      	ldr	r0, [pc, #8]	@ (80026b0 <DMA1_Channel2_IRQHandler+0x10>)
 80026a6:	f003 f931 	bl	800590c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000488 	.word	0x20000488

080026b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80026b8:	4802      	ldr	r0, [pc, #8]	@ (80026c4 <DMA1_Channel3_IRQHandler+0x10>)
 80026ba:	f003 f927 	bl	800590c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200004e8 	.word	0x200004e8

080026c8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80026cc:	4802      	ldr	r0, [pc, #8]	@ (80026d8 <DMA1_Channel4_IRQHandler+0x10>)
 80026ce:	f003 f91d 	bl	800590c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000548 	.word	0x20000548

080026dc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80026e0:	4802      	ldr	r0, [pc, #8]	@ (80026ec <DMA1_Channel5_IRQHandler+0x10>)
 80026e2:	f003 f913 	bl	800590c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	200005a8 	.word	0x200005a8

080026f0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80026f4:	4802      	ldr	r0, [pc, #8]	@ (8002700 <USB_LP_IRQHandler+0x10>)
 80026f6:	f005 f999 	bl	8007a2c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20002170 	.word	0x20002170

08002704 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002708:	4802      	ldr	r0, [pc, #8]	@ (8002714 <TIM2_IRQHandler+0x10>)
 800270a:	f008 fc15 	bl	800af38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000c4c 	.word	0x20000c4c

08002718 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_a);
 800271c:	4802      	ldr	r0, [pc, #8]	@ (8002728 <DMA2_Channel1_IRQHandler+0x10>)
 800271e:	f003 f8f5 	bl	800590c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000734 	.word	0x20000734

0800272c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002734:	4a14      	ldr	r2, [pc, #80]	@ (8002788 <_sbrk+0x5c>)
 8002736:	4b15      	ldr	r3, [pc, #84]	@ (800278c <_sbrk+0x60>)
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002740:	4b13      	ldr	r3, [pc, #76]	@ (8002790 <_sbrk+0x64>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002748:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <_sbrk+0x64>)
 800274a:	4a12      	ldr	r2, [pc, #72]	@ (8002794 <_sbrk+0x68>)
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800274e:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <_sbrk+0x64>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	429a      	cmp	r2, r3
 800275a:	d207      	bcs.n	800276c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800275c:	f00f faea 	bl	8011d34 <__errno>
 8002760:	4603      	mov	r3, r0
 8002762:	220c      	movs	r2, #12
 8002764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	e009      	b.n	8002780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800276c:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002772:	4b07      	ldr	r3, [pc, #28]	@ (8002790 <_sbrk+0x64>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	4a05      	ldr	r2, [pc, #20]	@ (8002790 <_sbrk+0x64>)
 800277c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20020000 	.word	0x20020000
 800278c:	00000800 	.word	0x00000800
 8002790:	20000c48 	.word	0x20000c48
 8002794:	200027b8 	.word	0x200027b8

08002798 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800279c:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <SystemInit+0x20>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a2:	4a05      	ldr	r2, [pc, #20]	@ (80027b8 <SystemInit+0x20>)
 80027a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027c2:	f107 0310 	add.w	r3, r7, #16
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027da:	4b1d      	ldr	r3, [pc, #116]	@ (8002850 <MX_TIM2_Init+0x94>)
 80027dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80027e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002850 <MX_TIM2_Init+0x94>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e8:	4b19      	ldr	r3, [pc, #100]	@ (8002850 <MX_TIM2_Init+0x94>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72000;
 80027ee:	4b18      	ldr	r3, [pc, #96]	@ (8002850 <MX_TIM2_Init+0x94>)
 80027f0:	4a18      	ldr	r2, [pc, #96]	@ (8002854 <MX_TIM2_Init+0x98>)
 80027f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f4:	4b16      	ldr	r3, [pc, #88]	@ (8002850 <MX_TIM2_Init+0x94>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fa:	4b15      	ldr	r3, [pc, #84]	@ (8002850 <MX_TIM2_Init+0x94>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002800:	4813      	ldr	r0, [pc, #76]	@ (8002850 <MX_TIM2_Init+0x94>)
 8002802:	f008 f9c7 	bl	800ab94 <HAL_TIM_Base_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800280c:	f7ff fed8 	bl	80025c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002814:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	4619      	mov	r1, r3
 800281c:	480c      	ldr	r0, [pc, #48]	@ (8002850 <MX_TIM2_Init+0x94>)
 800281e:	f008 fcdb 	bl	800b1d8 <HAL_TIM_ConfigClockSource>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002828:	f7ff feca 	bl	80025c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800282c:	2300      	movs	r3, #0
 800282e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	4619      	mov	r1, r3
 8002838:	4805      	ldr	r0, [pc, #20]	@ (8002850 <MX_TIM2_Init+0x94>)
 800283a:	f009 fd15 	bl	800c268 <HAL_TIMEx_MasterConfigSynchronization>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002844:	f7ff febc 	bl	80025c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002848:	bf00      	nop
 800284a:	3720      	adds	r7, #32
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000c4c 	.word	0x20000c4c
 8002854:	00011940 	.word	0x00011940

08002858 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002868:	d113      	bne.n	8002892 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800286a:	4b0c      	ldr	r3, [pc, #48]	@ (800289c <HAL_TIM_Base_MspInit+0x44>)
 800286c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286e:	4a0b      	ldr	r2, [pc, #44]	@ (800289c <HAL_TIM_Base_MspInit+0x44>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	6593      	str	r3, [r2, #88]	@ 0x58
 8002876:	4b09      	ldr	r3, [pc, #36]	@ (800289c <HAL_TIM_Base_MspInit+0x44>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002882:	2200      	movs	r2, #0
 8002884:	2100      	movs	r1, #0
 8002886:	201c      	movs	r0, #28
 8002888:	f002 fdd0 	bl	800542c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800288c:	201c      	movs	r0, #28
 800288e:	f002 fdf7 	bl	8005480 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000

080028a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028a0:	480d      	ldr	r0, [pc, #52]	@ (80028d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028a4:	f7ff ff78 	bl	8002798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028a8:	480c      	ldr	r0, [pc, #48]	@ (80028dc <LoopForever+0x6>)
  ldr r1, =_edata
 80028aa:	490d      	ldr	r1, [pc, #52]	@ (80028e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028ac:	4a0d      	ldr	r2, [pc, #52]	@ (80028e4 <LoopForever+0xe>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028b0:	e002      	b.n	80028b8 <LoopCopyDataInit>

080028b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028b6:	3304      	adds	r3, #4

080028b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028bc:	d3f9      	bcc.n	80028b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028be:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028c0:	4c0a      	ldr	r4, [pc, #40]	@ (80028ec <LoopForever+0x16>)
  movs r3, #0
 80028c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c4:	e001      	b.n	80028ca <LoopFillZerobss>

080028c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028c8:	3204      	adds	r2, #4

080028ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028cc:	d3fb      	bcc.n	80028c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ce:	f00f fa37 	bl	8011d40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028d2:	f7ff fa2d 	bl	8001d30 <main>

080028d6 <LoopForever>:

LoopForever:
    b LoopForever
 80028d6:	e7fe      	b.n	80028d6 <LoopForever>
  ldr   r0, =_estack
 80028d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80028e4:	08013888 	.word	0x08013888
  ldr r2, =_sbss
 80028e8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80028ec:	200027b4 	.word	0x200027b4

080028f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028f0:	e7fe      	b.n	80028f0 <ADC1_2_IRQHandler>

080028f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028fc:	2003      	movs	r0, #3
 80028fe:	f002 fd75 	bl	80053ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002902:	200f      	movs	r0, #15
 8002904:	f000 f80e 	bl	8002924 <HAL_InitTick>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	71fb      	strb	r3, [r7, #7]
 8002912:	e001      	b.n	8002918 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002914:	f7ff fe66 	bl	80025e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002918:	79fb      	ldrb	r3, [r7, #7]

}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002930:	4b16      	ldr	r3, [pc, #88]	@ (800298c <HAL_InitTick+0x68>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d022      	beq.n	800297e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002938:	4b15      	ldr	r3, [pc, #84]	@ (8002990 <HAL_InitTick+0x6c>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b13      	ldr	r3, [pc, #76]	@ (800298c <HAL_InitTick+0x68>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002944:	fbb1 f3f3 	udiv	r3, r1, r3
 8002948:	fbb2 f3f3 	udiv	r3, r2, r3
 800294c:	4618      	mov	r0, r3
 800294e:	f002 fdaf 	bl	80054b0 <HAL_SYSTICK_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10f      	bne.n	8002978 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b0f      	cmp	r3, #15
 800295c:	d809      	bhi.n	8002972 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800295e:	2200      	movs	r2, #0
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	f04f 30ff 	mov.w	r0, #4294967295
 8002966:	f002 fd61 	bl	800542c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800296a:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <HAL_InitTick+0x70>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	e007      	b.n	8002982 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
 8002976:	e004      	b.n	8002982 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e001      	b.n	8002982 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002982:	7bfb      	ldrb	r3, [r7, #15]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000008 	.word	0x20000008
 8002990:	20000000 	.word	0x20000000
 8002994:	20000004 	.word	0x20000004

08002998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800299c:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <HAL_IncTick+0x1c>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b05      	ldr	r3, [pc, #20]	@ (80029b8 <HAL_IncTick+0x20>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4413      	add	r3, r2
 80029a6:	4a03      	ldr	r2, [pc, #12]	@ (80029b4 <HAL_IncTick+0x1c>)
 80029a8:	6013      	str	r3, [r2, #0]
}
 80029aa:	bf00      	nop
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	20000c98 	.word	0x20000c98
 80029b8:	20000008 	.word	0x20000008

080029bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return uwTick;
 80029c0:	4b03      	ldr	r3, [pc, #12]	@ (80029d0 <HAL_GetTick+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000c98 	.word	0x20000c98

080029d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029dc:	f7ff ffee 	bl	80029bc <HAL_GetTick>
 80029e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d004      	beq.n	80029f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ee:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <HAL_Delay+0x40>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4413      	add	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029f8:	bf00      	nop
 80029fa:	f7ff ffdf 	bl	80029bc <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d8f7      	bhi.n	80029fa <HAL_Delay+0x26>
  {
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000008 	.word	0x20000008

08002a18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	609a      	str	r2, [r3, #8]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	609a      	str	r2, [r3, #8]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(const ADC_TypeDef *ADCx)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0318 	and.w	r3, r3, #24
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3360      	adds	r3, #96	@ 0x60
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b08      	ldr	r3, [pc, #32]	@ (8002ae0 <LL_ADC_SetOffset+0x44>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ad4:	bf00      	nop
 8002ad6:	371c      	adds	r7, #28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	03fff000 	.word	0x03fff000

08002ae4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3360      	adds	r3, #96	@ 0x60
 8002af2:	461a      	mov	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3360      	adds	r3, #96	@ 0x60
 8002b20:	461a      	mov	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	431a      	orrs	r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b3a:	bf00      	nop
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b087      	sub	sp, #28
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3360      	adds	r3, #96	@ 0x60
 8002b56:	461a      	mov	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b70:	bf00      	nop
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3360      	adds	r3, #96	@ 0x60
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	615a      	str	r2, [r3, #20]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b087      	sub	sp, #28
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3330      	adds	r3, #48	@ 0x30
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	4413      	add	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f003 031f 	and.w	r3, r3, #31
 8002c28:	211f      	movs	r1, #31
 8002c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	401a      	ands	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	0e9b      	lsrs	r3, r3, #26
 8002c36:	f003 011f 	and.w	r1, r3, #31
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	431a      	orrs	r2, r3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c4a:	bf00      	nop
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b087      	sub	sp, #28
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	3314      	adds	r3, #20
 8002c66:	461a      	mov	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	0e5b      	lsrs	r3, r3, #25
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	4413      	add	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	0d1b      	lsrs	r3, r3, #20
 8002c7e:	f003 031f 	and.w	r3, r3, #31
 8002c82:	2107      	movs	r1, #7
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	0d1b      	lsrs	r3, r3, #20
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ca0:	bf00      	nop
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f003 0318 	and.w	r3, r3, #24
 8002cce:	4908      	ldr	r1, [pc, #32]	@ (8002cf0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cd0:	40d9      	lsrs	r1, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	400b      	ands	r3, r1
 8002cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	0007ffff 	.word	0x0007ffff

08002cf4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 031f 	and.w	r3, r3, #31
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6093      	str	r3, [r2, #8]
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d48:	d101      	bne.n	8002d4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d98:	d101      	bne.n	8002d9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dc0:	f043 0201 	orr.w	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002de4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002de8:	f043 0202 	orr.w	r2, r3, #2
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <LL_ADC_IsEnabled+0x18>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <LL_ADC_IsEnabled+0x1a>
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d101      	bne.n	8002e3a <LL_ADC_IsDisableOngoing+0x18>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <LL_ADC_IsDisableOngoing+0x1a>
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e5c:	f043 0204 	orr.w	r2, r3, #4
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d101      	bne.n	8002e88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d101      	bne.n	8002eae <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b089      	sub	sp, #36	@ 0x24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <HAL_ADC_Init+0x1c>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	f000 bc8c 	b.w	80037f0 <HAL_ADC_Init+0x934>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ee0:	d018      	beq.n	8002f14 <HAL_ADC_Init+0x58>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a63      	ldr	r2, [pc, #396]	@ (8003074 <HAL_ADC_Init+0x1b8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d013      	beq.n	8002f14 <HAL_ADC_Init+0x58>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a61      	ldr	r2, [pc, #388]	@ (8003078 <HAL_ADC_Init+0x1bc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00e      	beq.n	8002f14 <HAL_ADC_Init+0x58>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a60      	ldr	r2, [pc, #384]	@ (800307c <HAL_ADC_Init+0x1c0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d009      	beq.n	8002f14 <HAL_ADC_Init+0x58>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a5e      	ldr	r2, [pc, #376]	@ (8003080 <HAL_ADC_Init+0x1c4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d004      	beq.n	8002f14 <HAL_ADC_Init+0x58>
 8002f0a:	f240 119b 	movw	r1, #411	@ 0x19b
 8002f0e:	485d      	ldr	r0, [pc, #372]	@ (8003084 <HAL_ADC_Init+0x1c8>)
 8002f10:	f7ff fb5c 	bl	80025cc <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f1c:	d049      	beq.n	8002fb2 <HAL_ADC_Init+0xf6>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f26:	d044      	beq.n	8002fb2 <HAL_ADC_Init+0xf6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f30:	d03f      	beq.n	8002fb2 <HAL_ADC_Init+0xf6>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d03b      	beq.n	8002fb2 <HAL_ADC_Init+0xf6>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f42:	d036      	beq.n	8002fb2 <HAL_ADC_Init+0xf6>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f4c:	d031      	beq.n	8002fb2 <HAL_ADC_Init+0xf6>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f56:	d02c      	beq.n	8002fb2 <HAL_ADC_Init+0xf6>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f60:	d027      	beq.n	8002fb2 <HAL_ADC_Init+0xf6>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f6a:	d022      	beq.n	8002fb2 <HAL_ADC_Init+0xf6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f74:	d01d      	beq.n	8002fb2 <HAL_ADC_Init+0xf6>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f7e:	d018      	beq.n	8002fb2 <HAL_ADC_Init+0xf6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f88:	d013      	beq.n	8002fb2 <HAL_ADC_Init+0xf6>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f92:	d00e      	beq.n	8002fb2 <HAL_ADC_Init+0xf6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f9c:	d009      	beq.n	8002fb2 <HAL_ADC_Init+0xf6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002fa6:	d004      	beq.n	8002fb2 <HAL_ADC_Init+0xf6>
 8002fa8:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8002fac:	4835      	ldr	r0, [pc, #212]	@ (8003084 <HAL_ADC_Init+0x1c8>)
 8002fae:	f7ff fb0d 	bl	80025cc <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d010      	beq.n	8002fdc <HAL_ADC_Init+0x120>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d00c      	beq.n	8002fdc <HAL_ADC_Init+0x120>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b10      	cmp	r3, #16
 8002fc8:	d008      	beq.n	8002fdc <HAL_ADC_Init+0x120>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b18      	cmp	r3, #24
 8002fd0:	d004      	beq.n	8002fdc <HAL_ADC_Init+0x120>
 8002fd2:	f240 119d 	movw	r1, #413	@ 0x19d
 8002fd6:	482b      	ldr	r0, [pc, #172]	@ (8003084 <HAL_ADC_Init+0x1c8>)
 8002fd8:	f7ff faf8 	bl	80025cc <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d009      	beq.n	8002ff8 <HAL_ADC_Init+0x13c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fec:	d004      	beq.n	8002ff8 <HAL_ADC_Init+0x13c>
 8002fee:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8002ff2:	4824      	ldr	r0, [pc, #144]	@ (8003084 <HAL_ADC_Init+0x1c8>)
 8002ff4:	f7ff faea 	bl	80025cc <assert_failed>
  assert_param(IS_ADC_GAIN_COMPENSATION(hadc->Init.GainCompensation));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f244 0209 	movw	r2, #16393	@ 0x4009
 8003000:	4293      	cmp	r3, r2
 8003002:	d904      	bls.n	800300e <HAL_ADC_Init+0x152>
 8003004:	f240 119f 	movw	r1, #415	@ 0x19f
 8003008:	481e      	ldr	r0, [pc, #120]	@ (8003084 <HAL_ADC_Init+0x1c8>)
 800300a:	f7ff fadf 	bl	80025cc <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d008      	beq.n	8003028 <HAL_ADC_Init+0x16c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d004      	beq.n	8003028 <HAL_ADC_Init+0x16c>
 800301e:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8003022:	4818      	ldr	r0, [pc, #96]	@ (8003084 <HAL_ADC_Init+0x1c8>)
 8003024:	f7ff fad2 	bl	80025cc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	7f5b      	ldrb	r3, [r3, #29]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_ADC_Init+0x186>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	7f5b      	ldrb	r3, [r3, #29]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d004      	beq.n	8003042 <HAL_ADC_Init+0x186>
 8003038:	f240 11a1 	movw	r1, #417	@ 0x1a1
 800303c:	4811      	ldr	r0, [pc, #68]	@ (8003084 <HAL_ADC_Init+0x1c8>)
 800303e:	f7ff fac5 	bl	80025cc <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	2b00      	cmp	r3, #0
 8003048:	d01e      	beq.n	8003088 <HAL_ADC_Init+0x1cc>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003052:	d019      	beq.n	8003088 <HAL_ADC_Init+0x1cc>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800305c:	d014      	beq.n	8003088 <HAL_ADC_Init+0x1cc>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003066:	d00f      	beq.n	8003088 <HAL_ADC_Init+0x1cc>
 8003068:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 800306c:	4805      	ldr	r0, [pc, #20]	@ (8003084 <HAL_ADC_Init+0x1c8>)
 800306e:	f7ff faad 	bl	80025cc <assert_failed>
 8003072:	e009      	b.n	8003088 <HAL_ADC_Init+0x1cc>
 8003074:	50000100 	.word	0x50000100
 8003078:	50000400 	.word	0x50000400
 800307c:	50000500 	.word	0x50000500
 8003080:	50000600 	.word	0x50000600
 8003084:	08012648 	.word	0x08012648
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	f5b3 6fa4 	cmp.w	r3, #1312	@ 0x520
 8003090:	f000 80f3 	beq.w	800327a <HAL_ADC_Init+0x3be>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003098:	f5b3 6fa8 	cmp.w	r3, #1344	@ 0x540
 800309c:	f000 80ed 	beq.w	800327a <HAL_ADC_Init+0x3be>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 80030a8:	f000 80e7 	beq.w	800327a <HAL_ADC_Init+0x3be>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b0:	f5b3 6fac 	cmp.w	r3, #1376	@ 0x560
 80030b4:	f000 80e1 	beq.w	800327a <HAL_ADC_Init+0x3be>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80030c0:	f000 80db 	beq.w	800327a <HAL_ADC_Init+0x3be>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c8:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80030cc:	f000 80d5 	beq.w	800327a <HAL_ADC_Init+0x3be>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d4:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 80030d8:	f000 80cf 	beq.w	800327a <HAL_ADC_Init+0x3be>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e0:	f5b3 6ff8 	cmp.w	r3, #1984	@ 0x7c0
 80030e4:	f000 80c9 	beq.w	800327a <HAL_ADC_Init+0x3be>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ec:	f5b3 6f9c 	cmp.w	r3, #1248	@ 0x4e0
 80030f0:	f000 80c3 	beq.w	800327a <HAL_ADC_Init+0x3be>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80030fc:	f000 80bd 	beq.w	800327a <HAL_ADC_Init+0x3be>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	f5b3 6fb8 	cmp.w	r3, #1472	@ 0x5c0
 8003108:	f000 80b7 	beq.w	800327a <HAL_ADC_Init+0x3be>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003110:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003114:	f000 80b1 	beq.w	800327a <HAL_ADC_Init+0x3be>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311c:	f5b3 6fc4 	cmp.w	r3, #1568	@ 0x620
 8003120:	f000 80ab 	beq.w	800327a <HAL_ADC_Init+0x3be>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003128:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800312c:	f000 80a5 	beq.w	800327a <HAL_ADC_Init+0x3be>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	f5b3 6fd4 	cmp.w	r3, #1696	@ 0x6a0
 8003138:	f000 809f 	beq.w	800327a <HAL_ADC_Init+0x3be>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003140:	f5b3 6fd8 	cmp.w	r3, #1728	@ 0x6c0
 8003144:	f000 8099 	beq.w	800327a <HAL_ADC_Init+0x3be>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314c:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8003150:	f000 8093 	beq.w	800327a <HAL_ADC_Init+0x3be>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003158:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800315c:	f000 808d 	beq.w	800327a <HAL_ADC_Init+0x3be>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	f5b3 6fe4 	cmp.w	r3, #1824	@ 0x720
 8003168:	f000 8087 	beq.w	800327a <HAL_ADC_Init+0x3be>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003170:	f5b3 6fe8 	cmp.w	r3, #1856	@ 0x740
 8003174:	f000 8081 	beq.w	800327a <HAL_ADC_Init+0x3be>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	f5b3 6fec 	cmp.w	r3, #1888	@ 0x760
 8003180:	d07b      	beq.n	800327a <HAL_ADC_Init+0x3be>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003186:	f5b3 6ff0 	cmp.w	r3, #1920	@ 0x780
 800318a:	d076      	beq.n	800327a <HAL_ADC_Init+0x3be>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003190:	f5b3 6ff4 	cmp.w	r3, #1952	@ 0x7a0
 8003194:	d071      	beq.n	800327a <HAL_ADC_Init+0x3be>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800319e:	d004      	beq.n	80031aa <HAL_ADC_Init+0x2ee>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a97      	ldr	r2, [pc, #604]	@ (8003404 <HAL_ADC_Init+0x548>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d127      	bne.n	80031fa <HAL_ADC_Init+0x33e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031b2:	d062      	beq.n	800327a <HAL_ADC_Init+0x3be>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b8:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 80031bc:	d05d      	beq.n	800327a <HAL_ADC_Init+0x3be>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c2:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 80031c6:	d058      	beq.n	800327a <HAL_ADC_Init+0x3be>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031cc:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 80031d0:	d053      	beq.n	800327a <HAL_ADC_Init+0x3be>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d6:	f5b3 6f94 	cmp.w	r3, #1184	@ 0x4a0
 80031da:	d04e      	beq.n	800327a <HAL_ADC_Init+0x3be>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	f5b3 6fcc 	cmp.w	r3, #1632	@ 0x660
 80031e4:	d049      	beq.n	800327a <HAL_ADC_Init+0x3be>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ea:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80031ee:	d044      	beq.n	800327a <HAL_ADC_Init+0x3be>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f4:	f5b3 6f98 	cmp.w	r3, #1216	@ 0x4c0
 80031f8:	d03f      	beq.n	800327a <HAL_ADC_Init+0x3be>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a82      	ldr	r2, [pc, #520]	@ (8003408 <HAL_ADC_Init+0x54c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d009      	beq.n	8003218 <HAL_ADC_Init+0x35c>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a80      	ldr	r2, [pc, #512]	@ (800340c <HAL_ADC_Init+0x550>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d004      	beq.n	8003218 <HAL_ADC_Init+0x35c>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a7f      	ldr	r2, [pc, #508]	@ (8003410 <HAL_ADC_Init+0x554>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d127      	bne.n	8003268 <HAL_ADC_Init+0x3ac>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 8003220:	d02b      	beq.n	800327a <HAL_ADC_Init+0x3be>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003226:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 800322a:	d026      	beq.n	800327a <HAL_ADC_Init+0x3be>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003234:	d021      	beq.n	800327a <HAL_ADC_Init+0x3be>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323a:	f5b3 6f98 	cmp.w	r3, #1216	@ 0x4c0
 800323e:	d01c      	beq.n	800327a <HAL_ADC_Init+0x3be>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003244:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 8003248:	d017      	beq.n	800327a <HAL_ADC_Init+0x3be>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324e:	f5b3 6fcc 	cmp.w	r3, #1632	@ 0x660
 8003252:	d012      	beq.n	800327a <HAL_ADC_Init+0x3be>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 800325c:	d00d      	beq.n	800327a <HAL_ADC_Init+0x3be>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003262:	f5b3 6f94 	cmp.w	r3, #1184	@ 0x4a0
 8003266:	d008      	beq.n	800327a <HAL_ADC_Init+0x3be>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d004      	beq.n	800327a <HAL_ADC_Init+0x3be>
 8003270:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8003274:	4867      	ldr	r0, [pc, #412]	@ (8003414 <HAL_ADC_Init+0x558>)
 8003276:	f7ff f9a9 	bl	80025cc <assert_failed>
  assert_param(IS_ADC_SAMPLINGMODE(hadc->Init.SamplingMode));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00e      	beq.n	80032a0 <HAL_ADC_Init+0x3e4>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003286:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800328a:	d009      	beq.n	80032a0 <HAL_ADC_Init+0x3e4>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003290:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003294:	d004      	beq.n	80032a0 <HAL_ADC_Init+0x3e4>
 8003296:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 800329a:	485e      	ldr	r0, [pc, #376]	@ (8003414 <HAL_ADC_Init+0x558>)
 800329c:	f7ff f996 	bl	80025cc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_ADC_Init+0x402>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d004      	beq.n	80032be <HAL_ADC_Init+0x402>
 80032b4:	f240 11a5 	movw	r1, #421	@ 0x1a5
 80032b8:	4856      	ldr	r0, [pc, #344]	@ (8003414 <HAL_ADC_Init+0x558>)
 80032ba:	f7ff f987 	bl	80025cc <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d008      	beq.n	80032d8 <HAL_ADC_Init+0x41c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d004      	beq.n	80032d8 <HAL_ADC_Init+0x41c>
 80032ce:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 80032d2:	4850      	ldr	r0, [pc, #320]	@ (8003414 <HAL_ADC_Init+0x558>)
 80032d4:	f7ff f97a 	bl	80025cc <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d009      	beq.n	80032f4 <HAL_ADC_Init+0x438>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032e8:	d004      	beq.n	80032f4 <HAL_ADC_Init+0x438>
 80032ea:	f240 11a7 	movw	r1, #423	@ 0x1a7
 80032ee:	4849      	ldr	r0, [pc, #292]	@ (8003414 <HAL_ADC_Init+0x558>)
 80032f0:	f7ff f96c 	bl	80025cc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7f1b      	ldrb	r3, [r3, #28]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_ADC_Init+0x452>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	7f1b      	ldrb	r3, [r3, #28]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d004      	beq.n	800330e <HAL_ADC_Init+0x452>
 8003304:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 8003308:	4842      	ldr	r0, [pc, #264]	@ (8003414 <HAL_ADC_Init+0x558>)
 800330a:	f7ff f95f 	bl	80025cc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <HAL_ADC_Init+0x470>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800331e:	2b01      	cmp	r3, #1
 8003320:	d004      	beq.n	800332c <HAL_ADC_Init+0x470>
 8003322:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8003326:	483b      	ldr	r0, [pc, #236]	@ (8003414 <HAL_ADC_Init+0x558>)
 8003328:	f7ff f950 	bl	80025cc <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d02d      	beq.n	8003390 <HAL_ADC_Init+0x4d4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_ADC_Init+0x488>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	2b10      	cmp	r3, #16
 8003342:	d904      	bls.n	800334e <HAL_ADC_Init+0x492>
 8003344:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8003348:	4832      	ldr	r0, [pc, #200]	@ (8003414 <HAL_ADC_Init+0x558>)
 800334a:	f7ff f93f 	bl	80025cc <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003354:	2b00      	cmp	r3, #0
 8003356:	d009      	beq.n	800336c <HAL_ADC_Init+0x4b0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800335e:	2b01      	cmp	r3, #1
 8003360:	d004      	beq.n	800336c <HAL_ADC_Init+0x4b0>
 8003362:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8003366:	482b      	ldr	r0, [pc, #172]	@ (8003414 <HAL_ADC_Init+0x558>)
 8003368:	f7ff f930 	bl	80025cc <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003372:	2b01      	cmp	r3, #1
 8003374:	d10c      	bne.n	8003390 <HAL_ADC_Init+0x4d4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_ADC_Init+0x4ca>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003382:	2b08      	cmp	r3, #8
 8003384:	d904      	bls.n	8003390 <HAL_ADC_Init+0x4d4>
 8003386:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 800338a:	4822      	ldr	r0, [pc, #136]	@ (8003414 <HAL_ADC_Init+0x558>)
 800338c:	f7ff f91e 	bl	80025cc <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003396:	2b01      	cmp	r3, #1
 8003398:	d108      	bne.n	80033ac <HAL_ADC_Init+0x4f0>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	7f5b      	ldrb	r3, [r3, #29]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d104      	bne.n	80033ac <HAL_ADC_Init+0x4f0>
 80033a2:	f240 11b7 	movw	r1, #439	@ 0x1b7
 80033a6:	481b      	ldr	r0, [pc, #108]	@ (8003414 <HAL_ADC_Init+0x558>)
 80033a8:	f7ff f910 	bl	80025cc <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d109      	bne.n	80033c8 <HAL_ADC_Init+0x50c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7fd ff6d 	bl	8001294 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fcb1 	bl	8002d34 <LL_ADC_IsDeepPowerDownEnabled>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d004      	beq.n	80033e2 <HAL_ADC_Init+0x526>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fc97 	bl	8002d10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fccc 	bl	8002d84 <LL_ADC_IsInternalRegulatorEnabled>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d122      	bne.n	8003438 <HAL_ADC_Init+0x57c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff fcb0 	bl	8002d5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033fc:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <HAL_ADC_Init+0x55c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	099b      	lsrs	r3, r3, #6
 8003402:	e00b      	b.n	800341c <HAL_ADC_Init+0x560>
 8003404:	50000100 	.word	0x50000100
 8003408:	50000400 	.word	0x50000400
 800340c:	50000500 	.word	0x50000500
 8003410:	50000600 	.word	0x50000600
 8003414:	08012648 	.word	0x08012648
 8003418:	20000000 	.word	0x20000000
 800341c:	4a83      	ldr	r2, [pc, #524]	@ (800362c <HAL_ADC_Init+0x770>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	099b      	lsrs	r3, r3, #6
 8003424:	3301      	adds	r3, #1
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800342a:	e002      	b.n	8003432 <HAL_ADC_Init+0x576>
    {
      wait_loop_index--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3b01      	subs	r3, #1
 8003430:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f9      	bne.n	800342c <HAL_ADC_Init+0x570>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fca1 	bl	8002d84 <LL_ADC_IsInternalRegulatorEnabled>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10d      	bne.n	8003464 <HAL_ADC_Init+0x5a8>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344c:	f043 0210 	orr.w	r2, r3, #16
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003458:	f043 0201 	orr.w	r2, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fd01 	bl	8002e70 <LL_ADC_REG_IsConversionOngoing>
 800346e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	f040 81b0 	bne.w	80037de <HAL_ADC_Init+0x922>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	f040 81ac 	bne.w	80037de <HAL_ADC_Init+0x922>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800348e:	f043 0202 	orr.w	r2, r3, #2
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fcae 	bl	8002dfc <LL_ADC_IsEnabled>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d141      	bne.n	800352a <HAL_ADC_Init+0x66e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034ae:	d004      	beq.n	80034ba <HAL_ADC_Init+0x5fe>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a5e      	ldr	r2, [pc, #376]	@ (8003630 <HAL_ADC_Init+0x774>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d10f      	bne.n	80034da <HAL_ADC_Init+0x61e>
 80034ba:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80034be:	f7ff fc9d 	bl	8002dfc <LL_ADC_IsEnabled>
 80034c2:	4604      	mov	r4, r0
 80034c4:	485a      	ldr	r0, [pc, #360]	@ (8003630 <HAL_ADC_Init+0x774>)
 80034c6:	f7ff fc99 	bl	8002dfc <LL_ADC_IsEnabled>
 80034ca:	4603      	mov	r3, r0
 80034cc:	4323      	orrs	r3, r4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bf0c      	ite	eq
 80034d2:	2301      	moveq	r3, #1
 80034d4:	2300      	movne	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	e012      	b.n	8003500 <HAL_ADC_Init+0x644>
 80034da:	4856      	ldr	r0, [pc, #344]	@ (8003634 <HAL_ADC_Init+0x778>)
 80034dc:	f7ff fc8e 	bl	8002dfc <LL_ADC_IsEnabled>
 80034e0:	4604      	mov	r4, r0
 80034e2:	4855      	ldr	r0, [pc, #340]	@ (8003638 <HAL_ADC_Init+0x77c>)
 80034e4:	f7ff fc8a 	bl	8002dfc <LL_ADC_IsEnabled>
 80034e8:	4603      	mov	r3, r0
 80034ea:	431c      	orrs	r4, r3
 80034ec:	4853      	ldr	r0, [pc, #332]	@ (800363c <HAL_ADC_Init+0x780>)
 80034ee:	f7ff fc85 	bl	8002dfc <LL_ADC_IsEnabled>
 80034f2:	4603      	mov	r3, r0
 80034f4:	4323      	orrs	r3, r4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf0c      	ite	eq
 80034fa:	2301      	moveq	r3, #1
 80034fc:	2300      	movne	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d012      	beq.n	800352a <HAL_ADC_Init+0x66e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800350c:	d004      	beq.n	8003518 <HAL_ADC_Init+0x65c>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a47      	ldr	r2, [pc, #284]	@ (8003630 <HAL_ADC_Init+0x774>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_ADC_Init+0x660>
 8003518:	4a49      	ldr	r2, [pc, #292]	@ (8003640 <HAL_ADC_Init+0x784>)
 800351a:	e000      	b.n	800351e <HAL_ADC_Init+0x662>
 800351c:	4a49      	ldr	r2, [pc, #292]	@ (8003644 <HAL_ADC_Init+0x788>)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4619      	mov	r1, r3
 8003524:	4610      	mov	r0, r2
 8003526:	f7ff fa77 	bl	8002a18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	7f5b      	ldrb	r3, [r3, #29]
 800352e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003534:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800353a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003540:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003548:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003554:	2b01      	cmp	r3, #1
 8003556:	d106      	bne.n	8003566 <HAL_ADC_Init+0x6aa>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355c:	3b01      	subs	r3, #1
 800355e:	045b      	lsls	r3, r3, #17
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <HAL_ADC_Init+0x6c6>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003572:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	4b2f      	ldr	r3, [pc, #188]	@ (8003648 <HAL_ADC_Init+0x78c>)
 800358a:	4013      	ands	r3, r2
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	69b9      	ldr	r1, [r7, #24]
 8003592:	430b      	orrs	r3, r1
 8003594:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fc70 	bl	8002e96 <LL_ADC_INJ_IsConversionOngoing>
 80035b6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f040 80ed 	bne.w	800379a <HAL_ADC_Init+0x8de>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f040 80e9 	bne.w	800379a <HAL_ADC_Init+0x8de>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80035cc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80035d4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035e4:	f023 0302 	bic.w	r3, r3, #2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	69b9      	ldr	r1, [r7, #24]
 80035ee:	430b      	orrs	r3, r1
 80035f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d028      	beq.n	800364c <HAL_ADC_Init+0x790>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003608:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003612:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003616:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6911      	ldr	r1, [r2, #16]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	430b      	orrs	r3, r1
 8003624:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003628:	e024      	b.n	8003674 <HAL_ADC_Init+0x7b8>
 800362a:	bf00      	nop
 800362c:	053e2d63 	.word	0x053e2d63
 8003630:	50000100 	.word	0x50000100
 8003634:	50000400 	.word	0x50000400
 8003638:	50000500 	.word	0x50000500
 800363c:	50000600 	.word	0x50000600
 8003640:	50000300 	.word	0x50000300
 8003644:	50000700 	.word	0x50000700
 8003648:	fff04007 	.word	0xfff04007
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800365a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800366c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003670:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800367a:	2b01      	cmp	r3, #1
 800367c:	f040 8085 	bne.w	800378a <HAL_ADC_Init+0x8ce>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <HAL_ADC_Init+0x80e>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368c:	2b04      	cmp	r3, #4
 800368e:	d01c      	beq.n	80036ca <HAL_ADC_Init+0x80e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003694:	2b08      	cmp	r3, #8
 8003696:	d018      	beq.n	80036ca <HAL_ADC_Init+0x80e>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369c:	2b0c      	cmp	r3, #12
 800369e:	d014      	beq.n	80036ca <HAL_ADC_Init+0x80e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d010      	beq.n	80036ca <HAL_ADC_Init+0x80e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ac:	2b14      	cmp	r3, #20
 80036ae:	d00c      	beq.n	80036ca <HAL_ADC_Init+0x80e>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b4:	2b18      	cmp	r3, #24
 80036b6:	d008      	beq.n	80036ca <HAL_ADC_Init+0x80e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036bc:	2b1c      	cmp	r3, #28
 80036be:	d004      	beq.n	80036ca <HAL_ADC_Init+0x80e>
 80036c0:	f240 2176 	movw	r1, #630	@ 0x276
 80036c4:	484c      	ldr	r0, [pc, #304]	@ (80037f8 <HAL_ADC_Init+0x93c>)
 80036c6:	f7fe ff81 	bl	80025cc <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d025      	beq.n	800371e <HAL_ADC_Init+0x862>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d021      	beq.n	800371e <HAL_ADC_Init+0x862>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036de:	2b40      	cmp	r3, #64	@ 0x40
 80036e0:	d01d      	beq.n	800371e <HAL_ADC_Init+0x862>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036e6:	2b60      	cmp	r3, #96	@ 0x60
 80036e8:	d019      	beq.n	800371e <HAL_ADC_Init+0x862>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ee:	2b80      	cmp	r3, #128	@ 0x80
 80036f0:	d015      	beq.n	800371e <HAL_ADC_Init+0x862>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80036f8:	d011      	beq.n	800371e <HAL_ADC_Init+0x862>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003700:	d00d      	beq.n	800371e <HAL_ADC_Init+0x862>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003706:	2be0      	cmp	r3, #224	@ 0xe0
 8003708:	d009      	beq.n	800371e <HAL_ADC_Init+0x862>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800370e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003712:	d004      	beq.n	800371e <HAL_ADC_Init+0x862>
 8003714:	f240 2177 	movw	r1, #631	@ 0x277
 8003718:	4837      	ldr	r0, [pc, #220]	@ (80037f8 <HAL_ADC_Init+0x93c>)
 800371a:	f7fe ff57 	bl	80025cc <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <HAL_ADC_Init+0x87e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800372e:	d004      	beq.n	800373a <HAL_ADC_Init+0x87e>
 8003730:	f44f 711e 	mov.w	r1, #632	@ 0x278
 8003734:	4830      	ldr	r0, [pc, #192]	@ (80037f8 <HAL_ADC_Init+0x93c>)
 8003736:	f7fe ff49 	bl	80025cc <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800373e:	2b01      	cmp	r3, #1
 8003740:	d00a      	beq.n	8003758 <HAL_ADC_Init+0x89c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003746:	f240 4201 	movw	r2, #1025	@ 0x401
 800374a:	4293      	cmp	r3, r2
 800374c:	d004      	beq.n	8003758 <HAL_ADC_Init+0x89c>
 800374e:	f240 2179 	movw	r1, #633	@ 0x279
 8003752:	4829      	ldr	r0, [pc, #164]	@ (80037f8 <HAL_ADC_Init+0x93c>)
 8003754:	f7fe ff3a 	bl	80025cc <assert_failed>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003762:	f023 0304 	bic.w	r3, r3, #4
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800376e:	4311      	orrs	r1, r2
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003774:	4311      	orrs	r1, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800377a:	430a      	orrs	r2, r1
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	611a      	str	r2, [r3, #16]
 8003788:	e007      	b.n	800379a <HAL_ADC_Init+0x8de>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d10c      	bne.n	80037bc <HAL_ADC_Init+0x900>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a8:	f023 010f 	bic.w	r1, r3, #15
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	1e5a      	subs	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80037ba:	e007      	b.n	80037cc <HAL_ADC_Init+0x910>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 020f 	bic.w	r2, r2, #15
 80037ca:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d0:	f023 0303 	bic.w	r3, r3, #3
 80037d4:	f043 0201 	orr.w	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037dc:	e007      	b.n	80037ee <HAL_ADC_Init+0x932>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e2:	f043 0210 	orr.w	r2, r3, #16
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3724      	adds	r7, #36	@ 0x24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd90      	pop	{r4, r7, pc}
 80037f8:	08012648 	.word	0x08012648

080037fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003810:	d004      	beq.n	800381c <HAL_ADC_Start_DMA+0x20>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a69      	ldr	r2, [pc, #420]	@ (80039bc <HAL_ADC_Start_DMA+0x1c0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d101      	bne.n	8003820 <HAL_ADC_Start_DMA+0x24>
 800381c:	4b68      	ldr	r3, [pc, #416]	@ (80039c0 <HAL_ADC_Start_DMA+0x1c4>)
 800381e:	e000      	b.n	8003822 <HAL_ADC_Start_DMA+0x26>
 8003820:	4b68      	ldr	r3, [pc, #416]	@ (80039c4 <HAL_ADC_Start_DMA+0x1c8>)
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fa66 	bl	8002cf4 <LL_ADC_GetMultimode>
 8003828:	6138      	str	r0, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003832:	d018      	beq.n	8003866 <HAL_ADC_Start_DMA+0x6a>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a60      	ldr	r2, [pc, #384]	@ (80039bc <HAL_ADC_Start_DMA+0x1c0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_ADC_Start_DMA+0x6a>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a61      	ldr	r2, [pc, #388]	@ (80039c8 <HAL_ADC_Start_DMA+0x1cc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00e      	beq.n	8003866 <HAL_ADC_Start_DMA+0x6a>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a5f      	ldr	r2, [pc, #380]	@ (80039cc <HAL_ADC_Start_DMA+0x1d0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d009      	beq.n	8003866 <HAL_ADC_Start_DMA+0x6a>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a5e      	ldr	r2, [pc, #376]	@ (80039d0 <HAL_ADC_Start_DMA+0x1d4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_ADC_Start_DMA+0x6a>
 800385c:	f240 71db 	movw	r1, #2011	@ 0x7db
 8003860:	485c      	ldr	r0, [pc, #368]	@ (80039d4 <HAL_ADC_Start_DMA+0x1d8>)
 8003862:	f7fe feb3 	bl	80025cc <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff fb00 	bl	8002e70 <LL_ADC_REG_IsConversionOngoing>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	f040 809b 	bne.w	80039ae <HAL_ADC_Start_DMA+0x1b2>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_ADC_Start_DMA+0x8a>
 8003882:	2302      	movs	r3, #2
 8003884:	e096      	b.n	80039b4 <HAL_ADC_Start_DMA+0x1b8>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a4f      	ldr	r2, [pc, #316]	@ (80039d0 <HAL_ADC_Start_DMA+0x1d4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d008      	beq.n	80038aa <HAL_ADC_Start_DMA+0xae>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <HAL_ADC_Start_DMA+0xae>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b05      	cmp	r3, #5
 80038a2:	d002      	beq.n	80038aa <HAL_ADC_Start_DMA+0xae>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	2b09      	cmp	r3, #9
 80038a8:	d17a      	bne.n	80039a0 <HAL_ADC_Start_DMA+0x1a4>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f001 f880 	bl	80049b0 <ADC_Enable>
 80038b0:	4603      	mov	r3, r0
 80038b2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d16d      	bne.n	8003996 <HAL_ADC_Start_DMA+0x19a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a3a      	ldr	r2, [pc, #232]	@ (80039bc <HAL_ADC_Start_DMA+0x1c0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d009      	beq.n	80038ec <HAL_ADC_Start_DMA+0xf0>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a3b      	ldr	r2, [pc, #236]	@ (80039cc <HAL_ADC_Start_DMA+0x1d0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d002      	beq.n	80038e8 <HAL_ADC_Start_DMA+0xec>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	e003      	b.n	80038f0 <HAL_ADC_Start_DMA+0xf4>
 80038e8:	4b37      	ldr	r3, [pc, #220]	@ (80039c8 <HAL_ADC_Start_DMA+0x1cc>)
 80038ea:	e001      	b.n	80038f0 <HAL_ADC_Start_DMA+0xf4>
 80038ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d002      	beq.n	80038fe <HAL_ADC_Start_DMA+0x102>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <HAL_ADC_Start_DMA+0x10e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003902:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d006      	beq.n	8003924 <HAL_ADC_Start_DMA+0x128>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391a:	f023 0206 	bic.w	r2, r3, #6
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	661a      	str	r2, [r3, #96]	@ 0x60
 8003922:	e002      	b.n	800392a <HAL_ADC_Start_DMA+0x12e>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392e:	4a2a      	ldr	r2, [pc, #168]	@ (80039d8 <HAL_ADC_Start_DMA+0x1dc>)
 8003930:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003936:	4a29      	ldr	r2, [pc, #164]	@ (80039dc <HAL_ADC_Start_DMA+0x1e0>)
 8003938:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393e:	4a28      	ldr	r2, [pc, #160]	@ (80039e0 <HAL_ADC_Start_DMA+0x1e4>)
 8003940:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	221c      	movs	r2, #28
 8003948:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0210 	orr.w	r2, r2, #16
 8003960:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0201 	orr.w	r2, r2, #1
 8003970:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3340      	adds	r3, #64	@ 0x40
 800397c:	4619      	mov	r1, r3
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f001 ff39 	bl	80057f8 <HAL_DMA_Start_IT>
 8003986:	4603      	mov	r3, r0
 8003988:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fa5a 	bl	8002e48 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003994:	e00d      	b.n	80039b2 <HAL_ADC_Start_DMA+0x1b6>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800399e:	e008      	b.n	80039b2 <HAL_ADC_Start_DMA+0x1b6>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80039ac:	e001      	b.n	80039b2 <HAL_ADC_Start_DMA+0x1b6>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
 80039b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	50000100 	.word	0x50000100
 80039c0:	50000300 	.word	0x50000300
 80039c4:	50000700 	.word	0x50000700
 80039c8:	50000400 	.word	0x50000400
 80039cc:	50000500 	.word	0x50000500
 80039d0:	50000600 	.word	0x50000600
 80039d4:	08012648 	.word	0x08012648
 80039d8:	08004b9b 	.word	0x08004b9b
 80039dc:	08004c73 	.word	0x08004c73
 80039e0:	08004c8f 	.word	0x08004c8f

080039e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003a20:	b590      	push	{r4, r7, lr}
 8003a22:	b0b7      	sub	sp, #220	@ 0xdc
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a3c:	d018      	beq.n	8003a70 <HAL_ADC_ConfigChannel+0x50>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a93      	ldr	r2, [pc, #588]	@ (8003c90 <HAL_ADC_ConfigChannel+0x270>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d013      	beq.n	8003a70 <HAL_ADC_ConfigChannel+0x50>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a91      	ldr	r2, [pc, #580]	@ (8003c94 <HAL_ADC_ConfigChannel+0x274>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00e      	beq.n	8003a70 <HAL_ADC_ConfigChannel+0x50>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a90      	ldr	r2, [pc, #576]	@ (8003c98 <HAL_ADC_ConfigChannel+0x278>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d009      	beq.n	8003a70 <HAL_ADC_ConfigChannel+0x50>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a8e      	ldr	r2, [pc, #568]	@ (8003c9c <HAL_ADC_ConfigChannel+0x27c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_ADC_ConfigChannel+0x50>
 8003a66:	f640 21d2 	movw	r1, #2770	@ 0xad2
 8003a6a:	488d      	ldr	r0, [pc, #564]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x280>)
 8003a6c:	f7fe fdae 	bl	80025cc <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b06      	cmp	r3, #6
 8003a76:	d04f      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xf8>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b0c      	cmp	r3, #12
 8003a7e:	d04b      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xf8>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b12      	cmp	r3, #18
 8003a86:	d047      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xf8>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b18      	cmp	r3, #24
 8003a8e:	d043      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xf8>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a98:	d03e      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xf8>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8003aa2:	d039      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xf8>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8003aac:	d034      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xf8>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8003ab6:	d02f      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xf8>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003ac0:	d02a      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xf8>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aca:	d025      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xf8>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f240 2206 	movw	r2, #518	@ 0x206
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d01f      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xf8>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 8003ae0:	d01a      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xf8>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f240 2212 	movw	r2, #530	@ 0x212
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d014      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xf8>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8003af6:	d00f      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xf8>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b00:	d00a      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xf8>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f240 3206 	movw	r2, #774	@ 0x306
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d004      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0xf8>
 8003b0e:	f640 21d3 	movw	r1, #2771	@ 0xad3
 8003b12:	4863      	ldr	r0, [pc, #396]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x280>)
 8003b14:	f7fe fd5a 	bl	80025cc <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(pConfig->SamplingTime));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d025      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0x14c>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b28:	d020      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0x14c>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d01c      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0x14c>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d018      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0x14c>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d014      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0x14c>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d010      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0x14c>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b05      	cmp	r3, #5
 8003b50:	d00c      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0x14c>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b06      	cmp	r3, #6
 8003b58:	d008      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0x14c>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b07      	cmp	r3, #7
 8003b60:	d004      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0x14c>
 8003b62:	f640 21d4 	movw	r1, #2772	@ 0xad4
 8003b66:	484e      	ldr	r0, [pc, #312]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x280>)
 8003b68:	f7fe fd30 	bl	80025cc <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(pConfig->SingleDiff));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b72:	d009      	beq.n	8003b88 <HAL_ADC_ConfigChannel+0x168>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a4a      	ldr	r2, [pc, #296]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x284>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d004      	beq.n	8003b88 <HAL_ADC_ConfigChannel+0x168>
 8003b7e:	f640 21d5 	movw	r1, #2773	@ 0xad5
 8003b82:	4847      	ldr	r0, [pc, #284]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x280>)
 8003b84:	f7fe fd22 	bl	80025cc <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(pConfig->OffsetNumber));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d014      	beq.n	8003bba <HAL_ADC_ConfigChannel+0x19a>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d010      	beq.n	8003bba <HAL_ADC_ConfigChannel+0x19a>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d00c      	beq.n	8003bba <HAL_ADC_ConfigChannel+0x19a>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d008      	beq.n	8003bba <HAL_ADC_ConfigChannel+0x19a>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d004      	beq.n	8003bba <HAL_ADC_ConfigChannel+0x19a>
 8003bb0:	f640 21d6 	movw	r1, #2774	@ 0xad6
 8003bb4:	483a      	ldr	r0, [pc, #232]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x280>)
 8003bb6:	f7fe fd09 	bl	80025cc <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pConfig->Offset));
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	695c      	ldr	r4, [r3, #20]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe ff5c 	bl	8002a80 <LL_ADC_GetResolution>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	089b      	lsrs	r3, r3, #2
 8003bcc:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd4:	429c      	cmp	r4, r3
 8003bd6:	d904      	bls.n	8003be2 <HAL_ADC_ConfigChannel+0x1c2>
 8003bd8:	f640 21d7 	movw	r1, #2775	@ 0xad7
 8003bdc:	4830      	ldr	r0, [pc, #192]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x280>)
 8003bde:	f7fe fcf5 	bl	80025cc <assert_failed>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((pConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d009      	beq.n	8003bfe <HAL_ADC_ConfigChannel+0x1de>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d104      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x1de>
 8003bf4:	f640 21db 	movw	r1, #2779	@ 0xadb
 8003bf8:	4829      	ldr	r0, [pc, #164]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x280>)
 8003bfa:	f7fe fce7 	bl	80025cc <assert_failed>

  /* Verification of channel number */
  if (pConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	4a28      	ldr	r2, [pc, #160]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x284>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	f000 8189 	beq.w	8003f1c <HAL_ADC_ConfigChannel+0x4fc>
  {
    assert_param(IS_ADC_CHANNEL(hadc, pConfig->Channel));
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	f000 8253 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a23      	ldr	r2, [pc, #140]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x288>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	f000 824d 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a21      	ldr	r2, [pc, #132]	@ (8003cac <HAL_ADC_ConfigChannel+0x28c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	f000 8247 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x290>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	f000 8241 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x294>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	f000 823b 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1b      	ldr	r2, [pc, #108]	@ (8003cb8 <HAL_ADC_ConfigChannel+0x298>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	f000 8235 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a19      	ldr	r2, [pc, #100]	@ (8003cbc <HAL_ADC_ConfigChannel+0x29c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	f000 822f 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a17      	ldr	r2, [pc, #92]	@ (8003cc0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	f000 8229 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a15      	ldr	r2, [pc, #84]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x2a4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	f000 8223 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a13      	ldr	r2, [pc, #76]	@ (8003cc8 <HAL_ADC_ConfigChannel+0x2a8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	f000 821d 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a11      	ldr	r2, [pc, #68]	@ (8003ccc <HAL_ADC_ConfigChannel+0x2ac>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	f000 8217 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003c8c:	e020      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x2b0>
 8003c8e:	bf00      	nop
 8003c90:	50000100 	.word	0x50000100
 8003c94:	50000400 	.word	0x50000400
 8003c98:	50000500 	.word	0x50000500
 8003c9c:	50000600 	.word	0x50000600
 8003ca0:	08012648 	.word	0x08012648
 8003ca4:	407f0000 	.word	0x407f0000
 8003ca8:	04300002 	.word	0x04300002
 8003cac:	08600004 	.word	0x08600004
 8003cb0:	19200040 	.word	0x19200040
 8003cb4:	1d500080 	.word	0x1d500080
 8003cb8:	21800100 	.word	0x21800100
 8003cbc:	25b00200 	.word	0x25b00200
 8003cc0:	2a000400 	.word	0x2a000400
 8003cc4:	2e300800 	.word	0x2e300800
 8003cc8:	32601000 	.word	0x32601000
 8003ccc:	3ac04000 	.word	0x3ac04000
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a7a      	ldr	r2, [pc, #488]	@ (8003ec0 <HAL_ADC_ConfigChannel+0x4a0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	f000 81ef 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ce4:	d129      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x31a>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a76      	ldr	r2, [pc, #472]	@ (8003ec4 <HAL_ADC_ConfigChannel+0x4a4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	f000 81e4 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a74      	ldr	r2, [pc, #464]	@ (8003ec8 <HAL_ADC_ConfigChannel+0x4a8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	f000 81de 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a72      	ldr	r2, [pc, #456]	@ (8003ecc <HAL_ADC_ConfigChannel+0x4ac>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	f000 81d8 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a70      	ldr	r2, [pc, #448]	@ (8003ed0 <HAL_ADC_ConfigChannel+0x4b0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	f000 81d2 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a6e      	ldr	r2, [pc, #440]	@ (8003ed4 <HAL_ADC_ConfigChannel+0x4b4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	f000 81cc 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a6c      	ldr	r2, [pc, #432]	@ (8003ed8 <HAL_ADC_ConfigChannel+0x4b8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	f000 81c6 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a6a      	ldr	r2, [pc, #424]	@ (8003edc <HAL_ADC_ConfigChannel+0x4bc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	f000 81c0 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a68      	ldr	r2, [pc, #416]	@ (8003ee0 <HAL_ADC_ConfigChannel+0x4c0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d129      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x378>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a5e      	ldr	r2, [pc, #376]	@ (8003ec4 <HAL_ADC_ConfigChannel+0x4a4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	f000 81b5 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a5c      	ldr	r2, [pc, #368]	@ (8003ec8 <HAL_ADC_ConfigChannel+0x4a8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	f000 81af 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a5a      	ldr	r2, [pc, #360]	@ (8003ecc <HAL_ADC_ConfigChannel+0x4ac>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	f000 81a9 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ee4 <HAL_ADC_ConfigChannel+0x4c4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	f000 81a3 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a5b      	ldr	r2, [pc, #364]	@ (8003ee8 <HAL_ADC_ConfigChannel+0x4c8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	f000 819d 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a59      	ldr	r2, [pc, #356]	@ (8003eec <HAL_ADC_ConfigChannel+0x4cc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	f000 8197 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a57      	ldr	r2, [pc, #348]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x4d0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	f000 8191 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a55      	ldr	r2, [pc, #340]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x4d4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d129      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x3d6>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a47      	ldr	r2, [pc, #284]	@ (8003ec4 <HAL_ADC_ConfigChannel+0x4a4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	f000 8186 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a45      	ldr	r2, [pc, #276]	@ (8003ec8 <HAL_ADC_ConfigChannel+0x4a8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	f000 8180 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a43      	ldr	r2, [pc, #268]	@ (8003ecc <HAL_ADC_ConfigChannel+0x4ac>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	f000 817a 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a4b      	ldr	r2, [pc, #300]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x4d8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	f000 8174 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a49      	ldr	r2, [pc, #292]	@ (8003efc <HAL_ADC_ConfigChannel+0x4dc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	f000 816e 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a3d      	ldr	r2, [pc, #244]	@ (8003ed8 <HAL_ADC_ConfigChannel+0x4b8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	f000 8168 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a3b      	ldr	r2, [pc, #236]	@ (8003edc <HAL_ADC_ConfigChannel+0x4bc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	f000 8162 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a41      	ldr	r2, [pc, #260]	@ (8003f00 <HAL_ADC_ConfigChannel+0x4e0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d129      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x434>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a2f      	ldr	r2, [pc, #188]	@ (8003ec4 <HAL_ADC_ConfigChannel+0x4a4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	f000 8157 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a2d      	ldr	r2, [pc, #180]	@ (8003ec8 <HAL_ADC_ConfigChannel+0x4a8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	f000 8151 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003ecc <HAL_ADC_ConfigChannel+0x4ac>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	f000 814b 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a2e      	ldr	r2, [pc, #184]	@ (8003ee4 <HAL_ADC_ConfigChannel+0x4c4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	f000 8145 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a31      	ldr	r2, [pc, #196]	@ (8003efc <HAL_ADC_ConfigChannel+0x4dc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	f000 813f 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a30      	ldr	r2, [pc, #192]	@ (8003f04 <HAL_ADC_ConfigChannel+0x4e4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	f000 8139 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a23      	ldr	r2, [pc, #140]	@ (8003edc <HAL_ADC_ConfigChannel+0x4bc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	f000 8133 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a2b      	ldr	r2, [pc, #172]	@ (8003f08 <HAL_ADC_ConfigChannel+0x4e8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d129      	bne.n	8003eb2 <HAL_ADC_ConfigChannel+0x492>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a2a      	ldr	r2, [pc, #168]	@ (8003f0c <HAL_ADC_ConfigChannel+0x4ec>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	f000 8128 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a28      	ldr	r2, [pc, #160]	@ (8003f10 <HAL_ADC_ConfigChannel+0x4f0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	f000 8122 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a26      	ldr	r2, [pc, #152]	@ (8003f14 <HAL_ADC_ConfigChannel+0x4f4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	f000 811c 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a17      	ldr	r2, [pc, #92]	@ (8003ee4 <HAL_ADC_ConfigChannel+0x4c4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	f000 8116 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1a      	ldr	r2, [pc, #104]	@ (8003efc <HAL_ADC_ConfigChannel+0x4dc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	f000 8110 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ed8 <HAL_ADC_ConfigChannel+0x4b8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	f000 810a 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8003edc <HAL_ADC_ConfigChannel+0x4bc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	f000 8104 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003eb2:	f44f 612e 	mov.w	r1, #2784	@ 0xae0
 8003eb6:	4818      	ldr	r0, [pc, #96]	@ (8003f18 <HAL_ADC_ConfigChannel+0x4f8>)
 8003eb8:	f7fe fb88 	bl	80025cc <assert_failed>
 8003ebc:	e0fd      	b.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003ebe:	bf00      	nop
 8003ec0:	3ef08000 	.word	0x3ef08000
 8003ec4:	0c900008 	.word	0x0c900008
 8003ec8:	10c00010 	.word	0x10c00010
 8003ecc:	14f00020 	.word	0x14f00020
 8003ed0:	b6902000 	.word	0xb6902000
 8003ed4:	c3210000 	.word	0xc3210000
 8003ed8:	c7520000 	.word	0xc7520000
 8003edc:	cb840000 	.word	0xcb840000
 8003ee0:	50000100 	.word	0x50000100
 8003ee4:	36902000 	.word	0x36902000
 8003ee8:	c3290000 	.word	0xc3290000
 8003eec:	47520000 	.word	0x47520000
 8003ef0:	cb8c0000 	.word	0xcb8c0000
 8003ef4:	50000400 	.word	0x50000400
 8003ef8:	b6982000 	.word	0xb6982000
 8003efc:	43210000 	.word	0x43210000
 8003f00:	50000500 	.word	0x50000500
 8003f04:	c75a0000 	.word	0xc75a0000
 8003f08:	50000600 	.word	0x50000600
 8003f0c:	8c900008 	.word	0x8c900008
 8003f10:	90c00010 	.word	0x90c00010
 8003f14:	94f00020 	.word	0x94f00020
 8003f18:	08012648 	.word	0x08012648
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a8b      	ldr	r2, [pc, #556]	@ (8004150 <HAL_ADC_ConfigChannel+0x730>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	f000 80c9 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a89      	ldr	r2, [pc, #548]	@ (8004154 <HAL_ADC_ConfigChannel+0x734>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	f000 80c3 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a87      	ldr	r2, [pc, #540]	@ (8004158 <HAL_ADC_ConfigChannel+0x738>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	f000 80bd 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a85      	ldr	r2, [pc, #532]	@ (800415c <HAL_ADC_ConfigChannel+0x73c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	f000 80b7 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a83      	ldr	r2, [pc, #524]	@ (8004160 <HAL_ADC_ConfigChannel+0x740>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	f000 80b1 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a81      	ldr	r2, [pc, #516]	@ (8004164 <HAL_ADC_ConfigChannel+0x744>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	f000 80ab 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a7f      	ldr	r2, [pc, #508]	@ (8004168 <HAL_ADC_ConfigChannel+0x748>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	f000 80a5 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a7d      	ldr	r2, [pc, #500]	@ (800416c <HAL_ADC_ConfigChannel+0x74c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	f000 809f 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f84:	d117      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x596>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a79      	ldr	r2, [pc, #484]	@ (8004170 <HAL_ADC_ConfigChannel+0x750>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	f000 8094 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a77      	ldr	r2, [pc, #476]	@ (8004174 <HAL_ADC_ConfigChannel+0x754>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	f000 808e 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a75      	ldr	r2, [pc, #468]	@ (8004178 <HAL_ADC_ConfigChannel+0x758>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	f000 8088 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a73      	ldr	r2, [pc, #460]	@ (800417c <HAL_ADC_ConfigChannel+0x75c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	f000 8082 	beq.w	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a71      	ldr	r2, [pc, #452]	@ (8004180 <HAL_ADC_ConfigChannel+0x760>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d11d      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x5dc>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a6a      	ldr	r2, [pc, #424]	@ (8004170 <HAL_ADC_ConfigChannel+0x750>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d077      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a69      	ldr	r2, [pc, #420]	@ (8004174 <HAL_ADC_ConfigChannel+0x754>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d072      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a67      	ldr	r2, [pc, #412]	@ (8004178 <HAL_ADC_ConfigChannel+0x758>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d06d      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a66      	ldr	r2, [pc, #408]	@ (800417c <HAL_ADC_ConfigChannel+0x75c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d068      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a65      	ldr	r2, [pc, #404]	@ (8004184 <HAL_ADC_ConfigChannel+0x764>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d063      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a64      	ldr	r2, [pc, #400]	@ (8004188 <HAL_ADC_ConfigChannel+0x768>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d05e      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a62      	ldr	r2, [pc, #392]	@ (800418c <HAL_ADC_ConfigChannel+0x76c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d118      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x618>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a59      	ldr	r2, [pc, #356]	@ (8004170 <HAL_ADC_ConfigChannel+0x750>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d054      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a57      	ldr	r2, [pc, #348]	@ (8004174 <HAL_ADC_ConfigChannel+0x754>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d04f      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a56      	ldr	r2, [pc, #344]	@ (8004178 <HAL_ADC_ConfigChannel+0x758>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d04a      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a54      	ldr	r2, [pc, #336]	@ (800417c <HAL_ADC_ConfigChannel+0x75c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d045      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a57      	ldr	r2, [pc, #348]	@ (8004190 <HAL_ADC_ConfigChannel+0x770>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d040      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a55      	ldr	r2, [pc, #340]	@ (8004194 <HAL_ADC_ConfigChannel+0x774>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d122      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x668>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a4a      	ldr	r2, [pc, #296]	@ (8004170 <HAL_ADC_ConfigChannel+0x750>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d036      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a48      	ldr	r2, [pc, #288]	@ (8004174 <HAL_ADC_ConfigChannel+0x754>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d031      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a47      	ldr	r2, [pc, #284]	@ (8004178 <HAL_ADC_ConfigChannel+0x758>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d02c      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a45      	ldr	r2, [pc, #276]	@ (800417c <HAL_ADC_ConfigChannel+0x75c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d027      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a45      	ldr	r2, [pc, #276]	@ (8004184 <HAL_ADC_ConfigChannel+0x764>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d022      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a43      	ldr	r2, [pc, #268]	@ (8004188 <HAL_ADC_ConfigChannel+0x768>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01d      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a43      	ldr	r2, [pc, #268]	@ (8004190 <HAL_ADC_ConfigChannel+0x770>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d018      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a42      	ldr	r2, [pc, #264]	@ (8004198 <HAL_ADC_ConfigChannel+0x778>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d10e      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x690>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a3b      	ldr	r2, [pc, #236]	@ (8004184 <HAL_ADC_ConfigChannel+0x764>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00e      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a39      	ldr	r2, [pc, #228]	@ (8004188 <HAL_ADC_ConfigChannel+0x768>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d009      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a39      	ldr	r2, [pc, #228]	@ (8004190 <HAL_ADC_ConfigChannel+0x770>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d004      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x69a>
 80040b0:	f640 21e4 	movw	r1, #2788	@ 0xae4
 80040b4:	4839      	ldr	r0, [pc, #228]	@ (800419c <HAL_ADC_ConfigChannel+0x77c>)
 80040b6:	f7fe fa89 	bl	80025cc <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d102      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x6aa>
 80040c4:	2302      	movs	r3, #2
 80040c6:	f000 bc58 	b.w	800497a <HAL_ADC_ConfigChannel+0xf5a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe feca 	bl	8002e70 <LL_ADC_REG_IsConversionOngoing>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 8438 	bne.w	8004954 <HAL_ADC_ConfigChannel+0xf34>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	6859      	ldr	r1, [r3, #4]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	f7fe fd84 	bl	8002bfe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe feb8 	bl	8002e70 <LL_ADC_REG_IsConversionOngoing>
 8004100:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f7fe fec4 	bl	8002e96 <LL_ADC_INJ_IsConversionOngoing>
 800410e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004112:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004116:	2b00      	cmp	r3, #0
 8004118:	f040 821f 	bne.w	800455a <HAL_ADC_ConfigChannel+0xb3a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800411c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004120:	2b00      	cmp	r3, #0
 8004122:	f040 821a 	bne.w	800455a <HAL_ADC_ConfigChannel+0xb3a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800412e:	d137      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x780>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2200      	movs	r2, #0
 800413a:	4619      	mov	r1, r3
 800413c:	f7fe fd8b 	bl	8002c56 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004148:	4618      	mov	r0, r3
 800414a:	f7fe fd32 	bl	8002bb2 <LL_ADC_SetSamplingTimeCommonConfig>
 800414e:	e036      	b.n	80041be <HAL_ADC_ConfigChannel+0x79e>
 8004150:	04300002 	.word	0x04300002
 8004154:	19200040 	.word	0x19200040
 8004158:	1d500080 	.word	0x1d500080
 800415c:	21800100 	.word	0x21800100
 8004160:	25b00200 	.word	0x25b00200
 8004164:	2a000400 	.word	0x2a000400
 8004168:	2e300800 	.word	0x2e300800
 800416c:	3ac04000 	.word	0x3ac04000
 8004170:	08600004 	.word	0x08600004
 8004174:	0c900008 	.word	0x0c900008
 8004178:	10c00010 	.word	0x10c00010
 800417c:	14f00020 	.word	0x14f00020
 8004180:	50000100 	.word	0x50000100
 8004184:	32601000 	.word	0x32601000
 8004188:	36902000 	.word	0x36902000
 800418c:	50000400 	.word	0x50000400
 8004190:	3ef08000 	.word	0x3ef08000
 8004194:	50000500 	.word	0x50000500
 8004198:	50000600 	.word	0x50000600
 800419c:	08012648 	.word	0x08012648
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6819      	ldr	r1, [r3, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	461a      	mov	r2, r3
 80041ae:	f7fe fd52 	bl	8002c56 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe fcfa 	bl	8002bb2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	08db      	lsrs	r3, r3, #3
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d03d      	beq.n	800425c <HAL_ADC_ConfigChannel+0x83c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6919      	ldr	r1, [r3, #16]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80041f0:	f7fe fc54 	bl	8002a9c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d009      	beq.n	8004210 <HAL_ADC_ConfigChannel+0x7f0>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004204:	d004      	beq.n	8004210 <HAL_ADC_ConfigChannel+0x7f0>
 8004206:	f640 311c 	movw	r1, #2844	@ 0xb1c
 800420a:	48b3      	ldr	r0, [pc, #716]	@ (80044d8 <HAL_ADC_ConfigChannel+0xab8>)
 800420c:	f7fe f9de 	bl	80025cc <assert_failed>
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	7f1b      	ldrb	r3, [r3, #28]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_ADC_ConfigChannel+0x80a>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	7f1b      	ldrb	r3, [r3, #28]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d004      	beq.n	800422a <HAL_ADC_ConfigChannel+0x80a>
 8004220:	f640 311d 	movw	r1, #2845	@ 0xb1d
 8004224:	48ac      	ldr	r0, [pc, #688]	@ (80044d8 <HAL_ADC_ConfigChannel+0xab8>)
 8004226:	f7fe f9d1 	bl	80025cc <assert_failed>
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6919      	ldr	r1, [r3, #16]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	461a      	mov	r2, r3
 8004238:	f7fe fc85 	bl	8002b46 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004248:	2b01      	cmp	r3, #1
 800424a:	d102      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x832>
 800424c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004250:	e000      	b.n	8004254 <HAL_ADC_ConfigChannel+0x834>
 8004252:	2300      	movs	r3, #0
 8004254:	461a      	mov	r2, r3
 8004256:	f7fe fc91 	bl	8002b7c <LL_ADC_SetOffsetSaturation>
 800425a:	e17e      	b.n	800455a <HAL_ADC_ConfigChannel+0xb3a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2100      	movs	r1, #0
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe fc3e 	bl	8002ae4 <LL_ADC_GetOffsetChannel>
 8004268:	4603      	mov	r3, r0
 800426a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10a      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x868>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f7fe fc33 	bl	8002ae4 <LL_ADC_GetOffsetChannel>
 800427e:	4603      	mov	r3, r0
 8004280:	0e9b      	lsrs	r3, r3, #26
 8004282:	f003 021f 	and.w	r2, r3, #31
 8004286:	e01e      	b.n	80042c6 <HAL_ADC_ConfigChannel+0x8a6>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fc28 	bl	8002ae4 <LL_ADC_GetOffsetChannel>
 8004294:	4603      	mov	r3, r0
 8004296:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800429e:	fa93 f3a3 	rbit	r3, r3
 80042a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x89a>
  {
    return 32U;
 80042b6:	2320      	movs	r3, #32
 80042b8:	e004      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x8a4>
  }
  return __builtin_clz(value);
 80042ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042be:	fab3 f383 	clz	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d105      	bne.n	80042de <HAL_ADC_ConfigChannel+0x8be>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	0e9b      	lsrs	r3, r3, #26
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	e018      	b.n	8004310 <HAL_ADC_ConfigChannel+0x8f0>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80042f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80042fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x8e6>
    return 32U;
 8004302:	2320      	movs	r3, #32
 8004304:	e004      	b.n	8004310 <HAL_ADC_ConfigChannel+0x8f0>
  return __builtin_clz(value);
 8004306:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800430a:	fab3 f383 	clz	r3, r3
 800430e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004310:	429a      	cmp	r2, r3
 8004312:	d106      	bne.n	8004322 <HAL_ADC_ConfigChannel+0x902>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2200      	movs	r2, #0
 800431a:	2100      	movs	r1, #0
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe fbf7 	bl	8002b10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2101      	movs	r1, #1
 8004328:	4618      	mov	r0, r3
 800432a:	f7fe fbdb 	bl	8002ae4 <LL_ADC_GetOffsetChannel>
 800432e:	4603      	mov	r3, r0
 8004330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <HAL_ADC_ConfigChannel+0x92e>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2101      	movs	r1, #1
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe fbd0 	bl	8002ae4 <LL_ADC_GetOffsetChannel>
 8004344:	4603      	mov	r3, r0
 8004346:	0e9b      	lsrs	r3, r3, #26
 8004348:	f003 021f 	and.w	r2, r3, #31
 800434c:	e01e      	b.n	800438c <HAL_ADC_ConfigChannel+0x96c>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2101      	movs	r1, #1
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe fbc5 	bl	8002ae4 <LL_ADC_GetOffsetChannel>
 800435a:	4603      	mov	r3, r0
 800435c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004360:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004364:	fa93 f3a3 	rbit	r3, r3
 8004368:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800436c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004370:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x960>
    return 32U;
 800437c:	2320      	movs	r3, #32
 800437e:	e004      	b.n	800438a <HAL_ADC_ConfigChannel+0x96a>
  return __builtin_clz(value);
 8004380:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004384:	fab3 f383 	clz	r3, r3
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004394:	2b00      	cmp	r3, #0
 8004396:	d105      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x984>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	0e9b      	lsrs	r3, r3, #26
 800439e:	f003 031f 	and.w	r3, r3, #31
 80043a2:	e018      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x9b6>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043b0:	fa93 f3a3 	rbit	r3, r3
 80043b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80043b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80043c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x9ac>
    return 32U;
 80043c8:	2320      	movs	r3, #32
 80043ca:	e004      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x9b6>
  return __builtin_clz(value);
 80043cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043d0:	fab3 f383 	clz	r3, r3
 80043d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d106      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x9c8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2200      	movs	r2, #0
 80043e0:	2101      	movs	r1, #1
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fe fb94 	bl	8002b10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2102      	movs	r1, #2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fe fb78 	bl	8002ae4 <LL_ADC_GetOffsetChannel>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10a      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x9f4>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2102      	movs	r1, #2
 8004404:	4618      	mov	r0, r3
 8004406:	f7fe fb6d 	bl	8002ae4 <LL_ADC_GetOffsetChannel>
 800440a:	4603      	mov	r3, r0
 800440c:	0e9b      	lsrs	r3, r3, #26
 800440e:	f003 021f 	and.w	r2, r3, #31
 8004412:	e01e      	b.n	8004452 <HAL_ADC_ConfigChannel+0xa32>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2102      	movs	r1, #2
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe fb62 	bl	8002ae4 <LL_ADC_GetOffsetChannel>
 8004420:	4603      	mov	r3, r0
 8004422:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004426:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800442a:	fa93 f3a3 	rbit	r3, r3
 800442e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004432:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004436:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800443a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_ADC_ConfigChannel+0xa26>
    return 32U;
 8004442:	2320      	movs	r3, #32
 8004444:	e004      	b.n	8004450 <HAL_ADC_ConfigChannel+0xa30>
  return __builtin_clz(value);
 8004446:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800444a:	fab3 f383 	clz	r3, r3
 800444e:	b2db      	uxtb	r3, r3
 8004450:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800445a:	2b00      	cmp	r3, #0
 800445c:	d105      	bne.n	800446a <HAL_ADC_ConfigChannel+0xa4a>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0e9b      	lsrs	r3, r3, #26
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	e016      	b.n	8004498 <HAL_ADC_ConfigChannel+0xa78>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004472:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004476:	fa93 f3a3 	rbit	r3, r3
 800447a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800447c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800447e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004482:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_ADC_ConfigChannel+0xa6e>
    return 32U;
 800448a:	2320      	movs	r3, #32
 800448c:	e004      	b.n	8004498 <HAL_ADC_ConfigChannel+0xa78>
  return __builtin_clz(value);
 800448e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004492:	fab3 f383 	clz	r3, r3
 8004496:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004498:	429a      	cmp	r2, r3
 800449a:	d106      	bne.n	80044aa <HAL_ADC_ConfigChannel+0xa8a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2200      	movs	r2, #0
 80044a2:	2102      	movs	r1, #2
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe fb33 	bl	8002b10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2103      	movs	r1, #3
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fe fb17 	bl	8002ae4 <LL_ADC_GetOffsetChannel>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10d      	bne.n	80044dc <HAL_ADC_ConfigChannel+0xabc>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2103      	movs	r1, #3
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe fb0c 	bl	8002ae4 <LL_ADC_GetOffsetChannel>
 80044cc:	4603      	mov	r3, r0
 80044ce:	0e9b      	lsrs	r3, r3, #26
 80044d0:	f003 021f 	and.w	r2, r3, #31
 80044d4:	e01a      	b.n	800450c <HAL_ADC_ConfigChannel+0xaec>
 80044d6:	bf00      	nop
 80044d8:	08012648 	.word	0x08012648
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2103      	movs	r1, #3
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fe fafe 	bl	8002ae4 <LL_ADC_GetOffsetChannel>
 80044e8:	4603      	mov	r3, r0
 80044ea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044ee:	fa93 f3a3 	rbit	r3, r3
 80044f2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80044f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044f6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80044f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_ADC_ConfigChannel+0xae2>
    return 32U;
 80044fe:	2320      	movs	r3, #32
 8004500:	e003      	b.n	800450a <HAL_ADC_ConfigChannel+0xaea>
  return __builtin_clz(value);
 8004502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004504:	fab3 f383 	clz	r3, r3
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004514:	2b00      	cmp	r3, #0
 8004516:	d105      	bne.n	8004524 <HAL_ADC_ConfigChannel+0xb04>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	0e9b      	lsrs	r3, r3, #26
 800451e:	f003 031f 	and.w	r3, r3, #31
 8004522:	e011      	b.n	8004548 <HAL_ADC_ConfigChannel+0xb28>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800452c:	fa93 f3a3 	rbit	r3, r3
 8004530:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004534:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_ADC_ConfigChannel+0xb20>
    return 32U;
 800453c:	2320      	movs	r3, #32
 800453e:	e003      	b.n	8004548 <HAL_ADC_ConfigChannel+0xb28>
  return __builtin_clz(value);
 8004540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004542:	fab3 f383 	clz	r3, r3
 8004546:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004548:	429a      	cmp	r2, r3
 800454a:	d106      	bne.n	800455a <HAL_ADC_ConfigChannel+0xb3a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2200      	movs	r2, #0
 8004552:	2103      	movs	r1, #3
 8004554:	4618      	mov	r0, r3
 8004556:	f7fe fadb 	bl	8002b10 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f7fe fc4c 	bl	8002dfc <LL_ADC_IsEnabled>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	f040 813d 	bne.w	80047e6 <HAL_ADC_ConfigChannel+0xdc6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	6819      	ldr	r1, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	461a      	mov	r2, r3
 800457a:	f7fe fb97 	bl	8002cac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	4aa2      	ldr	r2, [pc, #648]	@ (800480c <HAL_ADC_ConfigChannel+0xdec>)
 8004584:	4293      	cmp	r3, r2
 8004586:	f040 812e 	bne.w	80047e6 <HAL_ADC_ConfigChannel+0xdc6>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10b      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0xb92>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	0e9b      	lsrs	r3, r3, #26
 80045a0:	3301      	adds	r3, #1
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	2b09      	cmp	r3, #9
 80045a8:	bf94      	ite	ls
 80045aa:	2301      	movls	r3, #1
 80045ac:	2300      	movhi	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	e019      	b.n	80045e6 <HAL_ADC_ConfigChannel+0xbc6>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045ba:	fa93 f3a3 	rbit	r3, r3
 80045be:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80045c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045c2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80045c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_ADC_ConfigChannel+0xbae>
    return 32U;
 80045ca:	2320      	movs	r3, #32
 80045cc:	e003      	b.n	80045d6 <HAL_ADC_ConfigChannel+0xbb6>
  return __builtin_clz(value);
 80045ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045d0:	fab3 f383 	clz	r3, r3
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	3301      	adds	r3, #1
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	2b09      	cmp	r3, #9
 80045de:	bf94      	ite	ls
 80045e0:	2301      	movls	r3, #1
 80045e2:	2300      	movhi	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d079      	beq.n	80046de <HAL_ADC_ConfigChannel+0xcbe>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d107      	bne.n	8004606 <HAL_ADC_ConfigChannel+0xbe6>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	0e9b      	lsrs	r3, r3, #26
 80045fc:	3301      	adds	r3, #1
 80045fe:	069b      	lsls	r3, r3, #26
 8004600:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004604:	e015      	b.n	8004632 <HAL_ADC_ConfigChannel+0xc12>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800460e:	fa93 f3a3 	rbit	r3, r3
 8004612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004616:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_ADC_ConfigChannel+0xc02>
    return 32U;
 800461e:	2320      	movs	r3, #32
 8004620:	e003      	b.n	800462a <HAL_ADC_ConfigChannel+0xc0a>
  return __builtin_clz(value);
 8004622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004624:	fab3 f383 	clz	r3, r3
 8004628:	b2db      	uxtb	r3, r3
 800462a:	3301      	adds	r3, #1
 800462c:	069b      	lsls	r3, r3, #26
 800462e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <HAL_ADC_ConfigChannel+0xc32>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	0e9b      	lsrs	r3, r3, #26
 8004644:	3301      	adds	r3, #1
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	2101      	movs	r1, #1
 800464c:	fa01 f303 	lsl.w	r3, r1, r3
 8004650:	e017      	b.n	8004682 <HAL_ADC_ConfigChannel+0xc62>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800465a:	fa93 f3a3 	rbit	r3, r3
 800465e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004662:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_ADC_ConfigChannel+0xc4e>
    return 32U;
 800466a:	2320      	movs	r3, #32
 800466c:	e003      	b.n	8004676 <HAL_ADC_ConfigChannel+0xc56>
  return __builtin_clz(value);
 800466e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004670:	fab3 f383 	clz	r3, r3
 8004674:	b2db      	uxtb	r3, r3
 8004676:	3301      	adds	r3, #1
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	2101      	movs	r1, #1
 800467e:	fa01 f303 	lsl.w	r3, r1, r3
 8004682:	ea42 0103 	orr.w	r1, r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0xc88>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	0e9b      	lsrs	r3, r3, #26
 8004698:	3301      	adds	r3, #1
 800469a:	f003 021f 	and.w	r2, r3, #31
 800469e:	4613      	mov	r3, r2
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	4413      	add	r3, r2
 80046a4:	051b      	lsls	r3, r3, #20
 80046a6:	e018      	b.n	80046da <HAL_ADC_ConfigChannel+0xcba>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b0:	fa93 f3a3 	rbit	r3, r3
 80046b4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80046b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80046ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0xca4>
    return 32U;
 80046c0:	2320      	movs	r3, #32
 80046c2:	e003      	b.n	80046cc <HAL_ADC_ConfigChannel+0xcac>
  return __builtin_clz(value);
 80046c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c6:	fab3 f383 	clz	r3, r3
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	3301      	adds	r3, #1
 80046ce:	f003 021f 	and.w	r2, r3, #31
 80046d2:	4613      	mov	r3, r2
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	4413      	add	r3, r2
 80046d8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046da:	430b      	orrs	r3, r1
 80046dc:	e07e      	b.n	80047dc <HAL_ADC_ConfigChannel+0xdbc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d107      	bne.n	80046fa <HAL_ADC_ConfigChannel+0xcda>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	0e9b      	lsrs	r3, r3, #26
 80046f0:	3301      	adds	r3, #1
 80046f2:	069b      	lsls	r3, r3, #26
 80046f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046f8:	e015      	b.n	8004726 <HAL_ADC_ConfigChannel+0xd06>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004702:	fa93 f3a3 	rbit	r3, r3
 8004706:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800470c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_ADC_ConfigChannel+0xcf6>
    return 32U;
 8004712:	2320      	movs	r3, #32
 8004714:	e003      	b.n	800471e <HAL_ADC_ConfigChannel+0xcfe>
  return __builtin_clz(value);
 8004716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004718:	fab3 f383 	clz	r3, r3
 800471c:	b2db      	uxtb	r3, r3
 800471e:	3301      	adds	r3, #1
 8004720:	069b      	lsls	r3, r3, #26
 8004722:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <HAL_ADC_ConfigChannel+0xd26>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	0e9b      	lsrs	r3, r3, #26
 8004738:	3301      	adds	r3, #1
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	2101      	movs	r1, #1
 8004740:	fa01 f303 	lsl.w	r3, r1, r3
 8004744:	e017      	b.n	8004776 <HAL_ADC_ConfigChannel+0xd56>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	fa93 f3a3 	rbit	r3, r3
 8004752:	61fb      	str	r3, [r7, #28]
  return result;
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_ADC_ConfigChannel+0xd42>
    return 32U;
 800475e:	2320      	movs	r3, #32
 8004760:	e003      	b.n	800476a <HAL_ADC_ConfigChannel+0xd4a>
  return __builtin_clz(value);
 8004762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004764:	fab3 f383 	clz	r3, r3
 8004768:	b2db      	uxtb	r3, r3
 800476a:	3301      	adds	r3, #1
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	2101      	movs	r1, #1
 8004772:	fa01 f303 	lsl.w	r3, r1, r3
 8004776:	ea42 0103 	orr.w	r1, r2, r3
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10d      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0xd82>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	0e9b      	lsrs	r3, r3, #26
 800478c:	3301      	adds	r3, #1
 800478e:	f003 021f 	and.w	r2, r3, #31
 8004792:	4613      	mov	r3, r2
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	4413      	add	r3, r2
 8004798:	3b1e      	subs	r3, #30
 800479a:	051b      	lsls	r3, r3, #20
 800479c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80047a0:	e01b      	b.n	80047da <HAL_ADC_ConfigChannel+0xdba>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	fa93 f3a3 	rbit	r3, r3
 80047ae:	613b      	str	r3, [r7, #16]
  return result;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_ADC_ConfigChannel+0xd9e>
    return 32U;
 80047ba:	2320      	movs	r3, #32
 80047bc:	e003      	b.n	80047c6 <HAL_ADC_ConfigChannel+0xda6>
  return __builtin_clz(value);
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	fab3 f383 	clz	r3, r3
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	3301      	adds	r3, #1
 80047c8:	f003 021f 	and.w	r2, r3, #31
 80047cc:	4613      	mov	r3, r2
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	4413      	add	r3, r2
 80047d2:	3b1e      	subs	r3, #30
 80047d4:	051b      	lsls	r3, r3, #20
 80047d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047da:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047e0:	4619      	mov	r1, r3
 80047e2:	f7fe fa38 	bl	8002c56 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b09      	ldr	r3, [pc, #36]	@ (8004810 <HAL_ADC_ConfigChannel+0xdf0>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80bd 	beq.w	800496e <HAL_ADC_ConfigChannel+0xf4e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047fc:	d004      	beq.n	8004808 <HAL_ADC_ConfigChannel+0xde8>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a04      	ldr	r2, [pc, #16]	@ (8004814 <HAL_ADC_ConfigChannel+0xdf4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d109      	bne.n	800481c <HAL_ADC_ConfigChannel+0xdfc>
 8004808:	4b03      	ldr	r3, [pc, #12]	@ (8004818 <HAL_ADC_ConfigChannel+0xdf8>)
 800480a:	e008      	b.n	800481e <HAL_ADC_ConfigChannel+0xdfe>
 800480c:	407f0000 	.word	0x407f0000
 8004810:	80080000 	.word	0x80080000
 8004814:	50000100 	.word	0x50000100
 8004818:	50000300 	.word	0x50000300
 800481c:	4b59      	ldr	r3, [pc, #356]	@ (8004984 <HAL_ADC_ConfigChannel+0xf64>)
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe f920 	bl	8002a64 <LL_ADC_GetCommonPathInternalCh>
 8004824:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a56      	ldr	r2, [pc, #344]	@ (8004988 <HAL_ADC_ConfigChannel+0xf68>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <HAL_ADC_ConfigChannel+0xe1c>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a55      	ldr	r2, [pc, #340]	@ (800498c <HAL_ADC_ConfigChannel+0xf6c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d13a      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0xe92>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800483c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004840:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d134      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0xe92>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004850:	d005      	beq.n	800485e <HAL_ADC_ConfigChannel+0xe3e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a4e      	ldr	r2, [pc, #312]	@ (8004990 <HAL_ADC_ConfigChannel+0xf70>)
 8004858:	4293      	cmp	r3, r2
 800485a:	f040 8085 	bne.w	8004968 <HAL_ADC_ConfigChannel+0xf48>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004866:	d004      	beq.n	8004872 <HAL_ADC_ConfigChannel+0xe52>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a49      	ldr	r2, [pc, #292]	@ (8004994 <HAL_ADC_ConfigChannel+0xf74>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d101      	bne.n	8004876 <HAL_ADC_ConfigChannel+0xe56>
 8004872:	4a49      	ldr	r2, [pc, #292]	@ (8004998 <HAL_ADC_ConfigChannel+0xf78>)
 8004874:	e000      	b.n	8004878 <HAL_ADC_ConfigChannel+0xe58>
 8004876:	4a43      	ldr	r2, [pc, #268]	@ (8004984 <HAL_ADC_ConfigChannel+0xf64>)
 8004878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800487c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f7fe f8db 	bl	8002a3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004888:	4b44      	ldr	r3, [pc, #272]	@ (800499c <HAL_ADC_ConfigChannel+0xf7c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	099b      	lsrs	r3, r3, #6
 800488e:	4a44      	ldr	r2, [pc, #272]	@ (80049a0 <HAL_ADC_ConfigChannel+0xf80>)
 8004890:	fba2 2303 	umull	r2, r3, r2, r3
 8004894:	099b      	lsrs	r3, r3, #6
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	4613      	mov	r3, r2
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048a2:	e002      	b.n	80048aa <HAL_ADC_ConfigChannel+0xe8a>
          {
            wait_loop_index--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f9      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0xe84>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048b0:	e05a      	b.n	8004968 <HAL_ADC_ConfigChannel+0xf48>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a3b      	ldr	r2, [pc, #236]	@ (80049a4 <HAL_ADC_ConfigChannel+0xf84>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d125      	bne.n	8004908 <HAL_ADC_ConfigChannel+0xee8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d11f      	bne.n	8004908 <HAL_ADC_ConfigChannel+0xee8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a31      	ldr	r2, [pc, #196]	@ (8004994 <HAL_ADC_ConfigChannel+0xf74>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d104      	bne.n	80048dc <HAL_ADC_ConfigChannel+0xebc>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a34      	ldr	r2, [pc, #208]	@ (80049a8 <HAL_ADC_ConfigChannel+0xf88>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d047      	beq.n	800496c <HAL_ADC_ConfigChannel+0xf4c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048e4:	d004      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0xed0>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004994 <HAL_ADC_ConfigChannel+0xf74>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d101      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0xed4>
 80048f0:	4a29      	ldr	r2, [pc, #164]	@ (8004998 <HAL_ADC_ConfigChannel+0xf78>)
 80048f2:	e000      	b.n	80048f6 <HAL_ADC_ConfigChannel+0xed6>
 80048f4:	4a23      	ldr	r2, [pc, #140]	@ (8004984 <HAL_ADC_ConfigChannel+0xf64>)
 80048f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f7fe f89c 	bl	8002a3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004906:	e031      	b.n	800496c <HAL_ADC_ConfigChannel+0xf4c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a27      	ldr	r2, [pc, #156]	@ (80049ac <HAL_ADC_ConfigChannel+0xf8c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d12d      	bne.n	800496e <HAL_ADC_ConfigChannel+0xf4e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004912:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d127      	bne.n	800496e <HAL_ADC_ConfigChannel+0xf4e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1c      	ldr	r2, [pc, #112]	@ (8004994 <HAL_ADC_ConfigChannel+0xf74>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d022      	beq.n	800496e <HAL_ADC_ConfigChannel+0xf4e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004930:	d004      	beq.n	800493c <HAL_ADC_ConfigChannel+0xf1c>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a17      	ldr	r2, [pc, #92]	@ (8004994 <HAL_ADC_ConfigChannel+0xf74>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d101      	bne.n	8004940 <HAL_ADC_ConfigChannel+0xf20>
 800493c:	4a16      	ldr	r2, [pc, #88]	@ (8004998 <HAL_ADC_ConfigChannel+0xf78>)
 800493e:	e000      	b.n	8004942 <HAL_ADC_ConfigChannel+0xf22>
 8004940:	4a10      	ldr	r2, [pc, #64]	@ (8004984 <HAL_ADC_ConfigChannel+0xf64>)
 8004942:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004946:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f7fe f876 	bl	8002a3e <LL_ADC_SetCommonPathInternalCh>
 8004952:	e00c      	b.n	800496e <HAL_ADC_ConfigChannel+0xf4e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004958:	f043 0220 	orr.w	r2, r3, #32
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004966:	e002      	b.n	800496e <HAL_ADC_ConfigChannel+0xf4e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004968:	bf00      	nop
 800496a:	e000      	b.n	800496e <HAL_ADC_ConfigChannel+0xf4e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800496c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004976:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800497a:	4618      	mov	r0, r3
 800497c:	37dc      	adds	r7, #220	@ 0xdc
 800497e:	46bd      	mov	sp, r7
 8004980:	bd90      	pop	{r4, r7, pc}
 8004982:	bf00      	nop
 8004984:	50000700 	.word	0x50000700
 8004988:	c3210000 	.word	0xc3210000
 800498c:	90c00010 	.word	0x90c00010
 8004990:	50000600 	.word	0x50000600
 8004994:	50000100 	.word	0x50000100
 8004998:	50000300 	.word	0x50000300
 800499c:	20000000 	.word	0x20000000
 80049a0:	053e2d63 	.word	0x053e2d63
 80049a4:	c7520000 	.word	0xc7520000
 80049a8:	50000500 	.word	0x50000500
 80049ac:	cb840000 	.word	0xcb840000

080049b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fe fa1b 	bl	8002dfc <LL_ADC_IsEnabled>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d176      	bne.n	8004aba <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	4b3c      	ldr	r3, [pc, #240]	@ (8004ac4 <ADC_Enable+0x114>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00d      	beq.n	80049f6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049de:	f043 0210 	orr.w	r2, r3, #16
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ea:	f043 0201 	orr.w	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e062      	b.n	8004abc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe f9d6 	bl	8002dac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a08:	d004      	beq.n	8004a14 <ADC_Enable+0x64>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a2e      	ldr	r2, [pc, #184]	@ (8004ac8 <ADC_Enable+0x118>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d101      	bne.n	8004a18 <ADC_Enable+0x68>
 8004a14:	4b2d      	ldr	r3, [pc, #180]	@ (8004acc <ADC_Enable+0x11c>)
 8004a16:	e000      	b.n	8004a1a <ADC_Enable+0x6a>
 8004a18:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad0 <ADC_Enable+0x120>)
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fe f822 	bl	8002a64 <LL_ADC_GetCommonPathInternalCh>
 8004a20:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004a22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d013      	beq.n	8004a52 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ad4 <ADC_Enable+0x124>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	099b      	lsrs	r3, r3, #6
 8004a30:	4a29      	ldr	r2, [pc, #164]	@ (8004ad8 <ADC_Enable+0x128>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	099b      	lsrs	r3, r3, #6
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a44:	e002      	b.n	8004a4c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f9      	bne.n	8004a46 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a52:	f7fd ffb3 	bl	80029bc <HAL_GetTick>
 8004a56:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a58:	e028      	b.n	8004aac <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe f9cc 	bl	8002dfc <LL_ADC_IsEnabled>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d104      	bne.n	8004a74 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe f99c 	bl	8002dac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a74:	f7fd ffa2 	bl	80029bc <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d914      	bls.n	8004aac <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d00d      	beq.n	8004aac <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a94:	f043 0210 	orr.w	r2, r3, #16
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa0:	f043 0201 	orr.w	r2, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e007      	b.n	8004abc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d1cf      	bne.n	8004a5a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	8000003f 	.word	0x8000003f
 8004ac8:	50000100 	.word	0x50000100
 8004acc:	50000300 	.word	0x50000300
 8004ad0:	50000700 	.word	0x50000700
 8004ad4:	20000000 	.word	0x20000000
 8004ad8:	053e2d63 	.word	0x053e2d63

08004adc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fe f99a 	bl	8002e22 <LL_ADC_IsDisableOngoing>
 8004aee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe f981 	bl	8002dfc <LL_ADC_IsEnabled>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d047      	beq.n	8004b90 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d144      	bne.n	8004b90 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 030d 	and.w	r3, r3, #13
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d10c      	bne.n	8004b2e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fe f95b 	bl	8002dd4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2203      	movs	r2, #3
 8004b24:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b26:	f7fd ff49 	bl	80029bc <HAL_GetTick>
 8004b2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b2c:	e029      	b.n	8004b82 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b32:	f043 0210 	orr.w	r2, r3, #16
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b3e:	f043 0201 	orr.w	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e023      	b.n	8004b92 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b4a:	f7fd ff37 	bl	80029bc <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d914      	bls.n	8004b82 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00d      	beq.n	8004b82 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6a:	f043 0210 	orr.w	r2, r3, #16
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b76:	f043 0201 	orr.w	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e007      	b.n	8004b92 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1dc      	bne.n	8004b4a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d14b      	bne.n	8004c4c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d021      	beq.n	8004c12 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fe f800 	bl	8002bd8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d032      	beq.n	8004c44 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d12b      	bne.n	8004c44 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d11f      	bne.n	8004c44 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c08:	f043 0201 	orr.w	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c10:	e018      	b.n	8004c44 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d111      	bne.n	8004c44 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d105      	bne.n	8004c44 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3c:	f043 0201 	orr.w	r2, r3, #1
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f7fe fecd 	bl	80039e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c4a:	e00e      	b.n	8004c6a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f7fe fed7 	bl	8003a0c <HAL_ADC_ErrorCallback>
}
 8004c5e:	e004      	b.n	8004c6a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	4798      	blx	r3
}
 8004c6a:	bf00      	nop
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7fe feb9 	bl	80039f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c86:	bf00      	nop
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cac:	f043 0204 	orr.w	r2, r3, #4
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f7fe fea9 	bl	8003a0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <LL_ADC_IsEnabled>:
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <LL_ADC_IsEnabled+0x18>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <LL_ADC_IsEnabled+0x1a>
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <LL_ADC_StartCalibration>:
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004cfa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	609a      	str	r2, [r3, #8]
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <LL_ADC_IsCalibrationOnGoing>:
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d2e:	d101      	bne.n	8004d34 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d101      	bne.n	8004d5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d7e:	d017      	beq.n	8004db0 <HAL_ADCEx_Calibration_Start+0x48>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a3c      	ldr	r2, [pc, #240]	@ (8004e78 <HAL_ADCEx_Calibration_Start+0x110>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d012      	beq.n	8004db0 <HAL_ADCEx_Calibration_Start+0x48>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a3b      	ldr	r2, [pc, #236]	@ (8004e7c <HAL_ADCEx_Calibration_Start+0x114>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00d      	beq.n	8004db0 <HAL_ADCEx_Calibration_Start+0x48>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a39      	ldr	r2, [pc, #228]	@ (8004e80 <HAL_ADCEx_Calibration_Start+0x118>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d008      	beq.n	8004db0 <HAL_ADCEx_Calibration_Start+0x48>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a38      	ldr	r2, [pc, #224]	@ (8004e84 <HAL_ADCEx_Calibration_Start+0x11c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d003      	beq.n	8004db0 <HAL_ADCEx_Calibration_Start+0x48>
 8004da8:	2184      	movs	r1, #132	@ 0x84
 8004daa:	4837      	ldr	r0, [pc, #220]	@ (8004e88 <HAL_ADCEx_Calibration_Start+0x120>)
 8004dac:	f7fd fc0e 	bl	80025cc <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004db4:	d007      	beq.n	8004dc6 <HAL_ADCEx_Calibration_Start+0x5e>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	4a34      	ldr	r2, [pc, #208]	@ (8004e8c <HAL_ADCEx_Calibration_Start+0x124>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d003      	beq.n	8004dc6 <HAL_ADCEx_Calibration_Start+0x5e>
 8004dbe:	2185      	movs	r1, #133	@ 0x85
 8004dc0:	4831      	ldr	r0, [pc, #196]	@ (8004e88 <HAL_ADCEx_Calibration_Start+0x120>)
 8004dc2:	f7fd fc03 	bl	80025cc <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_ADCEx_Calibration_Start+0x6c>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e04d      	b.n	8004e70 <HAL_ADCEx_Calibration_Start+0x108>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff fe7d 	bl	8004adc <ADC_Disable>
 8004de2:	4603      	mov	r3, r0
 8004de4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d136      	bne.n	8004e5a <HAL_ADCEx_Calibration_Start+0xf2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004df4:	f023 0302 	bic.w	r3, r3, #2
 8004df8:	f043 0202 	orr.w	r2, r3, #2
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6839      	ldr	r1, [r7, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff ff6e 	bl	8004ce8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e0c:	e014      	b.n	8004e38 <HAL_ADCEx_Calibration_Start+0xd0>
    {
      wait_loop_index++;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4a1e      	ldr	r2, [pc, #120]	@ (8004e90 <HAL_ADCEx_Calibration_Start+0x128>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d90d      	bls.n	8004e38 <HAL_ADCEx_Calibration_Start+0xd0>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e20:	f023 0312 	bic.w	r3, r3, #18
 8004e24:	f043 0210 	orr.w	r2, r3, #16
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e01b      	b.n	8004e70 <HAL_ADCEx_Calibration_Start+0x108>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff ff6c 	bl	8004d1a <LL_ADC_IsCalibrationOnGoing>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e2      	bne.n	8004e0e <HAL_ADCEx_Calibration_Start+0xa6>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4c:	f023 0303 	bic.w	r3, r3, #3
 8004e50:	f043 0201 	orr.w	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e58:	e005      	b.n	8004e66 <HAL_ADCEx_Calibration_Start+0xfe>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5e:	f043 0210 	orr.w	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	50000100 	.word	0x50000100
 8004e7c:	50000400 	.word	0x50000400
 8004e80:	50000500 	.word	0x50000500
 8004e84:	50000600 	.word	0x50000600
 8004e88:	080126b8 	.word	0x080126b8
 8004e8c:	407f0000 	.word	0x407f0000
 8004e90:	0004de01 	.word	0x0004de01

08004e94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004e94:	b590      	push	{r4, r7, lr}
 8004e96:	b0a1      	sub	sp, #132	@ 0x84
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmp_hadc_slave;
  uint32_t tmp_hadc_slave_conversion_on_going;

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004eac:	d009      	beq.n	8004ec2 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a92      	ldr	r2, [pc, #584]	@ (80050fc <HAL_ADCEx_MultiModeConfigChannel+0x268>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d004      	beq.n	8004ec2 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8004eb8:	f640 014c 	movw	r1, #2124	@ 0x84c
 8004ebc:	4890      	ldr	r0, [pc, #576]	@ (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8004ebe:	f7fd fb85 	bl	80025cc <assert_failed>
  assert_param(IS_ADC_MULTIMODE(pMultimode->Mode));
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d020      	beq.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d01c      	beq.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d018      	beq.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d014      	beq.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b05      	cmp	r3, #5
 8004ee8:	d010      	beq.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b06      	cmp	r3, #6
 8004ef0:	d00c      	beq.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b07      	cmp	r3, #7
 8004ef8:	d008      	beq.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b09      	cmp	r3, #9
 8004f00:	d004      	beq.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8004f02:	f640 014d 	movw	r1, #2125	@ 0x84d
 8004f06:	487e      	ldr	r0, [pc, #504]	@ (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8004f08:	f7fd fb60 	bl	80025cc <assert_failed>
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d052      	beq.n	8004fba <HAL_ADCEx_MultiModeConfigChannel+0x126>
  {
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00e      	beq.n	8004f3a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f24:	d009      	beq.n	8004f3a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004f2e:	d004      	beq.n	8004f3a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8004f30:	f44f 6105 	mov.w	r1, #2128	@ 0x850
 8004f34:	4872      	ldr	r0, [pc, #456]	@ (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8004f36:	f7fd fb49 	bl	80025cc <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d03b      	beq.n	8004fba <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f4a:	d036      	beq.n	8004fba <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f54:	d031      	beq.n	8004fba <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f5e:	d02c      	beq.n	8004fba <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f68:	d027      	beq.n	8004fba <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004f72:	d022      	beq.n	8004fba <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f7c:	d01d      	beq.n	8004fba <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f86:	d018      	beq.n	8004fba <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f90:	d013      	beq.n	8004fba <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8004f9a:	d00e      	beq.n	8004fba <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004fa4:	d009      	beq.n	8004fba <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8004fae:	d004      	beq.n	8004fba <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004fb0:	f640 0151 	movw	r1, #2129	@ 0x851
 8004fb4:	4852      	ldr	r0, [pc, #328]	@ (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8004fb6:	f7fd fb09 	bl	80025cc <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_ADCEx_MultiModeConfigChannel+0x134>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e0f6      	b.n	80051b6 <HAL_ADCEx_MultiModeConfigChannel+0x322>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fe0:	d102      	bne.n	8004fe8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8004fe2:	4b48      	ldr	r3, [pc, #288]	@ (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	e009      	b.n	8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a43      	ldr	r2, [pc, #268]	@ (80050fc <HAL_ADCEx_MultiModeConfigChannel+0x268>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d102      	bne.n	8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x164>
 8004ff2:	4b45      	ldr	r3, [pc, #276]	@ (8005108 <HAL_ADCEx_MultiModeConfigChannel+0x274>)
 8004ff4:	60bb      	str	r3, [r7, #8]
 8004ff6:	e001      	b.n	8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10b      	bne.n	800501a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005006:	f043 0220 	orr.w	r2, r3, #32
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e0cd      	b.n	80051b6 <HAL_ADCEx_MultiModeConfigChannel+0x322>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff fe90 	bl	8004d42 <LL_ADC_REG_IsConversionOngoing>
 8005022:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fe8a 	bl	8004d42 <LL_ADC_REG_IsConversionOngoing>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	f040 80af 	bne.w	8005194 <HAL_ADCEx_MultiModeConfigChannel+0x300>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005036:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005038:	2b00      	cmp	r3, #0
 800503a:	f040 80ab 	bne.w	8005194 <HAL_ADCEx_MultiModeConfigChannel+0x300>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005046:	d004      	beq.n	8005052 <HAL_ADCEx_MultiModeConfigChannel+0x1be>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a2d      	ldr	r2, [pc, #180]	@ (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d101      	bne.n	8005056 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8005052:	4b2e      	ldr	r3, [pc, #184]	@ (800510c <HAL_ADCEx_MultiModeConfigChannel+0x278>)
 8005054:	e000      	b.n	8005058 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
 8005056:	4b2e      	ldr	r3, [pc, #184]	@ (8005110 <HAL_ADCEx_MultiModeConfigChannel+0x27c>)
 8005058:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d05a      	beq.n	8005118 <HAL_ADCEx_MultiModeConfigChannel+0x284>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005062:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005074:	035b      	lsls	r3, r3, #13
 8005076:	430b      	orrs	r3, r1
 8005078:	431a      	orrs	r2, r3
 800507a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800507c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005086:	d004      	beq.n	8005092 <HAL_ADCEx_MultiModeConfigChannel+0x1fe>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1d      	ldr	r2, [pc, #116]	@ (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d10f      	bne.n	80050b2 <HAL_ADCEx_MultiModeConfigChannel+0x21e>
 8005092:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005096:	f7ff fe14 	bl	8004cc2 <LL_ADC_IsEnabled>
 800509a:	4604      	mov	r4, r0
 800509c:	4819      	ldr	r0, [pc, #100]	@ (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 800509e:	f7ff fe10 	bl	8004cc2 <LL_ADC_IsEnabled>
 80050a2:	4603      	mov	r3, r0
 80050a4:	4323      	orrs	r3, r4
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	bf0c      	ite	eq
 80050aa:	2301      	moveq	r3, #1
 80050ac:	2300      	movne	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	e012      	b.n	80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x244>
 80050b2:	4812      	ldr	r0, [pc, #72]	@ (80050fc <HAL_ADCEx_MultiModeConfigChannel+0x268>)
 80050b4:	f7ff fe05 	bl	8004cc2 <LL_ADC_IsEnabled>
 80050b8:	4604      	mov	r4, r0
 80050ba:	4813      	ldr	r0, [pc, #76]	@ (8005108 <HAL_ADCEx_MultiModeConfigChannel+0x274>)
 80050bc:	f7ff fe01 	bl	8004cc2 <LL_ADC_IsEnabled>
 80050c0:	4603      	mov	r3, r0
 80050c2:	431c      	orrs	r4, r3
 80050c4:	4813      	ldr	r0, [pc, #76]	@ (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x280>)
 80050c6:	f7ff fdfc 	bl	8004cc2 <LL_ADC_IsEnabled>
 80050ca:	4603      	mov	r3, r0
 80050cc:	4323      	orrs	r3, r4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bf0c      	ite	eq
 80050d2:	2301      	moveq	r3, #1
 80050d4:	2300      	movne	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d065      	beq.n	80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x314>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80050dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80050e4:	f023 030f 	bic.w	r3, r3, #15
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	6811      	ldr	r1, [r2, #0]
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	6892      	ldr	r2, [r2, #8]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	431a      	orrs	r2, r3
 80050f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050f6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050f8:	e056      	b.n	80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x314>
 80050fa:	bf00      	nop
 80050fc:	50000400 	.word	0x50000400
 8005100:	080126b8 	.word	0x080126b8
 8005104:	50000100 	.word	0x50000100
 8005108:	50000500 	.word	0x50000500
 800510c:	50000300 	.word	0x50000300
 8005110:	50000700 	.word	0x50000700
 8005114:	50000600 	.word	0x50000600
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005118:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005120:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005122:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800512c:	d004      	beq.n	8005138 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a23      	ldr	r2, [pc, #140]	@ (80051c0 <HAL_ADCEx_MultiModeConfigChannel+0x32c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d10f      	bne.n	8005158 <HAL_ADCEx_MultiModeConfigChannel+0x2c4>
 8005138:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800513c:	f7ff fdc1 	bl	8004cc2 <LL_ADC_IsEnabled>
 8005140:	4604      	mov	r4, r0
 8005142:	481f      	ldr	r0, [pc, #124]	@ (80051c0 <HAL_ADCEx_MultiModeConfigChannel+0x32c>)
 8005144:	f7ff fdbd 	bl	8004cc2 <LL_ADC_IsEnabled>
 8005148:	4603      	mov	r3, r0
 800514a:	4323      	orrs	r3, r4
 800514c:	2b00      	cmp	r3, #0
 800514e:	bf0c      	ite	eq
 8005150:	2301      	moveq	r3, #1
 8005152:	2300      	movne	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	e012      	b.n	800517e <HAL_ADCEx_MultiModeConfigChannel+0x2ea>
 8005158:	481a      	ldr	r0, [pc, #104]	@ (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x330>)
 800515a:	f7ff fdb2 	bl	8004cc2 <LL_ADC_IsEnabled>
 800515e:	4604      	mov	r4, r0
 8005160:	4819      	ldr	r0, [pc, #100]	@ (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x334>)
 8005162:	f7ff fdae 	bl	8004cc2 <LL_ADC_IsEnabled>
 8005166:	4603      	mov	r3, r0
 8005168:	431c      	orrs	r4, r3
 800516a:	4818      	ldr	r0, [pc, #96]	@ (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x338>)
 800516c:	f7ff fda9 	bl	8004cc2 <LL_ADC_IsEnabled>
 8005170:	4603      	mov	r3, r0
 8005172:	4323      	orrs	r3, r4
 8005174:	2b00      	cmp	r3, #0
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d012      	beq.n	80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x314>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005182:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800518a:	f023 030f 	bic.w	r3, r3, #15
 800518e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005190:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005192:	e009      	b.n	80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x314>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005198:	f043 0220 	orr.w	r2, r3, #32
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80051a6:	e000      	b.n	80051aa <HAL_ADCEx_MultiModeConfigChannel+0x316>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80051b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3784      	adds	r7, #132	@ 0x84
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd90      	pop	{r4, r7, pc}
 80051be:	bf00      	nop
 80051c0:	50000100 	.word	0x50000100
 80051c4:	50000400 	.word	0x50000400
 80051c8:	50000500 	.word	0x50000500
 80051cc:	50000600 	.word	0x50000600

080051d0 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e02c      	b.n	800523c <HAL_CORDIC_Init+0x6c>
  }

  /* Check the instance */
  assert_param(IS_CORDIC_ALL_INSTANCE(hcordic->Instance));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a17      	ldr	r2, [pc, #92]	@ (8005244 <HAL_CORDIC_Init+0x74>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <HAL_CORDIC_Init+0x24>
 80051ec:	21d3      	movs	r1, #211	@ 0xd3
 80051ee:	4816      	ldr	r0, [pc, #88]	@ (8005248 <HAL_CORDIC_Init+0x78>)
 80051f0:	f7fd f9ec 	bl	80025cc <assert_failed>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d106      	bne.n	800520e <HAL_CORDIC_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7fc fad3 	bl	80017b4 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40020c00 	.word	0x40020c00
 8005248:	0801272c 	.word	0x0801272c

0800524c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800525c:	4b0c      	ldr	r3, [pc, #48]	@ (8005290 <__NVIC_SetPriorityGrouping+0x44>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005268:	4013      	ands	r3, r2
 800526a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800527c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800527e:	4a04      	ldr	r2, [pc, #16]	@ (8005290 <__NVIC_SetPriorityGrouping+0x44>)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	60d3      	str	r3, [r2, #12]
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	e000ed00 	.word	0xe000ed00

08005294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005298:	4b04      	ldr	r3, [pc, #16]	@ (80052ac <__NVIC_GetPriorityGrouping+0x18>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	0a1b      	lsrs	r3, r3, #8
 800529e:	f003 0307 	and.w	r3, r3, #7
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	e000ed00 	.word	0xe000ed00

080052b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	db0b      	blt.n	80052da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	f003 021f 	and.w	r2, r3, #31
 80052c8:	4907      	ldr	r1, [pc, #28]	@ (80052e8 <__NVIC_EnableIRQ+0x38>)
 80052ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	2001      	movs	r0, #1
 80052d2:	fa00 f202 	lsl.w	r2, r0, r2
 80052d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	e000e100 	.word	0xe000e100

080052ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	4603      	mov	r3, r0
 80052f4:	6039      	str	r1, [r7, #0]
 80052f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	db0a      	blt.n	8005316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	b2da      	uxtb	r2, r3
 8005304:	490c      	ldr	r1, [pc, #48]	@ (8005338 <__NVIC_SetPriority+0x4c>)
 8005306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530a:	0112      	lsls	r2, r2, #4
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	440b      	add	r3, r1
 8005310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005314:	e00a      	b.n	800532c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	b2da      	uxtb	r2, r3
 800531a:	4908      	ldr	r1, [pc, #32]	@ (800533c <__NVIC_SetPriority+0x50>)
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	3b04      	subs	r3, #4
 8005324:	0112      	lsls	r2, r2, #4
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	440b      	add	r3, r1
 800532a:	761a      	strb	r2, [r3, #24]
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	e000e100 	.word	0xe000e100
 800533c:	e000ed00 	.word	0xe000ed00

08005340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005340:	b480      	push	{r7}
 8005342:	b089      	sub	sp, #36	@ 0x24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	f1c3 0307 	rsb	r3, r3, #7
 800535a:	2b04      	cmp	r3, #4
 800535c:	bf28      	it	cs
 800535e:	2304      	movcs	r3, #4
 8005360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	3304      	adds	r3, #4
 8005366:	2b06      	cmp	r3, #6
 8005368:	d902      	bls.n	8005370 <NVIC_EncodePriority+0x30>
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	3b03      	subs	r3, #3
 800536e:	e000      	b.n	8005372 <NVIC_EncodePriority+0x32>
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005374:	f04f 32ff 	mov.w	r2, #4294967295
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43da      	mvns	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	401a      	ands	r2, r3
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005388:	f04f 31ff 	mov.w	r1, #4294967295
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	fa01 f303 	lsl.w	r3, r1, r3
 8005392:	43d9      	mvns	r1, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005398:	4313      	orrs	r3, r2
         );
}
 800539a:	4618      	mov	r0, r3
 800539c:	3724      	adds	r7, #36	@ 0x24
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053b8:	d301      	bcc.n	80053be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053ba:	2301      	movs	r3, #1
 80053bc:	e00f      	b.n	80053de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053be:	4a0a      	ldr	r2, [pc, #40]	@ (80053e8 <SysTick_Config+0x40>)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053c6:	210f      	movs	r1, #15
 80053c8:	f04f 30ff 	mov.w	r0, #4294967295
 80053cc:	f7ff ff8e 	bl	80052ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053d0:	4b05      	ldr	r3, [pc, #20]	@ (80053e8 <SysTick_Config+0x40>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053d6:	4b04      	ldr	r3, [pc, #16]	@ (80053e8 <SysTick_Config+0x40>)
 80053d8:	2207      	movs	r2, #7
 80053da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	e000e010 	.word	0xe000e010

080053ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b07      	cmp	r3, #7
 80053f8:	d00f      	beq.n	800541a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b06      	cmp	r3, #6
 80053fe:	d00c      	beq.n	800541a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b05      	cmp	r3, #5
 8005404:	d009      	beq.n	800541a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b04      	cmp	r3, #4
 800540a:	d006      	beq.n	800541a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b03      	cmp	r3, #3
 8005410:	d003      	beq.n	800541a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005412:	21a6      	movs	r1, #166	@ 0xa6
 8005414:	4804      	ldr	r0, [pc, #16]	@ (8005428 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8005416:	f7fd f8d9 	bl	80025cc <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff ff16 	bl	800524c <__NVIC_SetPriorityGrouping>
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	080127a0 	.word	0x080127a0

0800542c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	4603      	mov	r3, r0
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b0f      	cmp	r3, #15
 800543e:	d903      	bls.n	8005448 <HAL_NVIC_SetPriority+0x1c>
 8005440:	21be      	movs	r1, #190	@ 0xbe
 8005442:	480e      	ldr	r0, [pc, #56]	@ (800547c <HAL_NVIC_SetPriority+0x50>)
 8005444:	f7fd f8c2 	bl	80025cc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b0f      	cmp	r3, #15
 800544c:	d903      	bls.n	8005456 <HAL_NVIC_SetPriority+0x2a>
 800544e:	21bf      	movs	r1, #191	@ 0xbf
 8005450:	480a      	ldr	r0, [pc, #40]	@ (800547c <HAL_NVIC_SetPriority+0x50>)
 8005452:	f7fd f8bb 	bl	80025cc <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8005456:	f7ff ff1d 	bl	8005294 <__NVIC_GetPriorityGrouping>
 800545a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	6978      	ldr	r0, [r7, #20]
 8005462:	f7ff ff6d 	bl	8005340 <NVIC_EncodePriority>
 8005466:	4602      	mov	r2, r0
 8005468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800546c:	4611      	mov	r1, r2
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff ff3c 	bl	80052ec <__NVIC_SetPriority>
}
 8005474:	bf00      	nop
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	080127a0 	.word	0x080127a0

08005480 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800548a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800548e:	2b00      	cmp	r3, #0
 8005490:	da03      	bge.n	800549a <HAL_NVIC_EnableIRQ+0x1a>
 8005492:	21d2      	movs	r1, #210	@ 0xd2
 8005494:	4805      	ldr	r0, [pc, #20]	@ (80054ac <HAL_NVIC_EnableIRQ+0x2c>)
 8005496:	f7fd f899 	bl	80025cc <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800549a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff ff06 	bl	80052b0 <__NVIC_EnableIRQ>
}
 80054a4:	bf00      	nop
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	080127a0 	.word	0x080127a0

080054b0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff ff75 	bl	80053a8 <SysTick_Config>
 80054be:	4603      	mov	r3, r0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e184      	b.n	80057e4 <HAL_DMA_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a70      	ldr	r2, [pc, #448]	@ (80056a0 <HAL_DMA_Init+0x1d8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d04e      	beq.n	8005582 <HAL_DMA_Init+0xba>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a6e      	ldr	r2, [pc, #440]	@ (80056a4 <HAL_DMA_Init+0x1dc>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d049      	beq.n	8005582 <HAL_DMA_Init+0xba>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a6d      	ldr	r2, [pc, #436]	@ (80056a8 <HAL_DMA_Init+0x1e0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d044      	beq.n	8005582 <HAL_DMA_Init+0xba>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a6b      	ldr	r2, [pc, #428]	@ (80056ac <HAL_DMA_Init+0x1e4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d03f      	beq.n	8005582 <HAL_DMA_Init+0xba>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a6a      	ldr	r2, [pc, #424]	@ (80056b0 <HAL_DMA_Init+0x1e8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d03a      	beq.n	8005582 <HAL_DMA_Init+0xba>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a68      	ldr	r2, [pc, #416]	@ (80056b4 <HAL_DMA_Init+0x1ec>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d035      	beq.n	8005582 <HAL_DMA_Init+0xba>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a67      	ldr	r2, [pc, #412]	@ (80056b8 <HAL_DMA_Init+0x1f0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d030      	beq.n	8005582 <HAL_DMA_Init+0xba>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a65      	ldr	r2, [pc, #404]	@ (80056bc <HAL_DMA_Init+0x1f4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d02b      	beq.n	8005582 <HAL_DMA_Init+0xba>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a64      	ldr	r2, [pc, #400]	@ (80056c0 <HAL_DMA_Init+0x1f8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d026      	beq.n	8005582 <HAL_DMA_Init+0xba>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a62      	ldr	r2, [pc, #392]	@ (80056c4 <HAL_DMA_Init+0x1fc>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d021      	beq.n	8005582 <HAL_DMA_Init+0xba>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a61      	ldr	r2, [pc, #388]	@ (80056c8 <HAL_DMA_Init+0x200>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d01c      	beq.n	8005582 <HAL_DMA_Init+0xba>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a5f      	ldr	r2, [pc, #380]	@ (80056cc <HAL_DMA_Init+0x204>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d017      	beq.n	8005582 <HAL_DMA_Init+0xba>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a5e      	ldr	r2, [pc, #376]	@ (80056d0 <HAL_DMA_Init+0x208>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d012      	beq.n	8005582 <HAL_DMA_Init+0xba>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a5c      	ldr	r2, [pc, #368]	@ (80056d4 <HAL_DMA_Init+0x20c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00d      	beq.n	8005582 <HAL_DMA_Init+0xba>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a5b      	ldr	r2, [pc, #364]	@ (80056d8 <HAL_DMA_Init+0x210>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d008      	beq.n	8005582 <HAL_DMA_Init+0xba>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a59      	ldr	r2, [pc, #356]	@ (80056dc <HAL_DMA_Init+0x214>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d003      	beq.n	8005582 <HAL_DMA_Init+0xba>
 800557a:	21a3      	movs	r1, #163	@ 0xa3
 800557c:	4858      	ldr	r0, [pc, #352]	@ (80056e0 <HAL_DMA_Init+0x218>)
 800557e:	f7fd f825 	bl	80025cc <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00c      	beq.n	80055a4 <HAL_DMA_Init+0xdc>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	2b10      	cmp	r3, #16
 8005590:	d008      	beq.n	80055a4 <HAL_DMA_Init+0xdc>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800559a:	d003      	beq.n	80055a4 <HAL_DMA_Init+0xdc>
 800559c:	21a4      	movs	r1, #164	@ 0xa4
 800559e:	4850      	ldr	r0, [pc, #320]	@ (80056e0 <HAL_DMA_Init+0x218>)
 80055a0:	f7fd f814 	bl	80025cc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	2b40      	cmp	r3, #64	@ 0x40
 80055aa:	d007      	beq.n	80055bc <HAL_DMA_Init+0xf4>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_DMA_Init+0xf4>
 80055b4:	21a5      	movs	r1, #165	@ 0xa5
 80055b6:	484a      	ldr	r0, [pc, #296]	@ (80056e0 <HAL_DMA_Init+0x218>)
 80055b8:	f7fd f808 	bl	80025cc <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b80      	cmp	r3, #128	@ 0x80
 80055c2:	d007      	beq.n	80055d4 <HAL_DMA_Init+0x10c>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <HAL_DMA_Init+0x10c>
 80055cc:	21a6      	movs	r1, #166	@ 0xa6
 80055ce:	4844      	ldr	r0, [pc, #272]	@ (80056e0 <HAL_DMA_Init+0x218>)
 80055d0:	f7fc fffc 	bl	80025cc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00d      	beq.n	80055f8 <HAL_DMA_Init+0x130>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055e4:	d008      	beq.n	80055f8 <HAL_DMA_Init+0x130>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055ee:	d003      	beq.n	80055f8 <HAL_DMA_Init+0x130>
 80055f0:	21a7      	movs	r1, #167	@ 0xa7
 80055f2:	483b      	ldr	r0, [pc, #236]	@ (80056e0 <HAL_DMA_Init+0x218>)
 80055f4:	f7fc ffea 	bl	80025cc <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00d      	beq.n	800561c <HAL_DMA_Init+0x154>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005608:	d008      	beq.n	800561c <HAL_DMA_Init+0x154>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005612:	d003      	beq.n	800561c <HAL_DMA_Init+0x154>
 8005614:	21a8      	movs	r1, #168	@ 0xa8
 8005616:	4832      	ldr	r0, [pc, #200]	@ (80056e0 <HAL_DMA_Init+0x218>)
 8005618:	f7fc ffd8 	bl	80025cc <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <HAL_DMA_Init+0x16c>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	2b20      	cmp	r3, #32
 800562a:	d003      	beq.n	8005634 <HAL_DMA_Init+0x16c>
 800562c:	21a9      	movs	r1, #169	@ 0xa9
 800562e:	482c      	ldr	r0, [pc, #176]	@ (80056e0 <HAL_DMA_Init+0x218>)
 8005630:	f7fc ffcc 	bl	80025cc <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d012      	beq.n	8005662 <HAL_DMA_Init+0x19a>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005644:	d00d      	beq.n	8005662 <HAL_DMA_Init+0x19a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800564e:	d008      	beq.n	8005662 <HAL_DMA_Init+0x19a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005658:	d003      	beq.n	8005662 <HAL_DMA_Init+0x19a>
 800565a:	21aa      	movs	r1, #170	@ 0xaa
 800565c:	4820      	ldr	r0, [pc, #128]	@ (80056e0 <HAL_DMA_Init+0x218>)
 800565e:	f7fc ffb5 	bl	80025cc <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2b73      	cmp	r3, #115	@ 0x73
 8005668:	d903      	bls.n	8005672 <HAL_DMA_Init+0x1aa>
 800566a:	21ac      	movs	r1, #172	@ 0xac
 800566c:	481c      	ldr	r0, [pc, #112]	@ (80056e0 <HAL_DMA_Init+0x218>)
 800566e:	f7fc ffad 	bl	80025cc <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	4b1a      	ldr	r3, [pc, #104]	@ (80056e4 <HAL_DMA_Init+0x21c>)
 800567a:	429a      	cmp	r2, r3
 800567c:	d83a      	bhi.n	80056f4 <HAL_DMA_Init+0x22c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	4b18      	ldr	r3, [pc, #96]	@ (80056e8 <HAL_DMA_Init+0x220>)
 8005686:	4413      	add	r3, r2
 8005688:	4a18      	ldr	r2, [pc, #96]	@ (80056ec <HAL_DMA_Init+0x224>)
 800568a:	fba2 2303 	umull	r2, r3, r2, r3
 800568e:	091b      	lsrs	r3, r3, #4
 8005690:	009a      	lsls	r2, r3, #2
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a15      	ldr	r2, [pc, #84]	@ (80056f0 <HAL_DMA_Init+0x228>)
 800569a:	641a      	str	r2, [r3, #64]	@ 0x40
 800569c:	e039      	b.n	8005712 <HAL_DMA_Init+0x24a>
 800569e:	bf00      	nop
 80056a0:	40020008 	.word	0x40020008
 80056a4:	4002001c 	.word	0x4002001c
 80056a8:	40020030 	.word	0x40020030
 80056ac:	40020044 	.word	0x40020044
 80056b0:	40020058 	.word	0x40020058
 80056b4:	4002006c 	.word	0x4002006c
 80056b8:	40020080 	.word	0x40020080
 80056bc:	40020094 	.word	0x40020094
 80056c0:	40020408 	.word	0x40020408
 80056c4:	4002041c 	.word	0x4002041c
 80056c8:	40020430 	.word	0x40020430
 80056cc:	40020444 	.word	0x40020444
 80056d0:	40020458 	.word	0x40020458
 80056d4:	4002046c 	.word	0x4002046c
 80056d8:	40020480 	.word	0x40020480
 80056dc:	40020494 	.word	0x40020494
 80056e0:	08012814 	.word	0x08012814
 80056e4:	40020407 	.word	0x40020407
 80056e8:	bffdfff8 	.word	0xbffdfff8
 80056ec:	cccccccd 	.word	0xcccccccd
 80056f0:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	4b3c      	ldr	r3, [pc, #240]	@ (80057ec <HAL_DMA_Init+0x324>)
 80056fc:	4413      	add	r3, r2
 80056fe:	4a3c      	ldr	r2, [pc, #240]	@ (80057f0 <HAL_DMA_Init+0x328>)
 8005700:	fba2 2303 	umull	r2, r3, r2, r3
 8005704:	091b      	lsrs	r3, r3, #4
 8005706:	009a      	lsls	r2, r3, #2
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a39      	ldr	r2, [pc, #228]	@ (80057f4 <HAL_DMA_Init+0x32c>)
 8005710:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2202      	movs	r2, #2
 8005716:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800572c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005736:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005742:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800574e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f9bf 	bl	8005ae8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005772:	d102      	bne.n	800577a <HAL_DMA_Init+0x2b2>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800578e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d010      	beq.n	80057ba <HAL_DMA_Init+0x2f2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b04      	cmp	r3, #4
 800579e:	d80c      	bhi.n	80057ba <HAL_DMA_Init+0x2f2>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f9df 	bl	8005b64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80057b6:	605a      	str	r2, [r3, #4]
 80057b8:	e008      	b.n	80057cc <HAL_DMA_Init+0x304>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	bffdfbf8 	.word	0xbffdfbf8
 80057f0:	cccccccd 	.word	0xcccccccd
 80057f4:	40020400 	.word	0x40020400

080057f8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <HAL_DMA_Start_IT+0x20>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005816:	d304      	bcc.n	8005822 <HAL_DMA_Start_IT+0x2a>
 8005818:	f240 11ab 	movw	r1, #427	@ 0x1ab
 800581c:	483a      	ldr	r0, [pc, #232]	@ (8005908 <HAL_DMA_Start_IT+0x110>)
 800581e:	f7fc fed5 	bl	80025cc <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_DMA_Start_IT+0x38>
 800582c:	2302      	movs	r3, #2
 800582e:	e066      	b.n	80058fe <HAL_DMA_Start_IT+0x106>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	d155      	bne.n	80058f0 <HAL_DMA_Start_IT+0xf8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0201 	bic.w	r2, r2, #1
 8005860:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f8fe 	bl	8005a6a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005872:	2b00      	cmp	r3, #0
 8005874:	d008      	beq.n	8005888 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 020e 	orr.w	r2, r2, #14
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	e00f      	b.n	80058a8 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0204 	bic.w	r2, r2, #4
 8005896:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 020a 	orr.w	r2, r2, #10
 80058a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d007      	beq.n	80058c6 <HAL_DMA_Start_IT+0xce>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058c4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <HAL_DMA_Start_IT+0xe6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0201 	orr.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	e005      	b.n	80058fc <HAL_DMA_Start_IT+0x104>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80058f8:	2302      	movs	r3, #2
 80058fa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	08012814 	.word	0x08012814

0800590c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005928:	f003 031f 	and.w	r3, r3, #31
 800592c:	2204      	movs	r2, #4
 800592e:	409a      	lsls	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4013      	ands	r3, r2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d026      	beq.n	8005986 <HAL_DMA_IRQHandler+0x7a>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b00      	cmp	r3, #0
 8005940:	d021      	beq.n	8005986 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0320 	and.w	r3, r3, #32
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0204 	bic.w	r2, r2, #4
 800595e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005964:	f003 021f 	and.w	r2, r3, #31
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596c:	2104      	movs	r1, #4
 800596e:	fa01 f202 	lsl.w	r2, r1, r2
 8005972:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005978:	2b00      	cmp	r3, #0
 800597a:	d071      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005984:	e06c      	b.n	8005a60 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	2202      	movs	r2, #2
 8005990:	409a      	lsls	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4013      	ands	r3, r2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d02e      	beq.n	80059f8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d029      	beq.n	80059f8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10b      	bne.n	80059ca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 020a 	bic.w	r2, r2, #10
 80059c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ce:	f003 021f 	and.w	r2, r3, #31
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d6:	2102      	movs	r1, #2
 80059d8:	fa01 f202 	lsl.w	r2, r1, r2
 80059dc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d038      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80059f6:	e033      	b.n	8005a60 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fc:	f003 031f 	and.w	r3, r3, #31
 8005a00:	2208      	movs	r2, #8
 8005a02:	409a      	lsls	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4013      	ands	r3, r2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d02a      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d025      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 020e 	bic.w	r2, r2, #14
 8005a24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a2a:	f003 021f 	and.w	r2, r3, #31
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a32:	2101      	movs	r1, #1
 8005a34:	fa01 f202 	lsl.w	r2, r1, r2
 8005a38:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d004      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
}
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
 8005a76:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a80:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d004      	beq.n	8005a94 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a92:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a98:	f003 021f 	and.w	r2, r3, #31
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d108      	bne.n	8005aca <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ac8:	e007      	b.n	8005ada <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	60da      	str	r2, [r3, #12]
}
 8005ada:	bf00      	nop
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	461a      	mov	r2, r3
 8005af6:	4b16      	ldr	r3, [pc, #88]	@ (8005b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d802      	bhi.n	8005b02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005afc:	4b15      	ldr	r3, [pc, #84]	@ (8005b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	e001      	b.n	8005b06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005b02:	4b15      	ldr	r3, [pc, #84]	@ (8005b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005b04:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	3b08      	subs	r3, #8
 8005b12:	4a12      	ldr	r2, [pc, #72]	@ (8005b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005b14:	fba2 2303 	umull	r2, r3, r2, r3
 8005b18:	091b      	lsrs	r3, r3, #4
 8005b1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b20:	089b      	lsrs	r3, r3, #2
 8005b22:	009a      	lsls	r2, r3, #2
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4413      	add	r3, r2
 8005b28:	461a      	mov	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a0b      	ldr	r2, [pc, #44]	@ (8005b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005b32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	409a      	lsls	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40020407 	.word	0x40020407
 8005b54:	40020800 	.word	0x40020800
 8005b58:	40020820 	.word	0x40020820
 8005b5c:	cccccccd 	.word	0xcccccccd
 8005b60:	40020880 	.word	0x40020880

08005b64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005b78:	4413      	add	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a08      	ldr	r2, [pc, #32]	@ (8005ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005b86:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	f003 031f 	and.w	r3, r3, #31
 8005b90:	2201      	movs	r2, #1
 8005b92:	409a      	lsls	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	1000823f 	.word	0x1000823f
 8005ba8:	40020940 	.word	0x40020940

08005bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005bc0:	d01b      	beq.n	8005bfa <HAL_GPIO_Init+0x4e>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a37      	ldr	r2, [pc, #220]	@ (8005ca4 <HAL_GPIO_Init+0xf8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d017      	beq.n	8005bfa <HAL_GPIO_Init+0x4e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a36      	ldr	r2, [pc, #216]	@ (8005ca8 <HAL_GPIO_Init+0xfc>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d013      	beq.n	8005bfa <HAL_GPIO_Init+0x4e>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a35      	ldr	r2, [pc, #212]	@ (8005cac <HAL_GPIO_Init+0x100>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00f      	beq.n	8005bfa <HAL_GPIO_Init+0x4e>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a34      	ldr	r2, [pc, #208]	@ (8005cb0 <HAL_GPIO_Init+0x104>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00b      	beq.n	8005bfa <HAL_GPIO_Init+0x4e>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a33      	ldr	r2, [pc, #204]	@ (8005cb4 <HAL_GPIO_Init+0x108>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d007      	beq.n	8005bfa <HAL_GPIO_Init+0x4e>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a32      	ldr	r2, [pc, #200]	@ (8005cb8 <HAL_GPIO_Init+0x10c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d003      	beq.n	8005bfa <HAL_GPIO_Init+0x4e>
 8005bf2:	21a9      	movs	r1, #169	@ 0xa9
 8005bf4:	4831      	ldr	r0, [pc, #196]	@ (8005cbc <HAL_GPIO_Init+0x110>)
 8005bf6:	f7fc fce9 	bl	80025cc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d004      	beq.n	8005c0e <HAL_GPIO_Init+0x62>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c0c:	d303      	bcc.n	8005c16 <HAL_GPIO_Init+0x6a>
 8005c0e:	21aa      	movs	r1, #170	@ 0xaa
 8005c10:	482a      	ldr	r0, [pc, #168]	@ (8005cbc <HAL_GPIO_Init+0x110>)
 8005c12:	f7fc fcdb 	bl	80025cc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 8209 	beq.w	8006032 <HAL_GPIO_Init+0x486>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	f000 8204 	beq.w	8006032 <HAL_GPIO_Init+0x486>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2b11      	cmp	r3, #17
 8005c30:	f000 81ff 	beq.w	8006032 <HAL_GPIO_Init+0x486>
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	f000 81fa 	beq.w	8006032 <HAL_GPIO_Init+0x486>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b12      	cmp	r3, #18
 8005c44:	f000 81f5 	beq.w	8006032 <HAL_GPIO_Init+0x486>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8005c50:	f000 81ef 	beq.w	8006032 <HAL_GPIO_Init+0x486>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005c5c:	f000 81e9 	beq.w	8006032 <HAL_GPIO_Init+0x486>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8005c68:	f000 81e3 	beq.w	8006032 <HAL_GPIO_Init+0x486>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8005c74:	f000 81dd 	beq.w	8006032 <HAL_GPIO_Init+0x486>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8005c80:	f000 81d7 	beq.w	8006032 <HAL_GPIO_Init+0x486>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8005c8c:	f000 81d1 	beq.w	8006032 <HAL_GPIO_Init+0x486>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	f000 81cc 	beq.w	8006032 <HAL_GPIO_Init+0x486>
 8005c9a:	21ab      	movs	r1, #171	@ 0xab
 8005c9c:	4807      	ldr	r0, [pc, #28]	@ (8005cbc <HAL_GPIO_Init+0x110>)
 8005c9e:	f7fc fc95 	bl	80025cc <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ca2:	e1c6      	b.n	8006032 <HAL_GPIO_Init+0x486>
 8005ca4:	48000400 	.word	0x48000400
 8005ca8:	48000800 	.word	0x48000800
 8005cac:	48000c00 	.word	0x48000c00
 8005cb0:	48001000 	.word	0x48001000
 8005cb4:	48001400 	.word	0x48001400
 8005cb8:	48001800 	.word	0x48001800
 8005cbc:	08012884 	.word	0x08012884
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ccc:	4013      	ands	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 81aa 	beq.w	800602c <HAL_GPIO_Init+0x480>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d005      	beq.n	8005cf0 <HAL_GPIO_Init+0x144>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d144      	bne.n	8005d7a <HAL_GPIO_Init+0x1ce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00f      	beq.n	8005d18 <HAL_GPIO_Init+0x16c>
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d00b      	beq.n	8005d18 <HAL_GPIO_Init+0x16c>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d007      	beq.n	8005d18 <HAL_GPIO_Init+0x16c>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d003      	beq.n	8005d18 <HAL_GPIO_Init+0x16c>
 8005d10:	21bb      	movs	r1, #187	@ 0xbb
 8005d12:	488b      	ldr	r0, [pc, #556]	@ (8005f40 <HAL_GPIO_Init+0x394>)
 8005d14:	f7fc fc5a 	bl	80025cc <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	2203      	movs	r2, #3
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d4e:	2201      	movs	r2, #1
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	fa02 f303 	lsl.w	r3, r2, r3
 8005d56:	43db      	mvns	r3, r3
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	091b      	lsrs	r3, r3, #4
 8005d64:	f003 0201 	and.w	r2, r3, #1
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d027      	beq.n	8005dd6 <HAL_GPIO_Init+0x22a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00b      	beq.n	8005da6 <HAL_GPIO_Init+0x1fa>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d007      	beq.n	8005da6 <HAL_GPIO_Init+0x1fa>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d003      	beq.n	8005da6 <HAL_GPIO_Init+0x1fa>
 8005d9e:	21cc      	movs	r1, #204	@ 0xcc
 8005da0:	4867      	ldr	r0, [pc, #412]	@ (8005f40 <HAL_GPIO_Init+0x394>)
 8005da2:	f7fc fc13 	bl	80025cc <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	2203      	movs	r2, #3
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43db      	mvns	r3, r3
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d14b      	bne.n	8005e7a <HAL_GPIO_Init+0x2ce>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005de8:	d01b      	beq.n	8005e22 <HAL_GPIO_Init+0x276>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a55      	ldr	r2, [pc, #340]	@ (8005f44 <HAL_GPIO_Init+0x398>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d017      	beq.n	8005e22 <HAL_GPIO_Init+0x276>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a54      	ldr	r2, [pc, #336]	@ (8005f48 <HAL_GPIO_Init+0x39c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d013      	beq.n	8005e22 <HAL_GPIO_Init+0x276>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a53      	ldr	r2, [pc, #332]	@ (8005f4c <HAL_GPIO_Init+0x3a0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00f      	beq.n	8005e22 <HAL_GPIO_Init+0x276>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a52      	ldr	r2, [pc, #328]	@ (8005f50 <HAL_GPIO_Init+0x3a4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00b      	beq.n	8005e22 <HAL_GPIO_Init+0x276>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a51      	ldr	r2, [pc, #324]	@ (8005f54 <HAL_GPIO_Init+0x3a8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d007      	beq.n	8005e22 <HAL_GPIO_Init+0x276>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a50      	ldr	r2, [pc, #320]	@ (8005f58 <HAL_GPIO_Init+0x3ac>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <HAL_GPIO_Init+0x276>
 8005e1a:	21d9      	movs	r1, #217	@ 0xd9
 8005e1c:	4848      	ldr	r0, [pc, #288]	@ (8005f40 <HAL_GPIO_Init+0x394>)
 8005e1e:	f7fc fbd5 	bl	80025cc <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b0f      	cmp	r3, #15
 8005e28:	d903      	bls.n	8005e32 <HAL_GPIO_Init+0x286>
 8005e2a:	21da      	movs	r1, #218	@ 0xda
 8005e2c:	4844      	ldr	r0, [pc, #272]	@ (8005f40 <HAL_GPIO_Init+0x394>)
 8005e2e:	f7fc fbcd 	bl	80025cc <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	08da      	lsrs	r2, r3, #3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3208      	adds	r2, #8
 8005e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	220f      	movs	r2, #15
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	43db      	mvns	r3, r3
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4013      	ands	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	08da      	lsrs	r2, r3, #3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3208      	adds	r2, #8
 8005e74:	6939      	ldr	r1, [r7, #16]
 8005e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	2203      	movs	r2, #3
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	43db      	mvns	r3, r3
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f003 0203 	and.w	r2, r3, #3
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 80b8 	beq.w	800602c <HAL_GPIO_Init+0x480>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ebc:	4b27      	ldr	r3, [pc, #156]	@ (8005f5c <HAL_GPIO_Init+0x3b0>)
 8005ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec0:	4a26      	ldr	r2, [pc, #152]	@ (8005f5c <HAL_GPIO_Init+0x3b0>)
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	6613      	str	r3, [r2, #96]	@ 0x60
 8005ec8:	4b24      	ldr	r3, [pc, #144]	@ (8005f5c <HAL_GPIO_Init+0x3b0>)
 8005eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	60bb      	str	r3, [r7, #8]
 8005ed2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ed4:	4a22      	ldr	r2, [pc, #136]	@ (8005f60 <HAL_GPIO_Init+0x3b4>)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	089b      	lsrs	r3, r3, #2
 8005eda:	3302      	adds	r3, #2
 8005edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f003 0303 	and.w	r3, r3, #3
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	220f      	movs	r2, #15
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005efe:	d031      	beq.n	8005f64 <HAL_GPIO_Init+0x3b8>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a10      	ldr	r2, [pc, #64]	@ (8005f44 <HAL_GPIO_Init+0x398>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d019      	beq.n	8005f3c <HAL_GPIO_Init+0x390>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a0f      	ldr	r2, [pc, #60]	@ (8005f48 <HAL_GPIO_Init+0x39c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d013      	beq.n	8005f38 <HAL_GPIO_Init+0x38c>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a0e      	ldr	r2, [pc, #56]	@ (8005f4c <HAL_GPIO_Init+0x3a0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00d      	beq.n	8005f34 <HAL_GPIO_Init+0x388>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8005f50 <HAL_GPIO_Init+0x3a4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d007      	beq.n	8005f30 <HAL_GPIO_Init+0x384>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a0c      	ldr	r2, [pc, #48]	@ (8005f54 <HAL_GPIO_Init+0x3a8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d101      	bne.n	8005f2c <HAL_GPIO_Init+0x380>
 8005f28:	2305      	movs	r3, #5
 8005f2a:	e01c      	b.n	8005f66 <HAL_GPIO_Init+0x3ba>
 8005f2c:	2306      	movs	r3, #6
 8005f2e:	e01a      	b.n	8005f66 <HAL_GPIO_Init+0x3ba>
 8005f30:	2304      	movs	r3, #4
 8005f32:	e018      	b.n	8005f66 <HAL_GPIO_Init+0x3ba>
 8005f34:	2303      	movs	r3, #3
 8005f36:	e016      	b.n	8005f66 <HAL_GPIO_Init+0x3ba>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e014      	b.n	8005f66 <HAL_GPIO_Init+0x3ba>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e012      	b.n	8005f66 <HAL_GPIO_Init+0x3ba>
 8005f40:	08012884 	.word	0x08012884
 8005f44:	48000400 	.word	0x48000400
 8005f48:	48000800 	.word	0x48000800
 8005f4c:	48000c00 	.word	0x48000c00
 8005f50:	48001000 	.word	0x48001000
 8005f54:	48001400 	.word	0x48001400
 8005f58:	48001800 	.word	0x48001800
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	40010000 	.word	0x40010000
 8005f64:	2300      	movs	r3, #0
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	f002 0203 	and.w	r2, r2, #3
 8005f6c:	0092      	lsls	r2, r2, #2
 8005f6e:	4093      	lsls	r3, r2
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f76:	4935      	ldr	r1, [pc, #212]	@ (800604c <HAL_GPIO_Init+0x4a0>)
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	089b      	lsrs	r3, r3, #2
 8005f7c:	3302      	adds	r3, #2
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f84:	4b32      	ldr	r3, [pc, #200]	@ (8006050 <HAL_GPIO_Init+0x4a4>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	43db      	mvns	r3, r3
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4013      	ands	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <HAL_GPIO_Init+0x3fc>
        {
          temp |= iocurrent;
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005fa8:	4a29      	ldr	r2, [pc, #164]	@ (8006050 <HAL_GPIO_Init+0x4a4>)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005fae:	4b28      	ldr	r3, [pc, #160]	@ (8006050 <HAL_GPIO_Init+0x4a4>)
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	43db      	mvns	r3, r3
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_GPIO_Init+0x426>
        {
          temp |= iocurrent;
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8006050 <HAL_GPIO_Init+0x4a4>)
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8006050 <HAL_GPIO_Init+0x4a4>)
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_GPIO_Init+0x450>
        {
          temp |= iocurrent;
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ffc:	4a14      	ldr	r2, [pc, #80]	@ (8006050 <HAL_GPIO_Init+0x4a4>)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006002:	4b13      	ldr	r3, [pc, #76]	@ (8006050 <HAL_GPIO_Init+0x4a4>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	43db      	mvns	r3, r3
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4013      	ands	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_GPIO_Init+0x47a>
        {
          temp |= iocurrent;
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006026:	4a0a      	ldr	r2, [pc, #40]	@ (8006050 <HAL_GPIO_Init+0x4a4>)
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	3301      	adds	r3, #1
 8006030:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	f47f ae3f 	bne.w	8005cc0 <HAL_GPIO_Init+0x114>
  }
}
 8006042:	bf00      	nop
 8006044:	bf00      	nop
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40010000 	.word	0x40010000
 8006050:	40010400 	.word	0x40010400

08006054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	807b      	strh	r3, [r7, #2]
 8006060:	4613      	mov	r3, r2
 8006062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006064:	887b      	ldrh	r3, [r7, #2]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d104      	bne.n	8006074 <HAL_GPIO_WritePin+0x20>
 800606a:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800606e:	480e      	ldr	r0, [pc, #56]	@ (80060a8 <HAL_GPIO_WritePin+0x54>)
 8006070:	f7fc faac 	bl	80025cc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006074:	787b      	ldrb	r3, [r7, #1]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d007      	beq.n	800608a <HAL_GPIO_WritePin+0x36>
 800607a:	787b      	ldrb	r3, [r7, #1]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d004      	beq.n	800608a <HAL_GPIO_WritePin+0x36>
 8006080:	f240 119b 	movw	r1, #411	@ 0x19b
 8006084:	4808      	ldr	r0, [pc, #32]	@ (80060a8 <HAL_GPIO_WritePin+0x54>)
 8006086:	f7fc faa1 	bl	80025cc <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800608a:	787b      	ldrb	r3, [r7, #1]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006090:	887a      	ldrh	r2, [r7, #2]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006096:	e002      	b.n	800609e <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006098:	887a      	ldrh	r2, [r7, #2]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800609e:	bf00      	nop
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	08012884 	.word	0x08012884

080060ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80060b8:	887b      	ldrh	r3, [r7, #2]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d104      	bne.n	80060c8 <HAL_GPIO_TogglePin+0x1c>
 80060be:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80060c2:	480a      	ldr	r0, [pc, #40]	@ (80060ec <HAL_GPIO_TogglePin+0x40>)
 80060c4:	f7fc fa82 	bl	80025cc <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060ce:	887a      	ldrh	r2, [r7, #2]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4013      	ands	r3, r2
 80060d4:	041a      	lsls	r2, r3, #16
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	43d9      	mvns	r1, r3
 80060da:	887b      	ldrh	r3, [r7, #2]
 80060dc:	400b      	ands	r3, r1
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	619a      	str	r2, [r3, #24]
}
 80060e4:	bf00      	nop
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	08012884 	.word	0x08012884

080060f0 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e113      	b.n	800632a <HAL_HRTIM_Init+0x23a>
  }

  /* Check the parameters */
  assert_param(IS_HRTIM_ALL_INSTANCE(hhrtim->Instance));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a8b      	ldr	r2, [pc, #556]	@ (8006334 <HAL_HRTIM_Init+0x244>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d004      	beq.n	8006116 <HAL_HRTIM_Init+0x26>
 800610c:	f44f 710d 	mov.w	r1, #564	@ 0x234
 8006110:	4889      	ldr	r0, [pc, #548]	@ (8006338 <HAL_HRTIM_Init+0x248>)
 8006112:	f7fc fa5b 	bl	80025cc <assert_failed>
  assert_param(IS_HRTIM_IT(hhrtim->Init.HRTIMInterruptResquests));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800611e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006122:	2b00      	cmp	r3, #0
 8006124:	d004      	beq.n	8006130 <HAL_HRTIM_Init+0x40>
 8006126:	f240 2135 	movw	r1, #565	@ 0x235
 800612a:	4883      	ldr	r0, [pc, #524]	@ (8006338 <HAL_HRTIM_Init+0x248>)
 800612c:	f7fc fa4e 	bl	80025cc <assert_failed>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d059      	beq.n	8006230 <HAL_HRTIM_Init+0x140>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCOUTPUTSOURCE(hhrtim->Init.SyncOutputSource));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d013      	beq.n	80061ac <HAL_HRTIM_Init+0xbc>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800618c:	d00e      	beq.n	80061ac <HAL_HRTIM_Init+0xbc>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006196:	d009      	beq.n	80061ac <HAL_HRTIM_Init+0xbc>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80061a0:	d004      	beq.n	80061ac <HAL_HRTIM_Init+0xbc>
 80061a2:	f240 216d 	movw	r1, #621	@ 0x26d
 80061a6:	4864      	ldr	r0, [pc, #400]	@ (8006338 <HAL_HRTIM_Init+0x248>)
 80061a8:	f7fc fa10 	bl	80025cc <assert_failed>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00e      	beq.n	80061d2 <HAL_HRTIM_Init+0xe2>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061bc:	d009      	beq.n	80061d2 <HAL_HRTIM_Init+0xe2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061c6:	d004      	beq.n	80061d2 <HAL_HRTIM_Init+0xe2>
 80061c8:	f240 216e 	movw	r1, #622	@ 0x26e
 80061cc:	485a      	ldr	r0, [pc, #360]	@ (8006338 <HAL_HRTIM_Init+0x248>)
 80061ce:	f7fc f9fd 	bl	80025cc <assert_failed>

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a57      	ldr	r2, [pc, #348]	@ (8006334 <HAL_HRTIM_Init+0x244>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d10b      	bne.n	80061f4 <HAL_HRTIM_Init+0x104>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80061dc:	4b57      	ldr	r3, [pc, #348]	@ (800633c <HAL_HRTIM_Init+0x24c>)
 80061de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e0:	4a56      	ldr	r2, [pc, #344]	@ (800633c <HAL_HRTIM_Init+0x24c>)
 80061e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80061e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80061e8:	4b54      	ldr	r3, [pc, #336]	@ (800633c <HAL_HRTIM_Init+0x24c>)
 80061ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80061f0:	60fb      	str	r3, [r7, #12]
 80061f2:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006202:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4313      	orrs	r3, r2
 8006210:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006218:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7fb fd2f 	bl	8001c94 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d025      	beq.n	800628e <HAL_HRTIM_Init+0x19e>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00e      	beq.n	8006268 <HAL_HRTIM_Init+0x178>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006252:	d009      	beq.n	8006268 <HAL_HRTIM_Init+0x178>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800625c:	d004      	beq.n	8006268 <HAL_HRTIM_Init+0x178>
 800625e:	f240 2192 	movw	r1, #658	@ 0x292
 8006262:	4835      	ldr	r0, [pc, #212]	@ (8006338 <HAL_HRTIM_Init+0x248>)
 8006264:	f7fc f9b2 	bl	80025cc <assert_failed>

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006276:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4313      	orrs	r3, r2
 8006284:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800629e:	2300      	movs	r3, #0
 80062a0:	75fb      	strb	r3, [r7, #23]
 80062a2:	e03e      	b.n	8006322 <HAL_HRTIM_Init+0x232>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80062a4:	7dfa      	ldrb	r2, [r7, #23]
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	1a9b      	subs	r3, r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	3318      	adds	r3, #24
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80062b8:	7dfa      	ldrb	r2, [r7, #23]
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	4613      	mov	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	1a9b      	subs	r3, r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	331c      	adds	r3, #28
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80062cc:	7dfa      	ldrb	r2, [r7, #23]
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	4613      	mov	r3, r2
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	1a9b      	subs	r3, r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	3320      	adds	r3, #32
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80062e0:	7dfa      	ldrb	r2, [r7, #23]
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	4613      	mov	r3, r2
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	3324      	adds	r3, #36	@ 0x24
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80062f4:	7dfa      	ldrb	r2, [r7, #23]
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	4613      	mov	r3, r2
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	3328      	adds	r3, #40	@ 0x28
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8006308:	7dfa      	ldrb	r2, [r7, #23]
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	4613      	mov	r3, r2
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	1a9b      	subs	r3, r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	3330      	adds	r3, #48	@ 0x30
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800631c:	7dfb      	ldrb	r3, [r7, #23]
 800631e:	3301      	adds	r3, #1
 8006320:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	2b06      	cmp	r3, #6
 8006326:	d9bd      	bls.n	80062a4 <HAL_HRTIM_Init+0x1b4>
  }

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	40016800 	.word	0x40016800
 8006338:	080128f8 	.word	0x080128f8
 800633c:	40021000 	.word	0x40021000

08006340 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006350:	d010      	beq.n	8006374 <HAL_HRTIM_DLLCalibrationStart+0x34>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00d      	beq.n	8006374 <HAL_HRTIM_DLLCalibrationStart+0x34>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2b04      	cmp	r3, #4
 800635c:	d00a      	beq.n	8006374 <HAL_HRTIM_DLLCalibrationStart+0x34>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b08      	cmp	r3, #8
 8006362:	d007      	beq.n	8006374 <HAL_HRTIM_DLLCalibrationStart+0x34>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b0c      	cmp	r3, #12
 8006368:	d004      	beq.n	8006374 <HAL_HRTIM_DLLCalibrationStart+0x34>
 800636a:	f240 3109 	movw	r1, #777	@ 0x309
 800636e:	482a      	ldr	r0, [pc, #168]	@ (8006418 <HAL_HRTIM_DLLCalibrationStart+0xd8>)
 8006370:	f7fc f92c 	bl	80025cc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_HRTIM_DLLCalibrationStart+0x42>
 800637e:	2302      	movs	r3, #2
 8006380:	e045      	b.n	800640e <HAL_HRTIM_DLLCalibrationStart+0xce>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2202      	movs	r2, #2
 800638e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006398:	d114      	bne.n	80063c4 <HAL_HRTIM_DLLCalibrationStart+0x84>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0202 	bic.w	r2, r2, #2
 80063aa:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 80063c2:	e01f      	b.n	8006404 <HAL_HRTIM_DLLCalibrationStart+0xc4>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f042 0202 	orr.w	r2, r2, #2
 80063d4:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 80063e0:	f023 010c 	bic.w	r1, r3, #12
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 0201 	orr.w	r2, r2, #1
 8006400:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	080128f8 	.word	0x080128f8

0800641c <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8006426:	f7fc fac9 	bl	80029bc <HAL_GetTick>
 800642a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 800642c:	e014      	b.n	8006458 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006434:	d010      	beq.n	8006458 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8006436:	f7fc fac1 	bl	80029bc <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d302      	bcc.n	800644c <HAL_HRTIM_PollForDLLCalibration+0x30>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d105      	bne.n	8006458 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2207      	movs	r2, #7
 8006450:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e011      	b.n	800647c <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8006460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006468:	d1e1      	bne.n	800642e <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b06      	cmp	r3, #6
 8006494:	d016      	beq.n	80064c4 <HAL_HRTIM_TimeBaseConfig+0x40>
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d013      	beq.n	80064c4 <HAL_HRTIM_TimeBaseConfig+0x40>
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d010      	beq.n	80064c4 <HAL_HRTIM_TimeBaseConfig+0x40>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d00d      	beq.n	80064c4 <HAL_HRTIM_TimeBaseConfig+0x40>
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d00a      	beq.n	80064c4 <HAL_HRTIM_TimeBaseConfig+0x40>
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d007      	beq.n	80064c4 <HAL_HRTIM_TimeBaseConfig+0x40>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b05      	cmp	r3, #5
 80064b8:	d004      	beq.n	80064c4 <HAL_HRTIM_TimeBaseConfig+0x40>
 80064ba:	f240 3197 	movw	r1, #919	@ 0x397
 80064be:	482d      	ldr	r0, [pc, #180]	@ (8006574 <HAL_HRTIM_TimeBaseConfig+0xf0>)
 80064c0:	f7fc f884 	bl	80025cc <assert_failed>
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d020      	beq.n	800650e <HAL_HRTIM_TimeBaseConfig+0x8a>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d01c      	beq.n	800650e <HAL_HRTIM_TimeBaseConfig+0x8a>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d018      	beq.n	800650e <HAL_HRTIM_TimeBaseConfig+0x8a>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d014      	beq.n	800650e <HAL_HRTIM_TimeBaseConfig+0x8a>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d010      	beq.n	800650e <HAL_HRTIM_TimeBaseConfig+0x8a>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	2b05      	cmp	r3, #5
 80064f2:	d00c      	beq.n	800650e <HAL_HRTIM_TimeBaseConfig+0x8a>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	2b06      	cmp	r3, #6
 80064fa:	d008      	beq.n	800650e <HAL_HRTIM_TimeBaseConfig+0x8a>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	2b07      	cmp	r3, #7
 8006502:	d004      	beq.n	800650e <HAL_HRTIM_TimeBaseConfig+0x8a>
 8006504:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8006508:	481a      	ldr	r0, [pc, #104]	@ (8006574 <HAL_HRTIM_TimeBaseConfig+0xf0>)
 800650a:	f7fc f85f 	bl	80025cc <assert_failed>
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	2b08      	cmp	r3, #8
 8006514:	d00c      	beq.n	8006530 <HAL_HRTIM_TimeBaseConfig+0xac>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d008      	beq.n	8006530 <HAL_HRTIM_TimeBaseConfig+0xac>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2b10      	cmp	r3, #16
 8006524:	d004      	beq.n	8006530 <HAL_HRTIM_TimeBaseConfig+0xac>
 8006526:	f240 3199 	movw	r1, #921	@ 0x399
 800652a:	4812      	ldr	r0, [pc, #72]	@ (8006574 <HAL_HRTIM_TimeBaseConfig+0xf0>)
 800652c:	f7fc f84e 	bl	80025cc <assert_failed>

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d101      	bne.n	8006540 <HAL_HRTIM_TimeBaseConfig+0xbc>
  {
     return HAL_BUSY;
 800653c:	2302      	movs	r3, #2
 800653e:	e015      	b.n	800656c <HAL_HRTIM_TimeBaseConfig+0xe8>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b06      	cmp	r3, #6
 800654c:	d104      	bne.n	8006558 <HAL_HRTIM_TimeBaseConfig+0xd4>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 fe1b 	bl	800718c <HRTIM_MasterBase_Config>
 8006556:	e004      	b.n	8006562 <HAL_HRTIM_TimeBaseConfig+0xde>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	68b9      	ldr	r1, [r7, #8]
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 fe44 	bl	80071ea <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	080128f8 	.word	0x080128f8

08006578 <HAL_HRTIM_SimpleBaseStart>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_SimpleBaseStart(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b06      	cmp	r3, #6
 8006586:	d016      	beq.n	80065b6 <HAL_HRTIM_SimpleBaseStart+0x3e>
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d013      	beq.n	80065b6 <HAL_HRTIM_SimpleBaseStart+0x3e>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d010      	beq.n	80065b6 <HAL_HRTIM_SimpleBaseStart+0x3e>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d00d      	beq.n	80065b6 <HAL_HRTIM_SimpleBaseStart+0x3e>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b03      	cmp	r3, #3
 800659e:	d00a      	beq.n	80065b6 <HAL_HRTIM_SimpleBaseStart+0x3e>
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d007      	beq.n	80065b6 <HAL_HRTIM_SimpleBaseStart+0x3e>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b05      	cmp	r3, #5
 80065aa:	d004      	beq.n	80065b6 <HAL_HRTIM_SimpleBaseStart+0x3e>
 80065ac:	f240 31de 	movw	r1, #990	@ 0x3de
 80065b0:	4814      	ldr	r0, [pc, #80]	@ (8006604 <HAL_HRTIM_SimpleBaseStart+0x8c>)
 80065b2:	f7fc f80b 	bl	80025cc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <HAL_HRTIM_SimpleBaseStart+0x4c>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e01b      	b.n	80065fc <HAL_HRTIM_SimpleBaseStart+0x84>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6819      	ldr	r1, [r3, #0]
 80065da:	4a0b      	ldr	r2, [pc, #44]	@ (8006608 <HAL_HRTIM_SimpleBaseStart+0x90>)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	080128f8 	.word	0x080128f8
 8006608:	2000000c 	.word	0x2000000c

0800660c <HAL_HRTIM_SimpleBaseStart_DMA>:
HAL_StatusTypeDef HAL_HRTIM_SimpleBaseStart_DMA(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t TimerIdx,
                                               uint32_t SrcAddr,
                                               uint32_t DestAddr,
                                               uint32_t Length)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
  DMA_HandleTypeDef * hdma;

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b06      	cmp	r3, #6
 800661e:	d016      	beq.n	800664e <HAL_HRTIM_SimpleBaseStart_DMA+0x42>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d013      	beq.n	800664e <HAL_HRTIM_SimpleBaseStart_DMA+0x42>
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d010      	beq.n	800664e <HAL_HRTIM_SimpleBaseStart_DMA+0x42>
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2b02      	cmp	r3, #2
 8006630:	d00d      	beq.n	800664e <HAL_HRTIM_SimpleBaseStart_DMA+0x42>
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b03      	cmp	r3, #3
 8006636:	d00a      	beq.n	800664e <HAL_HRTIM_SimpleBaseStart_DMA+0x42>
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2b04      	cmp	r3, #4
 800663c:	d007      	beq.n	800664e <HAL_HRTIM_SimpleBaseStart_DMA+0x42>
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b05      	cmp	r3, #5
 8006642:	d004      	beq.n	800664e <HAL_HRTIM_SimpleBaseStart_DMA+0x42>
 8006644:	f240 418d 	movw	r1, #1165	@ 0x48d
 8006648:	4848      	ldr	r0, [pc, #288]	@ (800676c <HAL_HRTIM_SimpleBaseStart_DMA+0x160>)
 800664a:	f7fb ffbf 	bl	80025cc <assert_failed>

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d101      	bne.n	800665e <HAL_HRTIM_SimpleBaseStart_DMA+0x52>
  {
     return HAL_BUSY;
 800665a:	2302      	movs	r3, #2
 800665c:	e081      	b.n	8006762 <HAL_HRTIM_SimpleBaseStart_DMA+0x156>
  }
  if(hhrtim->State == HAL_HRTIM_STATE_READY)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b01      	cmp	r3, #1
 8006668:	d10e      	bne.n	8006688 <HAL_HRTIM_SimpleBaseStart_DMA+0x7c>
  {
    if((SrcAddr == 0U ) || (DestAddr == 0U ) || (Length == 0U))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <HAL_HRTIM_SimpleBaseStart_DMA+0x70>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <HAL_HRTIM_SimpleBaseStart_DMA+0x70>
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_HRTIM_SimpleBaseStart_DMA+0x74>
    {
      return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e070      	b.n	8006762 <HAL_HRTIM_SimpleBaseStart_DMA+0x156>
    }
    else
    {
      hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
    }
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800668e:	2b01      	cmp	r3, #1
 8006690:	d101      	bne.n	8006696 <HAL_HRTIM_SimpleBaseStart_DMA+0x8a>
 8006692:	2302      	movs	r3, #2
 8006694:	e065      	b.n	8006762 <HAL_HRTIM_SimpleBaseStart_DMA+0x156>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Get the timer DMA handler */
  hdma = HRTIM_GetDMAHandleFromTimerIdx(hhrtim, TimerIdx);
 800669e:	68b9      	ldr	r1, [r7, #8]
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 fe43 	bl	800732c <HRTIM_GetDMAHandleFromTimerIdx>
 80066a6:	6178      	str	r0, [r7, #20]

  if (hdma == NULL)
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <HAL_HRTIM_SimpleBaseStart_DMA+0xb6>
  {
   hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2207      	movs	r2, #7
 80066b2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

   /* Process Unlocked */
   __HAL_UNLOCK(hhrtim);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

   return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e04f      	b.n	8006762 <HAL_HRTIM_SimpleBaseStart_DMA+0x156>
  }

  /* Set the DMA transfer completed callback */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b06      	cmp	r3, #6
 80066c6:	d103      	bne.n	80066d0 <HAL_HRTIM_SimpleBaseStart_DMA+0xc4>
  {
    hdma->XferCpltCallback = HRTIM_DMAMasterCplt;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	4a29      	ldr	r2, [pc, #164]	@ (8006770 <HAL_HRTIM_SimpleBaseStart_DMA+0x164>)
 80066cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80066ce:	e002      	b.n	80066d6 <HAL_HRTIM_SimpleBaseStart_DMA+0xca>
  }
  else
  {
    hdma->XferCpltCallback = HRTIM_DMATimerxCplt;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	4a28      	ldr	r2, [pc, #160]	@ (8006774 <HAL_HRTIM_SimpleBaseStart_DMA+0x168>)
 80066d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hdma->XferErrorCallback = HRTIM_DMAError ;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	4a27      	ldr	r2, [pc, #156]	@ (8006778 <HAL_HRTIM_SimpleBaseStart_DMA+0x16c>)
 80066da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA channel */
  if (HAL_DMA_Start_IT(hdma, SrcAddr, DestAddr, Length) != HAL_OK)
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	6978      	ldr	r0, [r7, #20]
 80066e4:	f7ff f888 	bl	80057f8 <HAL_DMA_Start_IT>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d009      	beq.n	8006702 <HAL_HRTIM_SimpleBaseStart_DMA+0xf6>
    {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2207      	movs	r2, #7
 80066f2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e02f      	b.n	8006762 <HAL_HRTIM_SimpleBaseStart_DMA+0x156>
    }

  /* Enable the timer repetition DMA request */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b06      	cmp	r3, #6
 8006706:	d108      	bne.n	800671a <HAL_HRTIM_SimpleBaseStart_DMA+0x10e>
  {
    __HAL_HRTIM_MASTER_ENABLE_DMA(hhrtim, HRTIM_MASTER_DMA_MREP);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006716:	60da      	str	r2, [r3, #12]
 8006718:	e00f      	b.n	800673a <HAL_HRTIM_SimpleBaseStart_DMA+0x12e>
  }
  else
  {
    __HAL_HRTIM_TIMER_ENABLE_DMA(hhrtim, TimerIdx, HRTIM_TIM_DMA_REP);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	01db      	lsls	r3, r3, #7
 8006722:	4413      	add	r3, r2
 8006724:	338c      	adds	r3, #140	@ 0x8c
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	6811      	ldr	r1, [r2, #0]
 800672c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	01db      	lsls	r3, r3, #7
 8006734:	440b      	add	r3, r1
 8006736:	338c      	adds	r3, #140	@ 0x8c
 8006738:	601a      	str	r2, [r3, #0]
  }

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6819      	ldr	r1, [r3, #0]
 8006740:	4a0e      	ldr	r2, [pc, #56]	@ (800677c <HAL_HRTIM_SimpleBaseStart_DMA+0x170>)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	080128f8 	.word	0x080128f8
 8006770:	08007535 	.word	0x08007535
 8006774:	080075ef 	.word	0x080075ef
 8006778:	08007813 	.word	0x08007813
 800677c:	2000000c 	.word	0x2000000c

08006780 <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             const HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_cr1;
  uint32_t hrtim_adcur;

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d021      	beq.n	80067d6 <HAL_HRTIM_ADCTriggerConfig+0x56>
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b02      	cmp	r3, #2
 8006796:	d01e      	beq.n	80067d6 <HAL_HRTIM_ADCTriggerConfig+0x56>
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2b04      	cmp	r3, #4
 800679c:	d01b      	beq.n	80067d6 <HAL_HRTIM_ADCTriggerConfig+0x56>
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d018      	beq.n	80067d6 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b10      	cmp	r3, #16
 80067a8:	d015      	beq.n	80067d6 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	d012      	beq.n	80067d6 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b40      	cmp	r3, #64	@ 0x40
 80067b4:	d00f      	beq.n	80067d6 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b80      	cmp	r3, #128	@ 0x80
 80067ba:	d00c      	beq.n	80067d6 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067c2:	d008      	beq.n	80067d6 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067ca:	d004      	beq.n	80067d6 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80067cc:	f241 11d8 	movw	r1, #4568	@ 0x11d8
 80067d0:	48a7      	ldr	r0, [pc, #668]	@ (8006a70 <HAL_HRTIM_ADCTriggerConfig+0x2f0>)
 80067d2:	f7fb fefb 	bl	80025cc <assert_failed>
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d022      	beq.n	8006824 <HAL_HRTIM_ADCTriggerConfig+0xa4>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067e6:	d01d      	beq.n	8006824 <HAL_HRTIM_ADCTriggerConfig+0xa4>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067f0:	d018      	beq.n	8006824 <HAL_HRTIM_ADCTriggerConfig+0xa4>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067fa:	d013      	beq.n	8006824 <HAL_HRTIM_ADCTriggerConfig+0xa4>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006804:	d00e      	beq.n	8006824 <HAL_HRTIM_ADCTriggerConfig+0xa4>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800680e:	d009      	beq.n	8006824 <HAL_HRTIM_ADCTriggerConfig+0xa4>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006818:	d004      	beq.n	8006824 <HAL_HRTIM_ADCTriggerConfig+0xa4>
 800681a:	f241 11d9 	movw	r1, #4569	@ 0x11d9
 800681e:	4894      	ldr	r0, [pc, #592]	@ (8006a70 <HAL_HRTIM_ADCTriggerConfig+0x2f0>)
 8006820:	f7fb fed4 	bl	80025cc <assert_failed>

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d101      	bne.n	8006834 <HAL_HRTIM_ADCTriggerConfig+0xb4>
  {
     return HAL_BUSY;
 8006830:	2302      	movs	r3, #2
 8006832:	e1da      	b.n	8006bea <HAL_HRTIM_ADCTriggerConfig+0x46a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800683a:	2b01      	cmp	r3, #1
 800683c:	d101      	bne.n	8006842 <HAL_HRTIM_ADCTriggerConfig+0xc2>
 800683e:	2302      	movs	r3, #2
 8006840:	e1d3      	b.n	8006bea <HAL_HRTIM_ADCTriggerConfig+0x46a>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2202      	movs	r2, #2
 800684e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800685a:	617b      	str	r3, [r7, #20]
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8006864:	613b      	str	r3, [r7, #16]

  switch (ADCTrigger)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800686c:	f000 8170 	beq.w	8006b50 <HAL_HRTIM_ADCTriggerConfig+0x3d0>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006876:	f200 8190 	bhi.w	8006b9a <HAL_HRTIM_ADCTriggerConfig+0x41a>
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006880:	f000 8142 	beq.w	8006b08 <HAL_HRTIM_ADCTriggerConfig+0x388>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800688a:	f200 8186 	bhi.w	8006b9a <HAL_HRTIM_ADCTriggerConfig+0x41a>
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b80      	cmp	r3, #128	@ 0x80
 8006892:	f000 8114 	beq.w	8006abe <HAL_HRTIM_ADCTriggerConfig+0x33e>
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b80      	cmp	r3, #128	@ 0x80
 800689a:	f200 817e 	bhi.w	8006b9a <HAL_HRTIM_ADCTriggerConfig+0x41a>
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b20      	cmp	r3, #32
 80068a2:	d84b      	bhi.n	800693c <HAL_HRTIM_ADCTriggerConfig+0x1bc>
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 8177 	beq.w	8006b9a <HAL_HRTIM_ADCTriggerConfig+0x41a>
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	2b1f      	cmp	r3, #31
 80068b2:	f200 8172 	bhi.w	8006b9a <HAL_HRTIM_ADCTriggerConfig+0x41a>
 80068b6:	a201      	add	r2, pc, #4	@ (adr r2, 80068bc <HAL_HRTIM_ADCTriggerConfig+0x13c>)
 80068b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068bc:	08006947 	.word	0x08006947
 80068c0:	0800696b 	.word	0x0800696b
 80068c4:	08006b9b 	.word	0x08006b9b
 80068c8:	08006991 	.word	0x08006991
 80068cc:	08006b9b 	.word	0x08006b9b
 80068d0:	08006b9b 	.word	0x08006b9b
 80068d4:	08006b9b 	.word	0x08006b9b
 80068d8:	080069b7 	.word	0x080069b7
 80068dc:	08006b9b 	.word	0x08006b9b
 80068e0:	08006b9b 	.word	0x08006b9b
 80068e4:	08006b9b 	.word	0x08006b9b
 80068e8:	08006b9b 	.word	0x08006b9b
 80068ec:	08006b9b 	.word	0x08006b9b
 80068f0:	08006b9b 	.word	0x08006b9b
 80068f4:	08006b9b 	.word	0x08006b9b
 80068f8:	080069dd 	.word	0x080069dd
 80068fc:	08006b9b 	.word	0x08006b9b
 8006900:	08006b9b 	.word	0x08006b9b
 8006904:	08006b9b 	.word	0x08006b9b
 8006908:	08006b9b 	.word	0x08006b9b
 800690c:	08006b9b 	.word	0x08006b9b
 8006910:	08006b9b 	.word	0x08006b9b
 8006914:	08006b9b 	.word	0x08006b9b
 8006918:	08006b9b 	.word	0x08006b9b
 800691c:	08006b9b 	.word	0x08006b9b
 8006920:	08006b9b 	.word	0x08006b9b
 8006924:	08006b9b 	.word	0x08006b9b
 8006928:	08006b9b 	.word	0x08006b9b
 800692c:	08006b9b 	.word	0x08006b9b
 8006930:	08006b9b 	.word	0x08006b9b
 8006934:	08006b9b 	.word	0x08006b9b
 8006938:	08006a25 	.word	0x08006a25
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b40      	cmp	r3, #64	@ 0x40
 8006940:	f000 8098 	beq.w	8006a74 <HAL_HRTIM_ADCTriggerConfig+0x2f4>
 8006944:	e129      	b.n	8006b9a <HAL_HRTIM_ADCTriggerConfig+0x41a>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800694c:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	4313      	orrs	r3, r2
 800695a:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6852      	ldr	r2, [r2, #4]
 8006964:	f8c3 23bc 	str.w	r2, [r3, #956]	@ 0x3bc
      break;
 8006968:	e120      	b.n	8006bac <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 8006970:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6852      	ldr	r2, [r2, #4]
 800698a:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0
      break;
 800698e:	e10d      	b.n	8006bac <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8006996:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	019b      	lsls	r3, r3, #6
 800699e:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6852      	ldr	r2, [r2, #4]
 80069b0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
      break;
 80069b4:	e0fa      	b.n	8006bac <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80069bc:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	025b      	lsls	r3, r3, #9
 80069c4:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6852      	ldr	r2, [r2, #4]
 80069d6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
      break;
 80069da:	e0e7      	b.n	8006bac <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD5USRC);
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f023 0307 	bic.w	r3, r3, #7
 80069e2:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 5 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 021f 	bic.w	r2, r2, #31
 8006a04:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f003 021f 	and.w	r2, r3, #31
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006a22:	e0c3      	b.n	8006bac <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2a:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	0b1b      	lsrs	r3, r3, #12
 8006a32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 6 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8006a4c:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	015b      	lsls	r3, r3, #5
 8006a5e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006a6c:	e09e      	b.n	8006bac <HAL_HRTIM_ADCTriggerConfig+0x42c>
 8006a6e:	bf00      	nop
 8006a70:	080128f8 	.word	0x080128f8
    }

  case HRTIM_ADCTRIGGER_7:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006a7a:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	0a1b      	lsrs	r3, r3, #8
 8006a82:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 7 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8006a9c:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	029b      	lsls	r3, r3, #10
 8006aae:	f403 42f8 	and.w	r2, r3, #31744	@ 0x7c00
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006abc:	e076      	b.n	8006bac <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ac4:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	091b      	lsrs	r3, r3, #4
 8006acc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 8 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8006ae6:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	041b      	lsls	r3, r3, #16
 8006af8:	f403 12f8 	and.w	r2, r3, #2031616	@ 0x1f0000
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006b06:	e051      	b.n	8006bac <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006b0e:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 9 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 7278 	bic.w	r2, r2, #65011712	@ 0x3e00000
 8006b2e:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	055b      	lsls	r3, r3, #21
 8006b40:	f003 7278 	and.w	r2, r3, #65011712	@ 0x3e00000
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006b4e:	e02d      	b.n	8006bac <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006b56:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 10 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8006b78:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	069b      	lsls	r3, r3, #26
 8006b8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006b98:	e008      	b.n	8006bac <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2207      	movs	r2, #7
 8006b9e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 8006baa:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b07      	cmp	r3, #7
 8006bb6:	d101      	bne.n	8006bbc <HAL_HRTIM_ADCTriggerConfig+0x43c>
  {
     return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e016      	b.n	8006bea <HAL_HRTIM_ADCTriggerConfig+0x46a>
  }

  /* Update the HRTIM registers */
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b0f      	cmp	r3, #15
 8006bc0:	d805      	bhi.n	8006bce <HAL_HRTIM_ADCTriggerConfig+0x44e>
  {
   hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
 8006bcc:	e004      	b.n	8006bd8 <HAL_HRTIM_ADCTriggerConfig+0x458>
  }
  else
  {
   hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop

08006bf4 <HAL_HRTIM_ADCPostScalerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCPostScalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             uint32_t Postscaler)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d021      	beq.n	8006c4a <HAL_HRTIM_ADCPostScalerConfig+0x56>
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d01e      	beq.n	8006c4a <HAL_HRTIM_ADCPostScalerConfig+0x56>
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d01b      	beq.n	8006c4a <HAL_HRTIM_ADCPostScalerConfig+0x56>
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d018      	beq.n	8006c4a <HAL_HRTIM_ADCPostScalerConfig+0x56>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b10      	cmp	r3, #16
 8006c1c:	d015      	beq.n	8006c4a <HAL_HRTIM_ADCPostScalerConfig+0x56>
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	d012      	beq.n	8006c4a <HAL_HRTIM_ADCPostScalerConfig+0x56>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b40      	cmp	r3, #64	@ 0x40
 8006c28:	d00f      	beq.n	8006c4a <HAL_HRTIM_ADCPostScalerConfig+0x56>
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b80      	cmp	r3, #128	@ 0x80
 8006c2e:	d00c      	beq.n	8006c4a <HAL_HRTIM_ADCPostScalerConfig+0x56>
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c36:	d008      	beq.n	8006c4a <HAL_HRTIM_ADCPostScalerConfig+0x56>
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c3e:	d004      	beq.n	8006c4a <HAL_HRTIM_ADCPostScalerConfig+0x56>
 8006c40:	f241 2190 	movw	r1, #4752	@ 0x1290
 8006c44:	48a2      	ldr	r0, [pc, #648]	@ (8006ed0 <HAL_HRTIM_ADCPostScalerConfig+0x2dc>)
 8006c46:	f7fb fcc1 	bl	80025cc <assert_failed>

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d101      	bne.n	8006c5a <HAL_HRTIM_ADCPostScalerConfig+0x66>
  {
     return HAL_BUSY;
 8006c56:	2302      	movs	r3, #2
 8006c58:	e136      	b.n	8006ec8 <HAL_HRTIM_ADCPostScalerConfig+0x2d4>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d101      	bne.n	8006c68 <HAL_HRTIM_ADCPostScalerConfig+0x74>
 8006c64:	2302      	movs	r3, #2
 8006c66:	e12f      	b.n	8006ec8 <HAL_HRTIM_ADCPostScalerConfig+0x2d4>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  switch (ADCTrigger)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c7e:	f000 80f9 	beq.w	8006e74 <HAL_HRTIM_ADCPostScalerConfig+0x280>
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c88:	f200 8104 	bhi.w	8006e94 <HAL_HRTIM_ADCPostScalerConfig+0x2a0>
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c92:	f000 80df 	beq.w	8006e54 <HAL_HRTIM_ADCPostScalerConfig+0x260>
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c9c:	f200 80fa 	bhi.w	8006e94 <HAL_HRTIM_ADCPostScalerConfig+0x2a0>
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2b80      	cmp	r3, #128	@ 0x80
 8006ca4:	f000 80c6 	beq.w	8006e34 <HAL_HRTIM_ADCPostScalerConfig+0x240>
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b80      	cmp	r3, #128	@ 0x80
 8006cac:	f200 80f2 	bhi.w	8006e94 <HAL_HRTIM_ADCPostScalerConfig+0x2a0>
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b20      	cmp	r3, #32
 8006cb4:	d84c      	bhi.n	8006d50 <HAL_HRTIM_ADCPostScalerConfig+0x15c>
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 80eb 	beq.w	8006e94 <HAL_HRTIM_ADCPostScalerConfig+0x2a0>
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	2b1f      	cmp	r3, #31
 8006cc4:	f200 80e6 	bhi.w	8006e94 <HAL_HRTIM_ADCPostScalerConfig+0x2a0>
 8006cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd0 <HAL_HRTIM_ADCPostScalerConfig+0xdc>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006d59 	.word	0x08006d59
 8006cd4:	08006d77 	.word	0x08006d77
 8006cd8:	08006e95 	.word	0x08006e95
 8006cdc:	08006d97 	.word	0x08006d97
 8006ce0:	08006e95 	.word	0x08006e95
 8006ce4:	08006e95 	.word	0x08006e95
 8006ce8:	08006e95 	.word	0x08006e95
 8006cec:	08006db7 	.word	0x08006db7
 8006cf0:	08006e95 	.word	0x08006e95
 8006cf4:	08006e95 	.word	0x08006e95
 8006cf8:	08006e95 	.word	0x08006e95
 8006cfc:	08006e95 	.word	0x08006e95
 8006d00:	08006e95 	.word	0x08006e95
 8006d04:	08006e95 	.word	0x08006e95
 8006d08:	08006e95 	.word	0x08006e95
 8006d0c:	08006dd7 	.word	0x08006dd7
 8006d10:	08006e95 	.word	0x08006e95
 8006d14:	08006e95 	.word	0x08006e95
 8006d18:	08006e95 	.word	0x08006e95
 8006d1c:	08006e95 	.word	0x08006e95
 8006d20:	08006e95 	.word	0x08006e95
 8006d24:	08006e95 	.word	0x08006e95
 8006d28:	08006e95 	.word	0x08006e95
 8006d2c:	08006e95 	.word	0x08006e95
 8006d30:	08006e95 	.word	0x08006e95
 8006d34:	08006e95 	.word	0x08006e95
 8006d38:	08006e95 	.word	0x08006e95
 8006d3c:	08006e95 	.word	0x08006e95
 8006d40:	08006e95 	.word	0x08006e95
 8006d44:	08006e95 	.word	0x08006e95
 8006d48:	08006e95 	.word	0x08006e95
 8006d4c:	08006df7 	.word	0x08006df7
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2b40      	cmp	r3, #64	@ 0x40
 8006d54:	d05e      	beq.n	8006e14 <HAL_HRTIM_ADCPostScalerConfig+0x220>
 8006d56:	e09d      	b.n	8006e94 <HAL_HRTIM_ADCPostScalerConfig+0x2a0>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006d60:	f023 011f 	bic.w	r1, r3, #31
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f003 021f 	and.w	r2, r3, #31
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8006d74:	e097      	b.n	8006ea6 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006d7e:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	019b      	lsls	r3, r3, #6
 8006d86:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8006d94:	e087      	b.n	8006ea6 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006d9e:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	031b      	lsls	r3, r3, #12
 8006da6:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8006db4:	e077      	b.n	8006ea6 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006dbe:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	049b      	lsls	r3, r3, #18
 8006dc6:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8006dd4:	e067      	b.n	8006ea6 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006dde:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	061b      	lsls	r3, r3, #24
 8006de6:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8006df4:	e057      	b.n	8006ea6 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006dfe:	f023 011f 	bic.w	r1, r3, #31
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f003 021f 	and.w	r2, r3, #31
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8006e12:	e048      	b.n	8006ea6 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006e1c:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	019b      	lsls	r3, r3, #6
 8006e24:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8006e32:	e038      	b.n	8006ea6 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006e3c:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	031b      	lsls	r3, r3, #12
 8006e44:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8006e52:	e028      	b.n	8006ea6 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006e5c:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	049b      	lsls	r3, r3, #18
 8006e64:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8006e72:	e018      	b.n	8006ea6 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006e7c:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	061b      	lsls	r3, r3, #24
 8006e84:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8006e92:	e008      	b.n	8006ea6 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2207      	movs	r2, #7
 8006e98:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 8006ea4:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b07      	cmp	r3, #7
 8006eb0:	d101      	bne.n	8006eb6 <HAL_HRTIM_ADCPostScalerConfig+0x2c2>
  {
     return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e008      	b.n	8006ec8 <HAL_HRTIM_ADCPostScalerConfig+0x2d4>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	080128f8 	.word	0x080128f8

08006ed4 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
    /* Check parameters */
    assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b06      	cmp	r3, #6
 8006ee4:	d016      	beq.n	8006f14 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d013      	beq.n	8006f14 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d010      	beq.n	8006f14 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d00d      	beq.n	8006f14 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d00a      	beq.n	8006f14 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2b04      	cmp	r3, #4
 8006f02:	d007      	beq.n	8006f14 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b05      	cmp	r3, #5
 8006f08:	d004      	beq.n	8006f14 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006f0a:	f241 31cc 	movw	r1, #5068	@ 0x13cc
 8006f0e:	4847      	ldr	r0, [pc, #284]	@ (800702c <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006f10:	f7fb fb5c 	bl	80025cc <assert_failed>
    /* Relevant for all A..F HRTIM timers */
    assert_param(IS_HRTIM_TIMERUPDOWNMODE(pTimerCtl->UpDownMode));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d008      	beq.n	8006f2e <HAL_HRTIM_WaveformTimerControl+0x5a>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d004      	beq.n	8006f2e <HAL_HRTIM_WaveformTimerControl+0x5a>
 8006f24:	f241 31ce 	movw	r1, #5070	@ 0x13ce
 8006f28:	4840      	ldr	r0, [pc, #256]	@ (800702c <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006f2a:	f7fb fb4f 	bl	80025cc <assert_failed>
    assert_param(IS_HRTIM_TIMERTRGHLFMODE(pTimerCtl->TrigHalf));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <HAL_HRTIM_WaveformTimerControl+0x76>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f3e:	d004      	beq.n	8006f4a <HAL_HRTIM_WaveformTimerControl+0x76>
 8006f40:	f241 31cf 	movw	r1, #5071	@ 0x13cf
 8006f44:	4839      	ldr	r0, [pc, #228]	@ (800702c <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006f46:	f7fb fb41 	bl	80025cc <assert_failed>
    assert_param(IS_HRTIM_TIMERGTCMP3(pTimerCtl->GreaterCMP3));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d009      	beq.n	8006f66 <HAL_HRTIM_WaveformTimerControl+0x92>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f5a:	d004      	beq.n	8006f66 <HAL_HRTIM_WaveformTimerControl+0x92>
 8006f5c:	f241 31d0 	movw	r1, #5072	@ 0x13d0
 8006f60:	4832      	ldr	r0, [pc, #200]	@ (800702c <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006f62:	f7fb fb33 	bl	80025cc <assert_failed>
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d009      	beq.n	8006f82 <HAL_HRTIM_WaveformTimerControl+0xae>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f76:	d004      	beq.n	8006f82 <HAL_HRTIM_WaveformTimerControl+0xae>
 8006f78:	f241 31d1 	movw	r1, #5073	@ 0x13d1
 8006f7c:	482b      	ldr	r0, [pc, #172]	@ (800702c <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006f7e:	f7fb fb25 	bl	80025cc <assert_failed>
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d008      	beq.n	8006f9c <HAL_HRTIM_WaveformTimerControl+0xc8>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d004      	beq.n	8006f9c <HAL_HRTIM_WaveformTimerControl+0xc8>
 8006f92:	f241 31d2 	movw	r1, #5074	@ 0x13d2
 8006f96:	4825      	ldr	r0, [pc, #148]	@ (800702c <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006f98:	f7fb fb18 	bl	80025cc <assert_failed>
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d008      	beq.n	8006fb6 <HAL_HRTIM_WaveformTimerControl+0xe2>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d004      	beq.n	8006fb6 <HAL_HRTIM_WaveformTimerControl+0xe2>
 8006fac:	f241 31d3 	movw	r1, #5075	@ 0x13d3
 8006fb0:	481e      	ldr	r0, [pc, #120]	@ (800702c <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006fb2:	f7fb fb0b 	bl	80025cc <assert_failed>
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d008      	beq.n	8006fd0 <HAL_HRTIM_WaveformTimerControl+0xfc>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d004      	beq.n	8006fd0 <HAL_HRTIM_WaveformTimerControl+0xfc>
 8006fc6:	f241 31d4 	movw	r1, #5076	@ 0x13d4
 8006fca:	4818      	ldr	r0, [pc, #96]	@ (800702c <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006fcc:	f7fb fafe 	bl	80025cc <assert_failed>

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d101      	bne.n	8006fe0 <HAL_HRTIM_WaveformTimerControl+0x10c>
    {
       return HAL_BUSY;
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e020      	b.n	8007022 <HAL_HRTIM_WaveformTimerControl+0x14e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d101      	bne.n	8006fee <HAL_HRTIM_WaveformTimerControl+0x11a>
 8006fea:	2302      	movs	r3, #2
 8006fec:	e019      	b.n	8007022 <HAL_HRTIM_WaveformTimerControl+0x14e>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 f931 	bl	800726a <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007008:	68b9      	ldr	r1, [r7, #8]
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 fa24 	bl	8007458 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	080128f8 	.word	0x080128f8

08007030 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 800704e:	bf00      	nop
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007086:	b480      	push	{r7}
 8007088:	b083      	sub	sp, #12
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 80070fe:	bf00      	nop
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_HRTIM_ErrorCallback>:
  * @brief  Callback function invoked when a DMA error occurs
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_ErrorCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_ErrorCallback could be implemented in the user file
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f023 0307 	bic.w	r3, r3, #7
 80071a4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 0318 	bic.w	r3, r3, #24
 80071b6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	6852      	ldr	r2, [r2, #4]
 80071dc:	619a      	str	r2, [r3, #24]
}
 80071de:	bf00      	nop
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b087      	sub	sp, #28
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	3301      	adds	r3, #1
 80071fe:	01db      	lsls	r3, r3, #7
 8007200:	4413      	add	r3, r2
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f023 0307 	bic.w	r3, r3, #7
 800720c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	4313      	orrs	r3, r2
 8007216:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f023 0318 	bic.w	r3, r3, #24
 800721e:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	4313      	orrs	r3, r2
 8007228:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	3301      	adds	r3, #1
 8007232:	01db      	lsls	r3, r3, #7
 8007234:	4413      	add	r3, r2
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6819      	ldr	r1, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	01db      	lsls	r3, r3, #7
 8007246:	440b      	add	r3, r1
 8007248:	3394      	adds	r3, #148	@ 0x94
 800724a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6819      	ldr	r1, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	01db      	lsls	r3, r3, #7
 8007258:	440b      	add	r3, r1
 800725a:	3398      	adds	r3, #152	@ 0x98
 800725c:	601a      	str	r2, [r3, #0]
}
 800725e:	bf00      	nop
 8007260:	371c      	adds	r7, #28
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 800726a:	b480      	push	{r7}
 800726c:	b087      	sub	sp, #28
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	01db      	lsls	r3, r3, #7
 800727e:	4413      	add	r3, r2
 8007280:	33ec      	adds	r3, #236	@ 0xec
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f023 0310 	bic.w	r3, r3, #16
 800728c:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	4313      	orrs	r3, r2
 8007298:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80072a0:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072b2:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80072c4:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d11a      	bne.n	800730e <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f023 0304 	bic.w	r3, r3, #4
 80072de:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f023 0302 	bic.w	r3, r3, #2
 80072f0:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f023 0301 	bic.w	r3, r3, #1
 8007302:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	4313      	orrs	r3, r2
 800730c:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	01db      	lsls	r3, r3, #7
 8007316:	4413      	add	r3, r2
 8007318:	33ec      	adds	r3, #236	@ 0xec
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	601a      	str	r2, [r3, #0]

}
 800731e:	bf00      	nop
 8007320:	371c      	adds	r7, #28
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
	...

0800732c <HRTIM_GetDMAHandleFromTimerIdx>:
  return dma_request;
}

static DMA_HandleTypeDef * HRTIM_GetDMAHandleFromTimerIdx(const HRTIM_HandleTypeDef * hhrtim,
                                                          uint32_t TimerIdx)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  DMA_HandleTypeDef * hdma = (DMA_HandleTypeDef *)NULL;
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]

  switch (TimerIdx)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b06      	cmp	r3, #6
 800733e:	d834      	bhi.n	80073aa <HRTIM_GetDMAHandleFromTimerIdx+0x7e>
 8007340:	a201      	add	r2, pc, #4	@ (adr r2, 8007348 <HRTIM_GetDMAHandleFromTimerIdx+0x1c>)
 8007342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007346:	bf00      	nop
 8007348:	0800736f 	.word	0x0800736f
 800734c:	08007379 	.word	0x08007379
 8007350:	08007383 	.word	0x08007383
 8007354:	0800738d 	.word	0x0800738d
 8007358:	08007397 	.word	0x08007397
 800735c:	080073a1 	.word	0x080073a1
 8007360:	08007365 	.word	0x08007365
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hdma = hhrtim->hdmaMaster;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800736a:	60fb      	str	r3, [r7, #12]
      break;
 800736c:	e01e      	b.n	80073ac <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hdma = hhrtim->hdmaTimerA;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007374:	60fb      	str	r3, [r7, #12]
      break;
 8007376:	e019      	b.n	80073ac <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hdma = hhrtim->hdmaTimerB;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800737e:	60fb      	str	r3, [r7, #12]
      break;
 8007380:	e014      	b.n	80073ac <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hdma = hhrtim->hdmaTimerC;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007388:	60fb      	str	r3, [r7, #12]
      break;
 800738a:	e00f      	b.n	80073ac <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hdma = hhrtim->hdmaTimerD;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007392:	60fb      	str	r3, [r7, #12]
      break;
 8007394:	e00a      	b.n	80073ac <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hdma = hhrtim->hdmaTimerE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800739c:	60fb      	str	r3, [r7, #12]
      break;
 800739e:	e005      	b.n	80073ac <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hdma = hhrtim->hdmaTimerF;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80073a6:	60fb      	str	r3, [r7, #12]
      break;
 80073a8:	e000      	b.n	80073ac <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  default:
    break;
 80073aa:	bf00      	nop
  }

  return hdma;
 80073ac:	68fb      	ldr	r3, [r7, #12]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop

080073bc <GetTimerIdxFromDMAHandle>:

static uint32_t GetTimerIdxFromDMAHandle(const HRTIM_HandleTypeDef * hhrtim,
                                         const DMA_HandleTypeDef * hdma)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  uint32_t timed_idx = 0xFFFFFFFFU;
 80073c6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ca:	60fb      	str	r3, [r7, #12]

  if (hdma == hhrtim->hdmaMaster)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d102      	bne.n	80073de <GetTimerIdxFromDMAHandle+0x22>
  {
    timed_idx = HRTIM_TIMERINDEX_MASTER;
 80073d8:	2306      	movs	r3, #6
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	e034      	b.n	8007448 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerA)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d102      	bne.n	80073f0 <GetTimerIdxFromDMAHandle+0x34>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_A;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	e02b      	b.n	8007448 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerB)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d102      	bne.n	8007402 <GetTimerIdxFromDMAHandle+0x46>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_B;
 80073fc:	2301      	movs	r3, #1
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	e022      	b.n	8007448 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerC)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d102      	bne.n	8007414 <GetTimerIdxFromDMAHandle+0x58>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_C;
 800740e:	2302      	movs	r3, #2
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	e019      	b.n	8007448 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerD)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	429a      	cmp	r2, r3
 800741e:	d102      	bne.n	8007426 <GetTimerIdxFromDMAHandle+0x6a>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_D;
 8007420:	2303      	movs	r3, #3
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	e010      	b.n	8007448 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerE)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	429a      	cmp	r2, r3
 8007430:	d102      	bne.n	8007438 <GetTimerIdxFromDMAHandle+0x7c>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_E;
 8007432:	2304      	movs	r3, #4
 8007434:	60fb      	str	r3, [r7, #12]
 8007436:	e007      	b.n	8007448 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerF)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	429a      	cmp	r2, r3
 8007442:	d101      	bne.n	8007448 <GetTimerIdxFromDMAHandle+0x8c>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_F;
 8007444:	2305      	movs	r3, #5
 8007446:	60fb      	str	r3, [r7, #12]
  }
  else
  {
    /* nothing to do */
  }
  return timed_idx;
 8007448:	68fb      	ldr	r3, [r7, #12]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
	...

08007458 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b06      	cmp	r3, #6
 8007466:	d85e      	bhi.n	8007526 <HRTIM_ForceRegistersUpdate+0xce>
 8007468:	a201      	add	r2, pc, #4	@ (adr r2, 8007470 <HRTIM_ForceRegistersUpdate+0x18>)
 800746a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	080074a3 	.word	0x080074a3
 8007474:	080074b9 	.word	0x080074b9
 8007478:	080074cf 	.word	0x080074cf
 800747c:	080074e5 	.word	0x080074e5
 8007480:	080074fb 	.word	0x080074fb
 8007484:	08007511 	.word	0x08007511
 8007488:	0800748d 	.word	0x0800748d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f042 0201 	orr.w	r2, r2, #1
 800749c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80074a0:	e042      	b.n	8007528 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f042 0202 	orr.w	r2, r2, #2
 80074b2:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80074b6:	e037      	b.n	8007528 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f042 0204 	orr.w	r2, r2, #4
 80074c8:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80074cc:	e02c      	b.n	8007528 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0208 	orr.w	r2, r2, #8
 80074de:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80074e2:	e021      	b.n	8007528 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f042 0210 	orr.w	r2, r2, #16
 80074f4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80074f8:	e016      	b.n	8007528 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 0220 	orr.w	r2, r2, #32
 800750a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800750e:	e00b      	b.n	8007528 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007520:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8007524:	e000      	b.n	8007528 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8007526:	bf00      	nop
  }
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HRTIM_DMAMasterCplt>:
  * @brief  DMA callback invoked upon master timer related DMA request completion
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void HRTIM_DMAMasterCplt(DMA_HandleTypeDef *hdma)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007540:	60fb      	str	r3, [r7, #12]

  if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP1) != (uint32_t)RESET)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d004      	beq.n	800755a <HRTIM_DMAMasterCplt+0x26>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8007550:	2106      	movs	r1, #6
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f7ff fd8c 	bl	8007070 <HAL_HRTIM_Compare1EventCallback>
  }
  else
  {
    /* nothing to do */
  }
}
 8007558:	e045      	b.n	80075e6 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP2) != (uint32_t)RESET)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d004      	beq.n	8007572 <HRTIM_DMAMasterCplt+0x3e>
    HAL_HRTIM_Compare2EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8007568:	2106      	movs	r1, #6
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f7ff fd8b 	bl	8007086 <HAL_HRTIM_Compare2EventCallback>
}
 8007570:	e039      	b.n	80075e6 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP3) != (uint32_t)RESET)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d004      	beq.n	800758a <HRTIM_DMAMasterCplt+0x56>
    HAL_HRTIM_Compare3EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8007580:	2106      	movs	r1, #6
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f7ff fd8a 	bl	800709c <HAL_HRTIM_Compare3EventCallback>
}
 8007588:	e02d      	b.n	80075e6 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP4) != (uint32_t)RESET)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d004      	beq.n	80075a2 <HRTIM_DMAMasterCplt+0x6e>
    HAL_HRTIM_Compare4EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8007598:	2106      	movs	r1, #6
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f7ff fd89 	bl	80070b2 <HAL_HRTIM_Compare4EventCallback>
}
 80075a0:	e021      	b.n	80075e6 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_SYNC) != (uint32_t)RESET)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <HRTIM_DMAMasterCplt+0x84>
    HAL_HRTIM_SynchronizationEventCallback(hrtim);
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f7ff fd3d 	bl	8007030 <HAL_HRTIM_SynchronizationEventCallback>
}
 80075b6:	e016      	b.n	80075e6 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MUPD) != (uint32_t)RESET)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d004      	beq.n	80075d0 <HRTIM_DMAMasterCplt+0x9c>
    HAL_HRTIM_RegistersUpdateCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 80075c6:	2106      	movs	r1, #6
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f7ff fd3b 	bl	8007044 <HAL_HRTIM_RegistersUpdateCallback>
}
 80075ce:	e00a      	b.n	80075e6 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MREP) != (uint32_t)RESET)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <HRTIM_DMAMasterCplt+0xb2>
    HAL_HRTIM_RepetitionEventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 80075de:	2106      	movs	r1, #6
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f7ff fd3a 	bl	800705a <HAL_HRTIM_RepetitionEventCallback>
}
 80075e6:	bf00      	nop
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HRTIM_DMATimerxCplt>:
  * @brief  DMA callback invoked upon timer A..F related DMA request completion
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void HRTIM_DMATimerxCplt(DMA_HandleTypeDef *hdma)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b084      	sub	sp, #16
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;

  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fa:	60fb      	str	r3, [r7, #12]

  timer_idx = (uint8_t)GetTimerIdxFromDMAHandle(hrtim, hdma);
 80075fc:	6879      	ldr	r1, [r7, #4]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7ff fedc 	bl	80073bc <GetTimerIdxFromDMAHandle>
 8007604:	4603      	mov	r3, r0
 8007606:	72fb      	strb	r3, [r7, #11]

  if ( !IS_HRTIM_TIMING_UNIT(timer_idx) ) {return;}
 8007608:	7afb      	ldrb	r3, [r7, #11]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00f      	beq.n	800762e <HRTIM_DMATimerxCplt+0x40>
 800760e:	7afb      	ldrb	r3, [r7, #11]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d00c      	beq.n	800762e <HRTIM_DMATimerxCplt+0x40>
 8007614:	7afb      	ldrb	r3, [r7, #11]
 8007616:	2b02      	cmp	r3, #2
 8007618:	d009      	beq.n	800762e <HRTIM_DMATimerxCplt+0x40>
 800761a:	7afb      	ldrb	r3, [r7, #11]
 800761c:	2b03      	cmp	r3, #3
 800761e:	d006      	beq.n	800762e <HRTIM_DMATimerxCplt+0x40>
 8007620:	7afb      	ldrb	r3, [r7, #11]
 8007622:	2b04      	cmp	r3, #4
 8007624:	d003      	beq.n	800762e <HRTIM_DMATimerxCplt+0x40>
 8007626:	7afb      	ldrb	r3, [r7, #11]
 8007628:	2b05      	cmp	r3, #5
 800762a:	f040 80ee 	bne.w	800780a <HRTIM_DMATimerxCplt+0x21c>

  if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP1) != (uint32_t)RESET)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	7afb      	ldrb	r3, [r7, #11]
 8007634:	01db      	lsls	r3, r3, #7
 8007636:	4413      	add	r3, r2
 8007638:	338c      	adds	r3, #140	@ 0x8c
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d005      	beq.n	8007650 <HRTIM_DMATimerxCplt+0x62>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, timer_idx);
 8007644:	7afb      	ldrb	r3, [r7, #11]
 8007646:	4619      	mov	r1, r3
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f7ff fd11 	bl	8007070 <HAL_HRTIM_Compare1EventCallback>
 800764e:	e0dd      	b.n	800780c <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP2) != (uint32_t)RESET)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	7afb      	ldrb	r3, [r7, #11]
 8007656:	01db      	lsls	r3, r3, #7
 8007658:	4413      	add	r3, r2
 800765a:	338c      	adds	r3, #140	@ 0x8c
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d005      	beq.n	8007672 <HRTIM_DMATimerxCplt+0x84>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare2EventCallback(hrtim, timer_idx);
 8007666:	7afb      	ldrb	r3, [r7, #11]
 8007668:	4619      	mov	r1, r3
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7ff fd0b 	bl	8007086 <HAL_HRTIM_Compare2EventCallback>
 8007670:	e0cc      	b.n	800780c <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP3) != (uint32_t)RESET)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	7afb      	ldrb	r3, [r7, #11]
 8007678:	01db      	lsls	r3, r3, #7
 800767a:	4413      	add	r3, r2
 800767c:	338c      	adds	r3, #140	@ 0x8c
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <HRTIM_DMATimerxCplt+0xa6>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare3EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare3EventCallback(hrtim, timer_idx);
 8007688:	7afb      	ldrb	r3, [r7, #11]
 800768a:	4619      	mov	r1, r3
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f7ff fd05 	bl	800709c <HAL_HRTIM_Compare3EventCallback>
 8007692:	e0bb      	b.n	800780c <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP4) != (uint32_t)RESET)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	01db      	lsls	r3, r3, #7
 800769c:	4413      	add	r3, r2
 800769e:	338c      	adds	r3, #140	@ 0x8c
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d005      	beq.n	80076b6 <HRTIM_DMATimerxCplt+0xc8>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare4EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare4EventCallback(hrtim, timer_idx);
 80076aa:	7afb      	ldrb	r3, [r7, #11]
 80076ac:	4619      	mov	r1, r3
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f7ff fcff 	bl	80070b2 <HAL_HRTIM_Compare4EventCallback>
 80076b4:	e0aa      	b.n	800780c <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_UPD) != (uint32_t)RESET)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	7afb      	ldrb	r3, [r7, #11]
 80076bc:	01db      	lsls	r3, r3, #7
 80076be:	4413      	add	r3, r2
 80076c0:	338c      	adds	r3, #140	@ 0x8c
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d005      	beq.n	80076d8 <HRTIM_DMATimerxCplt+0xea>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->RegistersUpdateCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RegistersUpdateCallback(hrtim, timer_idx);
 80076cc:	7afb      	ldrb	r3, [r7, #11]
 80076ce:	4619      	mov	r1, r3
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f7ff fcb7 	bl	8007044 <HAL_HRTIM_RegistersUpdateCallback>
 80076d6:	e099      	b.n	800780c <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT1) != (uint32_t)RESET)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	7afb      	ldrb	r3, [r7, #11]
 80076de:	01db      	lsls	r3, r3, #7
 80076e0:	4413      	add	r3, r2
 80076e2:	338c      	adds	r3, #140	@ 0x8c
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d005      	beq.n	80076fa <HRTIM_DMATimerxCplt+0x10c>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Capture1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture1EventCallback(hrtim, timer_idx);
 80076ee:	7afb      	ldrb	r3, [r7, #11]
 80076f0:	4619      	mov	r1, r3
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f7ff fce8 	bl	80070c8 <HAL_HRTIM_Capture1EventCallback>
 80076f8:	e088      	b.n	800780c <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT2) != (uint32_t)RESET)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	7afb      	ldrb	r3, [r7, #11]
 8007700:	01db      	lsls	r3, r3, #7
 8007702:	4413      	add	r3, r2
 8007704:	338c      	adds	r3, #140	@ 0x8c
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <HRTIM_DMATimerxCplt+0x12e>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Capture2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture2EventCallback(hrtim, timer_idx);
 8007710:	7afb      	ldrb	r3, [r7, #11]
 8007712:	4619      	mov	r1, r3
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f7ff fce2 	bl	80070de <HAL_HRTIM_Capture2EventCallback>
 800771a:	e077      	b.n	800780c <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET1) != (uint32_t)RESET)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	7afb      	ldrb	r3, [r7, #11]
 8007722:	01db      	lsls	r3, r3, #7
 8007724:	4413      	add	r3, r2
 8007726:	338c      	adds	r3, #140	@ 0x8c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d005      	beq.n	800773e <HRTIM_DMATimerxCplt+0x150>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output1SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1SetCallback(hrtim, timer_idx);
 8007732:	7afb      	ldrb	r3, [r7, #11]
 8007734:	4619      	mov	r1, r3
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f7ff fcf2 	bl	8007120 <HAL_HRTIM_Output1SetCallback>
 800773c:	e066      	b.n	800780c <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST1) != (uint32_t)RESET)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	7afb      	ldrb	r3, [r7, #11]
 8007744:	01db      	lsls	r3, r3, #7
 8007746:	4413      	add	r3, r2
 8007748:	338c      	adds	r3, #140	@ 0x8c
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d005      	beq.n	8007760 <HRTIM_DMATimerxCplt+0x172>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output1ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1ResetCallback(hrtim, timer_idx);
 8007754:	7afb      	ldrb	r3, [r7, #11]
 8007756:	4619      	mov	r1, r3
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7ff fcec 	bl	8007136 <HAL_HRTIM_Output1ResetCallback>
 800775e:	e055      	b.n	800780c <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET2) != (uint32_t)RESET)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	7afb      	ldrb	r3, [r7, #11]
 8007766:	01db      	lsls	r3, r3, #7
 8007768:	4413      	add	r3, r2
 800776a:	338c      	adds	r3, #140	@ 0x8c
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d005      	beq.n	8007782 <HRTIM_DMATimerxCplt+0x194>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output2SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2SetCallback(hrtim, timer_idx);
 8007776:	7afb      	ldrb	r3, [r7, #11]
 8007778:	4619      	mov	r1, r3
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f7ff fce6 	bl	800714c <HAL_HRTIM_Output2SetCallback>
 8007780:	e044      	b.n	800780c <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST2) != (uint32_t)RESET)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	7afb      	ldrb	r3, [r7, #11]
 8007788:	01db      	lsls	r3, r3, #7
 800778a:	4413      	add	r3, r2
 800778c:	338c      	adds	r3, #140	@ 0x8c
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d005      	beq.n	80077a4 <HRTIM_DMATimerxCplt+0x1b6>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output2ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2ResetCallback(hrtim, timer_idx);
 8007798:	7afb      	ldrb	r3, [r7, #11]
 800779a:	4619      	mov	r1, r3
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f7ff fce0 	bl	8007162 <HAL_HRTIM_Output2ResetCallback>
 80077a2:	e033      	b.n	800780c <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST) != (uint32_t)RESET)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	7afb      	ldrb	r3, [r7, #11]
 80077aa:	01db      	lsls	r3, r3, #7
 80077ac:	4413      	add	r3, r2
 80077ae:	338c      	adds	r3, #140	@ 0x8c
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d005      	beq.n	80077c6 <HRTIM_DMATimerxCplt+0x1d8>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->CounterResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_CounterResetCallback(hrtim, timer_idx);
 80077ba:	7afb      	ldrb	r3, [r7, #11]
 80077bc:	4619      	mov	r1, r3
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f7ff fca3 	bl	800710a <HAL_HRTIM_CounterResetCallback>
 80077c4:	e022      	b.n	800780c <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_DLYPRT) != (uint32_t)RESET)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	7afb      	ldrb	r3, [r7, #11]
 80077cc:	01db      	lsls	r3, r3, #7
 80077ce:	4413      	add	r3, r2
 80077d0:	338c      	adds	r3, #140	@ 0x8c
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <HRTIM_DMATimerxCplt+0x1fa>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->DelayedProtectionCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_DelayedProtectionCallback(hrtim, timer_idx);
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	4619      	mov	r1, r3
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f7ff fc87 	bl	80070f4 <HAL_HRTIM_DelayedProtectionCallback>
 80077e6:	e011      	b.n	800780c <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_REP) != (uint32_t)RESET)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	7afb      	ldrb	r3, [r7, #11]
 80077ee:	01db      	lsls	r3, r3, #7
 80077f0:	4413      	add	r3, r2
 80077f2:	338c      	adds	r3, #140	@ 0x8c
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d006      	beq.n	800780c <HRTIM_DMATimerxCplt+0x21e>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->RepetitionEventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RepetitionEventCallback(hrtim, timer_idx);
 80077fe:	7afb      	ldrb	r3, [r7, #11]
 8007800:	4619      	mov	r1, r3
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f7ff fc29 	bl	800705a <HAL_HRTIM_RepetitionEventCallback>
 8007808:	e000      	b.n	800780c <HRTIM_DMATimerxCplt+0x21e>
  if ( !IS_HRTIM_TIMING_UNIT(timer_idx) ) {return;}
 800780a:	bf00      	nop
  }
  else
  {
    /* nothing to do */
  }
}
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <HRTIM_DMAError>:
* @brief  DMA error callback
* @param  hdma pointer to DMA handle.
* @retval None
*/
static void HRTIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->ErrorCallback(hrtim);
#else
  HAL_HRTIM_ErrorCallback(hrtim);
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f7ff fca9 	bl	8007178 <HAL_HRTIM_ErrorCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
}
 8007826:	bf00      	nop
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
	...

08007830 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e0c9      	b.n	80079d6 <HAL_PCD_Init+0x1a6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a66      	ldr	r2, [pc, #408]	@ (80079e0 <HAL_PCD_Init+0x1b0>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <HAL_PCD_Init+0x24>
 800784c:	2187      	movs	r1, #135	@ 0x87
 800784e:	4865      	ldr	r0, [pc, #404]	@ (80079e4 <HAL_PCD_Init+0x1b4>)
 8007850:	f7fa febc 	bl	80025cc <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d106      	bne.n	800786e <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f009 f9e9 	bl	8010c40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2203      	movs	r2, #3
 8007872:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4618      	mov	r0, r3
 800787c:	f004 fec1 	bl	800c602 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007880:	2300      	movs	r3, #0
 8007882:	73fb      	strb	r3, [r7, #15]
 8007884:	e03e      	b.n	8007904 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007886:	7bfa      	ldrb	r2, [r7, #15]
 8007888:	6879      	ldr	r1, [r7, #4]
 800788a:	4613      	mov	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	00db      	lsls	r3, r3, #3
 8007892:	440b      	add	r3, r1
 8007894:	3311      	adds	r3, #17
 8007896:	2201      	movs	r2, #1
 8007898:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800789a:	7bfa      	ldrb	r2, [r7, #15]
 800789c:	6879      	ldr	r1, [r7, #4]
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	440b      	add	r3, r1
 80078a8:	3310      	adds	r3, #16
 80078aa:	7bfa      	ldrb	r2, [r7, #15]
 80078ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80078ae:	7bfa      	ldrb	r2, [r7, #15]
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	00db      	lsls	r3, r3, #3
 80078ba:	440b      	add	r3, r1
 80078bc:	3313      	adds	r3, #19
 80078be:	2200      	movs	r2, #0
 80078c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80078c2:	7bfa      	ldrb	r2, [r7, #15]
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	440b      	add	r3, r1
 80078d0:	3320      	adds	r3, #32
 80078d2:	2200      	movs	r2, #0
 80078d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80078d6:	7bfa      	ldrb	r2, [r7, #15]
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	4613      	mov	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	00db      	lsls	r3, r3, #3
 80078e2:	440b      	add	r3, r1
 80078e4:	3324      	adds	r3, #36	@ 0x24
 80078e6:	2200      	movs	r2, #0
 80078e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	4613      	mov	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	00db      	lsls	r3, r3, #3
 80078f8:	440b      	add	r3, r1
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
 8007900:	3301      	adds	r3, #1
 8007902:	73fb      	strb	r3, [r7, #15]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	791b      	ldrb	r3, [r3, #4]
 8007908:	7bfa      	ldrb	r2, [r7, #15]
 800790a:	429a      	cmp	r2, r3
 800790c:	d3bb      	bcc.n	8007886 <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800790e:	2300      	movs	r3, #0
 8007910:	73fb      	strb	r3, [r7, #15]
 8007912:	e044      	b.n	800799e <HAL_PCD_Init+0x16e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007914:	7bfa      	ldrb	r2, [r7, #15]
 8007916:	6879      	ldr	r1, [r7, #4]
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	00db      	lsls	r3, r3, #3
 8007920:	440b      	add	r3, r1
 8007922:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8007926:	2200      	movs	r2, #0
 8007928:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800792a:	7bfa      	ldrb	r2, [r7, #15]
 800792c:	6879      	ldr	r1, [r7, #4]
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	00db      	lsls	r3, r3, #3
 8007936:	440b      	add	r3, r1
 8007938:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800793c:	7bfa      	ldrb	r2, [r7, #15]
 800793e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007940:	7bfa      	ldrb	r2, [r7, #15]
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	4613      	mov	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	00db      	lsls	r3, r3, #3
 800794c:	440b      	add	r3, r1
 800794e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8007952:	2200      	movs	r2, #0
 8007954:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007956:	7bfa      	ldrb	r2, [r7, #15]
 8007958:	6879      	ldr	r1, [r7, #4]
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	00db      	lsls	r3, r3, #3
 8007962:	440b      	add	r3, r1
 8007964:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007968:	2200      	movs	r2, #0
 800796a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800796c:	7bfa      	ldrb	r2, [r7, #15]
 800796e:	6879      	ldr	r1, [r7, #4]
 8007970:	4613      	mov	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	00db      	lsls	r3, r3, #3
 8007978:	440b      	add	r3, r1
 800797a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800797e:	2200      	movs	r2, #0
 8007980:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007982:	7bfa      	ldrb	r2, [r7, #15]
 8007984:	6879      	ldr	r1, [r7, #4]
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	00db      	lsls	r3, r3, #3
 800798e:	440b      	add	r3, r1
 8007990:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	3301      	adds	r3, #1
 800799c:	73fb      	strb	r3, [r7, #15]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	791b      	ldrb	r3, [r3, #4]
 80079a2:	7bfa      	ldrb	r2, [r7, #15]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d3b5      	bcc.n	8007914 <HAL_PCD_Init+0xe4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6818      	ldr	r0, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	3304      	adds	r3, #4
 80079b0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80079b4:	f004 fe40 	bl	800c638 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	7a9b      	ldrb	r3, [r3, #10]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d102      	bne.n	80079d4 <HAL_PCD_Init+0x1a4>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 fc45 	bl	800925e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	40005c00 	.word	0x40005c00
 80079e4:	0801296c 	.word	0x0801296c

080079e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d101      	bne.n	80079fe <HAL_PCD_Start+0x16>
 80079fa:	2302      	movs	r3, #2
 80079fc:	e012      	b.n	8007a24 <HAL_PCD_Start+0x3c>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f004 fde2 	bl	800c5d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f007 f8a2 	bl	800eb5e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f007 f8a7 	bl	800eb8c <USB_ReadInterrupts>
 8007a3e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fb04 	bl	8008058 <PCD_EP_ISR_Handler>

    return;
 8007a50:	e110      	b.n	8007c74 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d013      	beq.n	8007a84 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a6e:	b292      	uxth	r2, r2
 8007a70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f009 f974 	bl	8010d62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f8fc 	bl	8007c7a <HAL_PCD_SetAddress>

    return;
 8007a82:	e0f7      	b.n	8007c74 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00c      	beq.n	8007aa8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007aa0:	b292      	uxth	r2, r2
 8007aa2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007aa6:	e0e5      	b.n	8007c74 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00c      	beq.n	8007acc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ac4:	b292      	uxth	r2, r2
 8007ac6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007aca:	e0d3      	b.n	8007c74 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d034      	beq.n	8007b40 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0204 	bic.w	r2, r2, #4
 8007ae8:	b292      	uxth	r2, r2
 8007aea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f022 0208 	bic.w	r2, r2, #8
 8007b00:	b292      	uxth	r2, r2
 8007b02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d107      	bne.n	8007b20 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007b18:	2100      	movs	r1, #0
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f009 fb14 	bl	8011148 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f009 f957 	bl	8010dd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007b38:	b292      	uxth	r2, r2
 8007b3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007b3e:	e099      	b.n	8007c74 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d027      	beq.n	8007b9a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0208 	orr.w	r2, r2, #8
 8007b5c:	b292      	uxth	r2, r2
 8007b5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b74:	b292      	uxth	r2, r2
 8007b76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f042 0204 	orr.w	r2, r2, #4
 8007b8c:	b292      	uxth	r2, r2
 8007b8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f009 f904 	bl	8010da0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007b98:	e06c      	b.n	8007c74 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d040      	beq.n	8007c26 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007bb6:	b292      	uxth	r2, r2
 8007bb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d12b      	bne.n	8007c1e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f042 0204 	orr.w	r2, r2, #4
 8007bd8:	b292      	uxth	r2, r2
 8007bda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f042 0208 	orr.w	r2, r2, #8
 8007bf0:	b292      	uxth	r2, r2
 8007bf2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	089b      	lsrs	r3, r3, #2
 8007c0a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007c14:	2101      	movs	r1, #1
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f009 fa96 	bl	8011148 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8007c1c:	e02a      	b.n	8007c74 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f009 f8be 	bl	8010da0 <HAL_PCD_SuspendCallback>
    return;
 8007c24:	e026      	b.n	8007c74 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00f      	beq.n	8007c50 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007c42:	b292      	uxth	r2, r2
 8007c44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f009 f87c 	bl	8010d46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007c4e:	e011      	b.n	8007c74 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00c      	beq.n	8007c74 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c6c:	b292      	uxth	r2, r2
 8007c6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007c72:	bf00      	nop
  }
}
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b082      	sub	sp, #8
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	460b      	mov	r3, r1
 8007c84:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d101      	bne.n	8007c94 <HAL_PCD_SetAddress+0x1a>
 8007c90:	2302      	movs	r3, #2
 8007c92:	e012      	b.n	8007cba <HAL_PCD_SetAddress+0x40>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	78fa      	ldrb	r2, [r7, #3]
 8007ca0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	4611      	mov	r1, r2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f006 ff43 	bl	800eb36 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	4608      	mov	r0, r1
 8007ccc:	4611      	mov	r1, r2
 8007cce:	461a      	mov	r2, r3
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	70fb      	strb	r3, [r7, #3]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	803b      	strh	r3, [r7, #0]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	da0e      	bge.n	8007d06 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	f003 0207 	and.w	r2, r3, #7
 8007cee:	4613      	mov	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	00db      	lsls	r3, r3, #3
 8007cf6:	3310      	adds	r3, #16
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2201      	movs	r2, #1
 8007d02:	705a      	strb	r2, [r3, #1]
 8007d04:	e00e      	b.n	8007d24 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d06:	78fb      	ldrb	r3, [r7, #3]
 8007d08:	f003 0207 	and.w	r2, r3, #7
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	f003 0307 	and.w	r3, r3, #7
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007d30:	883a      	ldrh	r2, [r7, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	78ba      	ldrb	r2, [r7, #2]
 8007d3a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007d3c:	78bb      	ldrb	r3, [r7, #2]
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d102      	bne.n	8007d48 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d101      	bne.n	8007d56 <HAL_PCD_EP_Open+0x94>
 8007d52:	2302      	movs	r3, #2
 8007d54:	e00e      	b.n	8007d74 <HAL_PCD_EP_Open+0xb2>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68f9      	ldr	r1, [r7, #12]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f004 fc85 	bl	800c674 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8007d72:	7afb      	ldrb	r3, [r7, #11]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	da0e      	bge.n	8007dae <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	f003 0207 	and.w	r2, r3, #7
 8007d96:	4613      	mov	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	00db      	lsls	r3, r3, #3
 8007d9e:	3310      	adds	r3, #16
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	4413      	add	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	705a      	strb	r2, [r3, #1]
 8007dac:	e00e      	b.n	8007dcc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dae:	78fb      	ldrb	r3, [r7, #3]
 8007db0:	f003 0207 	and.w	r2, r3, #7
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dcc:	78fb      	ldrb	r3, [r7, #3]
 8007dce:	f003 0307 	and.w	r3, r3, #7
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d101      	bne.n	8007de6 <HAL_PCD_EP_Close+0x6a>
 8007de2:	2302      	movs	r3, #2
 8007de4:	e00e      	b.n	8007e04 <HAL_PCD_EP_Close+0x88>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68f9      	ldr	r1, [r7, #12]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f005 f801 	bl	800cdfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	607a      	str	r2, [r7, #4]
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e1c:	7afb      	ldrb	r3, [r7, #11]
 8007e1e:	f003 0207 	and.w	r2, r3, #7
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	00db      	lsls	r3, r3, #3
 8007e2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	4413      	add	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2200      	movs	r2, #0
 8007e44:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e4c:	7afb      	ldrb	r3, [r7, #11]
 8007e4e:	f003 0307 	and.w	r3, r3, #7
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6979      	ldr	r1, [r7, #20]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f005 f9b9 	bl	800d1d6 <USB_EPStartXfer>

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3718      	adds	r7, #24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	460b      	mov	r3, r1
 8007e78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007e7a:	78fb      	ldrb	r3, [r7, #3]
 8007e7c:	f003 0207 	and.w	r2, r3, #7
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	4613      	mov	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	00db      	lsls	r3, r3, #3
 8007e8a:	440b      	add	r3, r1
 8007e8c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007e90:	681b      	ldr	r3, [r3, #0]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b086      	sub	sp, #24
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]
 8007eaa:	460b      	mov	r3, r1
 8007eac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007eae:	7afb      	ldrb	r3, [r7, #11]
 8007eb0:	f003 0207 	and.w	r2, r3, #7
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	3310      	adds	r3, #16
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007eea:	7afb      	ldrb	r3, [r7, #11]
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6979      	ldr	r1, [r7, #20]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f005 f96a 	bl	800d1d6 <USB_EPStartXfer>

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	f003 0307 	and.w	r3, r3, #7
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	7912      	ldrb	r2, [r2, #4]
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d901      	bls.n	8007f2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e03e      	b.n	8007fa8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	da0e      	bge.n	8007f50 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f32:	78fb      	ldrb	r3, [r7, #3]
 8007f34:	f003 0207 	and.w	r2, r3, #7
 8007f38:	4613      	mov	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	3310      	adds	r3, #16
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	4413      	add	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	705a      	strb	r2, [r3, #1]
 8007f4e:	e00c      	b.n	8007f6a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007f50:	78fa      	ldrb	r2, [r7, #3]
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	00db      	lsls	r3, r3, #3
 8007f5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	4413      	add	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	f003 0307 	and.w	r3, r3, #7
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d101      	bne.n	8007f8a <HAL_PCD_EP_SetStall+0x7e>
 8007f86:	2302      	movs	r3, #2
 8007f88:	e00e      	b.n	8007fa8 <HAL_PCD_EP_SetStall+0x9c>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68f9      	ldr	r1, [r7, #12]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f006 fccd 	bl	800e938 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	f003 030f 	and.w	r3, r3, #15
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	7912      	ldrb	r2, [r2, #4]
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d901      	bls.n	8007fce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e040      	b.n	8008050 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	da0e      	bge.n	8007ff4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fd6:	78fb      	ldrb	r3, [r7, #3]
 8007fd8:	f003 0207 	and.w	r2, r3, #7
 8007fdc:	4613      	mov	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	00db      	lsls	r3, r3, #3
 8007fe4:	3310      	adds	r3, #16
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	4413      	add	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	705a      	strb	r2, [r3, #1]
 8007ff2:	e00e      	b.n	8008012 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ff4:	78fb      	ldrb	r3, [r7, #3]
 8007ff6:	f003 0207 	and.w	r2, r3, #7
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	4413      	add	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008018:	78fb      	ldrb	r3, [r7, #3]
 800801a:	f003 0307 	and.w	r3, r3, #7
 800801e:	b2da      	uxtb	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800802a:	2b01      	cmp	r3, #1
 800802c:	d101      	bne.n	8008032 <HAL_PCD_EP_ClrStall+0x82>
 800802e:	2302      	movs	r3, #2
 8008030:	e00e      	b.n	8008050 <HAL_PCD_EP_ClrStall+0xa0>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68f9      	ldr	r1, [r7, #12]
 8008040:	4618      	mov	r0, r3
 8008042:	f006 fcca 	bl	800e9da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b096      	sub	sp, #88	@ 0x58
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008060:	e3ad      	b.n	80087be <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800806a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800806e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008072:	b2db      	uxtb	r3, r3
 8008074:	f003 030f 	and.w	r3, r3, #15
 8008078:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800807c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8008080:	2b00      	cmp	r3, #0
 8008082:	f040 816f 	bne.w	8008364 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008086:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800808a:	f003 0310 	and.w	r3, r3, #16
 800808e:	2b00      	cmp	r3, #0
 8008090:	d14c      	bne.n	800812c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	b29b      	uxth	r3, r3
 800809a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800809e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080a2:	81fb      	strh	r3, [r7, #14]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	89fb      	ldrh	r3, [r7, #14]
 80080aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3310      	adds	r3, #16
 80080ba:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	461a      	mov	r2, r3
 80080c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	00db      	lsls	r3, r3, #3
 80080ce:	4413      	add	r3, r2
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	6812      	ldr	r2, [r2, #0]
 80080d4:	4413      	add	r3, r2
 80080d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80080e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80080e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080e6:	695a      	ldr	r2, [r3, #20]
 80080e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ea:	69db      	ldr	r3, [r3, #28]
 80080ec:	441a      	add	r2, r3
 80080ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080f0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80080f2:	2100      	movs	r1, #0
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f008 fe0c 	bl	8010d12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	7b1b      	ldrb	r3, [r3, #12]
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 835c 	beq.w	80087be <PCD_EP_ISR_Handler+0x766>
 8008106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	f040 8357 	bne.w	80087be <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	7b1b      	ldrb	r3, [r3, #12]
 8008114:	b2db      	uxtb	r3, r3
 8008116:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800811a:	b2da      	uxtb	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	731a      	strb	r2, [r3, #12]
 800812a:	e348      	b.n	80087be <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008132:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800813e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008142:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008146:	2b00      	cmp	r3, #0
 8008148:	d032      	beq.n	80081b0 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008152:	b29b      	uxth	r3, r3
 8008154:	461a      	mov	r2, r3
 8008156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	4413      	add	r3, r2
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	6812      	ldr	r2, [r2, #0]
 8008162:	4413      	add	r3, r2
 8008164:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800816e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008170:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6818      	ldr	r0, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800817c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800817e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008182:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008184:	b29b      	uxth	r3, r3
 8008186:	f006 fd53 	bl	800ec30 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	b29a      	uxth	r2, r3
 8008192:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8008196:	4013      	ands	r3, r2
 8008198:	823b      	strh	r3, [r7, #16]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	8a3a      	ldrh	r2, [r7, #16]
 80081a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80081a4:	b292      	uxth	r2, r2
 80081a6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f008 fd85 	bl	8010cb8 <HAL_PCD_SetupStageCallback>
 80081ae:	e306      	b.n	80087be <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80081b0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f280 8302 	bge.w	80087be <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80081c6:	4013      	ands	r3, r2
 80081c8:	83fb      	strh	r3, [r7, #30]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	8bfa      	ldrh	r2, [r7, #30]
 80081d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80081d4:	b292      	uxth	r2, r2
 80081d6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	461a      	mov	r2, r3
 80081e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	00db      	lsls	r3, r3, #3
 80081ea:	4413      	add	r3, r2
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	6812      	ldr	r2, [r2, #0]
 80081f0:	4413      	add	r3, r2
 80081f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80081fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081fe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d019      	beq.n	800823c <PCD_EP_ISR_Handler+0x1e4>
 8008208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d015      	beq.n	800823c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6818      	ldr	r0, [r3, #0]
 8008214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008216:	6959      	ldr	r1, [r3, #20]
 8008218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800821a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800821c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800821e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008220:	b29b      	uxth	r3, r3
 8008222:	f006 fd05 	bl	800ec30 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8008226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008228:	695a      	ldr	r2, [r3, #20]
 800822a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	441a      	add	r2, r3
 8008230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008232:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008234:	2100      	movs	r1, #0
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f008 fd50 	bl	8010cdc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8008246:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800824a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800824e:	2b00      	cmp	r3, #0
 8008250:	f040 82b5 	bne.w	80087be <PCD_EP_ISR_Handler+0x766>
 8008254:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008258:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800825c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008260:	f000 82ad 	beq.w	80087be <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	61bb      	str	r3, [r7, #24]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008272:	b29b      	uxth	r3, r3
 8008274:	461a      	mov	r2, r3
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	4413      	add	r3, r2
 800827a:	61bb      	str	r3, [r7, #24]
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008282:	617b      	str	r3, [r7, #20]
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	881b      	ldrh	r3, [r3, #0]
 8008288:	b29b      	uxth	r3, r3
 800828a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800828e:	b29a      	uxth	r2, r3
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	801a      	strh	r2, [r3, #0]
 8008294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	2b3e      	cmp	r3, #62	@ 0x3e
 800829a:	d91d      	bls.n	80082d8 <PCD_EP_ISR_Handler+0x280>
 800829c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	095b      	lsrs	r3, r3, #5
 80082a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80082a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	f003 031f 	and.w	r3, r3, #31
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <PCD_EP_ISR_Handler+0x25e>
 80082b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082b2:	3b01      	subs	r3, #1
 80082b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082be:	b29b      	uxth	r3, r3
 80082c0:	029b      	lsls	r3, r3, #10
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	4313      	orrs	r3, r2
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	801a      	strh	r2, [r3, #0]
 80082d6:	e026      	b.n	8008326 <PCD_EP_ISR_Handler+0x2ce>
 80082d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10a      	bne.n	80082f6 <PCD_EP_ISR_Handler+0x29e>
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	801a      	strh	r2, [r3, #0]
 80082f4:	e017      	b.n	8008326 <PCD_EP_ISR_Handler+0x2ce>
 80082f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	085b      	lsrs	r3, r3, #1
 80082fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80082fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b00      	cmp	r3, #0
 8008308:	d002      	beq.n	8008310 <PCD_EP_ISR_Handler+0x2b8>
 800830a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800830c:	3301      	adds	r3, #1
 800830e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	b29a      	uxth	r2, r3
 8008316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008318:	b29b      	uxth	r3, r3
 800831a:	029b      	lsls	r3, r3, #10
 800831c:	b29b      	uxth	r3, r3
 800831e:	4313      	orrs	r3, r2
 8008320:	b29a      	uxth	r2, r3
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	b29b      	uxth	r3, r3
 800832e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008336:	827b      	strh	r3, [r7, #18]
 8008338:	8a7b      	ldrh	r3, [r7, #18]
 800833a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800833e:	827b      	strh	r3, [r7, #18]
 8008340:	8a7b      	ldrh	r3, [r7, #18]
 8008342:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008346:	827b      	strh	r3, [r7, #18]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	8a7b      	ldrh	r3, [r7, #18]
 800834e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008352:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800835a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800835e:	b29b      	uxth	r3, r3
 8008360:	8013      	strh	r3, [r2, #0]
 8008362:	e22c      	b.n	80087be <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	461a      	mov	r2, r3
 800836a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008378:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800837c:	2b00      	cmp	r3, #0
 800837e:	f280 80f6 	bge.w	800856e <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	b29a      	uxth	r2, r3
 8008394:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8008398:	4013      	ands	r3, r2
 800839a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	461a      	mov	r2, r3
 80083a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80083b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80083b4:	b292      	uxth	r2, r2
 80083b6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80083b8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	00db      	lsls	r3, r3, #3
 80083c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	4413      	add	r3, r2
 80083cc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80083ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083d0:	7b1b      	ldrb	r3, [r3, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d123      	bne.n	800841e <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083de:	b29b      	uxth	r3, r3
 80083e0:	461a      	mov	r2, r3
 80083e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	4413      	add	r3, r2
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	6812      	ldr	r2, [r2, #0]
 80083ee:	4413      	add	r3, r2
 80083f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083fa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80083fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 808e 	beq.w	8008524 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6818      	ldr	r0, [r3, #0]
 800840c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800840e:	6959      	ldr	r1, [r3, #20]
 8008410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008412:	88da      	ldrh	r2, [r3, #6]
 8008414:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008418:	f006 fc0a 	bl	800ec30 <USB_ReadPMA>
 800841c:	e082      	b.n	8008524 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800841e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008420:	78db      	ldrb	r3, [r3, #3]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d10a      	bne.n	800843c <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008426:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800842a:	461a      	mov	r2, r3
 800842c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f9d3 	bl	80087da <HAL_PCD_EP_DB_Receive>
 8008434:	4603      	mov	r3, r0
 8008436:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800843a:	e073      	b.n	8008524 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	461a      	mov	r2, r3
 8008442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	4413      	add	r3, r2
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	b29b      	uxth	r3, r3
 800844e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008456:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	441a      	add	r2, r3
 8008468:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800846c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008470:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008474:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008478:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800847c:	b29b      	uxth	r3, r3
 800847e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	b29b      	uxth	r3, r3
 8008492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d022      	beq.n	80084e0 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	461a      	mov	r2, r3
 80084a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	00db      	lsls	r3, r3, #3
 80084ac:	4413      	add	r3, r2
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	6812      	ldr	r2, [r2, #0]
 80084b2:	4413      	add	r3, r2
 80084b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084be:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80084c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d02c      	beq.n	8008524 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084d0:	6959      	ldr	r1, [r3, #20]
 80084d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084d4:	891a      	ldrh	r2, [r3, #8]
 80084d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80084da:	f006 fba9 	bl	800ec30 <USB_ReadPMA>
 80084de:	e021      	b.n	8008524 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	461a      	mov	r2, r3
 80084ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	00db      	lsls	r3, r3, #3
 80084f2:	4413      	add	r3, r2
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	6812      	ldr	r2, [r2, #0]
 80084f8:	4413      	add	r3, r2
 80084fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008504:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8008508:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800850c:	2b00      	cmp	r3, #0
 800850e:	d009      	beq.n	8008524 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6818      	ldr	r0, [r3, #0]
 8008514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008516:	6959      	ldr	r1, [r3, #20]
 8008518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800851a:	895a      	ldrh	r2, [r3, #10]
 800851c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008520:	f006 fb86 	bl	800ec30 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008526:	69da      	ldr	r2, [r3, #28]
 8008528:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800852c:	441a      	add	r2, r3
 800852e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008530:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8008532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008534:	695a      	ldr	r2, [r3, #20]
 8008536:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800853a:	441a      	add	r2, r3
 800853c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800853e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d005      	beq.n	8008554 <PCD_EP_ISR_Handler+0x4fc>
 8008548:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800854c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	429a      	cmp	r2, r3
 8008552:	d206      	bcs.n	8008562 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f008 fbbe 	bl	8010cdc <HAL_PCD_DataOutStageCallback>
 8008560:	e005      	b.n	800856e <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008568:	4618      	mov	r0, r3
 800856a:	f004 fe34 	bl	800d1d6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800856e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 8121 	beq.w	80087be <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800857c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	00db      	lsls	r3, r3, #3
 8008588:	3310      	adds	r3, #16
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	4413      	add	r3, r2
 800858e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	461a      	mov	r2, r3
 8008596:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80085a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085aa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	441a      	add	r2, r3
 80085bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80085c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80085cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085ce:	78db      	ldrb	r3, [r3, #3]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	f040 80a2 	bne.w	800871a <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80085d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085d8:	2200      	movs	r2, #0
 80085da:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80085dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085de:	7b1b      	ldrb	r3, [r3, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 8093 	beq.w	800870c <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80085e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80085ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d046      	beq.n	8008680 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80085f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085f4:	785b      	ldrb	r3, [r3, #1]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d126      	bne.n	8008648 <PCD_EP_ISR_Handler+0x5f0>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008608:	b29b      	uxth	r3, r3
 800860a:	461a      	mov	r2, r3
 800860c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860e:	4413      	add	r3, r2
 8008610:	627b      	str	r3, [r7, #36]	@ 0x24
 8008612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	00da      	lsls	r2, r3, #3
 8008618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861a:	4413      	add	r3, r2
 800861c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008620:	623b      	str	r3, [r7, #32]
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	b29b      	uxth	r3, r3
 8008628:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800862c:	b29a      	uxth	r2, r3
 800862e:	6a3b      	ldr	r3, [r7, #32]
 8008630:	801a      	strh	r2, [r3, #0]
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	b29b      	uxth	r3, r3
 8008638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800863c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008640:	b29a      	uxth	r2, r3
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	801a      	strh	r2, [r3, #0]
 8008646:	e061      	b.n	800870c <PCD_EP_ISR_Handler+0x6b4>
 8008648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800864a:	785b      	ldrb	r3, [r3, #1]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d15d      	bne.n	800870c <PCD_EP_ISR_Handler+0x6b4>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800865e:	b29b      	uxth	r3, r3
 8008660:	461a      	mov	r2, r3
 8008662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008664:	4413      	add	r3, r2
 8008666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	00da      	lsls	r2, r3, #3
 800866e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008670:	4413      	add	r3, r2
 8008672:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008676:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867a:	2200      	movs	r2, #0
 800867c:	801a      	strh	r2, [r3, #0]
 800867e:	e045      	b.n	800870c <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008688:	785b      	ldrb	r3, [r3, #1]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d126      	bne.n	80086dc <PCD_EP_ISR_Handler+0x684>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	637b      	str	r3, [r7, #52]	@ 0x34
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800869c:	b29b      	uxth	r3, r3
 800869e:	461a      	mov	r2, r3
 80086a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a2:	4413      	add	r3, r2
 80086a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	00da      	lsls	r2, r3, #3
 80086ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ae:	4413      	add	r3, r2
 80086b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80086b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c4:	801a      	strh	r2, [r3, #0]
 80086c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c8:	881b      	ldrh	r3, [r3, #0]
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d8:	801a      	strh	r2, [r3, #0]
 80086da:	e017      	b.n	800870c <PCD_EP_ISR_Handler+0x6b4>
 80086dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086de:	785b      	ldrb	r3, [r3, #1]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d113      	bne.n	800870c <PCD_EP_ISR_Handler+0x6b4>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	461a      	mov	r2, r3
 80086f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086f2:	4413      	add	r3, r2
 80086f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	00da      	lsls	r2, r3, #3
 80086fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086fe:	4413      	add	r3, r2
 8008700:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008704:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008708:	2200      	movs	r2, #0
 800870a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800870c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f008 fafd 	bl	8010d12 <HAL_PCD_DataInStageCallback>
 8008718:	e051      	b.n	80087be <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800871a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800871e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008722:	2b00      	cmp	r3, #0
 8008724:	d144      	bne.n	80087b0 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800872e:	b29b      	uxth	r3, r3
 8008730:	461a      	mov	r2, r3
 8008732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	4413      	add	r3, r2
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	6812      	ldr	r2, [r2, #0]
 800873e:	4413      	add	r3, r2
 8008740:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800874a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800874e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008750:	699a      	ldr	r2, [r3, #24]
 8008752:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008756:	429a      	cmp	r2, r3
 8008758:	d907      	bls.n	800876a <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800875a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800875c:	699a      	ldr	r2, [r3, #24]
 800875e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008762:	1ad2      	subs	r2, r2, r3
 8008764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008766:	619a      	str	r2, [r3, #24]
 8008768:	e002      	b.n	8008770 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800876a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800876c:	2200      	movs	r2, #0
 800876e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d106      	bne.n	8008786 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f008 fac7 	bl	8010d12 <HAL_PCD_DataInStageCallback>
 8008784:	e01b      	b.n	80087be <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008788:	695a      	ldr	r2, [r3, #20]
 800878a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800878e:	441a      	add	r2, r3
 8008790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008792:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008796:	69da      	ldr	r2, [r3, #28]
 8008798:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800879c:	441a      	add	r2, r3
 800879e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087a0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087a8:	4618      	mov	r0, r3
 80087aa:	f004 fd14 	bl	800d1d6 <USB_EPStartXfer>
 80087ae:	e006      	b.n	80087be <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80087b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80087b4:	461a      	mov	r2, r3
 80087b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f917 	bl	80089ec <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	b21b      	sxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f6ff ac49 	blt.w	8008062 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3758      	adds	r7, #88	@ 0x58
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b088      	sub	sp, #32
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	60b9      	str	r1, [r7, #8]
 80087e4:	4613      	mov	r3, r2
 80087e6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80087e8:	88fb      	ldrh	r3, [r7, #6]
 80087ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d07c      	beq.n	80088ec <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	461a      	mov	r2, r3
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	4413      	add	r3, r2
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	6812      	ldr	r2, [r2, #0]
 800880a:	4413      	add	r3, r2
 800880c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008816:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	699a      	ldr	r2, [r3, #24]
 800881c:	8b7b      	ldrh	r3, [r7, #26]
 800881e:	429a      	cmp	r2, r3
 8008820:	d306      	bcc.n	8008830 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	699a      	ldr	r2, [r3, #24]
 8008826:	8b7b      	ldrh	r3, [r7, #26]
 8008828:	1ad2      	subs	r2, r2, r3
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	619a      	str	r2, [r3, #24]
 800882e:	e002      	b.n	8008836 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2200      	movs	r2, #0
 8008834:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d123      	bne.n	8008886 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	b29b      	uxth	r3, r3
 8008850:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008858:	833b      	strh	r3, [r7, #24]
 800885a:	8b3b      	ldrh	r3, [r7, #24]
 800885c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008860:	833b      	strh	r3, [r7, #24]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	441a      	add	r2, r3
 8008870:	8b3b      	ldrh	r3, [r7, #24]
 8008872:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008876:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800887a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800887e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008882:	b29b      	uxth	r3, r3
 8008884:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008886:	88fb      	ldrh	r3, [r7, #6]
 8008888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800888c:	2b00      	cmp	r3, #0
 800888e:	d01f      	beq.n	80088d0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	461a      	mov	r2, r3
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	881b      	ldrh	r3, [r3, #0]
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088aa:	82fb      	strh	r3, [r7, #22]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	461a      	mov	r2, r3
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	441a      	add	r2, r3
 80088ba:	8afb      	ldrh	r3, [r7, #22]
 80088bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80088d0:	8b7b      	ldrh	r3, [r7, #26]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 8085 	beq.w	80089e2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6818      	ldr	r0, [r3, #0]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	6959      	ldr	r1, [r3, #20]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	891a      	ldrh	r2, [r3, #8]
 80088e4:	8b7b      	ldrh	r3, [r7, #26]
 80088e6:	f006 f9a3 	bl	800ec30 <USB_ReadPMA>
 80088ea:	e07a      	b.n	80089e2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	461a      	mov	r2, r3
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	00db      	lsls	r3, r3, #3
 80088fe:	4413      	add	r3, r2
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	6812      	ldr	r2, [r2, #0]
 8008904:	4413      	add	r3, r2
 8008906:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800890a:	881b      	ldrh	r3, [r3, #0]
 800890c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008910:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	699a      	ldr	r2, [r3, #24]
 8008916:	8b7b      	ldrh	r3, [r7, #26]
 8008918:	429a      	cmp	r2, r3
 800891a:	d306      	bcc.n	800892a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	699a      	ldr	r2, [r3, #24]
 8008920:	8b7b      	ldrh	r3, [r7, #26]
 8008922:	1ad2      	subs	r2, r2, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	619a      	str	r2, [r3, #24]
 8008928:	e002      	b.n	8008930 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2200      	movs	r2, #0
 800892e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d123      	bne.n	8008980 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	881b      	ldrh	r3, [r3, #0]
 8008948:	b29b      	uxth	r3, r3
 800894a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800894e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008952:	83fb      	strh	r3, [r7, #30]
 8008954:	8bfb      	ldrh	r3, [r7, #30]
 8008956:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800895a:	83fb      	strh	r3, [r7, #30]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	461a      	mov	r2, r3
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	441a      	add	r2, r3
 800896a:	8bfb      	ldrh	r3, [r7, #30]
 800896c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008970:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008974:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800897c:	b29b      	uxth	r3, r3
 800897e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008980:	88fb      	ldrh	r3, [r7, #6]
 8008982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008986:	2b00      	cmp	r3, #0
 8008988:	d11f      	bne.n	80089ca <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	b29b      	uxth	r3, r3
 800899c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089a4:	83bb      	strh	r3, [r7, #28]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	441a      	add	r2, r3
 80089b4:	8bbb      	ldrh	r3, [r7, #28]
 80089b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80089ca:	8b7b      	ldrh	r3, [r7, #26]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d008      	beq.n	80089e2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6818      	ldr	r0, [r3, #0]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	6959      	ldr	r1, [r3, #20]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	895a      	ldrh	r2, [r3, #10]
 80089dc:	8b7b      	ldrh	r3, [r7, #26]
 80089de:	f006 f927 	bl	800ec30 <USB_ReadPMA>
    }
  }

  return count;
 80089e2:	8b7b      	ldrh	r3, [r7, #26]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3720      	adds	r7, #32
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b0a4      	sub	sp, #144	@ 0x90
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	4613      	mov	r3, r2
 80089f8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80089fa:	88fb      	ldrh	r3, [r7, #6]
 80089fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 81db 	beq.w	8008dbc <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	461a      	mov	r2, r3
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	00db      	lsls	r3, r3, #3
 8008a18:	4413      	add	r3, r2
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	6812      	ldr	r2, [r2, #0]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a2a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	699a      	ldr	r2, [r3, #24]
 8008a32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d907      	bls.n	8008a4a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	699a      	ldr	r2, [r3, #24]
 8008a3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008a42:	1ad2      	subs	r2, r2, r3
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	619a      	str	r2, [r3, #24]
 8008a48:	e002      	b.n	8008a50 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f040 80b9 	bne.w	8008bcc <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d126      	bne.n	8008ab0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	461a      	mov	r2, r3
 8008a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a76:	4413      	add	r3, r2
 8008a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	00da      	lsls	r2, r3, #3
 8008a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a82:	4413      	add	r3, r2
 8008a84:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a98:	801a      	strh	r2, [r3, #0]
 8008a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aac:	801a      	strh	r2, [r3, #0]
 8008aae:	e01a      	b.n	8008ae6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	785b      	ldrb	r3, [r3, #1]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d116      	bne.n	8008ae6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	461a      	mov	r2, r3
 8008aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008acc:	4413      	add	r3, r2
 8008ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	00da      	lsls	r2, r3, #3
 8008ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad8:	4413      	add	r3, r2
 8008ada:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008ade:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	785b      	ldrb	r3, [r3, #1]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d126      	bne.n	8008b42 <HAL_PCD_EP_DB_Transmit+0x156>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	61fb      	str	r3, [r7, #28]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	461a      	mov	r2, r3
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	4413      	add	r3, r2
 8008b0a:	61fb      	str	r3, [r7, #28]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	00da      	lsls	r2, r3, #3
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	4413      	add	r3, r2
 8008b16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b1a:	61bb      	str	r3, [r7, #24]
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	801a      	strh	r2, [r3, #0]
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	801a      	strh	r2, [r3, #0]
 8008b40:	e017      	b.n	8008b72 <HAL_PCD_EP_DB_Transmit+0x186>
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	785b      	ldrb	r3, [r3, #1]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d113      	bne.n	8008b72 <HAL_PCD_EP_DB_Transmit+0x186>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	461a      	mov	r2, r3
 8008b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b58:	4413      	add	r3, r2
 8008b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	00da      	lsls	r2, r3, #3
 8008b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b64:	4413      	add	r3, r2
 8008b66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b6a:	623b      	str	r3, [r7, #32]
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	4619      	mov	r1, r3
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f008 f8ca 	bl	8010d12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008b7e:	88fb      	ldrh	r3, [r7, #6]
 8008b80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 82fa 	beq.w	800917e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ba4:	82fb      	strh	r3, [r7, #22]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	441a      	add	r2, r3
 8008bb4:	8afb      	ldrh	r3, [r7, #22]
 8008bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	8013      	strh	r3, [r2, #0]
 8008bca:	e2d8      	b.n	800917e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008bcc:	88fb      	ldrh	r3, [r7, #6]
 8008bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d021      	beq.n	8008c1a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	881b      	ldrh	r3, [r3, #0]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bf0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	441a      	add	r2, r3
 8008c02:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008c06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	f040 82ac 	bne.w	800917e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	695a      	ldr	r2, [r3, #20]
 8008c2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008c2e:	441a      	add	r2, r3
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	69da      	ldr	r2, [r3, #28]
 8008c38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008c3c:	441a      	add	r2, r3
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	6a1a      	ldr	r2, [r3, #32]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d30b      	bcc.n	8008c66 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	6a1a      	ldr	r2, [r3, #32]
 8008c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	621a      	str	r2, [r3, #32]
 8008c64:	e017      	b.n	8008c96 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d108      	bne.n	8008c80 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8008c6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008c72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008c7e:	e00a      	b.n	8008c96 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	6a1b      	ldr	r3, [r3, #32]
 8008c8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2200      	movs	r2, #0
 8008c94:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	785b      	ldrb	r3, [r3, #1]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d165      	bne.n	8008d6a <HAL_PCD_EP_DB_Transmit+0x37e>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	461a      	mov	r2, r3
 8008cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cb2:	4413      	add	r3, r2
 8008cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	00da      	lsls	r2, r3, #3
 8008cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd4:	801a      	strh	r2, [r3, #0]
 8008cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cda:	2b3e      	cmp	r3, #62	@ 0x3e
 8008cdc:	d91d      	bls.n	8008d1a <HAL_PCD_EP_DB_Transmit+0x32e>
 8008cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ce2:	095b      	lsrs	r3, r3, #5
 8008ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cea:	f003 031f 	and.w	r3, r3, #31
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d102      	bne.n	8008cf8 <HAL_PCD_EP_DB_Transmit+0x30c>
 8008cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfa:	881b      	ldrh	r3, [r3, #0]
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	029b      	lsls	r3, r3, #10
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	4313      	orrs	r3, r2
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d16:	801a      	strh	r2, [r3, #0]
 8008d18:	e044      	b.n	8008da4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10a      	bne.n	8008d38 <HAL_PCD_EP_DB_Transmit+0x34c>
 8008d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d24:	881b      	ldrh	r3, [r3, #0]
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d34:	801a      	strh	r2, [r3, #0]
 8008d36:	e035      	b.n	8008da4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d3c:	085b      	lsrs	r3, r3, #1
 8008d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <HAL_PCD_EP_DB_Transmit+0x366>
 8008d4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d4e:	3301      	adds	r3, #1
 8008d50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	029b      	lsls	r3, r3, #10
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	4313      	orrs	r3, r2
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d66:	801a      	strh	r2, [r3, #0]
 8008d68:	e01c      	b.n	8008da4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	785b      	ldrb	r3, [r3, #1]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d118      	bne.n	8008da4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	461a      	mov	r2, r3
 8008d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d86:	4413      	add	r3, r2
 8008d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	00da      	lsls	r2, r3, #3
 8008d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d92:	4413      	add	r3, r2
 8008d94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008d98:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008da2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6818      	ldr	r0, [r3, #0]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	6959      	ldr	r1, [r3, #20]
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	891a      	ldrh	r2, [r3, #8]
 8008db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	f005 fef9 	bl	800ebac <USB_WritePMA>
 8008dba:	e1e0      	b.n	800917e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	4413      	add	r3, r2
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	6812      	ldr	r2, [r2, #0]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008de0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	699a      	ldr	r2, [r3, #24]
 8008de8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d307      	bcc.n	8008e00 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	699a      	ldr	r2, [r3, #24]
 8008df4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008df8:	1ad2      	subs	r2, r2, r3
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	619a      	str	r2, [r3, #24]
 8008dfe:	e002      	b.n	8008e06 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	2200      	movs	r2, #0
 8008e04:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f040 80c0 	bne.w	8008f90 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	785b      	ldrb	r3, [r3, #1]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d126      	bne.n	8008e66 <HAL_PCD_EP_DB_Transmit+0x47a>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	461a      	mov	r2, r3
 8008e2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008e2c:	4413      	add	r3, r2
 8008e2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	00da      	lsls	r2, r3, #3
 8008e36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008e38:	4413      	add	r3, r2
 8008e3a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008e3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e42:	881b      	ldrh	r3, [r3, #0]
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e4e:	801a      	strh	r2, [r3, #0]
 8008e50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e62:	801a      	strh	r2, [r3, #0]
 8008e64:	e01a      	b.n	8008e9c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	785b      	ldrb	r3, [r3, #1]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d116      	bne.n	8008e9c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	461a      	mov	r2, r3
 8008e80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e82:	4413      	add	r3, r2
 8008e84:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	00da      	lsls	r2, r3, #3
 8008e8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e8e:	4413      	add	r3, r2
 8008e90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008e94:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e98:	2200      	movs	r2, #0
 8008e9a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	677b      	str	r3, [r7, #116]	@ 0x74
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	785b      	ldrb	r3, [r3, #1]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d12b      	bne.n	8008f02 <HAL_PCD_EP_DB_Transmit+0x516>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	461a      	mov	r2, r3
 8008ebc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ebe:	4413      	add	r3, r2
 8008ec0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	00da      	lsls	r2, r3, #3
 8008ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008eca:	4413      	add	r3, r2
 8008ecc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008ed0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ed8:	881b      	ldrh	r3, [r3, #0]
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ee6:	801a      	strh	r2, [r3, #0]
 8008ee8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008eec:	881b      	ldrh	r3, [r3, #0]
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008efe:	801a      	strh	r2, [r3, #0]
 8008f00:	e017      	b.n	8008f32 <HAL_PCD_EP_DB_Transmit+0x546>
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	785b      	ldrb	r3, [r3, #1]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d113      	bne.n	8008f32 <HAL_PCD_EP_DB_Transmit+0x546>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	461a      	mov	r2, r3
 8008f16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f18:	4413      	add	r3, r2
 8008f1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	00da      	lsls	r2, r3, #3
 8008f22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f24:	4413      	add	r3, r2
 8008f26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008f2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f2e:	2200      	movs	r2, #0
 8008f30:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	4619      	mov	r1, r3
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f007 feea 	bl	8010d12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008f3e:	88fb      	ldrh	r3, [r7, #6]
 8008f40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f040 811a 	bne.w	800917e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4413      	add	r3, r2
 8008f58:	881b      	ldrh	r3, [r3, #0]
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f64:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	441a      	add	r2, r3
 8008f76:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	8013      	strh	r3, [r2, #0]
 8008f8e:	e0f6      	b.n	800917e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008f90:	88fb      	ldrh	r3, [r7, #6]
 8008f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d121      	bne.n	8008fde <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fb4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	441a      	add	r2, r3
 8008fc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008fca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	f040 80ca 	bne.w	800917e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	695a      	ldr	r2, [r3, #20]
 8008fee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008ff2:	441a      	add	r2, r3
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	69da      	ldr	r2, [r3, #28]
 8008ffc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009000:	441a      	add	r2, r3
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	6a1a      	ldr	r2, [r3, #32]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	429a      	cmp	r2, r3
 8009010:	d30b      	bcc.n	800902a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	6a1a      	ldr	r2, [r3, #32]
 800901e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009022:	1ad2      	subs	r2, r2, r3
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	621a      	str	r2, [r3, #32]
 8009028:	e017      	b.n	800905a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d108      	bne.n	8009044 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8009032:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009042:	e00a      	b.n	800905a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	6a1b      	ldr	r3, [r3, #32]
 8009048:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2200      	movs	r2, #0
 8009050:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	785b      	ldrb	r3, [r3, #1]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d165      	bne.n	8009134 <HAL_PCD_EP_DB_Transmit+0x748>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009076:	b29b      	uxth	r3, r3
 8009078:	461a      	mov	r2, r3
 800907a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800907c:	4413      	add	r3, r2
 800907e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	00da      	lsls	r2, r3, #3
 8009086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009088:	4413      	add	r3, r2
 800908a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800908e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009090:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	b29b      	uxth	r3, r3
 8009096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800909a:	b29a      	uxth	r2, r3
 800909c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800909e:	801a      	strh	r2, [r3, #0]
 80090a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80090a6:	d91d      	bls.n	80090e4 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80090a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090ac:	095b      	lsrs	r3, r3, #5
 80090ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80090b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090b4:	f003 031f 	and.w	r3, r3, #31
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d102      	bne.n	80090c2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80090bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090be:	3b01      	subs	r3, #1
 80090c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80090c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090c4:	881b      	ldrh	r3, [r3, #0]
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	029b      	lsls	r3, r3, #10
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	4313      	orrs	r3, r2
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090dc:	b29a      	uxth	r2, r3
 80090de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090e0:	801a      	strh	r2, [r3, #0]
 80090e2:	e041      	b.n	8009168 <HAL_PCD_EP_DB_Transmit+0x77c>
 80090e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10a      	bne.n	8009102 <HAL_PCD_EP_DB_Transmit+0x716>
 80090ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090fe:	801a      	strh	r2, [r3, #0]
 8009100:	e032      	b.n	8009168 <HAL_PCD_EP_DB_Transmit+0x77c>
 8009102:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009106:	085b      	lsrs	r3, r3, #1
 8009108:	66bb      	str	r3, [r7, #104]	@ 0x68
 800910a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <HAL_PCD_EP_DB_Transmit+0x730>
 8009116:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009118:	3301      	adds	r3, #1
 800911a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800911c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	b29a      	uxth	r2, r3
 8009122:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009124:	b29b      	uxth	r3, r3
 8009126:	029b      	lsls	r3, r3, #10
 8009128:	b29b      	uxth	r3, r3
 800912a:	4313      	orrs	r3, r2
 800912c:	b29a      	uxth	r2, r3
 800912e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009130:	801a      	strh	r2, [r3, #0]
 8009132:	e019      	b.n	8009168 <HAL_PCD_EP_DB_Transmit+0x77c>
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	785b      	ldrb	r3, [r3, #1]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d115      	bne.n	8009168 <HAL_PCD_EP_DB_Transmit+0x77c>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009144:	b29b      	uxth	r3, r3
 8009146:	461a      	mov	r2, r3
 8009148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800914a:	4413      	add	r3, r2
 800914c:	657b      	str	r3, [r7, #84]	@ 0x54
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	00da      	lsls	r2, r3, #3
 8009154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009156:	4413      	add	r3, r2
 8009158:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800915c:	653b      	str	r3, [r7, #80]	@ 0x50
 800915e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009162:	b29a      	uxth	r2, r3
 8009164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009166:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6818      	ldr	r0, [r3, #0]
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	6959      	ldr	r1, [r3, #20]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	895a      	ldrh	r2, [r3, #10]
 8009174:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009178:	b29b      	uxth	r3, r3
 800917a:	f005 fd17 	bl	800ebac <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	b29b      	uxth	r3, r3
 8009190:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009194:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009198:	82bb      	strh	r3, [r7, #20]
 800919a:	8abb      	ldrh	r3, [r7, #20]
 800919c:	f083 0310 	eor.w	r3, r3, #16
 80091a0:	82bb      	strh	r3, [r7, #20]
 80091a2:	8abb      	ldrh	r3, [r7, #20]
 80091a4:	f083 0320 	eor.w	r3, r3, #32
 80091a8:	82bb      	strh	r3, [r7, #20]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	441a      	add	r2, r3
 80091b8:	8abb      	ldrh	r3, [r7, #20]
 80091ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3790      	adds	r7, #144	@ 0x90
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80091d8:	b480      	push	{r7}
 80091da:	b087      	sub	sp, #28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	607b      	str	r3, [r7, #4]
 80091e2:	460b      	mov	r3, r1
 80091e4:	817b      	strh	r3, [r7, #10]
 80091e6:	4613      	mov	r3, r2
 80091e8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80091ea:	897b      	ldrh	r3, [r7, #10]
 80091ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00b      	beq.n	800920e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091f6:	897b      	ldrh	r3, [r7, #10]
 80091f8:	f003 0207 	and.w	r2, r3, #7
 80091fc:	4613      	mov	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	3310      	adds	r3, #16
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	4413      	add	r3, r2
 800920a:	617b      	str	r3, [r7, #20]
 800920c:	e009      	b.n	8009222 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800920e:	897a      	ldrh	r2, [r7, #10]
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	4413      	add	r3, r2
 8009220:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8009222:	893b      	ldrh	r3, [r7, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d107      	bne.n	8009238 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2200      	movs	r2, #0
 800922c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	b29a      	uxth	r2, r3
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	80da      	strh	r2, [r3, #6]
 8009236:	e00b      	b.n	8009250 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	2201      	movs	r2, #1
 800923c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	b29a      	uxth	r2, r3
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	0c1b      	lsrs	r3, r3, #16
 800924a:	b29a      	uxth	r2, r3
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	371c      	adds	r7, #28
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800925e:	b480      	push	{r7}
 8009260:	b085      	sub	sp, #20
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009282:	b29b      	uxth	r3, r3
 8009284:	f043 0301 	orr.w	r3, r3, #1
 8009288:	b29a      	uxth	r2, r3
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009296:	b29b      	uxth	r3, r3
 8009298:	f043 0302 	orr.w	r3, r3, #2
 800929c:	b29a      	uxth	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
	...

080092b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00b      	beq.n	80092da <HAL_PWREx_ControlVoltageScaling+0x26>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092c8:	d007      	beq.n	80092da <HAL_PWREx_ControlVoltageScaling+0x26>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092d0:	d003      	beq.n	80092da <HAL_PWREx_ControlVoltageScaling+0x26>
 80092d2:	219d      	movs	r1, #157	@ 0x9d
 80092d4:	484d      	ldr	r0, [pc, #308]	@ (800940c <HAL_PWREx_ControlVoltageScaling+0x158>)
 80092d6:	f7f9 f979 	bl	80025cc <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d141      	bne.n	8009364 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80092e0:	4b4b      	ldr	r3, [pc, #300]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80092e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092ec:	d131      	bne.n	8009352 <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80092ee:	4b48      	ldr	r3, [pc, #288]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80092f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092f4:	4a46      	ldr	r2, [pc, #280]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80092f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092fa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80092fe:	4b44      	ldr	r3, [pc, #272]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009306:	4a42      	ldr	r2, [pc, #264]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009308:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800930c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800930e:	4b41      	ldr	r3, [pc, #260]	@ (8009414 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2232      	movs	r2, #50	@ 0x32
 8009314:	fb02 f303 	mul.w	r3, r2, r3
 8009318:	4a3f      	ldr	r2, [pc, #252]	@ (8009418 <HAL_PWREx_ControlVoltageScaling+0x164>)
 800931a:	fba2 2303 	umull	r2, r3, r2, r3
 800931e:	0c9b      	lsrs	r3, r3, #18
 8009320:	3301      	adds	r3, #1
 8009322:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009324:	e002      	b.n	800932c <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	3b01      	subs	r3, #1
 800932a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800932c:	4b38      	ldr	r3, [pc, #224]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009338:	d102      	bne.n	8009340 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1f2      	bne.n	8009326 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009340:	4b33      	ldr	r3, [pc, #204]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009342:	695b      	ldr	r3, [r3, #20]
 8009344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800934c:	d158      	bne.n	8009400 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e057      	b.n	8009402 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009352:	4b2f      	ldr	r3, [pc, #188]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009354:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009358:	4a2d      	ldr	r2, [pc, #180]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800935a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800935e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009362:	e04d      	b.n	8009400 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800936a:	d141      	bne.n	80093f0 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800936c:	4b28      	ldr	r3, [pc, #160]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009378:	d131      	bne.n	80093de <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800937a:	4b25      	ldr	r3, [pc, #148]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800937c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009380:	4a23      	ldr	r2, [pc, #140]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009386:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800938a:	4b21      	ldr	r3, [pc, #132]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009392:	4a1f      	ldr	r2, [pc, #124]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009394:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009398:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800939a:	4b1e      	ldr	r3, [pc, #120]	@ (8009414 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2232      	movs	r2, #50	@ 0x32
 80093a0:	fb02 f303 	mul.w	r3, r2, r3
 80093a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009418 <HAL_PWREx_ControlVoltageScaling+0x164>)
 80093a6:	fba2 2303 	umull	r2, r3, r2, r3
 80093aa:	0c9b      	lsrs	r3, r3, #18
 80093ac:	3301      	adds	r3, #1
 80093ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80093b0:	e002      	b.n	80093b8 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	3b01      	subs	r3, #1
 80093b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80093b8:	4b15      	ldr	r3, [pc, #84]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093c4:	d102      	bne.n	80093cc <HAL_PWREx_ControlVoltageScaling+0x118>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1f2      	bne.n	80093b2 <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80093cc:	4b10      	ldr	r3, [pc, #64]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093d8:	d112      	bne.n	8009400 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 80093da:	2303      	movs	r3, #3
 80093dc:	e011      	b.n	8009402 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80093de:	4b0c      	ldr	r3, [pc, #48]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80093e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093e4:	4a0a      	ldr	r2, [pc, #40]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80093e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093ea:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80093ee:	e007      	b.n	8009400 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80093f0:	4b07      	ldr	r3, [pc, #28]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80093f8:	4a05      	ldr	r2, [pc, #20]	@ (8009410 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80093fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80093fe:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	080129dc 	.word	0x080129dc
 8009410:	40007000 	.word	0x40007000
 8009414:	20000000 	.word	0x20000000
 8009418:	431bde83 	.word	0x431bde83

0800941c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800941c:	b480      	push	{r7}
 800941e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009420:	4b05      	ldr	r3, [pc, #20]	@ (8009438 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	4a04      	ldr	r2, [pc, #16]	@ (8009438 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009426:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800942a:	6093      	str	r3, [r2, #8]
}
 800942c:	bf00      	nop
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	40007000 	.word	0x40007000

0800943c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e3fc      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d022      	beq.n	800949c <HAL_RCC_OscConfig+0x60>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	2b00      	cmp	r3, #0
 8009460:	d11c      	bne.n	800949c <HAL_RCC_OscConfig+0x60>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0302 	and.w	r3, r3, #2
 800946a:	2b00      	cmp	r3, #0
 800946c:	d116      	bne.n	800949c <HAL_RCC_OscConfig+0x60>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0320 	and.w	r3, r3, #32
 8009476:	2b00      	cmp	r3, #0
 8009478:	d110      	bne.n	800949c <HAL_RCC_OscConfig+0x60>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0308 	and.w	r3, r3, #8
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10a      	bne.n	800949c <HAL_RCC_OscConfig+0x60>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 0304 	and.w	r3, r3, #4
 800948e:	2b00      	cmp	r3, #0
 8009490:	d104      	bne.n	800949c <HAL_RCC_OscConfig+0x60>
 8009492:	f240 1145 	movw	r1, #325	@ 0x145
 8009496:	4893      	ldr	r0, [pc, #588]	@ (80096e4 <HAL_RCC_OscConfig+0x2a8>)
 8009498:	f7f9 f898 	bl	80025cc <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 0301 	and.w	r3, r3, #1
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 8089 	beq.w	80095bc <HAL_RCC_OscConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00e      	beq.n	80094d0 <HAL_RCC_OscConfig+0x94>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094ba:	d009      	beq.n	80094d0 <HAL_RCC_OscConfig+0x94>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094c4:	d004      	beq.n	80094d0 <HAL_RCC_OscConfig+0x94>
 80094c6:	f240 114b 	movw	r1, #331	@ 0x14b
 80094ca:	4886      	ldr	r0, [pc, #536]	@ (80096e4 <HAL_RCC_OscConfig+0x2a8>)
 80094cc:	f7f9 f87e 	bl	80025cc <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094d0:	4b85      	ldr	r3, [pc, #532]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f003 030c 	and.w	r3, r3, #12
 80094d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80094da:	4b83      	ldr	r3, [pc, #524]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f003 0303 	and.w	r3, r3, #3
 80094e2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	2b0c      	cmp	r3, #12
 80094e8:	d102      	bne.n	80094f0 <HAL_RCC_OscConfig+0xb4>
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	2b03      	cmp	r3, #3
 80094ee:	d002      	beq.n	80094f6 <HAL_RCC_OscConfig+0xba>
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	2b08      	cmp	r3, #8
 80094f4:	d10b      	bne.n	800950e <HAL_RCC_OscConfig+0xd2>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094f6:	4b7c      	ldr	r3, [pc, #496]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d05b      	beq.n	80095ba <HAL_RCC_OscConfig+0x17e>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d157      	bne.n	80095ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e39c      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009516:	d106      	bne.n	8009526 <HAL_RCC_OscConfig+0xea>
 8009518:	4b73      	ldr	r3, [pc, #460]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a72      	ldr	r2, [pc, #456]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 800951e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	e01d      	b.n	8009562 <HAL_RCC_OscConfig+0x126>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800952e:	d10c      	bne.n	800954a <HAL_RCC_OscConfig+0x10e>
 8009530:	4b6d      	ldr	r3, [pc, #436]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a6c      	ldr	r2, [pc, #432]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 8009536:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800953a:	6013      	str	r3, [r2, #0]
 800953c:	4b6a      	ldr	r3, [pc, #424]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a69      	ldr	r2, [pc, #420]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 8009542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009546:	6013      	str	r3, [r2, #0]
 8009548:	e00b      	b.n	8009562 <HAL_RCC_OscConfig+0x126>
 800954a:	4b67      	ldr	r3, [pc, #412]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a66      	ldr	r2, [pc, #408]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 8009550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009554:	6013      	str	r3, [r2, #0]
 8009556:	4b64      	ldr	r3, [pc, #400]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a63      	ldr	r2, [pc, #396]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 800955c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009560:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d013      	beq.n	8009592 <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800956a:	f7f9 fa27 	bl	80029bc <HAL_GetTick>
 800956e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009570:	e008      	b.n	8009584 <HAL_RCC_OscConfig+0x148>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009572:	f7f9 fa23 	bl	80029bc <HAL_GetTick>
 8009576:	4602      	mov	r2, r0
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	2b64      	cmp	r3, #100	@ 0x64
 800957e:	d901      	bls.n	8009584 <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	e361      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009584:	4b58      	ldr	r3, [pc, #352]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800958c:	2b00      	cmp	r3, #0
 800958e:	d0f0      	beq.n	8009572 <HAL_RCC_OscConfig+0x136>
 8009590:	e014      	b.n	80095bc <HAL_RCC_OscConfig+0x180>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009592:	f7f9 fa13 	bl	80029bc <HAL_GetTick>
 8009596:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009598:	e008      	b.n	80095ac <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800959a:	f7f9 fa0f 	bl	80029bc <HAL_GetTick>
 800959e:	4602      	mov	r2, r0
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	2b64      	cmp	r3, #100	@ 0x64
 80095a6:	d901      	bls.n	80095ac <HAL_RCC_OscConfig+0x170>
          {
            return HAL_TIMEOUT;
 80095a8:	2303      	movs	r3, #3
 80095aa:	e34d      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80095ac:	4b4e      	ldr	r3, [pc, #312]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1f0      	bne.n	800959a <HAL_RCC_OscConfig+0x15e>
 80095b8:	e000      	b.n	80095bc <HAL_RCC_OscConfig+0x180>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 0302 	and.w	r3, r3, #2
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 8094 	beq.w	80096f2 <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d009      	beq.n	80095e6 <HAL_RCC_OscConfig+0x1aa>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095da:	d004      	beq.n	80095e6 <HAL_RCC_OscConfig+0x1aa>
 80095dc:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80095e0:	4840      	ldr	r0, [pc, #256]	@ (80096e4 <HAL_RCC_OscConfig+0x2a8>)
 80095e2:	f7f8 fff3 	bl	80025cc <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80095ec:	d904      	bls.n	80095f8 <HAL_RCC_OscConfig+0x1bc>
 80095ee:	f240 1181 	movw	r1, #385	@ 0x181
 80095f2:	483c      	ldr	r0, [pc, #240]	@ (80096e4 <HAL_RCC_OscConfig+0x2a8>)
 80095f4:	f7f8 ffea 	bl	80025cc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095f8:	4b3b      	ldr	r3, [pc, #236]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	f003 030c 	and.w	r3, r3, #12
 8009600:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009602:	4b39      	ldr	r3, [pc, #228]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	f003 0303 	and.w	r3, r3, #3
 800960a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	2b0c      	cmp	r3, #12
 8009610:	d102      	bne.n	8009618 <HAL_RCC_OscConfig+0x1dc>
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b02      	cmp	r3, #2
 8009616:	d002      	beq.n	800961e <HAL_RCC_OscConfig+0x1e2>
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	2b04      	cmp	r3, #4
 800961c:	d11f      	bne.n	800965e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800961e:	4b32      	ldr	r3, [pc, #200]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009626:	2b00      	cmp	r3, #0
 8009628:	d005      	beq.n	8009636 <HAL_RCC_OscConfig+0x1fa>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <HAL_RCC_OscConfig+0x1fa>
      {
        return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e308      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009636:	4b2c      	ldr	r3, [pc, #176]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	061b      	lsls	r3, r3, #24
 8009644:	4928      	ldr	r1, [pc, #160]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 8009646:	4313      	orrs	r3, r2
 8009648:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800964a:	4b28      	ldr	r3, [pc, #160]	@ (80096ec <HAL_RCC_OscConfig+0x2b0>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4618      	mov	r0, r3
 8009650:	f7f9 f968 	bl	8002924 <HAL_InitTick>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d04a      	beq.n	80096f0 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e2f4      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d023      	beq.n	80096ae <HAL_RCC_OscConfig+0x272>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009666:	4b20      	ldr	r3, [pc, #128]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a1f      	ldr	r2, [pc, #124]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 800966c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009672:	f7f9 f9a3 	bl	80029bc <HAL_GetTick>
 8009676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009678:	e008      	b.n	800968c <HAL_RCC_OscConfig+0x250>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800967a:	f7f9 f99f 	bl	80029bc <HAL_GetTick>
 800967e:	4602      	mov	r2, r0
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	2b02      	cmp	r3, #2
 8009686:	d901      	bls.n	800968c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8009688:	2303      	movs	r3, #3
 800968a:	e2dd      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800968c:	4b16      	ldr	r3, [pc, #88]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009694:	2b00      	cmp	r3, #0
 8009696:	d0f0      	beq.n	800967a <HAL_RCC_OscConfig+0x23e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009698:	4b13      	ldr	r3, [pc, #76]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	061b      	lsls	r3, r3, #24
 80096a6:	4910      	ldr	r1, [pc, #64]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 80096a8:	4313      	orrs	r3, r2
 80096aa:	604b      	str	r3, [r1, #4]
 80096ac:	e021      	b.n	80096f2 <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80096ae:	4b0e      	ldr	r3, [pc, #56]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a0d      	ldr	r2, [pc, #52]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 80096b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ba:	f7f9 f97f 	bl	80029bc <HAL_GetTick>
 80096be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80096c0:	e008      	b.n	80096d4 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096c2:	f7f9 f97b 	bl	80029bc <HAL_GetTick>
 80096c6:	4602      	mov	r2, r0
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d901      	bls.n	80096d4 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e2b9      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80096d4:	4b04      	ldr	r3, [pc, #16]	@ (80096e8 <HAL_RCC_OscConfig+0x2ac>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1f0      	bne.n	80096c2 <HAL_RCC_OscConfig+0x286>
 80096e0:	e007      	b.n	80096f2 <HAL_RCC_OscConfig+0x2b6>
 80096e2:	bf00      	nop
 80096e4:	08012a50 	.word	0x08012a50
 80096e8:	40021000 	.word	0x40021000
 80096ec:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80096f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 0308 	and.w	r3, r3, #8
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d049      	beq.n	8009792 <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	695b      	ldr	r3, [r3, #20]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d008      	beq.n	8009718 <HAL_RCC_OscConfig+0x2dc>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d004      	beq.n	8009718 <HAL_RCC_OscConfig+0x2dc>
 800970e:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 8009712:	48a3      	ldr	r0, [pc, #652]	@ (80099a0 <HAL_RCC_OscConfig+0x564>)
 8009714:	f7f8 ff5a 	bl	80025cc <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d01c      	beq.n	800975a <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009720:	4ba0      	ldr	r3, [pc, #640]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 8009722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009726:	4a9f      	ldr	r2, [pc, #636]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 8009728:	f043 0301 	orr.w	r3, r3, #1
 800972c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009730:	f7f9 f944 	bl	80029bc <HAL_GetTick>
 8009734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009736:	e008      	b.n	800974a <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009738:	f7f9 f940 	bl	80029bc <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	2b02      	cmp	r3, #2
 8009744:	d901      	bls.n	800974a <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e27e      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800974a:	4b96      	ldr	r3, [pc, #600]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 800974c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009750:	f003 0302 	and.w	r3, r3, #2
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0ef      	beq.n	8009738 <HAL_RCC_OscConfig+0x2fc>
 8009758:	e01b      	b.n	8009792 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800975a:	4b92      	ldr	r3, [pc, #584]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 800975c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009760:	4a90      	ldr	r2, [pc, #576]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 8009762:	f023 0301 	bic.w	r3, r3, #1
 8009766:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800976a:	f7f9 f927 	bl	80029bc <HAL_GetTick>
 800976e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009770:	e008      	b.n	8009784 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009772:	f7f9 f923 	bl	80029bc <HAL_GetTick>
 8009776:	4602      	mov	r2, r0
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	2b02      	cmp	r3, #2
 800977e:	d901      	bls.n	8009784 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8009780:	2303      	movs	r3, #3
 8009782:	e261      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009784:	4b87      	ldr	r3, [pc, #540]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 8009786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800978a:	f003 0302 	and.w	r3, r3, #2
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1ef      	bne.n	8009772 <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 0304 	and.w	r3, r3, #4
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 80b7 	beq.w	800990e <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80097a0:	2300      	movs	r3, #0
 80097a2:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00c      	beq.n	80097c6 <HAL_RCC_OscConfig+0x38a>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d008      	beq.n	80097c6 <HAL_RCC_OscConfig+0x38a>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	2b05      	cmp	r3, #5
 80097ba:	d004      	beq.n	80097c6 <HAL_RCC_OscConfig+0x38a>
 80097bc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80097c0:	4877      	ldr	r0, [pc, #476]	@ (80099a0 <HAL_RCC_OscConfig+0x564>)
 80097c2:	f7f8 ff03 	bl	80025cc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80097c6:	4b77      	ldr	r3, [pc, #476]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 80097c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <HAL_RCC_OscConfig+0x39a>
 80097d2:	2301      	movs	r3, #1
 80097d4:	e000      	b.n	80097d8 <HAL_RCC_OscConfig+0x39c>
 80097d6:	2300      	movs	r3, #0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00d      	beq.n	80097f8 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097dc:	4b71      	ldr	r3, [pc, #452]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 80097de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097e0:	4a70      	ldr	r2, [pc, #448]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 80097e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80097e8:	4b6e      	ldr	r3, [pc, #440]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 80097ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097f0:	60fb      	str	r3, [r7, #12]
 80097f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80097f4:	2301      	movs	r3, #1
 80097f6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80097f8:	4b6b      	ldr	r3, [pc, #428]	@ (80099a8 <HAL_RCC_OscConfig+0x56c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009800:	2b00      	cmp	r3, #0
 8009802:	d118      	bne.n	8009836 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009804:	4b68      	ldr	r3, [pc, #416]	@ (80099a8 <HAL_RCC_OscConfig+0x56c>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a67      	ldr	r2, [pc, #412]	@ (80099a8 <HAL_RCC_OscConfig+0x56c>)
 800980a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800980e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009810:	f7f9 f8d4 	bl	80029bc <HAL_GetTick>
 8009814:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009816:	e008      	b.n	800982a <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009818:	f7f9 f8d0 	bl	80029bc <HAL_GetTick>
 800981c:	4602      	mov	r2, r0
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	2b02      	cmp	r3, #2
 8009824:	d901      	bls.n	800982a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	e20e      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800982a:	4b5f      	ldr	r3, [pc, #380]	@ (80099a8 <HAL_RCC_OscConfig+0x56c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009832:	2b00      	cmp	r3, #0
 8009834:	d0f0      	beq.n	8009818 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d108      	bne.n	8009850 <HAL_RCC_OscConfig+0x414>
 800983e:	4b59      	ldr	r3, [pc, #356]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 8009840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009844:	4a57      	ldr	r2, [pc, #348]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 8009846:	f043 0301 	orr.w	r3, r3, #1
 800984a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800984e:	e024      	b.n	800989a <HAL_RCC_OscConfig+0x45e>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	2b05      	cmp	r3, #5
 8009856:	d110      	bne.n	800987a <HAL_RCC_OscConfig+0x43e>
 8009858:	4b52      	ldr	r3, [pc, #328]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 800985a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800985e:	4a51      	ldr	r2, [pc, #324]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 8009860:	f043 0304 	orr.w	r3, r3, #4
 8009864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009868:	4b4e      	ldr	r3, [pc, #312]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 800986a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800986e:	4a4d      	ldr	r2, [pc, #308]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 8009870:	f043 0301 	orr.w	r3, r3, #1
 8009874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009878:	e00f      	b.n	800989a <HAL_RCC_OscConfig+0x45e>
 800987a:	4b4a      	ldr	r3, [pc, #296]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 800987c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009880:	4a48      	ldr	r2, [pc, #288]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 8009882:	f023 0301 	bic.w	r3, r3, #1
 8009886:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800988a:	4b46      	ldr	r3, [pc, #280]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 800988c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009890:	4a44      	ldr	r2, [pc, #272]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 8009892:	f023 0304 	bic.w	r3, r3, #4
 8009896:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d016      	beq.n	80098d0 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098a2:	f7f9 f88b 	bl	80029bc <HAL_GetTick>
 80098a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098a8:	e00a      	b.n	80098c0 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098aa:	f7f9 f887 	bl	80029bc <HAL_GetTick>
 80098ae:	4602      	mov	r2, r0
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d901      	bls.n	80098c0 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e1c3      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098c0:	4b38      	ldr	r3, [pc, #224]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 80098c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098c6:	f003 0302 	and.w	r3, r3, #2
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d0ed      	beq.n	80098aa <HAL_RCC_OscConfig+0x46e>
 80098ce:	e015      	b.n	80098fc <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098d0:	f7f9 f874 	bl	80029bc <HAL_GetTick>
 80098d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80098d6:	e00a      	b.n	80098ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098d8:	f7f9 f870 	bl	80029bc <HAL_GetTick>
 80098dc:	4602      	mov	r2, r0
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d901      	bls.n	80098ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80098ea:	2303      	movs	r3, #3
 80098ec:	e1ac      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80098ee:	4b2d      	ldr	r3, [pc, #180]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 80098f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098f4:	f003 0302 	and.w	r3, r3, #2
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1ed      	bne.n	80098d8 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80098fc:	7ffb      	ldrb	r3, [r7, #31]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d105      	bne.n	800990e <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009902:	4b28      	ldr	r3, [pc, #160]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 8009904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009906:	4a27      	ldr	r2, [pc, #156]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 8009908:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800990c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0320 	and.w	r3, r3, #32
 8009916:	2b00      	cmp	r3, #0
 8009918:	d04f      	beq.n	80099ba <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d008      	beq.n	8009934 <HAL_RCC_OscConfig+0x4f8>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d004      	beq.n	8009934 <HAL_RCC_OscConfig+0x4f8>
 800992a:	f240 213b 	movw	r1, #571	@ 0x23b
 800992e:	481c      	ldr	r0, [pc, #112]	@ (80099a0 <HAL_RCC_OscConfig+0x564>)
 8009930:	f7f8 fe4c 	bl	80025cc <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d01c      	beq.n	8009976 <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800993c:	4b19      	ldr	r3, [pc, #100]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 800993e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009942:	4a18      	ldr	r2, [pc, #96]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 8009944:	f043 0301 	orr.w	r3, r3, #1
 8009948:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800994c:	f7f9 f836 	bl	80029bc <HAL_GetTick>
 8009950:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009952:	e008      	b.n	8009966 <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009954:	f7f9 f832 	bl	80029bc <HAL_GetTick>
 8009958:	4602      	mov	r2, r0
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	2b02      	cmp	r3, #2
 8009960:	d901      	bls.n	8009966 <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e170      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009966:	4b0f      	ldr	r3, [pc, #60]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 8009968:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800996c:	f003 0302 	and.w	r3, r3, #2
 8009970:	2b00      	cmp	r3, #0
 8009972:	d0ef      	beq.n	8009954 <HAL_RCC_OscConfig+0x518>
 8009974:	e021      	b.n	80099ba <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009976:	4b0b      	ldr	r3, [pc, #44]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 8009978:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800997c:	4a09      	ldr	r2, [pc, #36]	@ (80099a4 <HAL_RCC_OscConfig+0x568>)
 800997e:	f023 0301 	bic.w	r3, r3, #1
 8009982:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009986:	f7f9 f819 	bl	80029bc <HAL_GetTick>
 800998a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800998c:	e00e      	b.n	80099ac <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800998e:	f7f9 f815 	bl	80029bc <HAL_GetTick>
 8009992:	4602      	mov	r2, r0
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	2b02      	cmp	r3, #2
 800999a:	d907      	bls.n	80099ac <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e153      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
 80099a0:	08012a50 	.word	0x08012a50
 80099a4:	40021000 	.word	0x40021000
 80099a8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80099ac:	4b85      	ldr	r3, [pc, #532]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 80099ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80099b2:	f003 0302 	and.w	r3, r3, #2
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1e9      	bne.n	800998e <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00c      	beq.n	80099dc <HAL_RCC_OscConfig+0x5a0>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	69db      	ldr	r3, [r3, #28]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d008      	beq.n	80099dc <HAL_RCC_OscConfig+0x5a0>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d004      	beq.n	80099dc <HAL_RCC_OscConfig+0x5a0>
 80099d2:	f44f 7119 	mov.w	r1, #612	@ 0x264
 80099d6:	487c      	ldr	r0, [pc, #496]	@ (8009bc8 <HAL_RCC_OscConfig+0x78c>)
 80099d8:	f7f8 fdf8 	bl	80025cc <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	69db      	ldr	r3, [r3, #28]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f000 8130 	beq.w	8009c46 <HAL_RCC_OscConfig+0x80a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80099e6:	4b77      	ldr	r3, [pc, #476]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	f003 030c 	and.w	r3, r3, #12
 80099ee:	2b0c      	cmp	r3, #12
 80099f0:	f000 80e2 	beq.w	8009bb8 <HAL_RCC_OscConfig+0x77c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	69db      	ldr	r3, [r3, #28]
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	f040 80bd 	bne.w	8009b78 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00c      	beq.n	8009a20 <HAL_RCC_OscConfig+0x5e4>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d008      	beq.n	8009a20 <HAL_RCC_OscConfig+0x5e4>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d004      	beq.n	8009a20 <HAL_RCC_OscConfig+0x5e4>
 8009a16:	f240 216e 	movw	r1, #622	@ 0x26e
 8009a1a:	486b      	ldr	r0, [pc, #428]	@ (8009bc8 <HAL_RCC_OscConfig+0x78c>)
 8009a1c:	f7f8 fdd6 	bl	80025cc <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d003      	beq.n	8009a30 <HAL_RCC_OscConfig+0x5f4>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a2c:	2b10      	cmp	r3, #16
 8009a2e:	d904      	bls.n	8009a3a <HAL_RCC_OscConfig+0x5fe>
 8009a30:	f240 216f 	movw	r1, #623	@ 0x26f
 8009a34:	4864      	ldr	r0, [pc, #400]	@ (8009bc8 <HAL_RCC_OscConfig+0x78c>)
 8009a36:	f7f8 fdc9 	bl	80025cc <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a3e:	2b07      	cmp	r3, #7
 8009a40:	d903      	bls.n	8009a4a <HAL_RCC_OscConfig+0x60e>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a46:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a48:	d904      	bls.n	8009a54 <HAL_RCC_OscConfig+0x618>
 8009a4a:	f44f 711c 	mov.w	r1, #624	@ 0x270
 8009a4e:	485e      	ldr	r0, [pc, #376]	@ (8009bc8 <HAL_RCC_OscConfig+0x78c>)
 8009a50:	f7f8 fdbc 	bl	80025cc <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d903      	bls.n	8009a64 <HAL_RCC_OscConfig+0x628>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a60:	2b1f      	cmp	r3, #31
 8009a62:	d904      	bls.n	8009a6e <HAL_RCC_OscConfig+0x632>
 8009a64:	f240 2171 	movw	r1, #625	@ 0x271
 8009a68:	4857      	ldr	r0, [pc, #348]	@ (8009bc8 <HAL_RCC_OscConfig+0x78c>)
 8009a6a:	f7f8 fdaf 	bl	80025cc <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d010      	beq.n	8009a98 <HAL_RCC_OscConfig+0x65c>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	d00c      	beq.n	8009a98 <HAL_RCC_OscConfig+0x65c>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a82:	2b06      	cmp	r3, #6
 8009a84:	d008      	beq.n	8009a98 <HAL_RCC_OscConfig+0x65c>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a8a:	2b08      	cmp	r3, #8
 8009a8c:	d004      	beq.n	8009a98 <HAL_RCC_OscConfig+0x65c>
 8009a8e:	f240 2172 	movw	r1, #626	@ 0x272
 8009a92:	484d      	ldr	r0, [pc, #308]	@ (8009bc8 <HAL_RCC_OscConfig+0x78c>)
 8009a94:	f7f8 fd9a 	bl	80025cc <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d010      	beq.n	8009ac2 <HAL_RCC_OscConfig+0x686>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aa4:	2b04      	cmp	r3, #4
 8009aa6:	d00c      	beq.n	8009ac2 <HAL_RCC_OscConfig+0x686>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aac:	2b06      	cmp	r3, #6
 8009aae:	d008      	beq.n	8009ac2 <HAL_RCC_OscConfig+0x686>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ab4:	2b08      	cmp	r3, #8
 8009ab6:	d004      	beq.n	8009ac2 <HAL_RCC_OscConfig+0x686>
 8009ab8:	f240 2173 	movw	r1, #627	@ 0x273
 8009abc:	4842      	ldr	r0, [pc, #264]	@ (8009bc8 <HAL_RCC_OscConfig+0x78c>)
 8009abe:	f7f8 fd85 	bl	80025cc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ac2:	4b40      	ldr	r3, [pc, #256]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a3f      	ldr	r2, [pc, #252]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 8009ac8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ace:	f7f8 ff75 	bl	80029bc <HAL_GetTick>
 8009ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ad4:	e008      	b.n	8009ae8 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ad6:	f7f8 ff71 	bl	80029bc <HAL_GetTick>
 8009ada:	4602      	mov	r2, r0
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d901      	bls.n	8009ae8 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	e0af      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ae8:	4b36      	ldr	r3, [pc, #216]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1f0      	bne.n	8009ad6 <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009af4:	4b33      	ldr	r3, [pc, #204]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 8009af6:	68da      	ldr	r2, [r3, #12]
 8009af8:	4b34      	ldr	r3, [pc, #208]	@ (8009bcc <HAL_RCC_OscConfig+0x790>)
 8009afa:	4013      	ands	r3, r2
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	6a11      	ldr	r1, [r2, #32]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009b04:	3a01      	subs	r2, #1
 8009b06:	0112      	lsls	r2, r2, #4
 8009b08:	4311      	orrs	r1, r2
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009b0e:	0212      	lsls	r2, r2, #8
 8009b10:	4311      	orrs	r1, r2
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009b16:	0852      	lsrs	r2, r2, #1
 8009b18:	3a01      	subs	r2, #1
 8009b1a:	0552      	lsls	r2, r2, #21
 8009b1c:	4311      	orrs	r1, r2
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009b22:	0852      	lsrs	r2, r2, #1
 8009b24:	3a01      	subs	r2, #1
 8009b26:	0652      	lsls	r2, r2, #25
 8009b28:	4311      	orrs	r1, r2
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009b2e:	06d2      	lsls	r2, r2, #27
 8009b30:	430a      	orrs	r2, r1
 8009b32:	4924      	ldr	r1, [pc, #144]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 8009b34:	4313      	orrs	r3, r2
 8009b36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b38:	4b22      	ldr	r3, [pc, #136]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a21      	ldr	r2, [pc, #132]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 8009b3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009b42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009b44:	4b1f      	ldr	r3, [pc, #124]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	4a1e      	ldr	r2, [pc, #120]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 8009b4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009b4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b50:	f7f8 ff34 	bl	80029bc <HAL_GetTick>
 8009b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b56:	e008      	b.n	8009b6a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b58:	f7f8 ff30 	bl	80029bc <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e06e      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b6a:	4b16      	ldr	r3, [pc, #88]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0f0      	beq.n	8009b58 <HAL_RCC_OscConfig+0x71c>
 8009b76:	e066      	b.n	8009c46 <HAL_RCC_OscConfig+0x80a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b78:	4b12      	ldr	r3, [pc, #72]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a11      	ldr	r2, [pc, #68]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 8009b7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b84:	f7f8 ff1a 	bl	80029bc <HAL_GetTick>
 8009b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b8a:	e008      	b.n	8009b9e <HAL_RCC_OscConfig+0x762>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b8c:	f7f8 ff16 	bl	80029bc <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d901      	bls.n	8009b9e <HAL_RCC_OscConfig+0x762>
          {
            return HAL_TIMEOUT;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	e054      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b9e:	4b09      	ldr	r3, [pc, #36]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1f0      	bne.n	8009b8c <HAL_RCC_OscConfig+0x750>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009baa:	4b06      	ldr	r3, [pc, #24]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 8009bac:	68da      	ldr	r2, [r3, #12]
 8009bae:	4905      	ldr	r1, [pc, #20]	@ (8009bc4 <HAL_RCC_OscConfig+0x788>)
 8009bb0:	4b07      	ldr	r3, [pc, #28]	@ (8009bd0 <HAL_RCC_OscConfig+0x794>)
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	60cb      	str	r3, [r1, #12]
 8009bb6:	e046      	b.n	8009c46 <HAL_RCC_OscConfig+0x80a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	69db      	ldr	r3, [r3, #28]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d109      	bne.n	8009bd4 <HAL_RCC_OscConfig+0x798>
      {
        return HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e041      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
 8009bc4:	40021000 	.word	0x40021000
 8009bc8:	08012a50 	.word	0x08012a50
 8009bcc:	019f800c 	.word	0x019f800c
 8009bd0:	feeefffc 	.word	0xfeeefffc
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8009c50 <HAL_RCC_OscConfig+0x814>)
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f003 0203 	and.w	r2, r3, #3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a1b      	ldr	r3, [r3, #32]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d12c      	bne.n	8009c42 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d123      	bne.n	8009c42 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d11b      	bne.n	8009c42 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d113      	bne.n	8009c42 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c24:	085b      	lsrs	r3, r3, #1
 8009c26:	3b01      	subs	r3, #1
 8009c28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d109      	bne.n	8009c42 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c38:	085b      	lsrs	r3, r3, #1
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d001      	beq.n	8009c46 <HAL_RCC_OscConfig+0x80a>
      {
        return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e000      	b.n	8009c48 <HAL_RCC_OscConfig+0x80c>
      }
    }
  }
  }

  return HAL_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3720      	adds	r7, #32
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	40021000 	.word	0x40021000

08009c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d101      	bne.n	8009c6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e1e0      	b.n	800a02e <HAL_RCC_ClockConfig+0x3da>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f003 030f 	and.w	r3, r3, #15
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d003      	beq.n	8009c80 <HAL_RCC_ClockConfig+0x2c>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b0f      	cmp	r3, #15
 8009c7e:	d904      	bls.n	8009c8a <HAL_RCC_ClockConfig+0x36>
 8009c80:	f240 310b 	movw	r1, #779	@ 0x30b
 8009c84:	4869      	ldr	r0, [pc, #420]	@ (8009e2c <HAL_RCC_ClockConfig+0x1d8>)
 8009c86:	f7f8 fca1 	bl	80025cc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d031      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0xa0>
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d02e      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0xa0>
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d02b      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0xa0>
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	d028      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0xa0>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b04      	cmp	r3, #4
 8009ca6:	d025      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0xa0>
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2b05      	cmp	r3, #5
 8009cac:	d022      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0xa0>
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2b06      	cmp	r3, #6
 8009cb2:	d01f      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0xa0>
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	2b07      	cmp	r3, #7
 8009cb8:	d01c      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0xa0>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	2b08      	cmp	r3, #8
 8009cbe:	d019      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0xa0>
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	2b09      	cmp	r3, #9
 8009cc4:	d016      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0xa0>
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	2b0a      	cmp	r3, #10
 8009cca:	d013      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0xa0>
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	2b0b      	cmp	r3, #11
 8009cd0:	d010      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0xa0>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b0c      	cmp	r3, #12
 8009cd6:	d00d      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0xa0>
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2b0d      	cmp	r3, #13
 8009cdc:	d00a      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0xa0>
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b0e      	cmp	r3, #14
 8009ce2:	d007      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0xa0>
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	2b0f      	cmp	r3, #15
 8009ce8:	d004      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0xa0>
 8009cea:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 8009cee:	484f      	ldr	r0, [pc, #316]	@ (8009e2c <HAL_RCC_ClockConfig+0x1d8>)
 8009cf0:	f7f8 fc6c 	bl	80025cc <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009cf4:	4b4e      	ldr	r3, [pc, #312]	@ (8009e30 <HAL_RCC_ClockConfig+0x1dc>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 030f 	and.w	r3, r3, #15
 8009cfc:	683a      	ldr	r2, [r7, #0]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d910      	bls.n	8009d24 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d02:	4b4b      	ldr	r3, [pc, #300]	@ (8009e30 <HAL_RCC_ClockConfig+0x1dc>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f023 020f 	bic.w	r2, r3, #15
 8009d0a:	4949      	ldr	r1, [pc, #292]	@ (8009e30 <HAL_RCC_ClockConfig+0x1dc>)
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d12:	4b47      	ldr	r3, [pc, #284]	@ (8009e30 <HAL_RCC_ClockConfig+0x1dc>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 030f 	and.w	r3, r3, #15
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d001      	beq.n	8009d24 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	e184      	b.n	800a02e <HAL_RCC_ClockConfig+0x3da>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 0301 	and.w	r3, r3, #1
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 808e 	beq.w	8009e4e <HAL_RCC_ClockConfig+0x1fa>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d00c      	beq.n	8009d54 <HAL_RCC_ClockConfig+0x100>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d008      	beq.n	8009d54 <HAL_RCC_ClockConfig+0x100>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d004      	beq.n	8009d54 <HAL_RCC_ClockConfig+0x100>
 8009d4a:	f240 3123 	movw	r1, #803	@ 0x323
 8009d4e:	4837      	ldr	r0, [pc, #220]	@ (8009e2c <HAL_RCC_ClockConfig+0x1d8>)
 8009d50:	f7f8 fc3c 	bl	80025cc <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	2b03      	cmp	r3, #3
 8009d5a:	d129      	bne.n	8009db0 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d5c:	4b35      	ldr	r3, [pc, #212]	@ (8009e34 <HAL_RCC_ClockConfig+0x1e0>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d101      	bne.n	8009d6c <HAL_RCC_ClockConfig+0x118>
      {
        return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e160      	b.n	800a02e <HAL_RCC_ClockConfig+0x3da>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009d6c:	f000 fa66 	bl	800a23c <RCC_GetSysClockFreqFromPLLSource>
 8009d70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	4a30      	ldr	r2, [pc, #192]	@ (8009e38 <HAL_RCC_ClockConfig+0x1e4>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d93f      	bls.n	8009dfa <HAL_RCC_ClockConfig+0x1a6>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8009e34 <HAL_RCC_ClockConfig+0x1e0>)
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d009      	beq.n	8009d9a <HAL_RCC_ClockConfig+0x146>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d033      	beq.n	8009dfa <HAL_RCC_ClockConfig+0x1a6>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d12f      	bne.n	8009dfa <HAL_RCC_ClockConfig+0x1a6>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009d9a:	4b26      	ldr	r3, [pc, #152]	@ (8009e34 <HAL_RCC_ClockConfig+0x1e0>)
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009da2:	4a24      	ldr	r2, [pc, #144]	@ (8009e34 <HAL_RCC_ClockConfig+0x1e0>)
 8009da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009da8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009daa:	2380      	movs	r3, #128	@ 0x80
 8009dac:	617b      	str	r3, [r7, #20]
 8009dae:	e024      	b.n	8009dfa <HAL_RCC_ClockConfig+0x1a6>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d107      	bne.n	8009dc8 <HAL_RCC_ClockConfig+0x174>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009db8:	4b1e      	ldr	r3, [pc, #120]	@ (8009e34 <HAL_RCC_ClockConfig+0x1e0>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d109      	bne.n	8009dd8 <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e132      	b.n	800a02e <HAL_RCC_ClockConfig+0x3da>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8009e34 <HAL_RCC_ClockConfig+0x1e0>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d101      	bne.n	8009dd8 <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e12a      	b.n	800a02e <HAL_RCC_ClockConfig+0x3da>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009dd8:	f000 f9ce 	bl	800a178 <HAL_RCC_GetSysClockFreq>
 8009ddc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	4a15      	ldr	r2, [pc, #84]	@ (8009e38 <HAL_RCC_ClockConfig+0x1e4>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d909      	bls.n	8009dfa <HAL_RCC_ClockConfig+0x1a6>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009de6:	4b13      	ldr	r3, [pc, #76]	@ (8009e34 <HAL_RCC_ClockConfig+0x1e0>)
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009dee:	4a11      	ldr	r2, [pc, #68]	@ (8009e34 <HAL_RCC_ClockConfig+0x1e0>)
 8009df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009df4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009df6:	2380      	movs	r3, #128	@ 0x80
 8009df8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8009e34 <HAL_RCC_ClockConfig+0x1e0>)
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	f023 0203 	bic.w	r2, r3, #3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	490b      	ldr	r1, [pc, #44]	@ (8009e34 <HAL_RCC_ClockConfig+0x1e0>)
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e0c:	f7f8 fdd6 	bl	80029bc <HAL_GetTick>
 8009e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e12:	e013      	b.n	8009e3c <HAL_RCC_ClockConfig+0x1e8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e14:	f7f8 fdd2 	bl	80029bc <HAL_GetTick>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d90a      	bls.n	8009e3c <HAL_RCC_ClockConfig+0x1e8>
      {
        return HAL_TIMEOUT;
 8009e26:	2303      	movs	r3, #3
 8009e28:	e101      	b.n	800a02e <HAL_RCC_ClockConfig+0x3da>
 8009e2a:	bf00      	nop
 8009e2c:	08012a50 	.word	0x08012a50
 8009e30:	40022000 	.word	0x40022000
 8009e34:	40021000 	.word	0x40021000
 8009e38:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e3c:	4b7e      	ldr	r3, [pc, #504]	@ (800a038 <HAL_RCC_ClockConfig+0x3e4>)
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	f003 020c 	and.w	r2, r3, #12
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d1e2      	bne.n	8009e14 <HAL_RCC_ClockConfig+0x1c0>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f003 0302 	and.w	r3, r3, #2
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d04c      	beq.n	8009ef4 <HAL_RCC_ClockConfig+0x2a0>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f003 0304 	and.w	r3, r3, #4
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d005      	beq.n	8009e72 <HAL_RCC_ClockConfig+0x21e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009e66:	4b74      	ldr	r3, [pc, #464]	@ (800a038 <HAL_RCC_ClockConfig+0x3e4>)
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	4a73      	ldr	r2, [pc, #460]	@ (800a038 <HAL_RCC_ClockConfig+0x3e4>)
 8009e6c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009e70:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 0308 	and.w	r3, r3, #8
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d007      	beq.n	8009e8e <HAL_RCC_ClockConfig+0x23a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009e7e:	4b6e      	ldr	r3, [pc, #440]	@ (800a038 <HAL_RCC_ClockConfig+0x3e4>)
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009e86:	4a6c      	ldr	r2, [pc, #432]	@ (800a038 <HAL_RCC_ClockConfig+0x3e4>)
 8009e88:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009e8c:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d024      	beq.n	8009ee0 <HAL_RCC_ClockConfig+0x28c>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	2b80      	cmp	r3, #128	@ 0x80
 8009e9c:	d020      	beq.n	8009ee0 <HAL_RCC_ClockConfig+0x28c>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	2b90      	cmp	r3, #144	@ 0x90
 8009ea4:	d01c      	beq.n	8009ee0 <HAL_RCC_ClockConfig+0x28c>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	2ba0      	cmp	r3, #160	@ 0xa0
 8009eac:	d018      	beq.n	8009ee0 <HAL_RCC_ClockConfig+0x28c>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	2bb0      	cmp	r3, #176	@ 0xb0
 8009eb4:	d014      	beq.n	8009ee0 <HAL_RCC_ClockConfig+0x28c>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ebc:	d010      	beq.n	8009ee0 <HAL_RCC_ClockConfig+0x28c>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	2bd0      	cmp	r3, #208	@ 0xd0
 8009ec4:	d00c      	beq.n	8009ee0 <HAL_RCC_ClockConfig+0x28c>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	2be0      	cmp	r3, #224	@ 0xe0
 8009ecc:	d008      	beq.n	8009ee0 <HAL_RCC_ClockConfig+0x28c>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	2bf0      	cmp	r3, #240	@ 0xf0
 8009ed4:	d004      	beq.n	8009ee0 <HAL_RCC_ClockConfig+0x28c>
 8009ed6:	f240 317a 	movw	r1, #890	@ 0x37a
 8009eda:	4858      	ldr	r0, [pc, #352]	@ (800a03c <HAL_RCC_ClockConfig+0x3e8>)
 8009edc:	f7f8 fb76 	bl	80025cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ee0:	4b55      	ldr	r3, [pc, #340]	@ (800a038 <HAL_RCC_ClockConfig+0x3e4>)
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	4952      	ldr	r1, [pc, #328]	@ (800a038 <HAL_RCC_ClockConfig+0x3e4>)
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	608b      	str	r3, [r1, #8]
 8009ef2:	e008      	b.n	8009f06 <HAL_RCC_ClockConfig+0x2b2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	2b80      	cmp	r3, #128	@ 0x80
 8009ef8:	d105      	bne.n	8009f06 <HAL_RCC_ClockConfig+0x2b2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009efa:	4b4f      	ldr	r3, [pc, #316]	@ (800a038 <HAL_RCC_ClockConfig+0x3e4>)
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	4a4e      	ldr	r2, [pc, #312]	@ (800a038 <HAL_RCC_ClockConfig+0x3e4>)
 8009f00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009f06:	4b4e      	ldr	r3, [pc, #312]	@ (800a040 <HAL_RCC_ClockConfig+0x3ec>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 030f 	and.w	r3, r3, #15
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d21d      	bcs.n	8009f50 <HAL_RCC_ClockConfig+0x2fc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f14:	4b4a      	ldr	r3, [pc, #296]	@ (800a040 <HAL_RCC_ClockConfig+0x3ec>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f023 020f 	bic.w	r2, r3, #15
 8009f1c:	4948      	ldr	r1, [pc, #288]	@ (800a040 <HAL_RCC_ClockConfig+0x3ec>)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009f24:	f7f8 fd4a 	bl	80029bc <HAL_GetTick>
 8009f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f2a:	e00a      	b.n	8009f42 <HAL_RCC_ClockConfig+0x2ee>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f2c:	f7f8 fd46 	bl	80029bc <HAL_GetTick>
 8009f30:	4602      	mov	r2, r0
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d901      	bls.n	8009f42 <HAL_RCC_ClockConfig+0x2ee>
      {
        return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e075      	b.n	800a02e <HAL_RCC_ClockConfig+0x3da>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f42:	4b3f      	ldr	r3, [pc, #252]	@ (800a040 <HAL_RCC_ClockConfig+0x3ec>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f003 030f 	and.w	r3, r3, #15
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d1ed      	bne.n	8009f2c <HAL_RCC_ClockConfig+0x2d8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 0304 	and.w	r3, r3, #4
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d025      	beq.n	8009fa8 <HAL_RCC_ClockConfig+0x354>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d018      	beq.n	8009f96 <HAL_RCC_ClockConfig+0x342>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f6c:	d013      	beq.n	8009f96 <HAL_RCC_ClockConfig+0x342>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009f76:	d00e      	beq.n	8009f96 <HAL_RCC_ClockConfig+0x342>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009f80:	d009      	beq.n	8009f96 <HAL_RCC_ClockConfig+0x342>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009f8a:	d004      	beq.n	8009f96 <HAL_RCC_ClockConfig+0x342>
 8009f8c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8009f90:	482a      	ldr	r0, [pc, #168]	@ (800a03c <HAL_RCC_ClockConfig+0x3e8>)
 8009f92:	f7f8 fb1b 	bl	80025cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f96:	4b28      	ldr	r3, [pc, #160]	@ (800a038 <HAL_RCC_ClockConfig+0x3e4>)
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	4925      	ldr	r1, [pc, #148]	@ (800a038 <HAL_RCC_ClockConfig+0x3e4>)
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0308 	and.w	r3, r3, #8
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d026      	beq.n	800a002 <HAL_RCC_ClockConfig+0x3ae>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d018      	beq.n	8009fee <HAL_RCC_ClockConfig+0x39a>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fc4:	d013      	beq.n	8009fee <HAL_RCC_ClockConfig+0x39a>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009fce:	d00e      	beq.n	8009fee <HAL_RCC_ClockConfig+0x39a>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009fd8:	d009      	beq.n	8009fee <HAL_RCC_ClockConfig+0x39a>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009fe2:	d004      	beq.n	8009fee <HAL_RCC_ClockConfig+0x39a>
 8009fe4:	f240 31a3 	movw	r1, #931	@ 0x3a3
 8009fe8:	4814      	ldr	r0, [pc, #80]	@ (800a03c <HAL_RCC_ClockConfig+0x3e8>)
 8009fea:	f7f8 faef 	bl	80025cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009fee:	4b12      	ldr	r3, [pc, #72]	@ (800a038 <HAL_RCC_ClockConfig+0x3e4>)
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	00db      	lsls	r3, r3, #3
 8009ffc:	490e      	ldr	r1, [pc, #56]	@ (800a038 <HAL_RCC_ClockConfig+0x3e4>)
 8009ffe:	4313      	orrs	r3, r2
 800a000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a002:	f000 f8b9 	bl	800a178 <HAL_RCC_GetSysClockFreq>
 800a006:	4602      	mov	r2, r0
 800a008:	4b0b      	ldr	r3, [pc, #44]	@ (800a038 <HAL_RCC_ClockConfig+0x3e4>)
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	091b      	lsrs	r3, r3, #4
 800a00e:	f003 030f 	and.w	r3, r3, #15
 800a012:	490c      	ldr	r1, [pc, #48]	@ (800a044 <HAL_RCC_ClockConfig+0x3f0>)
 800a014:	5ccb      	ldrb	r3, [r1, r3]
 800a016:	f003 031f 	and.w	r3, r3, #31
 800a01a:	fa22 f303 	lsr.w	r3, r2, r3
 800a01e:	4a0a      	ldr	r2, [pc, #40]	@ (800a048 <HAL_RCC_ClockConfig+0x3f4>)
 800a020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a022:	4b0a      	ldr	r3, [pc, #40]	@ (800a04c <HAL_RCC_ClockConfig+0x3f8>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4618      	mov	r0, r3
 800a028:	f7f8 fc7c 	bl	8002924 <HAL_InitTick>
 800a02c:	4603      	mov	r3, r0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	40021000 	.word	0x40021000
 800a03c:	08012a50 	.word	0x08012a50
 800a040:	40022000 	.word	0x40022000
 800a044:	08012c60 	.word	0x08012c60
 800a048:	20000000 	.word	0x20000000
 800a04c:	20000004 	.word	0x20000004

0800a050 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08c      	sub	sp, #48	@ 0x30
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  uint32_t mcoindex;
  uint32_t mco_gpio_index;
  GPIO_TypeDef * mco_gpio_port;

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a062:	d008      	beq.n	800a076 <HAL_RCC_MCOConfig+0x26>
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4a41      	ldr	r2, [pc, #260]	@ (800a16c <HAL_RCC_MCOConfig+0x11c>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d004      	beq.n	800a076 <HAL_RCC_MCOConfig+0x26>
 800a06c:	f240 31ea 	movw	r1, #1002	@ 0x3ea
 800a070:	483f      	ldr	r0, [pc, #252]	@ (800a170 <HAL_RCC_MCOConfig+0x120>)
 800a072:	f7f8 faab 	bl	80025cc <assert_failed>

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 800a076:	2302      	movs	r3, #2
 800a078:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a07a:	2303      	movs	r3, #3
 800a07c:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 800a07e:	2300      	movs	r3, #0
 800a080:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a088:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	0c1b      	lsrs	r3, r3, #16
 800a08e:	f003 030f 	and.w	r3, r3, #15
 800a092:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 800a096:	029b      	lsls	r3, r3, #10
 800a098:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	0c1b      	lsrs	r3, r3, #16
 800a09e:	f003 030f 	and.w	r3, r3, #15
 800a0a2:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800a0a4:	4b33      	ldr	r3, [pc, #204]	@ (800a174 <HAL_RCC_MCOConfig+0x124>)
 800a0a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0a8:	2101      	movs	r1, #1
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a0b0:	4930      	ldr	r1, [pc, #192]	@ (800a174 <HAL_RCC_MCOConfig+0x124>)
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	0d1b      	lsrs	r3, r3, #20
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800a0c4:	f107 0310 	add.w	r3, r7, #16
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0cc:	f7fb fd6e 	bl	8005bac <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 800a0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d145      	bne.n	800a162 <HAL_RCC_MCOConfig+0x112>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d014      	beq.n	800a106 <HAL_RCC_MCOConfig+0xb6>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0e2:	d010      	beq.n	800a106 <HAL_RCC_MCOConfig+0xb6>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0ea:	d00c      	beq.n	800a106 <HAL_RCC_MCOConfig+0xb6>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a0f2:	d008      	beq.n	800a106 <HAL_RCC_MCOConfig+0xb6>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0fa:	d004      	beq.n	800a106 <HAL_RCC_MCOConfig+0xb6>
 800a0fc:	f240 4102 	movw	r1, #1026	@ 0x402
 800a100:	481b      	ldr	r0, [pc, #108]	@ (800a170 <HAL_RCC_MCOConfig+0x120>)
 800a102:	f7f8 fa63 	bl	80025cc <assert_failed>
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d020      	beq.n	800a14e <HAL_RCC_MCOConfig+0xfe>
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a112:	d01c      	beq.n	800a14e <HAL_RCC_MCOConfig+0xfe>
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a11a:	d018      	beq.n	800a14e <HAL_RCC_MCOConfig+0xfe>
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a122:	d014      	beq.n	800a14e <HAL_RCC_MCOConfig+0xfe>
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a12a:	d010      	beq.n	800a14e <HAL_RCC_MCOConfig+0xfe>
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 800a132:	d00c      	beq.n	800a14e <HAL_RCC_MCOConfig+0xfe>
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 800a13a:	d008      	beq.n	800a14e <HAL_RCC_MCOConfig+0xfe>
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a142:	d004      	beq.n	800a14e <HAL_RCC_MCOConfig+0xfe>
 800a144:	f240 4103 	movw	r1, #1027	@ 0x403
 800a148:	4809      	ldr	r0, [pc, #36]	@ (800a170 <HAL_RCC_MCOConfig+0x120>)
 800a14a:	f7f8 fa3f 	bl	80025cc <assert_failed>
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 800a14e:	4b09      	ldr	r3, [pc, #36]	@ (800a174 <HAL_RCC_MCOConfig+0x124>)
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a156:	68b9      	ldr	r1, [r7, #8]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	430b      	orrs	r3, r1
 800a15c:	4905      	ldr	r1, [pc, #20]	@ (800a174 <HAL_RCC_MCOConfig+0x124>)
 800a15e:	4313      	orrs	r3, r2
 800a160:	608b      	str	r3, [r1, #8]
  }
}
 800a162:	bf00      	nop
 800a164:	3730      	adds	r7, #48	@ 0x30
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	00060400 	.word	0x00060400
 800a170:	08012a50 	.word	0x08012a50
 800a174:	40021000 	.word	0x40021000

0800a178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a178:	b480      	push	{r7}
 800a17a:	b087      	sub	sp, #28
 800a17c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a17e:	4b2c      	ldr	r3, [pc, #176]	@ (800a230 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	f003 030c 	and.w	r3, r3, #12
 800a186:	2b04      	cmp	r3, #4
 800a188:	d102      	bne.n	800a190 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a18a:	4b2a      	ldr	r3, [pc, #168]	@ (800a234 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a18c:	613b      	str	r3, [r7, #16]
 800a18e:	e047      	b.n	800a220 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a190:	4b27      	ldr	r3, [pc, #156]	@ (800a230 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	f003 030c 	and.w	r3, r3, #12
 800a198:	2b08      	cmp	r3, #8
 800a19a:	d102      	bne.n	800a1a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a19c:	4b26      	ldr	r3, [pc, #152]	@ (800a238 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a19e:	613b      	str	r3, [r7, #16]
 800a1a0:	e03e      	b.n	800a220 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a1a2:	4b23      	ldr	r3, [pc, #140]	@ (800a230 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f003 030c 	and.w	r3, r3, #12
 800a1aa:	2b0c      	cmp	r3, #12
 800a1ac:	d136      	bne.n	800a21c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a1ae:	4b20      	ldr	r3, [pc, #128]	@ (800a230 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	f003 0303 	and.w	r3, r3, #3
 800a1b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a1b8:	4b1d      	ldr	r3, [pc, #116]	@ (800a230 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	091b      	lsrs	r3, r3, #4
 800a1be:	f003 030f 	and.w	r3, r3, #15
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2b03      	cmp	r3, #3
 800a1ca:	d10c      	bne.n	800a1e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a1cc:	4a1a      	ldr	r2, [pc, #104]	@ (800a238 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1d4:	4a16      	ldr	r2, [pc, #88]	@ (800a230 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a1d6:	68d2      	ldr	r2, [r2, #12]
 800a1d8:	0a12      	lsrs	r2, r2, #8
 800a1da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a1de:	fb02 f303 	mul.w	r3, r2, r3
 800a1e2:	617b      	str	r3, [r7, #20]
      break;
 800a1e4:	e00c      	b.n	800a200 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a1e6:	4a13      	ldr	r2, [pc, #76]	@ (800a234 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ee:	4a10      	ldr	r2, [pc, #64]	@ (800a230 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a1f0:	68d2      	ldr	r2, [r2, #12]
 800a1f2:	0a12      	lsrs	r2, r2, #8
 800a1f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a1f8:	fb02 f303 	mul.w	r3, r2, r3
 800a1fc:	617b      	str	r3, [r7, #20]
      break;
 800a1fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a200:	4b0b      	ldr	r3, [pc, #44]	@ (800a230 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	0e5b      	lsrs	r3, r3, #25
 800a206:	f003 0303 	and.w	r3, r3, #3
 800a20a:	3301      	adds	r3, #1
 800a20c:	005b      	lsls	r3, r3, #1
 800a20e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a210:	697a      	ldr	r2, [r7, #20]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	fbb2 f3f3 	udiv	r3, r2, r3
 800a218:	613b      	str	r3, [r7, #16]
 800a21a:	e001      	b.n	800a220 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a21c:	2300      	movs	r3, #0
 800a21e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a220:	693b      	ldr	r3, [r7, #16]
}
 800a222:	4618      	mov	r0, r3
 800a224:	371c      	adds	r7, #28
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	40021000 	.word	0x40021000
 800a234:	00f42400 	.word	0x00f42400
 800a238:	02dc6c00 	.word	0x02dc6c00

0800a23c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b087      	sub	sp, #28
 800a240:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a242:	4b1e      	ldr	r3, [pc, #120]	@ (800a2bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	f003 0303 	and.w	r3, r3, #3
 800a24a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a24c:	4b1b      	ldr	r3, [pc, #108]	@ (800a2bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	091b      	lsrs	r3, r3, #4
 800a252:	f003 030f 	and.w	r3, r3, #15
 800a256:	3301      	adds	r3, #1
 800a258:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	2b03      	cmp	r3, #3
 800a25e:	d10c      	bne.n	800a27a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a260:	4a17      	ldr	r2, [pc, #92]	@ (800a2c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	fbb2 f3f3 	udiv	r3, r2, r3
 800a268:	4a14      	ldr	r2, [pc, #80]	@ (800a2bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a26a:	68d2      	ldr	r2, [r2, #12]
 800a26c:	0a12      	lsrs	r2, r2, #8
 800a26e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a272:	fb02 f303 	mul.w	r3, r2, r3
 800a276:	617b      	str	r3, [r7, #20]
    break;
 800a278:	e00c      	b.n	800a294 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a27a:	4a12      	ldr	r2, [pc, #72]	@ (800a2c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a282:	4a0e      	ldr	r2, [pc, #56]	@ (800a2bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a284:	68d2      	ldr	r2, [r2, #12]
 800a286:	0a12      	lsrs	r2, r2, #8
 800a288:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a28c:	fb02 f303 	mul.w	r3, r2, r3
 800a290:	617b      	str	r3, [r7, #20]
    break;
 800a292:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a294:	4b09      	ldr	r3, [pc, #36]	@ (800a2bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	0e5b      	lsrs	r3, r3, #25
 800a29a:	f003 0303 	and.w	r3, r3, #3
 800a29e:	3301      	adds	r3, #1
 800a2a0:	005b      	lsls	r3, r3, #1
 800a2a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a2a4:	697a      	ldr	r2, [r7, #20]
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a2ae:	687b      	ldr	r3, [r7, #4]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	371c      	adds	r7, #28
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	40021000 	.word	0x40021000
 800a2c0:	02dc6c00 	.word	0x02dc6c00
 800a2c4:	00f42400 	.word	0x00f42400

0800a2c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0301 	and.w	r3, r3, #1
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d175      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 0302 	and.w	r3, r3, #2
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d16f      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 0304 	and.w	r3, r3, #4
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d169      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 0308 	and.w	r3, r3, #8
 800a304:	2b00      	cmp	r3, #0
 800a306:	d163      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f003 0310 	and.w	r3, r3, #16
 800a310:	2b00      	cmp	r3, #0
 800a312:	d15d      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 0320 	and.w	r3, r3, #32
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d157      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d151      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a334:	2b00      	cmp	r3, #0
 800a336:	d14b      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a340:	2b00      	cmp	r3, #0
 800a342:	d145      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d13f      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d139      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a364:	2b00      	cmp	r3, #0
 800a366:	d133      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a370:	2b00      	cmp	r3, #0
 800a372:	d12d      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d127      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d121      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a394:	2b00      	cmp	r3, #0
 800a396:	d11b      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d115      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10f      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d109      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d103      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a3c8:	2183      	movs	r1, #131	@ 0x83
 800a3ca:	4855      	ldr	r0, [pc, #340]	@ (800a520 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a3cc:	f7f8 f8fe 	bl	80025cc <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 80b2 	beq.w	800a542 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d012      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3f2:	d00d      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3fc:	d008      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a406:	d003      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800a408:	218b      	movs	r1, #139	@ 0x8b
 800a40a:	4845      	ldr	r0, [pc, #276]	@ (800a520 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a40c:	f7f8 f8de 	bl	80025cc <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a410:	4b44      	ldr	r3, [pc, #272]	@ (800a524 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10d      	bne.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a41c:	4b41      	ldr	r3, [pc, #260]	@ (800a524 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a41e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a420:	4a40      	ldr	r2, [pc, #256]	@ (800a524 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a426:	6593      	str	r3, [r2, #88]	@ 0x58
 800a428:	4b3e      	ldr	r3, [pc, #248]	@ (800a524 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a42a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a42c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a430:	60bb      	str	r3, [r7, #8]
 800a432:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a434:	2301      	movs	r3, #1
 800a436:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a438:	4b3b      	ldr	r3, [pc, #236]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a3a      	ldr	r2, [pc, #232]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a43e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a442:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a444:	f7f8 faba 	bl	80029bc <HAL_GetTick>
 800a448:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a44a:	e009      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a44c:	f7f8 fab6 	bl	80029bc <HAL_GetTick>
 800a450:	4602      	mov	r2, r0
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	2b02      	cmp	r3, #2
 800a458:	d902      	bls.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        ret = HAL_TIMEOUT;
 800a45a:	2303      	movs	r3, #3
 800a45c:	74fb      	strb	r3, [r7, #19]
        break;
 800a45e:	e005      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a460:	4b31      	ldr	r3, [pc, #196]	@ (800a528 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d0ef      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x184>
      }
    }

    if(ret == HAL_OK)
 800a46c:	7cfb      	ldrb	r3, [r7, #19]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d15c      	bne.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x264>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a472:	4b2c      	ldr	r3, [pc, #176]	@ (800a524 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a478:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a47c:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d01e      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a488:	697a      	ldr	r2, [r7, #20]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d019      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a48e:	4b25      	ldr	r3, [pc, #148]	@ (800a524 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a498:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a49a:	4b22      	ldr	r3, [pc, #136]	@ (800a524 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a49c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4a0:	4a20      	ldr	r2, [pc, #128]	@ (800a524 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a4a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a4a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a4aa:	4b1e      	ldr	r3, [pc, #120]	@ (800a524 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a4ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4b0:	4a1c      	ldr	r2, [pc, #112]	@ (800a524 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a4b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a4ba:	4a1a      	ldr	r2, [pc, #104]	@ (800a524 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	f003 0301 	and.w	r3, r3, #1
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d016      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4cc:	f7f8 fa76 	bl	80029bc <HAL_GetTick>
 800a4d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4d2:	e00b      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4d4:	f7f8 fa72 	bl	80029bc <HAL_GetTick>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d902      	bls.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	74fb      	strb	r3, [r7, #19]
            break;
 800a4ea:	e006      	b.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4ec:	4b0d      	ldr	r3, [pc, #52]	@ (800a524 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a4ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4f2:	f003 0302 	and.w	r3, r3, #2
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d0ec      	beq.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a4fa:	7cfb      	ldrb	r3, [r7, #19]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10b      	bne.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a500:	4b08      	ldr	r3, [pc, #32]	@ (800a524 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a506:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a50e:	4905      	ldr	r1, [pc, #20]	@ (800a524 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a510:	4313      	orrs	r3, r2
 800a512:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a516:	e00b      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x268>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a518:	7cfb      	ldrb	r3, [r7, #19]
 800a51a:	74bb      	strb	r3, [r7, #18]
 800a51c:	e008      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800a51e:	bf00      	nop
 800a520:	08012ac0 	.word	0x08012ac0
 800a524:	40021000 	.word	0x40021000
 800a528:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a52c:	7cfb      	ldrb	r3, [r7, #19]
 800a52e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a530:	7c7b      	ldrb	r3, [r7, #17]
 800a532:	2b01      	cmp	r3, #1
 800a534:	d105      	bne.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a536:	4b9a      	ldr	r3, [pc, #616]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a53a:	4a99      	ldr	r2, [pc, #612]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a53c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a540:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d01e      	beq.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00f      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d00b      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	2b03      	cmp	r3, #3
 800a564:	d007      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d003      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800a56e:	21e0      	movs	r1, #224	@ 0xe0
 800a570:	488c      	ldr	r0, [pc, #560]	@ (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800a572:	f7f8 f82b 	bl	80025cc <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a576:	4b8a      	ldr	r3, [pc, #552]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a57c:	f023 0203 	bic.w	r2, r3, #3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	4986      	ldr	r1, [pc, #536]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a586:	4313      	orrs	r3, r2
 800a588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 0302 	and.w	r3, r3, #2
 800a594:	2b00      	cmp	r3, #0
 800a596:	d01e      	beq.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d00f      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	2b04      	cmp	r3, #4
 800a5a6:	d00b      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	2b0c      	cmp	r3, #12
 800a5ae:	d007      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	2b08      	cmp	r3, #8
 800a5b6:	d003      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800a5b8:	21ea      	movs	r1, #234	@ 0xea
 800a5ba:	487a      	ldr	r0, [pc, #488]	@ (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800a5bc:	f7f8 f806 	bl	80025cc <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a5c0:	4b77      	ldr	r3, [pc, #476]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5c6:	f023 020c 	bic.w	r2, r3, #12
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	4974      	ldr	r1, [pc, #464]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 0304 	and.w	r3, r3, #4
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d01e      	beq.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00f      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	2b10      	cmp	r3, #16
 800a5f0:	d00b      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	2b30      	cmp	r3, #48	@ 0x30
 800a5f8:	d007      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	2b20      	cmp	r3, #32
 800a600:	d003      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a602:	21f4      	movs	r1, #244	@ 0xf4
 800a604:	4867      	ldr	r0, [pc, #412]	@ (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800a606:	f7f7 ffe1 	bl	80025cc <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a60a:	4b65      	ldr	r3, [pc, #404]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a60c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a610:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	4961      	ldr	r1, [pc, #388]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a61a:	4313      	orrs	r3, r2
 800a61c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 0308 	and.w	r3, r3, #8
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d01e      	beq.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	691b      	ldr	r3, [r3, #16]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00f      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	2b40      	cmp	r3, #64	@ 0x40
 800a63a:	d00b      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	2bc0      	cmp	r3, #192	@ 0xc0
 800a642:	d007      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	2b80      	cmp	r3, #128	@ 0x80
 800a64a:	d003      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800a64c:	21ff      	movs	r1, #255	@ 0xff
 800a64e:	4855      	ldr	r0, [pc, #340]	@ (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800a650:	f7f7 ffbc 	bl	80025cc <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a654:	4b52      	ldr	r3, [pc, #328]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a65a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	494f      	ldr	r1, [pc, #316]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a664:	4313      	orrs	r3, r2
 800a666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 0310 	and.w	r3, r3, #16
 800a672:	2b00      	cmp	r3, #0
 800a674:	d022      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d013      	beq.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a686:	d00e      	beq.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	695b      	ldr	r3, [r3, #20]
 800a68c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a690:	d009      	beq.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	695b      	ldr	r3, [r3, #20]
 800a696:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a69a:	d004      	beq.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a69c:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800a6a0:	4840      	ldr	r0, [pc, #256]	@ (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800a6a2:	f7f7 ff93 	bl	80025cc <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a6a6:	4b3e      	ldr	r3, [pc, #248]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	493a      	ldr	r1, [pc, #232]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f003 0320 	and.w	r3, r3, #32
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d022      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d013      	beq.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6d8:	d00e      	beq.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a6e2:	d009      	beq.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6ec:	d004      	beq.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800a6ee:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800a6f2:	482c      	ldr	r0, [pc, #176]	@ (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800a6f4:	f7f7 ff6a 	bl	80025cc <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a6f8:	4b29      	ldr	r3, [pc, #164]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a6fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	699b      	ldr	r3, [r3, #24]
 800a706:	4926      	ldr	r1, [pc, #152]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a708:	4313      	orrs	r3, r2
 800a70a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a716:	2b00      	cmp	r3, #0
 800a718:	d01d      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	69db      	ldr	r3, [r3, #28]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00e      	beq.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	69db      	ldr	r3, [r3, #28]
 800a726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a72a:	d009      	beq.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	69db      	ldr	r3, [r3, #28]
 800a730:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a734:	d004      	beq.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a736:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800a73a:	481a      	ldr	r0, [pc, #104]	@ (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800a73c:	f7f7 ff46 	bl	80025cc <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a740:	4b17      	ldr	r3, [pc, #92]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a746:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	69db      	ldr	r3, [r3, #28]
 800a74e:	4914      	ldr	r1, [pc, #80]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a750:	4313      	orrs	r3, r2
 800a752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d022      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a1b      	ldr	r3, [r3, #32]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00e      	beq.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a1b      	ldr	r3, [r3, #32]
 800a76e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a772:	d009      	beq.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a1b      	ldr	r3, [r3, #32]
 800a778:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a77c:	d004      	beq.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800a77e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800a782:	4808      	ldr	r0, [pc, #32]	@ (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800a784:	f7f7 ff22 	bl	80025cc <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a788:	4b05      	ldr	r3, [pc, #20]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a78a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a78e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a1b      	ldr	r3, [r3, #32]
 800a796:	4902      	ldr	r1, [pc, #8]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a798:	4313      	orrs	r3, r2
 800a79a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800a79e:	e003      	b.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a7a0:	40021000 	.word	0x40021000
 800a7a4:	08012ac0 	.word	0x08012ac0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d01d      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00e      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x512>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7c4:	d009      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x512>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7ce:	d004      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x512>
 800a7d0:	f44f 719b 	mov.w	r1, #310	@ 0x136
 800a7d4:	489e      	ldr	r0, [pc, #632]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a7d6:	f7f7 fef9 	bl	80025cc <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a7da:	4b9e      	ldr	r3, [pc, #632]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a7dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e8:	499a      	ldr	r1, [pc, #616]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d01b      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x56c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00c      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x556>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d008      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x556>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a810:	2b02      	cmp	r3, #2
 800a812:	d004      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x556>
 800a814:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 800a818:	488d      	ldr	r0, [pc, #564]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a81a:	f7f7 fed7 	bl	80025cc <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a81e:	4b8d      	ldr	r3, [pc, #564]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a820:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a824:	f023 0203 	bic.w	r2, r3, #3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a82c:	4989      	ldr	r1, [pc, #548]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a82e:	4313      	orrs	r3, r2
 800a830:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d022      	beq.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a844:	2b00      	cmp	r3, #0
 800a846:	d013      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a84c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a850:	d00e      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a856:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a85a:	d009      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a860:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a864:	d004      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800a866:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 800a86a:	4879      	ldr	r0, [pc, #484]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a86c:	f7f7 feae 	bl	80025cc <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a870:	4b78      	ldr	r3, [pc, #480]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a876:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a87e:	4975      	ldr	r1, [pc, #468]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a880:	4313      	orrs	r3, r2
 800a882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d02d      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a896:	2b00      	cmp	r3, #0
 800a898:	d013      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a89e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8a2:	d00e      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a8ac:	d009      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a8b6:	d004      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800a8b8:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 800a8bc:	4864      	ldr	r0, [pc, #400]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a8be:	f7f7 fe85 	bl	80025cc <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8c2:	4b64      	ldr	r3, [pc, #400]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a8c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8d0:	4960      	ldr	r1, [pc, #384]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8e0:	d105      	bne.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x626>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a8e2:	4b5c      	ldr	r3, [pc, #368]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	4a5b      	ldr	r2, [pc, #364]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a8e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8ec:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d02d      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x68e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d013      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a906:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a90a:	d00e      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a910:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a914:	d009      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a91a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a91e:	d004      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a920:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800a924:	484a      	ldr	r0, [pc, #296]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a926:	f7f7 fe51 	bl	80025cc <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a92a:	4b4a      	ldr	r3, [pc, #296]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a92c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a930:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a938:	4946      	ldr	r1, [pc, #280]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a93a:	4313      	orrs	r3, r2
 800a93c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a944:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a948:	d105      	bne.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a94a:	4b42      	ldr	r3, [pc, #264]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	4a41      	ldr	r2, [pc, #260]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a950:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a954:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d028      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00e      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a96e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a972:	d009      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a978:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a97c:	d004      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800a97e:	f240 1179 	movw	r1, #377	@ 0x179
 800a982:	4833      	ldr	r0, [pc, #204]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a984:	f7f7 fe22 	bl	80025cc <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a988:	4b32      	ldr	r3, [pc, #200]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a98a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a98e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a996:	492f      	ldr	r1, [pc, #188]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a998:	4313      	orrs	r3, r2
 800a99a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a9a6:	d105      	bne.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a9a8:	4b2a      	ldr	r3, [pc, #168]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	4a29      	ldr	r2, [pc, #164]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a9ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d023      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x740>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d009      	beq.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x714>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9d0:	d004      	beq.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x714>
 800a9d2:	f240 118b 	movw	r1, #395	@ 0x18b
 800a9d6:	481e      	ldr	r0, [pc, #120]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a9d8:	f7f7 fdf8 	bl	80025cc <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a9dc:	4b1d      	ldr	r3, [pc, #116]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a9de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9ea:	491a      	ldr	r1, [pc, #104]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9fa:	d105      	bne.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a9fc:	4b15      	ldr	r3, [pc, #84]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	4a14      	ldr	r2, [pc, #80]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800aa02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa06:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d028      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x79e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d009      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa24:	d004      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800aa26:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800aa2a:	4809      	ldr	r0, [pc, #36]	@ (800aa50 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800aa2c:	f7f7 fdce 	bl	80025cc <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aa30:	4b08      	ldr	r3, [pc, #32]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800aa32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa3e:	4905      	ldr	r1, [pc, #20]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800aa40:	4313      	orrs	r3, r2
 800aa42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa4e:	e003      	b.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x790>
 800aa50:	08012ac0 	.word	0x08012ac0
 800aa54:	40021000 	.word	0x40021000
 800aa58:	d105      	bne.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aa5a:	4b4c      	ldr	r3, [pc, #304]	@ (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	4a4b      	ldr	r2, [pc, #300]	@ (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800aa60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa64:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d028      	beq.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00e      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa82:	d009      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa8c:	d004      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800aa8e:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 800aa92:	483f      	ldr	r0, [pc, #252]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800aa94:	f7f7 fd9a 	bl	80025cc <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800aa98:	4b3c      	ldr	r3, [pc, #240]	@ (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800aa9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa9e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaa6:	4939      	ldr	r1, [pc, #228]	@ (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aab2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aab6:	d105      	bne.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800aab8:	4b34      	ldr	r3, [pc, #208]	@ (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	4a33      	ldr	r2, [pc, #204]	@ (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800aabe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aac2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d028      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x85a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00e      	beq.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aadc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aae0:	d009      	beq.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aae6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aaea:	d004      	beq.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800aaec:	f240 11b9 	movw	r1, #441	@ 0x1b9
 800aaf0:	4827      	ldr	r0, [pc, #156]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800aaf2:	f7f7 fd6b 	bl	80025cc <assert_failed>

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800aaf6:	4b25      	ldr	r3, [pc, #148]	@ (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800aaf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aafc:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab04:	4921      	ldr	r1, [pc, #132]	@ (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800ab06:	4313      	orrs	r3, r2
 800ab08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab14:	d105      	bne.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ab16:	4b1d      	ldr	r3, [pc, #116]	@ (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	4a1c      	ldr	r2, [pc, #112]	@ (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800ab1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab20:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d028      	beq.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab36:	d00d      	beq.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d009      	beq.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab48:	d004      	beq.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800ab4a:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 800ab4e:	4810      	ldr	r0, [pc, #64]	@ (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800ab50:	f7f7 fd3c 	bl	80025cc <assert_failed>

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ab54:	4b0d      	ldr	r3, [pc, #52]	@ (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800ab56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab62:	490a      	ldr	r1, [pc, #40]	@ (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800ab64:	4313      	orrs	r3, r2
 800ab66:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab72:	d105      	bne.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ab74:	4b05      	ldr	r3, [pc, #20]	@ (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	4a04      	ldr	r2, [pc, #16]	@ (800ab8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800ab7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800ab80:	7cbb      	ldrb	r3, [r7, #18]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3718      	adds	r7, #24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	40021000 	.word	0x40021000
 800ab90:	08012ac0 	.word	0x08012ac0

0800ab94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e0eb      	b.n	800ad7e <HAL_TIM_Base_Init+0x1ea>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a77      	ldr	r2, [pc, #476]	@ (800ad88 <HAL_TIM_Base_Init+0x1f4>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d03b      	beq.n	800ac28 <HAL_TIM_Base_Init+0x94>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abb8:	d036      	beq.n	800ac28 <HAL_TIM_Base_Init+0x94>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a73      	ldr	r2, [pc, #460]	@ (800ad8c <HAL_TIM_Base_Init+0x1f8>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d031      	beq.n	800ac28 <HAL_TIM_Base_Init+0x94>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a71      	ldr	r2, [pc, #452]	@ (800ad90 <HAL_TIM_Base_Init+0x1fc>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d02c      	beq.n	800ac28 <HAL_TIM_Base_Init+0x94>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a70      	ldr	r2, [pc, #448]	@ (800ad94 <HAL_TIM_Base_Init+0x200>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d027      	beq.n	800ac28 <HAL_TIM_Base_Init+0x94>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a6e      	ldr	r2, [pc, #440]	@ (800ad98 <HAL_TIM_Base_Init+0x204>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d022      	beq.n	800ac28 <HAL_TIM_Base_Init+0x94>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a6d      	ldr	r2, [pc, #436]	@ (800ad9c <HAL_TIM_Base_Init+0x208>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d01d      	beq.n	800ac28 <HAL_TIM_Base_Init+0x94>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a6b      	ldr	r2, [pc, #428]	@ (800ada0 <HAL_TIM_Base_Init+0x20c>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d018      	beq.n	800ac28 <HAL_TIM_Base_Init+0x94>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a6a      	ldr	r2, [pc, #424]	@ (800ada4 <HAL_TIM_Base_Init+0x210>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d013      	beq.n	800ac28 <HAL_TIM_Base_Init+0x94>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a68      	ldr	r2, [pc, #416]	@ (800ada8 <HAL_TIM_Base_Init+0x214>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d00e      	beq.n	800ac28 <HAL_TIM_Base_Init+0x94>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a67      	ldr	r2, [pc, #412]	@ (800adac <HAL_TIM_Base_Init+0x218>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d009      	beq.n	800ac28 <HAL_TIM_Base_Init+0x94>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a65      	ldr	r2, [pc, #404]	@ (800adb0 <HAL_TIM_Base_Init+0x21c>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d004      	beq.n	800ac28 <HAL_TIM_Base_Init+0x94>
 800ac1e:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800ac22:	4864      	ldr	r0, [pc, #400]	@ (800adb4 <HAL_TIM_Base_Init+0x220>)
 800ac24:	f7f7 fcd2 	bl	80025cc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d014      	beq.n	800ac5a <HAL_TIM_Base_Init+0xc6>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	2b10      	cmp	r3, #16
 800ac36:	d010      	beq.n	800ac5a <HAL_TIM_Base_Init+0xc6>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	2b20      	cmp	r3, #32
 800ac3e:	d00c      	beq.n	800ac5a <HAL_TIM_Base_Init+0xc6>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	2b40      	cmp	r3, #64	@ 0x40
 800ac46:	d008      	beq.n	800ac5a <HAL_TIM_Base_Init+0xc6>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	2b60      	cmp	r3, #96	@ 0x60
 800ac4e:	d004      	beq.n	800ac5a <HAL_TIM_Base_Init+0xc6>
 800ac50:	f240 1123 	movw	r1, #291	@ 0x123
 800ac54:	4857      	ldr	r0, [pc, #348]	@ (800adb4 <HAL_TIM_Base_Init+0x220>)
 800ac56:	f7f7 fcb9 	bl	80025cc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	691b      	ldr	r3, [r3, #16]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00e      	beq.n	800ac80 <HAL_TIM_Base_Init+0xec>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac6a:	d009      	beq.n	800ac80 <HAL_TIM_Base_Init+0xec>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac74:	d004      	beq.n	800ac80 <HAL_TIM_Base_Init+0xec>
 800ac76:	f44f 7192 	mov.w	r1, #292	@ 0x124
 800ac7a:	484e      	ldr	r0, [pc, #312]	@ (800adb4 <HAL_TIM_Base_Init+0x220>)
 800ac7c:	f7f7 fca6 	bl	80025cc <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac88:	d004      	beq.n	800ac94 <HAL_TIM_Base_Init+0x100>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a41      	ldr	r2, [pc, #260]	@ (800ad94 <HAL_TIM_Base_Init+0x200>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d107      	bne.n	800aca4 <HAL_TIM_Base_Init+0x110>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	bf14      	ite	ne
 800ac9c:	2301      	movne	r3, #1
 800ac9e:	2300      	moveq	r3, #0
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	e00e      	b.n	800acc2 <HAL_TIM_Base_Init+0x12e>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d006      	beq.n	800acba <HAL_TIM_Base_Init+0x126>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acb4:	d201      	bcs.n	800acba <HAL_TIM_Base_Init+0x126>
 800acb6:	2301      	movs	r3, #1
 800acb8:	e000      	b.n	800acbc <HAL_TIM_Base_Init+0x128>
 800acba:	2300      	movs	r3, #0
 800acbc:	f003 0301 	and.w	r3, r3, #1
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d104      	bne.n	800acd0 <HAL_TIM_Base_Init+0x13c>
 800acc6:	f240 1125 	movw	r1, #293	@ 0x125
 800acca:	483a      	ldr	r0, [pc, #232]	@ (800adb4 <HAL_TIM_Base_Init+0x220>)
 800accc:	f7f7 fc7e 	bl	80025cc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	699b      	ldr	r3, [r3, #24]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d008      	beq.n	800acea <HAL_TIM_Base_Init+0x156>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	699b      	ldr	r3, [r3, #24]
 800acdc:	2b80      	cmp	r3, #128	@ 0x80
 800acde:	d004      	beq.n	800acea <HAL_TIM_Base_Init+0x156>
 800ace0:	f44f 7193 	mov.w	r1, #294	@ 0x126
 800ace4:	4833      	ldr	r0, [pc, #204]	@ (800adb4 <HAL_TIM_Base_Init+0x220>)
 800ace6:	f7f7 fc71 	bl	80025cc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d106      	bne.n	800ad04 <HAL_TIM_Base_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7f7 fdaa 	bl	8002858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2202      	movs	r2, #2
 800ad08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3304      	adds	r3, #4
 800ad14:	4619      	mov	r1, r3
 800ad16:	4610      	mov	r0, r2
 800ad18:	f001 f956 	bl	800bfc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2201      	movs	r2, #1
 800ad58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3708      	adds	r7, #8
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	40012c00 	.word	0x40012c00
 800ad8c:	40000400 	.word	0x40000400
 800ad90:	40000800 	.word	0x40000800
 800ad94:	40000c00 	.word	0x40000c00
 800ad98:	40001000 	.word	0x40001000
 800ad9c:	40001400 	.word	0x40001400
 800ada0:	40013400 	.word	0x40013400
 800ada4:	40014000 	.word	0x40014000
 800ada8:	40014400 	.word	0x40014400
 800adac:	40014800 	.word	0x40014800
 800adb0:	40015000 	.word	0x40015000
 800adb4:	08012b34 	.word	0x08012b34

0800adb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a4f      	ldr	r2, [pc, #316]	@ (800af04 <HAL_TIM_Base_Start_IT+0x14c>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d03b      	beq.n	800ae42 <HAL_TIM_Base_Start_IT+0x8a>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800add2:	d036      	beq.n	800ae42 <HAL_TIM_Base_Start_IT+0x8a>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a4b      	ldr	r2, [pc, #300]	@ (800af08 <HAL_TIM_Base_Start_IT+0x150>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d031      	beq.n	800ae42 <HAL_TIM_Base_Start_IT+0x8a>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a4a      	ldr	r2, [pc, #296]	@ (800af0c <HAL_TIM_Base_Start_IT+0x154>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d02c      	beq.n	800ae42 <HAL_TIM_Base_Start_IT+0x8a>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a48      	ldr	r2, [pc, #288]	@ (800af10 <HAL_TIM_Base_Start_IT+0x158>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d027      	beq.n	800ae42 <HAL_TIM_Base_Start_IT+0x8a>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a47      	ldr	r2, [pc, #284]	@ (800af14 <HAL_TIM_Base_Start_IT+0x15c>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d022      	beq.n	800ae42 <HAL_TIM_Base_Start_IT+0x8a>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a45      	ldr	r2, [pc, #276]	@ (800af18 <HAL_TIM_Base_Start_IT+0x160>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d01d      	beq.n	800ae42 <HAL_TIM_Base_Start_IT+0x8a>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a44      	ldr	r2, [pc, #272]	@ (800af1c <HAL_TIM_Base_Start_IT+0x164>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d018      	beq.n	800ae42 <HAL_TIM_Base_Start_IT+0x8a>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a42      	ldr	r2, [pc, #264]	@ (800af20 <HAL_TIM_Base_Start_IT+0x168>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d013      	beq.n	800ae42 <HAL_TIM_Base_Start_IT+0x8a>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a41      	ldr	r2, [pc, #260]	@ (800af24 <HAL_TIM_Base_Start_IT+0x16c>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d00e      	beq.n	800ae42 <HAL_TIM_Base_Start_IT+0x8a>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a3f      	ldr	r2, [pc, #252]	@ (800af28 <HAL_TIM_Base_Start_IT+0x170>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d009      	beq.n	800ae42 <HAL_TIM_Base_Start_IT+0x8a>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a3e      	ldr	r2, [pc, #248]	@ (800af2c <HAL_TIM_Base_Start_IT+0x174>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d004      	beq.n	800ae42 <HAL_TIM_Base_Start_IT+0x8a>
 800ae38:	f240 11df 	movw	r1, #479	@ 0x1df
 800ae3c:	483c      	ldr	r0, [pc, #240]	@ (800af30 <HAL_TIM_Base_Start_IT+0x178>)
 800ae3e:	f7f7 fbc5 	bl	80025cc <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d001      	beq.n	800ae52 <HAL_TIM_Base_Start_IT+0x9a>
  {
    return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e054      	b.n	800aefc <HAL_TIM_Base_Start_IT+0x144>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2202      	movs	r2, #2
 800ae56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68da      	ldr	r2, [r3, #12]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f042 0201 	orr.w	r2, r2, #1
 800ae68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a25      	ldr	r2, [pc, #148]	@ (800af04 <HAL_TIM_Base_Start_IT+0x14c>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d022      	beq.n	800aeba <HAL_TIM_Base_Start_IT+0x102>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae7c:	d01d      	beq.n	800aeba <HAL_TIM_Base_Start_IT+0x102>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a21      	ldr	r2, [pc, #132]	@ (800af08 <HAL_TIM_Base_Start_IT+0x150>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d018      	beq.n	800aeba <HAL_TIM_Base_Start_IT+0x102>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a1f      	ldr	r2, [pc, #124]	@ (800af0c <HAL_TIM_Base_Start_IT+0x154>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d013      	beq.n	800aeba <HAL_TIM_Base_Start_IT+0x102>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a1e      	ldr	r2, [pc, #120]	@ (800af10 <HAL_TIM_Base_Start_IT+0x158>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d00e      	beq.n	800aeba <HAL_TIM_Base_Start_IT+0x102>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a1e      	ldr	r2, [pc, #120]	@ (800af1c <HAL_TIM_Base_Start_IT+0x164>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d009      	beq.n	800aeba <HAL_TIM_Base_Start_IT+0x102>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a1d      	ldr	r2, [pc, #116]	@ (800af20 <HAL_TIM_Base_Start_IT+0x168>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d004      	beq.n	800aeba <HAL_TIM_Base_Start_IT+0x102>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a1d      	ldr	r2, [pc, #116]	@ (800af2c <HAL_TIM_Base_Start_IT+0x174>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d115      	bne.n	800aee6 <HAL_TIM_Base_Start_IT+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	689a      	ldr	r2, [r3, #8]
 800aec0:	4b1c      	ldr	r3, [pc, #112]	@ (800af34 <HAL_TIM_Base_Start_IT+0x17c>)
 800aec2:	4013      	ands	r3, r2
 800aec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2b06      	cmp	r3, #6
 800aeca:	d015      	beq.n	800aef8 <HAL_TIM_Base_Start_IT+0x140>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aed2:	d011      	beq.n	800aef8 <HAL_TIM_Base_Start_IT+0x140>
    {
      __HAL_TIM_ENABLE(htim);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f042 0201 	orr.w	r2, r2, #1
 800aee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aee4:	e008      	b.n	800aef8 <HAL_TIM_Base_Start_IT+0x140>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f042 0201 	orr.w	r2, r2, #1
 800aef4:	601a      	str	r2, [r3, #0]
 800aef6:	e000      	b.n	800aefa <HAL_TIM_Base_Start_IT+0x142>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aef8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	40012c00 	.word	0x40012c00
 800af08:	40000400 	.word	0x40000400
 800af0c:	40000800 	.word	0x40000800
 800af10:	40000c00 	.word	0x40000c00
 800af14:	40001000 	.word	0x40001000
 800af18:	40001400 	.word	0x40001400
 800af1c:	40013400 	.word	0x40013400
 800af20:	40014000 	.word	0x40014000
 800af24:	40014400 	.word	0x40014400
 800af28:	40014800 	.word	0x40014800
 800af2c:	40015000 	.word	0x40015000
 800af30:	08012b34 	.word	0x08012b34
 800af34:	00010007 	.word	0x00010007

0800af38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	f003 0302 	and.w	r3, r3, #2
 800af56:	2b00      	cmp	r3, #0
 800af58:	d020      	beq.n	800af9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f003 0302 	and.w	r3, r3, #2
 800af60:	2b00      	cmp	r3, #0
 800af62:	d01b      	beq.n	800af9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f06f 0202 	mvn.w	r2, #2
 800af6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2201      	movs	r2, #1
 800af72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	f003 0303 	and.w	r3, r3, #3
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d003      	beq.n	800af8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f001 f802 	bl	800bf8c <HAL_TIM_IC_CaptureCallback>
 800af88:	e005      	b.n	800af96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fff4 	bl	800bf78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f001 f805 	bl	800bfa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	f003 0304 	and.w	r3, r3, #4
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d020      	beq.n	800afe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f003 0304 	and.w	r3, r3, #4
 800afac:	2b00      	cmp	r3, #0
 800afae:	d01b      	beq.n	800afe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f06f 0204 	mvn.w	r2, #4
 800afb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2202      	movs	r2, #2
 800afbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	699b      	ldr	r3, [r3, #24]
 800afc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d003      	beq.n	800afd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 ffdc 	bl	800bf8c <HAL_TIM_IC_CaptureCallback>
 800afd4:	e005      	b.n	800afe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 ffce 	bl	800bf78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 ffdf 	bl	800bfa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	f003 0308 	and.w	r3, r3, #8
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d020      	beq.n	800b034 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f003 0308 	and.w	r3, r3, #8
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d01b      	beq.n	800b034 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f06f 0208 	mvn.w	r2, #8
 800b004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2204      	movs	r2, #4
 800b00a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	69db      	ldr	r3, [r3, #28]
 800b012:	f003 0303 	and.w	r3, r3, #3
 800b016:	2b00      	cmp	r3, #0
 800b018:	d003      	beq.n	800b022 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 ffb6 	bl	800bf8c <HAL_TIM_IC_CaptureCallback>
 800b020:	e005      	b.n	800b02e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 ffa8 	bl	800bf78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 ffb9 	bl	800bfa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	f003 0310 	and.w	r3, r3, #16
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d020      	beq.n	800b080 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f003 0310 	and.w	r3, r3, #16
 800b044:	2b00      	cmp	r3, #0
 800b046:	d01b      	beq.n	800b080 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f06f 0210 	mvn.w	r2, #16
 800b050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2208      	movs	r2, #8
 800b056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	69db      	ldr	r3, [r3, #28]
 800b05e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b062:	2b00      	cmp	r3, #0
 800b064:	d003      	beq.n	800b06e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 ff90 	bl	800bf8c <HAL_TIM_IC_CaptureCallback>
 800b06c:	e005      	b.n	800b07a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 ff82 	bl	800bf78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 ff93 	bl	800bfa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	f003 0301 	and.w	r3, r3, #1
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00c      	beq.n	800b0a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f003 0301 	and.w	r3, r3, #1
 800b090:	2b00      	cmp	r3, #0
 800b092:	d007      	beq.n	800b0a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f06f 0201 	mvn.w	r2, #1
 800b09c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7f7 f81a 	bl	80020d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d104      	bne.n	800b0b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00c      	beq.n	800b0d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d007      	beq.n	800b0d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b0ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f001 fa45 	bl	800c55c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00c      	beq.n	800b0f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d007      	beq.n	800b0f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b0ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f001 fa3d 	bl	800c570 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00c      	beq.n	800b11a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b106:	2b00      	cmp	r3, #0
 800b108:	d007      	beq.n	800b11a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 ff4d 	bl	800bfb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	f003 0320 	and.w	r3, r3, #32
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00c      	beq.n	800b13e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f003 0320 	and.w	r3, r3, #32
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d007      	beq.n	800b13e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f06f 0220 	mvn.w	r2, #32
 800b136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 fa05 	bl	800c548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00c      	beq.n	800b162 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d007      	beq.n	800b162 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b15a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f001 fa11 	bl	800c584 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d00c      	beq.n	800b186 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b172:	2b00      	cmp	r3, #0
 800b174:	d007      	beq.n	800b186 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b17e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f001 fa09 	bl	800c598 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00c      	beq.n	800b1aa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b196:	2b00      	cmp	r3, #0
 800b198:	d007      	beq.n	800b1aa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b1a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f001 fa01 	bl	800c5ac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00c      	beq.n	800b1ce <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d007      	beq.n	800b1ce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b1c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f001 f9f9 	bl	800c5c0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b1ce:	bf00      	nop
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
	...

0800b1d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d102      	bne.n	800b1f6 <HAL_TIM_ConfigClockSource+0x1e>
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	f000 beb3 	b.w	800bf5c <HAL_TIM_ConfigClockSource+0xd84>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2202      	movs	r2, #2
 800b202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b20e:	d051      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b70      	cmp	r3, #112	@ 0x70
 800b216:	d04d      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b220:	d048      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	2b40      	cmp	r3, #64	@ 0x40
 800b228:	d044      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b50      	cmp	r3, #80	@ 0x50
 800b230:	d040      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2b60      	cmp	r3, #96	@ 0x60
 800b238:	d03c      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d038      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b10      	cmp	r3, #16
 800b248:	d034      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b20      	cmp	r3, #32
 800b250:	d030      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b30      	cmp	r3, #48	@ 0x30
 800b258:	d02c      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b262:	d027      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b26c:	d022      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a7f      	ldr	r2, [pc, #508]	@ (800b470 <HAL_TIM_ConfigClockSource+0x298>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d01d      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a7d      	ldr	r2, [pc, #500]	@ (800b474 <HAL_TIM_ConfigClockSource+0x29c>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d018      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a7c      	ldr	r2, [pc, #496]	@ (800b478 <HAL_TIM_ConfigClockSource+0x2a0>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d013      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a7a      	ldr	r2, [pc, #488]	@ (800b47c <HAL_TIM_ConfigClockSource+0x2a4>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d00e      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a79      	ldr	r2, [pc, #484]	@ (800b480 <HAL_TIM_ConfigClockSource+0x2a8>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d009      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a77      	ldr	r2, [pc, #476]	@ (800b484 <HAL_TIM_ConfigClockSource+0x2ac>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d004      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0xdc>
 800b2aa:	f241 51c5 	movw	r1, #5573	@ 0x15c5
 800b2ae:	4876      	ldr	r0, [pc, #472]	@ (800b488 <HAL_TIM_ConfigClockSource+0x2b0>)
 800b2b0:	f7f7 f98c 	bl	80025cc <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b2c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b2c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b2ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a69      	ldr	r2, [pc, #420]	@ (800b484 <HAL_TIM_ConfigClockSource+0x2ac>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	f000 832a 	beq.w	800b938 <HAL_TIM_ConfigClockSource+0x760>
 800b2e4:	4a67      	ldr	r2, [pc, #412]	@ (800b484 <HAL_TIM_ConfigClockSource+0x2ac>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	f200 862b 	bhi.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
 800b2ec:	4a64      	ldr	r2, [pc, #400]	@ (800b480 <HAL_TIM_ConfigClockSource+0x2a8>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	f000 8322 	beq.w	800b938 <HAL_TIM_ConfigClockSource+0x760>
 800b2f4:	4a62      	ldr	r2, [pc, #392]	@ (800b480 <HAL_TIM_ConfigClockSource+0x2a8>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	f200 8623 	bhi.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
 800b2fc:	4a5f      	ldr	r2, [pc, #380]	@ (800b47c <HAL_TIM_ConfigClockSource+0x2a4>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	f000 831a 	beq.w	800b938 <HAL_TIM_ConfigClockSource+0x760>
 800b304:	4a5d      	ldr	r2, [pc, #372]	@ (800b47c <HAL_TIM_ConfigClockSource+0x2a4>)
 800b306:	4293      	cmp	r3, r2
 800b308:	f200 861b 	bhi.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
 800b30c:	4a5a      	ldr	r2, [pc, #360]	@ (800b478 <HAL_TIM_ConfigClockSource+0x2a0>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	f000 8312 	beq.w	800b938 <HAL_TIM_ConfigClockSource+0x760>
 800b314:	4a58      	ldr	r2, [pc, #352]	@ (800b478 <HAL_TIM_ConfigClockSource+0x2a0>)
 800b316:	4293      	cmp	r3, r2
 800b318:	f200 8613 	bhi.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
 800b31c:	4a55      	ldr	r2, [pc, #340]	@ (800b474 <HAL_TIM_ConfigClockSource+0x29c>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	f000 830a 	beq.w	800b938 <HAL_TIM_ConfigClockSource+0x760>
 800b324:	4a53      	ldr	r2, [pc, #332]	@ (800b474 <HAL_TIM_ConfigClockSource+0x29c>)
 800b326:	4293      	cmp	r3, r2
 800b328:	f200 860b 	bhi.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
 800b32c:	4a50      	ldr	r2, [pc, #320]	@ (800b470 <HAL_TIM_ConfigClockSource+0x298>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	f000 8302 	beq.w	800b938 <HAL_TIM_ConfigClockSource+0x760>
 800b334:	4a4e      	ldr	r2, [pc, #312]	@ (800b470 <HAL_TIM_ConfigClockSource+0x298>)
 800b336:	4293      	cmp	r3, r2
 800b338:	f200 8603 	bhi.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
 800b33c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b340:	f000 82fa 	beq.w	800b938 <HAL_TIM_ConfigClockSource+0x760>
 800b344:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b348:	f200 85fb 	bhi.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
 800b34c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b350:	f000 82f2 	beq.w	800b938 <HAL_TIM_ConfigClockSource+0x760>
 800b354:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b358:	f200 85f3 	bhi.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
 800b35c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b360:	f000 8125 	beq.w	800b5ae <HAL_TIM_ConfigClockSource+0x3d6>
 800b364:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b368:	f200 85eb 	bhi.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
 800b36c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b370:	d02f      	beq.n	800b3d2 <HAL_TIM_ConfigClockSource+0x1fa>
 800b372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b376:	f200 85e4 	bhi.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
 800b37a:	2b70      	cmp	r3, #112	@ 0x70
 800b37c:	f000 809c 	beq.w	800b4b8 <HAL_TIM_ConfigClockSource+0x2e0>
 800b380:	2b70      	cmp	r3, #112	@ 0x70
 800b382:	f200 85de 	bhi.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
 800b386:	2b60      	cmp	r3, #96	@ 0x60
 800b388:	f000 81f6 	beq.w	800b778 <HAL_TIM_ConfigClockSource+0x5a0>
 800b38c:	2b60      	cmp	r3, #96	@ 0x60
 800b38e:	f200 85d8 	bhi.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
 800b392:	2b50      	cmp	r3, #80	@ 0x50
 800b394:	f000 8190 	beq.w	800b6b8 <HAL_TIM_ConfigClockSource+0x4e0>
 800b398:	2b50      	cmp	r3, #80	@ 0x50
 800b39a:	f200 85d2 	bhi.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
 800b39e:	2b40      	cmp	r3, #64	@ 0x40
 800b3a0:	f000 825a 	beq.w	800b858 <HAL_TIM_ConfigClockSource+0x680>
 800b3a4:	2b40      	cmp	r3, #64	@ 0x40
 800b3a6:	f200 85cc 	bhi.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
 800b3aa:	2b30      	cmp	r3, #48	@ 0x30
 800b3ac:	f000 82c4 	beq.w	800b938 <HAL_TIM_ConfigClockSource+0x760>
 800b3b0:	2b30      	cmp	r3, #48	@ 0x30
 800b3b2:	f200 85c6 	bhi.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
 800b3b6:	2b20      	cmp	r3, #32
 800b3b8:	f000 82be 	beq.w	800b938 <HAL_TIM_ConfigClockSource+0x760>
 800b3bc:	2b20      	cmp	r3, #32
 800b3be:	f200 85c0 	bhi.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f000 82b8 	beq.w	800b938 <HAL_TIM_ConfigClockSource+0x760>
 800b3c8:	2b10      	cmp	r3, #16
 800b3ca:	f000 82b5 	beq.w	800b938 <HAL_TIM_ConfigClockSource+0x760>
 800b3ce:	f000 bdb8 	b.w	800bf42 <HAL_TIM_ConfigClockSource+0xd6a>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a2d      	ldr	r2, [pc, #180]	@ (800b48c <HAL_TIM_ConfigClockSource+0x2b4>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	f000 85b5 	beq.w	800bf48 <HAL_TIM_ConfigClockSource+0xd70>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3e6:	f000 85af 	beq.w	800bf48 <HAL_TIM_ConfigClockSource+0xd70>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a28      	ldr	r2, [pc, #160]	@ (800b490 <HAL_TIM_ConfigClockSource+0x2b8>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	f000 85a9 	beq.w	800bf48 <HAL_TIM_ConfigClockSource+0xd70>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a26      	ldr	r2, [pc, #152]	@ (800b494 <HAL_TIM_ConfigClockSource+0x2bc>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	f000 85a3 	beq.w	800bf48 <HAL_TIM_ConfigClockSource+0xd70>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a24      	ldr	r2, [pc, #144]	@ (800b498 <HAL_TIM_ConfigClockSource+0x2c0>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	f000 859d 	beq.w	800bf48 <HAL_TIM_ConfigClockSource+0xd70>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a22      	ldr	r2, [pc, #136]	@ (800b49c <HAL_TIM_ConfigClockSource+0x2c4>)
 800b414:	4293      	cmp	r3, r2
 800b416:	f000 8597 	beq.w	800bf48 <HAL_TIM_ConfigClockSource+0xd70>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a20      	ldr	r2, [pc, #128]	@ (800b4a0 <HAL_TIM_ConfigClockSource+0x2c8>)
 800b420:	4293      	cmp	r3, r2
 800b422:	f000 8591 	beq.w	800bf48 <HAL_TIM_ConfigClockSource+0xd70>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a1e      	ldr	r2, [pc, #120]	@ (800b4a4 <HAL_TIM_ConfigClockSource+0x2cc>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	f000 858b 	beq.w	800bf48 <HAL_TIM_ConfigClockSource+0xd70>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a1c      	ldr	r2, [pc, #112]	@ (800b4a8 <HAL_TIM_ConfigClockSource+0x2d0>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	f000 8585 	beq.w	800bf48 <HAL_TIM_ConfigClockSource+0xd70>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4a1a      	ldr	r2, [pc, #104]	@ (800b4ac <HAL_TIM_ConfigClockSource+0x2d4>)
 800b444:	4293      	cmp	r3, r2
 800b446:	f000 857f 	beq.w	800bf48 <HAL_TIM_ConfigClockSource+0xd70>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a18      	ldr	r2, [pc, #96]	@ (800b4b0 <HAL_TIM_ConfigClockSource+0x2d8>)
 800b450:	4293      	cmp	r3, r2
 800b452:	f000 8579 	beq.w	800bf48 <HAL_TIM_ConfigClockSource+0xd70>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a16      	ldr	r2, [pc, #88]	@ (800b4b4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	f000 8573 	beq.w	800bf48 <HAL_TIM_ConfigClockSource+0xd70>
 800b462:	f241 51d1 	movw	r1, #5585	@ 0x15d1
 800b466:	4808      	ldr	r0, [pc, #32]	@ (800b488 <HAL_TIM_ConfigClockSource+0x2b0>)
 800b468:	f7f7 f8b0 	bl	80025cc <assert_failed>
      break;
 800b46c:	f000 bd6c 	b.w	800bf48 <HAL_TIM_ConfigClockSource+0xd70>
 800b470:	00100020 	.word	0x00100020
 800b474:	00100030 	.word	0x00100030
 800b478:	00100040 	.word	0x00100040
 800b47c:	00100050 	.word	0x00100050
 800b480:	00100060 	.word	0x00100060
 800b484:	00100070 	.word	0x00100070
 800b488:	08012b34 	.word	0x08012b34
 800b48c:	40012c00 	.word	0x40012c00
 800b490:	40000400 	.word	0x40000400
 800b494:	40000800 	.word	0x40000800
 800b498:	40000c00 	.word	0x40000c00
 800b49c:	40001000 	.word	0x40001000
 800b4a0:	40001400 	.word	0x40001400
 800b4a4:	40013400 	.word	0x40013400
 800b4a8:	40014000 	.word	0x40014000
 800b4ac:	40014400 	.word	0x40014400
 800b4b0:	40014800 	.word	0x40014800
 800b4b4:	40015000 	.word	0x40015000
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a77      	ldr	r2, [pc, #476]	@ (800b69c <HAL_TIM_ConfigClockSource+0x4c4>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d022      	beq.n	800b508 <HAL_TIM_ConfigClockSource+0x330>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4ca:	d01d      	beq.n	800b508 <HAL_TIM_ConfigClockSource+0x330>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a73      	ldr	r2, [pc, #460]	@ (800b6a0 <HAL_TIM_ConfigClockSource+0x4c8>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d018      	beq.n	800b508 <HAL_TIM_ConfigClockSource+0x330>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a72      	ldr	r2, [pc, #456]	@ (800b6a4 <HAL_TIM_ConfigClockSource+0x4cc>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d013      	beq.n	800b508 <HAL_TIM_ConfigClockSource+0x330>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a70      	ldr	r2, [pc, #448]	@ (800b6a8 <HAL_TIM_ConfigClockSource+0x4d0>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d00e      	beq.n	800b508 <HAL_TIM_ConfigClockSource+0x330>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a6f      	ldr	r2, [pc, #444]	@ (800b6ac <HAL_TIM_ConfigClockSource+0x4d4>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d009      	beq.n	800b508 <HAL_TIM_ConfigClockSource+0x330>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a6d      	ldr	r2, [pc, #436]	@ (800b6b0 <HAL_TIM_ConfigClockSource+0x4d8>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d004      	beq.n	800b508 <HAL_TIM_ConfigClockSource+0x330>
 800b4fe:	f241 51d8 	movw	r1, #5592	@ 0x15d8
 800b502:	486c      	ldr	r0, [pc, #432]	@ (800b6b4 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b504:	f7f7 f862 	bl	80025cc <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d013      	beq.n	800b538 <HAL_TIM_ConfigClockSource+0x360>
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b518:	d00e      	beq.n	800b538 <HAL_TIM_ConfigClockSource+0x360>
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b522:	d009      	beq.n	800b538 <HAL_TIM_ConfigClockSource+0x360>
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b52c:	d004      	beq.n	800b538 <HAL_TIM_ConfigClockSource+0x360>
 800b52e:	f241 51db 	movw	r1, #5595	@ 0x15db
 800b532:	4860      	ldr	r0, [pc, #384]	@ (800b6b4 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b534:	f7f7 f84a 	bl	80025cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b540:	d014      	beq.n	800b56c <HAL_TIM_ConfigClockSource+0x394>
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d010      	beq.n	800b56c <HAL_TIM_ConfigClockSource+0x394>
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00c      	beq.n	800b56c <HAL_TIM_ConfigClockSource+0x394>
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	2b02      	cmp	r3, #2
 800b558:	d008      	beq.n	800b56c <HAL_TIM_ConfigClockSource+0x394>
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	2b0a      	cmp	r3, #10
 800b560:	d004      	beq.n	800b56c <HAL_TIM_ConfigClockSource+0x394>
 800b562:	f241 51dc 	movw	r1, #5596	@ 0x15dc
 800b566:	4853      	ldr	r0, [pc, #332]	@ (800b6b4 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b568:	f7f7 f830 	bl	80025cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	2b0f      	cmp	r3, #15
 800b572:	d904      	bls.n	800b57e <HAL_TIM_ConfigClockSource+0x3a6>
 800b574:	f241 51dd 	movw	r1, #5597	@ 0x15dd
 800b578:	484e      	ldr	r0, [pc, #312]	@ (800b6b4 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b57a:	f7f7 f827 	bl	80025cc <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b58e:	f000 fe4b 	bl	800c228 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b5a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	609a      	str	r2, [r3, #8]
      break;
 800b5aa:	f000 bcce 	b.w	800bf4a <HAL_TIM_ConfigClockSource+0xd72>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a3a      	ldr	r2, [pc, #232]	@ (800b69c <HAL_TIM_ConfigClockSource+0x4c4>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d022      	beq.n	800b5fe <HAL_TIM_ConfigClockSource+0x426>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5c0:	d01d      	beq.n	800b5fe <HAL_TIM_ConfigClockSource+0x426>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a36      	ldr	r2, [pc, #216]	@ (800b6a0 <HAL_TIM_ConfigClockSource+0x4c8>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d018      	beq.n	800b5fe <HAL_TIM_ConfigClockSource+0x426>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a34      	ldr	r2, [pc, #208]	@ (800b6a4 <HAL_TIM_ConfigClockSource+0x4cc>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d013      	beq.n	800b5fe <HAL_TIM_ConfigClockSource+0x426>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a33      	ldr	r2, [pc, #204]	@ (800b6a8 <HAL_TIM_ConfigClockSource+0x4d0>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d00e      	beq.n	800b5fe <HAL_TIM_ConfigClockSource+0x426>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a31      	ldr	r2, [pc, #196]	@ (800b6ac <HAL_TIM_ConfigClockSource+0x4d4>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d009      	beq.n	800b5fe <HAL_TIM_ConfigClockSource+0x426>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a30      	ldr	r2, [pc, #192]	@ (800b6b0 <HAL_TIM_ConfigClockSource+0x4d8>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d004      	beq.n	800b5fe <HAL_TIM_ConfigClockSource+0x426>
 800b5f4:	f241 51f0 	movw	r1, #5616	@ 0x15f0
 800b5f8:	482e      	ldr	r0, [pc, #184]	@ (800b6b4 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b5fa:	f7f6 ffe7 	bl	80025cc <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d013      	beq.n	800b62e <HAL_TIM_ConfigClockSource+0x456>
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b60e:	d00e      	beq.n	800b62e <HAL_TIM_ConfigClockSource+0x456>
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b618:	d009      	beq.n	800b62e <HAL_TIM_ConfigClockSource+0x456>
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b622:	d004      	beq.n	800b62e <HAL_TIM_ConfigClockSource+0x456>
 800b624:	f241 51f3 	movw	r1, #5619	@ 0x15f3
 800b628:	4822      	ldr	r0, [pc, #136]	@ (800b6b4 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b62a:	f7f6 ffcf 	bl	80025cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b636:	d014      	beq.n	800b662 <HAL_TIM_ConfigClockSource+0x48a>
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d010      	beq.n	800b662 <HAL_TIM_ConfigClockSource+0x48a>
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00c      	beq.n	800b662 <HAL_TIM_ConfigClockSource+0x48a>
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d008      	beq.n	800b662 <HAL_TIM_ConfigClockSource+0x48a>
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	2b0a      	cmp	r3, #10
 800b656:	d004      	beq.n	800b662 <HAL_TIM_ConfigClockSource+0x48a>
 800b658:	f241 51f4 	movw	r1, #5620	@ 0x15f4
 800b65c:	4815      	ldr	r0, [pc, #84]	@ (800b6b4 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b65e:	f7f6 ffb5 	bl	80025cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	2b0f      	cmp	r3, #15
 800b668:	d904      	bls.n	800b674 <HAL_TIM_ConfigClockSource+0x49c>
 800b66a:	f241 51f5 	movw	r1, #5621	@ 0x15f5
 800b66e:	4811      	ldr	r0, [pc, #68]	@ (800b6b4 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b670:	f7f6 ffac 	bl	80025cc <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b684:	f000 fdd0 	bl	800c228 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	689a      	ldr	r2, [r3, #8]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b696:	609a      	str	r2, [r3, #8]
      break;
 800b698:	f000 bc57 	b.w	800bf4a <HAL_TIM_ConfigClockSource+0xd72>
 800b69c:	40012c00 	.word	0x40012c00
 800b6a0:	40000400 	.word	0x40000400
 800b6a4:	40000800 	.word	0x40000800
 800b6a8:	40000c00 	.word	0x40000c00
 800b6ac:	40013400 	.word	0x40013400
 800b6b0:	40015000 	.word	0x40015000
 800b6b4:	08012b34 	.word	0x08012b34
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a5e      	ldr	r2, [pc, #376]	@ (800b838 <HAL_TIM_ConfigClockSource+0x660>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d027      	beq.n	800b712 <HAL_TIM_ConfigClockSource+0x53a>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6ca:	d022      	beq.n	800b712 <HAL_TIM_ConfigClockSource+0x53a>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a5a      	ldr	r2, [pc, #360]	@ (800b83c <HAL_TIM_ConfigClockSource+0x664>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d01d      	beq.n	800b712 <HAL_TIM_ConfigClockSource+0x53a>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a59      	ldr	r2, [pc, #356]	@ (800b840 <HAL_TIM_ConfigClockSource+0x668>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d018      	beq.n	800b712 <HAL_TIM_ConfigClockSource+0x53a>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a57      	ldr	r2, [pc, #348]	@ (800b844 <HAL_TIM_ConfigClockSource+0x66c>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d013      	beq.n	800b712 <HAL_TIM_ConfigClockSource+0x53a>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a56      	ldr	r2, [pc, #344]	@ (800b848 <HAL_TIM_ConfigClockSource+0x670>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d00e      	beq.n	800b712 <HAL_TIM_ConfigClockSource+0x53a>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a54      	ldr	r2, [pc, #336]	@ (800b84c <HAL_TIM_ConfigClockSource+0x674>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d009      	beq.n	800b712 <HAL_TIM_ConfigClockSource+0x53a>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a53      	ldr	r2, [pc, #332]	@ (800b850 <HAL_TIM_ConfigClockSource+0x678>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d004      	beq.n	800b712 <HAL_TIM_ConfigClockSource+0x53a>
 800b708:	f241 6104 	movw	r1, #5636	@ 0x1604
 800b70c:	4851      	ldr	r0, [pc, #324]	@ (800b854 <HAL_TIM_ConfigClockSource+0x67c>)
 800b70e:	f7f6 ff5d 	bl	80025cc <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b71a:	d014      	beq.n	800b746 <HAL_TIM_ConfigClockSource+0x56e>
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d010      	beq.n	800b746 <HAL_TIM_ConfigClockSource+0x56e>
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00c      	beq.n	800b746 <HAL_TIM_ConfigClockSource+0x56e>
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	2b02      	cmp	r3, #2
 800b732:	d008      	beq.n	800b746 <HAL_TIM_ConfigClockSource+0x56e>
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	2b0a      	cmp	r3, #10
 800b73a:	d004      	beq.n	800b746 <HAL_TIM_ConfigClockSource+0x56e>
 800b73c:	f241 6107 	movw	r1, #5639	@ 0x1607
 800b740:	4844      	ldr	r0, [pc, #272]	@ (800b854 <HAL_TIM_ConfigClockSource+0x67c>)
 800b742:	f7f6 ff43 	bl	80025cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	2b0f      	cmp	r3, #15
 800b74c:	d904      	bls.n	800b758 <HAL_TIM_ConfigClockSource+0x580>
 800b74e:	f241 6108 	movw	r1, #5640	@ 0x1608
 800b752:	4840      	ldr	r0, [pc, #256]	@ (800b854 <HAL_TIM_ConfigClockSource+0x67c>)
 800b754:	f7f6 ff3a 	bl	80025cc <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b764:	461a      	mov	r2, r3
 800b766:	f000 fce3 	bl	800c130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2150      	movs	r1, #80	@ 0x50
 800b770:	4618      	mov	r0, r3
 800b772:	f000 fd3c 	bl	800c1ee <TIM_ITRx_SetConfig>
      break;
 800b776:	e3e8      	b.n	800bf4a <HAL_TIM_ConfigClockSource+0xd72>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a2e      	ldr	r2, [pc, #184]	@ (800b838 <HAL_TIM_ConfigClockSource+0x660>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d027      	beq.n	800b7d2 <HAL_TIM_ConfigClockSource+0x5fa>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b78a:	d022      	beq.n	800b7d2 <HAL_TIM_ConfigClockSource+0x5fa>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a2a      	ldr	r2, [pc, #168]	@ (800b83c <HAL_TIM_ConfigClockSource+0x664>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d01d      	beq.n	800b7d2 <HAL_TIM_ConfigClockSource+0x5fa>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a29      	ldr	r2, [pc, #164]	@ (800b840 <HAL_TIM_ConfigClockSource+0x668>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d018      	beq.n	800b7d2 <HAL_TIM_ConfigClockSource+0x5fa>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a27      	ldr	r2, [pc, #156]	@ (800b844 <HAL_TIM_ConfigClockSource+0x66c>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d013      	beq.n	800b7d2 <HAL_TIM_ConfigClockSource+0x5fa>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a26      	ldr	r2, [pc, #152]	@ (800b848 <HAL_TIM_ConfigClockSource+0x670>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d00e      	beq.n	800b7d2 <HAL_TIM_ConfigClockSource+0x5fa>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a24      	ldr	r2, [pc, #144]	@ (800b84c <HAL_TIM_ConfigClockSource+0x674>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d009      	beq.n	800b7d2 <HAL_TIM_ConfigClockSource+0x5fa>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a23      	ldr	r2, [pc, #140]	@ (800b850 <HAL_TIM_ConfigClockSource+0x678>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d004      	beq.n	800b7d2 <HAL_TIM_ConfigClockSource+0x5fa>
 800b7c8:	f241 6114 	movw	r1, #5652	@ 0x1614
 800b7cc:	4821      	ldr	r0, [pc, #132]	@ (800b854 <HAL_TIM_ConfigClockSource+0x67c>)
 800b7ce:	f7f6 fefd 	bl	80025cc <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7da:	d014      	beq.n	800b806 <HAL_TIM_ConfigClockSource+0x62e>
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d010      	beq.n	800b806 <HAL_TIM_ConfigClockSource+0x62e>
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00c      	beq.n	800b806 <HAL_TIM_ConfigClockSource+0x62e>
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	2b02      	cmp	r3, #2
 800b7f2:	d008      	beq.n	800b806 <HAL_TIM_ConfigClockSource+0x62e>
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	2b0a      	cmp	r3, #10
 800b7fa:	d004      	beq.n	800b806 <HAL_TIM_ConfigClockSource+0x62e>
 800b7fc:	f241 6117 	movw	r1, #5655	@ 0x1617
 800b800:	4814      	ldr	r0, [pc, #80]	@ (800b854 <HAL_TIM_ConfigClockSource+0x67c>)
 800b802:	f7f6 fee3 	bl	80025cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	2b0f      	cmp	r3, #15
 800b80c:	d904      	bls.n	800b818 <HAL_TIM_ConfigClockSource+0x640>
 800b80e:	f241 6118 	movw	r1, #5656	@ 0x1618
 800b812:	4810      	ldr	r0, [pc, #64]	@ (800b854 <HAL_TIM_ConfigClockSource+0x67c>)
 800b814:	f7f6 feda 	bl	80025cc <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b824:	461a      	mov	r2, r3
 800b826:	f000 fcb2 	bl	800c18e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2160      	movs	r1, #96	@ 0x60
 800b830:	4618      	mov	r0, r3
 800b832:	f000 fcdc 	bl	800c1ee <TIM_ITRx_SetConfig>
      break;
 800b836:	e388      	b.n	800bf4a <HAL_TIM_ConfigClockSource+0xd72>
 800b838:	40012c00 	.word	0x40012c00
 800b83c:	40000400 	.word	0x40000400
 800b840:	40000800 	.word	0x40000800
 800b844:	40000c00 	.word	0x40000c00
 800b848:	40013400 	.word	0x40013400
 800b84c:	40014000 	.word	0x40014000
 800b850:	40015000 	.word	0x40015000
 800b854:	08012b34 	.word	0x08012b34
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a2e      	ldr	r2, [pc, #184]	@ (800b918 <HAL_TIM_ConfigClockSource+0x740>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d027      	beq.n	800b8b2 <HAL_TIM_ConfigClockSource+0x6da>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b86a:	d022      	beq.n	800b8b2 <HAL_TIM_ConfigClockSource+0x6da>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a2a      	ldr	r2, [pc, #168]	@ (800b91c <HAL_TIM_ConfigClockSource+0x744>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d01d      	beq.n	800b8b2 <HAL_TIM_ConfigClockSource+0x6da>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a29      	ldr	r2, [pc, #164]	@ (800b920 <HAL_TIM_ConfigClockSource+0x748>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d018      	beq.n	800b8b2 <HAL_TIM_ConfigClockSource+0x6da>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a27      	ldr	r2, [pc, #156]	@ (800b924 <HAL_TIM_ConfigClockSource+0x74c>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d013      	beq.n	800b8b2 <HAL_TIM_ConfigClockSource+0x6da>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a26      	ldr	r2, [pc, #152]	@ (800b928 <HAL_TIM_ConfigClockSource+0x750>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d00e      	beq.n	800b8b2 <HAL_TIM_ConfigClockSource+0x6da>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a24      	ldr	r2, [pc, #144]	@ (800b92c <HAL_TIM_ConfigClockSource+0x754>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d009      	beq.n	800b8b2 <HAL_TIM_ConfigClockSource+0x6da>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a23      	ldr	r2, [pc, #140]	@ (800b930 <HAL_TIM_ConfigClockSource+0x758>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d004      	beq.n	800b8b2 <HAL_TIM_ConfigClockSource+0x6da>
 800b8a8:	f241 6124 	movw	r1, #5668	@ 0x1624
 800b8ac:	4821      	ldr	r0, [pc, #132]	@ (800b934 <HAL_TIM_ConfigClockSource+0x75c>)
 800b8ae:	f7f6 fe8d 	bl	80025cc <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8ba:	d014      	beq.n	800b8e6 <HAL_TIM_ConfigClockSource+0x70e>
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d010      	beq.n	800b8e6 <HAL_TIM_ConfigClockSource+0x70e>
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d00c      	beq.n	800b8e6 <HAL_TIM_ConfigClockSource+0x70e>
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	d008      	beq.n	800b8e6 <HAL_TIM_ConfigClockSource+0x70e>
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	2b0a      	cmp	r3, #10
 800b8da:	d004      	beq.n	800b8e6 <HAL_TIM_ConfigClockSource+0x70e>
 800b8dc:	f241 6127 	movw	r1, #5671	@ 0x1627
 800b8e0:	4814      	ldr	r0, [pc, #80]	@ (800b934 <HAL_TIM_ConfigClockSource+0x75c>)
 800b8e2:	f7f6 fe73 	bl	80025cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	2b0f      	cmp	r3, #15
 800b8ec:	d904      	bls.n	800b8f8 <HAL_TIM_ConfigClockSource+0x720>
 800b8ee:	f241 6128 	movw	r1, #5672	@ 0x1628
 800b8f2:	4810      	ldr	r0, [pc, #64]	@ (800b934 <HAL_TIM_ConfigClockSource+0x75c>)
 800b8f4:	f7f6 fe6a 	bl	80025cc <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b904:	461a      	mov	r2, r3
 800b906:	f000 fc13 	bl	800c130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2140      	movs	r1, #64	@ 0x40
 800b910:	4618      	mov	r0, r3
 800b912:	f000 fc6c 	bl	800c1ee <TIM_ITRx_SetConfig>
      break;
 800b916:	e318      	b.n	800bf4a <HAL_TIM_ConfigClockSource+0xd72>
 800b918:	40012c00 	.word	0x40012c00
 800b91c:	40000400 	.word	0x40000400
 800b920:	40000800 	.word	0x40000800
 800b924:	40000c00 	.word	0x40000c00
 800b928:	40013400 	.word	0x40013400
 800b92c:	40014000 	.word	0x40014000
 800b930:	40015000 	.word	0x40015000
 800b934:	08012b34 	.word	0x08012b34
    case TIM_CLOCKSOURCE_ITR10:
#endif /* HRTIM1 */
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4a9c      	ldr	r2, [pc, #624]	@ (800bbb0 <HAL_TIM_ConfigClockSource+0x9d8>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d158      	bne.n	800b9f4 <HAL_TIM_ConfigClockSource+0x81c>
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b94a:	f000 82f1 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2b70      	cmp	r3, #112	@ 0x70
 800b954:	f000 82ec 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b960:	f000 82e6 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2b40      	cmp	r3, #64	@ 0x40
 800b96a:	f000 82e1 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b50      	cmp	r3, #80	@ 0x50
 800b974:	f000 82dc 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2b60      	cmp	r3, #96	@ 0x60
 800b97e:	f000 82d7 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2b10      	cmp	r3, #16
 800b988:	f000 82d2 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2b20      	cmp	r3, #32
 800b992:	f000 82cd 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2b30      	cmp	r3, #48	@ 0x30
 800b99c:	f000 82c8 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9a8:	f000 82c2 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b9b4:	f000 82bc 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a7d      	ldr	r2, [pc, #500]	@ (800bbb4 <HAL_TIM_ConfigClockSource+0x9dc>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	f000 82b6 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a7b      	ldr	r2, [pc, #492]	@ (800bbb8 <HAL_TIM_ConfigClockSource+0x9e0>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	f000 82b0 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a79      	ldr	r2, [pc, #484]	@ (800bbbc <HAL_TIM_ConfigClockSource+0x9e4>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	f000 82aa 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a77      	ldr	r2, [pc, #476]	@ (800bbc0 <HAL_TIM_ConfigClockSource+0x9e8>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	f000 82a4 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a75      	ldr	r2, [pc, #468]	@ (800bbc4 <HAL_TIM_ConfigClockSource+0x9ec>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	f000 829e 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9fc:	d15e      	bne.n	800babc <HAL_TIM_ConfigClockSource+0x8e4>
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba06:	f000 8293 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b70      	cmp	r3, #112	@ 0x70
 800ba10:	f000 828e 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba1c:	f000 8288 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b40      	cmp	r3, #64	@ 0x40
 800ba26:	f000 8283 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b50      	cmp	r3, #80	@ 0x50
 800ba30:	f000 827e 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2b60      	cmp	r3, #96	@ 0x60
 800ba3a:	f000 8279 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f000 8274 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b20      	cmp	r3, #32
 800ba4e:	f000 826f 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2b30      	cmp	r3, #48	@ 0x30
 800ba58:	f000 826a 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba64:	f000 8264 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ba70:	f000 825e 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a4e      	ldr	r2, [pc, #312]	@ (800bbb4 <HAL_TIM_ConfigClockSource+0x9dc>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	f000 8258 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a4c      	ldr	r2, [pc, #304]	@ (800bbb8 <HAL_TIM_ConfigClockSource+0x9e0>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	f000 8252 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a4a      	ldr	r2, [pc, #296]	@ (800bbbc <HAL_TIM_ConfigClockSource+0x9e4>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	f000 824c 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a48      	ldr	r2, [pc, #288]	@ (800bbc0 <HAL_TIM_ConfigClockSource+0x9e8>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	f000 8246 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a46      	ldr	r2, [pc, #280]	@ (800bbc4 <HAL_TIM_ConfigClockSource+0x9ec>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	f000 8240 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a44      	ldr	r2, [pc, #272]	@ (800bbc8 <HAL_TIM_ConfigClockSource+0x9f0>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	f000 823a 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a42      	ldr	r2, [pc, #264]	@ (800bbcc <HAL_TIM_ConfigClockSource+0x9f4>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d158      	bne.n	800bb78 <HAL_TIM_ConfigClockSource+0x9a0>
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bace:	f000 822f 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2b70      	cmp	r3, #112	@ 0x70
 800bad8:	f000 822a 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bae4:	f000 8224 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b40      	cmp	r3, #64	@ 0x40
 800baee:	f000 821f 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b50      	cmp	r3, #80	@ 0x50
 800baf8:	f000 821a 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b60      	cmp	r3, #96	@ 0x60
 800bb02:	f000 8215 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f000 8210 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b10      	cmp	r3, #16
 800bb16:	f000 820b 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b30      	cmp	r3, #48	@ 0x30
 800bb20:	f000 8206 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb2c:	f000 8200 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bb38:	f000 81fa 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a1c      	ldr	r2, [pc, #112]	@ (800bbb4 <HAL_TIM_ConfigClockSource+0x9dc>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	f000 81f4 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a1a      	ldr	r2, [pc, #104]	@ (800bbb8 <HAL_TIM_ConfigClockSource+0x9e0>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	f000 81ee 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4a18      	ldr	r2, [pc, #96]	@ (800bbbc <HAL_TIM_ConfigClockSource+0x9e4>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	f000 81e8 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a16      	ldr	r2, [pc, #88]	@ (800bbc0 <HAL_TIM_ConfigClockSource+0x9e8>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	f000 81e2 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4a14      	ldr	r2, [pc, #80]	@ (800bbc4 <HAL_TIM_ConfigClockSource+0x9ec>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	f000 81dc 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a14      	ldr	r2, [pc, #80]	@ (800bbd0 <HAL_TIM_ConfigClockSource+0x9f8>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d16b      	bne.n	800bc5a <HAL_TIM_ConfigClockSource+0xa82>
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb8a:	f000 81d1 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b70      	cmp	r3, #112	@ 0x70
 800bb94:	f000 81cc 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bba0:	f000 81c6 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2b40      	cmp	r3, #64	@ 0x40
 800bbaa:	f000 81c1 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bbae:	e011      	b.n	800bbd4 <HAL_TIM_ConfigClockSource+0x9fc>
 800bbb0:	40012c00 	.word	0x40012c00
 800bbb4:	00100020 	.word	0x00100020
 800bbb8:	00100030 	.word	0x00100030
 800bbbc:	00100040 	.word	0x00100040
 800bbc0:	00100050 	.word	0x00100050
 800bbc4:	00100060 	.word	0x00100060
 800bbc8:	00100070 	.word	0x00100070
 800bbcc:	40000400 	.word	0x40000400
 800bbd0:	40000800 	.word	0x40000800
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b50      	cmp	r3, #80	@ 0x50
 800bbda:	f000 81a9 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b60      	cmp	r3, #96	@ 0x60
 800bbe4:	f000 81a4 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f000 819f 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b10      	cmp	r3, #16
 800bbf8:	f000 819a 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b20      	cmp	r3, #32
 800bc02:	f000 8195 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc0e:	f000 818f 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bc1a:	f000 8189 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a98      	ldr	r2, [pc, #608]	@ (800be84 <HAL_TIM_ConfigClockSource+0xcac>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	f000 8183 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a96      	ldr	r2, [pc, #600]	@ (800be88 <HAL_TIM_ConfigClockSource+0xcb0>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	f000 817d 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a94      	ldr	r2, [pc, #592]	@ (800be8c <HAL_TIM_ConfigClockSource+0xcb4>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	f000 8177 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a92      	ldr	r2, [pc, #584]	@ (800be90 <HAL_TIM_ConfigClockSource+0xcb8>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	f000 8171 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a90      	ldr	r2, [pc, #576]	@ (800be94 <HAL_TIM_ConfigClockSource+0xcbc>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	f000 816b 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a8e      	ldr	r2, [pc, #568]	@ (800be98 <HAL_TIM_ConfigClockSource+0xcc0>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d157      	bne.n	800bd14 <HAL_TIM_ConfigClockSource+0xb3c>
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc6c:	f000 8160 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b70      	cmp	r3, #112	@ 0x70
 800bc76:	f000 815b 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc82:	f000 8155 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2b40      	cmp	r3, #64	@ 0x40
 800bc8c:	f000 8150 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2b50      	cmp	r3, #80	@ 0x50
 800bc96:	f000 814b 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b60      	cmp	r3, #96	@ 0x60
 800bca0:	f000 8146 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	f000 8141 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2b10      	cmp	r3, #16
 800bcb4:	f000 813c 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2b20      	cmp	r3, #32
 800bcbe:	f000 8137 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b30      	cmp	r3, #48	@ 0x30
 800bcc8:	f000 8132 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bcd4:	f000 812c 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a69      	ldr	r2, [pc, #420]	@ (800be84 <HAL_TIM_ConfigClockSource+0xcac>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	f000 8126 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a67      	ldr	r2, [pc, #412]	@ (800be88 <HAL_TIM_ConfigClockSource+0xcb0>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	f000 8120 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a65      	ldr	r2, [pc, #404]	@ (800be8c <HAL_TIM_ConfigClockSource+0xcb4>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	f000 811a 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a63      	ldr	r2, [pc, #396]	@ (800be90 <HAL_TIM_ConfigClockSource+0xcb8>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	f000 8114 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a61      	ldr	r2, [pc, #388]	@ (800be94 <HAL_TIM_ConfigClockSource+0xcbc>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	f000 810e 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a60      	ldr	r2, [pc, #384]	@ (800be9c <HAL_TIM_ConfigClockSource+0xcc4>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d157      	bne.n	800bdce <HAL_TIM_ConfigClockSource+0xbf6>
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd26:	f000 8103 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2b70      	cmp	r3, #112	@ 0x70
 800bd30:	f000 80fe 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd3c:	f000 80f8 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2b40      	cmp	r3, #64	@ 0x40
 800bd46:	f000 80f3 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b50      	cmp	r3, #80	@ 0x50
 800bd50:	f000 80ee 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2b60      	cmp	r3, #96	@ 0x60
 800bd5a:	f000 80e9 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	f000 80e4 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b10      	cmp	r3, #16
 800bd6e:	f000 80df 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2b20      	cmp	r3, #32
 800bd78:	f000 80da 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2b30      	cmp	r3, #48	@ 0x30
 800bd82:	f000 80d5 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd8e:	f000 80cf 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a3b      	ldr	r2, [pc, #236]	@ (800be84 <HAL_TIM_ConfigClockSource+0xcac>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	f000 80c9 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4a39      	ldr	r2, [pc, #228]	@ (800be88 <HAL_TIM_ConfigClockSource+0xcb0>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	f000 80c3 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a37      	ldr	r2, [pc, #220]	@ (800be8c <HAL_TIM_ConfigClockSource+0xcb4>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	f000 80bd 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a35      	ldr	r2, [pc, #212]	@ (800be90 <HAL_TIM_ConfigClockSource+0xcb8>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	f000 80b7 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a33      	ldr	r2, [pc, #204]	@ (800be94 <HAL_TIM_ConfigClockSource+0xcbc>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	f000 80b1 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a33      	ldr	r2, [pc, #204]	@ (800bea0 <HAL_TIM_ConfigClockSource+0xcc8>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d146      	bne.n	800be66 <HAL_TIM_ConfigClockSource+0xc8e>
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bde0:	f000 80a6 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b40      	cmp	r3, #64	@ 0x40
 800bdea:	f000 80a1 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2b50      	cmp	r3, #80	@ 0x50
 800bdf4:	f000 809c 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2b60      	cmp	r3, #96	@ 0x60
 800bdfe:	f000 8097 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	f000 8092 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b10      	cmp	r3, #16
 800be12:	f000 808d 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2b20      	cmp	r3, #32
 800be1c:	f000 8088 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b30      	cmp	r3, #48	@ 0x30
 800be26:	f000 8083 	beq.w	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be32:	d07d      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800be3c:	d078      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a11      	ldr	r2, [pc, #68]	@ (800be88 <HAL_TIM_ConfigClockSource+0xcb0>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d073      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a0f      	ldr	r2, [pc, #60]	@ (800be8c <HAL_TIM_ConfigClockSource+0xcb4>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d06e      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a0e      	ldr	r2, [pc, #56]	@ (800be90 <HAL_TIM_ConfigClockSource+0xcb8>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d069      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a0c      	ldr	r2, [pc, #48]	@ (800be94 <HAL_TIM_ConfigClockSource+0xcbc>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d064      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a0e      	ldr	r2, [pc, #56]	@ (800bea4 <HAL_TIM_ConfigClockSource+0xccc>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d15a      	bne.n	800bf26 <HAL_TIM_ConfigClockSource+0xd4e>
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be78:	d05a      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b70      	cmp	r3, #112	@ 0x70
 800be80:	d056      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800be82:	e011      	b.n	800bea8 <HAL_TIM_ConfigClockSource+0xcd0>
 800be84:	00100020 	.word	0x00100020
 800be88:	00100030 	.word	0x00100030
 800be8c:	00100040 	.word	0x00100040
 800be90:	00100050 	.word	0x00100050
 800be94:	00100060 	.word	0x00100060
 800be98:	40000c00 	.word	0x40000c00
 800be9c:	40013400 	.word	0x40013400
 800bea0:	40014000 	.word	0x40014000
 800bea4:	40015000 	.word	0x40015000
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800beb0:	d03e      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b40      	cmp	r3, #64	@ 0x40
 800beb8:	d03a      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	2b50      	cmp	r3, #80	@ 0x50
 800bec0:	d036      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2b60      	cmp	r3, #96	@ 0x60
 800bec8:	d032      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d02e      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2b10      	cmp	r3, #16
 800bed8:	d02a      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	2b20      	cmp	r3, #32
 800bee0:	d026      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b30      	cmp	r3, #48	@ 0x30
 800bee8:	d022      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bef2:	d01d      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800befc:	d018      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a18      	ldr	r2, [pc, #96]	@ (800bf64 <HAL_TIM_ConfigClockSource+0xd8c>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d013      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a16      	ldr	r2, [pc, #88]	@ (800bf68 <HAL_TIM_ConfigClockSource+0xd90>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d00e      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a15      	ldr	r2, [pc, #84]	@ (800bf6c <HAL_TIM_ConfigClockSource+0xd94>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d009      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a13      	ldr	r2, [pc, #76]	@ (800bf70 <HAL_TIM_ConfigClockSource+0xd98>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d004      	beq.n	800bf30 <HAL_TIM_ConfigClockSource+0xd58>
 800bf26:	f241 6145 	movw	r1, #5701	@ 0x1645
 800bf2a:	4812      	ldr	r0, [pc, #72]	@ (800bf74 <HAL_TIM_ConfigClockSource+0xd9c>)
 800bf2c:	f7f6 fb4e 	bl	80025cc <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4619      	mov	r1, r3
 800bf3a:	4610      	mov	r0, r2
 800bf3c:	f000 f957 	bl	800c1ee <TIM_ITRx_SetConfig>
      break;
 800bf40:	e003      	b.n	800bf4a <HAL_TIM_ConfigClockSource+0xd72>
    }

    default:
      status = HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	73fb      	strb	r3, [r7, #15]
      break;
 800bf46:	e000      	b.n	800bf4a <HAL_TIM_ConfigClockSource+0xd72>
      break;
 800bf48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bf5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3710      	adds	r7, #16
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	00100020 	.word	0x00100020
 800bf68:	00100030 	.word	0x00100030
 800bf6c:	00100040 	.word	0x00100040
 800bf70:	00100060 	.word	0x00100060
 800bf74:	08012b34 	.word	0x08012b34

0800bf78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf80:	bf00      	nop
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bfa8:	bf00      	nop
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bfbc:	bf00      	nop
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4a4c      	ldr	r2, [pc, #304]	@ (800c10c <TIM_Base_SetConfig+0x144>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d017      	beq.n	800c010 <TIM_Base_SetConfig+0x48>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfe6:	d013      	beq.n	800c010 <TIM_Base_SetConfig+0x48>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4a49      	ldr	r2, [pc, #292]	@ (800c110 <TIM_Base_SetConfig+0x148>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d00f      	beq.n	800c010 <TIM_Base_SetConfig+0x48>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	4a48      	ldr	r2, [pc, #288]	@ (800c114 <TIM_Base_SetConfig+0x14c>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d00b      	beq.n	800c010 <TIM_Base_SetConfig+0x48>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	4a47      	ldr	r2, [pc, #284]	@ (800c118 <TIM_Base_SetConfig+0x150>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d007      	beq.n	800c010 <TIM_Base_SetConfig+0x48>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	4a46      	ldr	r2, [pc, #280]	@ (800c11c <TIM_Base_SetConfig+0x154>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d003      	beq.n	800c010 <TIM_Base_SetConfig+0x48>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	4a45      	ldr	r2, [pc, #276]	@ (800c120 <TIM_Base_SetConfig+0x158>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d108      	bne.n	800c022 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	4313      	orrs	r3, r2
 800c020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4a39      	ldr	r2, [pc, #228]	@ (800c10c <TIM_Base_SetConfig+0x144>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d023      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c030:	d01f      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4a36      	ldr	r2, [pc, #216]	@ (800c110 <TIM_Base_SetConfig+0x148>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d01b      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4a35      	ldr	r2, [pc, #212]	@ (800c114 <TIM_Base_SetConfig+0x14c>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d017      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	4a34      	ldr	r2, [pc, #208]	@ (800c118 <TIM_Base_SetConfig+0x150>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d013      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4a33      	ldr	r2, [pc, #204]	@ (800c11c <TIM_Base_SetConfig+0x154>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d00f      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	4a33      	ldr	r2, [pc, #204]	@ (800c124 <TIM_Base_SetConfig+0x15c>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d00b      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	4a32      	ldr	r2, [pc, #200]	@ (800c128 <TIM_Base_SetConfig+0x160>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d007      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4a31      	ldr	r2, [pc, #196]	@ (800c12c <TIM_Base_SetConfig+0x164>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d003      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	4a2c      	ldr	r2, [pc, #176]	@ (800c120 <TIM_Base_SetConfig+0x158>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d108      	bne.n	800c084 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	4313      	orrs	r3, r2
 800c082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	695b      	ldr	r3, [r3, #20]
 800c08e:	4313      	orrs	r3, r2
 800c090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	689a      	ldr	r2, [r3, #8]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a18      	ldr	r2, [pc, #96]	@ (800c10c <TIM_Base_SetConfig+0x144>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d013      	beq.n	800c0d8 <TIM_Base_SetConfig+0x110>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a1a      	ldr	r2, [pc, #104]	@ (800c11c <TIM_Base_SetConfig+0x154>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d00f      	beq.n	800c0d8 <TIM_Base_SetConfig+0x110>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	4a1a      	ldr	r2, [pc, #104]	@ (800c124 <TIM_Base_SetConfig+0x15c>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d00b      	beq.n	800c0d8 <TIM_Base_SetConfig+0x110>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4a19      	ldr	r2, [pc, #100]	@ (800c128 <TIM_Base_SetConfig+0x160>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d007      	beq.n	800c0d8 <TIM_Base_SetConfig+0x110>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4a18      	ldr	r2, [pc, #96]	@ (800c12c <TIM_Base_SetConfig+0x164>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d003      	beq.n	800c0d8 <TIM_Base_SetConfig+0x110>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4a13      	ldr	r2, [pc, #76]	@ (800c120 <TIM_Base_SetConfig+0x158>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d103      	bne.n	800c0e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	691a      	ldr	r2, [r3, #16]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	691b      	ldr	r3, [r3, #16]
 800c0ea:	f003 0301 	and.w	r3, r3, #1
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d105      	bne.n	800c0fe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	691b      	ldr	r3, [r3, #16]
 800c0f6:	f023 0201 	bic.w	r2, r3, #1
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	611a      	str	r2, [r3, #16]
  }
}
 800c0fe:	bf00      	nop
 800c100:	3714      	adds	r7, #20
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	40012c00 	.word	0x40012c00
 800c110:	40000400 	.word	0x40000400
 800c114:	40000800 	.word	0x40000800
 800c118:	40000c00 	.word	0x40000c00
 800c11c:	40013400 	.word	0x40013400
 800c120:	40015000 	.word	0x40015000
 800c124:	40014000 	.word	0x40014000
 800c128:	40014400 	.word	0x40014400
 800c12c:	40014800 	.word	0x40014800

0800c130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c130:	b480      	push	{r7}
 800c132:	b087      	sub	sp, #28
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6a1b      	ldr	r3, [r3, #32]
 800c140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	f023 0201 	bic.w	r2, r3, #1
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	699b      	ldr	r3, [r3, #24]
 800c152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c15a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	011b      	lsls	r3, r3, #4
 800c160:	693a      	ldr	r2, [r7, #16]
 800c162:	4313      	orrs	r3, r2
 800c164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	f023 030a 	bic.w	r3, r3, #10
 800c16c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	4313      	orrs	r3, r2
 800c174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	693a      	ldr	r2, [r7, #16]
 800c17a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	697a      	ldr	r2, [r7, #20]
 800c180:	621a      	str	r2, [r3, #32]
}
 800c182:	bf00      	nop
 800c184:	371c      	adds	r7, #28
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr

0800c18e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c18e:	b480      	push	{r7}
 800c190:	b087      	sub	sp, #28
 800c192:	af00      	add	r7, sp, #0
 800c194:	60f8      	str	r0, [r7, #12]
 800c196:	60b9      	str	r1, [r7, #8]
 800c198:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	6a1b      	ldr	r3, [r3, #32]
 800c19e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6a1b      	ldr	r3, [r3, #32]
 800c1a4:	f023 0210 	bic.w	r2, r3, #16
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	699b      	ldr	r3, [r3, #24]
 800c1b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c1b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	031b      	lsls	r3, r3, #12
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c1ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	011b      	lsls	r3, r3, #4
 800c1d0:	697a      	ldr	r2, [r7, #20]
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	693a      	ldr	r2, [r7, #16]
 800c1da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	621a      	str	r2, [r3, #32]
}
 800c1e2:	bf00      	nop
 800c1e4:	371c      	adds	r7, #28
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr

0800c1ee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c1ee:	b480      	push	{r7}
 800c1f0:	b085      	sub	sp, #20
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	689b      	ldr	r3, [r3, #8]
 800c1fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c204:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c20a:	683a      	ldr	r2, [r7, #0]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	4313      	orrs	r3, r2
 800c210:	f043 0307 	orr.w	r3, r3, #7
 800c214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	609a      	str	r2, [r3, #8]
}
 800c21c:	bf00      	nop
 800c21e:	3714      	adds	r7, #20
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c228:	b480      	push	{r7}
 800c22a:	b087      	sub	sp, #28
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
 800c234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	021a      	lsls	r2, r3, #8
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	431a      	orrs	r2, r3
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	4313      	orrs	r3, r2
 800c250:	697a      	ldr	r2, [r7, #20]
 800c252:	4313      	orrs	r3, r2
 800c254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	697a      	ldr	r2, [r7, #20]
 800c25a:	609a      	str	r2, [r3, #8]
}
 800c25c:	bf00      	nop
 800c25e:	371c      	adds	r7, #28
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a39      	ldr	r2, [pc, #228]	@ (800c35c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d031      	beq.n	800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c284:	d02c      	beq.n	800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a35      	ldr	r2, [pc, #212]	@ (800c360 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d027      	beq.n	800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a33      	ldr	r2, [pc, #204]	@ (800c364 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d022      	beq.n	800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a32      	ldr	r2, [pc, #200]	@ (800c368 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d01d      	beq.n	800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a30      	ldr	r2, [pc, #192]	@ (800c36c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d018      	beq.n	800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a2f      	ldr	r2, [pc, #188]	@ (800c370 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d013      	beq.n	800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a2d      	ldr	r2, [pc, #180]	@ (800c374 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d00e      	beq.n	800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a2c      	ldr	r2, [pc, #176]	@ (800c378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d009      	beq.n	800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a2a      	ldr	r2, [pc, #168]	@ (800c37c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d004      	beq.n	800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800c2d6:	f640 018b 	movw	r1, #2187	@ 0x88b
 800c2da:	4829      	ldr	r0, [pc, #164]	@ (800c380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c2dc:	f7f6 f976 	bl	80025cc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d025      	beq.n	800c334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b10      	cmp	r3, #16
 800c2ee:	d021      	beq.n	800c334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	2b20      	cmp	r3, #32
 800c2f6:	d01d      	beq.n	800c334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2b30      	cmp	r3, #48	@ 0x30
 800c2fe:	d019      	beq.n	800c334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b40      	cmp	r3, #64	@ 0x40
 800c306:	d015      	beq.n	800c334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b50      	cmp	r3, #80	@ 0x50
 800c30e:	d011      	beq.n	800c334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b60      	cmp	r3, #96	@ 0x60
 800c316:	d00d      	beq.n	800c334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	2b70      	cmp	r3, #112	@ 0x70
 800c31e:	d009      	beq.n	800c334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c328:	d004      	beq.n	800c334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c32a:	f640 018c 	movw	r1, #2188	@ 0x88c
 800c32e:	4814      	ldr	r0, [pc, #80]	@ (800c380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c330:	f7f6 f94c 	bl	80025cc <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	2b80      	cmp	r3, #128	@ 0x80
 800c33a:	d008      	beq.n	800c34e <HAL_TIMEx_MasterConfigSynchronization+0xe6>
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d004      	beq.n	800c34e <HAL_TIMEx_MasterConfigSynchronization+0xe6>
 800c344:	f640 018d 	movw	r1, #2189	@ 0x88d
 800c348:	480d      	ldr	r0, [pc, #52]	@ (800c380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c34a:	f7f6 f93f 	bl	80025cc <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c354:	2b01      	cmp	r3, #1
 800c356:	d115      	bne.n	800c384 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c358:	2302      	movs	r3, #2
 800c35a:	e0e1      	b.n	800c520 <HAL_TIMEx_MasterConfigSynchronization+0x2b8>
 800c35c:	40012c00 	.word	0x40012c00
 800c360:	40000400 	.word	0x40000400
 800c364:	40000800 	.word	0x40000800
 800c368:	40000c00 	.word	0x40000c00
 800c36c:	40001000 	.word	0x40001000
 800c370:	40001400 	.word	0x40001400
 800c374:	40013400 	.word	0x40013400
 800c378:	40014000 	.word	0x40014000
 800c37c:	40015000 	.word	0x40015000
 800c380:	08012ba4 	.word	0x08012ba4
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2202      	movs	r2, #2
 800c390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a5f      	ldr	r2, [pc, #380]	@ (800c528 <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d009      	beq.n	800c3c2 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a5e      	ldr	r2, [pc, #376]	@ (800c52c <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d004      	beq.n	800c3c2 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a5c      	ldr	r2, [pc, #368]	@ (800c530 <HAL_TIMEx_MasterConfigSynchronization+0x2c8>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d161      	bne.n	800c486 <HAL_TIMEx_MasterConfigSynchronization+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d054      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c3d2:	d04f      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c3dc:	d04a      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c3e6:	d045      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c3f0:	d040      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800c3fa:	d03b      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c404:	d036      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c40e:	d031      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800c418:	d02c      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c422:	d027      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800c42c:	d022      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c436:	d01d      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800c440:	d018      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c44a:	d013      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800c454:	d00e      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800c45e:	d009      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800c468:	d004      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c46a:	f640 019f 	movw	r1, #2207	@ 0x89f
 800c46e:	4831      	ldr	r0, [pc, #196]	@ (800c534 <HAL_TIMEx_MasterConfigSynchronization+0x2cc>)
 800c470:	f7f6 f8ac 	bl	80025cc <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c47a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	4313      	orrs	r3, r2
 800c484:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c48c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c490:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	4313      	orrs	r3, r2
 800c49a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a1f      	ldr	r2, [pc, #124]	@ (800c528 <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d022      	beq.n	800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4b6:	d01d      	beq.n	800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a1e      	ldr	r2, [pc, #120]	@ (800c538 <HAL_TIMEx_MasterConfigSynchronization+0x2d0>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d018      	beq.n	800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a1d      	ldr	r2, [pc, #116]	@ (800c53c <HAL_TIMEx_MasterConfigSynchronization+0x2d4>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d013      	beq.n	800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a1b      	ldr	r2, [pc, #108]	@ (800c540 <HAL_TIMEx_MasterConfigSynchronization+0x2d8>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d00e      	beq.n	800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a14      	ldr	r2, [pc, #80]	@ (800c52c <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d009      	beq.n	800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a17      	ldr	r2, [pc, #92]	@ (800c544 <HAL_TIMEx_MasterConfigSynchronization+0x2dc>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d004      	beq.n	800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4a10      	ldr	r2, [pc, #64]	@ (800c530 <HAL_TIMEx_MasterConfigSynchronization+0x2c8>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d10c      	bne.n	800c50e <HAL_TIMEx_MasterConfigSynchronization+0x2a6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	4313      	orrs	r3, r2
 800c504:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	68ba      	ldr	r2, [r7, #8]
 800c50c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2201      	movs	r2, #1
 800c512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2200      	movs	r2, #0
 800c51a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c51e:	2300      	movs	r3, #0
}
 800c520:	4618      	mov	r0, r3
 800c522:	3710      	adds	r7, #16
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}
 800c528:	40012c00 	.word	0x40012c00
 800c52c:	40013400 	.word	0x40013400
 800c530:	40015000 	.word	0x40015000
 800c534:	08012ba4 	.word	0x08012ba4
 800c538:	40000400 	.word	0x40000400
 800c53c:	40000800 	.word	0x40000800
 800c540:	40000c00 	.word	0x40000c00
 800c544:	40014000 	.word	0x40014000

0800c548 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c550:	bf00      	nop
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c564:	bf00      	nop
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c578:	bf00      	nop
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c58c:	bf00      	nop
 800c58e:	370c      	adds	r7, #12
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c5a0:	bf00      	nop
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c5b4:	bf00      	nop
 800c5b6:	370c      	adds	r7, #12
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr

0800c5c0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c5c8:	bf00      	nop
 800c5ca:	370c      	adds	r7, #12
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c5e4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c5e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	b29a      	uxth	r2, r3
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3714      	adds	r7, #20
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr

0800c602 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c602:	b480      	push	{r7}
 800c604:	b085      	sub	sp, #20
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c60a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c60e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c616:	b29a      	uxth	r2, r3
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	43db      	mvns	r3, r3
 800c61e:	b29b      	uxth	r3, r3
 800c620:	4013      	ands	r3, r2
 800c622:	b29a      	uxth	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3714      	adds	r7, #20
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	1d3b      	adds	r3, r7, #4
 800c642:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2201      	movs	r2, #1
 800c64a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2200      	movs	r2, #0
 800c652:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2200      	movs	r2, #0
 800c65a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2200      	movs	r2, #0
 800c662:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c666:	2300      	movs	r3, #0
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3714      	adds	r7, #20
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c674:	b480      	push	{r7}
 800c676:	b09d      	sub	sp, #116	@ 0x74
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c67e:	2300      	movs	r3, #0
 800c680:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	4413      	add	r3, r2
 800c68e:	881b      	ldrh	r3, [r3, #0]
 800c690:	b29b      	uxth	r3, r3
 800c692:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800c696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c69a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	78db      	ldrb	r3, [r3, #3]
 800c6a2:	2b03      	cmp	r3, #3
 800c6a4:	d81f      	bhi.n	800c6e6 <USB_ActivateEndpoint+0x72>
 800c6a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c6ac <USB_ActivateEndpoint+0x38>)
 800c6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ac:	0800c6bd 	.word	0x0800c6bd
 800c6b0:	0800c6d9 	.word	0x0800c6d9
 800c6b4:	0800c6ef 	.word	0x0800c6ef
 800c6b8:	0800c6cb 	.word	0x0800c6cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c6bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c6c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c6c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c6c8:	e012      	b.n	800c6f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c6ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c6ce:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c6d2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c6d6:	e00b      	b.n	800c6f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c6d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c6dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c6e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c6e4:	e004      	b.n	800c6f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800c6ec:	e000      	b.n	800c6f0 <USB_ActivateEndpoint+0x7c>
      break;
 800c6ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	441a      	add	r2, r3
 800c6fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c6fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c70a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c70e:	b29b      	uxth	r3, r3
 800c710:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	4413      	add	r3, r2
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	b29b      	uxth	r3, r3
 800c720:	b21b      	sxth	r3, r3
 800c722:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c72a:	b21a      	sxth	r2, r3
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	b21b      	sxth	r3, r3
 800c732:	4313      	orrs	r3, r2
 800c734:	b21b      	sxth	r3, r3
 800c736:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	441a      	add	r2, r3
 800c744:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c74c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c750:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c758:	b29b      	uxth	r3, r3
 800c75a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	7b1b      	ldrb	r3, [r3, #12]
 800c760:	2b00      	cmp	r3, #0
 800c762:	f040 8178 	bne.w	800ca56 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	785b      	ldrb	r3, [r3, #1]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f000 8084 	beq.w	800c878 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	61bb      	str	r3, [r7, #24]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	461a      	mov	r2, r3
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	4413      	add	r3, r2
 800c782:	61bb      	str	r3, [r7, #24]
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	00da      	lsls	r2, r3, #3
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	4413      	add	r3, r2
 800c78e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c792:	617b      	str	r3, [r7, #20]
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	88db      	ldrh	r3, [r3, #6]
 800c798:	085b      	lsrs	r3, r3, #1
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	005b      	lsls	r3, r3, #1
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	827b      	strh	r3, [r7, #18]
 800c7b2:	8a7b      	ldrh	r3, [r7, #18]
 800c7b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d01b      	beq.n	800c7f4 <USB_ActivateEndpoint+0x180>
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	4413      	add	r3, r2
 800c7c6:	881b      	ldrh	r3, [r3, #0]
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7d2:	823b      	strh	r3, [r7, #16]
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	441a      	add	r2, r3
 800c7de:	8a3b      	ldrh	r3, [r7, #16]
 800c7e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	78db      	ldrb	r3, [r3, #3]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d020      	beq.n	800c83e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	4413      	add	r3, r2
 800c806:	881b      	ldrh	r3, [r3, #0]
 800c808:	b29b      	uxth	r3, r3
 800c80a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c80e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c812:	81bb      	strh	r3, [r7, #12]
 800c814:	89bb      	ldrh	r3, [r7, #12]
 800c816:	f083 0320 	eor.w	r3, r3, #32
 800c81a:	81bb      	strh	r3, [r7, #12]
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	441a      	add	r2, r3
 800c826:	89bb      	ldrh	r3, [r7, #12]
 800c828:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c82c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c830:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c838:	b29b      	uxth	r3, r3
 800c83a:	8013      	strh	r3, [r2, #0]
 800c83c:	e2d5      	b.n	800cdea <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	4413      	add	r3, r2
 800c848:	881b      	ldrh	r3, [r3, #0]
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c854:	81fb      	strh	r3, [r7, #14]
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	441a      	add	r2, r3
 800c860:	89fb      	ldrh	r3, [r7, #14]
 800c862:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c866:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c86a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c86e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c872:	b29b      	uxth	r3, r3
 800c874:	8013      	strh	r3, [r2, #0]
 800c876:	e2b8      	b.n	800cdea <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c882:	b29b      	uxth	r3, r3
 800c884:	461a      	mov	r2, r3
 800c886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c888:	4413      	add	r3, r2
 800c88a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	00da      	lsls	r2, r3, #3
 800c892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c894:	4413      	add	r3, r2
 800c896:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c89a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	88db      	ldrh	r3, [r3, #6]
 800c8a0:	085b      	lsrs	r3, r3, #1
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	005b      	lsls	r3, r3, #1
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8aa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8bc:	4413      	add	r3, r2
 800c8be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	00da      	lsls	r2, r3, #3
 800c8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8c8:	4413      	add	r3, r2
 800c8ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c8ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d2:	881b      	ldrh	r3, [r3, #0]
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8de:	801a      	strh	r2, [r3, #0]
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	2b3e      	cmp	r3, #62	@ 0x3e
 800c8e6:	d91d      	bls.n	800c924 <USB_ActivateEndpoint+0x2b0>
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	691b      	ldr	r3, [r3, #16]
 800c8ec:	095b      	lsrs	r3, r3, #5
 800c8ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	f003 031f 	and.w	r3, r3, #31
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d102      	bne.n	800c902 <USB_ActivateEndpoint+0x28e>
 800c8fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c8fe:	3b01      	subs	r3, #1
 800c900:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c904:	881b      	ldrh	r3, [r3, #0]
 800c906:	b29a      	uxth	r2, r3
 800c908:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	029b      	lsls	r3, r3, #10
 800c90e:	b29b      	uxth	r3, r3
 800c910:	4313      	orrs	r3, r2
 800c912:	b29b      	uxth	r3, r3
 800c914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c920:	801a      	strh	r2, [r3, #0]
 800c922:	e026      	b.n	800c972 <USB_ActivateEndpoint+0x2fe>
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	691b      	ldr	r3, [r3, #16]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10a      	bne.n	800c942 <USB_ActivateEndpoint+0x2ce>
 800c92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c92e:	881b      	ldrh	r3, [r3, #0]
 800c930:	b29b      	uxth	r3, r3
 800c932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c93e:	801a      	strh	r2, [r3, #0]
 800c940:	e017      	b.n	800c972 <USB_ActivateEndpoint+0x2fe>
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	691b      	ldr	r3, [r3, #16]
 800c946:	085b      	lsrs	r3, r3, #1
 800c948:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	691b      	ldr	r3, [r3, #16]
 800c94e:	f003 0301 	and.w	r3, r3, #1
 800c952:	2b00      	cmp	r3, #0
 800c954:	d002      	beq.n	800c95c <USB_ActivateEndpoint+0x2e8>
 800c956:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c958:	3301      	adds	r3, #1
 800c95a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95e:	881b      	ldrh	r3, [r3, #0]
 800c960:	b29a      	uxth	r2, r3
 800c962:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c964:	b29b      	uxth	r3, r3
 800c966:	029b      	lsls	r3, r3, #10
 800c968:	b29b      	uxth	r3, r3
 800c96a:	4313      	orrs	r3, r2
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c970:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4413      	add	r3, r2
 800c97c:	881b      	ldrh	r3, [r3, #0]
 800c97e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c980:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c986:	2b00      	cmp	r3, #0
 800c988:	d01b      	beq.n	800c9c2 <USB_ActivateEndpoint+0x34e>
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	009b      	lsls	r3, r3, #2
 800c992:	4413      	add	r3, r2
 800c994:	881b      	ldrh	r3, [r3, #0]
 800c996:	b29b      	uxth	r3, r3
 800c998:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c99c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9a0:	843b      	strh	r3, [r7, #32]
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	441a      	add	r2, r3
 800c9ac:	8c3b      	ldrh	r3, [r7, #32]
 800c9ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c9ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d124      	bne.n	800ca14 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	4413      	add	r3, r2
 800c9d4:	881b      	ldrh	r3, [r3, #0]
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c9dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9e0:	83bb      	strh	r3, [r7, #28]
 800c9e2:	8bbb      	ldrh	r3, [r7, #28]
 800c9e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c9e8:	83bb      	strh	r3, [r7, #28]
 800c9ea:	8bbb      	ldrh	r3, [r7, #28]
 800c9ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c9f0:	83bb      	strh	r3, [r7, #28]
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	441a      	add	r2, r3
 800c9fc:	8bbb      	ldrh	r3, [r7, #28]
 800c9fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	8013      	strh	r3, [r2, #0]
 800ca12:	e1ea      	b.n	800cdea <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	4413      	add	r3, r2
 800ca1e:	881b      	ldrh	r3, [r3, #0]
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ca26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca2a:	83fb      	strh	r3, [r7, #30]
 800ca2c:	8bfb      	ldrh	r3, [r7, #30]
 800ca2e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ca32:	83fb      	strh	r3, [r7, #30]
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	441a      	add	r2, r3
 800ca3e:	8bfb      	ldrh	r3, [r7, #30]
 800ca40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	8013      	strh	r3, [r2, #0]
 800ca54:	e1c9      	b.n	800cdea <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	78db      	ldrb	r3, [r3, #3]
 800ca5a:	2b02      	cmp	r3, #2
 800ca5c:	d11e      	bne.n	800ca9c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	4413      	add	r3, r2
 800ca68:	881b      	ldrh	r3, [r3, #0]
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca74:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	441a      	add	r2, r3
 800ca82:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ca86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca8e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ca92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	8013      	strh	r3, [r2, #0]
 800ca9a:	e01d      	b.n	800cad8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	009b      	lsls	r3, r3, #2
 800caa4:	4413      	add	r3, r2
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800caae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cab2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800cab6:	687a      	ldr	r2, [r7, #4]
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	441a      	add	r2, r3
 800cac0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800cac4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cac8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cacc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	461a      	mov	r2, r3
 800cae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cae8:	4413      	add	r3, r2
 800caea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	00da      	lsls	r2, r3, #3
 800caf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800caf4:	4413      	add	r3, r2
 800caf6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cafa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	891b      	ldrh	r3, [r3, #8]
 800cb00:	085b      	lsrs	r3, r3, #1
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	005b      	lsls	r3, r3, #1
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb0a:	801a      	strh	r2, [r3, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	461a      	mov	r2, r3
 800cb1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb1c:	4413      	add	r3, r2
 800cb1e:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	00da      	lsls	r2, r3, #3
 800cb26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb28:	4413      	add	r3, r2
 800cb2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800cb2e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	895b      	ldrh	r3, [r3, #10]
 800cb34:	085b      	lsrs	r3, r3, #1
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	005b      	lsls	r3, r3, #1
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb3e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	785b      	ldrb	r3, [r3, #1]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	f040 8093 	bne.w	800cc70 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	4413      	add	r3, r2
 800cb54:	881b      	ldrh	r3, [r3, #0]
 800cb56:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800cb5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800cb5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d01b      	beq.n	800cb9e <USB_ActivateEndpoint+0x52a>
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	4413      	add	r3, r2
 800cb70:	881b      	ldrh	r3, [r3, #0]
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb7c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	441a      	add	r2, r3
 800cb88:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800cb8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cb96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	4413      	add	r3, r2
 800cba8:	881b      	ldrh	r3, [r3, #0]
 800cbaa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800cbac:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800cbae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d01b      	beq.n	800cbee <USB_ActivateEndpoint+0x57a>
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	4413      	add	r3, r2
 800cbc0:	881b      	ldrh	r3, [r3, #0]
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbcc:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	441a      	add	r2, r3
 800cbd8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cbda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbe6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	009b      	lsls	r3, r3, #2
 800cbf6:	4413      	add	r3, r2
 800cbf8:	881b      	ldrh	r3, [r3, #0]
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cc00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc04:	873b      	strh	r3, [r7, #56]	@ 0x38
 800cc06:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cc08:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cc0c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800cc0e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cc10:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cc14:	873b      	strh	r3, [r7, #56]	@ 0x38
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	441a      	add	r2, r3
 800cc20:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cc22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	4413      	add	r3, r2
 800cc40:	881b      	ldrh	r3, [r3, #0]
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	441a      	add	r2, r3
 800cc58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cc5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	8013      	strh	r3, [r2, #0]
 800cc6e:	e0bc      	b.n	800cdea <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4413      	add	r3, r2
 800cc7a:	881b      	ldrh	r3, [r3, #0]
 800cc7c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800cc80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800cc84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d01d      	beq.n	800ccc8 <USB_ActivateEndpoint+0x654>
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	4413      	add	r3, r2
 800cc96:	881b      	ldrh	r3, [r3, #0]
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cca2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	441a      	add	r2, r3
 800ccb0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ccb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ccb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ccbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ccc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	4413      	add	r3, r2
 800ccd2:	881b      	ldrh	r3, [r3, #0]
 800ccd4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800ccd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800ccdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d01d      	beq.n	800cd20 <USB_ActivateEndpoint+0x6ac>
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	4413      	add	r3, r2
 800ccee:	881b      	ldrh	r3, [r3, #0]
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ccf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ccfa:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	441a      	add	r2, r3
 800cd08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800cd0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	78db      	ldrb	r3, [r3, #3]
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d024      	beq.n	800cd72 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	4413      	add	r3, r2
 800cd32:	881b      	ldrh	r3, [r3, #0]
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd3e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800cd42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cd46:	f083 0320 	eor.w	r3, r3, #32
 800cd4a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	441a      	add	r2, r3
 800cd58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cd5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	8013      	strh	r3, [r2, #0]
 800cd70:	e01d      	b.n	800cdae <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	4413      	add	r3, r2
 800cd7c:	881b      	ldrh	r3, [r3, #0]
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd88:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	441a      	add	r2, r3
 800cd96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cd9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cda2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cda6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	4413      	add	r3, r2
 800cdb8:	881b      	ldrh	r3, [r3, #0]
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cdc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdc4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	441a      	add	r2, r3
 800cdd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cdd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cde2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800cdea:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3774      	adds	r7, #116	@ 0x74
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop

0800cdfc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b08d      	sub	sp, #52	@ 0x34
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	7b1b      	ldrb	r3, [r3, #12]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	f040 808e 	bne.w	800cf2c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	785b      	ldrb	r3, [r3, #1]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d044      	beq.n	800cea2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	4413      	add	r3, r2
 800ce22:	881b      	ldrh	r3, [r3, #0]
 800ce24:	81bb      	strh	r3, [r7, #12]
 800ce26:	89bb      	ldrh	r3, [r7, #12]
 800ce28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d01b      	beq.n	800ce68 <USB_DeactivateEndpoint+0x6c>
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	009b      	lsls	r3, r3, #2
 800ce38:	4413      	add	r3, r2
 800ce3a:	881b      	ldrh	r3, [r3, #0]
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce46:	817b      	strh	r3, [r7, #10]
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	441a      	add	r2, r3
 800ce52:	897b      	ldrh	r3, [r7, #10]
 800ce54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	4413      	add	r3, r2
 800ce72:	881b      	ldrh	r3, [r3, #0]
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce7e:	813b      	strh	r3, [r7, #8]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	441a      	add	r2, r3
 800ce8a:	893b      	ldrh	r3, [r7, #8]
 800ce8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	8013      	strh	r3, [r2, #0]
 800cea0:	e192      	b.n	800d1c8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	4413      	add	r3, r2
 800ceac:	881b      	ldrh	r3, [r3, #0]
 800ceae:	827b      	strh	r3, [r7, #18]
 800ceb0:	8a7b      	ldrh	r3, [r7, #18]
 800ceb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d01b      	beq.n	800cef2 <USB_DeactivateEndpoint+0xf6>
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	4413      	add	r3, r2
 800cec4:	881b      	ldrh	r3, [r3, #0]
 800cec6:	b29b      	uxth	r3, r3
 800cec8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ced0:	823b      	strh	r3, [r7, #16]
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	441a      	add	r2, r3
 800cedc:	8a3b      	ldrh	r3, [r7, #16]
 800cede:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cee2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cee6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ceea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	4413      	add	r3, r2
 800cefc:	881b      	ldrh	r3, [r3, #0]
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cf04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf08:	81fb      	strh	r3, [r7, #14]
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	441a      	add	r2, r3
 800cf14:	89fb      	ldrh	r3, [r7, #14]
 800cf16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	8013      	strh	r3, [r2, #0]
 800cf2a:	e14d      	b.n	800d1c8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	785b      	ldrb	r3, [r3, #1]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f040 80a5 	bne.w	800d080 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	4413      	add	r3, r2
 800cf40:	881b      	ldrh	r3, [r3, #0]
 800cf42:	843b      	strh	r3, [r7, #32]
 800cf44:	8c3b      	ldrh	r3, [r7, #32]
 800cf46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d01b      	beq.n	800cf86 <USB_DeactivateEndpoint+0x18a>
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	4413      	add	r3, r2
 800cf58:	881b      	ldrh	r3, [r3, #0]
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf64:	83fb      	strh	r3, [r7, #30]
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	441a      	add	r2, r3
 800cf70:	8bfb      	ldrh	r3, [r7, #30]
 800cf72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cf7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	4413      	add	r3, r2
 800cf90:	881b      	ldrh	r3, [r3, #0]
 800cf92:	83bb      	strh	r3, [r7, #28]
 800cf94:	8bbb      	ldrh	r3, [r7, #28]
 800cf96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d01b      	beq.n	800cfd6 <USB_DeactivateEndpoint+0x1da>
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	4413      	add	r3, r2
 800cfa8:	881b      	ldrh	r3, [r3, #0]
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cfb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfb4:	837b      	strh	r3, [r7, #26]
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	441a      	add	r2, r3
 800cfc0:	8b7b      	ldrh	r3, [r7, #26]
 800cfc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	4413      	add	r3, r2
 800cfe0:	881b      	ldrh	r3, [r3, #0]
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cfe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfec:	833b      	strh	r3, [r7, #24]
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	441a      	add	r2, r3
 800cff8:	8b3b      	ldrh	r3, [r7, #24]
 800cffa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cffe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d006:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	4413      	add	r3, r2
 800d018:	881b      	ldrh	r3, [r3, #0]
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d024:	82fb      	strh	r3, [r7, #22]
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	441a      	add	r2, r3
 800d030:	8afb      	ldrh	r3, [r7, #22]
 800d032:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d036:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d03a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d03e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d042:	b29b      	uxth	r3, r3
 800d044:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	4413      	add	r3, r2
 800d050:	881b      	ldrh	r3, [r3, #0]
 800d052:	b29b      	uxth	r3, r3
 800d054:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d058:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d05c:	82bb      	strh	r3, [r7, #20]
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	441a      	add	r2, r3
 800d068:	8abb      	ldrh	r3, [r7, #20]
 800d06a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d06e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	8013      	strh	r3, [r2, #0]
 800d07e:	e0a3      	b.n	800d1c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	4413      	add	r3, r2
 800d08a:	881b      	ldrh	r3, [r3, #0]
 800d08c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d08e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d090:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d094:	2b00      	cmp	r3, #0
 800d096:	d01b      	beq.n	800d0d0 <USB_DeactivateEndpoint+0x2d4>
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	4413      	add	r3, r2
 800d0a2:	881b      	ldrh	r3, [r3, #0]
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d0aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0ae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	441a      	add	r2, r3
 800d0ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d0bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d0c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	4413      	add	r3, r2
 800d0da:	881b      	ldrh	r3, [r3, #0]
 800d0dc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800d0de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d0e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d01b      	beq.n	800d120 <USB_DeactivateEndpoint+0x324>
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	4413      	add	r3, r2
 800d0f2:	881b      	ldrh	r3, [r3, #0]
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d0fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	441a      	add	r2, r3
 800d10a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d10c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d110:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d114:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d118:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	4413      	add	r3, r2
 800d12a:	881b      	ldrh	r3, [r3, #0]
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d136:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	441a      	add	r2, r3
 800d142:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d144:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d148:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d14c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d154:	b29b      	uxth	r3, r3
 800d156:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	4413      	add	r3, r2
 800d162:	881b      	ldrh	r3, [r3, #0]
 800d164:	b29b      	uxth	r3, r3
 800d166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d16a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d16e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	441a      	add	r2, r3
 800d17a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d17c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d180:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	4413      	add	r3, r2
 800d19a:	881b      	ldrh	r3, [r3, #0]
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d1a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1a6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	441a      	add	r2, r3
 800d1b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d1b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3734      	adds	r7, #52	@ 0x34
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b0c2      	sub	sp, #264	@ 0x108
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1e4:	6018      	str	r0, [r3, #0]
 800d1e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1ee:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d1f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	785b      	ldrb	r3, [r3, #1]
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	f040 86b7 	bne.w	800df70 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	699a      	ldr	r2, [r3, #24]
 800d20e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	691b      	ldr	r3, [r3, #16]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d908      	bls.n	800d230 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800d21e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	691b      	ldr	r3, [r3, #16]
 800d22a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800d22e:	e007      	b.n	800d240 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800d230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	699b      	ldr	r3, [r3, #24]
 800d23c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	7b1b      	ldrb	r3, [r3, #12]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d13a      	bne.n	800d2c6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	6959      	ldr	r1, [r3, #20]
 800d25c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	88da      	ldrh	r2, [r3, #6]
 800d268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d272:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d276:	6800      	ldr	r0, [r0, #0]
 800d278:	f001 fc98 	bl	800ebac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d27c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d280:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	613b      	str	r3, [r7, #16]
 800d288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d28c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d296:	b29b      	uxth	r3, r3
 800d298:	461a      	mov	r2, r3
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	4413      	add	r3, r2
 800d29e:	613b      	str	r3, [r7, #16]
 800d2a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	00da      	lsls	r2, r3, #3
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d2b6:	60fb      	str	r3, [r7, #12]
 800d2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	801a      	strh	r2, [r3, #0]
 800d2c2:	f000 be1f 	b.w	800df04 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d2c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	78db      	ldrb	r3, [r3, #3]
 800d2d2:	2b02      	cmp	r3, #2
 800d2d4:	f040 8462 	bne.w	800db9c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d2d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	6a1a      	ldr	r2, [r3, #32]
 800d2e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	691b      	ldr	r3, [r3, #16]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	f240 83df 	bls.w	800dab4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d2f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	4413      	add	r3, r2
 800d310:	881b      	ldrh	r3, [r3, #0]
 800d312:	b29b      	uxth	r3, r3
 800d314:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d31c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800d320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d324:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d32e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	441a      	add	r2, r3
 800d33a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d33e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d342:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d346:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d34a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d34e:	b29b      	uxth	r3, r3
 800d350:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	6a1a      	ldr	r2, [r3, #32]
 800d35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d362:	1ad2      	subs	r2, r2, r3
 800d364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d374:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d37e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4413      	add	r3, r2
 800d38a:	881b      	ldrh	r3, [r3, #0]
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d392:	2b00      	cmp	r3, #0
 800d394:	f000 81c7 	beq.w	800d726 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d39c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	785b      	ldrb	r3, [r3, #1]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d177      	bne.n	800d4a4 <USB_EPStartXfer+0x2ce>
 800d3b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d3c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3d4:	4413      	add	r3, r2
 800d3d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d3d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	00da      	lsls	r2, r3, #3
 800d3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3e8:	4413      	add	r3, r2
 800d3ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d3ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f2:	881b      	ldrh	r3, [r3, #0]
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3fa:	b29a      	uxth	r2, r3
 800d3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3fe:	801a      	strh	r2, [r3, #0]
 800d400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d404:	2b3e      	cmp	r3, #62	@ 0x3e
 800d406:	d921      	bls.n	800d44c <USB_EPStartXfer+0x276>
 800d408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d40c:	095b      	lsrs	r3, r3, #5
 800d40e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d416:	f003 031f 	and.w	r3, r3, #31
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d104      	bne.n	800d428 <USB_EPStartXfer+0x252>
 800d41e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d422:	3b01      	subs	r3, #1
 800d424:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d42a:	881b      	ldrh	r3, [r3, #0]
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d432:	b29b      	uxth	r3, r3
 800d434:	029b      	lsls	r3, r3, #10
 800d436:	b29b      	uxth	r3, r3
 800d438:	4313      	orrs	r3, r2
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d444:	b29a      	uxth	r2, r3
 800d446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d448:	801a      	strh	r2, [r3, #0]
 800d44a:	e050      	b.n	800d4ee <USB_EPStartXfer+0x318>
 800d44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d450:	2b00      	cmp	r3, #0
 800d452:	d10a      	bne.n	800d46a <USB_EPStartXfer+0x294>
 800d454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d456:	881b      	ldrh	r3, [r3, #0]
 800d458:	b29b      	uxth	r3, r3
 800d45a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d45e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d462:	b29a      	uxth	r2, r3
 800d464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d466:	801a      	strh	r2, [r3, #0]
 800d468:	e041      	b.n	800d4ee <USB_EPStartXfer+0x318>
 800d46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d46e:	085b      	lsrs	r3, r3, #1
 800d470:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d478:	f003 0301 	and.w	r3, r3, #1
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d004      	beq.n	800d48a <USB_EPStartXfer+0x2b4>
 800d480:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d484:	3301      	adds	r3, #1
 800d486:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d48c:	881b      	ldrh	r3, [r3, #0]
 800d48e:	b29a      	uxth	r2, r3
 800d490:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d494:	b29b      	uxth	r3, r3
 800d496:	029b      	lsls	r3, r3, #10
 800d498:	b29b      	uxth	r3, r3
 800d49a:	4313      	orrs	r3, r2
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a0:	801a      	strh	r2, [r3, #0]
 800d4a2:	e024      	b.n	800d4ee <USB_EPStartXfer+0x318>
 800d4a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	785b      	ldrb	r3, [r3, #1]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d11c      	bne.n	800d4ee <USB_EPStartXfer+0x318>
 800d4b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c8:	4413      	add	r3, r2
 800d4ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	00da      	lsls	r2, r3, #3
 800d4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4dc:	4413      	add	r3, r2
 800d4de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d4e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d4ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	895b      	ldrh	r3, [r3, #10]
 800d4fa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d4fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	6959      	ldr	r1, [r3, #20]
 800d50a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d50e:	b29b      	uxth	r3, r3
 800d510:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d514:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d518:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d51c:	6800      	ldr	r0, [r0, #0]
 800d51e:	f001 fb45 	bl	800ebac <USB_WritePMA>
            ep->xfer_buff += len;
 800d522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	695a      	ldr	r2, [r3, #20]
 800d52e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d532:	441a      	add	r2, r3
 800d534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	6a1a      	ldr	r2, [r3, #32]
 800d54c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	691b      	ldr	r3, [r3, #16]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d90f      	bls.n	800d57c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800d55c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	6a1a      	ldr	r2, [r3, #32]
 800d568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d56c:	1ad2      	subs	r2, r2, r3
 800d56e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	621a      	str	r2, [r3, #32]
 800d57a:	e00e      	b.n	800d59a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d57c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	6a1b      	ldr	r3, [r3, #32]
 800d588:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d58c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2200      	movs	r2, #0
 800d598:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d59a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d59e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	785b      	ldrb	r3, [r3, #1]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d177      	bne.n	800d69a <USB_EPStartXfer+0x4c4>
 800d5aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	61bb      	str	r3, [r7, #24]
 800d5b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	69bb      	ldr	r3, [r7, #24]
 800d5ca:	4413      	add	r3, r2
 800d5cc:	61bb      	str	r3, [r7, #24]
 800d5ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	00da      	lsls	r2, r3, #3
 800d5dc:	69bb      	ldr	r3, [r7, #24]
 800d5de:	4413      	add	r3, r2
 800d5e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d5e4:	617b      	str	r3, [r7, #20]
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	881b      	ldrh	r3, [r3, #0]
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	801a      	strh	r2, [r3, #0]
 800d5f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5fa:	2b3e      	cmp	r3, #62	@ 0x3e
 800d5fc:	d921      	bls.n	800d642 <USB_EPStartXfer+0x46c>
 800d5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d602:	095b      	lsrs	r3, r3, #5
 800d604:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d60c:	f003 031f 	and.w	r3, r3, #31
 800d610:	2b00      	cmp	r3, #0
 800d612:	d104      	bne.n	800d61e <USB_EPStartXfer+0x448>
 800d614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d618:	3b01      	subs	r3, #1
 800d61a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	881b      	ldrh	r3, [r3, #0]
 800d622:	b29a      	uxth	r2, r3
 800d624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d628:	b29b      	uxth	r3, r3
 800d62a:	029b      	lsls	r3, r3, #10
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	4313      	orrs	r3, r2
 800d630:	b29b      	uxth	r3, r3
 800d632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d63a:	b29a      	uxth	r2, r3
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	801a      	strh	r2, [r3, #0]
 800d640:	e056      	b.n	800d6f0 <USB_EPStartXfer+0x51a>
 800d642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d646:	2b00      	cmp	r3, #0
 800d648:	d10a      	bne.n	800d660 <USB_EPStartXfer+0x48a>
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	881b      	ldrh	r3, [r3, #0]
 800d64e:	b29b      	uxth	r3, r3
 800d650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d658:	b29a      	uxth	r2, r3
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	801a      	strh	r2, [r3, #0]
 800d65e:	e047      	b.n	800d6f0 <USB_EPStartXfer+0x51a>
 800d660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d664:	085b      	lsrs	r3, r3, #1
 800d666:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d66e:	f003 0301 	and.w	r3, r3, #1
 800d672:	2b00      	cmp	r3, #0
 800d674:	d004      	beq.n	800d680 <USB_EPStartXfer+0x4aa>
 800d676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d67a:	3301      	adds	r3, #1
 800d67c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	881b      	ldrh	r3, [r3, #0]
 800d684:	b29a      	uxth	r2, r3
 800d686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	029b      	lsls	r3, r3, #10
 800d68e:	b29b      	uxth	r3, r3
 800d690:	4313      	orrs	r3, r2
 800d692:	b29a      	uxth	r2, r3
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	801a      	strh	r2, [r3, #0]
 800d698:	e02a      	b.n	800d6f0 <USB_EPStartXfer+0x51a>
 800d69a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d69e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	785b      	ldrb	r3, [r3, #1]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d122      	bne.n	800d6f0 <USB_EPStartXfer+0x51a>
 800d6aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	623b      	str	r3, [r7, #32]
 800d6b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	6a3b      	ldr	r3, [r7, #32]
 800d6ca:	4413      	add	r3, r2
 800d6cc:	623b      	str	r3, [r7, #32]
 800d6ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	00da      	lsls	r2, r3, #3
 800d6dc:	6a3b      	ldr	r3, [r7, #32]
 800d6de:	4413      	add	r3, r2
 800d6e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d6e4:	61fb      	str	r3, [r7, #28]
 800d6e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d6f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	891b      	ldrh	r3, [r3, #8]
 800d6fc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	6959      	ldr	r1, [r3, #20]
 800d70c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d710:	b29b      	uxth	r3, r3
 800d712:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d716:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d71a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d71e:	6800      	ldr	r0, [r0, #0]
 800d720:	f001 fa44 	bl	800ebac <USB_WritePMA>
 800d724:	e3ee      	b.n	800df04 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d72a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	785b      	ldrb	r3, [r3, #1]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d177      	bne.n	800d826 <USB_EPStartXfer+0x650>
 800d736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d73a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d750:	b29b      	uxth	r3, r3
 800d752:	461a      	mov	r2, r3
 800d754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d756:	4413      	add	r3, r2
 800d758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d75a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d75e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	00da      	lsls	r2, r3, #3
 800d768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d76a:	4413      	add	r3, r2
 800d76c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d770:	647b      	str	r3, [r7, #68]	@ 0x44
 800d772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d774:	881b      	ldrh	r3, [r3, #0]
 800d776:	b29b      	uxth	r3, r3
 800d778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d77c:	b29a      	uxth	r2, r3
 800d77e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d780:	801a      	strh	r2, [r3, #0]
 800d782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d786:	2b3e      	cmp	r3, #62	@ 0x3e
 800d788:	d921      	bls.n	800d7ce <USB_EPStartXfer+0x5f8>
 800d78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d78e:	095b      	lsrs	r3, r3, #5
 800d790:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d798:	f003 031f 	and.w	r3, r3, #31
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d104      	bne.n	800d7aa <USB_EPStartXfer+0x5d4>
 800d7a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d7a4:	3b01      	subs	r3, #1
 800d7a6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d7aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7ac:	881b      	ldrh	r3, [r3, #0]
 800d7ae:	b29a      	uxth	r2, r3
 800d7b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	029b      	lsls	r3, r3, #10
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7ca:	801a      	strh	r2, [r3, #0]
 800d7cc:	e056      	b.n	800d87c <USB_EPStartXfer+0x6a6>
 800d7ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d10a      	bne.n	800d7ec <USB_EPStartXfer+0x616>
 800d7d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7d8:	881b      	ldrh	r3, [r3, #0]
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7e4:	b29a      	uxth	r2, r3
 800d7e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7e8:	801a      	strh	r2, [r3, #0]
 800d7ea:	e047      	b.n	800d87c <USB_EPStartXfer+0x6a6>
 800d7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7f0:	085b      	lsrs	r3, r3, #1
 800d7f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7fa:	f003 0301 	and.w	r3, r3, #1
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d004      	beq.n	800d80c <USB_EPStartXfer+0x636>
 800d802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d806:	3301      	adds	r3, #1
 800d808:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d80c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d80e:	881b      	ldrh	r3, [r3, #0]
 800d810:	b29a      	uxth	r2, r3
 800d812:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d816:	b29b      	uxth	r3, r3
 800d818:	029b      	lsls	r3, r3, #10
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	4313      	orrs	r3, r2
 800d81e:	b29a      	uxth	r2, r3
 800d820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d822:	801a      	strh	r2, [r3, #0]
 800d824:	e02a      	b.n	800d87c <USB_EPStartXfer+0x6a6>
 800d826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d82a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	785b      	ldrb	r3, [r3, #1]
 800d832:	2b01      	cmp	r3, #1
 800d834:	d122      	bne.n	800d87c <USB_EPStartXfer+0x6a6>
 800d836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d83a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	653b      	str	r3, [r7, #80]	@ 0x50
 800d842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d846:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d850:	b29b      	uxth	r3, r3
 800d852:	461a      	mov	r2, r3
 800d854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d856:	4413      	add	r3, r2
 800d858:	653b      	str	r3, [r7, #80]	@ 0x50
 800d85a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d85e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	00da      	lsls	r2, r3, #3
 800d868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d86a:	4413      	add	r3, r2
 800d86c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d870:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d876:	b29a      	uxth	r2, r3
 800d878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d87a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d87c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	891b      	ldrh	r3, [r3, #8]
 800d888:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d88c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	6959      	ldr	r1, [r3, #20]
 800d898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d89c:	b29b      	uxth	r3, r3
 800d89e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d8a2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d8a6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d8aa:	6800      	ldr	r0, [r0, #0]
 800d8ac:	f001 f97e 	bl	800ebac <USB_WritePMA>
            ep->xfer_buff += len;
 800d8b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	695a      	ldr	r2, [r3, #20]
 800d8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8c0:	441a      	add	r2, r3
 800d8c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d8ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	6a1a      	ldr	r2, [r3, #32]
 800d8da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	691b      	ldr	r3, [r3, #16]
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d90f      	bls.n	800d90a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d8ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	6a1a      	ldr	r2, [r3, #32]
 800d8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8fa:	1ad2      	subs	r2, r2, r3
 800d8fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	621a      	str	r2, [r3, #32]
 800d908:	e00e      	b.n	800d928 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d90a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d90e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	6a1b      	ldr	r3, [r3, #32]
 800d916:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d91a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d91e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2200      	movs	r2, #0
 800d926:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d92c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	643b      	str	r3, [r7, #64]	@ 0x40
 800d934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	785b      	ldrb	r3, [r3, #1]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d177      	bne.n	800da34 <USB_EPStartXfer+0x85e>
 800d944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d948:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d954:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d95e:	b29b      	uxth	r3, r3
 800d960:	461a      	mov	r2, r3
 800d962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d964:	4413      	add	r3, r2
 800d966:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d96c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	00da      	lsls	r2, r3, #3
 800d976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d978:	4413      	add	r3, r2
 800d97a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d97e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d982:	881b      	ldrh	r3, [r3, #0]
 800d984:	b29b      	uxth	r3, r3
 800d986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d98e:	801a      	strh	r2, [r3, #0]
 800d990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d994:	2b3e      	cmp	r3, #62	@ 0x3e
 800d996:	d921      	bls.n	800d9dc <USB_EPStartXfer+0x806>
 800d998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d99c:	095b      	lsrs	r3, r3, #5
 800d99e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9a6:	f003 031f 	and.w	r3, r3, #31
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d104      	bne.n	800d9b8 <USB_EPStartXfer+0x7e2>
 800d9ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9b2:	3b01      	subs	r3, #1
 800d9b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d9b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9ba:	881b      	ldrh	r3, [r3, #0]
 800d9bc:	b29a      	uxth	r2, r3
 800d9be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	029b      	lsls	r3, r3, #10
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9d8:	801a      	strh	r2, [r3, #0]
 800d9da:	e050      	b.n	800da7e <USB_EPStartXfer+0x8a8>
 800d9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10a      	bne.n	800d9fa <USB_EPStartXfer+0x824>
 800d9e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9e6:	881b      	ldrh	r3, [r3, #0]
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9f2:	b29a      	uxth	r2, r3
 800d9f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9f6:	801a      	strh	r2, [r3, #0]
 800d9f8:	e041      	b.n	800da7e <USB_EPStartXfer+0x8a8>
 800d9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9fe:	085b      	lsrs	r3, r3, #1
 800da00:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800da04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da08:	f003 0301 	and.w	r3, r3, #1
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d004      	beq.n	800da1a <USB_EPStartXfer+0x844>
 800da10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da14:	3301      	adds	r3, #1
 800da16:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800da1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da1c:	881b      	ldrh	r3, [r3, #0]
 800da1e:	b29a      	uxth	r2, r3
 800da20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da24:	b29b      	uxth	r3, r3
 800da26:	029b      	lsls	r3, r3, #10
 800da28:	b29b      	uxth	r3, r3
 800da2a:	4313      	orrs	r3, r2
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da30:	801a      	strh	r2, [r3, #0]
 800da32:	e024      	b.n	800da7e <USB_EPStartXfer+0x8a8>
 800da34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	785b      	ldrb	r3, [r3, #1]
 800da40:	2b01      	cmp	r3, #1
 800da42:	d11c      	bne.n	800da7e <USB_EPStartXfer+0x8a8>
 800da44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da52:	b29b      	uxth	r3, r3
 800da54:	461a      	mov	r2, r3
 800da56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da58:	4413      	add	r3, r2
 800da5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800da5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	00da      	lsls	r2, r3, #3
 800da6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da6c:	4413      	add	r3, r2
 800da6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800da72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800da74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da78:	b29a      	uxth	r2, r3
 800da7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800da7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	895b      	ldrh	r3, [r3, #10]
 800da8a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800da8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	6959      	ldr	r1, [r3, #20]
 800da9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800daa4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800daa8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800daac:	6800      	ldr	r0, [r0, #0]
 800daae:	f001 f87d 	bl	800ebac <USB_WritePMA>
 800dab2:	e227      	b.n	800df04 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800dab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	6a1b      	ldr	r3, [r3, #32]
 800dac0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800dac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dac8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	009b      	lsls	r3, r3, #2
 800dadc:	4413      	add	r3, r2
 800dade:	881b      	ldrh	r3, [r3, #0]
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800dae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800daea:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800daee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dafc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	441a      	add	r2, r3
 800db08:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800db0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800db20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	461a      	mov	r2, r3
 800db3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db40:	4413      	add	r3, r2
 800db42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	00da      	lsls	r2, r3, #3
 800db52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db54:	4413      	add	r3, r2
 800db56:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800db5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800db5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db60:	b29a      	uxth	r2, r3
 800db62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800db64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800db66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	891b      	ldrh	r3, [r3, #8]
 800db72:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800db76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	6959      	ldr	r1, [r3, #20]
 800db82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db86:	b29b      	uxth	r3, r3
 800db88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800db8c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800db90:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800db94:	6800      	ldr	r0, [r0, #0]
 800db96:	f001 f809 	bl	800ebac <USB_WritePMA>
 800db9a:	e1b3      	b.n	800df04 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800db9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	6a1a      	ldr	r2, [r3, #32]
 800dba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbac:	1ad2      	subs	r2, r2, r3
 800dbae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800dbba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	4413      	add	r3, r2
 800dbd4:	881b      	ldrh	r3, [r3, #0]
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	f000 80c6 	beq.w	800dd6e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dbe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbe6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	673b      	str	r3, [r7, #112]	@ 0x70
 800dbee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	785b      	ldrb	r3, [r3, #1]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d177      	bne.n	800dcee <USB_EPStartXfer+0xb18>
 800dbfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dc1e:	4413      	add	r3, r2
 800dc20:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	00da      	lsls	r2, r3, #3
 800dc30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dc32:	4413      	add	r3, r2
 800dc34:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dc38:	667b      	str	r3, [r7, #100]	@ 0x64
 800dc3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc3c:	881b      	ldrh	r3, [r3, #0]
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc44:	b29a      	uxth	r2, r3
 800dc46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc48:	801a      	strh	r2, [r3, #0]
 800dc4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc4e:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc50:	d921      	bls.n	800dc96 <USB_EPStartXfer+0xac0>
 800dc52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc56:	095b      	lsrs	r3, r3, #5
 800dc58:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dc5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc60:	f003 031f 	and.w	r3, r3, #31
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d104      	bne.n	800dc72 <USB_EPStartXfer+0xa9c>
 800dc68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dc72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc74:	881b      	ldrh	r3, [r3, #0]
 800dc76:	b29a      	uxth	r2, r3
 800dc78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	029b      	lsls	r3, r3, #10
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	4313      	orrs	r3, r2
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc92:	801a      	strh	r2, [r3, #0]
 800dc94:	e050      	b.n	800dd38 <USB_EPStartXfer+0xb62>
 800dc96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d10a      	bne.n	800dcb4 <USB_EPStartXfer+0xade>
 800dc9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dca0:	881b      	ldrh	r3, [r3, #0]
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcac:	b29a      	uxth	r2, r3
 800dcae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dcb0:	801a      	strh	r2, [r3, #0]
 800dcb2:	e041      	b.n	800dd38 <USB_EPStartXfer+0xb62>
 800dcb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcb8:	085b      	lsrs	r3, r3, #1
 800dcba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dcbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcc2:	f003 0301 	and.w	r3, r3, #1
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d004      	beq.n	800dcd4 <USB_EPStartXfer+0xafe>
 800dcca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800dcce:	3301      	adds	r3, #1
 800dcd0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dcd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dcd6:	881b      	ldrh	r3, [r3, #0]
 800dcd8:	b29a      	uxth	r2, r3
 800dcda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	029b      	lsls	r3, r3, #10
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	4313      	orrs	r3, r2
 800dce6:	b29a      	uxth	r2, r3
 800dce8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dcea:	801a      	strh	r2, [r3, #0]
 800dcec:	e024      	b.n	800dd38 <USB_EPStartXfer+0xb62>
 800dcee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	785b      	ldrb	r3, [r3, #1]
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d11c      	bne.n	800dd38 <USB_EPStartXfer+0xb62>
 800dcfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	461a      	mov	r2, r3
 800dd10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dd12:	4413      	add	r3, r2
 800dd14:	673b      	str	r3, [r7, #112]	@ 0x70
 800dd16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	00da      	lsls	r2, r3, #3
 800dd24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dd26:	4413      	add	r3, r2
 800dd28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dd2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800dd38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	895b      	ldrh	r3, [r3, #10]
 800dd44:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dd48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	6959      	ldr	r1, [r3, #20]
 800dd54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dd5e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dd62:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dd66:	6800      	ldr	r0, [r0, #0]
 800dd68:	f000 ff20 	bl	800ebac <USB_WritePMA>
 800dd6c:	e0ca      	b.n	800df04 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dd6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	785b      	ldrb	r3, [r3, #1]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d177      	bne.n	800de6e <USB_EPStartXfer+0xc98>
 800dd7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dd8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dd9e:	4413      	add	r3, r2
 800dda0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dda2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dda6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	00da      	lsls	r2, r3, #3
 800ddb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ddb2:	4413      	add	r3, r2
 800ddb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ddb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ddba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ddbc:	881b      	ldrh	r3, [r3, #0]
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ddc4:	b29a      	uxth	r2, r3
 800ddc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ddc8:	801a      	strh	r2, [r3, #0]
 800ddca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddce:	2b3e      	cmp	r3, #62	@ 0x3e
 800ddd0:	d921      	bls.n	800de16 <USB_EPStartXfer+0xc40>
 800ddd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddd6:	095b      	lsrs	r3, r3, #5
 800ddd8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dde0:	f003 031f 	and.w	r3, r3, #31
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d104      	bne.n	800ddf2 <USB_EPStartXfer+0xc1c>
 800dde8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ddec:	3b01      	subs	r3, #1
 800ddee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ddf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ddf4:	881b      	ldrh	r3, [r3, #0]
 800ddf6:	b29a      	uxth	r2, r3
 800ddf8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	029b      	lsls	r3, r3, #10
 800de00:	b29b      	uxth	r3, r3
 800de02:	4313      	orrs	r3, r2
 800de04:	b29b      	uxth	r3, r3
 800de06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de0e:	b29a      	uxth	r2, r3
 800de10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de12:	801a      	strh	r2, [r3, #0]
 800de14:	e05c      	b.n	800ded0 <USB_EPStartXfer+0xcfa>
 800de16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d10a      	bne.n	800de34 <USB_EPStartXfer+0xc5e>
 800de1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de20:	881b      	ldrh	r3, [r3, #0]
 800de22:	b29b      	uxth	r3, r3
 800de24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de2c:	b29a      	uxth	r2, r3
 800de2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de30:	801a      	strh	r2, [r3, #0]
 800de32:	e04d      	b.n	800ded0 <USB_EPStartXfer+0xcfa>
 800de34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de38:	085b      	lsrs	r3, r3, #1
 800de3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800de3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de42:	f003 0301 	and.w	r3, r3, #1
 800de46:	2b00      	cmp	r3, #0
 800de48:	d004      	beq.n	800de54 <USB_EPStartXfer+0xc7e>
 800de4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800de4e:	3301      	adds	r3, #1
 800de50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800de54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de56:	881b      	ldrh	r3, [r3, #0]
 800de58:	b29a      	uxth	r2, r3
 800de5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800de5e:	b29b      	uxth	r3, r3
 800de60:	029b      	lsls	r3, r3, #10
 800de62:	b29b      	uxth	r3, r3
 800de64:	4313      	orrs	r3, r2
 800de66:	b29a      	uxth	r2, r3
 800de68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de6a:	801a      	strh	r2, [r3, #0]
 800de6c:	e030      	b.n	800ded0 <USB_EPStartXfer+0xcfa>
 800de6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	785b      	ldrb	r3, [r3, #1]
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d128      	bne.n	800ded0 <USB_EPStartXfer+0xcfa>
 800de7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800de8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	461a      	mov	r2, r3
 800de9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dea2:	4413      	add	r3, r2
 800dea4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	00da      	lsls	r2, r3, #3
 800deb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800deba:	4413      	add	r3, r2
 800debc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dec0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dec8:	b29a      	uxth	r2, r3
 800deca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dece:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ded0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ded4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	891b      	ldrh	r3, [r3, #8]
 800dedc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	6959      	ldr	r1, [r3, #20]
 800deec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800def0:	b29b      	uxth	r3, r3
 800def2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800def6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800defa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800defe:	6800      	ldr	r0, [r0, #0]
 800df00:	f000 fe54 	bl	800ebac <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800df04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df0c:	681a      	ldr	r2, [r3, #0]
 800df0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	009b      	lsls	r3, r3, #2
 800df1c:	4413      	add	r3, r2
 800df1e:	881b      	ldrh	r3, [r3, #0]
 800df20:	b29b      	uxth	r3, r3
 800df22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800df26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df2a:	817b      	strh	r3, [r7, #10]
 800df2c:	897b      	ldrh	r3, [r7, #10]
 800df2e:	f083 0310 	eor.w	r3, r3, #16
 800df32:	817b      	strh	r3, [r7, #10]
 800df34:	897b      	ldrh	r3, [r7, #10]
 800df36:	f083 0320 	eor.w	r3, r3, #32
 800df3a:	817b      	strh	r3, [r7, #10]
 800df3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	441a      	add	r2, r3
 800df56:	897b      	ldrh	r3, [r7, #10]
 800df58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df68:	b29b      	uxth	r3, r3
 800df6a:	8013      	strh	r3, [r2, #0]
 800df6c:	f000 bcde 	b.w	800e92c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800df70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	7b1b      	ldrb	r3, [r3, #12]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	f040 80bb 	bne.w	800e0f8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800df82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	699a      	ldr	r2, [r3, #24]
 800df8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	691b      	ldr	r3, [r3, #16]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d917      	bls.n	800dfce <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800df9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	691b      	ldr	r3, [r3, #16]
 800dfaa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800dfae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	699a      	ldr	r2, [r3, #24]
 800dfba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfbe:	1ad2      	subs	r2, r2, r3
 800dfc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	619a      	str	r2, [r3, #24]
 800dfcc:	e00e      	b.n	800dfec <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800dfce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	699b      	ldr	r3, [r3, #24]
 800dfda:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800dfde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800dfec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dffe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e008:	b29b      	uxth	r3, r3
 800e00a:	461a      	mov	r2, r3
 800e00c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e010:	4413      	add	r3, r2
 800e012:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e01a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	00da      	lsls	r2, r3, #3
 800e024:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e028:	4413      	add	r3, r2
 800e02a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e02e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e032:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e036:	881b      	ldrh	r3, [r3, #0]
 800e038:	b29b      	uxth	r3, r3
 800e03a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e03e:	b29a      	uxth	r2, r3
 800e040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e044:	801a      	strh	r2, [r3, #0]
 800e046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e04a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e04c:	d924      	bls.n	800e098 <USB_EPStartXfer+0xec2>
 800e04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e052:	095b      	lsrs	r3, r3, #5
 800e054:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e05c:	f003 031f 	and.w	r3, r3, #31
 800e060:	2b00      	cmp	r3, #0
 800e062:	d104      	bne.n	800e06e <USB_EPStartXfer+0xe98>
 800e064:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e068:	3b01      	subs	r3, #1
 800e06a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e06e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e072:	881b      	ldrh	r3, [r3, #0]
 800e074:	b29a      	uxth	r2, r3
 800e076:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	029b      	lsls	r3, r3, #10
 800e07e:	b29b      	uxth	r3, r3
 800e080:	4313      	orrs	r3, r2
 800e082:	b29b      	uxth	r3, r3
 800e084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e092:	801a      	strh	r2, [r3, #0]
 800e094:	f000 bc10 	b.w	800e8b8 <USB_EPStartXfer+0x16e2>
 800e098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d10c      	bne.n	800e0ba <USB_EPStartXfer+0xee4>
 800e0a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e0a4:	881b      	ldrh	r3, [r3, #0]
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0b0:	b29a      	uxth	r2, r3
 800e0b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e0b6:	801a      	strh	r2, [r3, #0]
 800e0b8:	e3fe      	b.n	800e8b8 <USB_EPStartXfer+0x16e2>
 800e0ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0be:	085b      	lsrs	r3, r3, #1
 800e0c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0c8:	f003 0301 	and.w	r3, r3, #1
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d004      	beq.n	800e0da <USB_EPStartXfer+0xf04>
 800e0d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e0da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e0de:	881b      	ldrh	r3, [r3, #0]
 800e0e0:	b29a      	uxth	r2, r3
 800e0e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	029b      	lsls	r3, r3, #10
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	b29a      	uxth	r2, r3
 800e0f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e0f4:	801a      	strh	r2, [r3, #0]
 800e0f6:	e3df      	b.n	800e8b8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e0f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	78db      	ldrb	r3, [r3, #3]
 800e104:	2b02      	cmp	r3, #2
 800e106:	f040 8218 	bne.w	800e53a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e10a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e10e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	785b      	ldrb	r3, [r3, #1]
 800e116:	2b00      	cmp	r3, #0
 800e118:	f040 809d 	bne.w	800e256 <USB_EPStartXfer+0x1080>
 800e11c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e12a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e12e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e138:	b29b      	uxth	r3, r3
 800e13a:	461a      	mov	r2, r3
 800e13c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e140:	4413      	add	r3, r2
 800e142:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e14a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	00da      	lsls	r2, r3, #3
 800e154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e158:	4413      	add	r3, r2
 800e15a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e15e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e162:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e166:	881b      	ldrh	r3, [r3, #0]
 800e168:	b29b      	uxth	r3, r3
 800e16a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e16e:	b29a      	uxth	r2, r3
 800e170:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e174:	801a      	strh	r2, [r3, #0]
 800e176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e17a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	691b      	ldr	r3, [r3, #16]
 800e182:	2b3e      	cmp	r3, #62	@ 0x3e
 800e184:	d92b      	bls.n	800e1de <USB_EPStartXfer+0x1008>
 800e186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e18a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	691b      	ldr	r3, [r3, #16]
 800e192:	095b      	lsrs	r3, r3, #5
 800e194:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e19c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	691b      	ldr	r3, [r3, #16]
 800e1a4:	f003 031f 	and.w	r3, r3, #31
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d104      	bne.n	800e1b6 <USB_EPStartXfer+0xfe0>
 800e1ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1b0:	3b01      	subs	r3, #1
 800e1b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e1b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e1ba:	881b      	ldrh	r3, [r3, #0]
 800e1bc:	b29a      	uxth	r2, r3
 800e1be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1c2:	b29b      	uxth	r3, r3
 800e1c4:	029b      	lsls	r3, r3, #10
 800e1c6:	b29b      	uxth	r3, r3
 800e1c8:	4313      	orrs	r3, r2
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1d4:	b29a      	uxth	r2, r3
 800e1d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e1da:	801a      	strh	r2, [r3, #0]
 800e1dc:	e070      	b.n	800e2c0 <USB_EPStartXfer+0x10ea>
 800e1de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	691b      	ldr	r3, [r3, #16]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d10c      	bne.n	800e208 <USB_EPStartXfer+0x1032>
 800e1ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e1f2:	881b      	ldrh	r3, [r3, #0]
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1fe:	b29a      	uxth	r2, r3
 800e200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e204:	801a      	strh	r2, [r3, #0]
 800e206:	e05b      	b.n	800e2c0 <USB_EPStartXfer+0x10ea>
 800e208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e20c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	691b      	ldr	r3, [r3, #16]
 800e214:	085b      	lsrs	r3, r3, #1
 800e216:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e21a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e21e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	691b      	ldr	r3, [r3, #16]
 800e226:	f003 0301 	and.w	r3, r3, #1
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d004      	beq.n	800e238 <USB_EPStartXfer+0x1062>
 800e22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e232:	3301      	adds	r3, #1
 800e234:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e238:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e23c:	881b      	ldrh	r3, [r3, #0]
 800e23e:	b29a      	uxth	r2, r3
 800e240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e244:	b29b      	uxth	r3, r3
 800e246:	029b      	lsls	r3, r3, #10
 800e248:	b29b      	uxth	r3, r3
 800e24a:	4313      	orrs	r3, r2
 800e24c:	b29a      	uxth	r2, r3
 800e24e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e252:	801a      	strh	r2, [r3, #0]
 800e254:	e034      	b.n	800e2c0 <USB_EPStartXfer+0x10ea>
 800e256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e25a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	785b      	ldrb	r3, [r3, #1]
 800e262:	2b01      	cmp	r3, #1
 800e264:	d12c      	bne.n	800e2c0 <USB_EPStartXfer+0x10ea>
 800e266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e26a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e278:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e282:	b29b      	uxth	r3, r3
 800e284:	461a      	mov	r2, r3
 800e286:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e28a:	4413      	add	r3, r2
 800e28c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	00da      	lsls	r2, r3, #3
 800e29e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e2a2:	4413      	add	r3, r2
 800e2a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e2a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e2ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	691b      	ldr	r3, [r3, #16]
 800e2b8:	b29a      	uxth	r2, r3
 800e2ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e2be:	801a      	strh	r2, [r3, #0]
 800e2c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e2ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	785b      	ldrb	r3, [r3, #1]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	f040 809d 	bne.w	800e41a <USB_EPStartXfer+0x1244>
 800e2e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e2ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	461a      	mov	r2, r3
 800e300:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e304:	4413      	add	r3, r2
 800e306:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e30a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e30e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	00da      	lsls	r2, r3, #3
 800e318:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e31c:	4413      	add	r3, r2
 800e31e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e322:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e326:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e32a:	881b      	ldrh	r3, [r3, #0]
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e332:	b29a      	uxth	r2, r3
 800e334:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e338:	801a      	strh	r2, [r3, #0]
 800e33a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e33e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	691b      	ldr	r3, [r3, #16]
 800e346:	2b3e      	cmp	r3, #62	@ 0x3e
 800e348:	d92b      	bls.n	800e3a2 <USB_EPStartXfer+0x11cc>
 800e34a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e34e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	691b      	ldr	r3, [r3, #16]
 800e356:	095b      	lsrs	r3, r3, #5
 800e358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e35c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	691b      	ldr	r3, [r3, #16]
 800e368:	f003 031f 	and.w	r3, r3, #31
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d104      	bne.n	800e37a <USB_EPStartXfer+0x11a4>
 800e370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e374:	3b01      	subs	r3, #1
 800e376:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e37a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e37e:	881b      	ldrh	r3, [r3, #0]
 800e380:	b29a      	uxth	r2, r3
 800e382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e386:	b29b      	uxth	r3, r3
 800e388:	029b      	lsls	r3, r3, #10
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	4313      	orrs	r3, r2
 800e38e:	b29b      	uxth	r3, r3
 800e390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e398:	b29a      	uxth	r2, r3
 800e39a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e39e:	801a      	strh	r2, [r3, #0]
 800e3a0:	e069      	b.n	800e476 <USB_EPStartXfer+0x12a0>
 800e3a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	691b      	ldr	r3, [r3, #16]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d10c      	bne.n	800e3cc <USB_EPStartXfer+0x11f6>
 800e3b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e3b6:	881b      	ldrh	r3, [r3, #0]
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e3c8:	801a      	strh	r2, [r3, #0]
 800e3ca:	e054      	b.n	800e476 <USB_EPStartXfer+0x12a0>
 800e3cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	691b      	ldr	r3, [r3, #16]
 800e3d8:	085b      	lsrs	r3, r3, #1
 800e3da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e3de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	691b      	ldr	r3, [r3, #16]
 800e3ea:	f003 0301 	and.w	r3, r3, #1
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d004      	beq.n	800e3fc <USB_EPStartXfer+0x1226>
 800e3f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e3fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e400:	881b      	ldrh	r3, [r3, #0]
 800e402:	b29a      	uxth	r2, r3
 800e404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e408:	b29b      	uxth	r3, r3
 800e40a:	029b      	lsls	r3, r3, #10
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	4313      	orrs	r3, r2
 800e410:	b29a      	uxth	r2, r3
 800e412:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e416:	801a      	strh	r2, [r3, #0]
 800e418:	e02d      	b.n	800e476 <USB_EPStartXfer+0x12a0>
 800e41a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e41e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	785b      	ldrb	r3, [r3, #1]
 800e426:	2b01      	cmp	r3, #1
 800e428:	d125      	bne.n	800e476 <USB_EPStartXfer+0x12a0>
 800e42a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e42e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e438:	b29b      	uxth	r3, r3
 800e43a:	461a      	mov	r2, r3
 800e43c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e440:	4413      	add	r3, r2
 800e442:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e44a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	00da      	lsls	r2, r3, #3
 800e454:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e458:	4413      	add	r3, r2
 800e45a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e45e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	691b      	ldr	r3, [r3, #16]
 800e46e:	b29a      	uxth	r2, r3
 800e470:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e474:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e47a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	69db      	ldr	r3, [r3, #28]
 800e482:	2b00      	cmp	r3, #0
 800e484:	f000 8218 	beq.w	800e8b8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e48c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	009b      	lsls	r3, r3, #2
 800e4a0:	4413      	add	r3, r2
 800e4a2:	881b      	ldrh	r3, [r3, #0]
 800e4a4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e4a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e4ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d005      	beq.n	800e4c0 <USB_EPStartXfer+0x12ea>
 800e4b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e4b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d10d      	bne.n	800e4dc <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e4c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e4c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f040 81f5 	bne.w	800e8b8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e4ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e4d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	f040 81ee 	bne.w	800e8b8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e4dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	4413      	add	r3, r2
 800e4f6:	881b      	ldrh	r3, [r3, #0]
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e4fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e502:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800e506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e50a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e50e:	681a      	ldr	r2, [r3, #0]
 800e510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	009b      	lsls	r3, r3, #2
 800e51e:	441a      	add	r2, r3
 800e520:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e524:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e528:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e52c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e530:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e534:	b29b      	uxth	r3, r3
 800e536:	8013      	strh	r3, [r2, #0]
 800e538:	e1be      	b.n	800e8b8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e53a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e53e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	78db      	ldrb	r3, [r3, #3]
 800e546:	2b01      	cmp	r3, #1
 800e548:	f040 81b4 	bne.w	800e8b4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e54c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	699a      	ldr	r2, [r3, #24]
 800e558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e55c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	691b      	ldr	r3, [r3, #16]
 800e564:	429a      	cmp	r2, r3
 800e566:	d917      	bls.n	800e598 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800e568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e56c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	691b      	ldr	r3, [r3, #16]
 800e574:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800e578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e57c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	699a      	ldr	r2, [r3, #24]
 800e584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e588:	1ad2      	subs	r2, r2, r3
 800e58a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e58e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	619a      	str	r2, [r3, #24]
 800e596:	e00e      	b.n	800e5b6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800e598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e59c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	699b      	ldr	r3, [r3, #24]
 800e5a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800e5a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e5b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	785b      	ldrb	r3, [r3, #1]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f040 8085 	bne.w	800e6d2 <USB_EPStartXfer+0x14fc>
 800e5c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e5d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e5ec:	4413      	add	r3, r2
 800e5ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e5f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	00da      	lsls	r2, r3, #3
 800e600:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e604:	4413      	add	r3, r2
 800e606:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e60a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e60e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e612:	881b      	ldrh	r3, [r3, #0]
 800e614:	b29b      	uxth	r3, r3
 800e616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e620:	801a      	strh	r2, [r3, #0]
 800e622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e626:	2b3e      	cmp	r3, #62	@ 0x3e
 800e628:	d923      	bls.n	800e672 <USB_EPStartXfer+0x149c>
 800e62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e62e:	095b      	lsrs	r3, r3, #5
 800e630:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e638:	f003 031f 	and.w	r3, r3, #31
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d104      	bne.n	800e64a <USB_EPStartXfer+0x1474>
 800e640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e644:	3b01      	subs	r3, #1
 800e646:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e64a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e64e:	881b      	ldrh	r3, [r3, #0]
 800e650:	b29a      	uxth	r2, r3
 800e652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e656:	b29b      	uxth	r3, r3
 800e658:	029b      	lsls	r3, r3, #10
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	4313      	orrs	r3, r2
 800e65e:	b29b      	uxth	r3, r3
 800e660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e668:	b29a      	uxth	r2, r3
 800e66a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e66e:	801a      	strh	r2, [r3, #0]
 800e670:	e060      	b.n	800e734 <USB_EPStartXfer+0x155e>
 800e672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e676:	2b00      	cmp	r3, #0
 800e678:	d10c      	bne.n	800e694 <USB_EPStartXfer+0x14be>
 800e67a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e67e:	881b      	ldrh	r3, [r3, #0]
 800e680:	b29b      	uxth	r3, r3
 800e682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e68a:	b29a      	uxth	r2, r3
 800e68c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e690:	801a      	strh	r2, [r3, #0]
 800e692:	e04f      	b.n	800e734 <USB_EPStartXfer+0x155e>
 800e694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e698:	085b      	lsrs	r3, r3, #1
 800e69a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6a2:	f003 0301 	and.w	r3, r3, #1
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d004      	beq.n	800e6b4 <USB_EPStartXfer+0x14de>
 800e6aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e6b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e6b8:	881b      	ldrh	r3, [r3, #0]
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	029b      	lsls	r3, r3, #10
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	4313      	orrs	r3, r2
 800e6c8:	b29a      	uxth	r2, r3
 800e6ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e6ce:	801a      	strh	r2, [r3, #0]
 800e6d0:	e030      	b.n	800e734 <USB_EPStartXfer+0x155e>
 800e6d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	785b      	ldrb	r3, [r3, #1]
 800e6de:	2b01      	cmp	r3, #1
 800e6e0:	d128      	bne.n	800e734 <USB_EPStartXfer+0x155e>
 800e6e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e6f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	461a      	mov	r2, r3
 800e702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e706:	4413      	add	r3, r2
 800e708:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e70c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	00da      	lsls	r2, r3, #3
 800e71a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e71e:	4413      	add	r3, r2
 800e720:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e732:	801a      	strh	r2, [r3, #0]
 800e734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	785b      	ldrb	r3, [r3, #1]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	f040 8085 	bne.w	800e85e <USB_EPStartXfer+0x1688>
 800e754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e766:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e770:	b29b      	uxth	r3, r3
 800e772:	461a      	mov	r2, r3
 800e774:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e778:	4413      	add	r3, r2
 800e77a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e77e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	00da      	lsls	r2, r3, #3
 800e78c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e790:	4413      	add	r3, r2
 800e792:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e796:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e79a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e79e:	881b      	ldrh	r3, [r3, #0]
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e7a6:	b29a      	uxth	r2, r3
 800e7a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e7ac:	801a      	strh	r2, [r3, #0]
 800e7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800e7b4:	d923      	bls.n	800e7fe <USB_EPStartXfer+0x1628>
 800e7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7ba:	095b      	lsrs	r3, r3, #5
 800e7bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7c4:	f003 031f 	and.w	r3, r3, #31
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d104      	bne.n	800e7d6 <USB_EPStartXfer+0x1600>
 800e7cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e7d0:	3b01      	subs	r3, #1
 800e7d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e7d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e7da:	881b      	ldrh	r3, [r3, #0]
 800e7dc:	b29a      	uxth	r2, r3
 800e7de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	029b      	lsls	r3, r3, #10
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	4313      	orrs	r3, r2
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7f4:	b29a      	uxth	r2, r3
 800e7f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e7fa:	801a      	strh	r2, [r3, #0]
 800e7fc:	e05c      	b.n	800e8b8 <USB_EPStartXfer+0x16e2>
 800e7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e802:	2b00      	cmp	r3, #0
 800e804:	d10c      	bne.n	800e820 <USB_EPStartXfer+0x164a>
 800e806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e80a:	881b      	ldrh	r3, [r3, #0]
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e816:	b29a      	uxth	r2, r3
 800e818:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e81c:	801a      	strh	r2, [r3, #0]
 800e81e:	e04b      	b.n	800e8b8 <USB_EPStartXfer+0x16e2>
 800e820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e824:	085b      	lsrs	r3, r3, #1
 800e826:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e82a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e82e:	f003 0301 	and.w	r3, r3, #1
 800e832:	2b00      	cmp	r3, #0
 800e834:	d004      	beq.n	800e840 <USB_EPStartXfer+0x166a>
 800e836:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e83a:	3301      	adds	r3, #1
 800e83c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e840:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e844:	881b      	ldrh	r3, [r3, #0]
 800e846:	b29a      	uxth	r2, r3
 800e848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e84c:	b29b      	uxth	r3, r3
 800e84e:	029b      	lsls	r3, r3, #10
 800e850:	b29b      	uxth	r3, r3
 800e852:	4313      	orrs	r3, r2
 800e854:	b29a      	uxth	r2, r3
 800e856:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e85a:	801a      	strh	r2, [r3, #0]
 800e85c:	e02c      	b.n	800e8b8 <USB_EPStartXfer+0x16e2>
 800e85e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	785b      	ldrb	r3, [r3, #1]
 800e86a:	2b01      	cmp	r3, #1
 800e86c:	d124      	bne.n	800e8b8 <USB_EPStartXfer+0x16e2>
 800e86e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e872:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	461a      	mov	r2, r3
 800e880:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e884:	4413      	add	r3, r2
 800e886:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e88a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e88e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	00da      	lsls	r2, r3, #3
 800e898:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e89c:	4413      	add	r3, r2
 800e89e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e8a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8aa:	b29a      	uxth	r2, r3
 800e8ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e8b0:	801a      	strh	r2, [r3, #0]
 800e8b2:	e001      	b.n	800e8b8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	e03a      	b.n	800e92e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e8b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	781b      	ldrb	r3, [r3, #0]
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	4413      	add	r3, r2
 800e8d2:	881b      	ldrh	r3, [r3, #0]
 800e8d4:	b29b      	uxth	r3, r3
 800e8d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e8da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8de:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e8e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e8e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e8ea:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e8ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e8f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e8f6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e8fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e902:	681a      	ldr	r2, [r3, #0]
 800e904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	441a      	add	r2, r3
 800e914:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e91c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e928:	b29b      	uxth	r3, r3
 800e92a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e92c:	2300      	movs	r3, #0
}
 800e92e:	4618      	mov	r0, r3
 800e930:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}

0800e938 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e938:	b480      	push	{r7}
 800e93a:	b085      	sub	sp, #20
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	785b      	ldrb	r3, [r3, #1]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d020      	beq.n	800e98c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e94a:	687a      	ldr	r2, [r7, #4]
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	009b      	lsls	r3, r3, #2
 800e952:	4413      	add	r3, r2
 800e954:	881b      	ldrh	r3, [r3, #0]
 800e956:	b29b      	uxth	r3, r3
 800e958:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e95c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e960:	81bb      	strh	r3, [r7, #12]
 800e962:	89bb      	ldrh	r3, [r7, #12]
 800e964:	f083 0310 	eor.w	r3, r3, #16
 800e968:	81bb      	strh	r3, [r7, #12]
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	441a      	add	r2, r3
 800e974:	89bb      	ldrh	r3, [r7, #12]
 800e976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e97a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e97e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e986:	b29b      	uxth	r3, r3
 800e988:	8013      	strh	r3, [r2, #0]
 800e98a:	e01f      	b.n	800e9cc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e98c:	687a      	ldr	r2, [r7, #4]
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	009b      	lsls	r3, r3, #2
 800e994:	4413      	add	r3, r2
 800e996:	881b      	ldrh	r3, [r3, #0]
 800e998:	b29b      	uxth	r3, r3
 800e99a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e99e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e9a2:	81fb      	strh	r3, [r7, #14]
 800e9a4:	89fb      	ldrh	r3, [r7, #14]
 800e9a6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e9aa:	81fb      	strh	r3, [r7, #14]
 800e9ac:	687a      	ldr	r2, [r7, #4]
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	009b      	lsls	r3, r3, #2
 800e9b4:	441a      	add	r2, r3
 800e9b6:	89fb      	ldrh	r3, [r7, #14]
 800e9b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e9bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e9c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e9c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e9cc:	2300      	movs	r3, #0
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3714      	adds	r7, #20
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr

0800e9da <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e9da:	b480      	push	{r7}
 800e9dc:	b087      	sub	sp, #28
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	6078      	str	r0, [r7, #4]
 800e9e2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	7b1b      	ldrb	r3, [r3, #12]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	f040 809d 	bne.w	800eb28 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	785b      	ldrb	r3, [r3, #1]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d04c      	beq.n	800ea90 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	009b      	lsls	r3, r3, #2
 800e9fe:	4413      	add	r3, r2
 800ea00:	881b      	ldrh	r3, [r3, #0]
 800ea02:	823b      	strh	r3, [r7, #16]
 800ea04:	8a3b      	ldrh	r3, [r7, #16]
 800ea06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d01b      	beq.n	800ea46 <USB_EPClearStall+0x6c>
 800ea0e:	687a      	ldr	r2, [r7, #4]
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	4413      	add	r3, r2
 800ea18:	881b      	ldrh	r3, [r3, #0]
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ea20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea24:	81fb      	strh	r3, [r7, #14]
 800ea26:	687a      	ldr	r2, [r7, #4]
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	781b      	ldrb	r3, [r3, #0]
 800ea2c:	009b      	lsls	r3, r3, #2
 800ea2e:	441a      	add	r2, r3
 800ea30:	89fb      	ldrh	r3, [r7, #14]
 800ea32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ea3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	78db      	ldrb	r3, [r3, #3]
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d06c      	beq.n	800eb28 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	009b      	lsls	r3, r3, #2
 800ea56:	4413      	add	r3, r2
 800ea58:	881b      	ldrh	r3, [r3, #0]
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ea60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea64:	81bb      	strh	r3, [r7, #12]
 800ea66:	89bb      	ldrh	r3, [r7, #12]
 800ea68:	f083 0320 	eor.w	r3, r3, #32
 800ea6c:	81bb      	strh	r3, [r7, #12]
 800ea6e:	687a      	ldr	r2, [r7, #4]
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	009b      	lsls	r3, r3, #2
 800ea76:	441a      	add	r2, r3
 800ea78:	89bb      	ldrh	r3, [r7, #12]
 800ea7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ea86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	8013      	strh	r3, [r2, #0]
 800ea8e:	e04b      	b.n	800eb28 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	009b      	lsls	r3, r3, #2
 800ea98:	4413      	add	r3, r2
 800ea9a:	881b      	ldrh	r3, [r3, #0]
 800ea9c:	82fb      	strh	r3, [r7, #22]
 800ea9e:	8afb      	ldrh	r3, [r7, #22]
 800eaa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d01b      	beq.n	800eae0 <USB_EPClearStall+0x106>
 800eaa8:	687a      	ldr	r2, [r7, #4]
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	009b      	lsls	r3, r3, #2
 800eab0:	4413      	add	r3, r2
 800eab2:	881b      	ldrh	r3, [r3, #0]
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eaba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eabe:	82bb      	strh	r3, [r7, #20]
 800eac0:	687a      	ldr	r2, [r7, #4]
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	009b      	lsls	r3, r3, #2
 800eac8:	441a      	add	r2, r3
 800eaca:	8abb      	ldrh	r3, [r7, #20]
 800eacc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ead0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ead4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ead8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eadc:	b29b      	uxth	r3, r3
 800eade:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	009b      	lsls	r3, r3, #2
 800eae8:	4413      	add	r3, r2
 800eaea:	881b      	ldrh	r3, [r3, #0]
 800eaec:	b29b      	uxth	r3, r3
 800eaee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800eaf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eaf6:	827b      	strh	r3, [r7, #18]
 800eaf8:	8a7b      	ldrh	r3, [r7, #18]
 800eafa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800eafe:	827b      	strh	r3, [r7, #18]
 800eb00:	8a7b      	ldrh	r3, [r7, #18]
 800eb02:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800eb06:	827b      	strh	r3, [r7, #18]
 800eb08:	687a      	ldr	r2, [r7, #4]
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	009b      	lsls	r3, r3, #2
 800eb10:	441a      	add	r2, r3
 800eb12:	8a7b      	ldrh	r3, [r7, #18]
 800eb14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eb18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eb1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eb20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	371c      	adds	r7, #28
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr

0800eb36 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800eb36:	b480      	push	{r7}
 800eb38:	b083      	sub	sp, #12
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
 800eb3e:	460b      	mov	r3, r1
 800eb40:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800eb42:	78fb      	ldrb	r3, [r7, #3]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d103      	bne.n	800eb50 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2280      	movs	r2, #128	@ 0x80
 800eb4c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800eb50:	2300      	movs	r3, #0
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	370c      	adds	r7, #12
 800eb56:	46bd      	mov	sp, r7
 800eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5c:	4770      	bx	lr

0800eb5e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800eb5e:	b480      	push	{r7}
 800eb60:	b083      	sub	sp, #12
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb76:	b29a      	uxth	r2, r3
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800eb7e:	2300      	movs	r3, #0
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	370c      	adds	r7, #12
 800eb84:	46bd      	mov	sp, r7
 800eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8a:	4770      	bx	lr

0800eb8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3714      	adds	r7, #20
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b08b      	sub	sp, #44	@ 0x2c
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	60f8      	str	r0, [r7, #12]
 800ebb4:	60b9      	str	r1, [r7, #8]
 800ebb6:	4611      	mov	r1, r2
 800ebb8:	461a      	mov	r2, r3
 800ebba:	460b      	mov	r3, r1
 800ebbc:	80fb      	strh	r3, [r7, #6]
 800ebbe:	4613      	mov	r3, r2
 800ebc0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ebc2:	88bb      	ldrh	r3, [r7, #4]
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	085b      	lsrs	r3, r3, #1
 800ebc8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ebd2:	88fa      	ldrh	r2, [r7, #6]
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	4413      	add	r3, r2
 800ebd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ebdc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ebde:	69bb      	ldr	r3, [r7, #24]
 800ebe0:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebe2:	e01b      	b.n	800ec1c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	3301      	adds	r3, #1
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	021b      	lsls	r3, r3, #8
 800ebf2:	b21a      	sxth	r2, r3
 800ebf4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ebf8:	4313      	orrs	r3, r2
 800ebfa:	b21b      	sxth	r3, r3
 800ebfc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ebfe:	6a3b      	ldr	r3, [r7, #32]
 800ec00:	8a7a      	ldrh	r2, [r7, #18]
 800ec02:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ec04:	6a3b      	ldr	r3, [r7, #32]
 800ec06:	3302      	adds	r3, #2
 800ec08:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ec0a:	69fb      	ldr	r3, [r7, #28]
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ec10:	69fb      	ldr	r3, [r7, #28]
 800ec12:	3301      	adds	r3, #1
 800ec14:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ec16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1e0      	bne.n	800ebe4 <USB_WritePMA+0x38>
  }
}
 800ec22:	bf00      	nop
 800ec24:	bf00      	nop
 800ec26:	372c      	adds	r7, #44	@ 0x2c
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr

0800ec30 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b08b      	sub	sp, #44	@ 0x2c
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	4611      	mov	r1, r2
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	460b      	mov	r3, r1
 800ec40:	80fb      	strh	r3, [r7, #6]
 800ec42:	4613      	mov	r3, r2
 800ec44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ec46:	88bb      	ldrh	r3, [r7, #4]
 800ec48:	085b      	lsrs	r3, r3, #1
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ec56:	88fa      	ldrh	r2, [r7, #6]
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ec60:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec66:	e018      	b.n	800ec9a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ec68:	6a3b      	ldr	r3, [r7, #32]
 800ec6a:	881b      	ldrh	r3, [r3, #0]
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ec70:	6a3b      	ldr	r3, [r7, #32]
 800ec72:	3302      	adds	r3, #2
 800ec74:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	b2da      	uxtb	r2, r3
 800ec7a:	69fb      	ldr	r3, [r7, #28]
 800ec7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	3301      	adds	r3, #1
 800ec82:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	0a1b      	lsrs	r3, r3, #8
 800ec88:	b2da      	uxtb	r2, r3
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ec8e:	69fb      	ldr	r3, [r7, #28]
 800ec90:	3301      	adds	r3, #1
 800ec92:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ec94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec96:	3b01      	subs	r3, #1
 800ec98:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d1e3      	bne.n	800ec68 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800eca0:	88bb      	ldrh	r3, [r7, #4]
 800eca2:	f003 0301 	and.w	r3, r3, #1
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d007      	beq.n	800ecbc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ecac:	6a3b      	ldr	r3, [r7, #32]
 800ecae:	881b      	ldrh	r3, [r3, #0]
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	b2da      	uxtb	r2, r3
 800ecb8:	69fb      	ldr	r3, [r7, #28]
 800ecba:	701a      	strb	r2, [r3, #0]
  }
}
 800ecbc:	bf00      	nop
 800ecbe:	372c      	adds	r7, #44	@ 0x2c
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
float32_t arm_cos_f32(
  float32_t x)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b08b      	sub	sp, #44	@ 0x2c
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 800ecd2:	edd7 7a01 	vldr	s15, [r7, #4]
 800ecd6:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800edc8 <arm_cos_f32+0x100>
 800ecda:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ecde:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800ece2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ece6:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800ecea:	edd7 7a06 	vldr	s15, [r7, #24]
 800ecee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ecf2:	ee17 3a90 	vmov	r3, s15
 800ecf6:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 800ecf8:	edd7 7a06 	vldr	s15, [r7, #24]
 800ecfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ed00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed04:	d502      	bpl.n	800ed0c <arm_cos_f32+0x44>
  {
    n--;
 800ed06:	6a3b      	ldr	r3, [r7, #32]
 800ed08:	3b01      	subs	r3, #1
 800ed0a:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800ed0c:	6a3b      	ldr	r3, [r7, #32]
 800ed0e:	ee07 3a90 	vmov	s15, r3
 800ed12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed16:	ed97 7a06 	vldr	s14, [r7, #24]
 800ed1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed1e:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800ed22:	edd7 7a06 	vldr	s15, [r7, #24]
 800ed26:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800edcc <arm_cos_f32+0x104>
 800ed2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed2e:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 800ed32:	edd7 7a07 	vldr	s15, [r7, #28]
 800ed36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed3a:	ee17 3a90 	vmov	r3, s15
 800ed3e:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800ed40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ed42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed46:	d309      	bcc.n	800ed5c <arm_cos_f32+0x94>
    index = 0;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800ed4c:	edd7 7a07 	vldr	s15, [r7, #28]
 800ed50:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800edcc <arm_cos_f32+0x104>
 800ed54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed58:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800ed5c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ed5e:	ee07 3a90 	vmov	s15, r3
 800ed62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed66:	ed97 7a07 	vldr	s14, [r7, #28]
 800ed6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed6e:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 800ed72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ed74:	4a16      	ldr	r2, [pc, #88]	@ (800edd0 <arm_cos_f32+0x108>)
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	4413      	add	r3, r2
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800ed7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ed80:	3301      	adds	r3, #1
 800ed82:	4a13      	ldr	r2, [pc, #76]	@ (800edd0 <arm_cos_f32+0x108>)
 800ed84:	009b      	lsls	r3, r3, #2
 800ed86:	4413      	add	r3, r2
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 800ed8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ed90:	edd7 7a05 	vldr	s15, [r7, #20]
 800ed94:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ed98:	edd7 7a04 	vldr	s15, [r7, #16]
 800ed9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eda0:	edd7 6a05 	vldr	s13, [r7, #20]
 800eda4:	edd7 7a03 	vldr	s15, [r7, #12]
 800eda8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800edac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800edb0:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	ee07 3a90 	vmov	s15, r3
}
 800edba:	eeb0 0a67 	vmov.f32	s0, s15
 800edbe:	372c      	adds	r7, #44	@ 0x2c
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr
 800edc8:	3e22f983 	.word	0x3e22f983
 800edcc:	44000000 	.word	0x44000000
 800edd0:	08012c70 	.word	0x08012c70

0800edd4 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 800edd4:	b480      	push	{r7}
 800edd6:	b08b      	sub	sp, #44	@ 0x2c
 800edd8:	af00      	add	r7, sp, #0
 800edda:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800edde:	edd7 7a01 	vldr	s15, [r7, #4]
 800ede2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800eecc <arm_sin_f32+0xf8>
 800ede6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800edea:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800edee:	edd7 7a06 	vldr	s15, [r7, #24]
 800edf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800edf6:	ee17 3a90 	vmov	r3, s15
 800edfa:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 800edfc:	edd7 7a06 	vldr	s15, [r7, #24]
 800ee00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ee04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee08:	d502      	bpl.n	800ee10 <arm_sin_f32+0x3c>
  {
    n--;
 800ee0a:	6a3b      	ldr	r3, [r7, #32]
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800ee10:	6a3b      	ldr	r3, [r7, #32]
 800ee12:	ee07 3a90 	vmov	s15, r3
 800ee16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee1a:	ed97 7a06 	vldr	s14, [r7, #24]
 800ee1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee22:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800ee26:	edd7 7a06 	vldr	s15, [r7, #24]
 800ee2a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800eed0 <arm_sin_f32+0xfc>
 800ee2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee32:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 800ee36:	edd7 7a07 	vldr	s15, [r7, #28]
 800ee3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ee3e:	ee17 3a90 	vmov	r3, s15
 800ee42:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800ee44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ee46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee4a:	d309      	bcc.n	800ee60 <arm_sin_f32+0x8c>
    index = 0;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800ee50:	edd7 7a07 	vldr	s15, [r7, #28]
 800ee54:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800eed0 <arm_sin_f32+0xfc>
 800ee58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee5c:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800ee60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ee62:	ee07 3a90 	vmov	s15, r3
 800ee66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee6a:	ed97 7a07 	vldr	s14, [r7, #28]
 800ee6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee72:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800ee76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ee78:	4a16      	ldr	r2, [pc, #88]	@ (800eed4 <arm_sin_f32+0x100>)
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	4413      	add	r3, r2
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800ee82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ee84:	3301      	adds	r3, #1
 800ee86:	4a13      	ldr	r2, [pc, #76]	@ (800eed4 <arm_sin_f32+0x100>)
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	4413      	add	r3, r2
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 800ee90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ee94:	edd7 7a05 	vldr	s15, [r7, #20]
 800ee98:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ee9c:	edd7 7a04 	vldr	s15, [r7, #16]
 800eea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eea4:	edd7 6a05 	vldr	s13, [r7, #20]
 800eea8:	edd7 7a03 	vldr	s15, [r7, #12]
 800eeac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eeb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eeb4:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	ee07 3a90 	vmov	s15, r3
}
 800eebe:	eeb0 0a67 	vmov.f32	s0, s15
 800eec2:	372c      	adds	r7, #44	@ 0x2c
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr
 800eecc:	3e22f983 	.word	0x3e22f983
 800eed0:	44000000 	.word	0x44000000
 800eed4:	08012c70 	.word	0x08012c70

0800eed8 <arm_max_q15>:
void arm_max_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b089      	sub	sp, #36	@ 0x24
 800eedc:	af00      	add	r7, sp, #0
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	60b9      	str	r1, [r7, #8]
 800eee2:	607a      	str	r2, [r7, #4]
 800eee4:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 800eee6:	2300      	movs	r3, #0
 800eee8:	617b      	str	r3, [r7, #20]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	1c9a      	adds	r2, r3, #2
 800eeee:	60fa      	str	r2, [r7, #12]
 800eef0:	881b      	ldrh	r3, [r3, #0]
 800eef2:	83fb      	strh	r3, [r7, #30]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	3b01      	subs	r3, #1
 800eef8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800eefa:	e013      	b.n	800ef24 <arm_max_q15+0x4c>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	1c9a      	adds	r2, r3, #2
 800ef00:	60fa      	str	r2, [r7, #12]
 800ef02:	881b      	ldrh	r3, [r3, #0]
 800ef04:	827b      	strh	r3, [r7, #18]

    /* compare for the maximum value */
    if (out < maxVal)
 800ef06:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800ef0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	da05      	bge.n	800ef1e <arm_max_q15+0x46>
    {
      /* Update the maximum value and it's index */
      out = maxVal;
 800ef12:	8a7b      	ldrh	r3, [r7, #18]
 800ef14:	83fb      	strh	r3, [r7, #30]
      outIndex = blockSize - blkCnt;
 800ef16:	68ba      	ldr	r2, [r7, #8]
 800ef18:	69bb      	ldr	r3, [r7, #24]
 800ef1a:	1ad3      	subs	r3, r2, r3
 800ef1c:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 800ef1e:	69bb      	ldr	r3, [r7, #24]
 800ef20:	3b01      	subs	r3, #1
 800ef22:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d1e8      	bne.n	800eefc <arm_max_q15+0x24>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	8bfa      	ldrh	r2, [r7, #30]
 800ef2e:	801a      	strh	r2, [r3, #0]
  *pIndex = outIndex;
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	697a      	ldr	r2, [r7, #20]
 800ef34:	601a      	str	r2, [r3, #0]
}
 800ef36:	bf00      	nop
 800ef38:	3724      	adds	r7, #36	@ 0x24
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr

0800ef42 <arm_min_q15>:
void arm_min_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 800ef42:	b480      	push	{r7}
 800ef44:	b089      	sub	sp, #36	@ 0x24
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	60f8      	str	r0, [r7, #12]
 800ef4a:	60b9      	str	r1, [r7, #8]
 800ef4c:	607a      	str	r2, [r7, #4]
 800ef4e:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 800ef50:	2300      	movs	r3, #0
 800ef52:	617b      	str	r3, [r7, #20]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	1c9a      	adds	r2, r3, #2
 800ef58:	60fa      	str	r2, [r7, #12]
 800ef5a:	881b      	ldrh	r3, [r3, #0]
 800ef5c:	83fb      	strh	r3, [r7, #30]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	3b01      	subs	r3, #1
 800ef62:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800ef64:	e013      	b.n	800ef8e <arm_min_q15+0x4c>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal = *pSrc++;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	1c9a      	adds	r2, r3, #2
 800ef6a:	60fa      	str	r2, [r7, #12]
 800ef6c:	881b      	ldrh	r3, [r3, #0]
 800ef6e:	827b      	strh	r3, [r7, #18]

    /* compare for the minimum value */
    if (out > minVal)
 800ef70:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800ef74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	dd05      	ble.n	800ef88 <arm_min_q15+0x46>
    {
      /* Update the minimum value and it's index */
      out = minVal;
 800ef7c:	8a7b      	ldrh	r3, [r7, #18]
 800ef7e:	83fb      	strh	r3, [r7, #30]
      outIndex = blockSize - blkCnt;
 800ef80:	68ba      	ldr	r2, [r7, #8]
 800ef82:	69bb      	ldr	r3, [r7, #24]
 800ef84:	1ad3      	subs	r3, r2, r3
 800ef86:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	3b01      	subs	r3, #1
 800ef8c:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d1e8      	bne.n	800ef66 <arm_min_q15+0x24>
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	8bfa      	ldrh	r2, [r7, #30]
 800ef98:	801a      	strh	r2, [r3, #0]
  *pIndex = outIndex;
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	697a      	ldr	r2, [r7, #20]
 800ef9e:	601a      	str	r2, [r3, #0]
}
 800efa0:	bf00      	nop
 800efa2:	3724      	adds	r7, #36	@ 0x24
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr

0800efac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b084      	sub	sp, #16
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	460b      	mov	r3, r1
 800efb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800efb8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800efbc:	f002 f8fa 	bl	80111b4 <USBD_static_malloc>
 800efc0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d105      	bne.n	800efd4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2200      	movs	r2, #0
 800efcc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800efd0:	2302      	movs	r3, #2
 800efd2:	e066      	b.n	800f0a2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	68fa      	ldr	r2, [r7, #12]
 800efd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	7c1b      	ldrb	r3, [r3, #16]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d119      	bne.n	800f018 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800efe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800efe8:	2202      	movs	r2, #2
 800efea:	2181      	movs	r1, #129	@ 0x81
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f001 ff88 	bl	8010f02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2201      	movs	r2, #1
 800eff6:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800eff8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800effc:	2202      	movs	r2, #2
 800effe:	2101      	movs	r1, #1
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f001 ff7e 	bl	8010f02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2201      	movs	r2, #1
 800f00a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2210      	movs	r2, #16
 800f012:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800f016:	e016      	b.n	800f046 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f018:	2340      	movs	r3, #64	@ 0x40
 800f01a:	2202      	movs	r2, #2
 800f01c:	2181      	movs	r1, #129	@ 0x81
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f001 ff6f 	bl	8010f02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2201      	movs	r2, #1
 800f028:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f02a:	2340      	movs	r3, #64	@ 0x40
 800f02c:	2202      	movs	r2, #2
 800f02e:	2101      	movs	r1, #1
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f001 ff66 	bl	8010f02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2201      	movs	r2, #1
 800f03a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2210      	movs	r2, #16
 800f042:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f046:	2308      	movs	r3, #8
 800f048:	2203      	movs	r2, #3
 800f04a:	2182      	movs	r1, #130	@ 0x82
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f001 ff58 	bl	8010f02 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2201      	movs	r2, #1
 800f056:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2200      	movs	r2, #0
 800f068:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2200      	movs	r2, #0
 800f070:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	7c1b      	ldrb	r3, [r3, #16]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d109      	bne.n	800f090 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f082:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f086:	2101      	movs	r1, #1
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f002 f829 	bl	80110e0 <USBD_LL_PrepareReceive>
 800f08e:	e007      	b.n	800f0a0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f096:	2340      	movs	r3, #64	@ 0x40
 800f098:	2101      	movs	r1, #1
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f002 f820 	bl	80110e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f0a0:	2300      	movs	r3, #0
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3710      	adds	r7, #16
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}

0800f0aa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f0aa:	b580      	push	{r7, lr}
 800f0ac:	b082      	sub	sp, #8
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	6078      	str	r0, [r7, #4]
 800f0b2:	460b      	mov	r3, r1
 800f0b4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f0b6:	2181      	movs	r1, #129	@ 0x81
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f001 ff48 	bl	8010f4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f0c4:	2101      	movs	r1, #1
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f001 ff41 	bl	8010f4e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f0d4:	2182      	movs	r1, #130	@ 0x82
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f001 ff39 	bl	8010f4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d00e      	beq.n	800f114 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f106:	4618      	mov	r0, r3
 800f108:	f002 f862 	bl	80111d0 <USBD_static_free>
    pdev->pClassData = NULL;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	3708      	adds	r7, #8
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
	...

0800f120 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b086      	sub	sp, #24
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f130:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f132:	2300      	movs	r3, #0
 800f134:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f136:	2300      	movs	r3, #0
 800f138:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f13a:	2300      	movs	r3, #0
 800f13c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d101      	bne.n	800f148 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f144:	2303      	movs	r3, #3
 800f146:	e0af      	b.n	800f2a8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f150:	2b00      	cmp	r3, #0
 800f152:	d03f      	beq.n	800f1d4 <USBD_CDC_Setup+0xb4>
 800f154:	2b20      	cmp	r3, #32
 800f156:	f040 809f 	bne.w	800f298 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	88db      	ldrh	r3, [r3, #6]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d02e      	beq.n	800f1c0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	b25b      	sxtb	r3, r3
 800f168:	2b00      	cmp	r3, #0
 800f16a:	da16      	bge.n	800f19a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f172:	689b      	ldr	r3, [r3, #8]
 800f174:	683a      	ldr	r2, [r7, #0]
 800f176:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f178:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f17a:	683a      	ldr	r2, [r7, #0]
 800f17c:	88d2      	ldrh	r2, [r2, #6]
 800f17e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	88db      	ldrh	r3, [r3, #6]
 800f184:	2b07      	cmp	r3, #7
 800f186:	bf28      	it	cs
 800f188:	2307      	movcs	r3, #7
 800f18a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	89fa      	ldrh	r2, [r7, #14]
 800f190:	4619      	mov	r1, r3
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f001 facd 	bl	8010732 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f198:	e085      	b.n	800f2a6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	785a      	ldrb	r2, [r3, #1]
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	88db      	ldrh	r3, [r3, #6]
 800f1a8:	b2da      	uxtb	r2, r3
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f1b0:	6939      	ldr	r1, [r7, #16]
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	88db      	ldrh	r3, [r3, #6]
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f001 fae6 	bl	801078a <USBD_CtlPrepareRx>
      break;
 800f1be:	e072      	b.n	800f2a6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f1c6:	689b      	ldr	r3, [r3, #8]
 800f1c8:	683a      	ldr	r2, [r7, #0]
 800f1ca:	7850      	ldrb	r0, [r2, #1]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	6839      	ldr	r1, [r7, #0]
 800f1d0:	4798      	blx	r3
      break;
 800f1d2:	e068      	b.n	800f2a6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	785b      	ldrb	r3, [r3, #1]
 800f1d8:	2b0b      	cmp	r3, #11
 800f1da:	d852      	bhi.n	800f282 <USBD_CDC_Setup+0x162>
 800f1dc:	a201      	add	r2, pc, #4	@ (adr r2, 800f1e4 <USBD_CDC_Setup+0xc4>)
 800f1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e2:	bf00      	nop
 800f1e4:	0800f215 	.word	0x0800f215
 800f1e8:	0800f291 	.word	0x0800f291
 800f1ec:	0800f283 	.word	0x0800f283
 800f1f0:	0800f283 	.word	0x0800f283
 800f1f4:	0800f283 	.word	0x0800f283
 800f1f8:	0800f283 	.word	0x0800f283
 800f1fc:	0800f283 	.word	0x0800f283
 800f200:	0800f283 	.word	0x0800f283
 800f204:	0800f283 	.word	0x0800f283
 800f208:	0800f283 	.word	0x0800f283
 800f20c:	0800f23f 	.word	0x0800f23f
 800f210:	0800f269 	.word	0x0800f269
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	2b03      	cmp	r3, #3
 800f21e:	d107      	bne.n	800f230 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f220:	f107 030a 	add.w	r3, r7, #10
 800f224:	2202      	movs	r2, #2
 800f226:	4619      	mov	r1, r3
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f001 fa82 	bl	8010732 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f22e:	e032      	b.n	800f296 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f230:	6839      	ldr	r1, [r7, #0]
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f001 fa0c 	bl	8010650 <USBD_CtlError>
            ret = USBD_FAIL;
 800f238:	2303      	movs	r3, #3
 800f23a:	75fb      	strb	r3, [r7, #23]
          break;
 800f23c:	e02b      	b.n	800f296 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f244:	b2db      	uxtb	r3, r3
 800f246:	2b03      	cmp	r3, #3
 800f248:	d107      	bne.n	800f25a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f24a:	f107 030d 	add.w	r3, r7, #13
 800f24e:	2201      	movs	r2, #1
 800f250:	4619      	mov	r1, r3
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f001 fa6d 	bl	8010732 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f258:	e01d      	b.n	800f296 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f25a:	6839      	ldr	r1, [r7, #0]
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f001 f9f7 	bl	8010650 <USBD_CtlError>
            ret = USBD_FAIL;
 800f262:	2303      	movs	r3, #3
 800f264:	75fb      	strb	r3, [r7, #23]
          break;
 800f266:	e016      	b.n	800f296 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f26e:	b2db      	uxtb	r3, r3
 800f270:	2b03      	cmp	r3, #3
 800f272:	d00f      	beq.n	800f294 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f274:	6839      	ldr	r1, [r7, #0]
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f001 f9ea 	bl	8010650 <USBD_CtlError>
            ret = USBD_FAIL;
 800f27c:	2303      	movs	r3, #3
 800f27e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f280:	e008      	b.n	800f294 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f282:	6839      	ldr	r1, [r7, #0]
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f001 f9e3 	bl	8010650 <USBD_CtlError>
          ret = USBD_FAIL;
 800f28a:	2303      	movs	r3, #3
 800f28c:	75fb      	strb	r3, [r7, #23]
          break;
 800f28e:	e002      	b.n	800f296 <USBD_CDC_Setup+0x176>
          break;
 800f290:	bf00      	nop
 800f292:	e008      	b.n	800f2a6 <USBD_CDC_Setup+0x186>
          break;
 800f294:	bf00      	nop
      }
      break;
 800f296:	e006      	b.n	800f2a6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f298:	6839      	ldr	r1, [r7, #0]
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f001 f9d8 	bl	8010650 <USBD_CtlError>
      ret = USBD_FAIL;
 800f2a0:	2303      	movs	r3, #3
 800f2a2:	75fb      	strb	r3, [r7, #23]
      break;
 800f2a4:	bf00      	nop
  }

  return (uint8_t)ret;
 800f2a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3718      	adds	r7, #24
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f2c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d101      	bne.n	800f2d2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f2ce:	2303      	movs	r3, #3
 800f2d0:	e04f      	b.n	800f372 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f2d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f2da:	78fa      	ldrb	r2, [r7, #3]
 800f2dc:	6879      	ldr	r1, [r7, #4]
 800f2de:	4613      	mov	r3, r2
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	4413      	add	r3, r2
 800f2e4:	009b      	lsls	r3, r3, #2
 800f2e6:	440b      	add	r3, r1
 800f2e8:	3318      	adds	r3, #24
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d029      	beq.n	800f344 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f2f0:	78fa      	ldrb	r2, [r7, #3]
 800f2f2:	6879      	ldr	r1, [r7, #4]
 800f2f4:	4613      	mov	r3, r2
 800f2f6:	009b      	lsls	r3, r3, #2
 800f2f8:	4413      	add	r3, r2
 800f2fa:	009b      	lsls	r3, r3, #2
 800f2fc:	440b      	add	r3, r1
 800f2fe:	3318      	adds	r3, #24
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	78f9      	ldrb	r1, [r7, #3]
 800f304:	68f8      	ldr	r0, [r7, #12]
 800f306:	460b      	mov	r3, r1
 800f308:	009b      	lsls	r3, r3, #2
 800f30a:	440b      	add	r3, r1
 800f30c:	00db      	lsls	r3, r3, #3
 800f30e:	4403      	add	r3, r0
 800f310:	3320      	adds	r3, #32
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	fbb2 f1f3 	udiv	r1, r2, r3
 800f318:	fb01 f303 	mul.w	r3, r1, r3
 800f31c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d110      	bne.n	800f344 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f322:	78fa      	ldrb	r2, [r7, #3]
 800f324:	6879      	ldr	r1, [r7, #4]
 800f326:	4613      	mov	r3, r2
 800f328:	009b      	lsls	r3, r3, #2
 800f32a:	4413      	add	r3, r2
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	440b      	add	r3, r1
 800f330:	3318      	adds	r3, #24
 800f332:	2200      	movs	r2, #0
 800f334:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f336:	78f9      	ldrb	r1, [r7, #3]
 800f338:	2300      	movs	r3, #0
 800f33a:	2200      	movs	r2, #0
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f001 feae 	bl	801109e <USBD_LL_Transmit>
 800f342:	e015      	b.n	800f370 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	2200      	movs	r2, #0
 800f348:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f352:	691b      	ldr	r3, [r3, #16]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d00b      	beq.n	800f370 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f35e:	691b      	ldr	r3, [r3, #16]
 800f360:	68ba      	ldr	r2, [r7, #8]
 800f362:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f366:	68ba      	ldr	r2, [r7, #8]
 800f368:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f36c:	78fa      	ldrb	r2, [r7, #3]
 800f36e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f370:	2300      	movs	r3, #0
}
 800f372:	4618      	mov	r0, r3
 800f374:	3710      	adds	r7, #16
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}

0800f37a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f37a:	b580      	push	{r7, lr}
 800f37c:	b084      	sub	sp, #16
 800f37e:	af00      	add	r7, sp, #0
 800f380:	6078      	str	r0, [r7, #4]
 800f382:	460b      	mov	r3, r1
 800f384:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f38c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f394:	2b00      	cmp	r3, #0
 800f396:	d101      	bne.n	800f39c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f398:	2303      	movs	r3, #3
 800f39a:	e015      	b.n	800f3c8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f39c:	78fb      	ldrb	r3, [r7, #3]
 800f39e:	4619      	mov	r1, r3
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f001 febe 	bl	8011122 <USBD_LL_GetRxDataSize>
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f3b4:	68db      	ldr	r3, [r3, #12]
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f3bc:	68fa      	ldr	r2, [r7, #12]
 800f3be:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f3c2:	4611      	mov	r1, r2
 800f3c4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f3c6:	2300      	movs	r3, #0
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3710      	adds	r7, #16
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f3de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d101      	bne.n	800f3ea <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f3e6:	2303      	movs	r3, #3
 800f3e8:	e01a      	b.n	800f420 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d014      	beq.n	800f41e <USBD_CDC_EP0_RxReady+0x4e>
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f3fa:	2bff      	cmp	r3, #255	@ 0xff
 800f3fc:	d00f      	beq.n	800f41e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f404:	689b      	ldr	r3, [r3, #8]
 800f406:	68fa      	ldr	r2, [r7, #12]
 800f408:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800f40c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f40e:	68fa      	ldr	r2, [r7, #12]
 800f410:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f414:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	22ff      	movs	r2, #255	@ 0xff
 800f41a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f41e:	2300      	movs	r3, #0
}
 800f420:	4618      	mov	r0, r3
 800f422:	3710      	adds	r7, #16
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f428:	b480      	push	{r7}
 800f42a:	b083      	sub	sp, #12
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2243      	movs	r2, #67	@ 0x43
 800f434:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f436:	4b03      	ldr	r3, [pc, #12]	@ (800f444 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f438:	4618      	mov	r0, r3
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr
 800f444:	200000b0 	.word	0x200000b0

0800f448 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f448:	b480      	push	{r7}
 800f44a:	b083      	sub	sp, #12
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2243      	movs	r2, #67	@ 0x43
 800f454:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f456:	4b03      	ldr	r3, [pc, #12]	@ (800f464 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f458:	4618      	mov	r0, r3
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr
 800f464:	2000006c 	.word	0x2000006c

0800f468 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f468:	b480      	push	{r7}
 800f46a:	b083      	sub	sp, #12
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2243      	movs	r2, #67	@ 0x43
 800f474:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f476:	4b03      	ldr	r3, [pc, #12]	@ (800f484 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f478:	4618      	mov	r0, r3
 800f47a:	370c      	adds	r7, #12
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr
 800f484:	200000f4 	.word	0x200000f4

0800f488 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f488:	b480      	push	{r7}
 800f48a:	b083      	sub	sp, #12
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	220a      	movs	r2, #10
 800f494:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f496:	4b03      	ldr	r3, [pc, #12]	@ (800f4a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f498:	4618      	mov	r0, r3
 800f49a:	370c      	adds	r7, #12
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr
 800f4a4:	20000028 	.word	0x20000028

0800f4a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b083      	sub	sp, #12
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d101      	bne.n	800f4bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f4b8:	2303      	movs	r3, #3
 800f4ba:	e004      	b.n	800f4c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	683a      	ldr	r2, [r7, #0]
 800f4c0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800f4c4:	2300      	movs	r3, #0
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	370c      	adds	r7, #12
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr

0800f4d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f4d2:	b480      	push	{r7}
 800f4d4:	b087      	sub	sp, #28
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	60f8      	str	r0, [r7, #12]
 800f4da:	60b9      	str	r1, [r7, #8]
 800f4dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f4e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d101      	bne.n	800f4f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f4ec:	2303      	movs	r3, #3
 800f4ee:	e008      	b.n	800f502 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	68ba      	ldr	r2, [r7, #8]
 800f4f4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f500:	2300      	movs	r3, #0
}
 800f502:	4618      	mov	r0, r3
 800f504:	371c      	adds	r7, #28
 800f506:	46bd      	mov	sp, r7
 800f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50c:	4770      	bx	lr

0800f50e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f50e:	b480      	push	{r7}
 800f510:	b085      	sub	sp, #20
 800f512:	af00      	add	r7, sp, #0
 800f514:	6078      	str	r0, [r7, #4]
 800f516:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f51e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d101      	bne.n	800f52a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f526:	2303      	movs	r3, #3
 800f528:	e004      	b.n	800f534 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	683a      	ldr	r2, [r7, #0]
 800f52e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f532:	2300      	movs	r3, #0
}
 800f534:	4618      	mov	r0, r3
 800f536:	3714      	adds	r7, #20
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr

0800f540 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b084      	sub	sp, #16
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f54e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f550:	2301      	movs	r3, #1
 800f552:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d101      	bne.n	800f562 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f55e:	2303      	movs	r3, #3
 800f560:	e01a      	b.n	800f598 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d114      	bne.n	800f596 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	2201      	movs	r2, #1
 800f570:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f58a:	2181      	movs	r1, #129	@ 0x81
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f001 fd86 	bl	801109e <USBD_LL_Transmit>

    ret = USBD_OK;
 800f592:	2300      	movs	r3, #0
 800f594:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f596:	7bfb      	ldrb	r3, [r7, #15]
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3710      	adds	r7, #16
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}

0800f5a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b084      	sub	sp, #16
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f5ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d101      	bne.n	800f5be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f5ba:	2303      	movs	r3, #3
 800f5bc:	e016      	b.n	800f5ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	7c1b      	ldrb	r3, [r3, #16]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d109      	bne.n	800f5da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f5cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f5d0:	2101      	movs	r1, #1
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f001 fd84 	bl	80110e0 <USBD_LL_PrepareReceive>
 800f5d8:	e007      	b.n	800f5ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f5e0:	2340      	movs	r3, #64	@ 0x40
 800f5e2:	2101      	movs	r1, #1
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f001 fd7b 	bl	80110e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f5ea:	2300      	movs	r3, #0
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3710      	adds	r7, #16
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b086      	sub	sp, #24
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	60f8      	str	r0, [r7, #12]
 800f5fc:	60b9      	str	r1, [r7, #8]
 800f5fe:	4613      	mov	r3, r2
 800f600:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d101      	bne.n	800f60c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f608:	2303      	movs	r3, #3
 800f60a:	e01f      	b.n	800f64c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	2200      	movs	r2, #0
 800f610:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	2200      	movs	r2, #0
 800f618:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	2200      	movs	r2, #0
 800f620:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d003      	beq.n	800f632 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	68ba      	ldr	r2, [r7, #8]
 800f62e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2201      	movs	r2, #1
 800f636:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	79fa      	ldrb	r2, [r7, #7]
 800f63e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f640:	68f8      	ldr	r0, [r7, #12]
 800f642:	f001 fbe3 	bl	8010e0c <USBD_LL_Init>
 800f646:	4603      	mov	r3, r0
 800f648:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f64a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3718      	adds	r7, #24
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f65e:	2300      	movs	r3, #0
 800f660:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d101      	bne.n	800f66c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f668:	2303      	movs	r3, #3
 800f66a:	e016      	b.n	800f69a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	683a      	ldr	r2, [r7, #0]
 800f670:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f67a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d00b      	beq.n	800f698 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f688:	f107 020e 	add.w	r2, r7, #14
 800f68c:	4610      	mov	r0, r2
 800f68e:	4798      	blx	r3
 800f690:	4602      	mov	r2, r0
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f698:	2300      	movs	r3, #0
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3710      	adds	r7, #16
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}

0800f6a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f6a2:	b580      	push	{r7, lr}
 800f6a4:	b082      	sub	sp, #8
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f001 fc0e 	bl	8010ecc <USBD_LL_Start>
 800f6b0:	4603      	mov	r3, r0
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3708      	adds	r7, #8
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}

0800f6ba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f6ba:	b480      	push	{r7}
 800f6bc:	b083      	sub	sp, #12
 800f6be:	af00      	add	r7, sp, #0
 800f6c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f6c2:	2300      	movs	r3, #0
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	370c      	adds	r7, #12
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr

0800f6d0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	460b      	mov	r3, r1
 800f6da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f6dc:	2303      	movs	r3, #3
 800f6de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d009      	beq.n	800f6fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	78fa      	ldrb	r2, [r7, #3]
 800f6f4:	4611      	mov	r1, r2
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	4798      	blx	r3
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f700:	4618      	mov	r0, r3
 800f702:	3710      	adds	r7, #16
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	460b      	mov	r3, r1
 800f712:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d007      	beq.n	800f72e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f724:	685b      	ldr	r3, [r3, #4]
 800f726:	78fa      	ldrb	r2, [r7, #3]
 800f728:	4611      	mov	r1, r2
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	4798      	blx	r3
  }

  return USBD_OK;
 800f72e:	2300      	movs	r3, #0
}
 800f730:	4618      	mov	r0, r3
 800f732:	3708      	adds	r7, #8
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f748:	6839      	ldr	r1, [r7, #0]
 800f74a:	4618      	mov	r0, r3
 800f74c:	f000 ff46 	bl	80105dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2201      	movs	r2, #1
 800f754:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f75e:	461a      	mov	r2, r3
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f76c:	f003 031f 	and.w	r3, r3, #31
 800f770:	2b02      	cmp	r3, #2
 800f772:	d01a      	beq.n	800f7aa <USBD_LL_SetupStage+0x72>
 800f774:	2b02      	cmp	r3, #2
 800f776:	d822      	bhi.n	800f7be <USBD_LL_SetupStage+0x86>
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d002      	beq.n	800f782 <USBD_LL_SetupStage+0x4a>
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	d00a      	beq.n	800f796 <USBD_LL_SetupStage+0x5e>
 800f780:	e01d      	b.n	800f7be <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f788:	4619      	mov	r1, r3
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f000 f9ee 	bl	800fb6c <USBD_StdDevReq>
 800f790:	4603      	mov	r3, r0
 800f792:	73fb      	strb	r3, [r7, #15]
      break;
 800f794:	e020      	b.n	800f7d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f79c:	4619      	mov	r1, r3
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f000 fa52 	bl	800fc48 <USBD_StdItfReq>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	73fb      	strb	r3, [r7, #15]
      break;
 800f7a8:	e016      	b.n	800f7d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f000 fa91 	bl	800fcda <USBD_StdEPReq>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	73fb      	strb	r3, [r7, #15]
      break;
 800f7bc:	e00c      	b.n	800f7d8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f7c4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	4619      	mov	r1, r3
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f001 fbdd 	bl	8010f8c <USBD_LL_StallEP>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	73fb      	strb	r3, [r7, #15]
      break;
 800f7d6:	bf00      	nop
  }

  return ret;
 800f7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3710      	adds	r7, #16
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}

0800f7e2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f7e2:	b580      	push	{r7, lr}
 800f7e4:	b086      	sub	sp, #24
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	60f8      	str	r0, [r7, #12]
 800f7ea:	460b      	mov	r3, r1
 800f7ec:	607a      	str	r2, [r7, #4]
 800f7ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f7f0:	7afb      	ldrb	r3, [r7, #11]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d138      	bne.n	800f868 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f7fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f804:	2b03      	cmp	r3, #3
 800f806:	d14a      	bne.n	800f89e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	689a      	ldr	r2, [r3, #8]
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	68db      	ldr	r3, [r3, #12]
 800f810:	429a      	cmp	r2, r3
 800f812:	d913      	bls.n	800f83c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	689a      	ldr	r2, [r3, #8]
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	68db      	ldr	r3, [r3, #12]
 800f81c:	1ad2      	subs	r2, r2, r3
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	68da      	ldr	r2, [r3, #12]
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	689b      	ldr	r3, [r3, #8]
 800f82a:	4293      	cmp	r3, r2
 800f82c:	bf28      	it	cs
 800f82e:	4613      	movcs	r3, r2
 800f830:	461a      	mov	r2, r3
 800f832:	6879      	ldr	r1, [r7, #4]
 800f834:	68f8      	ldr	r0, [r7, #12]
 800f836:	f000 ffc5 	bl	80107c4 <USBD_CtlContinueRx>
 800f83a:	e030      	b.n	800f89e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f842:	b2db      	uxtb	r3, r3
 800f844:	2b03      	cmp	r3, #3
 800f846:	d10b      	bne.n	800f860 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f84e:	691b      	ldr	r3, [r3, #16]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d005      	beq.n	800f860 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f85a:	691b      	ldr	r3, [r3, #16]
 800f85c:	68f8      	ldr	r0, [r7, #12]
 800f85e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f860:	68f8      	ldr	r0, [r7, #12]
 800f862:	f000 ffc0 	bl	80107e6 <USBD_CtlSendStatus>
 800f866:	e01a      	b.n	800f89e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	2b03      	cmp	r3, #3
 800f872:	d114      	bne.n	800f89e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f87a:	699b      	ldr	r3, [r3, #24]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d00e      	beq.n	800f89e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f886:	699b      	ldr	r3, [r3, #24]
 800f888:	7afa      	ldrb	r2, [r7, #11]
 800f88a:	4611      	mov	r1, r2
 800f88c:	68f8      	ldr	r0, [r7, #12]
 800f88e:	4798      	blx	r3
 800f890:	4603      	mov	r3, r0
 800f892:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f894:	7dfb      	ldrb	r3, [r7, #23]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d001      	beq.n	800f89e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f89a:	7dfb      	ldrb	r3, [r7, #23]
 800f89c:	e000      	b.n	800f8a0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f89e:	2300      	movs	r3, #0
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3718      	adds	r7, #24
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}

0800f8a8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b086      	sub	sp, #24
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	60f8      	str	r0, [r7, #12]
 800f8b0:	460b      	mov	r3, r1
 800f8b2:	607a      	str	r2, [r7, #4]
 800f8b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f8b6:	7afb      	ldrb	r3, [r7, #11]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d16b      	bne.n	800f994 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	3314      	adds	r3, #20
 800f8c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f8c8:	2b02      	cmp	r3, #2
 800f8ca:	d156      	bne.n	800f97a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	689a      	ldr	r2, [r3, #8]
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	68db      	ldr	r3, [r3, #12]
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d914      	bls.n	800f902 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	689a      	ldr	r2, [r3, #8]
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	1ad2      	subs	r2, r2, r3
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	689b      	ldr	r3, [r3, #8]
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	6879      	ldr	r1, [r7, #4]
 800f8ee:	68f8      	ldr	r0, [r7, #12]
 800f8f0:	f000 ff3a 	bl	8010768 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	2100      	movs	r1, #0
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	f001 fbf0 	bl	80110e0 <USBD_LL_PrepareReceive>
 800f900:	e03b      	b.n	800f97a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	68da      	ldr	r2, [r3, #12]
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	689b      	ldr	r3, [r3, #8]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d11c      	bne.n	800f948 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	685a      	ldr	r2, [r3, #4]
 800f912:	693b      	ldr	r3, [r7, #16]
 800f914:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f916:	429a      	cmp	r2, r3
 800f918:	d316      	bcc.n	800f948 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	685a      	ldr	r2, [r3, #4]
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f924:	429a      	cmp	r2, r3
 800f926:	d20f      	bcs.n	800f948 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f928:	2200      	movs	r2, #0
 800f92a:	2100      	movs	r1, #0
 800f92c:	68f8      	ldr	r0, [r7, #12]
 800f92e:	f000 ff1b 	bl	8010768 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	2200      	movs	r2, #0
 800f936:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f93a:	2300      	movs	r3, #0
 800f93c:	2200      	movs	r2, #0
 800f93e:	2100      	movs	r1, #0
 800f940:	68f8      	ldr	r0, [r7, #12]
 800f942:	f001 fbcd 	bl	80110e0 <USBD_LL_PrepareReceive>
 800f946:	e018      	b.n	800f97a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	2b03      	cmp	r3, #3
 800f952:	d10b      	bne.n	800f96c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f95a:	68db      	ldr	r3, [r3, #12]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d005      	beq.n	800f96c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f966:	68db      	ldr	r3, [r3, #12]
 800f968:	68f8      	ldr	r0, [r7, #12]
 800f96a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f96c:	2180      	movs	r1, #128	@ 0x80
 800f96e:	68f8      	ldr	r0, [r7, #12]
 800f970:	f001 fb0c 	bl	8010f8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f974:	68f8      	ldr	r0, [r7, #12]
 800f976:	f000 ff49 	bl	801080c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f980:	2b01      	cmp	r3, #1
 800f982:	d122      	bne.n	800f9ca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f984:	68f8      	ldr	r0, [r7, #12]
 800f986:	f7ff fe98 	bl	800f6ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	2200      	movs	r2, #0
 800f98e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f992:	e01a      	b.n	800f9ca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	2b03      	cmp	r3, #3
 800f99e:	d114      	bne.n	800f9ca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f9a6:	695b      	ldr	r3, [r3, #20]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d00e      	beq.n	800f9ca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f9b2:	695b      	ldr	r3, [r3, #20]
 800f9b4:	7afa      	ldrb	r2, [r7, #11]
 800f9b6:	4611      	mov	r1, r2
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	4798      	blx	r3
 800f9bc:	4603      	mov	r3, r0
 800f9be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f9c0:	7dfb      	ldrb	r3, [r7, #23]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d001      	beq.n	800f9ca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f9c6:	7dfb      	ldrb	r3, [r7, #23]
 800f9c8:	e000      	b.n	800f9cc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f9ca:	2300      	movs	r3, #0
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3718      	adds	r7, #24
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b082      	sub	sp, #8
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2201      	movs	r2, #1
 800f9e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d101      	bne.n	800fa08 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800fa04:	2303      	movs	r3, #3
 800fa06:	e02f      	b.n	800fa68 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d00f      	beq.n	800fa32 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa18:	685b      	ldr	r3, [r3, #4]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d009      	beq.n	800fa32 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	6852      	ldr	r2, [r2, #4]
 800fa2a:	b2d2      	uxtb	r2, r2
 800fa2c:	4611      	mov	r1, r2
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa32:	2340      	movs	r3, #64	@ 0x40
 800fa34:	2200      	movs	r2, #0
 800fa36:	2100      	movs	r1, #0
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f001 fa62 	bl	8010f02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2201      	movs	r2, #1
 800fa42:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2240      	movs	r2, #64	@ 0x40
 800fa4a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa4e:	2340      	movs	r3, #64	@ 0x40
 800fa50:	2200      	movs	r2, #0
 800fa52:	2180      	movs	r1, #128	@ 0x80
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f001 fa54 	bl	8010f02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2240      	movs	r2, #64	@ 0x40
 800fa64:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800fa66:	2300      	movs	r3, #0
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3708      	adds	r7, #8
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b083      	sub	sp, #12
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	460b      	mov	r3, r1
 800fa7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	78fa      	ldrb	r2, [r7, #3]
 800fa80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fa82:	2300      	movs	r3, #0
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	370c      	adds	r7, #12
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8e:	4770      	bx	lr

0800fa90 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fa90:	b480      	push	{r7}
 800fa92:	b083      	sub	sp, #12
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa9e:	b2da      	uxtb	r2, r3
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2204      	movs	r2, #4
 800faaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800faae:	2300      	movs	r3, #0
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	370c      	adds	r7, #12
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr

0800fabc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800faca:	b2db      	uxtb	r3, r3
 800facc:	2b04      	cmp	r3, #4
 800face:	d106      	bne.n	800fade <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800fad6:	b2da      	uxtb	r2, r3
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	370c      	adds	r7, #12
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr

0800faec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d101      	bne.n	800fb02 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800fafe:	2303      	movs	r3, #3
 800fb00:	e012      	b.n	800fb28 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb08:	b2db      	uxtb	r3, r3
 800fb0a:	2b03      	cmp	r3, #3
 800fb0c:	d10b      	bne.n	800fb26 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb14:	69db      	ldr	r3, [r3, #28]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d005      	beq.n	800fb26 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb20:	69db      	ldr	r3, [r3, #28]
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fb26:	2300      	movs	r3, #0
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3708      	adds	r7, #8
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fb30:	b480      	push	{r7}
 800fb32:	b087      	sub	sp, #28
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	3301      	adds	r3, #1
 800fb46:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fb4e:	8a3b      	ldrh	r3, [r7, #16]
 800fb50:	021b      	lsls	r3, r3, #8
 800fb52:	b21a      	sxth	r2, r3
 800fb54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	b21b      	sxth	r3, r3
 800fb5c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fb5e:	89fb      	ldrh	r3, [r7, #14]
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	371c      	adds	r7, #28
 800fb64:	46bd      	mov	sp, r7
 800fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6a:	4770      	bx	lr

0800fb6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb76:	2300      	movs	r3, #0
 800fb78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fb82:	2b40      	cmp	r3, #64	@ 0x40
 800fb84:	d005      	beq.n	800fb92 <USBD_StdDevReq+0x26>
 800fb86:	2b40      	cmp	r3, #64	@ 0x40
 800fb88:	d853      	bhi.n	800fc32 <USBD_StdDevReq+0xc6>
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d00b      	beq.n	800fba6 <USBD_StdDevReq+0x3a>
 800fb8e:	2b20      	cmp	r3, #32
 800fb90:	d14f      	bne.n	800fc32 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb98:	689b      	ldr	r3, [r3, #8]
 800fb9a:	6839      	ldr	r1, [r7, #0]
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	4798      	blx	r3
 800fba0:	4603      	mov	r3, r0
 800fba2:	73fb      	strb	r3, [r7, #15]
      break;
 800fba4:	e04a      	b.n	800fc3c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	785b      	ldrb	r3, [r3, #1]
 800fbaa:	2b09      	cmp	r3, #9
 800fbac:	d83b      	bhi.n	800fc26 <USBD_StdDevReq+0xba>
 800fbae:	a201      	add	r2, pc, #4	@ (adr r2, 800fbb4 <USBD_StdDevReq+0x48>)
 800fbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbb4:	0800fc09 	.word	0x0800fc09
 800fbb8:	0800fc1d 	.word	0x0800fc1d
 800fbbc:	0800fc27 	.word	0x0800fc27
 800fbc0:	0800fc13 	.word	0x0800fc13
 800fbc4:	0800fc27 	.word	0x0800fc27
 800fbc8:	0800fbe7 	.word	0x0800fbe7
 800fbcc:	0800fbdd 	.word	0x0800fbdd
 800fbd0:	0800fc27 	.word	0x0800fc27
 800fbd4:	0800fbff 	.word	0x0800fbff
 800fbd8:	0800fbf1 	.word	0x0800fbf1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fbdc:	6839      	ldr	r1, [r7, #0]
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f000 f9de 	bl	800ffa0 <USBD_GetDescriptor>
          break;
 800fbe4:	e024      	b.n	800fc30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fbe6:	6839      	ldr	r1, [r7, #0]
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f000 fb6d 	bl	80102c8 <USBD_SetAddress>
          break;
 800fbee:	e01f      	b.n	800fc30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fbf0:	6839      	ldr	r1, [r7, #0]
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 fbac 	bl	8010350 <USBD_SetConfig>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	73fb      	strb	r3, [r7, #15]
          break;
 800fbfc:	e018      	b.n	800fc30 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fbfe:	6839      	ldr	r1, [r7, #0]
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f000 fc4b 	bl	801049c <USBD_GetConfig>
          break;
 800fc06:	e013      	b.n	800fc30 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fc08:	6839      	ldr	r1, [r7, #0]
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f000 fc7c 	bl	8010508 <USBD_GetStatus>
          break;
 800fc10:	e00e      	b.n	800fc30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fc12:	6839      	ldr	r1, [r7, #0]
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f000 fcab 	bl	8010570 <USBD_SetFeature>
          break;
 800fc1a:	e009      	b.n	800fc30 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fc1c:	6839      	ldr	r1, [r7, #0]
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f000 fcba 	bl	8010598 <USBD_ClrFeature>
          break;
 800fc24:	e004      	b.n	800fc30 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800fc26:	6839      	ldr	r1, [r7, #0]
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f000 fd11 	bl	8010650 <USBD_CtlError>
          break;
 800fc2e:	bf00      	nop
      }
      break;
 800fc30:	e004      	b.n	800fc3c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800fc32:	6839      	ldr	r1, [r7, #0]
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f000 fd0b 	bl	8010650 <USBD_CtlError>
      break;
 800fc3a:	bf00      	nop
  }

  return ret;
 800fc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3710      	adds	r7, #16
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
 800fc46:	bf00      	nop

0800fc48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b084      	sub	sp, #16
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc52:	2300      	movs	r3, #0
 800fc54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	781b      	ldrb	r3, [r3, #0]
 800fc5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fc5e:	2b40      	cmp	r3, #64	@ 0x40
 800fc60:	d005      	beq.n	800fc6e <USBD_StdItfReq+0x26>
 800fc62:	2b40      	cmp	r3, #64	@ 0x40
 800fc64:	d82f      	bhi.n	800fcc6 <USBD_StdItfReq+0x7e>
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d001      	beq.n	800fc6e <USBD_StdItfReq+0x26>
 800fc6a:	2b20      	cmp	r3, #32
 800fc6c:	d12b      	bne.n	800fcc6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc74:	b2db      	uxtb	r3, r3
 800fc76:	3b01      	subs	r3, #1
 800fc78:	2b02      	cmp	r3, #2
 800fc7a:	d81d      	bhi.n	800fcb8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	889b      	ldrh	r3, [r3, #4]
 800fc80:	b2db      	uxtb	r3, r3
 800fc82:	2b01      	cmp	r3, #1
 800fc84:	d813      	bhi.n	800fcae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc8c:	689b      	ldr	r3, [r3, #8]
 800fc8e:	6839      	ldr	r1, [r7, #0]
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	4798      	blx	r3
 800fc94:	4603      	mov	r3, r0
 800fc96:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	88db      	ldrh	r3, [r3, #6]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d110      	bne.n	800fcc2 <USBD_StdItfReq+0x7a>
 800fca0:	7bfb      	ldrb	r3, [r7, #15]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d10d      	bne.n	800fcc2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f000 fd9d 	bl	80107e6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fcac:	e009      	b.n	800fcc2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800fcae:	6839      	ldr	r1, [r7, #0]
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f000 fccd 	bl	8010650 <USBD_CtlError>
          break;
 800fcb6:	e004      	b.n	800fcc2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800fcb8:	6839      	ldr	r1, [r7, #0]
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 fcc8 	bl	8010650 <USBD_CtlError>
          break;
 800fcc0:	e000      	b.n	800fcc4 <USBD_StdItfReq+0x7c>
          break;
 800fcc2:	bf00      	nop
      }
      break;
 800fcc4:	e004      	b.n	800fcd0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800fcc6:	6839      	ldr	r1, [r7, #0]
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	f000 fcc1 	bl	8010650 <USBD_CtlError>
      break;
 800fcce:	bf00      	nop
  }

  return ret;
 800fcd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3710      	adds	r7, #16
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b084      	sub	sp, #16
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	6078      	str	r0, [r7, #4]
 800fce2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fce4:	2300      	movs	r3, #0
 800fce6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	889b      	ldrh	r3, [r3, #4]
 800fcec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fcf6:	2b40      	cmp	r3, #64	@ 0x40
 800fcf8:	d007      	beq.n	800fd0a <USBD_StdEPReq+0x30>
 800fcfa:	2b40      	cmp	r3, #64	@ 0x40
 800fcfc:	f200 8145 	bhi.w	800ff8a <USBD_StdEPReq+0x2b0>
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d00c      	beq.n	800fd1e <USBD_StdEPReq+0x44>
 800fd04:	2b20      	cmp	r3, #32
 800fd06:	f040 8140 	bne.w	800ff8a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd10:	689b      	ldr	r3, [r3, #8]
 800fd12:	6839      	ldr	r1, [r7, #0]
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	4798      	blx	r3
 800fd18:	4603      	mov	r3, r0
 800fd1a:	73fb      	strb	r3, [r7, #15]
      break;
 800fd1c:	e13a      	b.n	800ff94 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	785b      	ldrb	r3, [r3, #1]
 800fd22:	2b03      	cmp	r3, #3
 800fd24:	d007      	beq.n	800fd36 <USBD_StdEPReq+0x5c>
 800fd26:	2b03      	cmp	r3, #3
 800fd28:	f300 8129 	bgt.w	800ff7e <USBD_StdEPReq+0x2a4>
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d07f      	beq.n	800fe30 <USBD_StdEPReq+0x156>
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	d03c      	beq.n	800fdae <USBD_StdEPReq+0xd4>
 800fd34:	e123      	b.n	800ff7e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd3c:	b2db      	uxtb	r3, r3
 800fd3e:	2b02      	cmp	r3, #2
 800fd40:	d002      	beq.n	800fd48 <USBD_StdEPReq+0x6e>
 800fd42:	2b03      	cmp	r3, #3
 800fd44:	d016      	beq.n	800fd74 <USBD_StdEPReq+0x9a>
 800fd46:	e02c      	b.n	800fda2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fd48:	7bbb      	ldrb	r3, [r7, #14]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d00d      	beq.n	800fd6a <USBD_StdEPReq+0x90>
 800fd4e:	7bbb      	ldrb	r3, [r7, #14]
 800fd50:	2b80      	cmp	r3, #128	@ 0x80
 800fd52:	d00a      	beq.n	800fd6a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fd54:	7bbb      	ldrb	r3, [r7, #14]
 800fd56:	4619      	mov	r1, r3
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f001 f917 	bl	8010f8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fd5e:	2180      	movs	r1, #128	@ 0x80
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f001 f913 	bl	8010f8c <USBD_LL_StallEP>
 800fd66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fd68:	e020      	b.n	800fdac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800fd6a:	6839      	ldr	r1, [r7, #0]
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f000 fc6f 	bl	8010650 <USBD_CtlError>
              break;
 800fd72:	e01b      	b.n	800fdac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	885b      	ldrh	r3, [r3, #2]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d10e      	bne.n	800fd9a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fd7c:	7bbb      	ldrb	r3, [r7, #14]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d00b      	beq.n	800fd9a <USBD_StdEPReq+0xc0>
 800fd82:	7bbb      	ldrb	r3, [r7, #14]
 800fd84:	2b80      	cmp	r3, #128	@ 0x80
 800fd86:	d008      	beq.n	800fd9a <USBD_StdEPReq+0xc0>
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	88db      	ldrh	r3, [r3, #6]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d104      	bne.n	800fd9a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fd90:	7bbb      	ldrb	r3, [r7, #14]
 800fd92:	4619      	mov	r1, r3
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f001 f8f9 	bl	8010f8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f000 fd23 	bl	80107e6 <USBD_CtlSendStatus>

              break;
 800fda0:	e004      	b.n	800fdac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800fda2:	6839      	ldr	r1, [r7, #0]
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f000 fc53 	bl	8010650 <USBD_CtlError>
              break;
 800fdaa:	bf00      	nop
          }
          break;
 800fdac:	e0ec      	b.n	800ff88 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fdb4:	b2db      	uxtb	r3, r3
 800fdb6:	2b02      	cmp	r3, #2
 800fdb8:	d002      	beq.n	800fdc0 <USBD_StdEPReq+0xe6>
 800fdba:	2b03      	cmp	r3, #3
 800fdbc:	d016      	beq.n	800fdec <USBD_StdEPReq+0x112>
 800fdbe:	e030      	b.n	800fe22 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fdc0:	7bbb      	ldrb	r3, [r7, #14]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d00d      	beq.n	800fde2 <USBD_StdEPReq+0x108>
 800fdc6:	7bbb      	ldrb	r3, [r7, #14]
 800fdc8:	2b80      	cmp	r3, #128	@ 0x80
 800fdca:	d00a      	beq.n	800fde2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fdcc:	7bbb      	ldrb	r3, [r7, #14]
 800fdce:	4619      	mov	r1, r3
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f001 f8db 	bl	8010f8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fdd6:	2180      	movs	r1, #128	@ 0x80
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f001 f8d7 	bl	8010f8c <USBD_LL_StallEP>
 800fdde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fde0:	e025      	b.n	800fe2e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800fde2:	6839      	ldr	r1, [r7, #0]
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 fc33 	bl	8010650 <USBD_CtlError>
              break;
 800fdea:	e020      	b.n	800fe2e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	885b      	ldrh	r3, [r3, #2]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d11b      	bne.n	800fe2c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fdf4:	7bbb      	ldrb	r3, [r7, #14]
 800fdf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d004      	beq.n	800fe08 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fdfe:	7bbb      	ldrb	r3, [r7, #14]
 800fe00:	4619      	mov	r1, r3
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f001 f8e1 	bl	8010fca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f000 fcec 	bl	80107e6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	6839      	ldr	r1, [r7, #0]
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	4798      	blx	r3
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800fe20:	e004      	b.n	800fe2c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800fe22:	6839      	ldr	r1, [r7, #0]
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f000 fc13 	bl	8010650 <USBD_CtlError>
              break;
 800fe2a:	e000      	b.n	800fe2e <USBD_StdEPReq+0x154>
              break;
 800fe2c:	bf00      	nop
          }
          break;
 800fe2e:	e0ab      	b.n	800ff88 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	2b02      	cmp	r3, #2
 800fe3a:	d002      	beq.n	800fe42 <USBD_StdEPReq+0x168>
 800fe3c:	2b03      	cmp	r3, #3
 800fe3e:	d032      	beq.n	800fea6 <USBD_StdEPReq+0x1cc>
 800fe40:	e097      	b.n	800ff72 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fe42:	7bbb      	ldrb	r3, [r7, #14]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d007      	beq.n	800fe58 <USBD_StdEPReq+0x17e>
 800fe48:	7bbb      	ldrb	r3, [r7, #14]
 800fe4a:	2b80      	cmp	r3, #128	@ 0x80
 800fe4c:	d004      	beq.n	800fe58 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800fe4e:	6839      	ldr	r1, [r7, #0]
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f000 fbfd 	bl	8010650 <USBD_CtlError>
                break;
 800fe56:	e091      	b.n	800ff7c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	da0b      	bge.n	800fe78 <USBD_StdEPReq+0x19e>
 800fe60:	7bbb      	ldrb	r3, [r7, #14]
 800fe62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fe66:	4613      	mov	r3, r2
 800fe68:	009b      	lsls	r3, r3, #2
 800fe6a:	4413      	add	r3, r2
 800fe6c:	009b      	lsls	r3, r3, #2
 800fe6e:	3310      	adds	r3, #16
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	4413      	add	r3, r2
 800fe74:	3304      	adds	r3, #4
 800fe76:	e00b      	b.n	800fe90 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fe78:	7bbb      	ldrb	r3, [r7, #14]
 800fe7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe7e:	4613      	mov	r3, r2
 800fe80:	009b      	lsls	r3, r3, #2
 800fe82:	4413      	add	r3, r2
 800fe84:	009b      	lsls	r3, r3, #2
 800fe86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fe8a:	687a      	ldr	r2, [r7, #4]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	3304      	adds	r3, #4
 800fe90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	2200      	movs	r2, #0
 800fe96:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	2202      	movs	r2, #2
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f000 fc47 	bl	8010732 <USBD_CtlSendData>
              break;
 800fea4:	e06a      	b.n	800ff7c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	da11      	bge.n	800fed2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800feae:	7bbb      	ldrb	r3, [r7, #14]
 800feb0:	f003 020f 	and.w	r2, r3, #15
 800feb4:	6879      	ldr	r1, [r7, #4]
 800feb6:	4613      	mov	r3, r2
 800feb8:	009b      	lsls	r3, r3, #2
 800feba:	4413      	add	r3, r2
 800febc:	009b      	lsls	r3, r3, #2
 800febe:	440b      	add	r3, r1
 800fec0:	3324      	adds	r3, #36	@ 0x24
 800fec2:	881b      	ldrh	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d117      	bne.n	800fef8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fec8:	6839      	ldr	r1, [r7, #0]
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f000 fbc0 	bl	8010650 <USBD_CtlError>
                  break;
 800fed0:	e054      	b.n	800ff7c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fed2:	7bbb      	ldrb	r3, [r7, #14]
 800fed4:	f003 020f 	and.w	r2, r3, #15
 800fed8:	6879      	ldr	r1, [r7, #4]
 800feda:	4613      	mov	r3, r2
 800fedc:	009b      	lsls	r3, r3, #2
 800fede:	4413      	add	r3, r2
 800fee0:	009b      	lsls	r3, r3, #2
 800fee2:	440b      	add	r3, r1
 800fee4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fee8:	881b      	ldrh	r3, [r3, #0]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d104      	bne.n	800fef8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800feee:	6839      	ldr	r1, [r7, #0]
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f000 fbad 	bl	8010650 <USBD_CtlError>
                  break;
 800fef6:	e041      	b.n	800ff7c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	da0b      	bge.n	800ff18 <USBD_StdEPReq+0x23e>
 800ff00:	7bbb      	ldrb	r3, [r7, #14]
 800ff02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ff06:	4613      	mov	r3, r2
 800ff08:	009b      	lsls	r3, r3, #2
 800ff0a:	4413      	add	r3, r2
 800ff0c:	009b      	lsls	r3, r3, #2
 800ff0e:	3310      	adds	r3, #16
 800ff10:	687a      	ldr	r2, [r7, #4]
 800ff12:	4413      	add	r3, r2
 800ff14:	3304      	adds	r3, #4
 800ff16:	e00b      	b.n	800ff30 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ff18:	7bbb      	ldrb	r3, [r7, #14]
 800ff1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff1e:	4613      	mov	r3, r2
 800ff20:	009b      	lsls	r3, r3, #2
 800ff22:	4413      	add	r3, r2
 800ff24:	009b      	lsls	r3, r3, #2
 800ff26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	4413      	add	r3, r2
 800ff2e:	3304      	adds	r3, #4
 800ff30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ff32:	7bbb      	ldrb	r3, [r7, #14]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d002      	beq.n	800ff3e <USBD_StdEPReq+0x264>
 800ff38:	7bbb      	ldrb	r3, [r7, #14]
 800ff3a:	2b80      	cmp	r3, #128	@ 0x80
 800ff3c:	d103      	bne.n	800ff46 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	2200      	movs	r2, #0
 800ff42:	601a      	str	r2, [r3, #0]
 800ff44:	e00e      	b.n	800ff64 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ff46:	7bbb      	ldrb	r3, [r7, #14]
 800ff48:	4619      	mov	r1, r3
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f001 f85c 	bl	8011008 <USBD_LL_IsStallEP>
 800ff50:	4603      	mov	r3, r0
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d003      	beq.n	800ff5e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	2201      	movs	r2, #1
 800ff5a:	601a      	str	r2, [r3, #0]
 800ff5c:	e002      	b.n	800ff64 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	2200      	movs	r2, #0
 800ff62:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	2202      	movs	r2, #2
 800ff68:	4619      	mov	r1, r3
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 fbe1 	bl	8010732 <USBD_CtlSendData>
              break;
 800ff70:	e004      	b.n	800ff7c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ff72:	6839      	ldr	r1, [r7, #0]
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f000 fb6b 	bl	8010650 <USBD_CtlError>
              break;
 800ff7a:	bf00      	nop
          }
          break;
 800ff7c:	e004      	b.n	800ff88 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ff7e:	6839      	ldr	r1, [r7, #0]
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f000 fb65 	bl	8010650 <USBD_CtlError>
          break;
 800ff86:	bf00      	nop
      }
      break;
 800ff88:	e004      	b.n	800ff94 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ff8a:	6839      	ldr	r1, [r7, #0]
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f000 fb5f 	bl	8010650 <USBD_CtlError>
      break;
 800ff92:	bf00      	nop
  }

  return ret;
 800ff94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3710      	adds	r7, #16
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
	...

0800ffa0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	885b      	ldrh	r3, [r3, #2]
 800ffba:	0a1b      	lsrs	r3, r3, #8
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	3b01      	subs	r3, #1
 800ffc0:	2b0e      	cmp	r3, #14
 800ffc2:	f200 8152 	bhi.w	801026a <USBD_GetDescriptor+0x2ca>
 800ffc6:	a201      	add	r2, pc, #4	@ (adr r2, 800ffcc <USBD_GetDescriptor+0x2c>)
 800ffc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffcc:	0801003d 	.word	0x0801003d
 800ffd0:	08010055 	.word	0x08010055
 800ffd4:	08010095 	.word	0x08010095
 800ffd8:	0801026b 	.word	0x0801026b
 800ffdc:	0801026b 	.word	0x0801026b
 800ffe0:	0801020b 	.word	0x0801020b
 800ffe4:	08010237 	.word	0x08010237
 800ffe8:	0801026b 	.word	0x0801026b
 800ffec:	0801026b 	.word	0x0801026b
 800fff0:	0801026b 	.word	0x0801026b
 800fff4:	0801026b 	.word	0x0801026b
 800fff8:	0801026b 	.word	0x0801026b
 800fffc:	0801026b 	.word	0x0801026b
 8010000:	0801026b 	.word	0x0801026b
 8010004:	08010009 	.word	0x08010009
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801000e:	69db      	ldr	r3, [r3, #28]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d00b      	beq.n	801002c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801001a:	69db      	ldr	r3, [r3, #28]
 801001c:	687a      	ldr	r2, [r7, #4]
 801001e:	7c12      	ldrb	r2, [r2, #16]
 8010020:	f107 0108 	add.w	r1, r7, #8
 8010024:	4610      	mov	r0, r2
 8010026:	4798      	blx	r3
 8010028:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801002a:	e126      	b.n	801027a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801002c:	6839      	ldr	r1, [r7, #0]
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f000 fb0e 	bl	8010650 <USBD_CtlError>
        err++;
 8010034:	7afb      	ldrb	r3, [r7, #11]
 8010036:	3301      	adds	r3, #1
 8010038:	72fb      	strb	r3, [r7, #11]
      break;
 801003a:	e11e      	b.n	801027a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	7c12      	ldrb	r2, [r2, #16]
 8010048:	f107 0108 	add.w	r1, r7, #8
 801004c:	4610      	mov	r0, r2
 801004e:	4798      	blx	r3
 8010050:	60f8      	str	r0, [r7, #12]
      break;
 8010052:	e112      	b.n	801027a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	7c1b      	ldrb	r3, [r3, #16]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d10d      	bne.n	8010078 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010064:	f107 0208 	add.w	r2, r7, #8
 8010068:	4610      	mov	r0, r2
 801006a:	4798      	blx	r3
 801006c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	3301      	adds	r3, #1
 8010072:	2202      	movs	r2, #2
 8010074:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010076:	e100      	b.n	801027a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801007e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010080:	f107 0208 	add.w	r2, r7, #8
 8010084:	4610      	mov	r0, r2
 8010086:	4798      	blx	r3
 8010088:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	3301      	adds	r3, #1
 801008e:	2202      	movs	r2, #2
 8010090:	701a      	strb	r2, [r3, #0]
      break;
 8010092:	e0f2      	b.n	801027a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	885b      	ldrh	r3, [r3, #2]
 8010098:	b2db      	uxtb	r3, r3
 801009a:	2b05      	cmp	r3, #5
 801009c:	f200 80ac 	bhi.w	80101f8 <USBD_GetDescriptor+0x258>
 80100a0:	a201      	add	r2, pc, #4	@ (adr r2, 80100a8 <USBD_GetDescriptor+0x108>)
 80100a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100a6:	bf00      	nop
 80100a8:	080100c1 	.word	0x080100c1
 80100ac:	080100f5 	.word	0x080100f5
 80100b0:	08010129 	.word	0x08010129
 80100b4:	0801015d 	.word	0x0801015d
 80100b8:	08010191 	.word	0x08010191
 80100bc:	080101c5 	.word	0x080101c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d00b      	beq.n	80100e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	687a      	ldr	r2, [r7, #4]
 80100d6:	7c12      	ldrb	r2, [r2, #16]
 80100d8:	f107 0108 	add.w	r1, r7, #8
 80100dc:	4610      	mov	r0, r2
 80100de:	4798      	blx	r3
 80100e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80100e2:	e091      	b.n	8010208 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80100e4:	6839      	ldr	r1, [r7, #0]
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f000 fab2 	bl	8010650 <USBD_CtlError>
            err++;
 80100ec:	7afb      	ldrb	r3, [r7, #11]
 80100ee:	3301      	adds	r3, #1
 80100f0:	72fb      	strb	r3, [r7, #11]
          break;
 80100f2:	e089      	b.n	8010208 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100fa:	689b      	ldr	r3, [r3, #8]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d00b      	beq.n	8010118 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010106:	689b      	ldr	r3, [r3, #8]
 8010108:	687a      	ldr	r2, [r7, #4]
 801010a:	7c12      	ldrb	r2, [r2, #16]
 801010c:	f107 0108 	add.w	r1, r7, #8
 8010110:	4610      	mov	r0, r2
 8010112:	4798      	blx	r3
 8010114:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010116:	e077      	b.n	8010208 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010118:	6839      	ldr	r1, [r7, #0]
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f000 fa98 	bl	8010650 <USBD_CtlError>
            err++;
 8010120:	7afb      	ldrb	r3, [r7, #11]
 8010122:	3301      	adds	r3, #1
 8010124:	72fb      	strb	r3, [r7, #11]
          break;
 8010126:	e06f      	b.n	8010208 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801012e:	68db      	ldr	r3, [r3, #12]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d00b      	beq.n	801014c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801013a:	68db      	ldr	r3, [r3, #12]
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	7c12      	ldrb	r2, [r2, #16]
 8010140:	f107 0108 	add.w	r1, r7, #8
 8010144:	4610      	mov	r0, r2
 8010146:	4798      	blx	r3
 8010148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801014a:	e05d      	b.n	8010208 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801014c:	6839      	ldr	r1, [r7, #0]
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f000 fa7e 	bl	8010650 <USBD_CtlError>
            err++;
 8010154:	7afb      	ldrb	r3, [r7, #11]
 8010156:	3301      	adds	r3, #1
 8010158:	72fb      	strb	r3, [r7, #11]
          break;
 801015a:	e055      	b.n	8010208 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010162:	691b      	ldr	r3, [r3, #16]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d00b      	beq.n	8010180 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801016e:	691b      	ldr	r3, [r3, #16]
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	7c12      	ldrb	r2, [r2, #16]
 8010174:	f107 0108 	add.w	r1, r7, #8
 8010178:	4610      	mov	r0, r2
 801017a:	4798      	blx	r3
 801017c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801017e:	e043      	b.n	8010208 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010180:	6839      	ldr	r1, [r7, #0]
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 fa64 	bl	8010650 <USBD_CtlError>
            err++;
 8010188:	7afb      	ldrb	r3, [r7, #11]
 801018a:	3301      	adds	r3, #1
 801018c:	72fb      	strb	r3, [r7, #11]
          break;
 801018e:	e03b      	b.n	8010208 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010196:	695b      	ldr	r3, [r3, #20]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d00b      	beq.n	80101b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80101a2:	695b      	ldr	r3, [r3, #20]
 80101a4:	687a      	ldr	r2, [r7, #4]
 80101a6:	7c12      	ldrb	r2, [r2, #16]
 80101a8:	f107 0108 	add.w	r1, r7, #8
 80101ac:	4610      	mov	r0, r2
 80101ae:	4798      	blx	r3
 80101b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101b2:	e029      	b.n	8010208 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80101b4:	6839      	ldr	r1, [r7, #0]
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 fa4a 	bl	8010650 <USBD_CtlError>
            err++;
 80101bc:	7afb      	ldrb	r3, [r7, #11]
 80101be:	3301      	adds	r3, #1
 80101c0:	72fb      	strb	r3, [r7, #11]
          break;
 80101c2:	e021      	b.n	8010208 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80101ca:	699b      	ldr	r3, [r3, #24]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d00b      	beq.n	80101e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80101d6:	699b      	ldr	r3, [r3, #24]
 80101d8:	687a      	ldr	r2, [r7, #4]
 80101da:	7c12      	ldrb	r2, [r2, #16]
 80101dc:	f107 0108 	add.w	r1, r7, #8
 80101e0:	4610      	mov	r0, r2
 80101e2:	4798      	blx	r3
 80101e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101e6:	e00f      	b.n	8010208 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80101e8:	6839      	ldr	r1, [r7, #0]
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f000 fa30 	bl	8010650 <USBD_CtlError>
            err++;
 80101f0:	7afb      	ldrb	r3, [r7, #11]
 80101f2:	3301      	adds	r3, #1
 80101f4:	72fb      	strb	r3, [r7, #11]
          break;
 80101f6:	e007      	b.n	8010208 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80101f8:	6839      	ldr	r1, [r7, #0]
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f000 fa28 	bl	8010650 <USBD_CtlError>
          err++;
 8010200:	7afb      	ldrb	r3, [r7, #11]
 8010202:	3301      	adds	r3, #1
 8010204:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8010206:	bf00      	nop
      }
      break;
 8010208:	e037      	b.n	801027a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	7c1b      	ldrb	r3, [r3, #16]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d109      	bne.n	8010226 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801021a:	f107 0208 	add.w	r2, r7, #8
 801021e:	4610      	mov	r0, r2
 8010220:	4798      	blx	r3
 8010222:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010224:	e029      	b.n	801027a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010226:	6839      	ldr	r1, [r7, #0]
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 fa11 	bl	8010650 <USBD_CtlError>
        err++;
 801022e:	7afb      	ldrb	r3, [r7, #11]
 8010230:	3301      	adds	r3, #1
 8010232:	72fb      	strb	r3, [r7, #11]
      break;
 8010234:	e021      	b.n	801027a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	7c1b      	ldrb	r3, [r3, #16]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d10d      	bne.n	801025a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010246:	f107 0208 	add.w	r2, r7, #8
 801024a:	4610      	mov	r0, r2
 801024c:	4798      	blx	r3
 801024e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	3301      	adds	r3, #1
 8010254:	2207      	movs	r2, #7
 8010256:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010258:	e00f      	b.n	801027a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801025a:	6839      	ldr	r1, [r7, #0]
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f000 f9f7 	bl	8010650 <USBD_CtlError>
        err++;
 8010262:	7afb      	ldrb	r3, [r7, #11]
 8010264:	3301      	adds	r3, #1
 8010266:	72fb      	strb	r3, [r7, #11]
      break;
 8010268:	e007      	b.n	801027a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801026a:	6839      	ldr	r1, [r7, #0]
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f000 f9ef 	bl	8010650 <USBD_CtlError>
      err++;
 8010272:	7afb      	ldrb	r3, [r7, #11]
 8010274:	3301      	adds	r3, #1
 8010276:	72fb      	strb	r3, [r7, #11]
      break;
 8010278:	bf00      	nop
  }

  if (err != 0U)
 801027a:	7afb      	ldrb	r3, [r7, #11]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d11e      	bne.n	80102be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	88db      	ldrh	r3, [r3, #6]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d016      	beq.n	80102b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010288:	893b      	ldrh	r3, [r7, #8]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d00e      	beq.n	80102ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	88da      	ldrh	r2, [r3, #6]
 8010292:	893b      	ldrh	r3, [r7, #8]
 8010294:	4293      	cmp	r3, r2
 8010296:	bf28      	it	cs
 8010298:	4613      	movcs	r3, r2
 801029a:	b29b      	uxth	r3, r3
 801029c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801029e:	893b      	ldrh	r3, [r7, #8]
 80102a0:	461a      	mov	r2, r3
 80102a2:	68f9      	ldr	r1, [r7, #12]
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f000 fa44 	bl	8010732 <USBD_CtlSendData>
 80102aa:	e009      	b.n	80102c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80102ac:	6839      	ldr	r1, [r7, #0]
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f000 f9ce 	bl	8010650 <USBD_CtlError>
 80102b4:	e004      	b.n	80102c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f000 fa95 	bl	80107e6 <USBD_CtlSendStatus>
 80102bc:	e000      	b.n	80102c0 <USBD_GetDescriptor+0x320>
    return;
 80102be:	bf00      	nop
  }
}
 80102c0:	3710      	adds	r7, #16
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}
 80102c6:	bf00      	nop

080102c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b084      	sub	sp, #16
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	889b      	ldrh	r3, [r3, #4]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d131      	bne.n	801033e <USBD_SetAddress+0x76>
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	88db      	ldrh	r3, [r3, #6]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d12d      	bne.n	801033e <USBD_SetAddress+0x76>
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	885b      	ldrh	r3, [r3, #2]
 80102e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80102e8:	d829      	bhi.n	801033e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	885b      	ldrh	r3, [r3, #2]
 80102ee:	b2db      	uxtb	r3, r3
 80102f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80102f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102fc:	b2db      	uxtb	r3, r3
 80102fe:	2b03      	cmp	r3, #3
 8010300:	d104      	bne.n	801030c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010302:	6839      	ldr	r1, [r7, #0]
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f000 f9a3 	bl	8010650 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801030a:	e01d      	b.n	8010348 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	7bfa      	ldrb	r2, [r7, #15]
 8010310:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010314:	7bfb      	ldrb	r3, [r7, #15]
 8010316:	4619      	mov	r1, r3
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f000 fea1 	bl	8011060 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f000 fa61 	bl	80107e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010324:	7bfb      	ldrb	r3, [r7, #15]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d004      	beq.n	8010334 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2202      	movs	r2, #2
 801032e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010332:	e009      	b.n	8010348 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2201      	movs	r2, #1
 8010338:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801033c:	e004      	b.n	8010348 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801033e:	6839      	ldr	r1, [r7, #0]
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	f000 f985 	bl	8010650 <USBD_CtlError>
  }
}
 8010346:	bf00      	nop
 8010348:	bf00      	nop
 801034a:	3710      	adds	r7, #16
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}

08010350 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b084      	sub	sp, #16
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801035a:	2300      	movs	r3, #0
 801035c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	885b      	ldrh	r3, [r3, #2]
 8010362:	b2da      	uxtb	r2, r3
 8010364:	4b4c      	ldr	r3, [pc, #304]	@ (8010498 <USBD_SetConfig+0x148>)
 8010366:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010368:	4b4b      	ldr	r3, [pc, #300]	@ (8010498 <USBD_SetConfig+0x148>)
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	2b01      	cmp	r3, #1
 801036e:	d905      	bls.n	801037c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010370:	6839      	ldr	r1, [r7, #0]
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f000 f96c 	bl	8010650 <USBD_CtlError>
    return USBD_FAIL;
 8010378:	2303      	movs	r3, #3
 801037a:	e088      	b.n	801048e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010382:	b2db      	uxtb	r3, r3
 8010384:	2b02      	cmp	r3, #2
 8010386:	d002      	beq.n	801038e <USBD_SetConfig+0x3e>
 8010388:	2b03      	cmp	r3, #3
 801038a:	d025      	beq.n	80103d8 <USBD_SetConfig+0x88>
 801038c:	e071      	b.n	8010472 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801038e:	4b42      	ldr	r3, [pc, #264]	@ (8010498 <USBD_SetConfig+0x148>)
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d01c      	beq.n	80103d0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8010396:	4b40      	ldr	r3, [pc, #256]	@ (8010498 <USBD_SetConfig+0x148>)
 8010398:	781b      	ldrb	r3, [r3, #0]
 801039a:	461a      	mov	r2, r3
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80103a0:	4b3d      	ldr	r3, [pc, #244]	@ (8010498 <USBD_SetConfig+0x148>)
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	4619      	mov	r1, r3
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f7ff f992 	bl	800f6d0 <USBD_SetClassConfig>
 80103ac:	4603      	mov	r3, r0
 80103ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80103b0:	7bfb      	ldrb	r3, [r7, #15]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d004      	beq.n	80103c0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80103b6:	6839      	ldr	r1, [r7, #0]
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f000 f949 	bl	8010650 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80103be:	e065      	b.n	801048c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f000 fa10 	bl	80107e6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2203      	movs	r2, #3
 80103ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80103ce:	e05d      	b.n	801048c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f000 fa08 	bl	80107e6 <USBD_CtlSendStatus>
      break;
 80103d6:	e059      	b.n	801048c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80103d8:	4b2f      	ldr	r3, [pc, #188]	@ (8010498 <USBD_SetConfig+0x148>)
 80103da:	781b      	ldrb	r3, [r3, #0]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d112      	bne.n	8010406 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2202      	movs	r2, #2
 80103e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80103e8:	4b2b      	ldr	r3, [pc, #172]	@ (8010498 <USBD_SetConfig+0x148>)
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	461a      	mov	r2, r3
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80103f2:	4b29      	ldr	r3, [pc, #164]	@ (8010498 <USBD_SetConfig+0x148>)
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	4619      	mov	r1, r3
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f7ff f985 	bl	800f708 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f000 f9f1 	bl	80107e6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010404:	e042      	b.n	801048c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8010406:	4b24      	ldr	r3, [pc, #144]	@ (8010498 <USBD_SetConfig+0x148>)
 8010408:	781b      	ldrb	r3, [r3, #0]
 801040a:	461a      	mov	r2, r3
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	429a      	cmp	r2, r3
 8010412:	d02a      	beq.n	801046a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	685b      	ldr	r3, [r3, #4]
 8010418:	b2db      	uxtb	r3, r3
 801041a:	4619      	mov	r1, r3
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f7ff f973 	bl	800f708 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010422:	4b1d      	ldr	r3, [pc, #116]	@ (8010498 <USBD_SetConfig+0x148>)
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	461a      	mov	r2, r3
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801042c:	4b1a      	ldr	r3, [pc, #104]	@ (8010498 <USBD_SetConfig+0x148>)
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	4619      	mov	r1, r3
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f7ff f94c 	bl	800f6d0 <USBD_SetClassConfig>
 8010438:	4603      	mov	r3, r0
 801043a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801043c:	7bfb      	ldrb	r3, [r7, #15]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d00f      	beq.n	8010462 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010442:	6839      	ldr	r1, [r7, #0]
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f000 f903 	bl	8010650 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	b2db      	uxtb	r3, r3
 8010450:	4619      	mov	r1, r3
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f7ff f958 	bl	800f708 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2202      	movs	r2, #2
 801045c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010460:	e014      	b.n	801048c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f000 f9bf 	bl	80107e6 <USBD_CtlSendStatus>
      break;
 8010468:	e010      	b.n	801048c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f000 f9bb 	bl	80107e6 <USBD_CtlSendStatus>
      break;
 8010470:	e00c      	b.n	801048c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010472:	6839      	ldr	r1, [r7, #0]
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f000 f8eb 	bl	8010650 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801047a:	4b07      	ldr	r3, [pc, #28]	@ (8010498 <USBD_SetConfig+0x148>)
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	4619      	mov	r1, r3
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f7ff f941 	bl	800f708 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010486:	2303      	movs	r3, #3
 8010488:	73fb      	strb	r3, [r7, #15]
      break;
 801048a:	bf00      	nop
  }

  return ret;
 801048c:	7bfb      	ldrb	r3, [r7, #15]
}
 801048e:	4618      	mov	r0, r3
 8010490:	3710      	adds	r7, #16
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}
 8010496:	bf00      	nop
 8010498:	20000c9c 	.word	0x20000c9c

0801049c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b082      	sub	sp, #8
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	88db      	ldrh	r3, [r3, #6]
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	d004      	beq.n	80104b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80104ae:	6839      	ldr	r1, [r7, #0]
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f000 f8cd 	bl	8010650 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80104b6:	e023      	b.n	8010500 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104be:	b2db      	uxtb	r3, r3
 80104c0:	2b02      	cmp	r3, #2
 80104c2:	dc02      	bgt.n	80104ca <USBD_GetConfig+0x2e>
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	dc03      	bgt.n	80104d0 <USBD_GetConfig+0x34>
 80104c8:	e015      	b.n	80104f6 <USBD_GetConfig+0x5a>
 80104ca:	2b03      	cmp	r3, #3
 80104cc:	d00b      	beq.n	80104e6 <USBD_GetConfig+0x4a>
 80104ce:	e012      	b.n	80104f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2200      	movs	r2, #0
 80104d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	3308      	adds	r3, #8
 80104da:	2201      	movs	r2, #1
 80104dc:	4619      	mov	r1, r3
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f000 f927 	bl	8010732 <USBD_CtlSendData>
        break;
 80104e4:	e00c      	b.n	8010500 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	3304      	adds	r3, #4
 80104ea:	2201      	movs	r2, #1
 80104ec:	4619      	mov	r1, r3
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f000 f91f 	bl	8010732 <USBD_CtlSendData>
        break;
 80104f4:	e004      	b.n	8010500 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80104f6:	6839      	ldr	r1, [r7, #0]
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f000 f8a9 	bl	8010650 <USBD_CtlError>
        break;
 80104fe:	bf00      	nop
}
 8010500:	bf00      	nop
 8010502:	3708      	adds	r7, #8
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010518:	b2db      	uxtb	r3, r3
 801051a:	3b01      	subs	r3, #1
 801051c:	2b02      	cmp	r3, #2
 801051e:	d81e      	bhi.n	801055e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	88db      	ldrh	r3, [r3, #6]
 8010524:	2b02      	cmp	r3, #2
 8010526:	d004      	beq.n	8010532 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010528:	6839      	ldr	r1, [r7, #0]
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f000 f890 	bl	8010650 <USBD_CtlError>
        break;
 8010530:	e01a      	b.n	8010568 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2201      	movs	r2, #1
 8010536:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801053e:	2b00      	cmp	r3, #0
 8010540:	d005      	beq.n	801054e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	68db      	ldr	r3, [r3, #12]
 8010546:	f043 0202 	orr.w	r2, r3, #2
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	330c      	adds	r3, #12
 8010552:	2202      	movs	r2, #2
 8010554:	4619      	mov	r1, r3
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f000 f8eb 	bl	8010732 <USBD_CtlSendData>
      break;
 801055c:	e004      	b.n	8010568 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801055e:	6839      	ldr	r1, [r7, #0]
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f000 f875 	bl	8010650 <USBD_CtlError>
      break;
 8010566:	bf00      	nop
  }
}
 8010568:	bf00      	nop
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}

08010570 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b082      	sub	sp, #8
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	885b      	ldrh	r3, [r3, #2]
 801057e:	2b01      	cmp	r3, #1
 8010580:	d106      	bne.n	8010590 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2201      	movs	r2, #1
 8010586:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f000 f92b 	bl	80107e6 <USBD_CtlSendStatus>
  }
}
 8010590:	bf00      	nop
 8010592:	3708      	adds	r7, #8
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105a8:	b2db      	uxtb	r3, r3
 80105aa:	3b01      	subs	r3, #1
 80105ac:	2b02      	cmp	r3, #2
 80105ae:	d80b      	bhi.n	80105c8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	885b      	ldrh	r3, [r3, #2]
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	d10c      	bne.n	80105d2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2200      	movs	r2, #0
 80105bc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f000 f910 	bl	80107e6 <USBD_CtlSendStatus>
      }
      break;
 80105c6:	e004      	b.n	80105d2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80105c8:	6839      	ldr	r1, [r7, #0]
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 f840 	bl	8010650 <USBD_CtlError>
      break;
 80105d0:	e000      	b.n	80105d4 <USBD_ClrFeature+0x3c>
      break;
 80105d2:	bf00      	nop
  }
}
 80105d4:	bf00      	nop
 80105d6:	3708      	adds	r7, #8
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b084      	sub	sp, #16
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	781a      	ldrb	r2, [r3, #0]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	3301      	adds	r3, #1
 80105f6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	781a      	ldrb	r2, [r3, #0]
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	3301      	adds	r3, #1
 8010604:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010606:	68f8      	ldr	r0, [r7, #12]
 8010608:	f7ff fa92 	bl	800fb30 <SWAPBYTE>
 801060c:	4603      	mov	r3, r0
 801060e:	461a      	mov	r2, r3
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	3301      	adds	r3, #1
 8010618:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	3301      	adds	r3, #1
 801061e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010620:	68f8      	ldr	r0, [r7, #12]
 8010622:	f7ff fa85 	bl	800fb30 <SWAPBYTE>
 8010626:	4603      	mov	r3, r0
 8010628:	461a      	mov	r2, r3
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	3301      	adds	r3, #1
 8010632:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	3301      	adds	r3, #1
 8010638:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801063a:	68f8      	ldr	r0, [r7, #12]
 801063c:	f7ff fa78 	bl	800fb30 <SWAPBYTE>
 8010640:	4603      	mov	r3, r0
 8010642:	461a      	mov	r2, r3
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	80da      	strh	r2, [r3, #6]
}
 8010648:	bf00      	nop
 801064a:	3710      	adds	r7, #16
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}

08010650 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b082      	sub	sp, #8
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801065a:	2180      	movs	r1, #128	@ 0x80
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f000 fc95 	bl	8010f8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010662:	2100      	movs	r1, #0
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f000 fc91 	bl	8010f8c <USBD_LL_StallEP>
}
 801066a:	bf00      	nop
 801066c:	3708      	adds	r7, #8
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}

08010672 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010672:	b580      	push	{r7, lr}
 8010674:	b086      	sub	sp, #24
 8010676:	af00      	add	r7, sp, #0
 8010678:	60f8      	str	r0, [r7, #12]
 801067a:	60b9      	str	r1, [r7, #8]
 801067c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801067e:	2300      	movs	r3, #0
 8010680:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d036      	beq.n	80106f6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801068c:	6938      	ldr	r0, [r7, #16]
 801068e:	f000 f836 	bl	80106fe <USBD_GetLen>
 8010692:	4603      	mov	r3, r0
 8010694:	3301      	adds	r3, #1
 8010696:	b29b      	uxth	r3, r3
 8010698:	005b      	lsls	r3, r3, #1
 801069a:	b29a      	uxth	r2, r3
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80106a0:	7dfb      	ldrb	r3, [r7, #23]
 80106a2:	68ba      	ldr	r2, [r7, #8]
 80106a4:	4413      	add	r3, r2
 80106a6:	687a      	ldr	r2, [r7, #4]
 80106a8:	7812      	ldrb	r2, [r2, #0]
 80106aa:	701a      	strb	r2, [r3, #0]
  idx++;
 80106ac:	7dfb      	ldrb	r3, [r7, #23]
 80106ae:	3301      	adds	r3, #1
 80106b0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80106b2:	7dfb      	ldrb	r3, [r7, #23]
 80106b4:	68ba      	ldr	r2, [r7, #8]
 80106b6:	4413      	add	r3, r2
 80106b8:	2203      	movs	r2, #3
 80106ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80106bc:	7dfb      	ldrb	r3, [r7, #23]
 80106be:	3301      	adds	r3, #1
 80106c0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80106c2:	e013      	b.n	80106ec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80106c4:	7dfb      	ldrb	r3, [r7, #23]
 80106c6:	68ba      	ldr	r2, [r7, #8]
 80106c8:	4413      	add	r3, r2
 80106ca:	693a      	ldr	r2, [r7, #16]
 80106cc:	7812      	ldrb	r2, [r2, #0]
 80106ce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	3301      	adds	r3, #1
 80106d4:	613b      	str	r3, [r7, #16]
    idx++;
 80106d6:	7dfb      	ldrb	r3, [r7, #23]
 80106d8:	3301      	adds	r3, #1
 80106da:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80106dc:	7dfb      	ldrb	r3, [r7, #23]
 80106de:	68ba      	ldr	r2, [r7, #8]
 80106e0:	4413      	add	r3, r2
 80106e2:	2200      	movs	r2, #0
 80106e4:	701a      	strb	r2, [r3, #0]
    idx++;
 80106e6:	7dfb      	ldrb	r3, [r7, #23]
 80106e8:	3301      	adds	r3, #1
 80106ea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d1e7      	bne.n	80106c4 <USBD_GetString+0x52>
 80106f4:	e000      	b.n	80106f8 <USBD_GetString+0x86>
    return;
 80106f6:	bf00      	nop
  }
}
 80106f8:	3718      	adds	r7, #24
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}

080106fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80106fe:	b480      	push	{r7}
 8010700:	b085      	sub	sp, #20
 8010702:	af00      	add	r7, sp, #0
 8010704:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010706:	2300      	movs	r3, #0
 8010708:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801070e:	e005      	b.n	801071c <USBD_GetLen+0x1e>
  {
    len++;
 8010710:	7bfb      	ldrb	r3, [r7, #15]
 8010712:	3301      	adds	r3, #1
 8010714:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	3301      	adds	r3, #1
 801071a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	781b      	ldrb	r3, [r3, #0]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d1f5      	bne.n	8010710 <USBD_GetLen+0x12>
  }

  return len;
 8010724:	7bfb      	ldrb	r3, [r7, #15]
}
 8010726:	4618      	mov	r0, r3
 8010728:	3714      	adds	r7, #20
 801072a:	46bd      	mov	sp, r7
 801072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010730:	4770      	bx	lr

08010732 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010732:	b580      	push	{r7, lr}
 8010734:	b084      	sub	sp, #16
 8010736:	af00      	add	r7, sp, #0
 8010738:	60f8      	str	r0, [r7, #12]
 801073a:	60b9      	str	r1, [r7, #8]
 801073c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2202      	movs	r2, #2
 8010742:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	687a      	ldr	r2, [r7, #4]
 801074a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	687a      	ldr	r2, [r7, #4]
 8010750:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	68ba      	ldr	r2, [r7, #8]
 8010756:	2100      	movs	r1, #0
 8010758:	68f8      	ldr	r0, [r7, #12]
 801075a:	f000 fca0 	bl	801109e <USBD_LL_Transmit>

  return USBD_OK;
 801075e:	2300      	movs	r3, #0
}
 8010760:	4618      	mov	r0, r3
 8010762:	3710      	adds	r7, #16
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}

08010768 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b084      	sub	sp, #16
 801076c:	af00      	add	r7, sp, #0
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	60b9      	str	r1, [r7, #8]
 8010772:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	68ba      	ldr	r2, [r7, #8]
 8010778:	2100      	movs	r1, #0
 801077a:	68f8      	ldr	r0, [r7, #12]
 801077c:	f000 fc8f 	bl	801109e <USBD_LL_Transmit>

  return USBD_OK;
 8010780:	2300      	movs	r3, #0
}
 8010782:	4618      	mov	r0, r3
 8010784:	3710      	adds	r7, #16
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}

0801078a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801078a:	b580      	push	{r7, lr}
 801078c:	b084      	sub	sp, #16
 801078e:	af00      	add	r7, sp, #0
 8010790:	60f8      	str	r0, [r7, #12]
 8010792:	60b9      	str	r1, [r7, #8]
 8010794:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2203      	movs	r2, #3
 801079a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	687a      	ldr	r2, [r7, #4]
 80107a2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	687a      	ldr	r2, [r7, #4]
 80107aa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	68ba      	ldr	r2, [r7, #8]
 80107b2:	2100      	movs	r1, #0
 80107b4:	68f8      	ldr	r0, [r7, #12]
 80107b6:	f000 fc93 	bl	80110e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80107ba:	2300      	movs	r3, #0
}
 80107bc:	4618      	mov	r0, r3
 80107be:	3710      	adds	r7, #16
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}

080107c4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b084      	sub	sp, #16
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	60f8      	str	r0, [r7, #12]
 80107cc:	60b9      	str	r1, [r7, #8]
 80107ce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	68ba      	ldr	r2, [r7, #8]
 80107d4:	2100      	movs	r1, #0
 80107d6:	68f8      	ldr	r0, [r7, #12]
 80107d8:	f000 fc82 	bl	80110e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80107dc:	2300      	movs	r3, #0
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3710      	adds	r7, #16
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}

080107e6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80107e6:	b580      	push	{r7, lr}
 80107e8:	b082      	sub	sp, #8
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2204      	movs	r2, #4
 80107f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80107f6:	2300      	movs	r3, #0
 80107f8:	2200      	movs	r2, #0
 80107fa:	2100      	movs	r1, #0
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f000 fc4e 	bl	801109e <USBD_LL_Transmit>

  return USBD_OK;
 8010802:	2300      	movs	r3, #0
}
 8010804:	4618      	mov	r0, r3
 8010806:	3708      	adds	r7, #8
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}

0801080c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b082      	sub	sp, #8
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2205      	movs	r2, #5
 8010818:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801081c:	2300      	movs	r3, #0
 801081e:	2200      	movs	r2, #0
 8010820:	2100      	movs	r1, #0
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f000 fc5c 	bl	80110e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010828:	2300      	movs	r3, #0
}
 801082a:	4618      	mov	r0, r3
 801082c:	3708      	adds	r7, #8
 801082e:	46bd      	mov	sp, r7
 8010830:	bd80      	pop	{r7, pc}
	...

08010834 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010838:	2200      	movs	r2, #0
 801083a:	4912      	ldr	r1, [pc, #72]	@ (8010884 <MX_USB_Device_Init+0x50>)
 801083c:	4812      	ldr	r0, [pc, #72]	@ (8010888 <MX_USB_Device_Init+0x54>)
 801083e:	f7fe fed9 	bl	800f5f4 <USBD_Init>
 8010842:	4603      	mov	r3, r0
 8010844:	2b00      	cmp	r3, #0
 8010846:	d001      	beq.n	801084c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010848:	f7f1 feba 	bl	80025c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801084c:	490f      	ldr	r1, [pc, #60]	@ (801088c <MX_USB_Device_Init+0x58>)
 801084e:	480e      	ldr	r0, [pc, #56]	@ (8010888 <MX_USB_Device_Init+0x54>)
 8010850:	f7fe ff00 	bl	800f654 <USBD_RegisterClass>
 8010854:	4603      	mov	r3, r0
 8010856:	2b00      	cmp	r3, #0
 8010858:	d001      	beq.n	801085e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801085a:	f7f1 feb1 	bl	80025c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801085e:	490c      	ldr	r1, [pc, #48]	@ (8010890 <MX_USB_Device_Init+0x5c>)
 8010860:	4809      	ldr	r0, [pc, #36]	@ (8010888 <MX_USB_Device_Init+0x54>)
 8010862:	f7fe fe21 	bl	800f4a8 <USBD_CDC_RegisterInterface>
 8010866:	4603      	mov	r3, r0
 8010868:	2b00      	cmp	r3, #0
 801086a:	d001      	beq.n	8010870 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 801086c:	f7f1 fea8 	bl	80025c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010870:	4805      	ldr	r0, [pc, #20]	@ (8010888 <MX_USB_Device_Init+0x54>)
 8010872:	f7fe ff16 	bl	800f6a2 <USBD_Start>
 8010876:	4603      	mov	r3, r0
 8010878:	2b00      	cmp	r3, #0
 801087a:	d001      	beq.n	8010880 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801087c:	f7f1 fea0 	bl	80025c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010880:	bf00      	nop
 8010882:	bd80      	pop	{r7, pc}
 8010884:	2000014c 	.word	0x2000014c
 8010888:	20000ca0 	.word	0x20000ca0
 801088c:	20000034 	.word	0x20000034
 8010890:	20000138 	.word	0x20000138

08010894 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010898:	2200      	movs	r2, #0
 801089a:	4905      	ldr	r1, [pc, #20]	@ (80108b0 <CDC_Init_FS+0x1c>)
 801089c:	4805      	ldr	r0, [pc, #20]	@ (80108b4 <CDC_Init_FS+0x20>)
 801089e:	f7fe fe18 	bl	800f4d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80108a2:	4905      	ldr	r1, [pc, #20]	@ (80108b8 <CDC_Init_FS+0x24>)
 80108a4:	4803      	ldr	r0, [pc, #12]	@ (80108b4 <CDC_Init_FS+0x20>)
 80108a6:	f7fe fe32 	bl	800f50e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80108aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80108ac:	4618      	mov	r0, r3
 80108ae:	bd80      	pop	{r7, pc}
 80108b0:	20001770 	.word	0x20001770
 80108b4:	20000ca0 	.word	0x20000ca0
 80108b8:	20000f70 	.word	0x20000f70

080108bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80108bc:	b480      	push	{r7}
 80108be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80108c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	46bd      	mov	sp, r7
 80108c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ca:	4770      	bx	lr

080108cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b083      	sub	sp, #12
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	4603      	mov	r3, r0
 80108d4:	6039      	str	r1, [r7, #0]
 80108d6:	71fb      	strb	r3, [r7, #7]
 80108d8:	4613      	mov	r3, r2
 80108da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80108dc:	79fb      	ldrb	r3, [r7, #7]
 80108de:	2b23      	cmp	r3, #35	@ 0x23
 80108e0:	d84a      	bhi.n	8010978 <CDC_Control_FS+0xac>
 80108e2:	a201      	add	r2, pc, #4	@ (adr r2, 80108e8 <CDC_Control_FS+0x1c>)
 80108e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108e8:	08010979 	.word	0x08010979
 80108ec:	08010979 	.word	0x08010979
 80108f0:	08010979 	.word	0x08010979
 80108f4:	08010979 	.word	0x08010979
 80108f8:	08010979 	.word	0x08010979
 80108fc:	08010979 	.word	0x08010979
 8010900:	08010979 	.word	0x08010979
 8010904:	08010979 	.word	0x08010979
 8010908:	08010979 	.word	0x08010979
 801090c:	08010979 	.word	0x08010979
 8010910:	08010979 	.word	0x08010979
 8010914:	08010979 	.word	0x08010979
 8010918:	08010979 	.word	0x08010979
 801091c:	08010979 	.word	0x08010979
 8010920:	08010979 	.word	0x08010979
 8010924:	08010979 	.word	0x08010979
 8010928:	08010979 	.word	0x08010979
 801092c:	08010979 	.word	0x08010979
 8010930:	08010979 	.word	0x08010979
 8010934:	08010979 	.word	0x08010979
 8010938:	08010979 	.word	0x08010979
 801093c:	08010979 	.word	0x08010979
 8010940:	08010979 	.word	0x08010979
 8010944:	08010979 	.word	0x08010979
 8010948:	08010979 	.word	0x08010979
 801094c:	08010979 	.word	0x08010979
 8010950:	08010979 	.word	0x08010979
 8010954:	08010979 	.word	0x08010979
 8010958:	08010979 	.word	0x08010979
 801095c:	08010979 	.word	0x08010979
 8010960:	08010979 	.word	0x08010979
 8010964:	08010979 	.word	0x08010979
 8010968:	08010979 	.word	0x08010979
 801096c:	08010979 	.word	0x08010979
 8010970:	08010979 	.word	0x08010979
 8010974:	08010979 	.word	0x08010979
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010978:	bf00      	nop
  }

  return (USBD_OK);
 801097a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801097c:	4618      	mov	r0, r3
 801097e:	370c      	adds	r7, #12
 8010980:	46bd      	mov	sp, r7
 8010982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010986:	4770      	bx	lr

08010988 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010992:	6879      	ldr	r1, [r7, #4]
 8010994:	4805      	ldr	r0, [pc, #20]	@ (80109ac <CDC_Receive_FS+0x24>)
 8010996:	f7fe fdba 	bl	800f50e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801099a:	4804      	ldr	r0, [pc, #16]	@ (80109ac <CDC_Receive_FS+0x24>)
 801099c:	f7fe fe00 	bl	800f5a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80109a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3708      	adds	r7, #8
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop
 80109ac:	20000ca0 	.word	0x20000ca0

080109b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	460b      	mov	r3, r1
 80109ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80109bc:	2300      	movs	r3, #0
 80109be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80109c0:	4b0d      	ldr	r3, [pc, #52]	@ (80109f8 <CDC_Transmit_FS+0x48>)
 80109c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80109c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d001      	beq.n	80109d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80109d2:	2301      	movs	r3, #1
 80109d4:	e00b      	b.n	80109ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80109d6:	887b      	ldrh	r3, [r7, #2]
 80109d8:	461a      	mov	r2, r3
 80109da:	6879      	ldr	r1, [r7, #4]
 80109dc:	4806      	ldr	r0, [pc, #24]	@ (80109f8 <CDC_Transmit_FS+0x48>)
 80109de:	f7fe fd78 	bl	800f4d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80109e2:	4805      	ldr	r0, [pc, #20]	@ (80109f8 <CDC_Transmit_FS+0x48>)
 80109e4:	f7fe fdac 	bl	800f540 <USBD_CDC_TransmitPacket>
 80109e8:	4603      	mov	r3, r0
 80109ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80109ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80109ee:	4618      	mov	r0, r3
 80109f0:	3710      	adds	r7, #16
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}
 80109f6:	bf00      	nop
 80109f8:	20000ca0 	.word	0x20000ca0

080109fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80109fc:	b480      	push	{r7}
 80109fe:	b087      	sub	sp, #28
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	60f8      	str	r0, [r7, #12]
 8010a04:	60b9      	str	r1, [r7, #8]
 8010a06:	4613      	mov	r3, r2
 8010a08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010a0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	371c      	adds	r7, #28
 8010a16:	46bd      	mov	sp, r7
 8010a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1c:	4770      	bx	lr
	...

08010a20 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b083      	sub	sp, #12
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	4603      	mov	r3, r0
 8010a28:	6039      	str	r1, [r7, #0]
 8010a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	2212      	movs	r2, #18
 8010a30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8010a32:	4b03      	ldr	r3, [pc, #12]	@ (8010a40 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	370c      	adds	r7, #12
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr
 8010a40:	2000016c 	.word	0x2000016c

08010a44 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b083      	sub	sp, #12
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	6039      	str	r1, [r7, #0]
 8010a4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	2204      	movs	r2, #4
 8010a54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010a56:	4b03      	ldr	r3, [pc, #12]	@ (8010a64 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	370c      	adds	r7, #12
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr
 8010a64:	20000180 	.word	0x20000180

08010a68 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b082      	sub	sp, #8
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	4603      	mov	r3, r0
 8010a70:	6039      	str	r1, [r7, #0]
 8010a72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010a74:	79fb      	ldrb	r3, [r7, #7]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d105      	bne.n	8010a86 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010a7a:	683a      	ldr	r2, [r7, #0]
 8010a7c:	4907      	ldr	r1, [pc, #28]	@ (8010a9c <USBD_CDC_ProductStrDescriptor+0x34>)
 8010a7e:	4808      	ldr	r0, [pc, #32]	@ (8010aa0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010a80:	f7ff fdf7 	bl	8010672 <USBD_GetString>
 8010a84:	e004      	b.n	8010a90 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010a86:	683a      	ldr	r2, [r7, #0]
 8010a88:	4904      	ldr	r1, [pc, #16]	@ (8010a9c <USBD_CDC_ProductStrDescriptor+0x34>)
 8010a8a:	4805      	ldr	r0, [pc, #20]	@ (8010aa0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010a8c:	f7ff fdf1 	bl	8010672 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010a90:	4b02      	ldr	r3, [pc, #8]	@ (8010a9c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3708      	adds	r7, #8
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}
 8010a9a:	bf00      	nop
 8010a9c:	20001f70 	.word	0x20001f70
 8010aa0:	08012c18 	.word	0x08012c18

08010aa4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b082      	sub	sp, #8
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	4603      	mov	r3, r0
 8010aac:	6039      	str	r1, [r7, #0]
 8010aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010ab0:	683a      	ldr	r2, [r7, #0]
 8010ab2:	4904      	ldr	r1, [pc, #16]	@ (8010ac4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8010ab4:	4804      	ldr	r0, [pc, #16]	@ (8010ac8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8010ab6:	f7ff fddc 	bl	8010672 <USBD_GetString>
  return USBD_StrDesc;
 8010aba:	4b02      	ldr	r3, [pc, #8]	@ (8010ac4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3708      	adds	r7, #8
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	20001f70 	.word	0x20001f70
 8010ac8:	08012c30 	.word	0x08012c30

08010acc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	6039      	str	r1, [r7, #0]
 8010ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	221a      	movs	r2, #26
 8010adc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010ade:	f000 f843 	bl	8010b68 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010ae2:	4b02      	ldr	r3, [pc, #8]	@ (8010aec <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}
 8010aec:	20000184 	.word	0x20000184

08010af0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	4603      	mov	r3, r0
 8010af8:	6039      	str	r1, [r7, #0]
 8010afa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010afc:	79fb      	ldrb	r3, [r7, #7]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d105      	bne.n	8010b0e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010b02:	683a      	ldr	r2, [r7, #0]
 8010b04:	4907      	ldr	r1, [pc, #28]	@ (8010b24 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010b06:	4808      	ldr	r0, [pc, #32]	@ (8010b28 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010b08:	f7ff fdb3 	bl	8010672 <USBD_GetString>
 8010b0c:	e004      	b.n	8010b18 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010b0e:	683a      	ldr	r2, [r7, #0]
 8010b10:	4904      	ldr	r1, [pc, #16]	@ (8010b24 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010b12:	4805      	ldr	r0, [pc, #20]	@ (8010b28 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010b14:	f7ff fdad 	bl	8010672 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b18:	4b02      	ldr	r3, [pc, #8]	@ (8010b24 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3708      	adds	r7, #8
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	20001f70 	.word	0x20001f70
 8010b28:	08012c44 	.word	0x08012c44

08010b2c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	4603      	mov	r3, r0
 8010b34:	6039      	str	r1, [r7, #0]
 8010b36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010b38:	79fb      	ldrb	r3, [r7, #7]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d105      	bne.n	8010b4a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010b3e:	683a      	ldr	r2, [r7, #0]
 8010b40:	4907      	ldr	r1, [pc, #28]	@ (8010b60 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010b42:	4808      	ldr	r0, [pc, #32]	@ (8010b64 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010b44:	f7ff fd95 	bl	8010672 <USBD_GetString>
 8010b48:	e004      	b.n	8010b54 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010b4a:	683a      	ldr	r2, [r7, #0]
 8010b4c:	4904      	ldr	r1, [pc, #16]	@ (8010b60 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010b4e:	4805      	ldr	r0, [pc, #20]	@ (8010b64 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010b50:	f7ff fd8f 	bl	8010672 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b54:	4b02      	ldr	r3, [pc, #8]	@ (8010b60 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3708      	adds	r7, #8
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	20001f70 	.word	0x20001f70
 8010b64:	08012c50 	.word	0x08012c50

08010b68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b084      	sub	sp, #16
 8010b6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8010bac <Get_SerialNum+0x44>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010b74:	4b0e      	ldr	r3, [pc, #56]	@ (8010bb0 <Get_SerialNum+0x48>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8010bb4 <Get_SerialNum+0x4c>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010b80:	68fa      	ldr	r2, [r7, #12]
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	4413      	add	r3, r2
 8010b86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d009      	beq.n	8010ba2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010b8e:	2208      	movs	r2, #8
 8010b90:	4909      	ldr	r1, [pc, #36]	@ (8010bb8 <Get_SerialNum+0x50>)
 8010b92:	68f8      	ldr	r0, [r7, #12]
 8010b94:	f000 f814 	bl	8010bc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010b98:	2204      	movs	r2, #4
 8010b9a:	4908      	ldr	r1, [pc, #32]	@ (8010bbc <Get_SerialNum+0x54>)
 8010b9c:	68b8      	ldr	r0, [r7, #8]
 8010b9e:	f000 f80f 	bl	8010bc0 <IntToUnicode>
  }
}
 8010ba2:	bf00      	nop
 8010ba4:	3710      	adds	r7, #16
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
 8010baa:	bf00      	nop
 8010bac:	1fff7590 	.word	0x1fff7590
 8010bb0:	1fff7594 	.word	0x1fff7594
 8010bb4:	1fff7598 	.word	0x1fff7598
 8010bb8:	20000186 	.word	0x20000186
 8010bbc:	20000196 	.word	0x20000196

08010bc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b087      	sub	sp, #28
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	60f8      	str	r0, [r7, #12]
 8010bc8:	60b9      	str	r1, [r7, #8]
 8010bca:	4613      	mov	r3, r2
 8010bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	75fb      	strb	r3, [r7, #23]
 8010bd6:	e027      	b.n	8010c28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	0f1b      	lsrs	r3, r3, #28
 8010bdc:	2b09      	cmp	r3, #9
 8010bde:	d80b      	bhi.n	8010bf8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	0f1b      	lsrs	r3, r3, #28
 8010be4:	b2da      	uxtb	r2, r3
 8010be6:	7dfb      	ldrb	r3, [r7, #23]
 8010be8:	005b      	lsls	r3, r3, #1
 8010bea:	4619      	mov	r1, r3
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	440b      	add	r3, r1
 8010bf0:	3230      	adds	r2, #48	@ 0x30
 8010bf2:	b2d2      	uxtb	r2, r2
 8010bf4:	701a      	strb	r2, [r3, #0]
 8010bf6:	e00a      	b.n	8010c0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	0f1b      	lsrs	r3, r3, #28
 8010bfc:	b2da      	uxtb	r2, r3
 8010bfe:	7dfb      	ldrb	r3, [r7, #23]
 8010c00:	005b      	lsls	r3, r3, #1
 8010c02:	4619      	mov	r1, r3
 8010c04:	68bb      	ldr	r3, [r7, #8]
 8010c06:	440b      	add	r3, r1
 8010c08:	3237      	adds	r2, #55	@ 0x37
 8010c0a:	b2d2      	uxtb	r2, r2
 8010c0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	011b      	lsls	r3, r3, #4
 8010c12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010c14:	7dfb      	ldrb	r3, [r7, #23]
 8010c16:	005b      	lsls	r3, r3, #1
 8010c18:	3301      	adds	r3, #1
 8010c1a:	68ba      	ldr	r2, [r7, #8]
 8010c1c:	4413      	add	r3, r2
 8010c1e:	2200      	movs	r2, #0
 8010c20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010c22:	7dfb      	ldrb	r3, [r7, #23]
 8010c24:	3301      	adds	r3, #1
 8010c26:	75fb      	strb	r3, [r7, #23]
 8010c28:	7dfa      	ldrb	r2, [r7, #23]
 8010c2a:	79fb      	ldrb	r3, [r7, #7]
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	d3d3      	bcc.n	8010bd8 <IntToUnicode+0x18>
  }
}
 8010c30:	bf00      	nop
 8010c32:	bf00      	nop
 8010c34:	371c      	adds	r7, #28
 8010c36:	46bd      	mov	sp, r7
 8010c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3c:	4770      	bx	lr
	...

08010c40 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b098      	sub	sp, #96	@ 0x60
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010c48:	f107 030c 	add.w	r3, r7, #12
 8010c4c:	2254      	movs	r2, #84	@ 0x54
 8010c4e:	2100      	movs	r1, #0
 8010c50:	4618      	mov	r0, r3
 8010c52:	f001 f867 	bl	8011d24 <memset>
  if(pcdHandle->Instance==USB)
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	4a15      	ldr	r2, [pc, #84]	@ (8010cb0 <HAL_PCD_MspInit+0x70>)
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	d122      	bne.n	8010ca6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010c60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010c64:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010c66:	2300      	movs	r3, #0
 8010c68:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010c6a:	f107 030c 	add.w	r3, r7, #12
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7f9 fb2a 	bl	800a2c8 <HAL_RCCEx_PeriphCLKConfig>
 8010c74:	4603      	mov	r3, r0
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d001      	beq.n	8010c7e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8010c7a:	f7f1 fca1 	bl	80025c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8010cb4 <HAL_PCD_MspInit+0x74>)
 8010c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010c82:	4a0c      	ldr	r2, [pc, #48]	@ (8010cb4 <HAL_PCD_MspInit+0x74>)
 8010c84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010c88:	6593      	str	r3, [r2, #88]	@ 0x58
 8010c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8010cb4 <HAL_PCD_MspInit+0x74>)
 8010c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010c8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010c92:	60bb      	str	r3, [r7, #8]
 8010c94:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8010c96:	2200      	movs	r2, #0
 8010c98:	2100      	movs	r1, #0
 8010c9a:	2014      	movs	r0, #20
 8010c9c:	f7f4 fbc6 	bl	800542c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010ca0:	2014      	movs	r0, #20
 8010ca2:	f7f4 fbed 	bl	8005480 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010ca6:	bf00      	nop
 8010ca8:	3760      	adds	r7, #96	@ 0x60
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}
 8010cae:	bf00      	nop
 8010cb0:	40005c00 	.word	0x40005c00
 8010cb4:	40021000 	.word	0x40021000

08010cb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8010ccc:	4619      	mov	r1, r3
 8010cce:	4610      	mov	r0, r2
 8010cd0:	f7fe fd32 	bl	800f738 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010cd4:	bf00      	nop
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	460b      	mov	r3, r1
 8010ce6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010cee:	78fa      	ldrb	r2, [r7, #3]
 8010cf0:	6879      	ldr	r1, [r7, #4]
 8010cf2:	4613      	mov	r3, r2
 8010cf4:	009b      	lsls	r3, r3, #2
 8010cf6:	4413      	add	r3, r2
 8010cf8:	00db      	lsls	r3, r3, #3
 8010cfa:	440b      	add	r3, r1
 8010cfc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010d00:	681a      	ldr	r2, [r3, #0]
 8010d02:	78fb      	ldrb	r3, [r7, #3]
 8010d04:	4619      	mov	r1, r3
 8010d06:	f7fe fd6c 	bl	800f7e2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8010d0a:	bf00      	nop
 8010d0c:	3708      	adds	r7, #8
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}

08010d12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d12:	b580      	push	{r7, lr}
 8010d14:	b082      	sub	sp, #8
 8010d16:	af00      	add	r7, sp, #0
 8010d18:	6078      	str	r0, [r7, #4]
 8010d1a:	460b      	mov	r3, r1
 8010d1c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010d24:	78fa      	ldrb	r2, [r7, #3]
 8010d26:	6879      	ldr	r1, [r7, #4]
 8010d28:	4613      	mov	r3, r2
 8010d2a:	009b      	lsls	r3, r3, #2
 8010d2c:	4413      	add	r3, r2
 8010d2e:	00db      	lsls	r3, r3, #3
 8010d30:	440b      	add	r3, r1
 8010d32:	3324      	adds	r3, #36	@ 0x24
 8010d34:	681a      	ldr	r2, [r3, #0]
 8010d36:	78fb      	ldrb	r3, [r7, #3]
 8010d38:	4619      	mov	r1, r3
 8010d3a:	f7fe fdb5 	bl	800f8a8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8010d3e:	bf00      	nop
 8010d40:	3708      	adds	r7, #8
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}

08010d46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d46:	b580      	push	{r7, lr}
 8010d48:	b082      	sub	sp, #8
 8010d4a:	af00      	add	r7, sp, #0
 8010d4c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7fe fec9 	bl	800faec <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8010d5a:	bf00      	nop
 8010d5c:	3708      	adds	r7, #8
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}

08010d62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d62:	b580      	push	{r7, lr}
 8010d64:	b084      	sub	sp, #16
 8010d66:	af00      	add	r7, sp, #0
 8010d68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	795b      	ldrb	r3, [r3, #5]
 8010d72:	2b02      	cmp	r3, #2
 8010d74:	d001      	beq.n	8010d7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010d76:	f7f1 fc23 	bl	80025c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010d80:	7bfa      	ldrb	r2, [r7, #15]
 8010d82:	4611      	mov	r1, r2
 8010d84:	4618      	mov	r0, r3
 8010d86:	f7fe fe73 	bl	800fa70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7fe fe1f 	bl	800f9d4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8010d96:	bf00      	nop
 8010d98:	3710      	adds	r7, #16
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
	...

08010da0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7fe fe6e 	bl	800fa90 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	7a5b      	ldrb	r3, [r3, #9]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d005      	beq.n	8010dc8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010dbc:	4b04      	ldr	r3, [pc, #16]	@ (8010dd0 <HAL_PCD_SuspendCallback+0x30>)
 8010dbe:	691b      	ldr	r3, [r3, #16]
 8010dc0:	4a03      	ldr	r2, [pc, #12]	@ (8010dd0 <HAL_PCD_SuspendCallback+0x30>)
 8010dc2:	f043 0306 	orr.w	r3, r3, #6
 8010dc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8010dc8:	bf00      	nop
 8010dca:	3708      	adds	r7, #8
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	e000ed00 	.word	0xe000ed00

08010dd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b082      	sub	sp, #8
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	7a5b      	ldrb	r3, [r3, #9]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d007      	beq.n	8010df4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010de4:	4b08      	ldr	r3, [pc, #32]	@ (8010e08 <HAL_PCD_ResumeCallback+0x34>)
 8010de6:	691b      	ldr	r3, [r3, #16]
 8010de8:	4a07      	ldr	r2, [pc, #28]	@ (8010e08 <HAL_PCD_ResumeCallback+0x34>)
 8010dea:	f023 0306 	bic.w	r3, r3, #6
 8010dee:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010df0:	f000 f9f8 	bl	80111e4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7fe fe5e 	bl	800fabc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010e00:	bf00      	nop
 8010e02:	3708      	adds	r7, #8
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	e000ed00 	.word	0xe000ed00

08010e0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010e14:	4a2b      	ldr	r2, [pc, #172]	@ (8010ec4 <USBD_LL_Init+0xb8>)
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	4a29      	ldr	r2, [pc, #164]	@ (8010ec4 <USBD_LL_Init+0xb8>)
 8010e20:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010e24:	4b27      	ldr	r3, [pc, #156]	@ (8010ec4 <USBD_LL_Init+0xb8>)
 8010e26:	4a28      	ldr	r2, [pc, #160]	@ (8010ec8 <USBD_LL_Init+0xbc>)
 8010e28:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010e2a:	4b26      	ldr	r3, [pc, #152]	@ (8010ec4 <USBD_LL_Init+0xb8>)
 8010e2c:	2208      	movs	r2, #8
 8010e2e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010e30:	4b24      	ldr	r3, [pc, #144]	@ (8010ec4 <USBD_LL_Init+0xb8>)
 8010e32:	2202      	movs	r2, #2
 8010e34:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010e36:	4b23      	ldr	r3, [pc, #140]	@ (8010ec4 <USBD_LL_Init+0xb8>)
 8010e38:	2202      	movs	r2, #2
 8010e3a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010e3c:	4b21      	ldr	r3, [pc, #132]	@ (8010ec4 <USBD_LL_Init+0xb8>)
 8010e3e:	2200      	movs	r2, #0
 8010e40:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010e42:	4b20      	ldr	r3, [pc, #128]	@ (8010ec4 <USBD_LL_Init+0xb8>)
 8010e44:	2200      	movs	r2, #0
 8010e46:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010e48:	4b1e      	ldr	r3, [pc, #120]	@ (8010ec4 <USBD_LL_Init+0xb8>)
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8010ec4 <USBD_LL_Init+0xb8>)
 8010e50:	2200      	movs	r2, #0
 8010e52:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010e54:	481b      	ldr	r0, [pc, #108]	@ (8010ec4 <USBD_LL_Init+0xb8>)
 8010e56:	f7f6 fceb 	bl	8007830 <HAL_PCD_Init>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d001      	beq.n	8010e64 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8010e60:	f7f1 fbae 	bl	80025c0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010e6a:	2318      	movs	r3, #24
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	2100      	movs	r1, #0
 8010e70:	f7f8 f9b2 	bl	80091d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010e7a:	2358      	movs	r3, #88	@ 0x58
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	2180      	movs	r1, #128	@ 0x80
 8010e80:	f7f8 f9aa 	bl	80091d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010e8a:	23c0      	movs	r3, #192	@ 0xc0
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	2181      	movs	r1, #129	@ 0x81
 8010e90:	f7f8 f9a2 	bl	80091d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010e9a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	2101      	movs	r1, #1
 8010ea2:	f7f8 f999 	bl	80091d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	2182      	movs	r1, #130	@ 0x82
 8010eb4:	f7f8 f990 	bl	80091d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010eb8:	2300      	movs	r3, #0
}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	3708      	adds	r7, #8
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}
 8010ec2:	bf00      	nop
 8010ec4:	20002170 	.word	0x20002170
 8010ec8:	40005c00 	.word	0x40005c00

08010ecc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b084      	sub	sp, #16
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7f6 fd80 	bl	80079e8 <HAL_PCD_Start>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010eec:	7bfb      	ldrb	r3, [r7, #15]
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f000 f97e 	bl	80111f0 <USBD_Get_USB_Status>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ef8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010efa:	4618      	mov	r0, r3
 8010efc:	3710      	adds	r7, #16
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}

08010f02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010f02:	b580      	push	{r7, lr}
 8010f04:	b084      	sub	sp, #16
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	6078      	str	r0, [r7, #4]
 8010f0a:	4608      	mov	r0, r1
 8010f0c:	4611      	mov	r1, r2
 8010f0e:	461a      	mov	r2, r3
 8010f10:	4603      	mov	r3, r0
 8010f12:	70fb      	strb	r3, [r7, #3]
 8010f14:	460b      	mov	r3, r1
 8010f16:	70bb      	strb	r3, [r7, #2]
 8010f18:	4613      	mov	r3, r2
 8010f1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f20:	2300      	movs	r3, #0
 8010f22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010f2a:	78bb      	ldrb	r3, [r7, #2]
 8010f2c:	883a      	ldrh	r2, [r7, #0]
 8010f2e:	78f9      	ldrb	r1, [r7, #3]
 8010f30:	f7f6 fec7 	bl	8007cc2 <HAL_PCD_EP_Open>
 8010f34:	4603      	mov	r3, r0
 8010f36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f38:	7bfb      	ldrb	r3, [r7, #15]
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f000 f958 	bl	80111f0 <USBD_Get_USB_Status>
 8010f40:	4603      	mov	r3, r0
 8010f42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f44:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3710      	adds	r7, #16
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}

08010f4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f4e:	b580      	push	{r7, lr}
 8010f50:	b084      	sub	sp, #16
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
 8010f56:	460b      	mov	r3, r1
 8010f58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010f68:	78fa      	ldrb	r2, [r7, #3]
 8010f6a:	4611      	mov	r1, r2
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7f6 ff05 	bl	8007d7c <HAL_PCD_EP_Close>
 8010f72:	4603      	mov	r3, r0
 8010f74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f76:	7bfb      	ldrb	r3, [r7, #15]
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f000 f939 	bl	80111f0 <USBD_Get_USB_Status>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f82:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f84:	4618      	mov	r0, r3
 8010f86:	3710      	adds	r7, #16
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}

08010f8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	460b      	mov	r3, r1
 8010f96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010fa6:	78fa      	ldrb	r2, [r7, #3]
 8010fa8:	4611      	mov	r1, r2
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7f6 ffae 	bl	8007f0c <HAL_PCD_EP_SetStall>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fb4:	7bfb      	ldrb	r3, [r7, #15]
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f000 f91a 	bl	80111f0 <USBD_Get_USB_Status>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3710      	adds	r7, #16
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b084      	sub	sp, #16
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	6078      	str	r0, [r7, #4]
 8010fd2:	460b      	mov	r3, r1
 8010fd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010fe4:	78fa      	ldrb	r2, [r7, #3]
 8010fe6:	4611      	mov	r1, r2
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7f6 ffe1 	bl	8007fb0 <HAL_PCD_EP_ClrStall>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ff2:	7bfb      	ldrb	r3, [r7, #15]
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f000 f8fb 	bl	80111f0 <USBD_Get_USB_Status>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ffe:	7bbb      	ldrb	r3, [r7, #14]
}
 8011000:	4618      	mov	r0, r3
 8011002:	3710      	adds	r7, #16
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}

08011008 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011008:	b480      	push	{r7}
 801100a:	b085      	sub	sp, #20
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	460b      	mov	r3, r1
 8011012:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801101a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801101c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011020:	2b00      	cmp	r3, #0
 8011022:	da0b      	bge.n	801103c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011024:	78fb      	ldrb	r3, [r7, #3]
 8011026:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801102a:	68f9      	ldr	r1, [r7, #12]
 801102c:	4613      	mov	r3, r2
 801102e:	009b      	lsls	r3, r3, #2
 8011030:	4413      	add	r3, r2
 8011032:	00db      	lsls	r3, r3, #3
 8011034:	440b      	add	r3, r1
 8011036:	3312      	adds	r3, #18
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	e00b      	b.n	8011054 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801103c:	78fb      	ldrb	r3, [r7, #3]
 801103e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011042:	68f9      	ldr	r1, [r7, #12]
 8011044:	4613      	mov	r3, r2
 8011046:	009b      	lsls	r3, r3, #2
 8011048:	4413      	add	r3, r2
 801104a:	00db      	lsls	r3, r3, #3
 801104c:	440b      	add	r3, r1
 801104e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8011052:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011054:	4618      	mov	r0, r3
 8011056:	3714      	adds	r7, #20
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr

08011060 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b084      	sub	sp, #16
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	460b      	mov	r3, r1
 801106a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801106c:	2300      	movs	r3, #0
 801106e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011070:	2300      	movs	r3, #0
 8011072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801107a:	78fa      	ldrb	r2, [r7, #3]
 801107c:	4611      	mov	r1, r2
 801107e:	4618      	mov	r0, r3
 8011080:	f7f6 fdfb 	bl	8007c7a <HAL_PCD_SetAddress>
 8011084:	4603      	mov	r3, r0
 8011086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011088:	7bfb      	ldrb	r3, [r7, #15]
 801108a:	4618      	mov	r0, r3
 801108c:	f000 f8b0 	bl	80111f0 <USBD_Get_USB_Status>
 8011090:	4603      	mov	r3, r0
 8011092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011094:	7bbb      	ldrb	r3, [r7, #14]
}
 8011096:	4618      	mov	r0, r3
 8011098:	3710      	adds	r7, #16
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}

0801109e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801109e:	b580      	push	{r7, lr}
 80110a0:	b086      	sub	sp, #24
 80110a2:	af00      	add	r7, sp, #0
 80110a4:	60f8      	str	r0, [r7, #12]
 80110a6:	607a      	str	r2, [r7, #4]
 80110a8:	603b      	str	r3, [r7, #0]
 80110aa:	460b      	mov	r3, r1
 80110ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110ae:	2300      	movs	r3, #0
 80110b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110b2:	2300      	movs	r3, #0
 80110b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80110bc:	7af9      	ldrb	r1, [r7, #11]
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	687a      	ldr	r2, [r7, #4]
 80110c2:	f7f6 feec 	bl	8007e9e <HAL_PCD_EP_Transmit>
 80110c6:	4603      	mov	r3, r0
 80110c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110ca:	7dfb      	ldrb	r3, [r7, #23]
 80110cc:	4618      	mov	r0, r3
 80110ce:	f000 f88f 	bl	80111f0 <USBD_Get_USB_Status>
 80110d2:	4603      	mov	r3, r0
 80110d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80110d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3718      	adds	r7, #24
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}

080110e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b086      	sub	sp, #24
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	60f8      	str	r0, [r7, #12]
 80110e8:	607a      	str	r2, [r7, #4]
 80110ea:	603b      	str	r3, [r7, #0]
 80110ec:	460b      	mov	r3, r1
 80110ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110f0:	2300      	movs	r3, #0
 80110f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110f4:	2300      	movs	r3, #0
 80110f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80110fe:	7af9      	ldrb	r1, [r7, #11]
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	687a      	ldr	r2, [r7, #4]
 8011104:	f7f6 fe82 	bl	8007e0c <HAL_PCD_EP_Receive>
 8011108:	4603      	mov	r3, r0
 801110a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801110c:	7dfb      	ldrb	r3, [r7, #23]
 801110e:	4618      	mov	r0, r3
 8011110:	f000 f86e 	bl	80111f0 <USBD_Get_USB_Status>
 8011114:	4603      	mov	r3, r0
 8011116:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011118:	7dbb      	ldrb	r3, [r7, #22]
}
 801111a:	4618      	mov	r0, r3
 801111c:	3718      	adds	r7, #24
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}

08011122 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011122:	b580      	push	{r7, lr}
 8011124:	b082      	sub	sp, #8
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
 801112a:	460b      	mov	r3, r1
 801112c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8011134:	78fa      	ldrb	r2, [r7, #3]
 8011136:	4611      	mov	r1, r2
 8011138:	4618      	mov	r0, r3
 801113a:	f7f6 fe98 	bl	8007e6e <HAL_PCD_EP_GetRxCount>
 801113e:	4603      	mov	r3, r0
}
 8011140:	4618      	mov	r0, r3
 8011142:	3708      	adds	r7, #8
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}

08011148 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b082      	sub	sp, #8
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	460b      	mov	r3, r1
 8011152:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011154:	78fb      	ldrb	r3, [r7, #3]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d002      	beq.n	8011160 <HAL_PCDEx_LPM_Callback+0x18>
 801115a:	2b01      	cmp	r3, #1
 801115c:	d013      	beq.n	8011186 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801115e:	e023      	b.n	80111a8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	7a5b      	ldrb	r3, [r3, #9]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d007      	beq.n	8011178 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011168:	f000 f83c 	bl	80111e4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801116c:	4b10      	ldr	r3, [pc, #64]	@ (80111b0 <HAL_PCDEx_LPM_Callback+0x68>)
 801116e:	691b      	ldr	r3, [r3, #16]
 8011170:	4a0f      	ldr	r2, [pc, #60]	@ (80111b0 <HAL_PCDEx_LPM_Callback+0x68>)
 8011172:	f023 0306 	bic.w	r3, r3, #6
 8011176:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801117e:	4618      	mov	r0, r3
 8011180:	f7fe fc9c 	bl	800fabc <USBD_LL_Resume>
    break;
 8011184:	e010      	b.n	80111a8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801118c:	4618      	mov	r0, r3
 801118e:	f7fe fc7f 	bl	800fa90 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	7a5b      	ldrb	r3, [r3, #9]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d005      	beq.n	80111a6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801119a:	4b05      	ldr	r3, [pc, #20]	@ (80111b0 <HAL_PCDEx_LPM_Callback+0x68>)
 801119c:	691b      	ldr	r3, [r3, #16]
 801119e:	4a04      	ldr	r2, [pc, #16]	@ (80111b0 <HAL_PCDEx_LPM_Callback+0x68>)
 80111a0:	f043 0306 	orr.w	r3, r3, #6
 80111a4:	6113      	str	r3, [r2, #16]
    break;
 80111a6:	bf00      	nop
}
 80111a8:	bf00      	nop
 80111aa:	3708      	adds	r7, #8
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}
 80111b0:	e000ed00 	.word	0xe000ed00

080111b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80111b4:	b480      	push	{r7}
 80111b6:	b083      	sub	sp, #12
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80111bc:	4b03      	ldr	r3, [pc, #12]	@ (80111cc <USBD_static_malloc+0x18>)
}
 80111be:	4618      	mov	r0, r3
 80111c0:	370c      	adds	r7, #12
 80111c2:	46bd      	mov	sp, r7
 80111c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c8:	4770      	bx	lr
 80111ca:	bf00      	nop
 80111cc:	2000244c 	.word	0x2000244c

080111d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80111d0:	b480      	push	{r7}
 80111d2:	b083      	sub	sp, #12
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]

}
 80111d8:	bf00      	nop
 80111da:	370c      	adds	r7, #12
 80111dc:	46bd      	mov	sp, r7
 80111de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e2:	4770      	bx	lr

080111e4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80111e8:	f7f0 ff22 	bl	8002030 <SystemClock_Config>
}
 80111ec:	bf00      	nop
 80111ee:	bd80      	pop	{r7, pc}

080111f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80111f0:	b480      	push	{r7}
 80111f2:	b085      	sub	sp, #20
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	4603      	mov	r3, r0
 80111f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111fa:	2300      	movs	r3, #0
 80111fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80111fe:	79fb      	ldrb	r3, [r7, #7]
 8011200:	2b03      	cmp	r3, #3
 8011202:	d817      	bhi.n	8011234 <USBD_Get_USB_Status+0x44>
 8011204:	a201      	add	r2, pc, #4	@ (adr r2, 801120c <USBD_Get_USB_Status+0x1c>)
 8011206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801120a:	bf00      	nop
 801120c:	0801121d 	.word	0x0801121d
 8011210:	08011223 	.word	0x08011223
 8011214:	08011229 	.word	0x08011229
 8011218:	0801122f 	.word	0x0801122f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801121c:	2300      	movs	r3, #0
 801121e:	73fb      	strb	r3, [r7, #15]
    break;
 8011220:	e00b      	b.n	801123a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011222:	2303      	movs	r3, #3
 8011224:	73fb      	strb	r3, [r7, #15]
    break;
 8011226:	e008      	b.n	801123a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011228:	2301      	movs	r3, #1
 801122a:	73fb      	strb	r3, [r7, #15]
    break;
 801122c:	e005      	b.n	801123a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801122e:	2303      	movs	r3, #3
 8011230:	73fb      	strb	r3, [r7, #15]
    break;
 8011232:	e002      	b.n	801123a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011234:	2303      	movs	r3, #3
 8011236:	73fb      	strb	r3, [r7, #15]
    break;
 8011238:	bf00      	nop
  }
  return usb_status;
 801123a:	7bfb      	ldrb	r3, [r7, #15]
}
 801123c:	4618      	mov	r0, r3
 801123e:	3714      	adds	r7, #20
 8011240:	46bd      	mov	sp, r7
 8011242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011246:	4770      	bx	lr

08011248 <sinf>:
 8011248:	ee10 3a10 	vmov	r3, s0
 801124c:	b507      	push	{r0, r1, r2, lr}
 801124e:	4a1f      	ldr	r2, [pc, #124]	@ (80112cc <sinf+0x84>)
 8011250:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011254:	4293      	cmp	r3, r2
 8011256:	d807      	bhi.n	8011268 <sinf+0x20>
 8011258:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80112d0 <sinf+0x88>
 801125c:	2000      	movs	r0, #0
 801125e:	b003      	add	sp, #12
 8011260:	f85d eb04 	ldr.w	lr, [sp], #4
 8011264:	f000 b88e 	b.w	8011384 <__kernel_sinf>
 8011268:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801126c:	d304      	bcc.n	8011278 <sinf+0x30>
 801126e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011272:	b003      	add	sp, #12
 8011274:	f85d fb04 	ldr.w	pc, [sp], #4
 8011278:	4668      	mov	r0, sp
 801127a:	f000 f8cb 	bl	8011414 <__ieee754_rem_pio2f>
 801127e:	f000 0003 	and.w	r0, r0, #3
 8011282:	2801      	cmp	r0, #1
 8011284:	d00a      	beq.n	801129c <sinf+0x54>
 8011286:	2802      	cmp	r0, #2
 8011288:	d00f      	beq.n	80112aa <sinf+0x62>
 801128a:	b9c0      	cbnz	r0, 80112be <sinf+0x76>
 801128c:	eddd 0a01 	vldr	s1, [sp, #4]
 8011290:	ed9d 0a00 	vldr	s0, [sp]
 8011294:	2001      	movs	r0, #1
 8011296:	f000 f875 	bl	8011384 <__kernel_sinf>
 801129a:	e7ea      	b.n	8011272 <sinf+0x2a>
 801129c:	eddd 0a01 	vldr	s1, [sp, #4]
 80112a0:	ed9d 0a00 	vldr	s0, [sp]
 80112a4:	f000 f816 	bl	80112d4 <__kernel_cosf>
 80112a8:	e7e3      	b.n	8011272 <sinf+0x2a>
 80112aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80112ae:	ed9d 0a00 	vldr	s0, [sp]
 80112b2:	2001      	movs	r0, #1
 80112b4:	f000 f866 	bl	8011384 <__kernel_sinf>
 80112b8:	eeb1 0a40 	vneg.f32	s0, s0
 80112bc:	e7d9      	b.n	8011272 <sinf+0x2a>
 80112be:	eddd 0a01 	vldr	s1, [sp, #4]
 80112c2:	ed9d 0a00 	vldr	s0, [sp]
 80112c6:	f000 f805 	bl	80112d4 <__kernel_cosf>
 80112ca:	e7f5      	b.n	80112b8 <sinf+0x70>
 80112cc:	3f490fd8 	.word	0x3f490fd8
 80112d0:	00000000 	.word	0x00000000

080112d4 <__kernel_cosf>:
 80112d4:	ee10 3a10 	vmov	r3, s0
 80112d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80112dc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80112e0:	eef0 6a40 	vmov.f32	s13, s0
 80112e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80112e8:	d204      	bcs.n	80112f4 <__kernel_cosf+0x20>
 80112ea:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80112ee:	ee17 2a90 	vmov	r2, s15
 80112f2:	b342      	cbz	r2, 8011346 <__kernel_cosf+0x72>
 80112f4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80112f8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8011364 <__kernel_cosf+0x90>
 80112fc:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8011368 <__kernel_cosf+0x94>
 8011300:	4a1a      	ldr	r2, [pc, #104]	@ (801136c <__kernel_cosf+0x98>)
 8011302:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011306:	4293      	cmp	r3, r2
 8011308:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011370 <__kernel_cosf+0x9c>
 801130c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011310:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8011374 <__kernel_cosf+0xa0>
 8011314:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011318:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8011378 <__kernel_cosf+0xa4>
 801131c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011320:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801137c <__kernel_cosf+0xa8>
 8011324:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011328:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801132c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8011330:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011334:	eee7 0a06 	vfma.f32	s1, s14, s12
 8011338:	ee67 7a27 	vmul.f32	s15, s14, s15
 801133c:	d804      	bhi.n	8011348 <__kernel_cosf+0x74>
 801133e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011342:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011346:	4770      	bx	lr
 8011348:	4a0d      	ldr	r2, [pc, #52]	@ (8011380 <__kernel_cosf+0xac>)
 801134a:	4293      	cmp	r3, r2
 801134c:	bf9a      	itte	ls
 801134e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8011352:	ee07 3a10 	vmovls	s14, r3
 8011356:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801135a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801135e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011362:	e7ec      	b.n	801133e <__kernel_cosf+0x6a>
 8011364:	ad47d74e 	.word	0xad47d74e
 8011368:	310f74f6 	.word	0x310f74f6
 801136c:	3e999999 	.word	0x3e999999
 8011370:	b493f27c 	.word	0xb493f27c
 8011374:	37d00d01 	.word	0x37d00d01
 8011378:	bab60b61 	.word	0xbab60b61
 801137c:	3d2aaaab 	.word	0x3d2aaaab
 8011380:	3f480000 	.word	0x3f480000

08011384 <__kernel_sinf>:
 8011384:	ee10 3a10 	vmov	r3, s0
 8011388:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801138c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011390:	d204      	bcs.n	801139c <__kernel_sinf+0x18>
 8011392:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011396:	ee17 3a90 	vmov	r3, s15
 801139a:	b35b      	cbz	r3, 80113f4 <__kernel_sinf+0x70>
 801139c:	ee20 7a00 	vmul.f32	s14, s0, s0
 80113a0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80113f8 <__kernel_sinf+0x74>
 80113a4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80113fc <__kernel_sinf+0x78>
 80113a8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80113ac:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8011400 <__kernel_sinf+0x7c>
 80113b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80113b4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8011404 <__kernel_sinf+0x80>
 80113b8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80113bc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8011408 <__kernel_sinf+0x84>
 80113c0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80113c4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80113c8:	b930      	cbnz	r0, 80113d8 <__kernel_sinf+0x54>
 80113ca:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801140c <__kernel_sinf+0x88>
 80113ce:	eea7 6a27 	vfma.f32	s12, s14, s15
 80113d2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80113d6:	4770      	bx	lr
 80113d8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80113dc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80113e0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80113e4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80113e8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8011410 <__kernel_sinf+0x8c>
 80113ec:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80113f0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80113f4:	4770      	bx	lr
 80113f6:	bf00      	nop
 80113f8:	2f2ec9d3 	.word	0x2f2ec9d3
 80113fc:	b2d72f34 	.word	0xb2d72f34
 8011400:	3638ef1b 	.word	0x3638ef1b
 8011404:	b9500d01 	.word	0xb9500d01
 8011408:	3c088889 	.word	0x3c088889
 801140c:	be2aaaab 	.word	0xbe2aaaab
 8011410:	3e2aaaab 	.word	0x3e2aaaab

08011414 <__ieee754_rem_pio2f>:
 8011414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011416:	ee10 6a10 	vmov	r6, s0
 801141a:	4b88      	ldr	r3, [pc, #544]	@ (801163c <__ieee754_rem_pio2f+0x228>)
 801141c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8011420:	429d      	cmp	r5, r3
 8011422:	b087      	sub	sp, #28
 8011424:	4604      	mov	r4, r0
 8011426:	d805      	bhi.n	8011434 <__ieee754_rem_pio2f+0x20>
 8011428:	2300      	movs	r3, #0
 801142a:	ed80 0a00 	vstr	s0, [r0]
 801142e:	6043      	str	r3, [r0, #4]
 8011430:	2000      	movs	r0, #0
 8011432:	e022      	b.n	801147a <__ieee754_rem_pio2f+0x66>
 8011434:	4b82      	ldr	r3, [pc, #520]	@ (8011640 <__ieee754_rem_pio2f+0x22c>)
 8011436:	429d      	cmp	r5, r3
 8011438:	d83a      	bhi.n	80114b0 <__ieee754_rem_pio2f+0x9c>
 801143a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801143e:	2e00      	cmp	r6, #0
 8011440:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8011644 <__ieee754_rem_pio2f+0x230>
 8011444:	4a80      	ldr	r2, [pc, #512]	@ (8011648 <__ieee754_rem_pio2f+0x234>)
 8011446:	f023 030f 	bic.w	r3, r3, #15
 801144a:	dd18      	ble.n	801147e <__ieee754_rem_pio2f+0x6a>
 801144c:	4293      	cmp	r3, r2
 801144e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8011452:	bf09      	itett	eq
 8011454:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801164c <__ieee754_rem_pio2f+0x238>
 8011458:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8011650 <__ieee754_rem_pio2f+0x23c>
 801145c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8011654 <__ieee754_rem_pio2f+0x240>
 8011460:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8011464:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8011468:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801146c:	ed80 7a00 	vstr	s14, [r0]
 8011470:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011474:	edc0 7a01 	vstr	s15, [r0, #4]
 8011478:	2001      	movs	r0, #1
 801147a:	b007      	add	sp, #28
 801147c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801147e:	4293      	cmp	r3, r2
 8011480:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011484:	bf09      	itett	eq
 8011486:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801164c <__ieee754_rem_pio2f+0x238>
 801148a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8011650 <__ieee754_rem_pio2f+0x23c>
 801148e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8011654 <__ieee754_rem_pio2f+0x240>
 8011492:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8011496:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801149a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801149e:	ed80 7a00 	vstr	s14, [r0]
 80114a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114a6:	edc0 7a01 	vstr	s15, [r0, #4]
 80114aa:	f04f 30ff 	mov.w	r0, #4294967295
 80114ae:	e7e4      	b.n	801147a <__ieee754_rem_pio2f+0x66>
 80114b0:	4b69      	ldr	r3, [pc, #420]	@ (8011658 <__ieee754_rem_pio2f+0x244>)
 80114b2:	429d      	cmp	r5, r3
 80114b4:	d873      	bhi.n	801159e <__ieee754_rem_pio2f+0x18a>
 80114b6:	f000 f8dd 	bl	8011674 <fabsf>
 80114ba:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801165c <__ieee754_rem_pio2f+0x248>
 80114be:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80114c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80114c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80114ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80114ce:	ee17 0a90 	vmov	r0, s15
 80114d2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011644 <__ieee754_rem_pio2f+0x230>
 80114d6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80114da:	281f      	cmp	r0, #31
 80114dc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011650 <__ieee754_rem_pio2f+0x23c>
 80114e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114e4:	eeb1 6a47 	vneg.f32	s12, s14
 80114e8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80114ec:	ee16 1a90 	vmov	r1, s13
 80114f0:	dc09      	bgt.n	8011506 <__ieee754_rem_pio2f+0xf2>
 80114f2:	4a5b      	ldr	r2, [pc, #364]	@ (8011660 <__ieee754_rem_pio2f+0x24c>)
 80114f4:	1e47      	subs	r7, r0, #1
 80114f6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80114fa:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80114fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011502:	4293      	cmp	r3, r2
 8011504:	d107      	bne.n	8011516 <__ieee754_rem_pio2f+0x102>
 8011506:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801150a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801150e:	2a08      	cmp	r2, #8
 8011510:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8011514:	dc14      	bgt.n	8011540 <__ieee754_rem_pio2f+0x12c>
 8011516:	6021      	str	r1, [r4, #0]
 8011518:	ed94 7a00 	vldr	s14, [r4]
 801151c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011520:	2e00      	cmp	r6, #0
 8011522:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011526:	ed84 0a01 	vstr	s0, [r4, #4]
 801152a:	daa6      	bge.n	801147a <__ieee754_rem_pio2f+0x66>
 801152c:	eeb1 7a47 	vneg.f32	s14, s14
 8011530:	eeb1 0a40 	vneg.f32	s0, s0
 8011534:	ed84 7a00 	vstr	s14, [r4]
 8011538:	ed84 0a01 	vstr	s0, [r4, #4]
 801153c:	4240      	negs	r0, r0
 801153e:	e79c      	b.n	801147a <__ieee754_rem_pio2f+0x66>
 8011540:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801164c <__ieee754_rem_pio2f+0x238>
 8011544:	eef0 6a40 	vmov.f32	s13, s0
 8011548:	eee6 6a25 	vfma.f32	s13, s12, s11
 801154c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011550:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011554:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011654 <__ieee754_rem_pio2f+0x240>
 8011558:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801155c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011560:	ee15 2a90 	vmov	r2, s11
 8011564:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011568:	1a5b      	subs	r3, r3, r1
 801156a:	2b19      	cmp	r3, #25
 801156c:	dc04      	bgt.n	8011578 <__ieee754_rem_pio2f+0x164>
 801156e:	edc4 5a00 	vstr	s11, [r4]
 8011572:	eeb0 0a66 	vmov.f32	s0, s13
 8011576:	e7cf      	b.n	8011518 <__ieee754_rem_pio2f+0x104>
 8011578:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8011664 <__ieee754_rem_pio2f+0x250>
 801157c:	eeb0 0a66 	vmov.f32	s0, s13
 8011580:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011584:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011588:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011668 <__ieee754_rem_pio2f+0x254>
 801158c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011590:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011594:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011598:	ed84 7a00 	vstr	s14, [r4]
 801159c:	e7bc      	b.n	8011518 <__ieee754_rem_pio2f+0x104>
 801159e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80115a2:	d306      	bcc.n	80115b2 <__ieee754_rem_pio2f+0x19e>
 80115a4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80115a8:	edc0 7a01 	vstr	s15, [r0, #4]
 80115ac:	edc0 7a00 	vstr	s15, [r0]
 80115b0:	e73e      	b.n	8011430 <__ieee754_rem_pio2f+0x1c>
 80115b2:	15ea      	asrs	r2, r5, #23
 80115b4:	3a86      	subs	r2, #134	@ 0x86
 80115b6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80115ba:	ee07 3a90 	vmov	s15, r3
 80115be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80115c2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801166c <__ieee754_rem_pio2f+0x258>
 80115c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80115ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80115ce:	ed8d 7a03 	vstr	s14, [sp, #12]
 80115d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80115d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80115da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80115de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80115e2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80115e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80115ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80115ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115f2:	edcd 7a05 	vstr	s15, [sp, #20]
 80115f6:	d11e      	bne.n	8011636 <__ieee754_rem_pio2f+0x222>
 80115f8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80115fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011600:	bf0c      	ite	eq
 8011602:	2301      	moveq	r3, #1
 8011604:	2302      	movne	r3, #2
 8011606:	491a      	ldr	r1, [pc, #104]	@ (8011670 <__ieee754_rem_pio2f+0x25c>)
 8011608:	9101      	str	r1, [sp, #4]
 801160a:	2102      	movs	r1, #2
 801160c:	9100      	str	r1, [sp, #0]
 801160e:	a803      	add	r0, sp, #12
 8011610:	4621      	mov	r1, r4
 8011612:	f000 f89d 	bl	8011750 <__kernel_rem_pio2f>
 8011616:	2e00      	cmp	r6, #0
 8011618:	f6bf af2f 	bge.w	801147a <__ieee754_rem_pio2f+0x66>
 801161c:	edd4 7a00 	vldr	s15, [r4]
 8011620:	eef1 7a67 	vneg.f32	s15, s15
 8011624:	edc4 7a00 	vstr	s15, [r4]
 8011628:	edd4 7a01 	vldr	s15, [r4, #4]
 801162c:	eef1 7a67 	vneg.f32	s15, s15
 8011630:	edc4 7a01 	vstr	s15, [r4, #4]
 8011634:	e782      	b.n	801153c <__ieee754_rem_pio2f+0x128>
 8011636:	2303      	movs	r3, #3
 8011638:	e7e5      	b.n	8011606 <__ieee754_rem_pio2f+0x1f2>
 801163a:	bf00      	nop
 801163c:	3f490fd8 	.word	0x3f490fd8
 8011640:	4016cbe3 	.word	0x4016cbe3
 8011644:	3fc90f80 	.word	0x3fc90f80
 8011648:	3fc90fd0 	.word	0x3fc90fd0
 801164c:	37354400 	.word	0x37354400
 8011650:	37354443 	.word	0x37354443
 8011654:	2e85a308 	.word	0x2e85a308
 8011658:	43490f80 	.word	0x43490f80
 801165c:	3f22f984 	.word	0x3f22f984
 8011660:	08013474 	.word	0x08013474
 8011664:	2e85a300 	.word	0x2e85a300
 8011668:	248d3132 	.word	0x248d3132
 801166c:	43800000 	.word	0x43800000
 8011670:	080134f4 	.word	0x080134f4

08011674 <fabsf>:
 8011674:	ee10 3a10 	vmov	r3, s0
 8011678:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801167c:	ee00 3a10 	vmov	s0, r3
 8011680:	4770      	bx	lr
	...

08011684 <scalbnf>:
 8011684:	ee10 3a10 	vmov	r3, s0
 8011688:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801168c:	d02b      	beq.n	80116e6 <scalbnf+0x62>
 801168e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011692:	d302      	bcc.n	801169a <scalbnf+0x16>
 8011694:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011698:	4770      	bx	lr
 801169a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801169e:	d123      	bne.n	80116e8 <scalbnf+0x64>
 80116a0:	4b24      	ldr	r3, [pc, #144]	@ (8011734 <scalbnf+0xb0>)
 80116a2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011738 <scalbnf+0xb4>
 80116a6:	4298      	cmp	r0, r3
 80116a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80116ac:	db17      	blt.n	80116de <scalbnf+0x5a>
 80116ae:	ee10 3a10 	vmov	r3, s0
 80116b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80116b6:	3a19      	subs	r2, #25
 80116b8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80116bc:	4288      	cmp	r0, r1
 80116be:	dd15      	ble.n	80116ec <scalbnf+0x68>
 80116c0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801173c <scalbnf+0xb8>
 80116c4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011740 <scalbnf+0xbc>
 80116c8:	ee10 3a10 	vmov	r3, s0
 80116cc:	eeb0 7a67 	vmov.f32	s14, s15
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	bfb8      	it	lt
 80116d4:	eef0 7a66 	vmovlt.f32	s15, s13
 80116d8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80116dc:	4770      	bx	lr
 80116de:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011744 <scalbnf+0xc0>
 80116e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80116e6:	4770      	bx	lr
 80116e8:	0dd2      	lsrs	r2, r2, #23
 80116ea:	e7e5      	b.n	80116b8 <scalbnf+0x34>
 80116ec:	4410      	add	r0, r2
 80116ee:	28fe      	cmp	r0, #254	@ 0xfe
 80116f0:	dce6      	bgt.n	80116c0 <scalbnf+0x3c>
 80116f2:	2800      	cmp	r0, #0
 80116f4:	dd06      	ble.n	8011704 <scalbnf+0x80>
 80116f6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80116fa:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80116fe:	ee00 3a10 	vmov	s0, r3
 8011702:	4770      	bx	lr
 8011704:	f110 0f16 	cmn.w	r0, #22
 8011708:	da09      	bge.n	801171e <scalbnf+0x9a>
 801170a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011744 <scalbnf+0xc0>
 801170e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011748 <scalbnf+0xc4>
 8011712:	ee10 3a10 	vmov	r3, s0
 8011716:	eeb0 7a67 	vmov.f32	s14, s15
 801171a:	2b00      	cmp	r3, #0
 801171c:	e7d9      	b.n	80116d2 <scalbnf+0x4e>
 801171e:	3019      	adds	r0, #25
 8011720:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011724:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011728:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801174c <scalbnf+0xc8>
 801172c:	ee07 3a90 	vmov	s15, r3
 8011730:	e7d7      	b.n	80116e2 <scalbnf+0x5e>
 8011732:	bf00      	nop
 8011734:	ffff3cb0 	.word	0xffff3cb0
 8011738:	4c000000 	.word	0x4c000000
 801173c:	7149f2ca 	.word	0x7149f2ca
 8011740:	f149f2ca 	.word	0xf149f2ca
 8011744:	0da24260 	.word	0x0da24260
 8011748:	8da24260 	.word	0x8da24260
 801174c:	33000000 	.word	0x33000000

08011750 <__kernel_rem_pio2f>:
 8011750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011754:	ed2d 8b04 	vpush	{d8-d9}
 8011758:	b0d9      	sub	sp, #356	@ 0x164
 801175a:	4690      	mov	r8, r2
 801175c:	9001      	str	r0, [sp, #4]
 801175e:	4ab9      	ldr	r2, [pc, #740]	@ (8011a44 <__kernel_rem_pio2f+0x2f4>)
 8011760:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8011762:	f118 0f04 	cmn.w	r8, #4
 8011766:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801176a:	460f      	mov	r7, r1
 801176c:	f103 3bff 	add.w	fp, r3, #4294967295
 8011770:	db27      	blt.n	80117c2 <__kernel_rem_pio2f+0x72>
 8011772:	f1b8 0203 	subs.w	r2, r8, #3
 8011776:	bf48      	it	mi
 8011778:	f108 0204 	addmi.w	r2, r8, #4
 801177c:	10d2      	asrs	r2, r2, #3
 801177e:	1c55      	adds	r5, r2, #1
 8011780:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8011782:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8011a54 <__kernel_rem_pio2f+0x304>
 8011786:	00e8      	lsls	r0, r5, #3
 8011788:	eba2 060b 	sub.w	r6, r2, fp
 801178c:	9002      	str	r0, [sp, #8]
 801178e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8011792:	eb0a 0c0b 	add.w	ip, sl, fp
 8011796:	ac1c      	add	r4, sp, #112	@ 0x70
 8011798:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801179c:	2000      	movs	r0, #0
 801179e:	4560      	cmp	r0, ip
 80117a0:	dd11      	ble.n	80117c6 <__kernel_rem_pio2f+0x76>
 80117a2:	a91c      	add	r1, sp, #112	@ 0x70
 80117a4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80117a8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80117ac:	f04f 0c00 	mov.w	ip, #0
 80117b0:	45d4      	cmp	ip, sl
 80117b2:	dc27      	bgt.n	8011804 <__kernel_rem_pio2f+0xb4>
 80117b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80117b8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8011a54 <__kernel_rem_pio2f+0x304>
 80117bc:	4606      	mov	r6, r0
 80117be:	2400      	movs	r4, #0
 80117c0:	e016      	b.n	80117f0 <__kernel_rem_pio2f+0xa0>
 80117c2:	2200      	movs	r2, #0
 80117c4:	e7db      	b.n	801177e <__kernel_rem_pio2f+0x2e>
 80117c6:	42c6      	cmn	r6, r0
 80117c8:	bf5d      	ittte	pl
 80117ca:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80117ce:	ee07 1a90 	vmovpl	s15, r1
 80117d2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80117d6:	eef0 7a47 	vmovmi.f32	s15, s14
 80117da:	ece4 7a01 	vstmia	r4!, {s15}
 80117de:	3001      	adds	r0, #1
 80117e0:	e7dd      	b.n	801179e <__kernel_rem_pio2f+0x4e>
 80117e2:	ecfe 6a01 	vldmia	lr!, {s13}
 80117e6:	ed96 7a00 	vldr	s14, [r6]
 80117ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 80117ee:	3401      	adds	r4, #1
 80117f0:	455c      	cmp	r4, fp
 80117f2:	f1a6 0604 	sub.w	r6, r6, #4
 80117f6:	ddf4      	ble.n	80117e2 <__kernel_rem_pio2f+0x92>
 80117f8:	ece9 7a01 	vstmia	r9!, {s15}
 80117fc:	f10c 0c01 	add.w	ip, ip, #1
 8011800:	3004      	adds	r0, #4
 8011802:	e7d5      	b.n	80117b0 <__kernel_rem_pio2f+0x60>
 8011804:	a908      	add	r1, sp, #32
 8011806:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801180a:	9104      	str	r1, [sp, #16]
 801180c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801180e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8011a50 <__kernel_rem_pio2f+0x300>
 8011812:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8011a4c <__kernel_rem_pio2f+0x2fc>
 8011816:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801181a:	9203      	str	r2, [sp, #12]
 801181c:	4654      	mov	r4, sl
 801181e:	00a2      	lsls	r2, r4, #2
 8011820:	9205      	str	r2, [sp, #20]
 8011822:	aa58      	add	r2, sp, #352	@ 0x160
 8011824:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8011828:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801182c:	a944      	add	r1, sp, #272	@ 0x110
 801182e:	aa08      	add	r2, sp, #32
 8011830:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8011834:	4694      	mov	ip, r2
 8011836:	4626      	mov	r6, r4
 8011838:	2e00      	cmp	r6, #0
 801183a:	f1a0 0004 	sub.w	r0, r0, #4
 801183e:	dc4c      	bgt.n	80118da <__kernel_rem_pio2f+0x18a>
 8011840:	4628      	mov	r0, r5
 8011842:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011846:	f7ff ff1d 	bl	8011684 <scalbnf>
 801184a:	eeb0 8a40 	vmov.f32	s16, s0
 801184e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8011852:	ee28 0a00 	vmul.f32	s0, s16, s0
 8011856:	f000 f9ed 	bl	8011c34 <floorf>
 801185a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801185e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011862:	2d00      	cmp	r5, #0
 8011864:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011868:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801186c:	ee17 9a90 	vmov	r9, s15
 8011870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011874:	ee38 8a67 	vsub.f32	s16, s16, s15
 8011878:	dd41      	ble.n	80118fe <__kernel_rem_pio2f+0x1ae>
 801187a:	f104 3cff 	add.w	ip, r4, #4294967295
 801187e:	a908      	add	r1, sp, #32
 8011880:	f1c5 0e08 	rsb	lr, r5, #8
 8011884:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8011888:	fa46 f00e 	asr.w	r0, r6, lr
 801188c:	4481      	add	r9, r0
 801188e:	fa00 f00e 	lsl.w	r0, r0, lr
 8011892:	1a36      	subs	r6, r6, r0
 8011894:	f1c5 0007 	rsb	r0, r5, #7
 8011898:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801189c:	4106      	asrs	r6, r0
 801189e:	2e00      	cmp	r6, #0
 80118a0:	dd3c      	ble.n	801191c <__kernel_rem_pio2f+0x1cc>
 80118a2:	f04f 0e00 	mov.w	lr, #0
 80118a6:	f109 0901 	add.w	r9, r9, #1
 80118aa:	4670      	mov	r0, lr
 80118ac:	4574      	cmp	r4, lr
 80118ae:	dc68      	bgt.n	8011982 <__kernel_rem_pio2f+0x232>
 80118b0:	2d00      	cmp	r5, #0
 80118b2:	dd03      	ble.n	80118bc <__kernel_rem_pio2f+0x16c>
 80118b4:	2d01      	cmp	r5, #1
 80118b6:	d074      	beq.n	80119a2 <__kernel_rem_pio2f+0x252>
 80118b8:	2d02      	cmp	r5, #2
 80118ba:	d07d      	beq.n	80119b8 <__kernel_rem_pio2f+0x268>
 80118bc:	2e02      	cmp	r6, #2
 80118be:	d12d      	bne.n	801191c <__kernel_rem_pio2f+0x1cc>
 80118c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80118c4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80118c8:	b340      	cbz	r0, 801191c <__kernel_rem_pio2f+0x1cc>
 80118ca:	4628      	mov	r0, r5
 80118cc:	9306      	str	r3, [sp, #24]
 80118ce:	f7ff fed9 	bl	8011684 <scalbnf>
 80118d2:	9b06      	ldr	r3, [sp, #24]
 80118d4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80118d8:	e020      	b.n	801191c <__kernel_rem_pio2f+0x1cc>
 80118da:	ee60 7a28 	vmul.f32	s15, s0, s17
 80118de:	3e01      	subs	r6, #1
 80118e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118e8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80118ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80118f0:	ecac 0a01 	vstmia	ip!, {s0}
 80118f4:	ed90 0a00 	vldr	s0, [r0]
 80118f8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80118fc:	e79c      	b.n	8011838 <__kernel_rem_pio2f+0xe8>
 80118fe:	d105      	bne.n	801190c <__kernel_rem_pio2f+0x1bc>
 8011900:	1e60      	subs	r0, r4, #1
 8011902:	a908      	add	r1, sp, #32
 8011904:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8011908:	11f6      	asrs	r6, r6, #7
 801190a:	e7c8      	b.n	801189e <__kernel_rem_pio2f+0x14e>
 801190c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011910:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011918:	da31      	bge.n	801197e <__kernel_rem_pio2f+0x22e>
 801191a:	2600      	movs	r6, #0
 801191c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011924:	f040 8098 	bne.w	8011a58 <__kernel_rem_pio2f+0x308>
 8011928:	1e60      	subs	r0, r4, #1
 801192a:	2200      	movs	r2, #0
 801192c:	4550      	cmp	r0, sl
 801192e:	da4b      	bge.n	80119c8 <__kernel_rem_pio2f+0x278>
 8011930:	2a00      	cmp	r2, #0
 8011932:	d065      	beq.n	8011a00 <__kernel_rem_pio2f+0x2b0>
 8011934:	3c01      	subs	r4, #1
 8011936:	ab08      	add	r3, sp, #32
 8011938:	3d08      	subs	r5, #8
 801193a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d0f8      	beq.n	8011934 <__kernel_rem_pio2f+0x1e4>
 8011942:	4628      	mov	r0, r5
 8011944:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011948:	f7ff fe9c 	bl	8011684 <scalbnf>
 801194c:	1c63      	adds	r3, r4, #1
 801194e:	aa44      	add	r2, sp, #272	@ 0x110
 8011950:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8011a50 <__kernel_rem_pio2f+0x300>
 8011954:	0099      	lsls	r1, r3, #2
 8011956:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801195a:	4623      	mov	r3, r4
 801195c:	2b00      	cmp	r3, #0
 801195e:	f280 80a9 	bge.w	8011ab4 <__kernel_rem_pio2f+0x364>
 8011962:	4623      	mov	r3, r4
 8011964:	2b00      	cmp	r3, #0
 8011966:	f2c0 80c7 	blt.w	8011af8 <__kernel_rem_pio2f+0x3a8>
 801196a:	aa44      	add	r2, sp, #272	@ 0x110
 801196c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8011970:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8011a48 <__kernel_rem_pio2f+0x2f8>
 8011974:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8011a54 <__kernel_rem_pio2f+0x304>
 8011978:	2000      	movs	r0, #0
 801197a:	1ae2      	subs	r2, r4, r3
 801197c:	e0b1      	b.n	8011ae2 <__kernel_rem_pio2f+0x392>
 801197e:	2602      	movs	r6, #2
 8011980:	e78f      	b.n	80118a2 <__kernel_rem_pio2f+0x152>
 8011982:	f852 1b04 	ldr.w	r1, [r2], #4
 8011986:	b948      	cbnz	r0, 801199c <__kernel_rem_pio2f+0x24c>
 8011988:	b121      	cbz	r1, 8011994 <__kernel_rem_pio2f+0x244>
 801198a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801198e:	f842 1c04 	str.w	r1, [r2, #-4]
 8011992:	2101      	movs	r1, #1
 8011994:	f10e 0e01 	add.w	lr, lr, #1
 8011998:	4608      	mov	r0, r1
 801199a:	e787      	b.n	80118ac <__kernel_rem_pio2f+0x15c>
 801199c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80119a0:	e7f5      	b.n	801198e <__kernel_rem_pio2f+0x23e>
 80119a2:	f104 3cff 	add.w	ip, r4, #4294967295
 80119a6:	aa08      	add	r2, sp, #32
 80119a8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80119ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80119b0:	a908      	add	r1, sp, #32
 80119b2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80119b6:	e781      	b.n	80118bc <__kernel_rem_pio2f+0x16c>
 80119b8:	f104 3cff 	add.w	ip, r4, #4294967295
 80119bc:	aa08      	add	r2, sp, #32
 80119be:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80119c2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80119c6:	e7f3      	b.n	80119b0 <__kernel_rem_pio2f+0x260>
 80119c8:	a908      	add	r1, sp, #32
 80119ca:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80119ce:	3801      	subs	r0, #1
 80119d0:	430a      	orrs	r2, r1
 80119d2:	e7ab      	b.n	801192c <__kernel_rem_pio2f+0x1dc>
 80119d4:	3201      	adds	r2, #1
 80119d6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80119da:	2e00      	cmp	r6, #0
 80119dc:	d0fa      	beq.n	80119d4 <__kernel_rem_pio2f+0x284>
 80119de:	9905      	ldr	r1, [sp, #20]
 80119e0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80119e4:	eb0d 0001 	add.w	r0, sp, r1
 80119e8:	18e6      	adds	r6, r4, r3
 80119ea:	a91c      	add	r1, sp, #112	@ 0x70
 80119ec:	f104 0c01 	add.w	ip, r4, #1
 80119f0:	384c      	subs	r0, #76	@ 0x4c
 80119f2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80119f6:	4422      	add	r2, r4
 80119f8:	4562      	cmp	r2, ip
 80119fa:	da04      	bge.n	8011a06 <__kernel_rem_pio2f+0x2b6>
 80119fc:	4614      	mov	r4, r2
 80119fe:	e70e      	b.n	801181e <__kernel_rem_pio2f+0xce>
 8011a00:	9804      	ldr	r0, [sp, #16]
 8011a02:	2201      	movs	r2, #1
 8011a04:	e7e7      	b.n	80119d6 <__kernel_rem_pio2f+0x286>
 8011a06:	9903      	ldr	r1, [sp, #12]
 8011a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011a0c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8011a10:	9105      	str	r1, [sp, #20]
 8011a12:	ee07 1a90 	vmov	s15, r1
 8011a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a1a:	2400      	movs	r4, #0
 8011a1c:	ece6 7a01 	vstmia	r6!, {s15}
 8011a20:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8011a54 <__kernel_rem_pio2f+0x304>
 8011a24:	46b1      	mov	r9, r6
 8011a26:	455c      	cmp	r4, fp
 8011a28:	dd04      	ble.n	8011a34 <__kernel_rem_pio2f+0x2e4>
 8011a2a:	ece0 7a01 	vstmia	r0!, {s15}
 8011a2e:	f10c 0c01 	add.w	ip, ip, #1
 8011a32:	e7e1      	b.n	80119f8 <__kernel_rem_pio2f+0x2a8>
 8011a34:	ecfe 6a01 	vldmia	lr!, {s13}
 8011a38:	ed39 7a01 	vldmdb	r9!, {s14}
 8011a3c:	3401      	adds	r4, #1
 8011a3e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011a42:	e7f0      	b.n	8011a26 <__kernel_rem_pio2f+0x2d6>
 8011a44:	08013838 	.word	0x08013838
 8011a48:	0801380c 	.word	0x0801380c
 8011a4c:	43800000 	.word	0x43800000
 8011a50:	3b800000 	.word	0x3b800000
 8011a54:	00000000 	.word	0x00000000
 8011a58:	9b02      	ldr	r3, [sp, #8]
 8011a5a:	eeb0 0a48 	vmov.f32	s0, s16
 8011a5e:	eba3 0008 	sub.w	r0, r3, r8
 8011a62:	f7ff fe0f 	bl	8011684 <scalbnf>
 8011a66:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8011a4c <__kernel_rem_pio2f+0x2fc>
 8011a6a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a72:	db19      	blt.n	8011aa8 <__kernel_rem_pio2f+0x358>
 8011a74:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8011a50 <__kernel_rem_pio2f+0x300>
 8011a78:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011a7c:	aa08      	add	r2, sp, #32
 8011a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a82:	3508      	adds	r5, #8
 8011a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a88:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011a8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a90:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011a94:	ee10 3a10 	vmov	r3, s0
 8011a98:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011a9c:	ee17 3a90 	vmov	r3, s15
 8011aa0:	3401      	adds	r4, #1
 8011aa2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011aa6:	e74c      	b.n	8011942 <__kernel_rem_pio2f+0x1f2>
 8011aa8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011aac:	aa08      	add	r2, sp, #32
 8011aae:	ee10 3a10 	vmov	r3, s0
 8011ab2:	e7f6      	b.n	8011aa2 <__kernel_rem_pio2f+0x352>
 8011ab4:	a808      	add	r0, sp, #32
 8011ab6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8011aba:	9001      	str	r0, [sp, #4]
 8011abc:	ee07 0a90 	vmov	s15, r0
 8011ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ac4:	3b01      	subs	r3, #1
 8011ac6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011aca:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011ace:	ed62 7a01 	vstmdb	r2!, {s15}
 8011ad2:	e743      	b.n	801195c <__kernel_rem_pio2f+0x20c>
 8011ad4:	ecfc 6a01 	vldmia	ip!, {s13}
 8011ad8:	ecb5 7a01 	vldmia	r5!, {s14}
 8011adc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011ae0:	3001      	adds	r0, #1
 8011ae2:	4550      	cmp	r0, sl
 8011ae4:	dc01      	bgt.n	8011aea <__kernel_rem_pio2f+0x39a>
 8011ae6:	4282      	cmp	r2, r0
 8011ae8:	daf4      	bge.n	8011ad4 <__kernel_rem_pio2f+0x384>
 8011aea:	a858      	add	r0, sp, #352	@ 0x160
 8011aec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011af0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8011af4:	3b01      	subs	r3, #1
 8011af6:	e735      	b.n	8011964 <__kernel_rem_pio2f+0x214>
 8011af8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8011afa:	2b02      	cmp	r3, #2
 8011afc:	dc09      	bgt.n	8011b12 <__kernel_rem_pio2f+0x3c2>
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	dc2b      	bgt.n	8011b5a <__kernel_rem_pio2f+0x40a>
 8011b02:	d044      	beq.n	8011b8e <__kernel_rem_pio2f+0x43e>
 8011b04:	f009 0007 	and.w	r0, r9, #7
 8011b08:	b059      	add	sp, #356	@ 0x164
 8011b0a:	ecbd 8b04 	vpop	{d8-d9}
 8011b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b12:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8011b14:	2b03      	cmp	r3, #3
 8011b16:	d1f5      	bne.n	8011b04 <__kernel_rem_pio2f+0x3b4>
 8011b18:	aa30      	add	r2, sp, #192	@ 0xc0
 8011b1a:	1f0b      	subs	r3, r1, #4
 8011b1c:	4413      	add	r3, r2
 8011b1e:	461a      	mov	r2, r3
 8011b20:	4620      	mov	r0, r4
 8011b22:	2800      	cmp	r0, #0
 8011b24:	f1a2 0204 	sub.w	r2, r2, #4
 8011b28:	dc52      	bgt.n	8011bd0 <__kernel_rem_pio2f+0x480>
 8011b2a:	4622      	mov	r2, r4
 8011b2c:	2a01      	cmp	r2, #1
 8011b2e:	f1a3 0304 	sub.w	r3, r3, #4
 8011b32:	dc5d      	bgt.n	8011bf0 <__kernel_rem_pio2f+0x4a0>
 8011b34:	ab30      	add	r3, sp, #192	@ 0xc0
 8011b36:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8011a54 <__kernel_rem_pio2f+0x304>
 8011b3a:	440b      	add	r3, r1
 8011b3c:	2c01      	cmp	r4, #1
 8011b3e:	dc67      	bgt.n	8011c10 <__kernel_rem_pio2f+0x4c0>
 8011b40:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8011b44:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8011b48:	2e00      	cmp	r6, #0
 8011b4a:	d167      	bne.n	8011c1c <__kernel_rem_pio2f+0x4cc>
 8011b4c:	edc7 6a00 	vstr	s13, [r7]
 8011b50:	ed87 7a01 	vstr	s14, [r7, #4]
 8011b54:	edc7 7a02 	vstr	s15, [r7, #8]
 8011b58:	e7d4      	b.n	8011b04 <__kernel_rem_pio2f+0x3b4>
 8011b5a:	ab30      	add	r3, sp, #192	@ 0xc0
 8011b5c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8011a54 <__kernel_rem_pio2f+0x304>
 8011b60:	440b      	add	r3, r1
 8011b62:	4622      	mov	r2, r4
 8011b64:	2a00      	cmp	r2, #0
 8011b66:	da24      	bge.n	8011bb2 <__kernel_rem_pio2f+0x462>
 8011b68:	b34e      	cbz	r6, 8011bbe <__kernel_rem_pio2f+0x46e>
 8011b6a:	eef1 7a47 	vneg.f32	s15, s14
 8011b6e:	edc7 7a00 	vstr	s15, [r7]
 8011b72:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8011b76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011b7a:	aa31      	add	r2, sp, #196	@ 0xc4
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	429c      	cmp	r4, r3
 8011b80:	da20      	bge.n	8011bc4 <__kernel_rem_pio2f+0x474>
 8011b82:	b10e      	cbz	r6, 8011b88 <__kernel_rem_pio2f+0x438>
 8011b84:	eef1 7a67 	vneg.f32	s15, s15
 8011b88:	edc7 7a01 	vstr	s15, [r7, #4]
 8011b8c:	e7ba      	b.n	8011b04 <__kernel_rem_pio2f+0x3b4>
 8011b8e:	ab30      	add	r3, sp, #192	@ 0xc0
 8011b90:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8011a54 <__kernel_rem_pio2f+0x304>
 8011b94:	440b      	add	r3, r1
 8011b96:	2c00      	cmp	r4, #0
 8011b98:	da05      	bge.n	8011ba6 <__kernel_rem_pio2f+0x456>
 8011b9a:	b10e      	cbz	r6, 8011ba0 <__kernel_rem_pio2f+0x450>
 8011b9c:	eef1 7a67 	vneg.f32	s15, s15
 8011ba0:	edc7 7a00 	vstr	s15, [r7]
 8011ba4:	e7ae      	b.n	8011b04 <__kernel_rem_pio2f+0x3b4>
 8011ba6:	ed33 7a01 	vldmdb	r3!, {s14}
 8011baa:	3c01      	subs	r4, #1
 8011bac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011bb0:	e7f1      	b.n	8011b96 <__kernel_rem_pio2f+0x446>
 8011bb2:	ed73 7a01 	vldmdb	r3!, {s15}
 8011bb6:	3a01      	subs	r2, #1
 8011bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011bbc:	e7d2      	b.n	8011b64 <__kernel_rem_pio2f+0x414>
 8011bbe:	eef0 7a47 	vmov.f32	s15, s14
 8011bc2:	e7d4      	b.n	8011b6e <__kernel_rem_pio2f+0x41e>
 8011bc4:	ecb2 7a01 	vldmia	r2!, {s14}
 8011bc8:	3301      	adds	r3, #1
 8011bca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011bce:	e7d6      	b.n	8011b7e <__kernel_rem_pio2f+0x42e>
 8011bd0:	edd2 7a00 	vldr	s15, [r2]
 8011bd4:	edd2 6a01 	vldr	s13, [r2, #4]
 8011bd8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011bdc:	3801      	subs	r0, #1
 8011bde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011be2:	ed82 7a00 	vstr	s14, [r2]
 8011be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011bea:	edc2 7a01 	vstr	s15, [r2, #4]
 8011bee:	e798      	b.n	8011b22 <__kernel_rem_pio2f+0x3d2>
 8011bf0:	edd3 7a00 	vldr	s15, [r3]
 8011bf4:	edd3 6a01 	vldr	s13, [r3, #4]
 8011bf8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011bfc:	3a01      	subs	r2, #1
 8011bfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c02:	ed83 7a00 	vstr	s14, [r3]
 8011c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c0a:	edc3 7a01 	vstr	s15, [r3, #4]
 8011c0e:	e78d      	b.n	8011b2c <__kernel_rem_pio2f+0x3dc>
 8011c10:	ed33 7a01 	vldmdb	r3!, {s14}
 8011c14:	3c01      	subs	r4, #1
 8011c16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011c1a:	e78f      	b.n	8011b3c <__kernel_rem_pio2f+0x3ec>
 8011c1c:	eef1 6a66 	vneg.f32	s13, s13
 8011c20:	eeb1 7a47 	vneg.f32	s14, s14
 8011c24:	edc7 6a00 	vstr	s13, [r7]
 8011c28:	ed87 7a01 	vstr	s14, [r7, #4]
 8011c2c:	eef1 7a67 	vneg.f32	s15, s15
 8011c30:	e790      	b.n	8011b54 <__kernel_rem_pio2f+0x404>
 8011c32:	bf00      	nop

08011c34 <floorf>:
 8011c34:	ee10 3a10 	vmov	r3, s0
 8011c38:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011c3c:	3a7f      	subs	r2, #127	@ 0x7f
 8011c3e:	2a16      	cmp	r2, #22
 8011c40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011c44:	dc2b      	bgt.n	8011c9e <floorf+0x6a>
 8011c46:	2a00      	cmp	r2, #0
 8011c48:	da12      	bge.n	8011c70 <floorf+0x3c>
 8011c4a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011cb0 <floorf+0x7c>
 8011c4e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011c52:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c5a:	dd06      	ble.n	8011c6a <floorf+0x36>
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	da24      	bge.n	8011caa <floorf+0x76>
 8011c60:	2900      	cmp	r1, #0
 8011c62:	4b14      	ldr	r3, [pc, #80]	@ (8011cb4 <floorf+0x80>)
 8011c64:	bf08      	it	eq
 8011c66:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8011c6a:	ee00 3a10 	vmov	s0, r3
 8011c6e:	4770      	bx	lr
 8011c70:	4911      	ldr	r1, [pc, #68]	@ (8011cb8 <floorf+0x84>)
 8011c72:	4111      	asrs	r1, r2
 8011c74:	420b      	tst	r3, r1
 8011c76:	d0fa      	beq.n	8011c6e <floorf+0x3a>
 8011c78:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011cb0 <floorf+0x7c>
 8011c7c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011c80:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c88:	ddef      	ble.n	8011c6a <floorf+0x36>
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	bfbe      	ittt	lt
 8011c8e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8011c92:	fa40 f202 	asrlt.w	r2, r0, r2
 8011c96:	189b      	addlt	r3, r3, r2
 8011c98:	ea23 0301 	bic.w	r3, r3, r1
 8011c9c:	e7e5      	b.n	8011c6a <floorf+0x36>
 8011c9e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011ca2:	d3e4      	bcc.n	8011c6e <floorf+0x3a>
 8011ca4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011ca8:	4770      	bx	lr
 8011caa:	2300      	movs	r3, #0
 8011cac:	e7dd      	b.n	8011c6a <floorf+0x36>
 8011cae:	bf00      	nop
 8011cb0:	7149f2ca 	.word	0x7149f2ca
 8011cb4:	bf800000 	.word	0xbf800000
 8011cb8:	007fffff 	.word	0x007fffff

08011cbc <sniprintf>:
 8011cbc:	b40c      	push	{r2, r3}
 8011cbe:	b530      	push	{r4, r5, lr}
 8011cc0:	4b17      	ldr	r3, [pc, #92]	@ (8011d20 <sniprintf+0x64>)
 8011cc2:	1e0c      	subs	r4, r1, #0
 8011cc4:	681d      	ldr	r5, [r3, #0]
 8011cc6:	b09d      	sub	sp, #116	@ 0x74
 8011cc8:	da08      	bge.n	8011cdc <sniprintf+0x20>
 8011cca:	238b      	movs	r3, #139	@ 0x8b
 8011ccc:	602b      	str	r3, [r5, #0]
 8011cce:	f04f 30ff 	mov.w	r0, #4294967295
 8011cd2:	b01d      	add	sp, #116	@ 0x74
 8011cd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011cd8:	b002      	add	sp, #8
 8011cda:	4770      	bx	lr
 8011cdc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011ce0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011ce4:	bf14      	ite	ne
 8011ce6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011cea:	4623      	moveq	r3, r4
 8011cec:	9304      	str	r3, [sp, #16]
 8011cee:	9307      	str	r3, [sp, #28]
 8011cf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011cf4:	9002      	str	r0, [sp, #8]
 8011cf6:	9006      	str	r0, [sp, #24]
 8011cf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011cfc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011cfe:	ab21      	add	r3, sp, #132	@ 0x84
 8011d00:	a902      	add	r1, sp, #8
 8011d02:	4628      	mov	r0, r5
 8011d04:	9301      	str	r3, [sp, #4]
 8011d06:	f000 f9a3 	bl	8012050 <_svfiprintf_r>
 8011d0a:	1c43      	adds	r3, r0, #1
 8011d0c:	bfbc      	itt	lt
 8011d0e:	238b      	movlt	r3, #139	@ 0x8b
 8011d10:	602b      	strlt	r3, [r5, #0]
 8011d12:	2c00      	cmp	r4, #0
 8011d14:	d0dd      	beq.n	8011cd2 <sniprintf+0x16>
 8011d16:	9b02      	ldr	r3, [sp, #8]
 8011d18:	2200      	movs	r2, #0
 8011d1a:	701a      	strb	r2, [r3, #0]
 8011d1c:	e7d9      	b.n	8011cd2 <sniprintf+0x16>
 8011d1e:	bf00      	nop
 8011d20:	200001a0 	.word	0x200001a0

08011d24 <memset>:
 8011d24:	4402      	add	r2, r0
 8011d26:	4603      	mov	r3, r0
 8011d28:	4293      	cmp	r3, r2
 8011d2a:	d100      	bne.n	8011d2e <memset+0xa>
 8011d2c:	4770      	bx	lr
 8011d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8011d32:	e7f9      	b.n	8011d28 <memset+0x4>

08011d34 <__errno>:
 8011d34:	4b01      	ldr	r3, [pc, #4]	@ (8011d3c <__errno+0x8>)
 8011d36:	6818      	ldr	r0, [r3, #0]
 8011d38:	4770      	bx	lr
 8011d3a:	bf00      	nop
 8011d3c:	200001a0 	.word	0x200001a0

08011d40 <__libc_init_array>:
 8011d40:	b570      	push	{r4, r5, r6, lr}
 8011d42:	4d0d      	ldr	r5, [pc, #52]	@ (8011d78 <__libc_init_array+0x38>)
 8011d44:	4c0d      	ldr	r4, [pc, #52]	@ (8011d7c <__libc_init_array+0x3c>)
 8011d46:	1b64      	subs	r4, r4, r5
 8011d48:	10a4      	asrs	r4, r4, #2
 8011d4a:	2600      	movs	r6, #0
 8011d4c:	42a6      	cmp	r6, r4
 8011d4e:	d109      	bne.n	8011d64 <__libc_init_array+0x24>
 8011d50:	4d0b      	ldr	r5, [pc, #44]	@ (8011d80 <__libc_init_array+0x40>)
 8011d52:	4c0c      	ldr	r4, [pc, #48]	@ (8011d84 <__libc_init_array+0x44>)
 8011d54:	f000 fc66 	bl	8012624 <_init>
 8011d58:	1b64      	subs	r4, r4, r5
 8011d5a:	10a4      	asrs	r4, r4, #2
 8011d5c:	2600      	movs	r6, #0
 8011d5e:	42a6      	cmp	r6, r4
 8011d60:	d105      	bne.n	8011d6e <__libc_init_array+0x2e>
 8011d62:	bd70      	pop	{r4, r5, r6, pc}
 8011d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d68:	4798      	blx	r3
 8011d6a:	3601      	adds	r6, #1
 8011d6c:	e7ee      	b.n	8011d4c <__libc_init_array+0xc>
 8011d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d72:	4798      	blx	r3
 8011d74:	3601      	adds	r6, #1
 8011d76:	e7f2      	b.n	8011d5e <__libc_init_array+0x1e>
 8011d78:	08013880 	.word	0x08013880
 8011d7c:	08013880 	.word	0x08013880
 8011d80:	08013880 	.word	0x08013880
 8011d84:	08013884 	.word	0x08013884

08011d88 <__retarget_lock_acquire_recursive>:
 8011d88:	4770      	bx	lr

08011d8a <__retarget_lock_release_recursive>:
 8011d8a:	4770      	bx	lr

08011d8c <memcpy>:
 8011d8c:	440a      	add	r2, r1
 8011d8e:	4291      	cmp	r1, r2
 8011d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8011d94:	d100      	bne.n	8011d98 <memcpy+0xc>
 8011d96:	4770      	bx	lr
 8011d98:	b510      	push	{r4, lr}
 8011d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011da2:	4291      	cmp	r1, r2
 8011da4:	d1f9      	bne.n	8011d9a <memcpy+0xe>
 8011da6:	bd10      	pop	{r4, pc}

08011da8 <_free_r>:
 8011da8:	b538      	push	{r3, r4, r5, lr}
 8011daa:	4605      	mov	r5, r0
 8011dac:	2900      	cmp	r1, #0
 8011dae:	d041      	beq.n	8011e34 <_free_r+0x8c>
 8011db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011db4:	1f0c      	subs	r4, r1, #4
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	bfb8      	it	lt
 8011dba:	18e4      	addlt	r4, r4, r3
 8011dbc:	f000 f8e0 	bl	8011f80 <__malloc_lock>
 8011dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8011e38 <_free_r+0x90>)
 8011dc2:	6813      	ldr	r3, [r2, #0]
 8011dc4:	b933      	cbnz	r3, 8011dd4 <_free_r+0x2c>
 8011dc6:	6063      	str	r3, [r4, #4]
 8011dc8:	6014      	str	r4, [r2, #0]
 8011dca:	4628      	mov	r0, r5
 8011dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dd0:	f000 b8dc 	b.w	8011f8c <__malloc_unlock>
 8011dd4:	42a3      	cmp	r3, r4
 8011dd6:	d908      	bls.n	8011dea <_free_r+0x42>
 8011dd8:	6820      	ldr	r0, [r4, #0]
 8011dda:	1821      	adds	r1, r4, r0
 8011ddc:	428b      	cmp	r3, r1
 8011dde:	bf01      	itttt	eq
 8011de0:	6819      	ldreq	r1, [r3, #0]
 8011de2:	685b      	ldreq	r3, [r3, #4]
 8011de4:	1809      	addeq	r1, r1, r0
 8011de6:	6021      	streq	r1, [r4, #0]
 8011de8:	e7ed      	b.n	8011dc6 <_free_r+0x1e>
 8011dea:	461a      	mov	r2, r3
 8011dec:	685b      	ldr	r3, [r3, #4]
 8011dee:	b10b      	cbz	r3, 8011df4 <_free_r+0x4c>
 8011df0:	42a3      	cmp	r3, r4
 8011df2:	d9fa      	bls.n	8011dea <_free_r+0x42>
 8011df4:	6811      	ldr	r1, [r2, #0]
 8011df6:	1850      	adds	r0, r2, r1
 8011df8:	42a0      	cmp	r0, r4
 8011dfa:	d10b      	bne.n	8011e14 <_free_r+0x6c>
 8011dfc:	6820      	ldr	r0, [r4, #0]
 8011dfe:	4401      	add	r1, r0
 8011e00:	1850      	adds	r0, r2, r1
 8011e02:	4283      	cmp	r3, r0
 8011e04:	6011      	str	r1, [r2, #0]
 8011e06:	d1e0      	bne.n	8011dca <_free_r+0x22>
 8011e08:	6818      	ldr	r0, [r3, #0]
 8011e0a:	685b      	ldr	r3, [r3, #4]
 8011e0c:	6053      	str	r3, [r2, #4]
 8011e0e:	4408      	add	r0, r1
 8011e10:	6010      	str	r0, [r2, #0]
 8011e12:	e7da      	b.n	8011dca <_free_r+0x22>
 8011e14:	d902      	bls.n	8011e1c <_free_r+0x74>
 8011e16:	230c      	movs	r3, #12
 8011e18:	602b      	str	r3, [r5, #0]
 8011e1a:	e7d6      	b.n	8011dca <_free_r+0x22>
 8011e1c:	6820      	ldr	r0, [r4, #0]
 8011e1e:	1821      	adds	r1, r4, r0
 8011e20:	428b      	cmp	r3, r1
 8011e22:	bf04      	itt	eq
 8011e24:	6819      	ldreq	r1, [r3, #0]
 8011e26:	685b      	ldreq	r3, [r3, #4]
 8011e28:	6063      	str	r3, [r4, #4]
 8011e2a:	bf04      	itt	eq
 8011e2c:	1809      	addeq	r1, r1, r0
 8011e2e:	6021      	streq	r1, [r4, #0]
 8011e30:	6054      	str	r4, [r2, #4]
 8011e32:	e7ca      	b.n	8011dca <_free_r+0x22>
 8011e34:	bd38      	pop	{r3, r4, r5, pc}
 8011e36:	bf00      	nop
 8011e38:	200027b0 	.word	0x200027b0

08011e3c <sbrk_aligned>:
 8011e3c:	b570      	push	{r4, r5, r6, lr}
 8011e3e:	4e0f      	ldr	r6, [pc, #60]	@ (8011e7c <sbrk_aligned+0x40>)
 8011e40:	460c      	mov	r4, r1
 8011e42:	6831      	ldr	r1, [r6, #0]
 8011e44:	4605      	mov	r5, r0
 8011e46:	b911      	cbnz	r1, 8011e4e <sbrk_aligned+0x12>
 8011e48:	f000 fba6 	bl	8012598 <_sbrk_r>
 8011e4c:	6030      	str	r0, [r6, #0]
 8011e4e:	4621      	mov	r1, r4
 8011e50:	4628      	mov	r0, r5
 8011e52:	f000 fba1 	bl	8012598 <_sbrk_r>
 8011e56:	1c43      	adds	r3, r0, #1
 8011e58:	d103      	bne.n	8011e62 <sbrk_aligned+0x26>
 8011e5a:	f04f 34ff 	mov.w	r4, #4294967295
 8011e5e:	4620      	mov	r0, r4
 8011e60:	bd70      	pop	{r4, r5, r6, pc}
 8011e62:	1cc4      	adds	r4, r0, #3
 8011e64:	f024 0403 	bic.w	r4, r4, #3
 8011e68:	42a0      	cmp	r0, r4
 8011e6a:	d0f8      	beq.n	8011e5e <sbrk_aligned+0x22>
 8011e6c:	1a21      	subs	r1, r4, r0
 8011e6e:	4628      	mov	r0, r5
 8011e70:	f000 fb92 	bl	8012598 <_sbrk_r>
 8011e74:	3001      	adds	r0, #1
 8011e76:	d1f2      	bne.n	8011e5e <sbrk_aligned+0x22>
 8011e78:	e7ef      	b.n	8011e5a <sbrk_aligned+0x1e>
 8011e7a:	bf00      	nop
 8011e7c:	200027ac 	.word	0x200027ac

08011e80 <_malloc_r>:
 8011e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e84:	1ccd      	adds	r5, r1, #3
 8011e86:	f025 0503 	bic.w	r5, r5, #3
 8011e8a:	3508      	adds	r5, #8
 8011e8c:	2d0c      	cmp	r5, #12
 8011e8e:	bf38      	it	cc
 8011e90:	250c      	movcc	r5, #12
 8011e92:	2d00      	cmp	r5, #0
 8011e94:	4606      	mov	r6, r0
 8011e96:	db01      	blt.n	8011e9c <_malloc_r+0x1c>
 8011e98:	42a9      	cmp	r1, r5
 8011e9a:	d904      	bls.n	8011ea6 <_malloc_r+0x26>
 8011e9c:	230c      	movs	r3, #12
 8011e9e:	6033      	str	r3, [r6, #0]
 8011ea0:	2000      	movs	r0, #0
 8011ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ea6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011f7c <_malloc_r+0xfc>
 8011eaa:	f000 f869 	bl	8011f80 <__malloc_lock>
 8011eae:	f8d8 3000 	ldr.w	r3, [r8]
 8011eb2:	461c      	mov	r4, r3
 8011eb4:	bb44      	cbnz	r4, 8011f08 <_malloc_r+0x88>
 8011eb6:	4629      	mov	r1, r5
 8011eb8:	4630      	mov	r0, r6
 8011eba:	f7ff ffbf 	bl	8011e3c <sbrk_aligned>
 8011ebe:	1c43      	adds	r3, r0, #1
 8011ec0:	4604      	mov	r4, r0
 8011ec2:	d158      	bne.n	8011f76 <_malloc_r+0xf6>
 8011ec4:	f8d8 4000 	ldr.w	r4, [r8]
 8011ec8:	4627      	mov	r7, r4
 8011eca:	2f00      	cmp	r7, #0
 8011ecc:	d143      	bne.n	8011f56 <_malloc_r+0xd6>
 8011ece:	2c00      	cmp	r4, #0
 8011ed0:	d04b      	beq.n	8011f6a <_malloc_r+0xea>
 8011ed2:	6823      	ldr	r3, [r4, #0]
 8011ed4:	4639      	mov	r1, r7
 8011ed6:	4630      	mov	r0, r6
 8011ed8:	eb04 0903 	add.w	r9, r4, r3
 8011edc:	f000 fb5c 	bl	8012598 <_sbrk_r>
 8011ee0:	4581      	cmp	r9, r0
 8011ee2:	d142      	bne.n	8011f6a <_malloc_r+0xea>
 8011ee4:	6821      	ldr	r1, [r4, #0]
 8011ee6:	1a6d      	subs	r5, r5, r1
 8011ee8:	4629      	mov	r1, r5
 8011eea:	4630      	mov	r0, r6
 8011eec:	f7ff ffa6 	bl	8011e3c <sbrk_aligned>
 8011ef0:	3001      	adds	r0, #1
 8011ef2:	d03a      	beq.n	8011f6a <_malloc_r+0xea>
 8011ef4:	6823      	ldr	r3, [r4, #0]
 8011ef6:	442b      	add	r3, r5
 8011ef8:	6023      	str	r3, [r4, #0]
 8011efa:	f8d8 3000 	ldr.w	r3, [r8]
 8011efe:	685a      	ldr	r2, [r3, #4]
 8011f00:	bb62      	cbnz	r2, 8011f5c <_malloc_r+0xdc>
 8011f02:	f8c8 7000 	str.w	r7, [r8]
 8011f06:	e00f      	b.n	8011f28 <_malloc_r+0xa8>
 8011f08:	6822      	ldr	r2, [r4, #0]
 8011f0a:	1b52      	subs	r2, r2, r5
 8011f0c:	d420      	bmi.n	8011f50 <_malloc_r+0xd0>
 8011f0e:	2a0b      	cmp	r2, #11
 8011f10:	d917      	bls.n	8011f42 <_malloc_r+0xc2>
 8011f12:	1961      	adds	r1, r4, r5
 8011f14:	42a3      	cmp	r3, r4
 8011f16:	6025      	str	r5, [r4, #0]
 8011f18:	bf18      	it	ne
 8011f1a:	6059      	strne	r1, [r3, #4]
 8011f1c:	6863      	ldr	r3, [r4, #4]
 8011f1e:	bf08      	it	eq
 8011f20:	f8c8 1000 	streq.w	r1, [r8]
 8011f24:	5162      	str	r2, [r4, r5]
 8011f26:	604b      	str	r3, [r1, #4]
 8011f28:	4630      	mov	r0, r6
 8011f2a:	f000 f82f 	bl	8011f8c <__malloc_unlock>
 8011f2e:	f104 000b 	add.w	r0, r4, #11
 8011f32:	1d23      	adds	r3, r4, #4
 8011f34:	f020 0007 	bic.w	r0, r0, #7
 8011f38:	1ac2      	subs	r2, r0, r3
 8011f3a:	bf1c      	itt	ne
 8011f3c:	1a1b      	subne	r3, r3, r0
 8011f3e:	50a3      	strne	r3, [r4, r2]
 8011f40:	e7af      	b.n	8011ea2 <_malloc_r+0x22>
 8011f42:	6862      	ldr	r2, [r4, #4]
 8011f44:	42a3      	cmp	r3, r4
 8011f46:	bf0c      	ite	eq
 8011f48:	f8c8 2000 	streq.w	r2, [r8]
 8011f4c:	605a      	strne	r2, [r3, #4]
 8011f4e:	e7eb      	b.n	8011f28 <_malloc_r+0xa8>
 8011f50:	4623      	mov	r3, r4
 8011f52:	6864      	ldr	r4, [r4, #4]
 8011f54:	e7ae      	b.n	8011eb4 <_malloc_r+0x34>
 8011f56:	463c      	mov	r4, r7
 8011f58:	687f      	ldr	r7, [r7, #4]
 8011f5a:	e7b6      	b.n	8011eca <_malloc_r+0x4a>
 8011f5c:	461a      	mov	r2, r3
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	42a3      	cmp	r3, r4
 8011f62:	d1fb      	bne.n	8011f5c <_malloc_r+0xdc>
 8011f64:	2300      	movs	r3, #0
 8011f66:	6053      	str	r3, [r2, #4]
 8011f68:	e7de      	b.n	8011f28 <_malloc_r+0xa8>
 8011f6a:	230c      	movs	r3, #12
 8011f6c:	6033      	str	r3, [r6, #0]
 8011f6e:	4630      	mov	r0, r6
 8011f70:	f000 f80c 	bl	8011f8c <__malloc_unlock>
 8011f74:	e794      	b.n	8011ea0 <_malloc_r+0x20>
 8011f76:	6005      	str	r5, [r0, #0]
 8011f78:	e7d6      	b.n	8011f28 <_malloc_r+0xa8>
 8011f7a:	bf00      	nop
 8011f7c:	200027b0 	.word	0x200027b0

08011f80 <__malloc_lock>:
 8011f80:	4801      	ldr	r0, [pc, #4]	@ (8011f88 <__malloc_lock+0x8>)
 8011f82:	f7ff bf01 	b.w	8011d88 <__retarget_lock_acquire_recursive>
 8011f86:	bf00      	nop
 8011f88:	200027a8 	.word	0x200027a8

08011f8c <__malloc_unlock>:
 8011f8c:	4801      	ldr	r0, [pc, #4]	@ (8011f94 <__malloc_unlock+0x8>)
 8011f8e:	f7ff befc 	b.w	8011d8a <__retarget_lock_release_recursive>
 8011f92:	bf00      	nop
 8011f94:	200027a8 	.word	0x200027a8

08011f98 <__ssputs_r>:
 8011f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f9c:	688e      	ldr	r6, [r1, #8]
 8011f9e:	461f      	mov	r7, r3
 8011fa0:	42be      	cmp	r6, r7
 8011fa2:	680b      	ldr	r3, [r1, #0]
 8011fa4:	4682      	mov	sl, r0
 8011fa6:	460c      	mov	r4, r1
 8011fa8:	4690      	mov	r8, r2
 8011faa:	d82d      	bhi.n	8012008 <__ssputs_r+0x70>
 8011fac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011fb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011fb4:	d026      	beq.n	8012004 <__ssputs_r+0x6c>
 8011fb6:	6965      	ldr	r5, [r4, #20]
 8011fb8:	6909      	ldr	r1, [r1, #16]
 8011fba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011fbe:	eba3 0901 	sub.w	r9, r3, r1
 8011fc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011fc6:	1c7b      	adds	r3, r7, #1
 8011fc8:	444b      	add	r3, r9
 8011fca:	106d      	asrs	r5, r5, #1
 8011fcc:	429d      	cmp	r5, r3
 8011fce:	bf38      	it	cc
 8011fd0:	461d      	movcc	r5, r3
 8011fd2:	0553      	lsls	r3, r2, #21
 8011fd4:	d527      	bpl.n	8012026 <__ssputs_r+0x8e>
 8011fd6:	4629      	mov	r1, r5
 8011fd8:	f7ff ff52 	bl	8011e80 <_malloc_r>
 8011fdc:	4606      	mov	r6, r0
 8011fde:	b360      	cbz	r0, 801203a <__ssputs_r+0xa2>
 8011fe0:	6921      	ldr	r1, [r4, #16]
 8011fe2:	464a      	mov	r2, r9
 8011fe4:	f7ff fed2 	bl	8011d8c <memcpy>
 8011fe8:	89a3      	ldrh	r3, [r4, #12]
 8011fea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ff2:	81a3      	strh	r3, [r4, #12]
 8011ff4:	6126      	str	r6, [r4, #16]
 8011ff6:	6165      	str	r5, [r4, #20]
 8011ff8:	444e      	add	r6, r9
 8011ffa:	eba5 0509 	sub.w	r5, r5, r9
 8011ffe:	6026      	str	r6, [r4, #0]
 8012000:	60a5      	str	r5, [r4, #8]
 8012002:	463e      	mov	r6, r7
 8012004:	42be      	cmp	r6, r7
 8012006:	d900      	bls.n	801200a <__ssputs_r+0x72>
 8012008:	463e      	mov	r6, r7
 801200a:	6820      	ldr	r0, [r4, #0]
 801200c:	4632      	mov	r2, r6
 801200e:	4641      	mov	r1, r8
 8012010:	f000 faa8 	bl	8012564 <memmove>
 8012014:	68a3      	ldr	r3, [r4, #8]
 8012016:	1b9b      	subs	r3, r3, r6
 8012018:	60a3      	str	r3, [r4, #8]
 801201a:	6823      	ldr	r3, [r4, #0]
 801201c:	4433      	add	r3, r6
 801201e:	6023      	str	r3, [r4, #0]
 8012020:	2000      	movs	r0, #0
 8012022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012026:	462a      	mov	r2, r5
 8012028:	f000 fac6 	bl	80125b8 <_realloc_r>
 801202c:	4606      	mov	r6, r0
 801202e:	2800      	cmp	r0, #0
 8012030:	d1e0      	bne.n	8011ff4 <__ssputs_r+0x5c>
 8012032:	6921      	ldr	r1, [r4, #16]
 8012034:	4650      	mov	r0, sl
 8012036:	f7ff feb7 	bl	8011da8 <_free_r>
 801203a:	230c      	movs	r3, #12
 801203c:	f8ca 3000 	str.w	r3, [sl]
 8012040:	89a3      	ldrh	r3, [r4, #12]
 8012042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012046:	81a3      	strh	r3, [r4, #12]
 8012048:	f04f 30ff 	mov.w	r0, #4294967295
 801204c:	e7e9      	b.n	8012022 <__ssputs_r+0x8a>
	...

08012050 <_svfiprintf_r>:
 8012050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012054:	4698      	mov	r8, r3
 8012056:	898b      	ldrh	r3, [r1, #12]
 8012058:	061b      	lsls	r3, r3, #24
 801205a:	b09d      	sub	sp, #116	@ 0x74
 801205c:	4607      	mov	r7, r0
 801205e:	460d      	mov	r5, r1
 8012060:	4614      	mov	r4, r2
 8012062:	d510      	bpl.n	8012086 <_svfiprintf_r+0x36>
 8012064:	690b      	ldr	r3, [r1, #16]
 8012066:	b973      	cbnz	r3, 8012086 <_svfiprintf_r+0x36>
 8012068:	2140      	movs	r1, #64	@ 0x40
 801206a:	f7ff ff09 	bl	8011e80 <_malloc_r>
 801206e:	6028      	str	r0, [r5, #0]
 8012070:	6128      	str	r0, [r5, #16]
 8012072:	b930      	cbnz	r0, 8012082 <_svfiprintf_r+0x32>
 8012074:	230c      	movs	r3, #12
 8012076:	603b      	str	r3, [r7, #0]
 8012078:	f04f 30ff 	mov.w	r0, #4294967295
 801207c:	b01d      	add	sp, #116	@ 0x74
 801207e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012082:	2340      	movs	r3, #64	@ 0x40
 8012084:	616b      	str	r3, [r5, #20]
 8012086:	2300      	movs	r3, #0
 8012088:	9309      	str	r3, [sp, #36]	@ 0x24
 801208a:	2320      	movs	r3, #32
 801208c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012090:	f8cd 800c 	str.w	r8, [sp, #12]
 8012094:	2330      	movs	r3, #48	@ 0x30
 8012096:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012234 <_svfiprintf_r+0x1e4>
 801209a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801209e:	f04f 0901 	mov.w	r9, #1
 80120a2:	4623      	mov	r3, r4
 80120a4:	469a      	mov	sl, r3
 80120a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120aa:	b10a      	cbz	r2, 80120b0 <_svfiprintf_r+0x60>
 80120ac:	2a25      	cmp	r2, #37	@ 0x25
 80120ae:	d1f9      	bne.n	80120a4 <_svfiprintf_r+0x54>
 80120b0:	ebba 0b04 	subs.w	fp, sl, r4
 80120b4:	d00b      	beq.n	80120ce <_svfiprintf_r+0x7e>
 80120b6:	465b      	mov	r3, fp
 80120b8:	4622      	mov	r2, r4
 80120ba:	4629      	mov	r1, r5
 80120bc:	4638      	mov	r0, r7
 80120be:	f7ff ff6b 	bl	8011f98 <__ssputs_r>
 80120c2:	3001      	adds	r0, #1
 80120c4:	f000 80a7 	beq.w	8012216 <_svfiprintf_r+0x1c6>
 80120c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80120ca:	445a      	add	r2, fp
 80120cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80120ce:	f89a 3000 	ldrb.w	r3, [sl]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	f000 809f 	beq.w	8012216 <_svfiprintf_r+0x1c6>
 80120d8:	2300      	movs	r3, #0
 80120da:	f04f 32ff 	mov.w	r2, #4294967295
 80120de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120e2:	f10a 0a01 	add.w	sl, sl, #1
 80120e6:	9304      	str	r3, [sp, #16]
 80120e8:	9307      	str	r3, [sp, #28]
 80120ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80120ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80120f0:	4654      	mov	r4, sl
 80120f2:	2205      	movs	r2, #5
 80120f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120f8:	484e      	ldr	r0, [pc, #312]	@ (8012234 <_svfiprintf_r+0x1e4>)
 80120fa:	f7ee f899 	bl	8000230 <memchr>
 80120fe:	9a04      	ldr	r2, [sp, #16]
 8012100:	b9d8      	cbnz	r0, 801213a <_svfiprintf_r+0xea>
 8012102:	06d0      	lsls	r0, r2, #27
 8012104:	bf44      	itt	mi
 8012106:	2320      	movmi	r3, #32
 8012108:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801210c:	0711      	lsls	r1, r2, #28
 801210e:	bf44      	itt	mi
 8012110:	232b      	movmi	r3, #43	@ 0x2b
 8012112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012116:	f89a 3000 	ldrb.w	r3, [sl]
 801211a:	2b2a      	cmp	r3, #42	@ 0x2a
 801211c:	d015      	beq.n	801214a <_svfiprintf_r+0xfa>
 801211e:	9a07      	ldr	r2, [sp, #28]
 8012120:	4654      	mov	r4, sl
 8012122:	2000      	movs	r0, #0
 8012124:	f04f 0c0a 	mov.w	ip, #10
 8012128:	4621      	mov	r1, r4
 801212a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801212e:	3b30      	subs	r3, #48	@ 0x30
 8012130:	2b09      	cmp	r3, #9
 8012132:	d94b      	bls.n	80121cc <_svfiprintf_r+0x17c>
 8012134:	b1b0      	cbz	r0, 8012164 <_svfiprintf_r+0x114>
 8012136:	9207      	str	r2, [sp, #28]
 8012138:	e014      	b.n	8012164 <_svfiprintf_r+0x114>
 801213a:	eba0 0308 	sub.w	r3, r0, r8
 801213e:	fa09 f303 	lsl.w	r3, r9, r3
 8012142:	4313      	orrs	r3, r2
 8012144:	9304      	str	r3, [sp, #16]
 8012146:	46a2      	mov	sl, r4
 8012148:	e7d2      	b.n	80120f0 <_svfiprintf_r+0xa0>
 801214a:	9b03      	ldr	r3, [sp, #12]
 801214c:	1d19      	adds	r1, r3, #4
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	9103      	str	r1, [sp, #12]
 8012152:	2b00      	cmp	r3, #0
 8012154:	bfbb      	ittet	lt
 8012156:	425b      	neglt	r3, r3
 8012158:	f042 0202 	orrlt.w	r2, r2, #2
 801215c:	9307      	strge	r3, [sp, #28]
 801215e:	9307      	strlt	r3, [sp, #28]
 8012160:	bfb8      	it	lt
 8012162:	9204      	strlt	r2, [sp, #16]
 8012164:	7823      	ldrb	r3, [r4, #0]
 8012166:	2b2e      	cmp	r3, #46	@ 0x2e
 8012168:	d10a      	bne.n	8012180 <_svfiprintf_r+0x130>
 801216a:	7863      	ldrb	r3, [r4, #1]
 801216c:	2b2a      	cmp	r3, #42	@ 0x2a
 801216e:	d132      	bne.n	80121d6 <_svfiprintf_r+0x186>
 8012170:	9b03      	ldr	r3, [sp, #12]
 8012172:	1d1a      	adds	r2, r3, #4
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	9203      	str	r2, [sp, #12]
 8012178:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801217c:	3402      	adds	r4, #2
 801217e:	9305      	str	r3, [sp, #20]
 8012180:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012244 <_svfiprintf_r+0x1f4>
 8012184:	7821      	ldrb	r1, [r4, #0]
 8012186:	2203      	movs	r2, #3
 8012188:	4650      	mov	r0, sl
 801218a:	f7ee f851 	bl	8000230 <memchr>
 801218e:	b138      	cbz	r0, 80121a0 <_svfiprintf_r+0x150>
 8012190:	9b04      	ldr	r3, [sp, #16]
 8012192:	eba0 000a 	sub.w	r0, r0, sl
 8012196:	2240      	movs	r2, #64	@ 0x40
 8012198:	4082      	lsls	r2, r0
 801219a:	4313      	orrs	r3, r2
 801219c:	3401      	adds	r4, #1
 801219e:	9304      	str	r3, [sp, #16]
 80121a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121a4:	4824      	ldr	r0, [pc, #144]	@ (8012238 <_svfiprintf_r+0x1e8>)
 80121a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80121aa:	2206      	movs	r2, #6
 80121ac:	f7ee f840 	bl	8000230 <memchr>
 80121b0:	2800      	cmp	r0, #0
 80121b2:	d036      	beq.n	8012222 <_svfiprintf_r+0x1d2>
 80121b4:	4b21      	ldr	r3, [pc, #132]	@ (801223c <_svfiprintf_r+0x1ec>)
 80121b6:	bb1b      	cbnz	r3, 8012200 <_svfiprintf_r+0x1b0>
 80121b8:	9b03      	ldr	r3, [sp, #12]
 80121ba:	3307      	adds	r3, #7
 80121bc:	f023 0307 	bic.w	r3, r3, #7
 80121c0:	3308      	adds	r3, #8
 80121c2:	9303      	str	r3, [sp, #12]
 80121c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121c6:	4433      	add	r3, r6
 80121c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80121ca:	e76a      	b.n	80120a2 <_svfiprintf_r+0x52>
 80121cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80121d0:	460c      	mov	r4, r1
 80121d2:	2001      	movs	r0, #1
 80121d4:	e7a8      	b.n	8012128 <_svfiprintf_r+0xd8>
 80121d6:	2300      	movs	r3, #0
 80121d8:	3401      	adds	r4, #1
 80121da:	9305      	str	r3, [sp, #20]
 80121dc:	4619      	mov	r1, r3
 80121de:	f04f 0c0a 	mov.w	ip, #10
 80121e2:	4620      	mov	r0, r4
 80121e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121e8:	3a30      	subs	r2, #48	@ 0x30
 80121ea:	2a09      	cmp	r2, #9
 80121ec:	d903      	bls.n	80121f6 <_svfiprintf_r+0x1a6>
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d0c6      	beq.n	8012180 <_svfiprintf_r+0x130>
 80121f2:	9105      	str	r1, [sp, #20]
 80121f4:	e7c4      	b.n	8012180 <_svfiprintf_r+0x130>
 80121f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80121fa:	4604      	mov	r4, r0
 80121fc:	2301      	movs	r3, #1
 80121fe:	e7f0      	b.n	80121e2 <_svfiprintf_r+0x192>
 8012200:	ab03      	add	r3, sp, #12
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	462a      	mov	r2, r5
 8012206:	4b0e      	ldr	r3, [pc, #56]	@ (8012240 <_svfiprintf_r+0x1f0>)
 8012208:	a904      	add	r1, sp, #16
 801220a:	4638      	mov	r0, r7
 801220c:	f3af 8000 	nop.w
 8012210:	1c42      	adds	r2, r0, #1
 8012212:	4606      	mov	r6, r0
 8012214:	d1d6      	bne.n	80121c4 <_svfiprintf_r+0x174>
 8012216:	89ab      	ldrh	r3, [r5, #12]
 8012218:	065b      	lsls	r3, r3, #25
 801221a:	f53f af2d 	bmi.w	8012078 <_svfiprintf_r+0x28>
 801221e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012220:	e72c      	b.n	801207c <_svfiprintf_r+0x2c>
 8012222:	ab03      	add	r3, sp, #12
 8012224:	9300      	str	r3, [sp, #0]
 8012226:	462a      	mov	r2, r5
 8012228:	4b05      	ldr	r3, [pc, #20]	@ (8012240 <_svfiprintf_r+0x1f0>)
 801222a:	a904      	add	r1, sp, #16
 801222c:	4638      	mov	r0, r7
 801222e:	f000 f879 	bl	8012324 <_printf_i>
 8012232:	e7ed      	b.n	8012210 <_svfiprintf_r+0x1c0>
 8012234:	08013844 	.word	0x08013844
 8012238:	0801384e 	.word	0x0801384e
 801223c:	00000000 	.word	0x00000000
 8012240:	08011f99 	.word	0x08011f99
 8012244:	0801384a 	.word	0x0801384a

08012248 <_printf_common>:
 8012248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801224c:	4616      	mov	r6, r2
 801224e:	4698      	mov	r8, r3
 8012250:	688a      	ldr	r2, [r1, #8]
 8012252:	690b      	ldr	r3, [r1, #16]
 8012254:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012258:	4293      	cmp	r3, r2
 801225a:	bfb8      	it	lt
 801225c:	4613      	movlt	r3, r2
 801225e:	6033      	str	r3, [r6, #0]
 8012260:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012264:	4607      	mov	r7, r0
 8012266:	460c      	mov	r4, r1
 8012268:	b10a      	cbz	r2, 801226e <_printf_common+0x26>
 801226a:	3301      	adds	r3, #1
 801226c:	6033      	str	r3, [r6, #0]
 801226e:	6823      	ldr	r3, [r4, #0]
 8012270:	0699      	lsls	r1, r3, #26
 8012272:	bf42      	ittt	mi
 8012274:	6833      	ldrmi	r3, [r6, #0]
 8012276:	3302      	addmi	r3, #2
 8012278:	6033      	strmi	r3, [r6, #0]
 801227a:	6825      	ldr	r5, [r4, #0]
 801227c:	f015 0506 	ands.w	r5, r5, #6
 8012280:	d106      	bne.n	8012290 <_printf_common+0x48>
 8012282:	f104 0a19 	add.w	sl, r4, #25
 8012286:	68e3      	ldr	r3, [r4, #12]
 8012288:	6832      	ldr	r2, [r6, #0]
 801228a:	1a9b      	subs	r3, r3, r2
 801228c:	42ab      	cmp	r3, r5
 801228e:	dc26      	bgt.n	80122de <_printf_common+0x96>
 8012290:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012294:	6822      	ldr	r2, [r4, #0]
 8012296:	3b00      	subs	r3, #0
 8012298:	bf18      	it	ne
 801229a:	2301      	movne	r3, #1
 801229c:	0692      	lsls	r2, r2, #26
 801229e:	d42b      	bmi.n	80122f8 <_printf_common+0xb0>
 80122a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80122a4:	4641      	mov	r1, r8
 80122a6:	4638      	mov	r0, r7
 80122a8:	47c8      	blx	r9
 80122aa:	3001      	adds	r0, #1
 80122ac:	d01e      	beq.n	80122ec <_printf_common+0xa4>
 80122ae:	6823      	ldr	r3, [r4, #0]
 80122b0:	6922      	ldr	r2, [r4, #16]
 80122b2:	f003 0306 	and.w	r3, r3, #6
 80122b6:	2b04      	cmp	r3, #4
 80122b8:	bf02      	ittt	eq
 80122ba:	68e5      	ldreq	r5, [r4, #12]
 80122bc:	6833      	ldreq	r3, [r6, #0]
 80122be:	1aed      	subeq	r5, r5, r3
 80122c0:	68a3      	ldr	r3, [r4, #8]
 80122c2:	bf0c      	ite	eq
 80122c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80122c8:	2500      	movne	r5, #0
 80122ca:	4293      	cmp	r3, r2
 80122cc:	bfc4      	itt	gt
 80122ce:	1a9b      	subgt	r3, r3, r2
 80122d0:	18ed      	addgt	r5, r5, r3
 80122d2:	2600      	movs	r6, #0
 80122d4:	341a      	adds	r4, #26
 80122d6:	42b5      	cmp	r5, r6
 80122d8:	d11a      	bne.n	8012310 <_printf_common+0xc8>
 80122da:	2000      	movs	r0, #0
 80122dc:	e008      	b.n	80122f0 <_printf_common+0xa8>
 80122de:	2301      	movs	r3, #1
 80122e0:	4652      	mov	r2, sl
 80122e2:	4641      	mov	r1, r8
 80122e4:	4638      	mov	r0, r7
 80122e6:	47c8      	blx	r9
 80122e8:	3001      	adds	r0, #1
 80122ea:	d103      	bne.n	80122f4 <_printf_common+0xac>
 80122ec:	f04f 30ff 	mov.w	r0, #4294967295
 80122f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122f4:	3501      	adds	r5, #1
 80122f6:	e7c6      	b.n	8012286 <_printf_common+0x3e>
 80122f8:	18e1      	adds	r1, r4, r3
 80122fa:	1c5a      	adds	r2, r3, #1
 80122fc:	2030      	movs	r0, #48	@ 0x30
 80122fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012302:	4422      	add	r2, r4
 8012304:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012308:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801230c:	3302      	adds	r3, #2
 801230e:	e7c7      	b.n	80122a0 <_printf_common+0x58>
 8012310:	2301      	movs	r3, #1
 8012312:	4622      	mov	r2, r4
 8012314:	4641      	mov	r1, r8
 8012316:	4638      	mov	r0, r7
 8012318:	47c8      	blx	r9
 801231a:	3001      	adds	r0, #1
 801231c:	d0e6      	beq.n	80122ec <_printf_common+0xa4>
 801231e:	3601      	adds	r6, #1
 8012320:	e7d9      	b.n	80122d6 <_printf_common+0x8e>
	...

08012324 <_printf_i>:
 8012324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012328:	7e0f      	ldrb	r7, [r1, #24]
 801232a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801232c:	2f78      	cmp	r7, #120	@ 0x78
 801232e:	4691      	mov	r9, r2
 8012330:	4680      	mov	r8, r0
 8012332:	460c      	mov	r4, r1
 8012334:	469a      	mov	sl, r3
 8012336:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801233a:	d807      	bhi.n	801234c <_printf_i+0x28>
 801233c:	2f62      	cmp	r7, #98	@ 0x62
 801233e:	d80a      	bhi.n	8012356 <_printf_i+0x32>
 8012340:	2f00      	cmp	r7, #0
 8012342:	f000 80d2 	beq.w	80124ea <_printf_i+0x1c6>
 8012346:	2f58      	cmp	r7, #88	@ 0x58
 8012348:	f000 80b9 	beq.w	80124be <_printf_i+0x19a>
 801234c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012350:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012354:	e03a      	b.n	80123cc <_printf_i+0xa8>
 8012356:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801235a:	2b15      	cmp	r3, #21
 801235c:	d8f6      	bhi.n	801234c <_printf_i+0x28>
 801235e:	a101      	add	r1, pc, #4	@ (adr r1, 8012364 <_printf_i+0x40>)
 8012360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012364:	080123bd 	.word	0x080123bd
 8012368:	080123d1 	.word	0x080123d1
 801236c:	0801234d 	.word	0x0801234d
 8012370:	0801234d 	.word	0x0801234d
 8012374:	0801234d 	.word	0x0801234d
 8012378:	0801234d 	.word	0x0801234d
 801237c:	080123d1 	.word	0x080123d1
 8012380:	0801234d 	.word	0x0801234d
 8012384:	0801234d 	.word	0x0801234d
 8012388:	0801234d 	.word	0x0801234d
 801238c:	0801234d 	.word	0x0801234d
 8012390:	080124d1 	.word	0x080124d1
 8012394:	080123fb 	.word	0x080123fb
 8012398:	0801248b 	.word	0x0801248b
 801239c:	0801234d 	.word	0x0801234d
 80123a0:	0801234d 	.word	0x0801234d
 80123a4:	080124f3 	.word	0x080124f3
 80123a8:	0801234d 	.word	0x0801234d
 80123ac:	080123fb 	.word	0x080123fb
 80123b0:	0801234d 	.word	0x0801234d
 80123b4:	0801234d 	.word	0x0801234d
 80123b8:	08012493 	.word	0x08012493
 80123bc:	6833      	ldr	r3, [r6, #0]
 80123be:	1d1a      	adds	r2, r3, #4
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	6032      	str	r2, [r6, #0]
 80123c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80123c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80123cc:	2301      	movs	r3, #1
 80123ce:	e09d      	b.n	801250c <_printf_i+0x1e8>
 80123d0:	6833      	ldr	r3, [r6, #0]
 80123d2:	6820      	ldr	r0, [r4, #0]
 80123d4:	1d19      	adds	r1, r3, #4
 80123d6:	6031      	str	r1, [r6, #0]
 80123d8:	0606      	lsls	r6, r0, #24
 80123da:	d501      	bpl.n	80123e0 <_printf_i+0xbc>
 80123dc:	681d      	ldr	r5, [r3, #0]
 80123de:	e003      	b.n	80123e8 <_printf_i+0xc4>
 80123e0:	0645      	lsls	r5, r0, #25
 80123e2:	d5fb      	bpl.n	80123dc <_printf_i+0xb8>
 80123e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80123e8:	2d00      	cmp	r5, #0
 80123ea:	da03      	bge.n	80123f4 <_printf_i+0xd0>
 80123ec:	232d      	movs	r3, #45	@ 0x2d
 80123ee:	426d      	negs	r5, r5
 80123f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80123f4:	4859      	ldr	r0, [pc, #356]	@ (801255c <_printf_i+0x238>)
 80123f6:	230a      	movs	r3, #10
 80123f8:	e011      	b.n	801241e <_printf_i+0xfa>
 80123fa:	6821      	ldr	r1, [r4, #0]
 80123fc:	6833      	ldr	r3, [r6, #0]
 80123fe:	0608      	lsls	r0, r1, #24
 8012400:	f853 5b04 	ldr.w	r5, [r3], #4
 8012404:	d402      	bmi.n	801240c <_printf_i+0xe8>
 8012406:	0649      	lsls	r1, r1, #25
 8012408:	bf48      	it	mi
 801240a:	b2ad      	uxthmi	r5, r5
 801240c:	2f6f      	cmp	r7, #111	@ 0x6f
 801240e:	4853      	ldr	r0, [pc, #332]	@ (801255c <_printf_i+0x238>)
 8012410:	6033      	str	r3, [r6, #0]
 8012412:	bf14      	ite	ne
 8012414:	230a      	movne	r3, #10
 8012416:	2308      	moveq	r3, #8
 8012418:	2100      	movs	r1, #0
 801241a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801241e:	6866      	ldr	r6, [r4, #4]
 8012420:	60a6      	str	r6, [r4, #8]
 8012422:	2e00      	cmp	r6, #0
 8012424:	bfa2      	ittt	ge
 8012426:	6821      	ldrge	r1, [r4, #0]
 8012428:	f021 0104 	bicge.w	r1, r1, #4
 801242c:	6021      	strge	r1, [r4, #0]
 801242e:	b90d      	cbnz	r5, 8012434 <_printf_i+0x110>
 8012430:	2e00      	cmp	r6, #0
 8012432:	d04b      	beq.n	80124cc <_printf_i+0x1a8>
 8012434:	4616      	mov	r6, r2
 8012436:	fbb5 f1f3 	udiv	r1, r5, r3
 801243a:	fb03 5711 	mls	r7, r3, r1, r5
 801243e:	5dc7      	ldrb	r7, [r0, r7]
 8012440:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012444:	462f      	mov	r7, r5
 8012446:	42bb      	cmp	r3, r7
 8012448:	460d      	mov	r5, r1
 801244a:	d9f4      	bls.n	8012436 <_printf_i+0x112>
 801244c:	2b08      	cmp	r3, #8
 801244e:	d10b      	bne.n	8012468 <_printf_i+0x144>
 8012450:	6823      	ldr	r3, [r4, #0]
 8012452:	07df      	lsls	r7, r3, #31
 8012454:	d508      	bpl.n	8012468 <_printf_i+0x144>
 8012456:	6923      	ldr	r3, [r4, #16]
 8012458:	6861      	ldr	r1, [r4, #4]
 801245a:	4299      	cmp	r1, r3
 801245c:	bfde      	ittt	le
 801245e:	2330      	movle	r3, #48	@ 0x30
 8012460:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012464:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012468:	1b92      	subs	r2, r2, r6
 801246a:	6122      	str	r2, [r4, #16]
 801246c:	f8cd a000 	str.w	sl, [sp]
 8012470:	464b      	mov	r3, r9
 8012472:	aa03      	add	r2, sp, #12
 8012474:	4621      	mov	r1, r4
 8012476:	4640      	mov	r0, r8
 8012478:	f7ff fee6 	bl	8012248 <_printf_common>
 801247c:	3001      	adds	r0, #1
 801247e:	d14a      	bne.n	8012516 <_printf_i+0x1f2>
 8012480:	f04f 30ff 	mov.w	r0, #4294967295
 8012484:	b004      	add	sp, #16
 8012486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801248a:	6823      	ldr	r3, [r4, #0]
 801248c:	f043 0320 	orr.w	r3, r3, #32
 8012490:	6023      	str	r3, [r4, #0]
 8012492:	4833      	ldr	r0, [pc, #204]	@ (8012560 <_printf_i+0x23c>)
 8012494:	2778      	movs	r7, #120	@ 0x78
 8012496:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801249a:	6823      	ldr	r3, [r4, #0]
 801249c:	6831      	ldr	r1, [r6, #0]
 801249e:	061f      	lsls	r7, r3, #24
 80124a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80124a4:	d402      	bmi.n	80124ac <_printf_i+0x188>
 80124a6:	065f      	lsls	r7, r3, #25
 80124a8:	bf48      	it	mi
 80124aa:	b2ad      	uxthmi	r5, r5
 80124ac:	6031      	str	r1, [r6, #0]
 80124ae:	07d9      	lsls	r1, r3, #31
 80124b0:	bf44      	itt	mi
 80124b2:	f043 0320 	orrmi.w	r3, r3, #32
 80124b6:	6023      	strmi	r3, [r4, #0]
 80124b8:	b11d      	cbz	r5, 80124c2 <_printf_i+0x19e>
 80124ba:	2310      	movs	r3, #16
 80124bc:	e7ac      	b.n	8012418 <_printf_i+0xf4>
 80124be:	4827      	ldr	r0, [pc, #156]	@ (801255c <_printf_i+0x238>)
 80124c0:	e7e9      	b.n	8012496 <_printf_i+0x172>
 80124c2:	6823      	ldr	r3, [r4, #0]
 80124c4:	f023 0320 	bic.w	r3, r3, #32
 80124c8:	6023      	str	r3, [r4, #0]
 80124ca:	e7f6      	b.n	80124ba <_printf_i+0x196>
 80124cc:	4616      	mov	r6, r2
 80124ce:	e7bd      	b.n	801244c <_printf_i+0x128>
 80124d0:	6833      	ldr	r3, [r6, #0]
 80124d2:	6825      	ldr	r5, [r4, #0]
 80124d4:	6961      	ldr	r1, [r4, #20]
 80124d6:	1d18      	adds	r0, r3, #4
 80124d8:	6030      	str	r0, [r6, #0]
 80124da:	062e      	lsls	r6, r5, #24
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	d501      	bpl.n	80124e4 <_printf_i+0x1c0>
 80124e0:	6019      	str	r1, [r3, #0]
 80124e2:	e002      	b.n	80124ea <_printf_i+0x1c6>
 80124e4:	0668      	lsls	r0, r5, #25
 80124e6:	d5fb      	bpl.n	80124e0 <_printf_i+0x1bc>
 80124e8:	8019      	strh	r1, [r3, #0]
 80124ea:	2300      	movs	r3, #0
 80124ec:	6123      	str	r3, [r4, #16]
 80124ee:	4616      	mov	r6, r2
 80124f0:	e7bc      	b.n	801246c <_printf_i+0x148>
 80124f2:	6833      	ldr	r3, [r6, #0]
 80124f4:	1d1a      	adds	r2, r3, #4
 80124f6:	6032      	str	r2, [r6, #0]
 80124f8:	681e      	ldr	r6, [r3, #0]
 80124fa:	6862      	ldr	r2, [r4, #4]
 80124fc:	2100      	movs	r1, #0
 80124fe:	4630      	mov	r0, r6
 8012500:	f7ed fe96 	bl	8000230 <memchr>
 8012504:	b108      	cbz	r0, 801250a <_printf_i+0x1e6>
 8012506:	1b80      	subs	r0, r0, r6
 8012508:	6060      	str	r0, [r4, #4]
 801250a:	6863      	ldr	r3, [r4, #4]
 801250c:	6123      	str	r3, [r4, #16]
 801250e:	2300      	movs	r3, #0
 8012510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012514:	e7aa      	b.n	801246c <_printf_i+0x148>
 8012516:	6923      	ldr	r3, [r4, #16]
 8012518:	4632      	mov	r2, r6
 801251a:	4649      	mov	r1, r9
 801251c:	4640      	mov	r0, r8
 801251e:	47d0      	blx	sl
 8012520:	3001      	adds	r0, #1
 8012522:	d0ad      	beq.n	8012480 <_printf_i+0x15c>
 8012524:	6823      	ldr	r3, [r4, #0]
 8012526:	079b      	lsls	r3, r3, #30
 8012528:	d413      	bmi.n	8012552 <_printf_i+0x22e>
 801252a:	68e0      	ldr	r0, [r4, #12]
 801252c:	9b03      	ldr	r3, [sp, #12]
 801252e:	4298      	cmp	r0, r3
 8012530:	bfb8      	it	lt
 8012532:	4618      	movlt	r0, r3
 8012534:	e7a6      	b.n	8012484 <_printf_i+0x160>
 8012536:	2301      	movs	r3, #1
 8012538:	4632      	mov	r2, r6
 801253a:	4649      	mov	r1, r9
 801253c:	4640      	mov	r0, r8
 801253e:	47d0      	blx	sl
 8012540:	3001      	adds	r0, #1
 8012542:	d09d      	beq.n	8012480 <_printf_i+0x15c>
 8012544:	3501      	adds	r5, #1
 8012546:	68e3      	ldr	r3, [r4, #12]
 8012548:	9903      	ldr	r1, [sp, #12]
 801254a:	1a5b      	subs	r3, r3, r1
 801254c:	42ab      	cmp	r3, r5
 801254e:	dcf2      	bgt.n	8012536 <_printf_i+0x212>
 8012550:	e7eb      	b.n	801252a <_printf_i+0x206>
 8012552:	2500      	movs	r5, #0
 8012554:	f104 0619 	add.w	r6, r4, #25
 8012558:	e7f5      	b.n	8012546 <_printf_i+0x222>
 801255a:	bf00      	nop
 801255c:	08013855 	.word	0x08013855
 8012560:	08013866 	.word	0x08013866

08012564 <memmove>:
 8012564:	4288      	cmp	r0, r1
 8012566:	b510      	push	{r4, lr}
 8012568:	eb01 0402 	add.w	r4, r1, r2
 801256c:	d902      	bls.n	8012574 <memmove+0x10>
 801256e:	4284      	cmp	r4, r0
 8012570:	4623      	mov	r3, r4
 8012572:	d807      	bhi.n	8012584 <memmove+0x20>
 8012574:	1e43      	subs	r3, r0, #1
 8012576:	42a1      	cmp	r1, r4
 8012578:	d008      	beq.n	801258c <memmove+0x28>
 801257a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801257e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012582:	e7f8      	b.n	8012576 <memmove+0x12>
 8012584:	4402      	add	r2, r0
 8012586:	4601      	mov	r1, r0
 8012588:	428a      	cmp	r2, r1
 801258a:	d100      	bne.n	801258e <memmove+0x2a>
 801258c:	bd10      	pop	{r4, pc}
 801258e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012596:	e7f7      	b.n	8012588 <memmove+0x24>

08012598 <_sbrk_r>:
 8012598:	b538      	push	{r3, r4, r5, lr}
 801259a:	4d06      	ldr	r5, [pc, #24]	@ (80125b4 <_sbrk_r+0x1c>)
 801259c:	2300      	movs	r3, #0
 801259e:	4604      	mov	r4, r0
 80125a0:	4608      	mov	r0, r1
 80125a2:	602b      	str	r3, [r5, #0]
 80125a4:	f7f0 f8c2 	bl	800272c <_sbrk>
 80125a8:	1c43      	adds	r3, r0, #1
 80125aa:	d102      	bne.n	80125b2 <_sbrk_r+0x1a>
 80125ac:	682b      	ldr	r3, [r5, #0]
 80125ae:	b103      	cbz	r3, 80125b2 <_sbrk_r+0x1a>
 80125b0:	6023      	str	r3, [r4, #0]
 80125b2:	bd38      	pop	{r3, r4, r5, pc}
 80125b4:	200027a4 	.word	0x200027a4

080125b8 <_realloc_r>:
 80125b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125bc:	4680      	mov	r8, r0
 80125be:	4615      	mov	r5, r2
 80125c0:	460c      	mov	r4, r1
 80125c2:	b921      	cbnz	r1, 80125ce <_realloc_r+0x16>
 80125c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125c8:	4611      	mov	r1, r2
 80125ca:	f7ff bc59 	b.w	8011e80 <_malloc_r>
 80125ce:	b92a      	cbnz	r2, 80125dc <_realloc_r+0x24>
 80125d0:	f7ff fbea 	bl	8011da8 <_free_r>
 80125d4:	2400      	movs	r4, #0
 80125d6:	4620      	mov	r0, r4
 80125d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125dc:	f000 f81a 	bl	8012614 <_malloc_usable_size_r>
 80125e0:	4285      	cmp	r5, r0
 80125e2:	4606      	mov	r6, r0
 80125e4:	d802      	bhi.n	80125ec <_realloc_r+0x34>
 80125e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80125ea:	d8f4      	bhi.n	80125d6 <_realloc_r+0x1e>
 80125ec:	4629      	mov	r1, r5
 80125ee:	4640      	mov	r0, r8
 80125f0:	f7ff fc46 	bl	8011e80 <_malloc_r>
 80125f4:	4607      	mov	r7, r0
 80125f6:	2800      	cmp	r0, #0
 80125f8:	d0ec      	beq.n	80125d4 <_realloc_r+0x1c>
 80125fa:	42b5      	cmp	r5, r6
 80125fc:	462a      	mov	r2, r5
 80125fe:	4621      	mov	r1, r4
 8012600:	bf28      	it	cs
 8012602:	4632      	movcs	r2, r6
 8012604:	f7ff fbc2 	bl	8011d8c <memcpy>
 8012608:	4621      	mov	r1, r4
 801260a:	4640      	mov	r0, r8
 801260c:	f7ff fbcc 	bl	8011da8 <_free_r>
 8012610:	463c      	mov	r4, r7
 8012612:	e7e0      	b.n	80125d6 <_realloc_r+0x1e>

08012614 <_malloc_usable_size_r>:
 8012614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012618:	1f18      	subs	r0, r3, #4
 801261a:	2b00      	cmp	r3, #0
 801261c:	bfbc      	itt	lt
 801261e:	580b      	ldrlt	r3, [r1, r0]
 8012620:	18c0      	addlt	r0, r0, r3
 8012622:	4770      	bx	lr

08012624 <_init>:
 8012624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012626:	bf00      	nop
 8012628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801262a:	bc08      	pop	{r3}
 801262c:	469e      	mov	lr, r3
 801262e:	4770      	bx	lr

08012630 <_fini>:
 8012630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012632:	bf00      	nop
 8012634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012636:	bc08      	pop	{r3}
 8012638:	469e      	mov	lr, r3
 801263a:	4770      	bx	lr
