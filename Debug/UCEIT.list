
UCEIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e850  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  0800ea30  0800ea30  0000fa30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eca4  0800eca4  000101d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800eca4  0800eca4  0000fca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ecac  0800ecac  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ecac  0800ecac  0000fcac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ecb0  0800ecb0  0000fcb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ecb4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002070  200001d8  0800ee88  000101d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002248  0800ee88  00010248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d74a  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004706  00000000  00000000  0002d94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  00032058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001400  00000000  00000000  00033aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bdeb  00000000  00000000  00034ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022dbd  00000000  00000000  00060c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114137  00000000  00000000  00083a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00197b7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077c0  00000000  00000000  00197bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0019f384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ea18 	.word	0x0800ea18

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800ea18 	.word	0x0800ea18

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2iz>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d215      	bcs.n	8000bb2 <__aeabi_d2iz+0x36>
 8000b86:	d511      	bpl.n	8000bac <__aeabi_d2iz+0x30>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d912      	bls.n	8000bb8 <__aeabi_d2iz+0x3c>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d105      	bne.n	8000bc4 <__aeabi_d2iz+0x48>
 8000bb8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2uiz>:
 8000bcc:	004a      	lsls	r2, r1, #1
 8000bce:	d211      	bcs.n	8000bf4 <__aeabi_d2uiz+0x28>
 8000bd0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd4:	d211      	bcs.n	8000bfa <__aeabi_d2uiz+0x2e>
 8000bd6:	d50d      	bpl.n	8000bf4 <__aeabi_d2uiz+0x28>
 8000bd8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be0:	d40e      	bmi.n	8000c00 <__aeabi_d2uiz+0x34>
 8000be2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfe:	d102      	bne.n	8000c06 <__aeabi_d2uiz+0x3a>
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	4770      	bx	lr
 8000c06:	f04f 0000 	mov.w	r0, #0
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b96a 	b.w	8000ef8 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	460c      	mov	r4, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14e      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c48:	4694      	mov	ip, r2
 8000c4a:	458c      	cmp	ip, r1
 8000c4c:	4686      	mov	lr, r0
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	d962      	bls.n	8000d1a <__udivmoddi4+0xde>
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	4319      	orrs	r1, r3
 8000c66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f f68c 	uxth.w	r6, ip
 8000c72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb04 f106 	mul.w	r1, r4, r6
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c92:	f080 8112 	bcs.w	8000eba <__udivmoddi4+0x27e>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 810f 	bls.w	8000eba <__udivmoddi4+0x27e>
 8000c9c:	3c02      	subs	r4, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a59      	subs	r1, r3, r1
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000caa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb00 f606 	mul.w	r6, r0, r6
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x94>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc2:	f080 80fc 	bcs.w	8000ebe <__udivmoddi4+0x282>
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	f240 80f9 	bls.w	8000ebe <__udivmoddi4+0x282>
 8000ccc:	4463      	add	r3, ip
 8000cce:	3802      	subs	r0, #2
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa6>
 8000cda:	40d3      	lsrs	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xba>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb4>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d146      	bne.n	8000d8c <__udivmoddi4+0x150>
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xcc>
 8000d02:	4290      	cmp	r0, r2
 8000d04:	f0c0 80f0 	bcc.w	8000ee8 <__udivmoddi4+0x2ac>
 8000d08:	1a86      	subs	r6, r0, r2
 8000d0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d0e6      	beq.n	8000ce2 <__udivmoddi4+0xa6>
 8000d14:	e9c5 6300 	strd	r6, r3, [r5]
 8000d18:	e7e3      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 8090 	bne.w	8000e40 <__udivmoddi4+0x204>
 8000d20:	eba1 040c 	sub.w	r4, r1, ip
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa1f f78c 	uxth.w	r7, ip
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb07 f006 	mul.w	r0, r7, r6
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x11c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x11a>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f200 80cd 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d56:	4626      	mov	r6, r4
 8000d58:	1a1c      	subs	r4, r3, r0
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d62:	fb08 4410 	mls	r4, r8, r0, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb00 f707 	mul.w	r7, r0, r7
 8000d6e:	429f      	cmp	r7, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x148>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x146>
 8000d7c:	429f      	cmp	r7, r3
 8000d7e:	f200 80b0 	bhi.w	8000ee2 <__udivmoddi4+0x2a6>
 8000d82:	4620      	mov	r0, r4
 8000d84:	1bdb      	subs	r3, r3, r7
 8000d86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0x9c>
 8000d8c:	f1c1 0620 	rsb	r6, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 f706 	lsr.w	r7, r2, r6
 8000d96:	431f      	orrs	r7, r3
 8000d98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000da0:	ea43 030c 	orr.w	r3, r3, ip
 8000da4:	40f4      	lsrs	r4, r6
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	0c38      	lsrs	r0, r7, #16
 8000dac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db0:	fbb4 fef0 	udiv	lr, r4, r0
 8000db4:	fa1f fc87 	uxth.w	ip, r7
 8000db8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc4:	45a1      	cmp	r9, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	d90a      	bls.n	8000de2 <__udivmoddi4+0x1a6>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dd2:	f080 8084 	bcs.w	8000ede <__udivmoddi4+0x2a2>
 8000dd6:	45a1      	cmp	r9, r4
 8000dd8:	f240 8081 	bls.w	8000ede <__udivmoddi4+0x2a2>
 8000ddc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	eba4 0409 	sub.w	r4, r4, r9
 8000de6:	fa1f f983 	uxth.w	r9, r3
 8000dea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dee:	fb00 4413 	mls	r4, r0, r3, r4
 8000df2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1d2>
 8000dfe:	193c      	adds	r4, r7, r4
 8000e00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e04:	d267      	bcs.n	8000ed6 <__udivmoddi4+0x29a>
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0x29a>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e12:	fba0 9302 	umull	r9, r3, r0, r2
 8000e16:	eba4 040c 	sub.w	r4, r4, ip
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	46ce      	mov	lr, r9
 8000e1e:	469c      	mov	ip, r3
 8000e20:	d351      	bcc.n	8000ec6 <__udivmoddi4+0x28a>
 8000e22:	d04e      	beq.n	8000ec2 <__udivmoddi4+0x286>
 8000e24:	b155      	cbz	r5, 8000e3c <__udivmoddi4+0x200>
 8000e26:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e32:	40cb      	lsrs	r3, r1
 8000e34:	431e      	orrs	r6, r3
 8000e36:	40cc      	lsrs	r4, r1
 8000e38:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	e750      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f103 	lsr.w	r1, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e50:	4094      	lsls	r4, r2
 8000e52:	430c      	orrs	r4, r1
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e5c:	fa1f f78c 	uxth.w	r7, ip
 8000e60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e64:	fb08 3110 	mls	r1, r8, r0, r3
 8000e68:	0c23      	lsrs	r3, r4, #16
 8000e6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6e:	fb00 f107 	mul.w	r1, r0, r7
 8000e72:	4299      	cmp	r1, r3
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x24c>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7e:	d22c      	bcs.n	8000eda <__udivmoddi4+0x29e>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d92a      	bls.n	8000eda <__udivmoddi4+0x29e>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e90:	fb08 3311 	mls	r3, r8, r1, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb01 f307 	mul.w	r3, r1, r7
 8000e9c:	42a3      	cmp	r3, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x276>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea8:	d213      	bcs.n	8000ed2 <__udivmoddi4+0x296>
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	d911      	bls.n	8000ed2 <__udivmoddi4+0x296>
 8000eae:	3902      	subs	r1, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	1ae4      	subs	r4, r4, r3
 8000eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb8:	e739      	b.n	8000d2e <__udivmoddi4+0xf2>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	e6f0      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e706      	b.n	8000cd0 <__udivmoddi4+0x94>
 8000ec2:	45c8      	cmp	r8, r9
 8000ec4:	d2ae      	bcs.n	8000e24 <__udivmoddi4+0x1e8>
 8000ec6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7a8      	b.n	8000e24 <__udivmoddi4+0x1e8>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	e7ed      	b.n	8000eb2 <__udivmoddi4+0x276>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e799      	b.n	8000e0e <__udivmoddi4+0x1d2>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e7d4      	b.n	8000e88 <__udivmoddi4+0x24c>
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	e77f      	b.n	8000de2 <__udivmoddi4+0x1a6>
 8000ee2:	4463      	add	r3, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e74d      	b.n	8000d84 <__udivmoddi4+0x148>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	4623      	mov	r3, r4
 8000eec:	4608      	mov	r0, r1
 8000eee:	e70f      	b.n	8000d10 <__udivmoddi4+0xd4>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	e730      	b.n	8000d58 <__udivmoddi4+0x11c>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
ADC_HandleTypeDef hadc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	@ 0x30
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2220      	movs	r2, #32
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f00d f9ad 	bl	800e274 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f1a:	4b33      	ldr	r3, [pc, #204]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f1c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f22:	4b31      	ldr	r3, [pc, #196]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f30:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f36:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f42:	4b29      	ldr	r3, [pc, #164]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f44:	2204      	movs	r2, #4
 8000f46:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f48:	4b27      	ldr	r3, [pc, #156]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f4e:	4b26      	ldr	r3, [pc, #152]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f54:	4b24      	ldr	r3, [pc, #144]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f5a:	4b23      	ldr	r3, [pc, #140]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000f62:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f64:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000f68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f6c:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8000f70:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f80:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f88:	4817      	ldr	r0, [pc, #92]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f8a:	f001 fcc5 	bl	8002918 <HAL_ADC_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000f94:	f000 ff7d 	bl	8001e92 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4811      	ldr	r0, [pc, #68]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000fa4:	f002 fdb6 	bl	8003b14 <HAL_ADCEx_MultiModeConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000fae:	f000 ff70 	bl	8001e92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <MX_ADC1_Init+0xf0>)
 8000fb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fbe:	237f      	movs	r3, #127	@ 0x7f
 8000fc0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4806      	ldr	r0, [pc, #24]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000fd0:	f001 ffb6 	bl	8002f40 <HAL_ADC_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fda:	f000 ff5a 	bl	8001e92 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	3730      	adds	r7, #48	@ 0x30
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200001f4 	.word	0x200001f4
 8000fec:	04300002 	.word	0x04300002

08000ff0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f00d f939 	bl	800e274 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001002:	4b2c      	ldr	r3, [pc, #176]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001004:	4a2c      	ldr	r2, [pc, #176]	@ (80010b8 <MX_ADC2_Init+0xc8>)
 8001006:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001008:	4b2a      	ldr	r3, [pc, #168]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 800100a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800100e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001010:	4b28      	ldr	r3, [pc, #160]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001016:	4b27      	ldr	r3, [pc, #156]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800101c:	4b25      	ldr	r3, [pc, #148]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001022:	4b24      	ldr	r3, [pc, #144]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001024:	2200      	movs	r2, #0
 8001026:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001028:	4b22      	ldr	r3, [pc, #136]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 800102a:	2204      	movs	r2, #4
 800102c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800102e:	4b21      	ldr	r3, [pc, #132]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001030:	2200      	movs	r2, #0
 8001032:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001034:	4b1f      	ldr	r3, [pc, #124]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001036:	2200      	movs	r2, #0
 8001038:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800103a:	4b1e      	ldr	r3, [pc, #120]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 800103c:	2201      	movs	r2, #1
 800103e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001040:	4b1c      	ldr	r3, [pc, #112]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001048:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 800104a:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800104e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001050:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001052:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8001056:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001058:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001062:	2200      	movs	r2, #0
 8001064:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001066:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800106e:	4811      	ldr	r0, [pc, #68]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001070:	f001 fc52 	bl	8002918 <HAL_ADC_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800107a:	f000 ff0a 	bl	8001e92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800107e:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <MX_ADC2_Init+0xcc>)
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001082:	2306      	movs	r3, #6
 8001084:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800108a:	237f      	movs	r3, #127	@ 0x7f
 800108c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108e:	2304      	movs	r3, #4
 8001090:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001096:	463b      	mov	r3, r7
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 800109c:	f001 ff50 	bl	8002f40 <HAL_ADC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80010a6:	f000 fef4 	bl	8001e92 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3720      	adds	r7, #32
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000260 	.word	0x20000260
 80010b8:	50000100 	.word	0x50000100
 80010bc:	0c900008 	.word	0x0c900008

080010c0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	@ 0x30
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2220      	movs	r2, #32
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f00d f8cb 	bl	800e274 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80010de:	4b32      	ldr	r3, [pc, #200]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 80010e0:	4a32      	ldr	r2, [pc, #200]	@ (80011ac <MX_ADC3_Init+0xec>)
 80010e2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010e4:	4b30      	ldr	r3, [pc, #192]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 80010e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010ea:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010ec:	4b2e      	ldr	r3, [pc, #184]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f2:	4b2d      	ldr	r3, [pc, #180]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80010f8:	4b2b      	ldr	r3, [pc, #172]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010fe:	4b2a      	ldr	r3, [pc, #168]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001104:	4b28      	ldr	r3, [pc, #160]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001106:	2204      	movs	r2, #4
 8001108:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800110a:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 800110c:	2200      	movs	r2, #0
 800110e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001110:	4b25      	ldr	r3, [pc, #148]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001112:	2200      	movs	r2, #0
 8001114:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001116:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001118:	2201      	movs	r2, #1
 800111a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800111c:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001124:	4b20      	ldr	r3, [pc, #128]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001126:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800112a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800112c:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 800112e:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8001132:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001134:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 800113e:	2200      	movs	r2, #0
 8001140:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800114a:	4817      	ldr	r0, [pc, #92]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 800114c:	f001 fbe4 	bl	8002918 <HAL_ADC_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8001156:	f000 fe9c 	bl	8001e92 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800115e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001162:	4619      	mov	r1, r3
 8001164:	4810      	ldr	r0, [pc, #64]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001166:	f002 fcd5 	bl	8003b14 <HAL_ADCEx_MultiModeConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001170:	f000 fe8f 	bl	8001e92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001174:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <MX_ADC3_Init+0xf0>)
 8001176:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001178:	2306      	movs	r3, #6
 800117a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001180:	237f      	movs	r3, #127	@ 0x7f
 8001182:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001184:	2304      	movs	r3, #4
 8001186:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001192:	f001 fed5 	bl	8002f40 <HAL_ADC_ConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 800119c:	f000 fe79 	bl	8001e92 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	3730      	adds	r7, #48	@ 0x30
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200002cc 	.word	0x200002cc
 80011ac:	50000400 	.word	0x50000400
 80011b0:	04300002 	.word	0x04300002

080011b4 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ba:	463b      	mov	r3, r7
 80011bc:	2220      	movs	r2, #32
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f00d f857 	bl	800e274 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80011c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011c8:	4a2c      	ldr	r2, [pc, #176]	@ (800127c <MX_ADC4_Init+0xc8>)
 80011ca:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011d2:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80011d4:	4b28      	ldr	r3, [pc, #160]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011da:	4b27      	ldr	r3, [pc, #156]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80011e0:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e6:	4b24      	ldr	r3, [pc, #144]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ec:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011ee:	2204      	movs	r2, #4
 80011f0:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80011f2:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <MX_ADC4_Init+0xc4>)
 8001200:	2201      	movs	r2, #1
 8001202:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001204:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <MX_ADC4_Init+0xc4>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800120c:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <MX_ADC4_Init+0xc4>)
 800120e:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8001212:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001214:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <MX_ADC4_Init+0xc4>)
 8001216:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800121a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800121c:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <MX_ADC4_Init+0xc4>)
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <MX_ADC4_Init+0xc4>)
 8001226:	2200      	movs	r2, #0
 8001228:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 800122a:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <MX_ADC4_Init+0xc4>)
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001232:	4811      	ldr	r0, [pc, #68]	@ (8001278 <MX_ADC4_Init+0xc4>)
 8001234:	f001 fb70 	bl	8002918 <HAL_ADC_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC4_Init+0x8e>
  {
    Error_Handler();
 800123e:	f000 fe28 	bl	8001e92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <MX_ADC4_Init+0xcc>)
 8001244:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001246:	2306      	movs	r3, #6
 8001248:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800124e:	237f      	movs	r3, #127	@ 0x7f
 8001250:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001252:	2304      	movs	r3, #4
 8001254:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	@ (8001278 <MX_ADC4_Init+0xc4>)
 8001260:	f001 fe6e 	bl	8002f40 <HAL_ADC_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_ADC4_Init+0xba>
  {
    Error_Handler();
 800126a:	f000 fe12 	bl	8001e92 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000338 	.word	0x20000338
 800127c:	50000500 	.word	0x50000500
 8001280:	04300002 	.word	0x04300002

08001284 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128a:	463b      	mov	r3, r7
 800128c:	2220      	movs	r2, #32
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f00c ffef 	bl	800e274 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001296:	4b2c      	ldr	r3, [pc, #176]	@ (8001348 <MX_ADC5_Init+0xc4>)
 8001298:	4a2c      	ldr	r2, [pc, #176]	@ (800134c <MX_ADC5_Init+0xc8>)
 800129a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800129c:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <MX_ADC5_Init+0xc4>)
 800129e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012a2:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80012a4:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012aa:	4b27      	ldr	r3, [pc, #156]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80012b0:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012b6:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012bc:	4b22      	ldr	r3, [pc, #136]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012be:	2204      	movs	r2, #4
 80012c0:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012de:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 80012e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80012e4:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012e6:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80012ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80012ec:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80012fa:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001302:	4811      	ldr	r0, [pc, #68]	@ (8001348 <MX_ADC5_Init+0xc4>)
 8001304:	f001 fb08 	bl	8002918 <HAL_ADC_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC5_Init+0x8e>
  {
    Error_Handler();
 800130e:	f000 fdc0 	bl	8001e92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001312:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <MX_ADC5_Init+0xcc>)
 8001314:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001316:	2306      	movs	r3, #6
 8001318:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800131e:	237f      	movs	r3, #127	@ 0x7f
 8001320:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001322:	2304      	movs	r3, #4
 8001324:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800132a:	463b      	mov	r3, r7
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	@ (8001348 <MX_ADC5_Init+0xc4>)
 8001330:	f001 fe06 	bl	8002f40 <HAL_ADC_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADC5_Init+0xba>
  {
    Error_Handler();
 800133a:	f000 fdaa 	bl	8001e92 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200003a4 	.word	0x200003a4
 800134c:	50000600 	.word	0x50000600
 8001350:	19200040 	.word	0x19200040

08001354 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0a6      	sub	sp, #152	@ 0x98
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001370:	2254      	movs	r2, #84	@ 0x54
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f00c ff7d 	bl	800e274 <memset>
  if(adcHandle->Instance==ADC1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001382:	d141      	bne.n	8001408 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001384:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001388:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800138a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800138e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001390:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001394:	4618      	mov	r0, r3
 8001396:	f005 fa93 	bl	80068c0 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80013a0:	f000 fd77 	bl	8001e92 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013a4:	4ba7      	ldr	r3, [pc, #668]	@ (8001644 <HAL_ADC_MspInit+0x2f0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	4aa6      	ldr	r2, [pc, #664]	@ (8001644 <HAL_ADC_MspInit+0x2f0>)
 80013ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013ae:	4ba5      	ldr	r3, [pc, #660]	@ (8001644 <HAL_ADC_MspInit+0x2f0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d10b      	bne.n	80013ce <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013b6:	4ba4      	ldr	r3, [pc, #656]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	4aa3      	ldr	r2, [pc, #652]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80013bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c2:	4ba1      	ldr	r3, [pc, #644]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b9e      	ldr	r3, [pc, #632]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	4a9d      	ldr	r2, [pc, #628]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013da:	4b9b      	ldr	r3, [pc, #620]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ec:	2303      	movs	r3, #3
 80013ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001402:	f002 fd9f 	bl	8003f44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8001406:	e119      	b.n	800163c <HAL_ADC_MspInit+0x2e8>
  else if(adcHandle->Instance==ADC2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a8f      	ldr	r2, [pc, #572]	@ (800164c <HAL_ADC_MspInit+0x2f8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d141      	bne.n	8001496 <HAL_ADC_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001416:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001418:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800141c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001422:	4618      	mov	r0, r3
 8001424:	f005 fa4c 	bl	80068c0 <HAL_RCCEx_PeriphCLKConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_ADC_MspInit+0xde>
      Error_Handler();
 800142e:	f000 fd30 	bl	8001e92 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001432:	4b84      	ldr	r3, [pc, #528]	@ (8001644 <HAL_ADC_MspInit+0x2f0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	4a82      	ldr	r2, [pc, #520]	@ (8001644 <HAL_ADC_MspInit+0x2f0>)
 800143a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800143c:	4b81      	ldr	r3, [pc, #516]	@ (8001644 <HAL_ADC_MspInit+0x2f0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d10b      	bne.n	800145c <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001444:	4b80      	ldr	r3, [pc, #512]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001448:	4a7f      	ldr	r2, [pc, #508]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 800144a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800144e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001450:	4b7d      	ldr	r3, [pc, #500]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001454:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
 800145a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4b7a      	ldr	r3, [pc, #488]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001460:	4a79      	ldr	r2, [pc, #484]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001468:	4b77      	ldr	r3, [pc, #476]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	623b      	str	r3, [r7, #32]
 8001472:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001474:	2340      	movs	r3, #64	@ 0x40
 8001476:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147a:	2303      	movs	r3, #3
 800147c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800148a:	4619      	mov	r1, r3
 800148c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001490:	f002 fd58 	bl	8003f44 <HAL_GPIO_Init>
}
 8001494:	e0d2      	b.n	800163c <HAL_ADC_MspInit+0x2e8>
  else if(adcHandle->Instance==ADC3)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a6d      	ldr	r2, [pc, #436]	@ (8001650 <HAL_ADC_MspInit+0x2fc>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d140      	bne.n	8001522 <HAL_ADC_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014a4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014a6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80014aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014b0:	4618      	mov	r0, r3
 80014b2:	f005 fa05 	bl	80068c0 <HAL_RCCEx_PeriphCLKConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_ADC_MspInit+0x16c>
      Error_Handler();
 80014bc:	f000 fce9 	bl	8001e92 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014c0:	4b64      	ldr	r3, [pc, #400]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	4a63      	ldr	r2, [pc, #396]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 80014c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014ca:	4b62      	ldr	r3, [pc, #392]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d10b      	bne.n	80014ea <HAL_ADC_MspInit+0x196>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4a5c      	ldr	r2, [pc, #368]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4b5a      	ldr	r3, [pc, #360]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b57      	ldr	r3, [pc, #348]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4a56      	ldr	r2, [pc, #344]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4b54      	ldr	r3, [pc, #336]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
 8001500:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001502:	2302      	movs	r3, #2
 8001504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001508:	2303      	movs	r3, #3
 800150a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001518:	4619      	mov	r1, r3
 800151a:	484f      	ldr	r0, [pc, #316]	@ (8001658 <HAL_ADC_MspInit+0x304>)
 800151c:	f002 fd12 	bl	8003f44 <HAL_GPIO_Init>
}
 8001520:	e08c      	b.n	800163c <HAL_ADC_MspInit+0x2e8>
  else if(adcHandle->Instance==ADC4)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a4d      	ldr	r2, [pc, #308]	@ (800165c <HAL_ADC_MspInit+0x308>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d141      	bne.n	80015b0 <HAL_ADC_MspInit+0x25c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800152c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001530:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001532:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001536:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001538:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800153c:	4618      	mov	r0, r3
 800153e:	f005 f9bf 	bl	80068c0 <HAL_RCCEx_PeriphCLKConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001548:	f000 fca3 	bl	8001e92 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800154c:	4b41      	ldr	r3, [pc, #260]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4a40      	ldr	r2, [pc, #256]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 8001554:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001556:	4b3f      	ldr	r3, [pc, #252]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d10b      	bne.n	8001576 <HAL_ADC_MspInit+0x222>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800155e:	4b3a      	ldr	r3, [pc, #232]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	4a39      	ldr	r2, [pc, #228]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156a:	4b37      	ldr	r3, [pc, #220]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001576:	4b34      	ldr	r3, [pc, #208]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a33      	ldr	r2, [pc, #204]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 800157c:	f043 0310 	orr.w	r3, r3, #16
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b31      	ldr	r3, [pc, #196]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800158e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001592:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001596:	2303      	movs	r3, #3
 8001598:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80015a6:	4619      	mov	r1, r3
 80015a8:	482d      	ldr	r0, [pc, #180]	@ (8001660 <HAL_ADC_MspInit+0x30c>)
 80015aa:	f002 fccb 	bl	8003f44 <HAL_GPIO_Init>
}
 80015ae:	e045      	b.n	800163c <HAL_ADC_MspInit+0x2e8>
  else if(adcHandle->Instance==ADC5)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001664 <HAL_ADC_MspInit+0x310>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d140      	bne.n	800163c <HAL_ADC_MspInit+0x2e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015be:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80015c4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015ca:	4618      	mov	r0, r3
 80015cc:	f005 f978 	bl	80068c0 <HAL_RCCEx_PeriphCLKConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_ADC_MspInit+0x286>
      Error_Handler();
 80015d6:	f000 fc5c 	bl	8001e92 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015da:	4b1e      	ldr	r3, [pc, #120]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 80015e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d10b      	bne.n	8001604 <HAL_ADC_MspInit+0x2b0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80015ec:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f0:	4a15      	ldr	r2, [pc, #84]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80015f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f8:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001608:	4a0f      	ldr	r2, [pc, #60]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 800160a:	f043 0310 	orr.w	r3, r3, #16
 800160e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001610:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800161c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001620:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001624:	2303      	movs	r3, #3
 8001626:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001630:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001634:	4619      	mov	r1, r3
 8001636:	480a      	ldr	r0, [pc, #40]	@ (8001660 <HAL_ADC_MspInit+0x30c>)
 8001638:	f002 fc84 	bl	8003f44 <HAL_GPIO_Init>
}
 800163c:	bf00      	nop
 800163e:	3798      	adds	r7, #152	@ 0x98
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000410 	.word	0x20000410
 8001648:	40021000 	.word	0x40021000
 800164c:	50000100 	.word	0x50000100
 8001650:	50000400 	.word	0x50000400
 8001654:	20000414 	.word	0x20000414
 8001658:	48000400 	.word	0x48000400
 800165c:	50000500 	.word	0x50000500
 8001660:	48001000 	.word	0x48001000
 8001664:	50000600 	.word	0x50000600

08001668 <initDbleBuf>:
#include "stdlib.h"
#include "buffer.h"

// Initialize Double Buffer
int32_t *initDbleBuf (dbleBuf_t *buffer, uint32_t size)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
    buffer->windex = 0;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
    buffer->rindex = size;
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	609a      	str	r2, [r3, #8]
    buffer->size = size;
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	601a      	str	r2, [r3, #0]
    buffer->data = (int32_t *) calloc (2 * size, sizeof(int32_t));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2104      	movs	r1, #4
 800168a:	4618      	mov	r0, r3
 800168c:	f00c fcf4 	bl	800e078 <calloc>
 8001690:	4603      	mov	r3, r0
 8001692:	461a      	mov	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	60da      	str	r2, [r3, #12]
    return buffer->data;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <readDbleBuf>:
    }
}

// Read Double Buffer
int readDbleBuf (dbleBuf_t *buffer, int32_t *array)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
    int overrun = (buffer->windex >= buffer->rindex) && !(buffer->windex >= buffer->rindex + buffer->size); // Detect data overrun
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	db0a      	blt.n	80016d0 <readDbleBuf+0x2c>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6899      	ldr	r1, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	440b      	add	r3, r1
 80016c8:	429a      	cmp	r2, r3
 80016ca:	da01      	bge.n	80016d0 <readDbleBuf+0x2c>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <readDbleBuf+0x2e>
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
    int i;
    for (i = 0; i < buffer->size; i++, (buffer->rindex)++) { // Read the data in one buffer into array
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	e013      	b.n	8001702 <readDbleBuf+0x5e>
        array[i] = buffer->data[buffer->rindex];
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	441a      	add	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	6839      	ldr	r1, [r7, #0]
 80016ec:	440b      	add	r3, r1
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < buffer->size; i++, (buffer->rindex)++) { // Read the data in one buffer into array
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	3301      	adds	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbe6      	blt.n	80016da <readDbleBuf+0x36>
    }
    if (buffer->rindex >= 2*buffer->size) {// Circular buffering
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	429a      	cmp	r2, r3
 8001718:	db02      	blt.n	8001720 <readDbleBuf+0x7c>
        buffer->rindex = 0;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
    }
    return overrun;
 8001720:	68bb      	ldr	r3, [r7, #8]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08c      	sub	sp, #48	@ 0x30
 8001734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001746:	4b5f      	ldr	r3, [pc, #380]	@ (80018c4 <MX_GPIO_Init+0x194>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174a:	4a5e      	ldr	r2, [pc, #376]	@ (80018c4 <MX_GPIO_Init+0x194>)
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001752:	4b5c      	ldr	r3, [pc, #368]	@ (80018c4 <MX_GPIO_Init+0x194>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	4b59      	ldr	r3, [pc, #356]	@ (80018c4 <MX_GPIO_Init+0x194>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	4a58      	ldr	r2, [pc, #352]	@ (80018c4 <MX_GPIO_Init+0x194>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800176a:	4b56      	ldr	r3, [pc, #344]	@ (80018c4 <MX_GPIO_Init+0x194>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001776:	4b53      	ldr	r3, [pc, #332]	@ (80018c4 <MX_GPIO_Init+0x194>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177a:	4a52      	ldr	r2, [pc, #328]	@ (80018c4 <MX_GPIO_Init+0x194>)
 800177c:	f043 0320 	orr.w	r3, r3, #32
 8001780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001782:	4b50      	ldr	r3, [pc, #320]	@ (80018c4 <MX_GPIO_Init+0x194>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001786:	f003 0320 	and.w	r3, r3, #32
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	4b4d      	ldr	r3, [pc, #308]	@ (80018c4 <MX_GPIO_Init+0x194>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001792:	4a4c      	ldr	r2, [pc, #304]	@ (80018c4 <MX_GPIO_Init+0x194>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800179a:	4b4a      	ldr	r3, [pc, #296]	@ (80018c4 <MX_GPIO_Init+0x194>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	4b47      	ldr	r3, [pc, #284]	@ (80018c4 <MX_GPIO_Init+0x194>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017aa:	4a46      	ldr	r2, [pc, #280]	@ (80018c4 <MX_GPIO_Init+0x194>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b2:	4b44      	ldr	r3, [pc, #272]	@ (80018c4 <MX_GPIO_Init+0x194>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017be:	4b41      	ldr	r3, [pc, #260]	@ (80018c4 <MX_GPIO_Init+0x194>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c2:	4a40      	ldr	r2, [pc, #256]	@ (80018c4 <MX_GPIO_Init+0x194>)
 80017c4:	f043 0308 	orr.w	r3, r3, #8
 80017c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ca:	4b3e      	ldr	r3, [pc, #248]	@ (80018c4 <MX_GPIO_Init+0x194>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80017d6:	2200      	movs	r2, #0
 80017d8:	f64b 413c 	movw	r1, #48188	@ 0xbc3c
 80017dc:	483a      	ldr	r0, [pc, #232]	@ (80018c8 <MX_GPIO_Init+0x198>)
 80017de:	f002 fd33 	bl	8004248 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80017e2:	2200      	movs	r2, #0
 80017e4:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 80017e8:	4838      	ldr	r0, [pc, #224]	@ (80018cc <MX_GPIO_Init+0x19c>)
 80017ea:	f002 fd2d 	bl	8004248 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80017f4:	4836      	ldr	r0, [pc, #216]	@ (80018d0 <MX_GPIO_Init+0x1a0>)
 80017f6:	f002 fd27 	bl	8004248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80017fa:	2200      	movs	r2, #0
 80017fc:	f64f 710f 	movw	r1, #65295	@ 0xff0f
 8001800:	4834      	ldr	r0, [pc, #208]	@ (80018d4 <MX_GPIO_Init+0x1a4>)
 8001802:	f002 fd21 	bl	8004248 <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE10 PE11 PE12 PE13
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001806:	f64b 433c 	movw	r3, #48188	@ 0xbc3c
 800180a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	4619      	mov	r1, r3
 800181e:	482a      	ldr	r0, [pc, #168]	@ (80018c8 <MX_GPIO_Init+0x198>)
 8001820:	f002 fb90 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001824:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8001828:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4619      	mov	r1, r3
 800183c:	4823      	ldr	r0, [pc, #140]	@ (80018cc <MX_GPIO_Init+0x19c>)
 800183e:	f002 fb81 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001842:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 031c 	add.w	r3, r7, #28
 8001858:	4619      	mov	r1, r3
 800185a:	481d      	ldr	r0, [pc, #116]	@ (80018d0 <MX_GPIO_Init+0x1a0>)
 800185c:	f002 fb72 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001860:	f64f 730f 	movw	r3, #65295	@ 0xff0f
 8001864:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	4816      	ldr	r0, [pc, #88]	@ (80018d4 <MX_GPIO_Init+0x1a4>)
 800187a:	f002 fb63 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800187e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001890:	2300      	movs	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189e:	f002 fb51 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018a2:	23f0      	movs	r3, #240	@ 0xf0
 80018a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4807      	ldr	r0, [pc, #28]	@ (80018d4 <MX_GPIO_Init+0x1a4>)
 80018b6:	f002 fb45 	bl	8003f44 <HAL_GPIO_Init>

}
 80018ba:	bf00      	nop
 80018bc:	3730      	adds	r7, #48	@ 0x30
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	48001000 	.word	0x48001000
 80018cc:	48000800 	.word	0x48000800
 80018d0:	48000400 	.word	0x48000400
 80018d4:	48000c00 	.word	0x48000c00

080018d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018de:	f000 fd78 	bl	80023d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e2:	f000 f8cd 	bl	8001a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e6:	f7ff ff23 	bl	8001730 <MX_GPIO_Init>
  MX_ADC1_Init();
 80018ea:	f7ff fb07 	bl	8000efc <MX_ADC1_Init>
  MX_ADC2_Init();
 80018ee:	f7ff fb7f 	bl	8000ff0 <MX_ADC2_Init>
  MX_ADC3_Init();
 80018f2:	f7ff fbe5 	bl	80010c0 <MX_ADC3_Init>
  MX_ADC4_Init();
 80018f6:	f7ff fc5d 	bl	80011b4 <MX_ADC4_Init>
  MX_ADC5_Init();
 80018fa:	f7ff fcc3 	bl	8001284 <MX_ADC5_Init>
  MX_SPI1_Init();
 80018fe:	f000 facf 	bl	8001ea0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001902:	f000 fc1b 	bl	800213c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001906:	f000 fca9 	bl	800225c <MX_TIM2_Init>
  MX_USB_Device_Init();
 800190a:	f00a fe7b 	bl	800c604 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800190e:	217f      	movs	r1, #127	@ 0x7f
 8001910:	484e      	ldr	r0, [pc, #312]	@ (8001a4c <main+0x174>)
 8001912:	f002 f89d 	bl	8003a50 <HAL_ADCEx_Calibration_Start>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <main+0x48>
  	  Error_Handler();
 800191c:	f000 fab9 	bl	8001e92 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8001920:	217f      	movs	r1, #127	@ 0x7f
 8001922:	484b      	ldr	r0, [pc, #300]	@ (8001a50 <main+0x178>)
 8001924:	f002 f894 	bl	8003a50 <HAL_ADCEx_Calibration_Start>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <main+0x5a>
  	  Error_Handler();
 800192e:	f000 fab0 	bl	8001e92 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED) != HAL_OK)
 8001932:	217f      	movs	r1, #127	@ 0x7f
 8001934:	4847      	ldr	r0, [pc, #284]	@ (8001a54 <main+0x17c>)
 8001936:	f002 f88b 	bl	8003a50 <HAL_ADCEx_Calibration_Start>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <main+0x6c>
  	  Error_Handler();
 8001940:	f000 faa7 	bl	8001e92 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED) != HAL_OK)
 8001944:	217f      	movs	r1, #127	@ 0x7f
 8001946:	4844      	ldr	r0, [pc, #272]	@ (8001a58 <main+0x180>)
 8001948:	f002 f882 	bl	8003a50 <HAL_ADCEx_Calibration_Start>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <main+0x7e>
  	  Error_Handler();
 8001952:	f000 fa9e 	bl	8001e92 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED) != HAL_OK)
 8001956:	217f      	movs	r1, #127	@ 0x7f
 8001958:	4840      	ldr	r0, [pc, #256]	@ (8001a5c <main+0x184>)
 800195a:	f002 f879 	bl	8003a50 <HAL_ADCEx_Calibration_Start>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <main+0x90>
  	  Error_Handler();
 8001964:	f000 fa95 	bl	8001e92 <Error_Handler>

  if (HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8001968:	4838      	ldr	r0, [pc, #224]	@ (8001a4c <main+0x174>)
 800196a:	f001 f991 	bl	8002c90 <HAL_ADC_Start_IT>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <main+0xa0>
  	  Error_Handler();
 8001974:	f000 fa8d 	bl	8001e92 <Error_Handler>
  if (HAL_ADC_Start_IT(&hadc2) != HAL_OK)
 8001978:	4835      	ldr	r0, [pc, #212]	@ (8001a50 <main+0x178>)
 800197a:	f001 f989 	bl	8002c90 <HAL_ADC_Start_IT>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <main+0xb0>
  	  Error_Handler();
 8001984:	f000 fa85 	bl	8001e92 <Error_Handler>
  if (HAL_ADC_Start_IT(&hadc3) != HAL_OK)
 8001988:	4832      	ldr	r0, [pc, #200]	@ (8001a54 <main+0x17c>)
 800198a:	f001 f981 	bl	8002c90 <HAL_ADC_Start_IT>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <main+0xc0>
  	  Error_Handler();
 8001994:	f000 fa7d 	bl	8001e92 <Error_Handler>
  if (HAL_ADC_Start_IT(&hadc4) != HAL_OK)
 8001998:	482f      	ldr	r0, [pc, #188]	@ (8001a58 <main+0x180>)
 800199a:	f001 f979 	bl	8002c90 <HAL_ADC_Start_IT>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <main+0xd0>
  	  Error_Handler();
 80019a4:	f000 fa75 	bl	8001e92 <Error_Handler>
  if (HAL_ADC_Start_IT(&hadc5) != HAL_OK)
 80019a8:	482c      	ldr	r0, [pc, #176]	@ (8001a5c <main+0x184>)
 80019aa:	f001 f971 	bl	8002c90 <HAL_ADC_Start_IT>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <main+0xe0>
  	  Error_Handler();
 80019b4:	f000 fa6d 	bl	8001e92 <Error_Handler>

  uint32_t period = (uint32_t)(CLKFREQ / (TIMER2_PRESCALAR * TIMER2_FREQ) - 1);
 80019b8:	2312      	movs	r3, #18
 80019ba:	607b      	str	r3, [r7, #4]
  TIM2->ARR = period;
 80019bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIM2->PSC = TIMER2_PRESCALAR;
 80019c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019c8:	2201      	movs	r2, #1
 80019ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80019cc:	2100      	movs	r1, #0
 80019ce:	4824      	ldr	r0, [pc, #144]	@ (8001a60 <main+0x188>)
 80019d0:	f005 fb96 	bl	8007100 <HAL_TIM_PWM_Start>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <main+0x106>
	  Error_Handler();
 80019da:	f000 fa5a 	bl	8001e92 <Error_Handler>
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 80019de:	4821      	ldr	r0, [pc, #132]	@ (8001a64 <main+0x18c>)
 80019e0:	f005 fabe 	bl	8006f60 <HAL_TIM_Base_Start_IT>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <main+0x116>
  	  Error_Handler();
 80019ea:	f000 fa52 	bl	8001e92 <Error_Handler>

  init_lut();
 80019ee:	f000 f9db 	bl	8001da8 <init_lut>
  init_all_buffers(buffers);
 80019f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <main+0x190>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f902 	bl	8001c00 <init_all_buffers>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (is_main) {
 80019fc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a6c <main+0x194>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <main+0x132>

		  is_main = 0;
 8001a04:	4b19      	ldr	r3, [pc, #100]	@ (8001a6c <main+0x194>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
	  }
	  if (is_dac) {
 8001a0a:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <main+0x198>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00f      	beq.n	8001a32 <main+0x15a>
		  write_dac(sinewave[sine_idx]);
 8001a12:	4b18      	ldr	r3, [pc, #96]	@ (8001a74 <main+0x19c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a18      	ldr	r2, [pc, #96]	@ (8001a78 <main+0x1a0>)
 8001a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 f9a5 	bl	8001d6c <write_dac>
		  sine_idx++;
 8001a22:	4b14      	ldr	r3, [pc, #80]	@ (8001a74 <main+0x19c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	4a12      	ldr	r2, [pc, #72]	@ (8001a74 <main+0x19c>)
 8001a2a:	6013      	str	r3, [r2, #0]
		  is_dac = 0;
 8001a2c:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <main+0x198>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
	  }
	  if (is_usb) {
 8001a32:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <main+0x1a4>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0e0      	beq.n	80019fc <main+0x124>
		  send_all_buffer(buffers);
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <main+0x190>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f940 	bl	8001cc4 <send_all_buffer>
		  is_usb = 0;
 8001a44:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <main+0x1a4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
	  if (is_main) {
 8001a4a:	e7d7      	b.n	80019fc <main+0x124>
 8001a4c:	200001f4 	.word	0x200001f4
 8001a50:	20000260 	.word	0x20000260
 8001a54:	200002cc 	.word	0x200002cc
 8001a58:	20000338 	.word	0x20000338
 8001a5c:	200003a4 	.word	0x200003a4
 8001a60:	20000694 	.word	0x20000694
 8001a64:	200006e0 	.word	0x200006e0
 8001a68:	2000061c 	.word	0x2000061c
 8001a6c:	20000628 	.word	0x20000628
 8001a70:	20000629 	.word	0x20000629
 8001a74:	20000618 	.word	0x20000618
 8001a78:	20000418 	.word	0x20000418
 8001a7c:	2000062a 	.word	0x2000062a

08001a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b094      	sub	sp, #80	@ 0x50
 8001a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a86:	f107 0318 	add.w	r3, r7, #24
 8001a8a:	2238      	movs	r2, #56	@ 0x38
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f00c fbf0 	bl	800e274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001aa6:	f004 f91b 	bl	8005ce0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab4:	2340      	movs	r3, #64	@ 0x40
 8001ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001abc:	2302      	movs	r3, #2
 8001abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001ac4:	230c      	movs	r3, #12
 8001ac6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001acc:	2304      	movs	r3, #4
 8001ace:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f004 f9b5 	bl	8005e48 <HAL_RCC_OscConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001ae4:	f000 f9d5 	bl	8001e92 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae8:	230f      	movs	r3, #15
 8001aea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aec:	2303      	movs	r3, #3
 8001aee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	2103      	movs	r1, #3
 8001b00:	4618      	mov	r0, r3
 8001b02:	f004 fcb3 	bl	800646c <HAL_RCC_ClockConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001b0c:	f000 f9c1 	bl	8001e92 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8001b10:	2200      	movs	r2, #0
 8001b12:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001b16:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b1a:	f004 fde3 	bl	80066e4 <HAL_RCC_MCOConfig>
}
 8001b1e:	bf00      	nop
 8001b20:	3750      	adds	r7, #80	@ 0x50
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_TIM_PeriodElapsedCallback>:
 * Args:
 * 		htim: handle type for the timer to define
 * 			which timer has triggered the callback.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001b28:	b5b0      	push	{r4, r5, r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b38:	d14b      	bne.n	8001bd2 <HAL_TIM_PeriodElapsedCallback+0xaa>
		gl_ticks++;
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	1c54      	adds	r4, r2, #1
 8001b42:	f143 0500 	adc.w	r5, r3, #0
 8001b46:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b48:	e9c3 4500 	strd	r4, r5, [r3]
	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / MAIN_FREQ) == 1) {
 8001b4c:	4b28      	ldr	r3, [pc, #160]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b52:	a323      	add	r3, pc, #140	@ (adr r3, 8001be0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7ff f858 	bl	8000c0c <__aeabi_uldivmod>
 8001b5c:	1e51      	subs	r1, r2, #1
 8001b5e:	430b      	orrs	r3, r1
 8001b60:	d102      	bne.n	8001b68 <HAL_TIM_PeriodElapsedCallback+0x40>
			is_main = 1; //1Hz
 8001b62:	4b24      	ldr	r3, [pc, #144]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
		}
	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / DAC_FREQ) == 1) {
 8001b68:	4b21      	ldr	r3, [pc, #132]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b6e:	f04f 0205 	mov.w	r2, #5
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	f7ff f849 	bl	8000c0c <__aeabi_uldivmod>
 8001b7a:	1e51      	subs	r1, r2, #1
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	d102      	bne.n	8001b86 <HAL_TIM_PeriodElapsedCallback+0x5e>
			is_dac = 1; //1Hz
 8001b80:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
		}
	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / USB_FREQ) == 1) {
 8001b86:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	f7ff f83a 	bl	8000c0c <__aeabi_uldivmod>
 8001b98:	1e51      	subs	r1, r2, #1
 8001b9a:	430b      	orrs	r3, r1
 8001b9c:	d102      	bne.n	8001ba4 <HAL_TIM_PeriodElapsedCallback+0x7c>
	    	is_usb = 1;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
	    }
        if (gl_ticks >= TIMER2_FREQ) {
 8001ba4:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	f7fe fd15 	bl	80005dc <__aeabi_ul2d>
 8001bb2:	a30d      	add	r3, pc, #52	@ (adr r3, 8001be8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	f7fe ffcc 	bl	8000b54 <__aeabi_dcmpge>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d100      	bne.n	8001bc4 <HAL_TIM_PeriodElapsedCallback+0x9c>
            gl_ticks = 0;
        }
	}

}
 8001bc2:	e006      	b.n	8001bd2 <HAL_TIM_PeriodElapsedCallback+0xaa>
            gl_ticks = 0;
 8001bc4:	490a      	ldr	r1, [pc, #40]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	f3af 8000 	nop.w
 8001be0:	004c4b40 	.word	0x004c4b40
	...
 8001bec:	415312d0 	.word	0x415312d0
 8001bf0:	20000620 	.word	0x20000620
 8001bf4:	20000628 	.word	0x20000628
 8001bf8:	20000629 	.word	0x20000629
 8001bfc:	2000062a 	.word	0x2000062a

08001c00 <init_all_buffers>:

void init_all_buffers(buffers_t* buff) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	initDbleBuf(buff->adc1, ADC_SIZE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fd29 	bl	8001668 <initDbleBuf>
	initDbleBuf(buff->adc2, ADC_SIZE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fd22 	bl	8001668 <initDbleBuf>
	initDbleBuf(buff->adc3, ADC_SIZE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fd1b 	bl	8001668 <initDbleBuf>
	initDbleBuf(buff->adc4, ADC_SIZE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fd14 	bl	8001668 <initDbleBuf>
	initDbleBuf(buff->adc5, ADC_SIZE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fd0d 	bl	8001668 <initDbleBuf>
	buff->mux = 0;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	801a      	strh	r2, [r3, #0]
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <send_adc_buffer>:
 *
 * Args:
 * 		channel: the channel with a full buffer
 * 			that needs to be sent.
 */
void send_adc_buffer(int32_t *array, size_t size, uint8_t mux, uint8_t adc) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b090      	sub	sp, #64	@ 0x40
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	71fb      	strb	r3, [r7, #7]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	71bb      	strb	r3, [r7, #6]
	char buffer[USB_PAYLOAD + 1];
	for (size_t i = 0; i < size; i++) {
 8001c72:	2300      	movs	r3, #0
 8001c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c76:	e019      	b.n	8001cac <send_adc_buffer+0x50>
		uint16_t value = array[i];
 8001c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	867b      	strh	r3, [r7, #50]	@ 0x32
		snprintf (buffer, sizeof (buffer), "A%uM%u %u\n",adc, mux, value);
 8001c84:	79b9      	ldrb	r1, [r7, #6]
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8001c8a:	f107 0010 	add.w	r0, r7, #16
 8001c8e:	9201      	str	r2, [sp, #4]
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	460b      	mov	r3, r1
 8001c94:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <send_adc_buffer+0x64>)
 8001c96:	2121      	movs	r1, #33	@ 0x21
 8001c98:	f00c fab8 	bl	800e20c <sniprintf>
		USB_Send(buffer);
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 f8e5 	bl	8001e70 <USB_Send>
	for (size_t i = 0; i < size; i++) {
 8001ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ca8:	3301      	adds	r3, #1
 8001caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d3e1      	bcc.n	8001c78 <send_adc_buffer+0x1c>
	}
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3738      	adds	r7, #56	@ 0x38
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	0800ea30 	.word	0x0800ea30

08001cc4 <send_all_buffer>:

void send_all_buffer(buffers_t* buff) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	int32_t *array;
	readDbleBuf (buff->adc1, array);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	68f9      	ldr	r1, [r7, #12]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fce6 	bl	80016a4 <readDbleBuf>
	send_adc_buffer(array, ADC_SIZE, buff->mux, 1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f7ff ffb9 	bl	8001c5c <send_adc_buffer>
	readDbleBuf (buff->adc2, array);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	68f9      	ldr	r1, [r7, #12]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fcd7 	bl	80016a4 <readDbleBuf>
	send_adc_buffer(array, ADC_SIZE, buff->mux, 2);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f7ff ffaa 	bl	8001c5c <send_adc_buffer>
	readDbleBuf (buff->adc3, array);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	68f9      	ldr	r1, [r7, #12]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fcc8 	bl	80016a4 <readDbleBuf>
	send_adc_buffer(array, ADC_SIZE, buff->mux, 3);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f7ff ff9b 	bl	8001c5c <send_adc_buffer>
	readDbleBuf (buff->adc4, array);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	68f9      	ldr	r1, [r7, #12]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fcb9 	bl	80016a4 <readDbleBuf>
	send_adc_buffer(array, ADC_SIZE, buff->mux, 4);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	2304      	movs	r3, #4
 8001d3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f7ff ff8c 	bl	8001c5c <send_adc_buffer>
	readDbleBuf (buff->adc5, array);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	68f9      	ldr	r1, [r7, #12]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fcaa 	bl	80016a4 <readDbleBuf>
	send_adc_buffer(array, ADC_SIZE, buff->mux, 5);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	2305      	movs	r3, #5
 8001d58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7ff ff7d 	bl	8001c5c <send_adc_buffer>
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <write_dac>:
 *
 * Args:
 * 		value: The number that is being written
 * 			to the DAC
 */
void write_dac(uint16_t value){
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	80fb      	strh	r3, [r7, #6]
	sine_idx = 0;
 8001d76:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <write_dac+0x30>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
	if (value >= 16384) {
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d82:	d302      	bcc.n	8001d8a <write_dac+0x1e>
		value = 16384;
 8001d84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d88:	80fb      	strh	r3, [r7, #6]
	}
	GPIOC->ODR = value;
 8001d8a:	4a05      	ldr	r2, [pc, #20]	@ (8001da0 <write_dac+0x34>)
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	6153      	str	r3, [r2, #20]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	20000618 	.word	0x20000618
 8001da0:	48000800 	.word	0x48000800
 8001da4:	00000000 	.word	0x00000000

08001da8 <init_lut>:
 * Sets up a look up table of a sinewave with a DC offset
 * and a max 14 bit amplitude. THe frequency is adjusted according
 * to the update rate of the DAC.
 *
 */
void init_lut(void) {
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
	uint32_t amplitude = 8192;
 8001dae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001db2:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < LUT_SIZE; i++) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	e048      	b.n	8001e4c <init_lut+0xa4>
		uint32_t new_freq = FREQ_CURRENT / (DAC_FREQ / LUT_SIZE);
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
		uint16_t sine = sin((i * 2.0 * M_PI * new_freq) / LUT_SIZE);
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f7fe fbd8 	bl	8000574 <__aeabi_i2d>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	f7fe fa88 	bl	80002dc <__adddf3>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	a324      	add	r3, pc, #144	@ (adr r3, 8001e68 <init_lut+0xc0>)
 8001dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dda:	f7fe fc35 	bl	8000648 <__aeabi_dmul>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4614      	mov	r4, r2
 8001de4:	461d      	mov	r5, r3
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7fe fbb4 	bl	8000554 <__aeabi_ui2d>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4620      	mov	r0, r4
 8001df2:	4629      	mov	r1, r5
 8001df4:	f7fe fc28 	bl	8000648 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	4b16      	ldr	r3, [pc, #88]	@ (8001e60 <init_lut+0xb8>)
 8001e06:	f7fe fd49 	bl	800089c <__aeabi_ddiv>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	ec43 2b17 	vmov	d7, r2, r3
 8001e12:	eeb0 0a47 	vmov.f32	s0, s14
 8001e16:	eef0 0a67 	vmov.f32	s1, s15
 8001e1a:	f00b f8fd 	bl	800d018 <sin>
 8001e1e:	ec53 2b10 	vmov	r2, r3, d0
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	f7fe fed1 	bl	8000bcc <__aeabi_d2uiz>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	807b      	strh	r3, [r7, #2]
		sinewave[i] = (uint16_t)(amplitude * sine + amplitude);
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	3301      	adds	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	fb12 f303 	smulbb	r3, r2, r3
 8001e3c:	b299      	uxth	r1, r3
 8001e3e:	4a09      	ldr	r2, [pc, #36]	@ (8001e64 <init_lut+0xbc>)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < LUT_SIZE; i++) {
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2bff      	cmp	r3, #255	@ 0xff
 8001e50:	ddb3      	ble.n	8001dba <init_lut+0x12>
	}
}
 8001e52:	bf00      	nop
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e5c:	f3af 8000 	nop.w
 8001e60:	40700000 	.word	0x40700000
 8001e64:	20000418 	.word	0x20000418
 8001e68:	54442d18 	.word	0x54442d18
 8001e6c:	400921fb 	.word	0x400921fb

08001e70 <USB_Send>:
 * Sends a string to the USB com port on a host PC.
 *
 * Args:
 * 		message: the string that is being sent
 */
void USB_Send(char* message) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*)message, strlen(message));
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7fe f9d1 	bl	8000220 <strlen>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	4619      	mov	r1, r3
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f00a fc7b 	bl	800c780 <CDC_Transmit_FS>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e96:	b672      	cpsid	i
}
 8001e98:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e9a:	bf00      	nop
 8001e9c:	e7fd      	b.n	8001e9a <Error_Handler+0x8>
	...

08001ea0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f14 <MX_SPI1_Init+0x74>)
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f18 <MX_SPI1_Init+0x78>)
 8001ea8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8001f14 <MX_SPI1_Init+0x74>)
 8001eac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001eb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eb2:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <MX_SPI1_Init+0x74>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001eb8:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <MX_SPI1_Init+0x74>)
 8001eba:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001ebe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec0:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <MX_SPI1_Init+0x74>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ec6:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <MX_SPI1_Init+0x74>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <MX_SPI1_Init+0x74>)
 8001ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f14 <MX_SPI1_Init+0x74>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	@ (8001f14 <MX_SPI1_Init+0x74>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <MX_SPI1_Init+0x74>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <MX_SPI1_Init+0x74>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001eec:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <MX_SPI1_Init+0x74>)
 8001eee:	2207      	movs	r2, #7
 8001ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <MX_SPI1_Init+0x74>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <MX_SPI1_Init+0x74>)
 8001efa:	2208      	movs	r2, #8
 8001efc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001efe:	4805      	ldr	r0, [pc, #20]	@ (8001f14 <MX_SPI1_Init+0x74>)
 8001f00:	f004 ff2c 	bl	8006d5c <HAL_SPI_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f0a:	f7ff ffc2 	bl	8001e92 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2000062c 	.word	0x2000062c
 8001f18:	40013000 	.word	0x40013000

08001f1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	@ 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a25      	ldr	r2, [pc, #148]	@ (8001fd0 <HAL_SPI_MspInit+0xb4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d144      	bne.n	8001fc8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f3e:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <HAL_SPI_MspInit+0xb8>)
 8001f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f42:	4a24      	ldr	r2, [pc, #144]	@ (8001fd4 <HAL_SPI_MspInit+0xb8>)
 8001f44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f48:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f4a:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <HAL_SPI_MspInit+0xb8>)
 8001f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd4 <HAL_SPI_MspInit+0xb8>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd4 <HAL_SPI_MspInit+0xb8>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f62:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd4 <HAL_SPI_MspInit+0xb8>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	4b19      	ldr	r3, [pc, #100]	@ (8001fd4 <HAL_SPI_MspInit+0xb8>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f72:	4a18      	ldr	r2, [pc, #96]	@ (8001fd4 <HAL_SPI_MspInit+0xb8>)
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f7a:	4b16      	ldr	r3, [pc, #88]	@ (8001fd4 <HAL_SPI_MspInit+0xb8>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f86:	2320      	movs	r3, #32
 8001f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f96:	2305      	movs	r3, #5
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fa4:	f001 ffce 	bl	8003f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001fa8:	2330      	movs	r3, #48	@ 0x30
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fb8:	2305      	movs	r3, #5
 8001fba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <HAL_SPI_MspInit+0xbc>)
 8001fc4:	f001 ffbe 	bl	8003f44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	@ 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40013000 	.word	0x40013000
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	48000400 	.word	0x48000400

08001fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <HAL_MspInit+0x44>)
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8002020 <HAL_MspInit+0x44>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fee:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <HAL_MspInit+0x44>)
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <HAL_MspInit+0x44>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffe:	4a08      	ldr	r2, [pc, #32]	@ (8002020 <HAL_MspInit+0x44>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002004:	6593      	str	r3, [r2, #88]	@ 0x58
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <HAL_MspInit+0x44>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002012:	f003 ff09 	bl	8005e28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000

08002024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <NMI_Handler+0x4>

0800202c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <HardFault_Handler+0x4>

08002034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <MemManage_Handler+0x4>

0800203c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <BusFault_Handler+0x4>

08002044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <UsageFault_Handler+0x4>

0800204c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207a:	f000 f9fd 	bl	8002478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002088:	4802      	ldr	r0, [pc, #8]	@ (8002094 <USB_LP_IRQHandler+0x10>)
 800208a:	f002 f9e5 	bl	8004458 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20001c04 	.word	0x20001c04

08002098 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800209c:	4802      	ldr	r0, [pc, #8]	@ (80020a8 <TIM2_IRQHandler+0x10>)
 800209e:	f005 f941 	bl	8007324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200006e0 	.word	0x200006e0

080020ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b4:	4a14      	ldr	r2, [pc, #80]	@ (8002108 <_sbrk+0x5c>)
 80020b6:	4b15      	ldr	r3, [pc, #84]	@ (800210c <_sbrk+0x60>)
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c0:	4b13      	ldr	r3, [pc, #76]	@ (8002110 <_sbrk+0x64>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c8:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <_sbrk+0x64>)
 80020ca:	4a12      	ldr	r2, [pc, #72]	@ (8002114 <_sbrk+0x68>)
 80020cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <_sbrk+0x64>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d207      	bcs.n	80020ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020dc:	f00c f8e2 	bl	800e2a4 <__errno>
 80020e0:	4603      	mov	r3, r0
 80020e2:	220c      	movs	r2, #12
 80020e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ea:	e009      	b.n	8002100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020ec:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <_sbrk+0x64>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020f2:	4b07      	ldr	r3, [pc, #28]	@ (8002110 <_sbrk+0x64>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	4a05      	ldr	r2, [pc, #20]	@ (8002110 <_sbrk+0x64>)
 80020fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020fe:	68fb      	ldr	r3, [r7, #12]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20020000 	.word	0x20020000
 800210c:	00000400 	.word	0x00000400
 8002110:	20000690 	.word	0x20000690
 8002114:	20002248 	.word	0x20002248

08002118 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800211c:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <SystemInit+0x20>)
 800211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002122:	4a05      	ldr	r2, [pc, #20]	@ (8002138 <SystemInit+0x20>)
 8002124:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002128:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b098      	sub	sp, #96	@ 0x60
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002142:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800214e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
 800215c:	611a      	str	r2, [r3, #16]
 800215e:	615a      	str	r2, [r3, #20]
 8002160:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	2234      	movs	r2, #52	@ 0x34
 8002166:	2100      	movs	r1, #0
 8002168:	4618      	mov	r0, r3
 800216a:	f00c f883 	bl	800e274 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800216e:	4b39      	ldr	r3, [pc, #228]	@ (8002254 <MX_TIM1_Init+0x118>)
 8002170:	4a39      	ldr	r2, [pc, #228]	@ (8002258 <MX_TIM1_Init+0x11c>)
 8002172:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002174:	4b37      	ldr	r3, [pc, #220]	@ (8002254 <MX_TIM1_Init+0x118>)
 8002176:	2200      	movs	r2, #0
 8002178:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217a:	4b36      	ldr	r3, [pc, #216]	@ (8002254 <MX_TIM1_Init+0x118>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9600;
 8002180:	4b34      	ldr	r3, [pc, #208]	@ (8002254 <MX_TIM1_Init+0x118>)
 8002182:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002186:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002188:	4b32      	ldr	r3, [pc, #200]	@ (8002254 <MX_TIM1_Init+0x118>)
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800218e:	4b31      	ldr	r3, [pc, #196]	@ (8002254 <MX_TIM1_Init+0x118>)
 8002190:	2200      	movs	r2, #0
 8002192:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002194:	4b2f      	ldr	r3, [pc, #188]	@ (8002254 <MX_TIM1_Init+0x118>)
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800219a:	482e      	ldr	r0, [pc, #184]	@ (8002254 <MX_TIM1_Init+0x118>)
 800219c:	f004 ff58 	bl	8007050 <HAL_TIM_PWM_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80021a6:	f7ff fe74 	bl	8001e92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021ba:	4619      	mov	r1, r3
 80021bc:	4825      	ldr	r0, [pc, #148]	@ (8002254 <MX_TIM1_Init+0x118>)
 80021be:	f006 f8f3 	bl	80083a8 <HAL_TIMEx_MasterConfigSynchronization>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80021c8:	f7ff fe63 	bl	8001e92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021cc:	2360      	movs	r3, #96	@ 0x60
 80021ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d4:	2300      	movs	r3, #0
 80021d6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021d8:	2300      	movs	r3, #0
 80021da:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021ec:	2200      	movs	r2, #0
 80021ee:	4619      	mov	r1, r3
 80021f0:	4818      	ldr	r0, [pc, #96]	@ (8002254 <MX_TIM1_Init+0x118>)
 80021f2:	f005 f9e7 	bl	80075c4 <HAL_TIM_PWM_ConfigChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80021fc:	f7ff fe49 	bl	8001e92 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002214:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002218:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800221e:	2300      	movs	r3, #0
 8002220:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002226:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800222a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002230:	2300      	movs	r3, #0
 8002232:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002238:	1d3b      	adds	r3, r7, #4
 800223a:	4619      	mov	r1, r3
 800223c:	4805      	ldr	r0, [pc, #20]	@ (8002254 <MX_TIM1_Init+0x118>)
 800223e:	f006 f949 	bl	80084d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002248:	f7ff fe23 	bl	8001e92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800224c:	bf00      	nop
 800224e:	3760      	adds	r7, #96	@ 0x60
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000694 	.word	0x20000694
 8002258:	40012c00 	.word	0x40012c00

0800225c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800227a:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <MX_TIM2_Init+0x94>)
 800227c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002280:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96;
 8002282:	4b1b      	ldr	r3, [pc, #108]	@ (80022f0 <MX_TIM2_Init+0x94>)
 8002284:	2260      	movs	r2, #96	@ 0x60
 8002286:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002288:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <MX_TIM2_Init+0x94>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 800228e:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <MX_TIM2_Init+0x94>)
 8002290:	4a18      	ldr	r2, [pc, #96]	@ (80022f4 <MX_TIM2_Init+0x98>)
 8002292:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002294:	4b16      	ldr	r3, [pc, #88]	@ (80022f0 <MX_TIM2_Init+0x94>)
 8002296:	2200      	movs	r2, #0
 8002298:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229a:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <MX_TIM2_Init+0x94>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022a0:	4813      	ldr	r0, [pc, #76]	@ (80022f0 <MX_TIM2_Init+0x94>)
 80022a2:	f004 fe06 	bl	8006eb2 <HAL_TIM_Base_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022ac:	f7ff fdf1 	bl	8001e92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022b6:	f107 0310 	add.w	r3, r7, #16
 80022ba:	4619      	mov	r1, r3
 80022bc:	480c      	ldr	r0, [pc, #48]	@ (80022f0 <MX_TIM2_Init+0x94>)
 80022be:	f005 fa95 	bl	80077ec <HAL_TIM_ConfigClockSource>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022c8:	f7ff fde3 	bl	8001e92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022cc:	2300      	movs	r3, #0
 80022ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	4619      	mov	r1, r3
 80022d8:	4805      	ldr	r0, [pc, #20]	@ (80022f0 <MX_TIM2_Init+0x94>)
 80022da:	f006 f865 	bl	80083a8 <HAL_TIMEx_MasterConfigSynchronization>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80022e4:	f7ff fdd5 	bl	8001e92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022e8:	bf00      	nop
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	200006e0 	.word	0x200006e0
 80022f4:	000186a0 	.word	0x000186a0

080022f8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <HAL_TIM_PWM_MspInit+0x38>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d10b      	bne.n	8002322 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800230a:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <HAL_TIM_PWM_MspInit+0x3c>)
 800230c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230e:	4a09      	ldr	r2, [pc, #36]	@ (8002334 <HAL_TIM_PWM_MspInit+0x3c>)
 8002310:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002314:	6613      	str	r3, [r2, #96]	@ 0x60
 8002316:	4b07      	ldr	r3, [pc, #28]	@ (8002334 <HAL_TIM_PWM_MspInit+0x3c>)
 8002318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40012c00 	.word	0x40012c00
 8002334:	40021000 	.word	0x40021000

08002338 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002348:	d113      	bne.n	8002372 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800234a:	4b0c      	ldr	r3, [pc, #48]	@ (800237c <HAL_TIM_Base_MspInit+0x44>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234e:	4a0b      	ldr	r2, [pc, #44]	@ (800237c <HAL_TIM_Base_MspInit+0x44>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6593      	str	r3, [r2, #88]	@ 0x58
 8002356:	4b09      	ldr	r3, [pc, #36]	@ (800237c <HAL_TIM_Base_MspInit+0x44>)
 8002358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2100      	movs	r1, #0
 8002366:	201c      	movs	r0, #28
 8002368:	f001 fdb7 	bl	8003eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800236c:	201c      	movs	r0, #28
 800236e:	f001 fdce 	bl	8003f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000

08002380 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002380:	480d      	ldr	r0, [pc, #52]	@ (80023b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002382:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002384:	f7ff fec8 	bl	8002118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002388:	480c      	ldr	r0, [pc, #48]	@ (80023bc <LoopForever+0x6>)
  ldr r1, =_edata
 800238a:	490d      	ldr	r1, [pc, #52]	@ (80023c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800238c:	4a0d      	ldr	r2, [pc, #52]	@ (80023c4 <LoopForever+0xe>)
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002390:	e002      	b.n	8002398 <LoopCopyDataInit>

08002392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002396:	3304      	adds	r3, #4

08002398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800239c:	d3f9      	bcc.n	8002392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239e:	4a0a      	ldr	r2, [pc, #40]	@ (80023c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023a0:	4c0a      	ldr	r4, [pc, #40]	@ (80023cc <LoopForever+0x16>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a4:	e001      	b.n	80023aa <LoopFillZerobss>

080023a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a8:	3204      	adds	r2, #4

080023aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ac:	d3fb      	bcc.n	80023a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ae:	f00b ff7f 	bl	800e2b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023b2:	f7ff fa91 	bl	80018d8 <main>

080023b6 <LoopForever>:

LoopForever:
    b LoopForever
 80023b6:	e7fe      	b.n	80023b6 <LoopForever>
  ldr   r0, =_estack
 80023b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80023c4:	0800ecb4 	.word	0x0800ecb4
  ldr r2, =_sbss
 80023c8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80023cc:	20002248 	.word	0x20002248

080023d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023d0:	e7fe      	b.n	80023d0 <ADC1_2_IRQHandler>

080023d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023dc:	2003      	movs	r0, #3
 80023de:	f001 fd71 	bl	8003ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023e2:	200f      	movs	r0, #15
 80023e4:	f000 f80e 	bl	8002404 <HAL_InitTick>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	71fb      	strb	r3, [r7, #7]
 80023f2:	e001      	b.n	80023f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023f4:	f7ff fdf2 	bl	8001fdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023f8:	79fb      	ldrb	r3, [r7, #7]

}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002410:	4b16      	ldr	r3, [pc, #88]	@ (800246c <HAL_InitTick+0x68>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d022      	beq.n	800245e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002418:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <HAL_InitTick+0x6c>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b13      	ldr	r3, [pc, #76]	@ (800246c <HAL_InitTick+0x68>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002424:	fbb1 f3f3 	udiv	r3, r1, r3
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	4618      	mov	r0, r3
 800242e:	f001 fd7c 	bl	8003f2a <HAL_SYSTICK_Config>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10f      	bne.n	8002458 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b0f      	cmp	r3, #15
 800243c:	d809      	bhi.n	8002452 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800243e:	2200      	movs	r2, #0
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	f04f 30ff 	mov.w	r0, #4294967295
 8002446:	f001 fd48 	bl	8003eda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800244a:	4a0a      	ldr	r2, [pc, #40]	@ (8002474 <HAL_InitTick+0x70>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	e007      	b.n	8002462 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	e004      	b.n	8002462 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	e001      	b.n	8002462 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000008 	.word	0x20000008
 8002470:	20000000 	.word	0x20000000
 8002474:	20000004 	.word	0x20000004

08002478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800247c:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <HAL_IncTick+0x1c>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <HAL_IncTick+0x20>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4413      	add	r3, r2
 8002486:	4a03      	ldr	r2, [pc, #12]	@ (8002494 <HAL_IncTick+0x1c>)
 8002488:	6013      	str	r3, [r2, #0]
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	2000072c 	.word	0x2000072c
 8002498:	20000008 	.word	0x20000008

0800249c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return uwTick;
 80024a0:	4b03      	ldr	r3, [pc, #12]	@ (80024b0 <HAL_GetTick+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	2000072c 	.word	0x2000072c

080024b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	609a      	str	r2, [r3, #8]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	609a      	str	r2, [r3, #8]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3360      	adds	r3, #96	@ 0x60
 800252e:	461a      	mov	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <LL_ADC_SetOffset+0x44>)
 800253e:	4013      	ands	r3, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	4313      	orrs	r3, r2
 800254c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002554:	bf00      	nop
 8002556:	371c      	adds	r7, #28
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	03fff000 	.word	0x03fff000

08002564 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3360      	adds	r3, #96	@ 0x60
 8002572:	461a      	mov	r2, r3
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3360      	adds	r3, #96	@ 0x60
 80025a0:	461a      	mov	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b087      	sub	sp, #28
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3360      	adds	r3, #96	@ 0x60
 80025d6:	461a      	mov	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80025f0:	bf00      	nop
 80025f2:	371c      	adds	r7, #28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3360      	adds	r3, #96	@ 0x60
 800260c:	461a      	mov	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	431a      	orrs	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002626:	bf00      	nop
 8002628:	371c      	adds	r7, #28
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	615a      	str	r2, [r3, #20]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3330      	adds	r3, #48	@ 0x30
 8002668:	461a      	mov	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	4413      	add	r3, r2
 8002676:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	211f      	movs	r1, #31
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	401a      	ands	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	0e9b      	lsrs	r3, r3, #26
 8002690:	f003 011f 	and.w	r1, r3, #31
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	fa01 f303 	lsl.w	r3, r1, r3
 800269e:	431a      	orrs	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026a4:	bf00      	nop
 80026a6:	371c      	adds	r7, #28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3314      	adds	r3, #20
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	0e5b      	lsrs	r3, r3, #25
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	4413      	add	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	0d1b      	lsrs	r3, r3, #20
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2107      	movs	r1, #7
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	401a      	ands	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	0d1b      	lsrs	r3, r3, #20
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	431a      	orrs	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002720:	43db      	mvns	r3, r3
 8002722:	401a      	ands	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f003 0318 	and.w	r3, r3, #24
 800272a:	4908      	ldr	r1, [pc, #32]	@ (800274c <LL_ADC_SetChannelSingleDiff+0x44>)
 800272c:	40d9      	lsrs	r1, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	400b      	ands	r3, r1
 8002732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002736:	431a      	orrs	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	0007ffff 	.word	0x0007ffff

08002750 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 031f 	and.w	r3, r3, #31
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800277c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6093      	str	r3, [r2, #8]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027a4:	d101      	bne.n	80027aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80027c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027f4:	d101      	bne.n	80027fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002818:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002840:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002844:	f043 0202 	orr.w	r2, r3, #2
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <LL_ADC_IsEnabled+0x18>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <LL_ADC_IsEnabled+0x1a>
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b02      	cmp	r3, #2
 8002890:	d101      	bne.n	8002896 <LL_ADC_IsDisableOngoing+0x18>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <LL_ADC_IsDisableOngoing+0x1a>
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028b8:	f043 0204 	orr.w	r2, r3, #4
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d101      	bne.n	80028e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b08      	cmp	r3, #8
 8002904:	d101      	bne.n	800290a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002918:	b590      	push	{r4, r7, lr}
 800291a:	b089      	sub	sp, #36	@ 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e1a9      	b.n	8002c86 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d109      	bne.n	8002954 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7fe fd07 	bl	8001354 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff19 	bl	8002790 <LL_ADC_IsDeepPowerDownEnabled>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d004      	beq.n	800296e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff feff 	bl	800276c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff ff34 	bl	80027e0 <LL_ADC_IsInternalRegulatorEnabled>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d115      	bne.n	80029aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff ff18 	bl	80027b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002988:	4b9c      	ldr	r3, [pc, #624]	@ (8002bfc <HAL_ADC_Init+0x2e4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	099b      	lsrs	r3, r3, #6
 800298e:	4a9c      	ldr	r2, [pc, #624]	@ (8002c00 <HAL_ADC_Init+0x2e8>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	3301      	adds	r3, #1
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800299c:	e002      	b.n	80029a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f9      	bne.n	800299e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff16 	bl	80027e0 <LL_ADC_IsInternalRegulatorEnabled>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10d      	bne.n	80029d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029be:	f043 0210 	orr.w	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ca:	f043 0201 	orr.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ff76 	bl	80028cc <LL_ADC_REG_IsConversionOngoing>
 80029e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 8142 	bne.w	8002c74 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 813e 	bne.w	8002c74 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a00:	f043 0202 	orr.w	r2, r3, #2
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff23 	bl	8002858 <LL_ADC_IsEnabled>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d141      	bne.n	8002a9c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a20:	d004      	beq.n	8002a2c <HAL_ADC_Init+0x114>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a77      	ldr	r2, [pc, #476]	@ (8002c04 <HAL_ADC_Init+0x2ec>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d10f      	bne.n	8002a4c <HAL_ADC_Init+0x134>
 8002a2c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a30:	f7ff ff12 	bl	8002858 <LL_ADC_IsEnabled>
 8002a34:	4604      	mov	r4, r0
 8002a36:	4873      	ldr	r0, [pc, #460]	@ (8002c04 <HAL_ADC_Init+0x2ec>)
 8002a38:	f7ff ff0e 	bl	8002858 <LL_ADC_IsEnabled>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4323      	orrs	r3, r4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	e012      	b.n	8002a72 <HAL_ADC_Init+0x15a>
 8002a4c:	486e      	ldr	r0, [pc, #440]	@ (8002c08 <HAL_ADC_Init+0x2f0>)
 8002a4e:	f7ff ff03 	bl	8002858 <LL_ADC_IsEnabled>
 8002a52:	4604      	mov	r4, r0
 8002a54:	486d      	ldr	r0, [pc, #436]	@ (8002c0c <HAL_ADC_Init+0x2f4>)
 8002a56:	f7ff feff 	bl	8002858 <LL_ADC_IsEnabled>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	431c      	orrs	r4, r3
 8002a5e:	486c      	ldr	r0, [pc, #432]	@ (8002c10 <HAL_ADC_Init+0x2f8>)
 8002a60:	f7ff fefa 	bl	8002858 <LL_ADC_IsEnabled>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4323      	orrs	r3, r4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d012      	beq.n	8002a9c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a7e:	d004      	beq.n	8002a8a <HAL_ADC_Init+0x172>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a5f      	ldr	r2, [pc, #380]	@ (8002c04 <HAL_ADC_Init+0x2ec>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d101      	bne.n	8002a8e <HAL_ADC_Init+0x176>
 8002a8a:	4a62      	ldr	r2, [pc, #392]	@ (8002c14 <HAL_ADC_Init+0x2fc>)
 8002a8c:	e000      	b.n	8002a90 <HAL_ADC_Init+0x178>
 8002a8e:	4a62      	ldr	r2, [pc, #392]	@ (8002c18 <HAL_ADC_Init+0x300>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4619      	mov	r1, r3
 8002a96:	4610      	mov	r0, r2
 8002a98:	f7ff fd0c 	bl	80024b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	7f5b      	ldrb	r3, [r3, #29]
 8002aa0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aa6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002aac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ab2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002aba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d106      	bne.n	8002ad8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	045b      	lsls	r3, r3, #17
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d009      	beq.n	8002af4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	4b48      	ldr	r3, [pc, #288]	@ (8002c1c <HAL_ADC_Init+0x304>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	69b9      	ldr	r1, [r7, #24]
 8002b04:	430b      	orrs	r3, r1
 8002b06:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fee5 	bl	80028f2 <LL_ADC_INJ_IsConversionOngoing>
 8002b28:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d17f      	bne.n	8002c30 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d17c      	bne.n	8002c30 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b3a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b42:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b52:	f023 0302 	bic.w	r3, r3, #2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	69b9      	ldr	r1, [r7, #24]
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d017      	beq.n	8002b98 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002b76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002b80:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6911      	ldr	r1, [r2, #16]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	430b      	orrs	r3, r1
 8002b92:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002b96:	e013      	b.n	8002bc0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ba6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002bb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bbc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d12a      	bne.n	8002c20 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002bd4:	f023 0304 	bic.w	r3, r3, #4
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002be0:	4311      	orrs	r1, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002be6:	4311      	orrs	r1, r2
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002bec:	430a      	orrs	r2, r1
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	611a      	str	r2, [r3, #16]
 8002bfa:	e019      	b.n	8002c30 <HAL_ADC_Init+0x318>
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	053e2d63 	.word	0x053e2d63
 8002c04:	50000100 	.word	0x50000100
 8002c08:	50000400 	.word	0x50000400
 8002c0c:	50000500 	.word	0x50000500
 8002c10:	50000600 	.word	0x50000600
 8002c14:	50000300 	.word	0x50000300
 8002c18:	50000700 	.word	0x50000700
 8002c1c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0201 	bic.w	r2, r2, #1
 8002c2e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d10c      	bne.n	8002c52 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	f023 010f 	bic.w	r1, r3, #15
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	1e5a      	subs	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c50:	e007      	b.n	8002c62 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 020f 	bic.w	r2, r2, #15
 8002c60:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c66:	f023 0303 	bic.w	r3, r3, #3
 8002c6a:	f043 0201 	orr.w	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c72:	e007      	b.n	8002c84 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c78:	f043 0210 	orr.w	r2, r3, #16
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3724      	adds	r7, #36	@ 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd90      	pop	{r4, r7, pc}
 8002c8e:	bf00      	nop

08002c90 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ca0:	d004      	beq.n	8002cac <HAL_ADC_Start_IT+0x1c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a92      	ldr	r2, [pc, #584]	@ (8002ef0 <HAL_ADC_Start_IT+0x260>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d101      	bne.n	8002cb0 <HAL_ADC_Start_IT+0x20>
 8002cac:	4b91      	ldr	r3, [pc, #580]	@ (8002ef4 <HAL_ADC_Start_IT+0x264>)
 8002cae:	e000      	b.n	8002cb2 <HAL_ADC_Start_IT+0x22>
 8002cb0:	4b91      	ldr	r3, [pc, #580]	@ (8002ef8 <HAL_ADC_Start_IT+0x268>)
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fd4c 	bl	8002750 <LL_ADC_GetMultimode>
 8002cb8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fe04 	bl	80028cc <LL_ADC_REG_IsConversionOngoing>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 8132 	bne.w	8002f30 <HAL_ADC_Start_IT+0x2a0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_ADC_Start_IT+0x4a>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e12d      	b.n	8002f36 <HAL_ADC_Start_IT+0x2a6>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fd6c 	bl	80037c0 <ADC_Enable>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 8119 	bne.w	8002f26 <HAL_ADC_Start_IT+0x296>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a78      	ldr	r2, [pc, #480]	@ (8002ef0 <HAL_ADC_Start_IT+0x260>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_ADC_Start_IT+0x96>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a79      	ldr	r2, [pc, #484]	@ (8002efc <HAL_ADC_Start_IT+0x26c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d002      	beq.n	8002d22 <HAL_ADC_Start_IT+0x92>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	e003      	b.n	8002d2a <HAL_ADC_Start_IT+0x9a>
 8002d22:	4b77      	ldr	r3, [pc, #476]	@ (8002f00 <HAL_ADC_Start_IT+0x270>)
 8002d24:	e001      	b.n	8002d2a <HAL_ADC_Start_IT+0x9a>
 8002d26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d002      	beq.n	8002d38 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d105      	bne.n	8002d44 <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d006      	beq.n	8002d5e <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d54:	f023 0206 	bic.w	r2, r3, #6
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d5c:	e002      	b.n	8002d64 <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	221c      	movs	r2, #28
 8002d6a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 021c 	bic.w	r2, r2, #28
 8002d82:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d108      	bne.n	8002d9e <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0208 	orr.w	r2, r2, #8
 8002d9a:	605a      	str	r2, [r3, #4]
          break;
 8002d9c:	e008      	b.n	8002db0 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0204 	orr.w	r2, r2, #4
 8002dac:	605a      	str	r2, [r3, #4]
          break;
 8002dae:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d107      	bne.n	8002dc8 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0210 	orr.w	r2, r2, #16
 8002dc6:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a48      	ldr	r2, [pc, #288]	@ (8002ef0 <HAL_ADC_Start_IT+0x260>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d009      	beq.n	8002de6 <HAL_ADC_Start_IT+0x156>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a49      	ldr	r2, [pc, #292]	@ (8002efc <HAL_ADC_Start_IT+0x26c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d002      	beq.n	8002de2 <HAL_ADC_Start_IT+0x152>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	e003      	b.n	8002dea <HAL_ADC_Start_IT+0x15a>
 8002de2:	4b47      	ldr	r3, [pc, #284]	@ (8002f00 <HAL_ADC_Start_IT+0x270>)
 8002de4:	e001      	b.n	8002dea <HAL_ADC_Start_IT+0x15a>
 8002de6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d008      	beq.n	8002e04 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d002      	beq.n	8002e04 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b09      	cmp	r3, #9
 8002e02:	d13a      	bne.n	8002e7a <HAL_ADC_Start_IT+0x1ea>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d02d      	beq.n	8002e6e <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e16:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e1a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d110      	bne.n	8002e4c <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0220 	bic.w	r2, r2, #32
 8002e38:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e48:	605a      	str	r2, [r3, #4]
              break;
 8002e4a:	e010      	b.n	8002e6e <HAL_ADC_Start_IT+0x1de>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e5a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0220 	orr.w	r2, r2, #32
 8002e6a:	605a      	str	r2, [r3, #4]
              break;
 8002e6c:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fd16 	bl	80028a4 <LL_ADC_REG_StartConversion>
 8002e78:	e05c      	b.n	8002f34 <HAL_ADC_Start_IT+0x2a4>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a19      	ldr	r2, [pc, #100]	@ (8002ef0 <HAL_ADC_Start_IT+0x260>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d009      	beq.n	8002ea4 <HAL_ADC_Start_IT+0x214>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a19      	ldr	r2, [pc, #100]	@ (8002efc <HAL_ADC_Start_IT+0x26c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d002      	beq.n	8002ea0 <HAL_ADC_Start_IT+0x210>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	e003      	b.n	8002ea8 <HAL_ADC_Start_IT+0x218>
 8002ea0:	4b17      	ldr	r3, [pc, #92]	@ (8002f00 <HAL_ADC_Start_IT+0x270>)
 8002ea2:	e001      	b.n	8002ea8 <HAL_ADC_Start_IT+0x218>
 8002ea4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ea8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d03e      	beq.n	8002f34 <HAL_ADC_Start_IT+0x2a4>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ebe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d11a      	bne.n	8002f04 <HAL_ADC_Start_IT+0x274>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0220 	bic.w	r2, r2, #32
 8002edc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eec:	605a      	str	r2, [r3, #4]
              break;
 8002eee:	e021      	b.n	8002f34 <HAL_ADC_Start_IT+0x2a4>
 8002ef0:	50000100 	.word	0x50000100
 8002ef4:	50000300 	.word	0x50000300
 8002ef8:	50000700 	.word	0x50000700
 8002efc:	50000500 	.word	0x50000500
 8002f00:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f12:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0220 	orr.w	r2, r2, #32
 8002f22:	605a      	str	r2, [r3, #4]
              break;
 8002f24:	e006      	b.n	8002f34 <HAL_ADC_Start_IT+0x2a4>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002f2e:	e001      	b.n	8002f34 <HAL_ADC_Start_IT+0x2a4>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f30:	2302      	movs	r3, #2
 8002f32:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop

08002f40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b0b6      	sub	sp, #216	@ 0xd8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d102      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x24>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	f000 bc13 	b.w	800378a <HAL_ADC_ConfigChannel+0x84a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fcab 	bl	80028cc <LL_ADC_REG_IsConversionOngoing>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f040 83f3 	bne.w	8003764 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f7ff fb64 	bl	8002658 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fc99 	bl	80028cc <LL_ADC_REG_IsConversionOngoing>
 8002f9a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fca5 	bl	80028f2 <LL_ADC_INJ_IsConversionOngoing>
 8002fa8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f040 81d9 	bne.w	8003368 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f040 81d4 	bne.w	8003368 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fc8:	d10f      	bne.n	8002fea <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f7ff fb6b 	bl	80026b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fb25 	bl	8002632 <LL_ADC_SetSamplingTimeCommonConfig>
 8002fe8:	e00e      	b.n	8003008 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f7ff fb5a 	bl	80026b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fb15 	bl	8002632 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	08db      	lsrs	r3, r3, #3
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b04      	cmp	r3, #4
 8003028:	d022      	beq.n	8003070 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6919      	ldr	r1, [r3, #16]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800303a:	f7ff fa6f 	bl	800251c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6919      	ldr	r1, [r3, #16]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	461a      	mov	r2, r3
 800304c:	f7ff fabb 	bl	80025c6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800305c:	2b01      	cmp	r3, #1
 800305e:	d102      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x126>
 8003060:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003064:	e000      	b.n	8003068 <HAL_ADC_ConfigChannel+0x128>
 8003066:	2300      	movs	r3, #0
 8003068:	461a      	mov	r2, r3
 800306a:	f7ff fac7 	bl	80025fc <LL_ADC_SetOffsetSaturation>
 800306e:	e17b      	b.n	8003368 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fa74 	bl	8002564 <LL_ADC_GetOffsetChannel>
 800307c:	4603      	mov	r3, r0
 800307e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <HAL_ADC_ConfigChannel+0x15c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fa69 	bl	8002564 <LL_ADC_GetOffsetChannel>
 8003092:	4603      	mov	r3, r0
 8003094:	0e9b      	lsrs	r3, r3, #26
 8003096:	f003 021f 	and.w	r2, r3, #31
 800309a:	e01e      	b.n	80030da <HAL_ADC_ConfigChannel+0x19a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fa5e 	bl	8002564 <LL_ADC_GetOffsetChannel>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80030ca:	2320      	movs	r3, #32
 80030cc:	e004      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80030ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x1b2>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	0e9b      	lsrs	r3, r3, #26
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	e018      	b.n	8003124 <HAL_ADC_ConfigChannel+0x1e4>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030fe:	fa93 f3a3 	rbit	r3, r3
 8003102:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800310a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800310e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003116:	2320      	movs	r3, #32
 8003118:	e004      	b.n	8003124 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800311a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003124:	429a      	cmp	r2, r3
 8003126:	d106      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2200      	movs	r2, #0
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fa2d 	bl	8002590 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2101      	movs	r1, #1
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff fa11 	bl	8002564 <LL_ADC_GetOffsetChannel>
 8003142:	4603      	mov	r3, r0
 8003144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x222>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2101      	movs	r1, #1
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fa06 	bl	8002564 <LL_ADC_GetOffsetChannel>
 8003158:	4603      	mov	r3, r0
 800315a:	0e9b      	lsrs	r3, r3, #26
 800315c:	f003 021f 	and.w	r2, r3, #31
 8003160:	e01e      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x260>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2101      	movs	r1, #1
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff f9fb 	bl	8002564 <LL_ADC_GetOffsetChannel>
 800316e:	4603      	mov	r3, r0
 8003170:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003180:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003184:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003188:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003190:	2320      	movs	r3, #32
 8003192:	e004      	b.n	800319e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003194:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003198:	fab3 f383 	clz	r3, r3
 800319c:	b2db      	uxtb	r3, r3
 800319e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d105      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x278>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	0e9b      	lsrs	r3, r3, #26
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	e018      	b.n	80031ea <HAL_ADC_ConfigChannel+0x2aa>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80031cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80031d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80031dc:	2320      	movs	r3, #32
 80031de:	e004      	b.n	80031ea <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80031e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d106      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2200      	movs	r2, #0
 80031f4:	2101      	movs	r1, #1
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff f9ca 	bl	8002590 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2102      	movs	r1, #2
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff f9ae 	bl	8002564 <LL_ADC_GetOffsetChannel>
 8003208:	4603      	mov	r3, r0
 800320a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10a      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x2e8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2102      	movs	r1, #2
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff f9a3 	bl	8002564 <LL_ADC_GetOffsetChannel>
 800321e:	4603      	mov	r3, r0
 8003220:	0e9b      	lsrs	r3, r3, #26
 8003222:	f003 021f 	and.w	r2, r3, #31
 8003226:	e01e      	b.n	8003266 <HAL_ADC_ConfigChannel+0x326>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2102      	movs	r1, #2
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff f998 	bl	8002564 <LL_ADC_GetOffsetChannel>
 8003234:	4603      	mov	r3, r0
 8003236:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003246:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800324a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800324e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003256:	2320      	movs	r3, #32
 8003258:	e004      	b.n	8003264 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800325a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
 8003264:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326e:	2b00      	cmp	r3, #0
 8003270:	d105      	bne.n	800327e <HAL_ADC_ConfigChannel+0x33e>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	0e9b      	lsrs	r3, r3, #26
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	e016      	b.n	80032ac <HAL_ADC_ConfigChannel+0x36c>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003290:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003292:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003296:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800329e:	2320      	movs	r3, #32
 80032a0:	e004      	b.n	80032ac <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80032a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032a6:	fab3 f383 	clz	r3, r3
 80032aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d106      	bne.n	80032be <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2200      	movs	r2, #0
 80032b6:	2102      	movs	r1, #2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff f969 	bl	8002590 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2103      	movs	r1, #3
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff f94d 	bl	8002564 <LL_ADC_GetOffsetChannel>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x3aa>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2103      	movs	r1, #3
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff f942 	bl	8002564 <LL_ADC_GetOffsetChannel>
 80032e0:	4603      	mov	r3, r0
 80032e2:	0e9b      	lsrs	r3, r3, #26
 80032e4:	f003 021f 	and.w	r2, r3, #31
 80032e8:	e017      	b.n	800331a <HAL_ADC_ConfigChannel+0x3da>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2103      	movs	r1, #3
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff f937 	bl	8002564 <LL_ADC_GetOffsetChannel>
 80032f6:	4603      	mov	r3, r0
 80032f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003302:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003304:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003306:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800330c:	2320      	movs	r3, #32
 800330e:	e003      	b.n	8003318 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003322:	2b00      	cmp	r3, #0
 8003324:	d105      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x3f2>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	0e9b      	lsrs	r3, r3, #26
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	e011      	b.n	8003356 <HAL_ADC_ConfigChannel+0x416>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003340:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003342:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003344:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800334a:	2320      	movs	r3, #32
 800334c:	e003      	b.n	8003356 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800334e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003350:	fab3 f383 	clz	r3, r3
 8003354:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003356:	429a      	cmp	r2, r3
 8003358:	d106      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2200      	movs	r2, #0
 8003360:	2103      	movs	r1, #3
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff f914 	bl	8002590 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fa73 	bl	8002858 <LL_ADC_IsEnabled>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	f040 813d 	bne.w	80035f4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6819      	ldr	r1, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	461a      	mov	r2, r3
 8003388:	f7ff f9be 	bl	8002708 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4aa2      	ldr	r2, [pc, #648]	@ (800361c <HAL_ADC_ConfigChannel+0x6dc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	f040 812e 	bne.w	80035f4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x480>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	0e9b      	lsrs	r3, r3, #26
 80033ae:	3301      	adds	r3, #1
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	2b09      	cmp	r3, #9
 80033b6:	bf94      	ite	ls
 80033b8:	2301      	movls	r3, #1
 80033ba:	2300      	movhi	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e019      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x4b4>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033c8:	fa93 f3a3 	rbit	r3, r3
 80033cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80033ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033d0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80033d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80033d8:	2320      	movs	r3, #32
 80033da:	e003      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80033dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	3301      	adds	r3, #1
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	2b09      	cmp	r3, #9
 80033ec:	bf94      	ite	ls
 80033ee:	2301      	movls	r3, #1
 80033f0:	2300      	movhi	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d079      	beq.n	80034ec <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003400:	2b00      	cmp	r3, #0
 8003402:	d107      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x4d4>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	0e9b      	lsrs	r3, r3, #26
 800340a:	3301      	adds	r3, #1
 800340c:	069b      	lsls	r3, r3, #26
 800340e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003412:	e015      	b.n	8003440 <HAL_ADC_ConfigChannel+0x500>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800341c:	fa93 f3a3 	rbit	r3, r3
 8003420:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003424:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800342c:	2320      	movs	r3, #32
 800342e:	e003      	b.n	8003438 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003432:	fab3 f383 	clz	r3, r3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	3301      	adds	r3, #1
 800343a:	069b      	lsls	r3, r3, #26
 800343c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003448:	2b00      	cmp	r3, #0
 800344a:	d109      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x520>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0e9b      	lsrs	r3, r3, #26
 8003452:	3301      	adds	r3, #1
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	2101      	movs	r1, #1
 800345a:	fa01 f303 	lsl.w	r3, r1, r3
 800345e:	e017      	b.n	8003490 <HAL_ADC_ConfigChannel+0x550>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003468:	fa93 f3a3 	rbit	r3, r3
 800346c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800346e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003470:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003478:	2320      	movs	r3, #32
 800347a:	e003      	b.n	8003484 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800347c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	3301      	adds	r3, #1
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	2101      	movs	r1, #1
 800348c:	fa01 f303 	lsl.w	r3, r1, r3
 8003490:	ea42 0103 	orr.w	r1, r2, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0x576>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	0e9b      	lsrs	r3, r3, #26
 80034a6:	3301      	adds	r3, #1
 80034a8:	f003 021f 	and.w	r2, r3, #31
 80034ac:	4613      	mov	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4413      	add	r3, r2
 80034b2:	051b      	lsls	r3, r3, #20
 80034b4:	e018      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x5a8>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80034c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80034c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80034ce:	2320      	movs	r3, #32
 80034d0:	e003      	b.n	80034da <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80034d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034d4:	fab3 f383 	clz	r3, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	3301      	adds	r3, #1
 80034dc:	f003 021f 	and.w	r2, r3, #31
 80034e0:	4613      	mov	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034e8:	430b      	orrs	r3, r1
 80034ea:	e07e      	b.n	80035ea <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d107      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x5c8>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	0e9b      	lsrs	r3, r3, #26
 80034fe:	3301      	adds	r3, #1
 8003500:	069b      	lsls	r3, r3, #26
 8003502:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003506:	e015      	b.n	8003534 <HAL_ADC_ConfigChannel+0x5f4>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003518:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800351a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003520:	2320      	movs	r3, #32
 8003522:	e003      	b.n	800352c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	3301      	adds	r3, #1
 800352e:	069b      	lsls	r3, r3, #26
 8003530:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353c:	2b00      	cmp	r3, #0
 800353e:	d109      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x614>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0e9b      	lsrs	r3, r3, #26
 8003546:	3301      	adds	r3, #1
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	2101      	movs	r1, #1
 800354e:	fa01 f303 	lsl.w	r3, r1, r3
 8003552:	e017      	b.n	8003584 <HAL_ADC_ConfigChannel+0x644>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	fa93 f3a3 	rbit	r3, r3
 8003560:	61fb      	str	r3, [r7, #28]
  return result;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800356c:	2320      	movs	r3, #32
 800356e:	e003      	b.n	8003578 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	3301      	adds	r3, #1
 800357a:	f003 031f 	and.w	r3, r3, #31
 800357e:	2101      	movs	r1, #1
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	ea42 0103 	orr.w	r1, r2, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10d      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x670>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	0e9b      	lsrs	r3, r3, #26
 800359a:	3301      	adds	r3, #1
 800359c:	f003 021f 	and.w	r2, r3, #31
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	3b1e      	subs	r3, #30
 80035a8:	051b      	lsls	r3, r3, #20
 80035aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035ae:	e01b      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x6a8>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	fa93 f3a3 	rbit	r3, r3
 80035bc:	613b      	str	r3, [r7, #16]
  return result;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80035c8:	2320      	movs	r3, #32
 80035ca:	e003      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	3301      	adds	r3, #1
 80035d6:	f003 021f 	and.w	r2, r3, #31
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	3b1e      	subs	r3, #30
 80035e2:	051b      	lsls	r3, r3, #20
 80035e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035e8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ee:	4619      	mov	r1, r3
 80035f0:	f7ff f85e 	bl	80026b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b09      	ldr	r3, [pc, #36]	@ (8003620 <HAL_ADC_ConfigChannel+0x6e0>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80be 	beq.w	800377e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800360a:	d004      	beq.n	8003616 <HAL_ADC_ConfigChannel+0x6d6>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a04      	ldr	r2, [pc, #16]	@ (8003624 <HAL_ADC_ConfigChannel+0x6e4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d10a      	bne.n	800362c <HAL_ADC_ConfigChannel+0x6ec>
 8003616:	4b04      	ldr	r3, [pc, #16]	@ (8003628 <HAL_ADC_ConfigChannel+0x6e8>)
 8003618:	e009      	b.n	800362e <HAL_ADC_ConfigChannel+0x6ee>
 800361a:	bf00      	nop
 800361c:	407f0000 	.word	0x407f0000
 8003620:	80080000 	.word	0x80080000
 8003624:	50000100 	.word	0x50000100
 8003628:	50000300 	.word	0x50000300
 800362c:	4b59      	ldr	r3, [pc, #356]	@ (8003794 <HAL_ADC_ConfigChannel+0x854>)
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe ff66 	bl	8002500 <LL_ADC_GetCommonPathInternalCh>
 8003634:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a56      	ldr	r2, [pc, #344]	@ (8003798 <HAL_ADC_ConfigChannel+0x858>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d004      	beq.n	800364c <HAL_ADC_ConfigChannel+0x70c>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a55      	ldr	r2, [pc, #340]	@ (800379c <HAL_ADC_ConfigChannel+0x85c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d13a      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800364c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003650:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d134      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003660:	d005      	beq.n	800366e <HAL_ADC_ConfigChannel+0x72e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a4e      	ldr	r2, [pc, #312]	@ (80037a0 <HAL_ADC_ConfigChannel+0x860>)
 8003668:	4293      	cmp	r3, r2
 800366a:	f040 8085 	bne.w	8003778 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003676:	d004      	beq.n	8003682 <HAL_ADC_ConfigChannel+0x742>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a49      	ldr	r2, [pc, #292]	@ (80037a4 <HAL_ADC_ConfigChannel+0x864>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d101      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x746>
 8003682:	4a49      	ldr	r2, [pc, #292]	@ (80037a8 <HAL_ADC_ConfigChannel+0x868>)
 8003684:	e000      	b.n	8003688 <HAL_ADC_ConfigChannel+0x748>
 8003686:	4a43      	ldr	r2, [pc, #268]	@ (8003794 <HAL_ADC_ConfigChannel+0x854>)
 8003688:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800368c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f7fe ff21 	bl	80024da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003698:	4b44      	ldr	r3, [pc, #272]	@ (80037ac <HAL_ADC_ConfigChannel+0x86c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	099b      	lsrs	r3, r3, #6
 800369e:	4a44      	ldr	r2, [pc, #272]	@ (80037b0 <HAL_ADC_ConfigChannel+0x870>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	099b      	lsrs	r3, r3, #6
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	4613      	mov	r3, r2
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036b2:	e002      	b.n	80036ba <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f9      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036c0:	e05a      	b.n	8003778 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a3b      	ldr	r2, [pc, #236]	@ (80037b4 <HAL_ADC_ConfigChannel+0x874>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d125      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d11f      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a31      	ldr	r2, [pc, #196]	@ (80037a4 <HAL_ADC_ConfigChannel+0x864>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d104      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x7ac>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a34      	ldr	r2, [pc, #208]	@ (80037b8 <HAL_ADC_ConfigChannel+0x878>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d047      	beq.n	800377c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036f4:	d004      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x7c0>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a2a      	ldr	r2, [pc, #168]	@ (80037a4 <HAL_ADC_ConfigChannel+0x864>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d101      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x7c4>
 8003700:	4a29      	ldr	r2, [pc, #164]	@ (80037a8 <HAL_ADC_ConfigChannel+0x868>)
 8003702:	e000      	b.n	8003706 <HAL_ADC_ConfigChannel+0x7c6>
 8003704:	4a23      	ldr	r2, [pc, #140]	@ (8003794 <HAL_ADC_ConfigChannel+0x854>)
 8003706:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800370a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f7fe fee2 	bl	80024da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003716:	e031      	b.n	800377c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a27      	ldr	r2, [pc, #156]	@ (80037bc <HAL_ADC_ConfigChannel+0x87c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d12d      	bne.n	800377e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003722:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d127      	bne.n	800377e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1c      	ldr	r2, [pc, #112]	@ (80037a4 <HAL_ADC_ConfigChannel+0x864>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d022      	beq.n	800377e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003740:	d004      	beq.n	800374c <HAL_ADC_ConfigChannel+0x80c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a17      	ldr	r2, [pc, #92]	@ (80037a4 <HAL_ADC_ConfigChannel+0x864>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d101      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x810>
 800374c:	4a16      	ldr	r2, [pc, #88]	@ (80037a8 <HAL_ADC_ConfigChannel+0x868>)
 800374e:	e000      	b.n	8003752 <HAL_ADC_ConfigChannel+0x812>
 8003750:	4a10      	ldr	r2, [pc, #64]	@ (8003794 <HAL_ADC_ConfigChannel+0x854>)
 8003752:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003756:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800375a:	4619      	mov	r1, r3
 800375c:	4610      	mov	r0, r2
 800375e:	f7fe febc 	bl	80024da <LL_ADC_SetCommonPathInternalCh>
 8003762:	e00c      	b.n	800377e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003768:	f043 0220 	orr.w	r2, r3, #32
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003776:	e002      	b.n	800377e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003778:	bf00      	nop
 800377a:	e000      	b.n	800377e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800377c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003786:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800378a:	4618      	mov	r0, r3
 800378c:	37d8      	adds	r7, #216	@ 0xd8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	50000700 	.word	0x50000700
 8003798:	c3210000 	.word	0xc3210000
 800379c:	90c00010 	.word	0x90c00010
 80037a0:	50000600 	.word	0x50000600
 80037a4:	50000100 	.word	0x50000100
 80037a8:	50000300 	.word	0x50000300
 80037ac:	20000000 	.word	0x20000000
 80037b0:	053e2d63 	.word	0x053e2d63
 80037b4:	c7520000 	.word	0xc7520000
 80037b8:	50000500 	.word	0x50000500
 80037bc:	cb840000 	.word	0xcb840000

080037c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff f841 	bl	8002858 <LL_ADC_IsEnabled>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d176      	bne.n	80038ca <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	4b3c      	ldr	r3, [pc, #240]	@ (80038d4 <ADC_Enable+0x114>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00d      	beq.n	8003806 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ee:	f043 0210 	orr.w	r2, r3, #16
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fa:	f043 0201 	orr.w	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e062      	b.n	80038cc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe fffc 	bl	8002808 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003818:	d004      	beq.n	8003824 <ADC_Enable+0x64>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a2e      	ldr	r2, [pc, #184]	@ (80038d8 <ADC_Enable+0x118>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d101      	bne.n	8003828 <ADC_Enable+0x68>
 8003824:	4b2d      	ldr	r3, [pc, #180]	@ (80038dc <ADC_Enable+0x11c>)
 8003826:	e000      	b.n	800382a <ADC_Enable+0x6a>
 8003828:	4b2d      	ldr	r3, [pc, #180]	@ (80038e0 <ADC_Enable+0x120>)
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe fe68 	bl	8002500 <LL_ADC_GetCommonPathInternalCh>
 8003830:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003832:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003836:	2b00      	cmp	r3, #0
 8003838:	d013      	beq.n	8003862 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800383a:	4b2a      	ldr	r3, [pc, #168]	@ (80038e4 <ADC_Enable+0x124>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	099b      	lsrs	r3, r3, #6
 8003840:	4a29      	ldr	r2, [pc, #164]	@ (80038e8 <ADC_Enable+0x128>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	099b      	lsrs	r3, r3, #6
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	4613      	mov	r3, r2
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003854:	e002      	b.n	800385c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	3b01      	subs	r3, #1
 800385a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f9      	bne.n	8003856 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003862:	f7fe fe1b 	bl	800249c <HAL_GetTick>
 8003866:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003868:	e028      	b.n	80038bc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fe fff2 	bl	8002858 <LL_ADC_IsEnabled>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d104      	bne.n	8003884 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe ffc2 	bl	8002808 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003884:	f7fe fe0a 	bl	800249c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d914      	bls.n	80038bc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b01      	cmp	r3, #1
 800389e:	d00d      	beq.n	80038bc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a4:	f043 0210 	orr.w	r2, r3, #16
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b0:	f043 0201 	orr.w	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e007      	b.n	80038cc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d1cf      	bne.n	800386a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	8000003f 	.word	0x8000003f
 80038d8:	50000100 	.word	0x50000100
 80038dc:	50000300 	.word	0x50000300
 80038e0:	50000700 	.word	0x50000700
 80038e4:	20000000 	.word	0x20000000
 80038e8:	053e2d63 	.word	0x053e2d63

080038ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe ffc0 	bl	800287e <LL_ADC_IsDisableOngoing>
 80038fe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7fe ffa7 	bl	8002858 <LL_ADC_IsEnabled>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d047      	beq.n	80039a0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d144      	bne.n	80039a0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030d 	and.w	r3, r3, #13
 8003920:	2b01      	cmp	r3, #1
 8003922:	d10c      	bne.n	800393e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe ff81 	bl	8002830 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2203      	movs	r2, #3
 8003934:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003936:	f7fe fdb1 	bl	800249c <HAL_GetTick>
 800393a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800393c:	e029      	b.n	8003992 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003942:	f043 0210 	orr.w	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800394e:	f043 0201 	orr.w	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e023      	b.n	80039a2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800395a:	f7fe fd9f 	bl	800249c <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d914      	bls.n	8003992 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00d      	beq.n	8003992 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397a:	f043 0210 	orr.w	r2, r3, #16
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003986:	f043 0201 	orr.w	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e007      	b.n	80039a2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1dc      	bne.n	800395a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <LL_ADC_IsEnabled>:
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <LL_ADC_IsEnabled+0x18>
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <LL_ADC_IsEnabled+0x1a>
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <LL_ADC_StartCalibration>:
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80039e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	609a      	str	r2, [r3, #8]
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <LL_ADC_IsCalibrationOnGoing>:
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a16:	d101      	bne.n	8003a1c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <LL_ADC_REG_IsConversionOngoing>:
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d101      	bne.n	8003a42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_ADCEx_Calibration_Start+0x1c>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e04d      	b.n	8003b08 <HAL_ADCEx_Calibration_Start+0xb8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ff39 	bl	80038ec <ADC_Disable>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d136      	bne.n	8003af2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a88:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a8c:	f023 0302 	bic.w	r3, r3, #2
 8003a90:	f043 0202 	orr.w	r2, r3, #2
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6839      	ldr	r1, [r7, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff ff96 	bl	80039d0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003aa4:	e014      	b.n	8003ad0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4a18      	ldr	r2, [pc, #96]	@ (8003b10 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d90d      	bls.n	8003ad0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab8:	f023 0312 	bic.w	r3, r3, #18
 8003abc:	f043 0210 	orr.w	r2, r3, #16
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e01b      	b.n	8003b08 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff94 	bl	8003a02 <LL_ADC_IsCalibrationOnGoing>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e2      	bne.n	8003aa6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae4:	f023 0303 	bic.w	r3, r3, #3
 8003ae8:	f043 0201 	orr.w	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003af0:	e005      	b.n	8003afe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af6:	f043 0210 	orr.w	r2, r3, #16
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	0004de01 	.word	0x0004de01

08003b14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003b14:	b590      	push	{r4, r7, lr}
 8003b16:	b0a1      	sub	sp, #132	@ 0x84
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e0e7      	b.n	8003d02 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b4a:	d102      	bne.n	8003b52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	e009      	b.n	8003b66 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a6e      	ldr	r2, [pc, #440]	@ (8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d102      	bne.n	8003b62 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003b5c:	4b6d      	ldr	r3, [pc, #436]	@ (8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	e001      	b.n	8003b66 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10b      	bne.n	8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0be      	b.n	8003d02 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff ff4f 	bl	8003a2a <LL_ADC_REG_IsConversionOngoing>
 8003b8c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff ff49 	bl	8003a2a <LL_ADC_REG_IsConversionOngoing>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f040 80a0 	bne.w	8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003ba0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f040 809c 	bne.w	8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bb0:	d004      	beq.n	8003bbc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a55      	ldr	r2, [pc, #340]	@ (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003bbc:	4b56      	ldr	r3, [pc, #344]	@ (8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003bbe:	e000      	b.n	8003bc2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003bc0:	4b56      	ldr	r3, [pc, #344]	@ (8003d1c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003bc2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d04b      	beq.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003bcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003bde:	035b      	lsls	r3, r3, #13
 8003be0:	430b      	orrs	r3, r1
 8003be2:	431a      	orrs	r2, r3
 8003be4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003be6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bf0:	d004      	beq.n	8003bfc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a45      	ldr	r2, [pc, #276]	@ (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d10f      	bne.n	8003c1c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003bfc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c00:	f7ff fed3 	bl	80039aa <LL_ADC_IsEnabled>
 8003c04:	4604      	mov	r4, r0
 8003c06:	4841      	ldr	r0, [pc, #260]	@ (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c08:	f7ff fecf 	bl	80039aa <LL_ADC_IsEnabled>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	4323      	orrs	r3, r4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf0c      	ite	eq
 8003c14:	2301      	moveq	r3, #1
 8003c16:	2300      	movne	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	e012      	b.n	8003c42 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003c1c:	483c      	ldr	r0, [pc, #240]	@ (8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c1e:	f7ff fec4 	bl	80039aa <LL_ADC_IsEnabled>
 8003c22:	4604      	mov	r4, r0
 8003c24:	483b      	ldr	r0, [pc, #236]	@ (8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c26:	f7ff fec0 	bl	80039aa <LL_ADC_IsEnabled>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	431c      	orrs	r4, r3
 8003c2e:	483c      	ldr	r0, [pc, #240]	@ (8003d20 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003c30:	f7ff febb 	bl	80039aa <LL_ADC_IsEnabled>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4323      	orrs	r3, r4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf0c      	ite	eq
 8003c3c:	2301      	moveq	r3, #1
 8003c3e:	2300      	movne	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d056      	beq.n	8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c4e:	f023 030f 	bic.w	r3, r3, #15
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	6811      	ldr	r1, [r2, #0]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	6892      	ldr	r2, [r2, #8]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c60:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c62:	e047      	b.n	8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c6e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c78:	d004      	beq.n	8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a23      	ldr	r2, [pc, #140]	@ (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d10f      	bne.n	8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003c84:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c88:	f7ff fe8f 	bl	80039aa <LL_ADC_IsEnabled>
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	481f      	ldr	r0, [pc, #124]	@ (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c90:	f7ff fe8b 	bl	80039aa <LL_ADC_IsEnabled>
 8003c94:	4603      	mov	r3, r0
 8003c96:	4323      	orrs	r3, r4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e012      	b.n	8003cca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003ca4:	481a      	ldr	r0, [pc, #104]	@ (8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ca6:	f7ff fe80 	bl	80039aa <LL_ADC_IsEnabled>
 8003caa:	4604      	mov	r4, r0
 8003cac:	4819      	ldr	r0, [pc, #100]	@ (8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003cae:	f7ff fe7c 	bl	80039aa <LL_ADC_IsEnabled>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	431c      	orrs	r4, r3
 8003cb6:	481a      	ldr	r0, [pc, #104]	@ (8003d20 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003cb8:	f7ff fe77 	bl	80039aa <LL_ADC_IsEnabled>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4323      	orrs	r3, r4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d012      	beq.n	8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003cce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003cd6:	f023 030f 	bic.w	r3, r3, #15
 8003cda:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003cdc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cde:	e009      	b.n	8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce4:	f043 0220 	orr.w	r2, r3, #32
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003cf2:	e000      	b.n	8003cf6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cf4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003cfe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3784      	adds	r7, #132	@ 0x84
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd90      	pop	{r4, r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	50000100 	.word	0x50000100
 8003d10:	50000400 	.word	0x50000400
 8003d14:	50000500 	.word	0x50000500
 8003d18:	50000300 	.word	0x50000300
 8003d1c:	50000700 	.word	0x50000700
 8003d20:	50000600 	.word	0x50000600

08003d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d34:	4b0c      	ldr	r3, [pc, #48]	@ (8003d68 <__NVIC_SetPriorityGrouping+0x44>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d40:	4013      	ands	r3, r2
 8003d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d56:	4a04      	ldr	r2, [pc, #16]	@ (8003d68 <__NVIC_SetPriorityGrouping+0x44>)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	60d3      	str	r3, [r2, #12]
}
 8003d5c:	bf00      	nop
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	e000ed00 	.word	0xe000ed00

08003d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d70:	4b04      	ldr	r3, [pc, #16]	@ (8003d84 <__NVIC_GetPriorityGrouping+0x18>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	0a1b      	lsrs	r3, r3, #8
 8003d76:	f003 0307 	and.w	r3, r3, #7
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	db0b      	blt.n	8003db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
 8003d9c:	f003 021f 	and.w	r2, r3, #31
 8003da0:	4907      	ldr	r1, [pc, #28]	@ (8003dc0 <__NVIC_EnableIRQ+0x38>)
 8003da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	2001      	movs	r0, #1
 8003daa:	fa00 f202 	lsl.w	r2, r0, r2
 8003dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	e000e100 	.word	0xe000e100

08003dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	6039      	str	r1, [r7, #0]
 8003dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	db0a      	blt.n	8003dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	490c      	ldr	r1, [pc, #48]	@ (8003e10 <__NVIC_SetPriority+0x4c>)
 8003dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de2:	0112      	lsls	r2, r2, #4
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	440b      	add	r3, r1
 8003de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dec:	e00a      	b.n	8003e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	4908      	ldr	r1, [pc, #32]	@ (8003e14 <__NVIC_SetPriority+0x50>)
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	3b04      	subs	r3, #4
 8003dfc:	0112      	lsls	r2, r2, #4
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	440b      	add	r3, r1
 8003e02:	761a      	strb	r2, [r3, #24]
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	e000e100 	.word	0xe000e100
 8003e14:	e000ed00 	.word	0xe000ed00

08003e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b089      	sub	sp, #36	@ 0x24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f1c3 0307 	rsb	r3, r3, #7
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	bf28      	it	cs
 8003e36:	2304      	movcs	r3, #4
 8003e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	2b06      	cmp	r3, #6
 8003e40:	d902      	bls.n	8003e48 <NVIC_EncodePriority+0x30>
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	3b03      	subs	r3, #3
 8003e46:	e000      	b.n	8003e4a <NVIC_EncodePriority+0x32>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43da      	mvns	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e60:	f04f 31ff 	mov.w	r1, #4294967295
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6a:	43d9      	mvns	r1, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e70:	4313      	orrs	r3, r2
         );
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3724      	adds	r7, #36	@ 0x24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e90:	d301      	bcc.n	8003e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e92:	2301      	movs	r3, #1
 8003e94:	e00f      	b.n	8003eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e96:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec0 <SysTick_Config+0x40>)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e9e:	210f      	movs	r1, #15
 8003ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea4:	f7ff ff8e 	bl	8003dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ea8:	4b05      	ldr	r3, [pc, #20]	@ (8003ec0 <SysTick_Config+0x40>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eae:	4b04      	ldr	r3, [pc, #16]	@ (8003ec0 <SysTick_Config+0x40>)
 8003eb0:	2207      	movs	r2, #7
 8003eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	e000e010 	.word	0xe000e010

08003ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff ff29 	bl	8003d24 <__NVIC_SetPriorityGrouping>
}
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b086      	sub	sp, #24
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ee8:	f7ff ff40 	bl	8003d6c <__NVIC_GetPriorityGrouping>
 8003eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	6978      	ldr	r0, [r7, #20]
 8003ef4:	f7ff ff90 	bl	8003e18 <NVIC_EncodePriority>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff ff5f 	bl	8003dc4 <__NVIC_SetPriority>
}
 8003f06:	bf00      	nop
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	4603      	mov	r3, r0
 8003f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff ff33 	bl	8003d88 <__NVIC_EnableIRQ>
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff ffa4 	bl	8003e80 <SysTick_Config>
 8003f38:	4603      	mov	r3, r0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f52:	e15a      	b.n	800420a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	2101      	movs	r1, #1
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f60:	4013      	ands	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 814c 	beq.w	8004204 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d005      	beq.n	8003f84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d130      	bne.n	8003fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	2203      	movs	r2, #3
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fba:	2201      	movs	r2, #1
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	f003 0201 	and.w	r2, r3, #1
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d017      	beq.n	8004022 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	2203      	movs	r2, #3
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4013      	ands	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d123      	bne.n	8004076 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	08da      	lsrs	r2, r3, #3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3208      	adds	r2, #8
 8004036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800403a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	220f      	movs	r2, #15
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4013      	ands	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	08da      	lsrs	r2, r3, #3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3208      	adds	r2, #8
 8004070:	6939      	ldr	r1, [r7, #16]
 8004072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	2203      	movs	r2, #3
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4013      	ands	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f003 0203 	and.w	r2, r3, #3
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80a6 	beq.w	8004204 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b8:	4b5b      	ldr	r3, [pc, #364]	@ (8004228 <HAL_GPIO_Init+0x2e4>)
 80040ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040bc:	4a5a      	ldr	r2, [pc, #360]	@ (8004228 <HAL_GPIO_Init+0x2e4>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80040c4:	4b58      	ldr	r3, [pc, #352]	@ (8004228 <HAL_GPIO_Init+0x2e4>)
 80040c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040d0:	4a56      	ldr	r2, [pc, #344]	@ (800422c <HAL_GPIO_Init+0x2e8>)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	089b      	lsrs	r3, r3, #2
 80040d6:	3302      	adds	r3, #2
 80040d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	220f      	movs	r2, #15
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4013      	ands	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80040fa:	d01f      	beq.n	800413c <HAL_GPIO_Init+0x1f8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a4c      	ldr	r2, [pc, #304]	@ (8004230 <HAL_GPIO_Init+0x2ec>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d019      	beq.n	8004138 <HAL_GPIO_Init+0x1f4>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a4b      	ldr	r2, [pc, #300]	@ (8004234 <HAL_GPIO_Init+0x2f0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d013      	beq.n	8004134 <HAL_GPIO_Init+0x1f0>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a4a      	ldr	r2, [pc, #296]	@ (8004238 <HAL_GPIO_Init+0x2f4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00d      	beq.n	8004130 <HAL_GPIO_Init+0x1ec>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a49      	ldr	r2, [pc, #292]	@ (800423c <HAL_GPIO_Init+0x2f8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d007      	beq.n	800412c <HAL_GPIO_Init+0x1e8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a48      	ldr	r2, [pc, #288]	@ (8004240 <HAL_GPIO_Init+0x2fc>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d101      	bne.n	8004128 <HAL_GPIO_Init+0x1e4>
 8004124:	2305      	movs	r3, #5
 8004126:	e00a      	b.n	800413e <HAL_GPIO_Init+0x1fa>
 8004128:	2306      	movs	r3, #6
 800412a:	e008      	b.n	800413e <HAL_GPIO_Init+0x1fa>
 800412c:	2304      	movs	r3, #4
 800412e:	e006      	b.n	800413e <HAL_GPIO_Init+0x1fa>
 8004130:	2303      	movs	r3, #3
 8004132:	e004      	b.n	800413e <HAL_GPIO_Init+0x1fa>
 8004134:	2302      	movs	r3, #2
 8004136:	e002      	b.n	800413e <HAL_GPIO_Init+0x1fa>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <HAL_GPIO_Init+0x1fa>
 800413c:	2300      	movs	r3, #0
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	f002 0203 	and.w	r2, r2, #3
 8004144:	0092      	lsls	r2, r2, #2
 8004146:	4093      	lsls	r3, r2
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800414e:	4937      	ldr	r1, [pc, #220]	@ (800422c <HAL_GPIO_Init+0x2e8>)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	089b      	lsrs	r3, r3, #2
 8004154:	3302      	adds	r3, #2
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800415c:	4b39      	ldr	r3, [pc, #228]	@ (8004244 <HAL_GPIO_Init+0x300>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	43db      	mvns	r3, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4013      	ands	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004180:	4a30      	ldr	r2, [pc, #192]	@ (8004244 <HAL_GPIO_Init+0x300>)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004186:	4b2f      	ldr	r3, [pc, #188]	@ (8004244 <HAL_GPIO_Init+0x300>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	43db      	mvns	r3, r3
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4013      	ands	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041aa:	4a26      	ldr	r2, [pc, #152]	@ (8004244 <HAL_GPIO_Init+0x300>)
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80041b0:	4b24      	ldr	r3, [pc, #144]	@ (8004244 <HAL_GPIO_Init+0x300>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	43db      	mvns	r3, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4013      	ands	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004244 <HAL_GPIO_Init+0x300>)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041da:	4b1a      	ldr	r3, [pc, #104]	@ (8004244 <HAL_GPIO_Init+0x300>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	43db      	mvns	r3, r3
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4013      	ands	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041fe:	4a11      	ldr	r2, [pc, #68]	@ (8004244 <HAL_GPIO_Init+0x300>)
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	3301      	adds	r3, #1
 8004208:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	fa22 f303 	lsr.w	r3, r2, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	f47f ae9d 	bne.w	8003f54 <HAL_GPIO_Init+0x10>
  }
}
 800421a:	bf00      	nop
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	40021000 	.word	0x40021000
 800422c:	40010000 	.word	0x40010000
 8004230:	48000400 	.word	0x48000400
 8004234:	48000800 	.word	0x48000800
 8004238:	48000c00 	.word	0x48000c00
 800423c:	48001000 	.word	0x48001000
 8004240:	48001400 	.word	0x48001400
 8004244:	40010400 	.word	0x40010400

08004248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	807b      	strh	r3, [r7, #2]
 8004254:	4613      	mov	r3, r2
 8004256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004258:	787b      	ldrb	r3, [r7, #1]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800425e:	887a      	ldrh	r2, [r7, #2]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004264:	e002      	b.n	800426c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004266:	887a      	ldrh	r2, [r7, #2]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e0c0      	b.n	800440c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f008 fbb6 	bl	800ca10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2203      	movs	r2, #3
 80042a8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f004 fa00 	bl	80086b6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b6:	2300      	movs	r3, #0
 80042b8:	73fb      	strb	r3, [r7, #15]
 80042ba:	e03e      	b.n	800433a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042bc:	7bfa      	ldrb	r2, [r7, #15]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	440b      	add	r3, r1
 80042ca:	3311      	adds	r3, #17
 80042cc:	2201      	movs	r2, #1
 80042ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042d0:	7bfa      	ldrb	r2, [r7, #15]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	440b      	add	r3, r1
 80042de:	3310      	adds	r3, #16
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042e4:	7bfa      	ldrb	r2, [r7, #15]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	440b      	add	r3, r1
 80042f2:	3313      	adds	r3, #19
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042f8:	7bfa      	ldrb	r2, [r7, #15]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	440b      	add	r3, r1
 8004306:	3320      	adds	r3, #32
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800430c:	7bfa      	ldrb	r2, [r7, #15]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	440b      	add	r3, r1
 800431a:	3324      	adds	r3, #36	@ 0x24
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	440b      	add	r3, r1
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	3301      	adds	r3, #1
 8004338:	73fb      	strb	r3, [r7, #15]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	791b      	ldrb	r3, [r3, #4]
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	429a      	cmp	r2, r3
 8004342:	d3bb      	bcc.n	80042bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004344:	2300      	movs	r3, #0
 8004346:	73fb      	strb	r3, [r7, #15]
 8004348:	e044      	b.n	80043d4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800434a:	7bfa      	ldrb	r2, [r7, #15]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	440b      	add	r3, r1
 8004358:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004360:	7bfa      	ldrb	r2, [r7, #15]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	440b      	add	r3, r1
 800436e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004372:	7bfa      	ldrb	r2, [r7, #15]
 8004374:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004376:	7bfa      	ldrb	r2, [r7, #15]
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	440b      	add	r3, r1
 8004384:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800438c:	7bfa      	ldrb	r2, [r7, #15]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	440b      	add	r3, r1
 800439a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043a2:	7bfa      	ldrb	r2, [r7, #15]
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	440b      	add	r3, r1
 80043b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043b8:	7bfa      	ldrb	r2, [r7, #15]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	440b      	add	r3, r1
 80043c6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	3301      	adds	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	791b      	ldrb	r3, [r3, #4]
 80043d8:	7bfa      	ldrb	r2, [r7, #15]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d3b5      	bcc.n	800434a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3304      	adds	r3, #4
 80043e6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80043ea:	f004 f97f 	bl	80086ec <USB_DevInit>

  hpcd->USB_Address = 0U;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	7a9b      	ldrb	r3, [r3, #10]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d102      	bne.n	800440a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f001 fc40 	bl	8005c8a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_PCD_Start+0x16>
 8004426:	2302      	movs	r3, #2
 8004428:	e012      	b.n	8004450 <HAL_PCD_Start+0x3c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f004 f926 	bl	8008688 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f006 fbe6 	bl	800ac12 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f006 fbeb 	bl	800ac40 <USB_ReadInterrupts>
 800446a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fb04 	bl	8004a84 <PCD_EP_ISR_Handler>

    return;
 800447c:	e110      	b.n	80046a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004484:	2b00      	cmp	r3, #0
 8004486:	d013      	beq.n	80044b0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004490:	b29a      	uxth	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800449a:	b292      	uxth	r2, r2
 800449c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f008 fb46 	bl	800cb32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80044a6:	2100      	movs	r1, #0
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f8fc 	bl	80046a6 <HAL_PCD_SetAddress>

    return;
 80044ae:	e0f7      	b.n	80046a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00c      	beq.n	80044d4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80044cc:	b292      	uxth	r2, r2
 80044ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80044d2:	e0e5      	b.n	80046a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00c      	beq.n	80044f8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044f0:	b292      	uxth	r2, r2
 80044f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80044f6:	e0d3      	b.n	80046a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d034      	beq.n	800456c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800450a:	b29a      	uxth	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0204 	bic.w	r2, r2, #4
 8004514:	b292      	uxth	r2, r2
 8004516:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004522:	b29a      	uxth	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0208 	bic.w	r2, r2, #8
 800452c:	b292      	uxth	r2, r2
 800452e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004538:	2b01      	cmp	r3, #1
 800453a:	d107      	bne.n	800454c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004544:	2100      	movs	r1, #0
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f008 fce6 	bl	800cf18 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f008 fb29 	bl	800cba4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800455a:	b29a      	uxth	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004564:	b292      	uxth	r2, r2
 8004566:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800456a:	e099      	b.n	80046a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004572:	2b00      	cmp	r3, #0
 8004574:	d027      	beq.n	80045c6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800457e:	b29a      	uxth	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0208 	orr.w	r2, r2, #8
 8004588:	b292      	uxth	r2, r2
 800458a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004596:	b29a      	uxth	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045a0:	b292      	uxth	r2, r2
 80045a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0204 	orr.w	r2, r2, #4
 80045b8:	b292      	uxth	r2, r2
 80045ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f008 fad6 	bl	800cb70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80045c4:	e06c      	b.n	80046a0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d040      	beq.n	8004652 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80045d8:	b29a      	uxth	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045e2:	b292      	uxth	r2, r2
 80045e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d12b      	bne.n	800464a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0204 	orr.w	r2, r2, #4
 8004604:	b292      	uxth	r2, r2
 8004606:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004612:	b29a      	uxth	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0208 	orr.w	r2, r2, #8
 800461c:	b292      	uxth	r2, r2
 800461e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004632:	b29b      	uxth	r3, r3
 8004634:	089b      	lsrs	r3, r3, #2
 8004636:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004640:	2101      	movs	r1, #1
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f008 fc68 	bl	800cf18 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004648:	e02a      	b.n	80046a0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f008 fa90 	bl	800cb70 <HAL_PCD_SuspendCallback>
    return;
 8004650:	e026      	b.n	80046a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00f      	beq.n	800467c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004664:	b29a      	uxth	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800466e:	b292      	uxth	r2, r2
 8004670:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f008 fa4e 	bl	800cb16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800467a:	e011      	b.n	80046a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00c      	beq.n	80046a0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800468e:	b29a      	uxth	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004698:	b292      	uxth	r2, r2
 800469a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800469e:	bf00      	nop
  }
}
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	460b      	mov	r3, r1
 80046b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_PCD_SetAddress+0x1a>
 80046bc:	2302      	movs	r3, #2
 80046be:	e012      	b.n	80046e6 <HAL_PCD_SetAddress+0x40>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	4611      	mov	r1, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f006 fa87 	bl	800abea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	4608      	mov	r0, r1
 80046f8:	4611      	mov	r1, r2
 80046fa:	461a      	mov	r2, r3
 80046fc:	4603      	mov	r3, r0
 80046fe:	70fb      	strb	r3, [r7, #3]
 8004700:	460b      	mov	r3, r1
 8004702:	803b      	strh	r3, [r7, #0]
 8004704:	4613      	mov	r3, r2
 8004706:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800470c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004710:	2b00      	cmp	r3, #0
 8004712:	da0e      	bge.n	8004732 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	f003 0207 	and.w	r2, r3, #7
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	3310      	adds	r3, #16
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	4413      	add	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	705a      	strb	r2, [r3, #1]
 8004730:	e00e      	b.n	8004750 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	f003 0207 	and.w	r2, r3, #7
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	4413      	add	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	b2da      	uxtb	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800475c:	883a      	ldrh	r2, [r7, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	78ba      	ldrb	r2, [r7, #2]
 8004766:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004768:	78bb      	ldrb	r3, [r7, #2]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d102      	bne.n	8004774 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_PCD_EP_Open+0x94>
 800477e:	2302      	movs	r3, #2
 8004780:	e00e      	b.n	80047a0 <HAL_PCD_EP_Open+0xb2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68f9      	ldr	r1, [r7, #12]
 8004790:	4618      	mov	r0, r3
 8004792:	f003 ffc9 	bl	8008728 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800479e:	7afb      	ldrb	r3, [r7, #11]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	da0e      	bge.n	80047da <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	f003 0207 	and.w	r2, r3, #7
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	3310      	adds	r3, #16
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	4413      	add	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	705a      	strb	r2, [r3, #1]
 80047d8:	e00e      	b.n	80047f8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047da:	78fb      	ldrb	r3, [r7, #3]
 80047dc:	f003 0207 	and.w	r2, r3, #7
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	4413      	add	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_PCD_EP_Close+0x6a>
 800480e:	2302      	movs	r3, #2
 8004810:	e00e      	b.n	8004830 <HAL_PCD_EP_Close+0x88>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68f9      	ldr	r1, [r7, #12]
 8004820:	4618      	mov	r0, r3
 8004822:	f004 fb45 	bl	8008eb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	607a      	str	r2, [r7, #4]
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	460b      	mov	r3, r1
 8004846:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004848:	7afb      	ldrb	r3, [r7, #11]
 800484a:	f003 0207 	and.w	r2, r3, #7
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4413      	add	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2200      	movs	r2, #0
 8004870:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2200      	movs	r2, #0
 8004876:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004878:	7afb      	ldrb	r3, [r7, #11]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	b2da      	uxtb	r2, r3
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6979      	ldr	r1, [r7, #20]
 800488a:	4618      	mov	r0, r3
 800488c:	f004 fcfd 	bl	800928a <USB_EPStartXfer>

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	460b      	mov	r3, r1
 80048a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	f003 0207 	and.w	r2, r3, #7
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	440b      	add	r3, r1
 80048b8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80048bc:	681b      	ldr	r3, [r3, #0]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b086      	sub	sp, #24
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
 80048d6:	460b      	mov	r3, r1
 80048d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048da:	7afb      	ldrb	r3, [r7, #11]
 80048dc:	f003 0207 	and.w	r2, r3, #7
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	3310      	adds	r3, #16
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4413      	add	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2200      	movs	r2, #0
 800490e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2201      	movs	r2, #1
 8004914:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004916:	7afb      	ldrb	r3, [r7, #11]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	b2da      	uxtb	r2, r3
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6979      	ldr	r1, [r7, #20]
 8004928:	4618      	mov	r0, r3
 800492a:	f004 fcae 	bl	800928a <USB_EPStartXfer>

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	7912      	ldrb	r2, [r2, #4]
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e03e      	b.n	80049d4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800495a:	2b00      	cmp	r3, #0
 800495c:	da0e      	bge.n	800497c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	f003 0207 	and.w	r2, r3, #7
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	3310      	adds	r3, #16
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	705a      	strb	r2, [r3, #1]
 800497a:	e00c      	b.n	8004996 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800497c:	78fa      	ldrb	r2, [r7, #3]
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_PCD_EP_SetStall+0x7e>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e00e      	b.n	80049d4 <HAL_PCD_EP_SetStall+0x9c>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68f9      	ldr	r1, [r7, #12]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f006 f811 	bl	800a9ec <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	7912      	ldrb	r2, [r2, #4]
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e040      	b.n	8004a7c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	da0e      	bge.n	8004a20 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a02:	78fb      	ldrb	r3, [r7, #3]
 8004a04:	f003 0207 	and.w	r2, r3, #7
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3310      	adds	r3, #16
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	4413      	add	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	705a      	strb	r2, [r3, #1]
 8004a1e:	e00e      	b.n	8004a3e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	f003 0207 	and.w	r2, r3, #7
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4413      	add	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_PCD_EP_ClrStall+0x82>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e00e      	b.n	8004a7c <HAL_PCD_EP_ClrStall+0xa0>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68f9      	ldr	r1, [r7, #12]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f006 f80e 	bl	800aa8e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b096      	sub	sp, #88	@ 0x58
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004a8c:	e3ad      	b.n	80051ea <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a96:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004a9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8004aa8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f040 816f 	bne.w	8004d90 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004ab2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004ab6:	f003 0310 	and.w	r3, r3, #16
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d14c      	bne.n	8004b58 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ace:	81fb      	strh	r3, [r7, #14]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	89fb      	ldrh	r3, [r7, #14]
 8004ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3310      	adds	r3, #16
 8004ae6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	461a      	mov	r2, r3
 8004af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	4413      	add	r3, r2
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6812      	ldr	r2, [r2, #0]
 8004b00:	4413      	add	r3, r2
 8004b02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b0e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b12:	695a      	ldr	r2, [r3, #20]
 8004b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	441a      	add	r2, r3
 8004b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b1c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004b1e:	2100      	movs	r1, #0
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f007 ffde 	bl	800cae2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	7b1b      	ldrb	r3, [r3, #12]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 835c 	beq.w	80051ea <PCD_EP_ISR_Handler+0x766>
 8004b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f040 8357 	bne.w	80051ea <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	7b1b      	ldrb	r3, [r3, #12]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	731a      	strb	r2, [r3, #12]
 8004b56:	e348      	b.n	80051ea <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b5e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004b6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004b6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d032      	beq.n	8004bdc <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	4413      	add	r3, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6812      	ldr	r2, [r2, #0]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b9c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004baa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	f006 f897 	bl	800ace4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	823b      	strh	r3, [r7, #16]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	8a3a      	ldrh	r2, [r7, #16]
 8004bcc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004bd0:	b292      	uxth	r2, r2
 8004bd2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f007 ff57 	bl	800ca88 <HAL_PCD_SetupStageCallback>
 8004bda:	e306      	b.n	80051ea <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004bdc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f280 8302 	bge.w	80051ea <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	83fb      	strh	r3, [r7, #30]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	8bfa      	ldrh	r2, [r7, #30]
 8004bfc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c00:	b292      	uxth	r2, r2
 8004c02:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	4413      	add	r3, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6812      	ldr	r2, [r2, #0]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c2a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d019      	beq.n	8004c68 <PCD_EP_ISR_Handler+0x1e4>
 8004c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d015      	beq.n	8004c68 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c42:	6959      	ldr	r1, [r3, #20]
 8004c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c46:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c4a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f006 f849 	bl	800ace4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	441a      	add	r2, r3
 8004c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c5e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004c60:	2100      	movs	r1, #0
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f007 ff22 	bl	800caac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004c72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004c76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f040 82b5 	bne.w	80051ea <PCD_EP_ISR_Handler+0x766>
 8004c80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004c84:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004c88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c8c:	f000 82ad 	beq.w	80051ea <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	61bb      	str	r3, [r7, #24]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	801a      	strh	r2, [r3, #0]
 8004cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004cc6:	d91d      	bls.n	8004d04 <PCD_EP_ISR_Handler+0x280>
 8004cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	095b      	lsrs	r3, r3, #5
 8004cce:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d102      	bne.n	8004ce2 <PCD_EP_ISR_Handler+0x25e>
 8004cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	029b      	lsls	r3, r3, #10
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	801a      	strh	r2, [r3, #0]
 8004d02:	e026      	b.n	8004d52 <PCD_EP_ISR_Handler+0x2ce>
 8004d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <PCD_EP_ISR_Handler+0x29e>
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	801a      	strh	r2, [r3, #0]
 8004d20:	e017      	b.n	8004d52 <PCD_EP_ISR_Handler+0x2ce>
 8004d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	085b      	lsrs	r3, r3, #1
 8004d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <PCD_EP_ISR_Handler+0x2b8>
 8004d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d38:	3301      	adds	r3, #1
 8004d3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	029b      	lsls	r3, r3, #10
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d62:	827b      	strh	r3, [r7, #18]
 8004d64:	8a7b      	ldrh	r3, [r7, #18]
 8004d66:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004d6a:	827b      	strh	r3, [r7, #18]
 8004d6c:	8a7b      	ldrh	r3, [r7, #18]
 8004d6e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d72:	827b      	strh	r3, [r7, #18]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	8a7b      	ldrh	r3, [r7, #18]
 8004d7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	8013      	strh	r3, [r2, #0]
 8004d8e:	e22c      	b.n	80051ea <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004da4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f280 80f6 	bge.w	8004f9a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004ddc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004de0:	b292      	uxth	r2, r2
 8004de2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004de4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	4413      	add	r3, r2
 8004df8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dfc:	7b1b      	ldrb	r3, [r3, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d123      	bne.n	8004e4a <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e26:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004e2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 808e 	beq.w	8004f50 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e3a:	6959      	ldr	r1, [r3, #20]
 8004e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e3e:	88da      	ldrh	r2, [r3, #6]
 8004e40:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004e44:	f005 ff4e 	bl	800ace4 <USB_ReadPMA>
 8004e48:	e082      	b.n	8004f50 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e4c:	78db      	ldrb	r3, [r3, #3]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d10a      	bne.n	8004e68 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004e52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004e56:	461a      	mov	r2, r3
 8004e58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f9d3 	bl	8005206 <HAL_PCD_EP_DB_Receive>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004e66:	e073      	b.n	8004f50 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e82:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	441a      	add	r2, r3
 8004e94:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004e98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ea0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ea4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d022      	beq.n	8004f0c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	4413      	add	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eea:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004eee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d02c      	beq.n	8004f50 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004efc:	6959      	ldr	r1, [r3, #20]
 8004efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f00:	891a      	ldrh	r2, [r3, #8]
 8004f02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004f06:	f005 feed 	bl	800ace4 <USB_ReadPMA>
 8004f0a:	e021      	b.n	8004f50 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	4413      	add	r3, r2
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	4413      	add	r3, r2
 8004f26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f30:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004f34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d009      	beq.n	8004f50 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6818      	ldr	r0, [r3, #0]
 8004f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f42:	6959      	ldr	r1, [r3, #20]
 8004f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f46:	895a      	ldrh	r2, [r3, #10]
 8004f48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004f4c:	f005 feca 	bl	800ace4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f52:	69da      	ldr	r2, [r3, #28]
 8004f54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004f58:	441a      	add	r2, r3
 8004f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f5c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004f66:	441a      	add	r2, r3
 8004f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f6a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <PCD_EP_ISR_Handler+0x4fc>
 8004f74:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d206      	bcs.n	8004f8e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	4619      	mov	r1, r3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f007 fd90 	bl	800caac <HAL_PCD_DataOutStageCallback>
 8004f8c:	e005      	b.n	8004f9a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f94:	4618      	mov	r0, r3
 8004f96:	f004 f978 	bl	800928a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004f9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 8121 	beq.w	80051ea <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8004fa8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	3310      	adds	r3, #16
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	4413      	add	r3, r2
 8004fba:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	441a      	add	r2, r3
 8004fe8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ffa:	78db      	ldrb	r3, [r3, #3]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	f040 80a2 	bne.w	8005146 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8005002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005004:	2200      	movs	r2, #0
 8005006:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800500a:	7b1b      	ldrb	r3, [r3, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8093 	beq.w	8005138 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005012:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d046      	beq.n	80050ac <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800501e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005020:	785b      	ldrb	r3, [r3, #1]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d126      	bne.n	8005074 <PCD_EP_ISR_Handler+0x5f0>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	627b      	str	r3, [r7, #36]	@ 0x24
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005034:	b29b      	uxth	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	4413      	add	r3, r2
 800503c:	627b      	str	r3, [r7, #36]	@ 0x24
 800503e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	00da      	lsls	r2, r3, #3
 8005044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005046:	4413      	add	r3, r2
 8005048:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800504c:	623b      	str	r3, [r7, #32]
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005058:	b29a      	uxth	r2, r3
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	801a      	strh	r2, [r3, #0]
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	b29b      	uxth	r3, r3
 8005064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800506c:	b29a      	uxth	r2, r3
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	801a      	strh	r2, [r3, #0]
 8005072:	e061      	b.n	8005138 <PCD_EP_ISR_Handler+0x6b4>
 8005074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d15d      	bne.n	8005138 <PCD_EP_ISR_Handler+0x6b4>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800508a:	b29b      	uxth	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005090:	4413      	add	r3, r2
 8005092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	00da      	lsls	r2, r3, #3
 800509a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509c:	4413      	add	r3, r2
 800509e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80050a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a6:	2200      	movs	r2, #0
 80050a8:	801a      	strh	r2, [r3, #0]
 80050aa:	e045      	b.n	8005138 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050b4:	785b      	ldrb	r3, [r3, #1]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d126      	bne.n	8005108 <PCD_EP_ISR_Handler+0x684>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	637b      	str	r3, [r7, #52]	@ 0x34
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ce:	4413      	add	r3, r2
 80050d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	00da      	lsls	r2, r3, #3
 80050d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050da:	4413      	add	r3, r2
 80050dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80050e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80050e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f0:	801a      	strh	r2, [r3, #0]
 80050f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005100:	b29a      	uxth	r2, r3
 8005102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005104:	801a      	strh	r2, [r3, #0]
 8005106:	e017      	b.n	8005138 <PCD_EP_ISR_Handler+0x6b4>
 8005108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d113      	bne.n	8005138 <PCD_EP_ISR_Handler+0x6b4>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005118:	b29b      	uxth	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800511e:	4413      	add	r3, r2
 8005120:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	00da      	lsls	r2, r3, #3
 8005128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800512a:	4413      	add	r3, r2
 800512c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005130:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005134:	2200      	movs	r2, #0
 8005136:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	4619      	mov	r1, r3
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f007 fccf 	bl	800cae2 <HAL_PCD_DataInStageCallback>
 8005144:	e051      	b.n	80051ea <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005146:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800514a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800514e:	2b00      	cmp	r3, #0
 8005150:	d144      	bne.n	80051dc <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800515a:	b29b      	uxth	r3, r3
 800515c:	461a      	mov	r2, r3
 800515e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	4413      	add	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6812      	ldr	r2, [r2, #0]
 800516a:	4413      	add	r3, r2
 800516c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005176:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800517a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800517c:	699a      	ldr	r2, [r3, #24]
 800517e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005182:	429a      	cmp	r2, r3
 8005184:	d907      	bls.n	8005196 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8005186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800518e:	1ad2      	subs	r2, r2, r3
 8005190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005192:	619a      	str	r2, [r3, #24]
 8005194:	e002      	b.n	800519c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8005196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005198:	2200      	movs	r2, #0
 800519a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800519c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80051a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	4619      	mov	r1, r3
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f007 fc99 	bl	800cae2 <HAL_PCD_DataInStageCallback>
 80051b0:	e01b      	b.n	80051ea <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80051b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80051ba:	441a      	add	r2, r3
 80051bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051be:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80051c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c2:	69da      	ldr	r2, [r3, #28]
 80051c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80051c8:	441a      	add	r2, r3
 80051ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051cc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051d4:	4618      	mov	r0, r3
 80051d6:	f004 f858 	bl	800928a <USB_EPStartXfer>
 80051da:	e006      	b.n	80051ea <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80051dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80051e0:	461a      	mov	r2, r3
 80051e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f917 	bl	8005418 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	b21b      	sxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f6ff ac49 	blt.w	8004a8e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3758      	adds	r7, #88	@ 0x58
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b088      	sub	sp, #32
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	4613      	mov	r3, r2
 8005212:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d07c      	beq.n	8005318 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005226:	b29b      	uxth	r3, r3
 8005228:	461a      	mov	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4413      	add	r3, r2
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	6812      	ldr	r2, [r2, #0]
 8005236:	4413      	add	r3, r2
 8005238:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005242:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	699a      	ldr	r2, [r3, #24]
 8005248:	8b7b      	ldrh	r3, [r7, #26]
 800524a:	429a      	cmp	r2, r3
 800524c:	d306      	bcc.n	800525c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	8b7b      	ldrh	r3, [r7, #26]
 8005254:	1ad2      	subs	r2, r2, r3
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	619a      	str	r2, [r3, #24]
 800525a:	e002      	b.n	8005262 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2200      	movs	r2, #0
 8005260:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d123      	bne.n	80052b2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005284:	833b      	strh	r3, [r7, #24]
 8005286:	8b3b      	ldrh	r3, [r7, #24]
 8005288:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800528c:	833b      	strh	r3, [r7, #24]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	441a      	add	r2, r3
 800529c:	8b3b      	ldrh	r3, [r7, #24]
 800529e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01f      	beq.n	80052fc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d6:	82fb      	strh	r3, [r7, #22]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	441a      	add	r2, r3
 80052e6:	8afb      	ldrh	r3, [r7, #22]
 80052e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80052fc:	8b7b      	ldrh	r3, [r7, #26]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 8085 	beq.w	800540e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	6959      	ldr	r1, [r3, #20]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	891a      	ldrh	r2, [r3, #8]
 8005310:	8b7b      	ldrh	r3, [r7, #26]
 8005312:	f005 fce7 	bl	800ace4 <USB_ReadPMA>
 8005316:	e07a      	b.n	800540e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005320:	b29b      	uxth	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4413      	add	r3, r2
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	4413      	add	r3, r2
 8005332:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800533c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	8b7b      	ldrh	r3, [r7, #26]
 8005344:	429a      	cmp	r2, r3
 8005346:	d306      	bcc.n	8005356 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	699a      	ldr	r2, [r3, #24]
 800534c:	8b7b      	ldrh	r3, [r7, #26]
 800534e:	1ad2      	subs	r2, r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	619a      	str	r2, [r3, #24]
 8005354:	e002      	b.n	800535c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2200      	movs	r2, #0
 800535a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d123      	bne.n	80053ac <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800537a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537e:	83fb      	strh	r3, [r7, #30]
 8005380:	8bfb      	ldrh	r3, [r7, #30]
 8005382:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005386:	83fb      	strh	r3, [r7, #30]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	441a      	add	r2, r3
 8005396:	8bfb      	ldrh	r3, [r7, #30]
 8005398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800539c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80053ac:	88fb      	ldrh	r3, [r7, #6]
 80053ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d11f      	bne.n	80053f6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d0:	83bb      	strh	r3, [r7, #28]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	8bbb      	ldrh	r3, [r7, #28]
 80053e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80053f6:	8b7b      	ldrh	r3, [r7, #26]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	6959      	ldr	r1, [r3, #20]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	895a      	ldrh	r2, [r3, #10]
 8005408:	8b7b      	ldrh	r3, [r7, #26]
 800540a:	f005 fc6b 	bl	800ace4 <USB_ReadPMA>
    }
  }

  return count;
 800540e:	8b7b      	ldrh	r3, [r7, #26]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3720      	adds	r7, #32
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b0a4      	sub	sp, #144	@ 0x90
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	4613      	mov	r3, r2
 8005424:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 81db 	beq.w	80057e8 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800543a:	b29b      	uxth	r3, r3
 800543c:	461a      	mov	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	4413      	add	r3, r2
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	4413      	add	r3, r2
 800544c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005456:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005462:	429a      	cmp	r2, r3
 8005464:	d907      	bls.n	8005476 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800546e:	1ad2      	subs	r2, r2, r3
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	619a      	str	r2, [r3, #24]
 8005474:	e002      	b.n	800547c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2200      	movs	r2, #0
 800547a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f040 80b9 	bne.w	80055f8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d126      	bne.n	80054dc <HAL_PCD_EP_DB_Transmit+0xc4>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800549c:	b29b      	uxth	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a2:	4413      	add	r3, r2
 80054a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	00da      	lsls	r2, r3, #3
 80054ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ae:	4413      	add	r3, r2
 80054b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80054b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c4:	801a      	strh	r2, [r3, #0]
 80054c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d8:	801a      	strh	r2, [r3, #0]
 80054da:	e01a      	b.n	8005512 <HAL_PCD_EP_DB_Transmit+0xfa>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	785b      	ldrb	r3, [r3, #1]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d116      	bne.n	8005512 <HAL_PCD_EP_DB_Transmit+0xfa>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f8:	4413      	add	r3, r2
 80054fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	00da      	lsls	r2, r3, #3
 8005502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005504:	4413      	add	r3, r2
 8005506:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800550a:	633b      	str	r3, [r7, #48]	@ 0x30
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	2200      	movs	r2, #0
 8005510:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	627b      	str	r3, [r7, #36]	@ 0x24
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	785b      	ldrb	r3, [r3, #1]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d126      	bne.n	800556e <HAL_PCD_EP_DB_Transmit+0x156>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	61fb      	str	r3, [r7, #28]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800552e:	b29b      	uxth	r3, r3
 8005530:	461a      	mov	r2, r3
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	4413      	add	r3, r2
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	00da      	lsls	r2, r3, #3
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005552:	b29a      	uxth	r2, r3
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	801a      	strh	r2, [r3, #0]
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	b29b      	uxth	r3, r3
 800555e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005566:	b29a      	uxth	r2, r3
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	e017      	b.n	800559e <HAL_PCD_EP_DB_Transmit+0x186>
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	785b      	ldrb	r3, [r3, #1]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d113      	bne.n	800559e <HAL_PCD_EP_DB_Transmit+0x186>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800557e:	b29b      	uxth	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	4413      	add	r3, r2
 8005586:	627b      	str	r3, [r7, #36]	@ 0x24
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	00da      	lsls	r2, r3, #3
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	4413      	add	r3, r2
 8005592:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005596:	623b      	str	r3, [r7, #32]
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	2200      	movs	r2, #0
 800559c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	4619      	mov	r1, r3
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f007 fa9c 	bl	800cae2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 82fa 	beq.w	8005baa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d0:	82fb      	strh	r3, [r7, #22]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	441a      	add	r2, r3
 80055e0:	8afb      	ldrh	r3, [r7, #22]
 80055e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	8013      	strh	r3, [r2, #0]
 80055f6:	e2d8      	b.n	8005baa <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d021      	beq.n	8005646 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800561c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	461a      	mov	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	441a      	add	r2, r3
 800562e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005632:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005636:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800563a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800563e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005642:	b29b      	uxth	r3, r3
 8005644:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800564c:	2b01      	cmp	r3, #1
 800564e:	f040 82ac 	bne.w	8005baa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	695a      	ldr	r2, [r3, #20]
 8005656:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800565a:	441a      	add	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005668:	441a      	add	r2, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	6a1a      	ldr	r2, [r3, #32]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	429a      	cmp	r2, r3
 8005678:	d30b      	bcc.n	8005692 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	6a1a      	ldr	r2, [r3, #32]
 8005686:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800568a:	1ad2      	subs	r2, r2, r3
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	621a      	str	r2, [r3, #32]
 8005690:	e017      	b.n	80056c2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d108      	bne.n	80056ac <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800569a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800569e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80056aa:	e00a      	b.n	80056c2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2200      	movs	r2, #0
 80056c0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	785b      	ldrb	r3, [r3, #1]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d165      	bne.n	8005796 <HAL_PCD_EP_DB_Transmit+0x37e>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056d8:	b29b      	uxth	r3, r3
 80056da:	461a      	mov	r2, r3
 80056dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056de:	4413      	add	r3, r2
 80056e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	00da      	lsls	r2, r3, #3
 80056e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ea:	4413      	add	r3, r2
 80056ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005706:	2b3e      	cmp	r3, #62	@ 0x3e
 8005708:	d91d      	bls.n	8005746 <HAL_PCD_EP_DB_Transmit+0x32e>
 800570a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005712:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2b00      	cmp	r3, #0
 800571c:	d102      	bne.n	8005724 <HAL_PCD_EP_DB_Transmit+0x30c>
 800571e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005720:	3b01      	subs	r3, #1
 8005722:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	b29a      	uxth	r2, r3
 800572a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800572c:	b29b      	uxth	r3, r3
 800572e:	029b      	lsls	r3, r3, #10
 8005730:	b29b      	uxth	r3, r3
 8005732:	4313      	orrs	r3, r2
 8005734:	b29b      	uxth	r3, r3
 8005736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800573a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800573e:	b29a      	uxth	r2, r3
 8005740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005742:	801a      	strh	r2, [r3, #0]
 8005744:	e044      	b.n	80057d0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005746:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10a      	bne.n	8005764 <HAL_PCD_EP_DB_Transmit+0x34c>
 800574e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b29b      	uxth	r3, r3
 8005754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800575c:	b29a      	uxth	r2, r3
 800575e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005760:	801a      	strh	r2, [r3, #0]
 8005762:	e035      	b.n	80057d0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005764:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005768:	085b      	lsrs	r3, r3, #1
 800576a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800576c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_PCD_EP_DB_Transmit+0x366>
 8005778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800577a:	3301      	adds	r3, #1
 800577c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800577e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29a      	uxth	r2, r3
 8005784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005786:	b29b      	uxth	r3, r3
 8005788:	029b      	lsls	r3, r3, #10
 800578a:	b29b      	uxth	r3, r3
 800578c:	4313      	orrs	r3, r2
 800578e:	b29a      	uxth	r2, r3
 8005790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005792:	801a      	strh	r2, [r3, #0]
 8005794:	e01c      	b.n	80057d0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	785b      	ldrb	r3, [r3, #1]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d118      	bne.n	80057d0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057b2:	4413      	add	r3, r2
 80057b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	00da      	lsls	r2, r3, #3
 80057bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057be:	4413      	add	r3, r2
 80057c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80057c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80057c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057ce:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	6959      	ldr	r1, [r3, #20]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	891a      	ldrh	r2, [r3, #8]
 80057dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f005 fa3d 	bl	800ac60 <USB_WritePMA>
 80057e6:	e1e0      	b.n	8005baa <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	461a      	mov	r2, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	4413      	add	r3, r2
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	6812      	ldr	r2, [r2, #0]
 8005800:	4413      	add	r3, r2
 8005802:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800580c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005818:	429a      	cmp	r2, r3
 800581a:	d307      	bcc.n	800582c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	699a      	ldr	r2, [r3, #24]
 8005820:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005824:	1ad2      	subs	r2, r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	619a      	str	r2, [r3, #24]
 800582a:	e002      	b.n	8005832 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2200      	movs	r2, #0
 8005830:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f040 80c0 	bne.w	80059bc <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	785b      	ldrb	r3, [r3, #1]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d126      	bne.n	8005892 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005852:	b29b      	uxth	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005858:	4413      	add	r3, r2
 800585a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	00da      	lsls	r2, r3, #3
 8005862:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005864:	4413      	add	r3, r2
 8005866:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800586a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800586c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005876:	b29a      	uxth	r2, r3
 8005878:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588a:	b29a      	uxth	r2, r3
 800588c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800588e:	801a      	strh	r2, [r3, #0]
 8005890:	e01a      	b.n	80058c8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d116      	bne.n	80058c8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	667b      	str	r3, [r7, #100]	@ 0x64
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058ae:	4413      	add	r3, r2
 80058b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	00da      	lsls	r2, r3, #3
 80058b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058ba:	4413      	add	r3, r2
 80058bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80058c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80058c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058c4:	2200      	movs	r2, #0
 80058c6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d12b      	bne.n	800592e <HAL_PCD_EP_DB_Transmit+0x516>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058ea:	4413      	add	r3, r2
 80058ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	00da      	lsls	r2, r3, #3
 80058f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058f6:	4413      	add	r3, r2
 80058f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80058fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005900:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	b29b      	uxth	r3, r3
 8005908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800590c:	b29a      	uxth	r2, r3
 800590e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29b      	uxth	r3, r3
 800591c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005924:	b29a      	uxth	r2, r3
 8005926:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800592a:	801a      	strh	r2, [r3, #0]
 800592c:	e017      	b.n	800595e <HAL_PCD_EP_DB_Transmit+0x546>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d113      	bne.n	800595e <HAL_PCD_EP_DB_Transmit+0x546>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800593e:	b29b      	uxth	r3, r3
 8005940:	461a      	mov	r2, r3
 8005942:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005944:	4413      	add	r3, r2
 8005946:	677b      	str	r3, [r7, #116]	@ 0x74
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	00da      	lsls	r2, r3, #3
 800594e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005950:	4413      	add	r3, r2
 8005952:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005956:	673b      	str	r3, [r7, #112]	@ 0x70
 8005958:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800595a:	2200      	movs	r2, #0
 800595c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	4619      	mov	r1, r3
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f007 f8bc 	bl	800cae2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005970:	2b00      	cmp	r3, #0
 8005972:	f040 811a 	bne.w	8005baa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800598c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005990:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	461a      	mov	r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	441a      	add	r2, r3
 80059a2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80059a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	8013      	strh	r3, [r2, #0]
 80059ba:	e0f6      	b.n	8005baa <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80059bc:	88fb      	ldrh	r3, [r7, #6]
 80059be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d121      	bne.n	8005a0a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	461a      	mov	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	441a      	add	r2, r3
 80059f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80059f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	f040 80ca 	bne.w	8005baa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	695a      	ldr	r2, [r3, #20]
 8005a1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005a1e:	441a      	add	r2, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	69da      	ldr	r2, [r3, #28]
 8005a28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005a2c:	441a      	add	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	6a1a      	ldr	r2, [r3, #32]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d30b      	bcc.n	8005a56 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	6a1a      	ldr	r2, [r3, #32]
 8005a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a4e:	1ad2      	subs	r2, r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	621a      	str	r2, [r3, #32]
 8005a54:	e017      	b.n	8005a86 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d108      	bne.n	8005a70 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005a5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005a62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005a6e:	e00a      	b.n	8005a86 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d165      	bne.n	8005b60 <HAL_PCD_EP_DB_Transmit+0x748>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aa8:	4413      	add	r3, r2
 8005aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	00da      	lsls	r2, r3, #3
 8005ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005aba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005abc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005aca:	801a      	strh	r2, [r3, #0]
 8005acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ad0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ad2:	d91d      	bls.n	8005b10 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ae0:	f003 031f 	and.w	r3, r3, #31
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d102      	bne.n	8005aee <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005ae8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aea:	3b01      	subs	r3, #1
 8005aec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	029b      	lsls	r3, r3, #10
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	4313      	orrs	r3, r2
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b0c:	801a      	strh	r2, [r3, #0]
 8005b0e:	e041      	b.n	8005b94 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10a      	bne.n	8005b2e <HAL_PCD_EP_DB_Transmit+0x716>
 8005b18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b2a:	801a      	strh	r2, [r3, #0]
 8005b2c:	e032      	b.n	8005b94 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b32:	085b      	lsrs	r3, r3, #1
 8005b34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <HAL_PCD_EP_DB_Transmit+0x730>
 8005b42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b44:	3301      	adds	r3, #1
 8005b46:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	029b      	lsls	r3, r3, #10
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	4313      	orrs	r3, r2
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b5c:	801a      	strh	r2, [r3, #0]
 8005b5e:	e019      	b.n	8005b94 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d115      	bne.n	8005b94 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b76:	4413      	add	r3, r2
 8005b78:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	00da      	lsls	r2, r3, #3
 8005b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b82:	4413      	add	r3, r2
 8005b84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b88:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b92:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	6959      	ldr	r1, [r3, #20]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	895a      	ldrh	r2, [r3, #10]
 8005ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f005 f85b 	bl	800ac60 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bc4:	82bb      	strh	r3, [r7, #20]
 8005bc6:	8abb      	ldrh	r3, [r7, #20]
 8005bc8:	f083 0310 	eor.w	r3, r3, #16
 8005bcc:	82bb      	strh	r3, [r7, #20]
 8005bce:	8abb      	ldrh	r3, [r7, #20]
 8005bd0:	f083 0320 	eor.w	r3, r3, #32
 8005bd4:	82bb      	strh	r3, [r7, #20]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	441a      	add	r2, r3
 8005be4:	8abb      	ldrh	r3, [r7, #20]
 8005be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3790      	adds	r7, #144	@ 0x90
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	607b      	str	r3, [r7, #4]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	817b      	strh	r3, [r7, #10]
 8005c12:	4613      	mov	r3, r2
 8005c14:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c16:	897b      	ldrh	r3, [r7, #10]
 8005c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00b      	beq.n	8005c3a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c22:	897b      	ldrh	r3, [r7, #10]
 8005c24:	f003 0207 	and.w	r2, r3, #7
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	3310      	adds	r3, #16
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4413      	add	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	e009      	b.n	8005c4e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c3a:	897a      	ldrh	r2, [r7, #10]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005c4e:	893b      	ldrh	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d107      	bne.n	8005c64 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2200      	movs	r2, #0
 8005c58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	80da      	strh	r2, [r3, #6]
 8005c62:	e00b      	b.n	8005c7c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2201      	movs	r2, #1
 8005c68:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	0c1b      	lsrs	r3, r3, #16
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f043 0301 	orr.w	r3, r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f043 0302 	orr.w	r3, r3, #2
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
	...

08005ce0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d141      	bne.n	8005d72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cee:	4b4b      	ldr	r3, [pc, #300]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cfa:	d131      	bne.n	8005d60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cfc:	4b47      	ldr	r3, [pc, #284]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d02:	4a46      	ldr	r2, [pc, #280]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d0c:	4b43      	ldr	r3, [pc, #268]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d14:	4a41      	ldr	r2, [pc, #260]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d1c:	4b40      	ldr	r3, [pc, #256]	@ (8005e20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2232      	movs	r2, #50	@ 0x32
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	4a3f      	ldr	r2, [pc, #252]	@ (8005e24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d28:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2c:	0c9b      	lsrs	r3, r3, #18
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d32:	e002      	b.n	8005d3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d3a:	4b38      	ldr	r3, [pc, #224]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d46:	d102      	bne.n	8005d4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f2      	bne.n	8005d34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d4e:	4b33      	ldr	r3, [pc, #204]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d5a:	d158      	bne.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e057      	b.n	8005e10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d60:	4b2e      	ldr	r3, [pc, #184]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d66:	4a2d      	ldr	r2, [pc, #180]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005d70:	e04d      	b.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d78:	d141      	bne.n	8005dfe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d7a:	4b28      	ldr	r3, [pc, #160]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d86:	d131      	bne.n	8005dec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d88:	4b24      	ldr	r3, [pc, #144]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d8e:	4a23      	ldr	r2, [pc, #140]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d98:	4b20      	ldr	r3, [pc, #128]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005da0:	4a1e      	ldr	r2, [pc, #120]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005da6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005da8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2232      	movs	r2, #50	@ 0x32
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	4a1c      	ldr	r2, [pc, #112]	@ (8005e24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005db4:	fba2 2303 	umull	r2, r3, r2, r3
 8005db8:	0c9b      	lsrs	r3, r3, #18
 8005dba:	3301      	adds	r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dbe:	e002      	b.n	8005dc6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dc6:	4b15      	ldr	r3, [pc, #84]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dd2:	d102      	bne.n	8005dda <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f2      	bne.n	8005dc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dda:	4b10      	ldr	r3, [pc, #64]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005de6:	d112      	bne.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e011      	b.n	8005e10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dec:	4b0b      	ldr	r3, [pc, #44]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005df2:	4a0a      	ldr	r2, [pc, #40]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005df8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005dfc:	e007      	b.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005dfe:	4b07      	ldr	r3, [pc, #28]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e06:	4a05      	ldr	r2, [pc, #20]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	40007000 	.word	0x40007000
 8005e20:	20000000 	.word	0x20000000
 8005e24:	431bde83 	.word	0x431bde83

08005e28 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005e2c:	4b05      	ldr	r3, [pc, #20]	@ (8005e44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	4a04      	ldr	r2, [pc, #16]	@ (8005e44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e36:	6093      	str	r3, [r2, #8]
}
 8005e38:	bf00      	nop
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40007000 	.word	0x40007000

08005e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e2fe      	b.n	8006458 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d075      	beq.n	8005f52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e66:	4b97      	ldr	r3, [pc, #604]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
 8005e6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e70:	4b94      	ldr	r3, [pc, #592]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f003 0303 	and.w	r3, r3, #3
 8005e78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b0c      	cmp	r3, #12
 8005e7e:	d102      	bne.n	8005e86 <HAL_RCC_OscConfig+0x3e>
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d002      	beq.n	8005e8c <HAL_RCC_OscConfig+0x44>
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d10b      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e8c:	4b8d      	ldr	r3, [pc, #564]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d05b      	beq.n	8005f50 <HAL_RCC_OscConfig+0x108>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d157      	bne.n	8005f50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e2d9      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eac:	d106      	bne.n	8005ebc <HAL_RCC_OscConfig+0x74>
 8005eae:	4b85      	ldr	r3, [pc, #532]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a84      	ldr	r2, [pc, #528]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	e01d      	b.n	8005ef8 <HAL_RCC_OscConfig+0xb0>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ec4:	d10c      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x98>
 8005ec6:	4b7f      	ldr	r3, [pc, #508]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a7e      	ldr	r2, [pc, #504]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	4b7c      	ldr	r3, [pc, #496]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a7b      	ldr	r2, [pc, #492]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	e00b      	b.n	8005ef8 <HAL_RCC_OscConfig+0xb0>
 8005ee0:	4b78      	ldr	r3, [pc, #480]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a77      	ldr	r2, [pc, #476]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	4b75      	ldr	r3, [pc, #468]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a74      	ldr	r2, [pc, #464]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d013      	beq.n	8005f28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f00:	f7fc facc 	bl	800249c <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f08:	f7fc fac8 	bl	800249c <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b64      	cmp	r3, #100	@ 0x64
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e29e      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f0      	beq.n	8005f08 <HAL_RCC_OscConfig+0xc0>
 8005f26:	e014      	b.n	8005f52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f28:	f7fc fab8 	bl	800249c <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f30:	f7fc fab4 	bl	800249c <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b64      	cmp	r3, #100	@ 0x64
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e28a      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f42:	4b60      	ldr	r3, [pc, #384]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1f0      	bne.n	8005f30 <HAL_RCC_OscConfig+0xe8>
 8005f4e:	e000      	b.n	8005f52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d075      	beq.n	800604a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f5e:	4b59      	ldr	r3, [pc, #356]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 030c 	and.w	r3, r3, #12
 8005f66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f68:	4b56      	ldr	r3, [pc, #344]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0303 	and.w	r3, r3, #3
 8005f70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	2b0c      	cmp	r3, #12
 8005f76:	d102      	bne.n	8005f7e <HAL_RCC_OscConfig+0x136>
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d002      	beq.n	8005f84 <HAL_RCC_OscConfig+0x13c>
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d11f      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f84:	4b4f      	ldr	r3, [pc, #316]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <HAL_RCC_OscConfig+0x154>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e25d      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9c:	4b49      	ldr	r3, [pc, #292]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	061b      	lsls	r3, r3, #24
 8005faa:	4946      	ldr	r1, [pc, #280]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005fb0:	4b45      	ldr	r3, [pc, #276]	@ (80060c8 <HAL_RCC_OscConfig+0x280>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fc fa25 	bl	8002404 <HAL_InitTick>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d043      	beq.n	8006048 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e249      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d023      	beq.n	8006014 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fcc:	4b3d      	ldr	r3, [pc, #244]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a3c      	ldr	r2, [pc, #240]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd8:	f7fc fa60 	bl	800249c <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fe0:	f7fc fa5c 	bl	800249c <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e232      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ff2:	4b34      	ldr	r3, [pc, #208]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f0      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ffe:	4b31      	ldr	r3, [pc, #196]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	061b      	lsls	r3, r3, #24
 800600c:	492d      	ldr	r1, [pc, #180]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 800600e:	4313      	orrs	r3, r2
 8006010:	604b      	str	r3, [r1, #4]
 8006012:	e01a      	b.n	800604a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006014:	4b2b      	ldr	r3, [pc, #172]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a2a      	ldr	r2, [pc, #168]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 800601a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800601e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006020:	f7fc fa3c 	bl	800249c <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006028:	f7fc fa38 	bl	800249c <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e20e      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800603a:	4b22      	ldr	r3, [pc, #136]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f0      	bne.n	8006028 <HAL_RCC_OscConfig+0x1e0>
 8006046:	e000      	b.n	800604a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006048:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0308 	and.w	r3, r3, #8
 8006052:	2b00      	cmp	r3, #0
 8006054:	d041      	beq.n	80060da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d01c      	beq.n	8006098 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800605e:	4b19      	ldr	r3, [pc, #100]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8006060:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006064:	4a17      	ldr	r2, [pc, #92]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 8006066:	f043 0301 	orr.w	r3, r3, #1
 800606a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606e:	f7fc fa15 	bl	800249c <HAL_GetTick>
 8006072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006074:	e008      	b.n	8006088 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006076:	f7fc fa11 	bl	800249c <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e1e7      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006088:	4b0e      	ldr	r3, [pc, #56]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 800608a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0ef      	beq.n	8006076 <HAL_RCC_OscConfig+0x22e>
 8006096:	e020      	b.n	80060da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006098:	4b0a      	ldr	r3, [pc, #40]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 800609a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800609e:	4a09      	ldr	r2, [pc, #36]	@ (80060c4 <HAL_RCC_OscConfig+0x27c>)
 80060a0:	f023 0301 	bic.w	r3, r3, #1
 80060a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a8:	f7fc f9f8 	bl	800249c <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060ae:	e00d      	b.n	80060cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060b0:	f7fc f9f4 	bl	800249c <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d906      	bls.n	80060cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e1ca      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
 80060c2:	bf00      	nop
 80060c4:	40021000 	.word	0x40021000
 80060c8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060cc:	4b8c      	ldr	r3, [pc, #560]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80060ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1ea      	bne.n	80060b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 80a6 	beq.w	8006234 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060e8:	2300      	movs	r3, #0
 80060ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060ec:	4b84      	ldr	r3, [pc, #528]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80060ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <HAL_RCC_OscConfig+0x2b4>
 80060f8:	2301      	movs	r3, #1
 80060fa:	e000      	b.n	80060fe <HAL_RCC_OscConfig+0x2b6>
 80060fc:	2300      	movs	r3, #0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00d      	beq.n	800611e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006102:	4b7f      	ldr	r3, [pc, #508]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006106:	4a7e      	ldr	r2, [pc, #504]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800610c:	6593      	str	r3, [r2, #88]	@ 0x58
 800610e:	4b7c      	ldr	r3, [pc, #496]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800611a:	2301      	movs	r3, #1
 800611c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800611e:	4b79      	ldr	r3, [pc, #484]	@ (8006304 <HAL_RCC_OscConfig+0x4bc>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006126:	2b00      	cmp	r3, #0
 8006128:	d118      	bne.n	800615c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800612a:	4b76      	ldr	r3, [pc, #472]	@ (8006304 <HAL_RCC_OscConfig+0x4bc>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a75      	ldr	r2, [pc, #468]	@ (8006304 <HAL_RCC_OscConfig+0x4bc>)
 8006130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006136:	f7fc f9b1 	bl	800249c <HAL_GetTick>
 800613a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800613c:	e008      	b.n	8006150 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800613e:	f7fc f9ad 	bl	800249c <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e183      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006150:	4b6c      	ldr	r3, [pc, #432]	@ (8006304 <HAL_RCC_OscConfig+0x4bc>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0f0      	beq.n	800613e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d108      	bne.n	8006176 <HAL_RCC_OscConfig+0x32e>
 8006164:	4b66      	ldr	r3, [pc, #408]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616a:	4a65      	ldr	r2, [pc, #404]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006174:	e024      	b.n	80061c0 <HAL_RCC_OscConfig+0x378>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	2b05      	cmp	r3, #5
 800617c:	d110      	bne.n	80061a0 <HAL_RCC_OscConfig+0x358>
 800617e:	4b60      	ldr	r3, [pc, #384]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006184:	4a5e      	ldr	r2, [pc, #376]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006186:	f043 0304 	orr.w	r3, r3, #4
 800618a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800618e:	4b5c      	ldr	r3, [pc, #368]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006194:	4a5a      	ldr	r2, [pc, #360]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800619e:	e00f      	b.n	80061c0 <HAL_RCC_OscConfig+0x378>
 80061a0:	4b57      	ldr	r3, [pc, #348]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a6:	4a56      	ldr	r2, [pc, #344]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061b0:	4b53      	ldr	r3, [pc, #332]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80061b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b6:	4a52      	ldr	r2, [pc, #328]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80061b8:	f023 0304 	bic.w	r3, r3, #4
 80061bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d016      	beq.n	80061f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c8:	f7fc f968 	bl	800249c <HAL_GetTick>
 80061cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061ce:	e00a      	b.n	80061e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d0:	f7fc f964 	bl	800249c <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061de:	4293      	cmp	r3, r2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e138      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061e6:	4b46      	ldr	r3, [pc, #280]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80061e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0ed      	beq.n	80061d0 <HAL_RCC_OscConfig+0x388>
 80061f4:	e015      	b.n	8006222 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f6:	f7fc f951 	bl	800249c <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061fc:	e00a      	b.n	8006214 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061fe:	f7fc f94d 	bl	800249c <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800620c:	4293      	cmp	r3, r2
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e121      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006214:	4b3a      	ldr	r3, [pc, #232]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1ed      	bne.n	80061fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006222:	7ffb      	ldrb	r3, [r7, #31]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d105      	bne.n	8006234 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006228:	4b35      	ldr	r3, [pc, #212]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 800622a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622c:	4a34      	ldr	r2, [pc, #208]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 800622e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006232:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0320 	and.w	r3, r3, #32
 800623c:	2b00      	cmp	r3, #0
 800623e:	d03c      	beq.n	80062ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01c      	beq.n	8006282 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006248:	4b2d      	ldr	r3, [pc, #180]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 800624a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800624e:	4a2c      	ldr	r2, [pc, #176]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006250:	f043 0301 	orr.w	r3, r3, #1
 8006254:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006258:	f7fc f920 	bl	800249c <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006260:	f7fc f91c 	bl	800249c <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e0f2      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006272:	4b23      	ldr	r3, [pc, #140]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006274:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0ef      	beq.n	8006260 <HAL_RCC_OscConfig+0x418>
 8006280:	e01b      	b.n	80062ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006282:	4b1f      	ldr	r3, [pc, #124]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 8006284:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006288:	4a1d      	ldr	r2, [pc, #116]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 800628a:	f023 0301 	bic.w	r3, r3, #1
 800628e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006292:	f7fc f903 	bl	800249c <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006298:	e008      	b.n	80062ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800629a:	f7fc f8ff 	bl	800249c <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e0d5      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062ac:	4b14      	ldr	r3, [pc, #80]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80062ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1ef      	bne.n	800629a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80c9 	beq.w	8006456 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 030c 	and.w	r3, r3, #12
 80062cc:	2b0c      	cmp	r3, #12
 80062ce:	f000 8083 	beq.w	80063d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d15e      	bne.n	8006398 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062da:	4b09      	ldr	r3, [pc, #36]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a08      	ldr	r2, [pc, #32]	@ (8006300 <HAL_RCC_OscConfig+0x4b8>)
 80062e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e6:	f7fc f8d9 	bl	800249c <HAL_GetTick>
 80062ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062ec:	e00c      	b.n	8006308 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062ee:	f7fc f8d5 	bl	800249c <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d905      	bls.n	8006308 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e0ab      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
 8006300:	40021000 	.word	0x40021000
 8006304:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006308:	4b55      	ldr	r3, [pc, #340]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1ec      	bne.n	80062ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006314:	4b52      	ldr	r3, [pc, #328]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	4b52      	ldr	r3, [pc, #328]	@ (8006464 <HAL_RCC_OscConfig+0x61c>)
 800631a:	4013      	ands	r3, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6a11      	ldr	r1, [r2, #32]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006324:	3a01      	subs	r2, #1
 8006326:	0112      	lsls	r2, r2, #4
 8006328:	4311      	orrs	r1, r2
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800632e:	0212      	lsls	r2, r2, #8
 8006330:	4311      	orrs	r1, r2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006336:	0852      	lsrs	r2, r2, #1
 8006338:	3a01      	subs	r2, #1
 800633a:	0552      	lsls	r2, r2, #21
 800633c:	4311      	orrs	r1, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006342:	0852      	lsrs	r2, r2, #1
 8006344:	3a01      	subs	r2, #1
 8006346:	0652      	lsls	r2, r2, #25
 8006348:	4311      	orrs	r1, r2
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800634e:	06d2      	lsls	r2, r2, #27
 8006350:	430a      	orrs	r2, r1
 8006352:	4943      	ldr	r1, [pc, #268]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 8006354:	4313      	orrs	r3, r2
 8006356:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006358:	4b41      	ldr	r3, [pc, #260]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a40      	ldr	r2, [pc, #256]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 800635e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006362:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006364:	4b3e      	ldr	r3, [pc, #248]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	4a3d      	ldr	r2, [pc, #244]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 800636a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800636e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006370:	f7fc f894 	bl	800249c <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006378:	f7fc f890 	bl	800249c <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e066      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800638a:	4b35      	ldr	r3, [pc, #212]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f0      	beq.n	8006378 <HAL_RCC_OscConfig+0x530>
 8006396:	e05e      	b.n	8006456 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006398:	4b31      	ldr	r3, [pc, #196]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a30      	ldr	r2, [pc, #192]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 800639e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a4:	f7fc f87a 	bl	800249c <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ac:	f7fc f876 	bl	800249c <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e04c      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063be:	4b28      	ldr	r3, [pc, #160]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1f0      	bne.n	80063ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80063ca:	4b25      	ldr	r3, [pc, #148]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	4924      	ldr	r1, [pc, #144]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 80063d0:	4b25      	ldr	r3, [pc, #148]	@ (8006468 <HAL_RCC_OscConfig+0x620>)
 80063d2:	4013      	ands	r3, r2
 80063d4:	60cb      	str	r3, [r1, #12]
 80063d6:	e03e      	b.n	8006456 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e039      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80063e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006460 <HAL_RCC_OscConfig+0x618>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f003 0203 	and.w	r2, r3, #3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d12c      	bne.n	8006452 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006402:	3b01      	subs	r3, #1
 8006404:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006406:	429a      	cmp	r2, r3
 8006408:	d123      	bne.n	8006452 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006416:	429a      	cmp	r2, r3
 8006418:	d11b      	bne.n	8006452 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006424:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006426:	429a      	cmp	r2, r3
 8006428:	d113      	bne.n	8006452 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006434:	085b      	lsrs	r3, r3, #1
 8006436:	3b01      	subs	r3, #1
 8006438:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800643a:	429a      	cmp	r2, r3
 800643c:	d109      	bne.n	8006452 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	3b01      	subs	r3, #1
 800644c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800644e:	429a      	cmp	r2, r3
 8006450:	d001      	beq.n	8006456 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	40021000 	.word	0x40021000
 8006464:	019f800c 	.word	0x019f800c
 8006468:	feeefffc 	.word	0xfeeefffc

0800646c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e11e      	b.n	80066c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006484:	4b91      	ldr	r3, [pc, #580]	@ (80066cc <HAL_RCC_ClockConfig+0x260>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d910      	bls.n	80064b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006492:	4b8e      	ldr	r3, [pc, #568]	@ (80066cc <HAL_RCC_ClockConfig+0x260>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f023 020f 	bic.w	r2, r3, #15
 800649a:	498c      	ldr	r1, [pc, #560]	@ (80066cc <HAL_RCC_ClockConfig+0x260>)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	4313      	orrs	r3, r2
 80064a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a2:	4b8a      	ldr	r3, [pc, #552]	@ (80066cc <HAL_RCC_ClockConfig+0x260>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 030f 	and.w	r3, r3, #15
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d001      	beq.n	80064b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e106      	b.n	80066c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d073      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d129      	bne.n	800651c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064c8:	4b81      	ldr	r3, [pc, #516]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0f4      	b.n	80066c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80064d8:	f000 f9ac 	bl	8006834 <RCC_GetSysClockFreqFromPLLSource>
 80064dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	4a7c      	ldr	r2, [pc, #496]	@ (80066d4 <HAL_RCC_ClockConfig+0x268>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d93f      	bls.n	8006566 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064e6:	4b7a      	ldr	r3, [pc, #488]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d033      	beq.n	8006566 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006502:	2b00      	cmp	r3, #0
 8006504:	d12f      	bne.n	8006566 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006506:	4b72      	ldr	r3, [pc, #456]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800650e:	4a70      	ldr	r2, [pc, #448]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006514:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006516:	2380      	movs	r3, #128	@ 0x80
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	e024      	b.n	8006566 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d107      	bne.n	8006534 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006524:	4b6a      	ldr	r3, [pc, #424]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d109      	bne.n	8006544 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e0c6      	b.n	80066c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006534:	4b66      	ldr	r3, [pc, #408]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e0be      	b.n	80066c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006544:	f000 f914 	bl	8006770 <HAL_RCC_GetSysClockFreq>
 8006548:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	4a61      	ldr	r2, [pc, #388]	@ (80066d4 <HAL_RCC_ClockConfig+0x268>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d909      	bls.n	8006566 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006552:	4b5f      	ldr	r3, [pc, #380]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800655a:	4a5d      	ldr	r2, [pc, #372]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 800655c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006560:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006562:	2380      	movs	r3, #128	@ 0x80
 8006564:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006566:	4b5a      	ldr	r3, [pc, #360]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f023 0203 	bic.w	r2, r3, #3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	4957      	ldr	r1, [pc, #348]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006574:	4313      	orrs	r3, r2
 8006576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006578:	f7fb ff90 	bl	800249c <HAL_GetTick>
 800657c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800657e:	e00a      	b.n	8006596 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006580:	f7fb ff8c 	bl	800249c <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800658e:	4293      	cmp	r3, r2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e095      	b.n	80066c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006596:	4b4e      	ldr	r3, [pc, #312]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 020c 	and.w	r2, r3, #12
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d1eb      	bne.n	8006580 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d023      	beq.n	80065fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d005      	beq.n	80065cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065c0:	4b43      	ldr	r3, [pc, #268]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	4a42      	ldr	r2, [pc, #264]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 80065c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80065ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d007      	beq.n	80065e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80065d8:	4b3d      	ldr	r3, [pc, #244]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80065e0:	4a3b      	ldr	r2, [pc, #236]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 80065e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80065e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065e8:	4b39      	ldr	r3, [pc, #228]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	4936      	ldr	r1, [pc, #216]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	608b      	str	r3, [r1, #8]
 80065fa:	e008      	b.n	800660e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2b80      	cmp	r3, #128	@ 0x80
 8006600:	d105      	bne.n	800660e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006602:	4b33      	ldr	r3, [pc, #204]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	4a32      	ldr	r2, [pc, #200]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006608:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800660c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800660e:	4b2f      	ldr	r3, [pc, #188]	@ (80066cc <HAL_RCC_ClockConfig+0x260>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d21d      	bcs.n	8006658 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800661c:	4b2b      	ldr	r3, [pc, #172]	@ (80066cc <HAL_RCC_ClockConfig+0x260>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f023 020f 	bic.w	r2, r3, #15
 8006624:	4929      	ldr	r1, [pc, #164]	@ (80066cc <HAL_RCC_ClockConfig+0x260>)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	4313      	orrs	r3, r2
 800662a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800662c:	f7fb ff36 	bl	800249c <HAL_GetTick>
 8006630:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006632:	e00a      	b.n	800664a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006634:	f7fb ff32 	bl	800249c <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006642:	4293      	cmp	r3, r2
 8006644:	d901      	bls.n	800664a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e03b      	b.n	80066c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800664a:	4b20      	ldr	r3, [pc, #128]	@ (80066cc <HAL_RCC_ClockConfig+0x260>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d1ed      	bne.n	8006634 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d008      	beq.n	8006676 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006664:	4b1a      	ldr	r3, [pc, #104]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4917      	ldr	r1, [pc, #92]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006672:	4313      	orrs	r3, r2
 8006674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006682:	4b13      	ldr	r3, [pc, #76]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	490f      	ldr	r1, [pc, #60]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 8006692:	4313      	orrs	r3, r2
 8006694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006696:	f000 f86b 	bl	8006770 <HAL_RCC_GetSysClockFreq>
 800669a:	4602      	mov	r2, r0
 800669c:	4b0c      	ldr	r3, [pc, #48]	@ (80066d0 <HAL_RCC_ClockConfig+0x264>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	091b      	lsrs	r3, r3, #4
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	490c      	ldr	r1, [pc, #48]	@ (80066d8 <HAL_RCC_ClockConfig+0x26c>)
 80066a8:	5ccb      	ldrb	r3, [r1, r3]
 80066aa:	f003 031f 	and.w	r3, r3, #31
 80066ae:	fa22 f303 	lsr.w	r3, r2, r3
 80066b2:	4a0a      	ldr	r2, [pc, #40]	@ (80066dc <HAL_RCC_ClockConfig+0x270>)
 80066b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80066b6:	4b0a      	ldr	r3, [pc, #40]	@ (80066e0 <HAL_RCC_ClockConfig+0x274>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fb fea2 	bl	8002404 <HAL_InitTick>
 80066c0:	4603      	mov	r3, r0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	40022000 	.word	0x40022000
 80066d0:	40021000 	.word	0x40021000
 80066d4:	04c4b400 	.word	0x04c4b400
 80066d8:	0800ea84 	.word	0x0800ea84
 80066dc:	20000000 	.word	0x20000000
 80066e0:	20000004 	.word	0x20000004

080066e4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08c      	sub	sp, #48	@ 0x30
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80066f0:	2302      	movs	r3, #2
 80066f2:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80066f4:	2303      	movs	r3, #3
 80066f6:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 80066f8:	2300      	movs	r3, #0
 80066fa:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006702:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	0c1b      	lsrs	r3, r3, #16
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8006710:	029b      	lsls	r3, r3, #10
 8006712:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	0c1b      	lsrs	r3, r3, #16
 8006718:	f003 030f 	and.w	r3, r3, #15
 800671c:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800671e:	4b13      	ldr	r3, [pc, #76]	@ (800676c <HAL_RCC_MCOConfig+0x88>)
 8006720:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006722:	2101      	movs	r1, #1
 8006724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006726:	fa01 f303 	lsl.w	r3, r1, r3
 800672a:	4910      	ldr	r1, [pc, #64]	@ (800676c <HAL_RCC_MCOConfig+0x88>)
 800672c:	4313      	orrs	r3, r2
 800672e:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	b29b      	uxth	r3, r3
 8006734:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	0d1b      	lsrs	r3, r3, #20
 800673a:	b2db      	uxtb	r3, r3
 800673c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800673e:	f107 0310 	add.w	r3, r7, #16
 8006742:	4619      	mov	r1, r3
 8006744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006746:	f7fd fbfd 	bl	8003f44 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 800674a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d109      	bne.n	8006764 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8006750:	4b06      	ldr	r3, [pc, #24]	@ (800676c <HAL_RCC_MCOConfig+0x88>)
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006758:	68b9      	ldr	r1, [r7, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	430b      	orrs	r3, r1
 800675e:	4903      	ldr	r1, [pc, #12]	@ (800676c <HAL_RCC_MCOConfig+0x88>)
 8006760:	4313      	orrs	r3, r2
 8006762:	608b      	str	r3, [r1, #8]
  }
}
 8006764:	bf00      	nop
 8006766:	3730      	adds	r7, #48	@ 0x30
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40021000 	.word	0x40021000

08006770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006776:	4b2c      	ldr	r3, [pc, #176]	@ (8006828 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f003 030c 	and.w	r3, r3, #12
 800677e:	2b04      	cmp	r3, #4
 8006780:	d102      	bne.n	8006788 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006782:	4b2a      	ldr	r3, [pc, #168]	@ (800682c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006784:	613b      	str	r3, [r7, #16]
 8006786:	e047      	b.n	8006818 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006788:	4b27      	ldr	r3, [pc, #156]	@ (8006828 <HAL_RCC_GetSysClockFreq+0xb8>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f003 030c 	and.w	r3, r3, #12
 8006790:	2b08      	cmp	r3, #8
 8006792:	d102      	bne.n	800679a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006794:	4b26      	ldr	r3, [pc, #152]	@ (8006830 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	e03e      	b.n	8006818 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800679a:	4b23      	ldr	r3, [pc, #140]	@ (8006828 <HAL_RCC_GetSysClockFreq+0xb8>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 030c 	and.w	r3, r3, #12
 80067a2:	2b0c      	cmp	r3, #12
 80067a4:	d136      	bne.n	8006814 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067a6:	4b20      	ldr	r3, [pc, #128]	@ (8006828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	091b      	lsrs	r3, r3, #4
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	3301      	adds	r3, #1
 80067bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d10c      	bne.n	80067de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006830 <HAL_RCC_GetSysClockFreq+0xc0>)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067cc:	4a16      	ldr	r2, [pc, #88]	@ (8006828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067ce:	68d2      	ldr	r2, [r2, #12]
 80067d0:	0a12      	lsrs	r2, r2, #8
 80067d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067d6:	fb02 f303 	mul.w	r3, r2, r3
 80067da:	617b      	str	r3, [r7, #20]
      break;
 80067dc:	e00c      	b.n	80067f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067de:	4a13      	ldr	r2, [pc, #76]	@ (800682c <HAL_RCC_GetSysClockFreq+0xbc>)
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e6:	4a10      	ldr	r2, [pc, #64]	@ (8006828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067e8:	68d2      	ldr	r2, [r2, #12]
 80067ea:	0a12      	lsrs	r2, r2, #8
 80067ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067f0:	fb02 f303 	mul.w	r3, r2, r3
 80067f4:	617b      	str	r3, [r7, #20]
      break;
 80067f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	0e5b      	lsrs	r3, r3, #25
 80067fe:	f003 0303 	and.w	r3, r3, #3
 8006802:	3301      	adds	r3, #1
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006810:	613b      	str	r3, [r7, #16]
 8006812:	e001      	b.n	8006818 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006818:	693b      	ldr	r3, [r7, #16]
}
 800681a:	4618      	mov	r0, r3
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40021000 	.word	0x40021000
 800682c:	00f42400 	.word	0x00f42400
 8006830:	02dc6c00 	.word	0x02dc6c00

08006834 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800683a:	4b1e      	ldr	r3, [pc, #120]	@ (80068b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006844:	4b1b      	ldr	r3, [pc, #108]	@ (80068b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	091b      	lsrs	r3, r3, #4
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	3301      	adds	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b03      	cmp	r3, #3
 8006856:	d10c      	bne.n	8006872 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006858:	4a17      	ldr	r2, [pc, #92]	@ (80068b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006860:	4a14      	ldr	r2, [pc, #80]	@ (80068b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006862:	68d2      	ldr	r2, [r2, #12]
 8006864:	0a12      	lsrs	r2, r2, #8
 8006866:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800686a:	fb02 f303 	mul.w	r3, r2, r3
 800686e:	617b      	str	r3, [r7, #20]
    break;
 8006870:	e00c      	b.n	800688c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006872:	4a12      	ldr	r2, [pc, #72]	@ (80068bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	fbb2 f3f3 	udiv	r3, r2, r3
 800687a:	4a0e      	ldr	r2, [pc, #56]	@ (80068b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800687c:	68d2      	ldr	r2, [r2, #12]
 800687e:	0a12      	lsrs	r2, r2, #8
 8006880:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006884:	fb02 f303 	mul.w	r3, r2, r3
 8006888:	617b      	str	r3, [r7, #20]
    break;
 800688a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800688c:	4b09      	ldr	r3, [pc, #36]	@ (80068b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	0e5b      	lsrs	r3, r3, #25
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	3301      	adds	r3, #1
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80068a6:	687b      	ldr	r3, [r7, #4]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	40021000 	.word	0x40021000
 80068b8:	02dc6c00 	.word	0x02dc6c00
 80068bc:	00f42400 	.word	0x00f42400

080068c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068c8:	2300      	movs	r3, #0
 80068ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068cc:	2300      	movs	r3, #0
 80068ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8098 	beq.w	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068de:	2300      	movs	r3, #0
 80068e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068e2:	4b43      	ldr	r3, [pc, #268]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10d      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ee:	4b40      	ldr	r3, [pc, #256]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f2:	4a3f      	ldr	r2, [pc, #252]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80068fa:	4b3d      	ldr	r3, [pc, #244]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006902:	60bb      	str	r3, [r7, #8]
 8006904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006906:	2301      	movs	r3, #1
 8006908:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800690a:	4b3a      	ldr	r3, [pc, #232]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a39      	ldr	r2, [pc, #228]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006914:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006916:	f7fb fdc1 	bl	800249c <HAL_GetTick>
 800691a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800691c:	e009      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800691e:	f7fb fdbd 	bl	800249c <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d902      	bls.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	74fb      	strb	r3, [r7, #19]
        break;
 8006930:	e005      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006932:	4b30      	ldr	r3, [pc, #192]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0ef      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800693e:	7cfb      	ldrb	r3, [r7, #19]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d159      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006944:	4b2a      	ldr	r3, [pc, #168]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800694e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01e      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	429a      	cmp	r2, r3
 800695e:	d019      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006960:	4b23      	ldr	r3, [pc, #140]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800696a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800696c:	4b20      	ldr	r3, [pc, #128]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800696e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006972:	4a1f      	ldr	r2, [pc, #124]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800697c:	4b1c      	ldr	r3, [pc, #112]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800697e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006982:	4a1b      	ldr	r2, [pc, #108]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800698c:	4a18      	ldr	r2, [pc, #96]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d016      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699e:	f7fb fd7d 	bl	800249c <HAL_GetTick>
 80069a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069a4:	e00b      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a6:	f7fb fd79 	bl	800249c <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d902      	bls.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	74fb      	strb	r3, [r7, #19]
            break;
 80069bc:	e006      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069be:	4b0c      	ldr	r3, [pc, #48]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d0ec      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80069cc:	7cfb      	ldrb	r3, [r7, #19]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10b      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069d2:	4b07      	ldr	r3, [pc, #28]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e0:	4903      	ldr	r1, [pc, #12]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80069e8:	e008      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069ea:	7cfb      	ldrb	r3, [r7, #19]
 80069ec:	74bb      	strb	r3, [r7, #18]
 80069ee:	e005      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069f0:	40021000 	.word	0x40021000
 80069f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f8:	7cfb      	ldrb	r3, [r7, #19]
 80069fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069fc:	7c7b      	ldrb	r3, [r7, #17]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d105      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a02:	4ba7      	ldr	r3, [pc, #668]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a06:	4aa6      	ldr	r2, [pc, #664]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a0c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a1a:	4ba1      	ldr	r3, [pc, #644]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a20:	f023 0203 	bic.w	r2, r3, #3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	499d      	ldr	r1, [pc, #628]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00a      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a3c:	4b98      	ldr	r3, [pc, #608]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a42:	f023 020c 	bic.w	r2, r3, #12
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	4995      	ldr	r1, [pc, #596]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a5e:	4b90      	ldr	r3, [pc, #576]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a64:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	498c      	ldr	r1, [pc, #560]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0308 	and.w	r3, r3, #8
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a80:	4b87      	ldr	r3, [pc, #540]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	4984      	ldr	r1, [pc, #528]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006aa2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	497b      	ldr	r1, [pc, #492]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0320 	and.w	r3, r3, #32
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ac4:	4b76      	ldr	r3, [pc, #472]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	4973      	ldr	r1, [pc, #460]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ae6:	4b6e      	ldr	r3, [pc, #440]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	496a      	ldr	r1, [pc, #424]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b08:	4b65      	ldr	r3, [pc, #404]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	4962      	ldr	r1, [pc, #392]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b38:	4959      	ldr	r1, [pc, #356]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b4c:	4b54      	ldr	r3, [pc, #336]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b52:	f023 0203 	bic.w	r2, r3, #3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5a:	4951      	ldr	r1, [pc, #324]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b6e:	4b4c      	ldr	r3, [pc, #304]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7c:	4948      	ldr	r1, [pc, #288]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d015      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b90:	4b43      	ldr	r3, [pc, #268]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9e:	4940      	ldr	r1, [pc, #256]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bae:	d105      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	4a3a      	ldr	r2, [pc, #232]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d015      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006bc8:	4b35      	ldr	r3, [pc, #212]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bd6:	4932      	ldr	r1, [pc, #200]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006be6:	d105      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006be8:	4b2d      	ldr	r3, [pc, #180]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	4a2c      	ldr	r2, [pc, #176]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bf2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d015      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c00:	4b27      	ldr	r3, [pc, #156]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0e:	4924      	ldr	r1, [pc, #144]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c1e:	d105      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c20:	4b1f      	ldr	r3, [pc, #124]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	4a1e      	ldr	r2, [pc, #120]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d015      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c38:	4b19      	ldr	r3, [pc, #100]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c46:	4916      	ldr	r1, [pc, #88]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c56:	d105      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c58:	4b11      	ldr	r3, [pc, #68]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	4a10      	ldr	r2, [pc, #64]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d019      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7e:	4908      	ldr	r1, [pc, #32]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c8e:	d109      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c90:	4b03      	ldr	r3, [pc, #12]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	4a02      	ldr	r2, [pc, #8]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c9a:	60d3      	str	r3, [r2, #12]
 8006c9c:	e002      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006c9e:	bf00      	nop
 8006ca0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d015      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006cb0:	4b29      	ldr	r3, [pc, #164]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cbe:	4926      	ldr	r1, [pc, #152]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cce:	d105      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006cd0:	4b21      	ldr	r3, [pc, #132]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	4a20      	ldr	r2, [pc, #128]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cda:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d015      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cf6:	4918      	ldr	r1, [pc, #96]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d06:	d105      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d08:	4b13      	ldr	r3, [pc, #76]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	4a12      	ldr	r2, [pc, #72]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d12:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d015      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006d20:	4b0d      	ldr	r3, [pc, #52]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d2e:	490a      	ldr	r1, [pc, #40]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d3e:	d105      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d40:	4b05      	ldr	r3, [pc, #20]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	4a04      	ldr	r2, [pc, #16]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006d4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	40021000 	.word	0x40021000

08006d5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e09d      	b.n	8006eaa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d108      	bne.n	8006d88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d7e:	d009      	beq.n	8006d94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	61da      	str	r2, [r3, #28]
 8006d86:	e005      	b.n	8006d94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7fb f8b4 	bl	8001f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006dd4:	d902      	bls.n	8006ddc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	e002      	b.n	8006de2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006de0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006dea:	d007      	beq.n	8006dfc <HAL_SPI_Init+0xa0>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006df4:	d002      	beq.n	8006dfc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	431a      	orrs	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e34:	431a      	orrs	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e3e:	ea42 0103 	orr.w	r1, r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e46:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	0c1b      	lsrs	r3, r3, #16
 8006e58:	f003 0204 	and.w	r2, r3, #4
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e60:	f003 0310 	and.w	r3, r3, #16
 8006e64:	431a      	orrs	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e6a:	f003 0308 	and.w	r3, r3, #8
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006e78:	ea42 0103 	orr.w	r1, r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69da      	ldr	r2, [r3, #28]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e049      	b.n	8006f58 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d106      	bne.n	8006ede <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7fb fa2d 	bl	8002338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3304      	adds	r3, #4
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	f000 fdb9 	bl	8007a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d001      	beq.n	8006f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e054      	b.n	8007022 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0201 	orr.w	r2, r2, #1
 8006f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a26      	ldr	r2, [pc, #152]	@ (8007030 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d022      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x80>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fa2:	d01d      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x80>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a22      	ldr	r2, [pc, #136]	@ (8007034 <HAL_TIM_Base_Start_IT+0xd4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d018      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x80>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a21      	ldr	r2, [pc, #132]	@ (8007038 <HAL_TIM_Base_Start_IT+0xd8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d013      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x80>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800703c <HAL_TIM_Base_Start_IT+0xdc>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00e      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x80>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8007040 <HAL_TIM_Base_Start_IT+0xe0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d009      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x80>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8007044 <HAL_TIM_Base_Start_IT+0xe4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d004      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x80>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1b      	ldr	r2, [pc, #108]	@ (8007048 <HAL_TIM_Base_Start_IT+0xe8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d115      	bne.n	800700c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	4b19      	ldr	r3, [pc, #100]	@ (800704c <HAL_TIM_Base_Start_IT+0xec>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b06      	cmp	r3, #6
 8006ff0:	d015      	beq.n	800701e <HAL_TIM_Base_Start_IT+0xbe>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ff8:	d011      	beq.n	800701e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0201 	orr.w	r2, r2, #1
 8007008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700a:	e008      	b.n	800701e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0201 	orr.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	e000      	b.n	8007020 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	40012c00 	.word	0x40012c00
 8007034:	40000400 	.word	0x40000400
 8007038:	40000800 	.word	0x40000800
 800703c:	40000c00 	.word	0x40000c00
 8007040:	40013400 	.word	0x40013400
 8007044:	40014000 	.word	0x40014000
 8007048:	40015000 	.word	0x40015000
 800704c:	00010007 	.word	0x00010007

08007050 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e049      	b.n	80070f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d106      	bne.n	800707c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fb f93e 	bl	80022f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2202      	movs	r2, #2
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3304      	adds	r3, #4
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	f000 fcea 	bl	8007a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
	...

08007100 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d109      	bne.n	8007124 <HAL_TIM_PWM_Start+0x24>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b01      	cmp	r3, #1
 800711a:	bf14      	ite	ne
 800711c:	2301      	movne	r3, #1
 800711e:	2300      	moveq	r3, #0
 8007120:	b2db      	uxtb	r3, r3
 8007122:	e03c      	b.n	800719e <HAL_TIM_PWM_Start+0x9e>
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2b04      	cmp	r3, #4
 8007128:	d109      	bne.n	800713e <HAL_TIM_PWM_Start+0x3e>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b01      	cmp	r3, #1
 8007134:	bf14      	ite	ne
 8007136:	2301      	movne	r3, #1
 8007138:	2300      	moveq	r3, #0
 800713a:	b2db      	uxtb	r3, r3
 800713c:	e02f      	b.n	800719e <HAL_TIM_PWM_Start+0x9e>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b08      	cmp	r3, #8
 8007142:	d109      	bne.n	8007158 <HAL_TIM_PWM_Start+0x58>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b01      	cmp	r3, #1
 800714e:	bf14      	ite	ne
 8007150:	2301      	movne	r3, #1
 8007152:	2300      	moveq	r3, #0
 8007154:	b2db      	uxtb	r3, r3
 8007156:	e022      	b.n	800719e <HAL_TIM_PWM_Start+0x9e>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	2b0c      	cmp	r3, #12
 800715c:	d109      	bne.n	8007172 <HAL_TIM_PWM_Start+0x72>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b01      	cmp	r3, #1
 8007168:	bf14      	ite	ne
 800716a:	2301      	movne	r3, #1
 800716c:	2300      	moveq	r3, #0
 800716e:	b2db      	uxtb	r3, r3
 8007170:	e015      	b.n	800719e <HAL_TIM_PWM_Start+0x9e>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b10      	cmp	r3, #16
 8007176:	d109      	bne.n	800718c <HAL_TIM_PWM_Start+0x8c>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b01      	cmp	r3, #1
 8007182:	bf14      	ite	ne
 8007184:	2301      	movne	r3, #1
 8007186:	2300      	moveq	r3, #0
 8007188:	b2db      	uxtb	r3, r3
 800718a:	e008      	b.n	800719e <HAL_TIM_PWM_Start+0x9e>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b01      	cmp	r3, #1
 8007196:	bf14      	ite	ne
 8007198:	2301      	movne	r3, #1
 800719a:	2300      	moveq	r3, #0
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e0a6      	b.n	80072f4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d104      	bne.n	80071b6 <HAL_TIM_PWM_Start+0xb6>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071b4:	e023      	b.n	80071fe <HAL_TIM_PWM_Start+0xfe>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d104      	bne.n	80071c6 <HAL_TIM_PWM_Start+0xc6>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071c4:	e01b      	b.n	80071fe <HAL_TIM_PWM_Start+0xfe>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d104      	bne.n	80071d6 <HAL_TIM_PWM_Start+0xd6>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071d4:	e013      	b.n	80071fe <HAL_TIM_PWM_Start+0xfe>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b0c      	cmp	r3, #12
 80071da:	d104      	bne.n	80071e6 <HAL_TIM_PWM_Start+0xe6>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071e4:	e00b      	b.n	80071fe <HAL_TIM_PWM_Start+0xfe>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b10      	cmp	r3, #16
 80071ea:	d104      	bne.n	80071f6 <HAL_TIM_PWM_Start+0xf6>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071f4:	e003      	b.n	80071fe <HAL_TIM_PWM_Start+0xfe>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2202      	movs	r2, #2
 80071fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2201      	movs	r2, #1
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	4618      	mov	r0, r3
 8007208:	f001 f8a8 	bl	800835c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a3a      	ldr	r2, [pc, #232]	@ (80072fc <HAL_TIM_PWM_Start+0x1fc>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d018      	beq.n	8007248 <HAL_TIM_PWM_Start+0x148>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a39      	ldr	r2, [pc, #228]	@ (8007300 <HAL_TIM_PWM_Start+0x200>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d013      	beq.n	8007248 <HAL_TIM_PWM_Start+0x148>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a37      	ldr	r2, [pc, #220]	@ (8007304 <HAL_TIM_PWM_Start+0x204>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00e      	beq.n	8007248 <HAL_TIM_PWM_Start+0x148>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a36      	ldr	r2, [pc, #216]	@ (8007308 <HAL_TIM_PWM_Start+0x208>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d009      	beq.n	8007248 <HAL_TIM_PWM_Start+0x148>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a34      	ldr	r2, [pc, #208]	@ (800730c <HAL_TIM_PWM_Start+0x20c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d004      	beq.n	8007248 <HAL_TIM_PWM_Start+0x148>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a33      	ldr	r2, [pc, #204]	@ (8007310 <HAL_TIM_PWM_Start+0x210>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d101      	bne.n	800724c <HAL_TIM_PWM_Start+0x14c>
 8007248:	2301      	movs	r3, #1
 800724a:	e000      	b.n	800724e <HAL_TIM_PWM_Start+0x14e>
 800724c:	2300      	movs	r3, #0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d007      	beq.n	8007262 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007260:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a25      	ldr	r2, [pc, #148]	@ (80072fc <HAL_TIM_PWM_Start+0x1fc>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d022      	beq.n	80072b2 <HAL_TIM_PWM_Start+0x1b2>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007274:	d01d      	beq.n	80072b2 <HAL_TIM_PWM_Start+0x1b2>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a26      	ldr	r2, [pc, #152]	@ (8007314 <HAL_TIM_PWM_Start+0x214>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d018      	beq.n	80072b2 <HAL_TIM_PWM_Start+0x1b2>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a24      	ldr	r2, [pc, #144]	@ (8007318 <HAL_TIM_PWM_Start+0x218>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d013      	beq.n	80072b2 <HAL_TIM_PWM_Start+0x1b2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a23      	ldr	r2, [pc, #140]	@ (800731c <HAL_TIM_PWM_Start+0x21c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d00e      	beq.n	80072b2 <HAL_TIM_PWM_Start+0x1b2>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a19      	ldr	r2, [pc, #100]	@ (8007300 <HAL_TIM_PWM_Start+0x200>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d009      	beq.n	80072b2 <HAL_TIM_PWM_Start+0x1b2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a18      	ldr	r2, [pc, #96]	@ (8007304 <HAL_TIM_PWM_Start+0x204>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d004      	beq.n	80072b2 <HAL_TIM_PWM_Start+0x1b2>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a18      	ldr	r2, [pc, #96]	@ (8007310 <HAL_TIM_PWM_Start+0x210>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d115      	bne.n	80072de <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	4b19      	ldr	r3, [pc, #100]	@ (8007320 <HAL_TIM_PWM_Start+0x220>)
 80072ba:	4013      	ands	r3, r2
 80072bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b06      	cmp	r3, #6
 80072c2:	d015      	beq.n	80072f0 <HAL_TIM_PWM_Start+0x1f0>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072ca:	d011      	beq.n	80072f0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0201 	orr.w	r2, r2, #1
 80072da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072dc:	e008      	b.n	80072f0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 0201 	orr.w	r2, r2, #1
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	e000      	b.n	80072f2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	40012c00 	.word	0x40012c00
 8007300:	40013400 	.word	0x40013400
 8007304:	40014000 	.word	0x40014000
 8007308:	40014400 	.word	0x40014400
 800730c:	40014800 	.word	0x40014800
 8007310:	40015000 	.word	0x40015000
 8007314:	40000400 	.word	0x40000400
 8007318:	40000800 	.word	0x40000800
 800731c:	40000c00 	.word	0x40000c00
 8007320:	00010007 	.word	0x00010007

08007324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d020      	beq.n	8007388 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d01b      	beq.n	8007388 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f06f 0202 	mvn.w	r2, #2
 8007358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	f003 0303 	and.w	r3, r3, #3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fb5c 	bl	8007a2c <HAL_TIM_IC_CaptureCallback>
 8007374:	e005      	b.n	8007382 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fb4e 	bl	8007a18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fb5f 	bl	8007a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f003 0304 	and.w	r3, r3, #4
 800738e:	2b00      	cmp	r3, #0
 8007390:	d020      	beq.n	80073d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f003 0304 	and.w	r3, r3, #4
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01b      	beq.n	80073d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f06f 0204 	mvn.w	r2, #4
 80073a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2202      	movs	r2, #2
 80073aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fb36 	bl	8007a2c <HAL_TIM_IC_CaptureCallback>
 80073c0:	e005      	b.n	80073ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fb28 	bl	8007a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fb39 	bl	8007a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d020      	beq.n	8007420 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f003 0308 	and.w	r3, r3, #8
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01b      	beq.n	8007420 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f06f 0208 	mvn.w	r2, #8
 80073f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2204      	movs	r2, #4
 80073f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fb10 	bl	8007a2c <HAL_TIM_IC_CaptureCallback>
 800740c:	e005      	b.n	800741a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fb02 	bl	8007a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fb13 	bl	8007a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f003 0310 	and.w	r3, r3, #16
 8007426:	2b00      	cmp	r3, #0
 8007428:	d020      	beq.n	800746c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f003 0310 	and.w	r3, r3, #16
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01b      	beq.n	800746c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f06f 0210 	mvn.w	r2, #16
 800743c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2208      	movs	r2, #8
 8007442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 faea 	bl	8007a2c <HAL_TIM_IC_CaptureCallback>
 8007458:	e005      	b.n	8007466 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fadc 	bl	8007a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 faed 	bl	8007a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00c      	beq.n	8007490 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	2b00      	cmp	r3, #0
 800747e:	d007      	beq.n	8007490 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f06f 0201 	mvn.w	r2, #1
 8007488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7fa fb4c 	bl	8001b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007496:	2b00      	cmp	r3, #0
 8007498:	d104      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00c      	beq.n	80074be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80074b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 f8a9 	bl	8008610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00c      	beq.n	80074e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d007      	beq.n	80074e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80074da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f001 f8a1 	bl	8008624 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00c      	beq.n	8007506 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d007      	beq.n	8007506 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 faa7 	bl	8007a54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	f003 0320 	and.w	r3, r3, #32
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00c      	beq.n	800752a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	2b00      	cmp	r3, #0
 8007518:	d007      	beq.n	800752a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f06f 0220 	mvn.w	r2, #32
 8007522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 f869 	bl	80085fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00c      	beq.n	800754e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d007      	beq.n	800754e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f001 f875 	bl	8008638 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00c      	beq.n	8007572 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d007      	beq.n	8007572 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800756a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 f86d 	bl	800864c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00c      	beq.n	8007596 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d007      	beq.n	8007596 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800758e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 f865 	bl	8008660 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00c      	beq.n	80075ba <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d007      	beq.n	80075ba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80075b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 f85d 	bl	8008674 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075ba:	bf00      	nop
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d101      	bne.n	80075e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075de:	2302      	movs	r3, #2
 80075e0:	e0ff      	b.n	80077e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b14      	cmp	r3, #20
 80075ee:	f200 80f0 	bhi.w	80077d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80075f2:	a201      	add	r2, pc, #4	@ (adr r2, 80075f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f8:	0800764d 	.word	0x0800764d
 80075fc:	080077d3 	.word	0x080077d3
 8007600:	080077d3 	.word	0x080077d3
 8007604:	080077d3 	.word	0x080077d3
 8007608:	0800768d 	.word	0x0800768d
 800760c:	080077d3 	.word	0x080077d3
 8007610:	080077d3 	.word	0x080077d3
 8007614:	080077d3 	.word	0x080077d3
 8007618:	080076cf 	.word	0x080076cf
 800761c:	080077d3 	.word	0x080077d3
 8007620:	080077d3 	.word	0x080077d3
 8007624:	080077d3 	.word	0x080077d3
 8007628:	0800770f 	.word	0x0800770f
 800762c:	080077d3 	.word	0x080077d3
 8007630:	080077d3 	.word	0x080077d3
 8007634:	080077d3 	.word	0x080077d3
 8007638:	08007751 	.word	0x08007751
 800763c:	080077d3 	.word	0x080077d3
 8007640:	080077d3 	.word	0x080077d3
 8007644:	080077d3 	.word	0x080077d3
 8007648:	08007791 	.word	0x08007791
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fabc 	bl	8007bd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0208 	orr.w	r2, r2, #8
 8007666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0204 	bic.w	r2, r2, #4
 8007676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6999      	ldr	r1, [r3, #24]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	691a      	ldr	r2, [r3, #16]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	619a      	str	r2, [r3, #24]
      break;
 800768a:	e0a5      	b.n	80077d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68b9      	ldr	r1, [r7, #8]
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fb36 	bl	8007d04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699a      	ldr	r2, [r3, #24]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	699a      	ldr	r2, [r3, #24]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6999      	ldr	r1, [r3, #24]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	021a      	lsls	r2, r3, #8
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	619a      	str	r2, [r3, #24]
      break;
 80076cc:	e084      	b.n	80077d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fba9 	bl	8007e2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f042 0208 	orr.w	r2, r2, #8
 80076e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69da      	ldr	r2, [r3, #28]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0204 	bic.w	r2, r2, #4
 80076f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69d9      	ldr	r1, [r3, #28]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	691a      	ldr	r2, [r3, #16]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	430a      	orrs	r2, r1
 800770a:	61da      	str	r2, [r3, #28]
      break;
 800770c:	e064      	b.n	80077d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fc1b 	bl	8007f50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69da      	ldr	r2, [r3, #28]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69da      	ldr	r2, [r3, #28]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69d9      	ldr	r1, [r3, #28]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	021a      	lsls	r2, r3, #8
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	61da      	str	r2, [r3, #28]
      break;
 800774e:	e043      	b.n	80077d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fc8e 	bl	8008078 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0208 	orr.w	r2, r2, #8
 800776a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0204 	bic.w	r2, r2, #4
 800777a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	691a      	ldr	r2, [r3, #16]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800778e:	e023      	b.n	80077d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fcd8 	bl	800814c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	021a      	lsls	r2, r3, #8
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	430a      	orrs	r2, r1
 80077ce:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80077d0:	e002      	b.n	80077d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	75fb      	strb	r3, [r7, #23]
      break;
 80077d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80077e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3718      	adds	r7, #24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop

080077ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <HAL_TIM_ConfigClockSource+0x1c>
 8007804:	2302      	movs	r3, #2
 8007806:	e0f6      	b.n	80079f6 <HAL_TIM_ConfigClockSource+0x20a>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007826:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800782a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007832:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a6f      	ldr	r2, [pc, #444]	@ (8007a00 <HAL_TIM_ConfigClockSource+0x214>)
 8007842:	4293      	cmp	r3, r2
 8007844:	f000 80c1 	beq.w	80079ca <HAL_TIM_ConfigClockSource+0x1de>
 8007848:	4a6d      	ldr	r2, [pc, #436]	@ (8007a00 <HAL_TIM_ConfigClockSource+0x214>)
 800784a:	4293      	cmp	r3, r2
 800784c:	f200 80c6 	bhi.w	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
 8007850:	4a6c      	ldr	r2, [pc, #432]	@ (8007a04 <HAL_TIM_ConfigClockSource+0x218>)
 8007852:	4293      	cmp	r3, r2
 8007854:	f000 80b9 	beq.w	80079ca <HAL_TIM_ConfigClockSource+0x1de>
 8007858:	4a6a      	ldr	r2, [pc, #424]	@ (8007a04 <HAL_TIM_ConfigClockSource+0x218>)
 800785a:	4293      	cmp	r3, r2
 800785c:	f200 80be 	bhi.w	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
 8007860:	4a69      	ldr	r2, [pc, #420]	@ (8007a08 <HAL_TIM_ConfigClockSource+0x21c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	f000 80b1 	beq.w	80079ca <HAL_TIM_ConfigClockSource+0x1de>
 8007868:	4a67      	ldr	r2, [pc, #412]	@ (8007a08 <HAL_TIM_ConfigClockSource+0x21c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	f200 80b6 	bhi.w	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
 8007870:	4a66      	ldr	r2, [pc, #408]	@ (8007a0c <HAL_TIM_ConfigClockSource+0x220>)
 8007872:	4293      	cmp	r3, r2
 8007874:	f000 80a9 	beq.w	80079ca <HAL_TIM_ConfigClockSource+0x1de>
 8007878:	4a64      	ldr	r2, [pc, #400]	@ (8007a0c <HAL_TIM_ConfigClockSource+0x220>)
 800787a:	4293      	cmp	r3, r2
 800787c:	f200 80ae 	bhi.w	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
 8007880:	4a63      	ldr	r2, [pc, #396]	@ (8007a10 <HAL_TIM_ConfigClockSource+0x224>)
 8007882:	4293      	cmp	r3, r2
 8007884:	f000 80a1 	beq.w	80079ca <HAL_TIM_ConfigClockSource+0x1de>
 8007888:	4a61      	ldr	r2, [pc, #388]	@ (8007a10 <HAL_TIM_ConfigClockSource+0x224>)
 800788a:	4293      	cmp	r3, r2
 800788c:	f200 80a6 	bhi.w	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
 8007890:	4a60      	ldr	r2, [pc, #384]	@ (8007a14 <HAL_TIM_ConfigClockSource+0x228>)
 8007892:	4293      	cmp	r3, r2
 8007894:	f000 8099 	beq.w	80079ca <HAL_TIM_ConfigClockSource+0x1de>
 8007898:	4a5e      	ldr	r2, [pc, #376]	@ (8007a14 <HAL_TIM_ConfigClockSource+0x228>)
 800789a:	4293      	cmp	r3, r2
 800789c:	f200 809e 	bhi.w	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
 80078a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80078a4:	f000 8091 	beq.w	80079ca <HAL_TIM_ConfigClockSource+0x1de>
 80078a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80078ac:	f200 8096 	bhi.w	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
 80078b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078b4:	f000 8089 	beq.w	80079ca <HAL_TIM_ConfigClockSource+0x1de>
 80078b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078bc:	f200 808e 	bhi.w	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
 80078c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078c4:	d03e      	beq.n	8007944 <HAL_TIM_ConfigClockSource+0x158>
 80078c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078ca:	f200 8087 	bhi.w	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
 80078ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078d2:	f000 8086 	beq.w	80079e2 <HAL_TIM_ConfigClockSource+0x1f6>
 80078d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078da:	d87f      	bhi.n	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
 80078dc:	2b70      	cmp	r3, #112	@ 0x70
 80078de:	d01a      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x12a>
 80078e0:	2b70      	cmp	r3, #112	@ 0x70
 80078e2:	d87b      	bhi.n	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
 80078e4:	2b60      	cmp	r3, #96	@ 0x60
 80078e6:	d050      	beq.n	800798a <HAL_TIM_ConfigClockSource+0x19e>
 80078e8:	2b60      	cmp	r3, #96	@ 0x60
 80078ea:	d877      	bhi.n	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
 80078ec:	2b50      	cmp	r3, #80	@ 0x50
 80078ee:	d03c      	beq.n	800796a <HAL_TIM_ConfigClockSource+0x17e>
 80078f0:	2b50      	cmp	r3, #80	@ 0x50
 80078f2:	d873      	bhi.n	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
 80078f4:	2b40      	cmp	r3, #64	@ 0x40
 80078f6:	d058      	beq.n	80079aa <HAL_TIM_ConfigClockSource+0x1be>
 80078f8:	2b40      	cmp	r3, #64	@ 0x40
 80078fa:	d86f      	bhi.n	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
 80078fc:	2b30      	cmp	r3, #48	@ 0x30
 80078fe:	d064      	beq.n	80079ca <HAL_TIM_ConfigClockSource+0x1de>
 8007900:	2b30      	cmp	r3, #48	@ 0x30
 8007902:	d86b      	bhi.n	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
 8007904:	2b20      	cmp	r3, #32
 8007906:	d060      	beq.n	80079ca <HAL_TIM_ConfigClockSource+0x1de>
 8007908:	2b20      	cmp	r3, #32
 800790a:	d867      	bhi.n	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
 800790c:	2b00      	cmp	r3, #0
 800790e:	d05c      	beq.n	80079ca <HAL_TIM_ConfigClockSource+0x1de>
 8007910:	2b10      	cmp	r3, #16
 8007912:	d05a      	beq.n	80079ca <HAL_TIM_ConfigClockSource+0x1de>
 8007914:	e062      	b.n	80079dc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007926:	f000 fcf9 	bl	800831c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007938:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	609a      	str	r2, [r3, #8]
      break;
 8007942:	e04f      	b.n	80079e4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007954:	f000 fce2 	bl	800831c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689a      	ldr	r2, [r3, #8]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007966:	609a      	str	r2, [r3, #8]
      break;
 8007968:	e03c      	b.n	80079e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007976:	461a      	mov	r2, r3
 8007978:	f000 fc54 	bl	8008224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2150      	movs	r1, #80	@ 0x50
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fcad 	bl	80082e2 <TIM_ITRx_SetConfig>
      break;
 8007988:	e02c      	b.n	80079e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007996:	461a      	mov	r2, r3
 8007998:	f000 fc73 	bl	8008282 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2160      	movs	r1, #96	@ 0x60
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fc9d 	bl	80082e2 <TIM_ITRx_SetConfig>
      break;
 80079a8:	e01c      	b.n	80079e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079b6:	461a      	mov	r2, r3
 80079b8:	f000 fc34 	bl	8008224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2140      	movs	r1, #64	@ 0x40
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 fc8d 	bl	80082e2 <TIM_ITRx_SetConfig>
      break;
 80079c8:	e00c      	b.n	80079e4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4619      	mov	r1, r3
 80079d4:	4610      	mov	r0, r2
 80079d6:	f000 fc84 	bl	80082e2 <TIM_ITRx_SetConfig>
      break;
 80079da:	e003      	b.n	80079e4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	73fb      	strb	r3, [r7, #15]
      break;
 80079e0:	e000      	b.n	80079e4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80079e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	00100070 	.word	0x00100070
 8007a04:	00100060 	.word	0x00100060
 8007a08:	00100050 	.word	0x00100050
 8007a0c:	00100040 	.word	0x00100040
 8007a10:	00100030 	.word	0x00100030
 8007a14:	00100020 	.word	0x00100020

08007a18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a4c      	ldr	r2, [pc, #304]	@ (8007bac <TIM_Base_SetConfig+0x144>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d017      	beq.n	8007ab0 <TIM_Base_SetConfig+0x48>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a86:	d013      	beq.n	8007ab0 <TIM_Base_SetConfig+0x48>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a49      	ldr	r2, [pc, #292]	@ (8007bb0 <TIM_Base_SetConfig+0x148>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d00f      	beq.n	8007ab0 <TIM_Base_SetConfig+0x48>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a48      	ldr	r2, [pc, #288]	@ (8007bb4 <TIM_Base_SetConfig+0x14c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d00b      	beq.n	8007ab0 <TIM_Base_SetConfig+0x48>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a47      	ldr	r2, [pc, #284]	@ (8007bb8 <TIM_Base_SetConfig+0x150>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d007      	beq.n	8007ab0 <TIM_Base_SetConfig+0x48>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a46      	ldr	r2, [pc, #280]	@ (8007bbc <TIM_Base_SetConfig+0x154>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d003      	beq.n	8007ab0 <TIM_Base_SetConfig+0x48>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a45      	ldr	r2, [pc, #276]	@ (8007bc0 <TIM_Base_SetConfig+0x158>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d108      	bne.n	8007ac2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a39      	ldr	r2, [pc, #228]	@ (8007bac <TIM_Base_SetConfig+0x144>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d023      	beq.n	8007b12 <TIM_Base_SetConfig+0xaa>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ad0:	d01f      	beq.n	8007b12 <TIM_Base_SetConfig+0xaa>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a36      	ldr	r2, [pc, #216]	@ (8007bb0 <TIM_Base_SetConfig+0x148>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d01b      	beq.n	8007b12 <TIM_Base_SetConfig+0xaa>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a35      	ldr	r2, [pc, #212]	@ (8007bb4 <TIM_Base_SetConfig+0x14c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d017      	beq.n	8007b12 <TIM_Base_SetConfig+0xaa>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a34      	ldr	r2, [pc, #208]	@ (8007bb8 <TIM_Base_SetConfig+0x150>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d013      	beq.n	8007b12 <TIM_Base_SetConfig+0xaa>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a33      	ldr	r2, [pc, #204]	@ (8007bbc <TIM_Base_SetConfig+0x154>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d00f      	beq.n	8007b12 <TIM_Base_SetConfig+0xaa>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a33      	ldr	r2, [pc, #204]	@ (8007bc4 <TIM_Base_SetConfig+0x15c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d00b      	beq.n	8007b12 <TIM_Base_SetConfig+0xaa>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a32      	ldr	r2, [pc, #200]	@ (8007bc8 <TIM_Base_SetConfig+0x160>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d007      	beq.n	8007b12 <TIM_Base_SetConfig+0xaa>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a31      	ldr	r2, [pc, #196]	@ (8007bcc <TIM_Base_SetConfig+0x164>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d003      	beq.n	8007b12 <TIM_Base_SetConfig+0xaa>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a2c      	ldr	r2, [pc, #176]	@ (8007bc0 <TIM_Base_SetConfig+0x158>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d108      	bne.n	8007b24 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a18      	ldr	r2, [pc, #96]	@ (8007bac <TIM_Base_SetConfig+0x144>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d013      	beq.n	8007b78 <TIM_Base_SetConfig+0x110>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a1a      	ldr	r2, [pc, #104]	@ (8007bbc <TIM_Base_SetConfig+0x154>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d00f      	beq.n	8007b78 <TIM_Base_SetConfig+0x110>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8007bc4 <TIM_Base_SetConfig+0x15c>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d00b      	beq.n	8007b78 <TIM_Base_SetConfig+0x110>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a19      	ldr	r2, [pc, #100]	@ (8007bc8 <TIM_Base_SetConfig+0x160>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d007      	beq.n	8007b78 <TIM_Base_SetConfig+0x110>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a18      	ldr	r2, [pc, #96]	@ (8007bcc <TIM_Base_SetConfig+0x164>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d003      	beq.n	8007b78 <TIM_Base_SetConfig+0x110>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a13      	ldr	r2, [pc, #76]	@ (8007bc0 <TIM_Base_SetConfig+0x158>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d103      	bne.n	8007b80 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d105      	bne.n	8007b9e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	f023 0201 	bic.w	r2, r3, #1
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	611a      	str	r2, [r3, #16]
  }
}
 8007b9e:	bf00      	nop
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	40012c00 	.word	0x40012c00
 8007bb0:	40000400 	.word	0x40000400
 8007bb4:	40000800 	.word	0x40000800
 8007bb8:	40000c00 	.word	0x40000c00
 8007bbc:	40013400 	.word	0x40013400
 8007bc0:	40015000 	.word	0x40015000
 8007bc4:	40014000 	.word	0x40014000
 8007bc8:	40014400 	.word	0x40014400
 8007bcc:	40014800 	.word	0x40014800

08007bd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b087      	sub	sp, #28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	f023 0201 	bic.w	r2, r3, #1
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 0303 	bic.w	r3, r3, #3
 8007c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f023 0302 	bic.w	r3, r3, #2
 8007c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a30      	ldr	r2, [pc, #192]	@ (8007cec <TIM_OC1_SetConfig+0x11c>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d013      	beq.n	8007c58 <TIM_OC1_SetConfig+0x88>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a2f      	ldr	r2, [pc, #188]	@ (8007cf0 <TIM_OC1_SetConfig+0x120>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d00f      	beq.n	8007c58 <TIM_OC1_SetConfig+0x88>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a2e      	ldr	r2, [pc, #184]	@ (8007cf4 <TIM_OC1_SetConfig+0x124>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d00b      	beq.n	8007c58 <TIM_OC1_SetConfig+0x88>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a2d      	ldr	r2, [pc, #180]	@ (8007cf8 <TIM_OC1_SetConfig+0x128>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d007      	beq.n	8007c58 <TIM_OC1_SetConfig+0x88>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8007cfc <TIM_OC1_SetConfig+0x12c>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d003      	beq.n	8007c58 <TIM_OC1_SetConfig+0x88>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a2b      	ldr	r2, [pc, #172]	@ (8007d00 <TIM_OC1_SetConfig+0x130>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d10c      	bne.n	8007c72 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f023 0308 	bic.w	r3, r3, #8
 8007c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f023 0304 	bic.w	r3, r3, #4
 8007c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a1d      	ldr	r2, [pc, #116]	@ (8007cec <TIM_OC1_SetConfig+0x11c>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d013      	beq.n	8007ca2 <TIM_OC1_SetConfig+0xd2>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8007cf0 <TIM_OC1_SetConfig+0x120>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d00f      	beq.n	8007ca2 <TIM_OC1_SetConfig+0xd2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf4 <TIM_OC1_SetConfig+0x124>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d00b      	beq.n	8007ca2 <TIM_OC1_SetConfig+0xd2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a1a      	ldr	r2, [pc, #104]	@ (8007cf8 <TIM_OC1_SetConfig+0x128>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d007      	beq.n	8007ca2 <TIM_OC1_SetConfig+0xd2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a19      	ldr	r2, [pc, #100]	@ (8007cfc <TIM_OC1_SetConfig+0x12c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d003      	beq.n	8007ca2 <TIM_OC1_SetConfig+0xd2>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a18      	ldr	r2, [pc, #96]	@ (8007d00 <TIM_OC1_SetConfig+0x130>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d111      	bne.n	8007cc6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	621a      	str	r2, [r3, #32]
}
 8007ce0:	bf00      	nop
 8007ce2:	371c      	adds	r7, #28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	40012c00 	.word	0x40012c00
 8007cf0:	40013400 	.word	0x40013400
 8007cf4:	40014000 	.word	0x40014000
 8007cf8:	40014400 	.word	0x40014400
 8007cfc:	40014800 	.word	0x40014800
 8007d00:	40015000 	.word	0x40015000

08007d04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
 8007d18:	f023 0210 	bic.w	r2, r3, #16
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	021b      	lsls	r3, r3, #8
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f023 0320 	bic.w	r3, r3, #32
 8007d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	011b      	lsls	r3, r3, #4
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a2c      	ldr	r2, [pc, #176]	@ (8007e14 <TIM_OC2_SetConfig+0x110>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d007      	beq.n	8007d78 <TIM_OC2_SetConfig+0x74>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a2b      	ldr	r2, [pc, #172]	@ (8007e18 <TIM_OC2_SetConfig+0x114>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d003      	beq.n	8007d78 <TIM_OC2_SetConfig+0x74>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a2a      	ldr	r2, [pc, #168]	@ (8007e1c <TIM_OC2_SetConfig+0x118>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d10d      	bne.n	8007d94 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	011b      	lsls	r3, r3, #4
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a1f      	ldr	r2, [pc, #124]	@ (8007e14 <TIM_OC2_SetConfig+0x110>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d013      	beq.n	8007dc4 <TIM_OC2_SetConfig+0xc0>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8007e18 <TIM_OC2_SetConfig+0x114>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d00f      	beq.n	8007dc4 <TIM_OC2_SetConfig+0xc0>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a1e      	ldr	r2, [pc, #120]	@ (8007e20 <TIM_OC2_SetConfig+0x11c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d00b      	beq.n	8007dc4 <TIM_OC2_SetConfig+0xc0>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a1d      	ldr	r2, [pc, #116]	@ (8007e24 <TIM_OC2_SetConfig+0x120>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d007      	beq.n	8007dc4 <TIM_OC2_SetConfig+0xc0>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a1c      	ldr	r2, [pc, #112]	@ (8007e28 <TIM_OC2_SetConfig+0x124>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d003      	beq.n	8007dc4 <TIM_OC2_SetConfig+0xc0>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a17      	ldr	r2, [pc, #92]	@ (8007e1c <TIM_OC2_SetConfig+0x118>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d113      	bne.n	8007dec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	621a      	str	r2, [r3, #32]
}
 8007e06:	bf00      	nop
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	40012c00 	.word	0x40012c00
 8007e18:	40013400 	.word	0x40013400
 8007e1c:	40015000 	.word	0x40015000
 8007e20:	40014000 	.word	0x40014000
 8007e24:	40014400 	.word	0x40014400
 8007e28:	40014800 	.word	0x40014800

08007e2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f023 0303 	bic.w	r3, r3, #3
 8007e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	021b      	lsls	r3, r3, #8
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a2b      	ldr	r2, [pc, #172]	@ (8007f38 <TIM_OC3_SetConfig+0x10c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d007      	beq.n	8007e9e <TIM_OC3_SetConfig+0x72>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a2a      	ldr	r2, [pc, #168]	@ (8007f3c <TIM_OC3_SetConfig+0x110>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d003      	beq.n	8007e9e <TIM_OC3_SetConfig+0x72>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a29      	ldr	r2, [pc, #164]	@ (8007f40 <TIM_OC3_SetConfig+0x114>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d10d      	bne.n	8007eba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8007f38 <TIM_OC3_SetConfig+0x10c>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d013      	beq.n	8007eea <TIM_OC3_SetConfig+0xbe>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f3c <TIM_OC3_SetConfig+0x110>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d00f      	beq.n	8007eea <TIM_OC3_SetConfig+0xbe>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8007f44 <TIM_OC3_SetConfig+0x118>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d00b      	beq.n	8007eea <TIM_OC3_SetConfig+0xbe>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8007f48 <TIM_OC3_SetConfig+0x11c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d007      	beq.n	8007eea <TIM_OC3_SetConfig+0xbe>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a1b      	ldr	r2, [pc, #108]	@ (8007f4c <TIM_OC3_SetConfig+0x120>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d003      	beq.n	8007eea <TIM_OC3_SetConfig+0xbe>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a16      	ldr	r2, [pc, #88]	@ (8007f40 <TIM_OC3_SetConfig+0x114>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d113      	bne.n	8007f12 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	011b      	lsls	r3, r3, #4
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	011b      	lsls	r3, r3, #4
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	621a      	str	r2, [r3, #32]
}
 8007f2c:	bf00      	nop
 8007f2e:	371c      	adds	r7, #28
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	40012c00 	.word	0x40012c00
 8007f3c:	40013400 	.word	0x40013400
 8007f40:	40015000 	.word	0x40015000
 8007f44:	40014000 	.word	0x40014000
 8007f48:	40014400 	.word	0x40014400
 8007f4c:	40014800 	.word	0x40014800

08007f50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	021b      	lsls	r3, r3, #8
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	031b      	lsls	r3, r3, #12
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a2c      	ldr	r2, [pc, #176]	@ (8008060 <TIM_OC4_SetConfig+0x110>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d007      	beq.n	8007fc4 <TIM_OC4_SetConfig+0x74>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8008064 <TIM_OC4_SetConfig+0x114>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d003      	beq.n	8007fc4 <TIM_OC4_SetConfig+0x74>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8008068 <TIM_OC4_SetConfig+0x118>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d10d      	bne.n	8007fe0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	031b      	lsls	r3, r3, #12
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8008060 <TIM_OC4_SetConfig+0x110>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d013      	beq.n	8008010 <TIM_OC4_SetConfig+0xc0>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a1e      	ldr	r2, [pc, #120]	@ (8008064 <TIM_OC4_SetConfig+0x114>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d00f      	beq.n	8008010 <TIM_OC4_SetConfig+0xc0>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800806c <TIM_OC4_SetConfig+0x11c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d00b      	beq.n	8008010 <TIM_OC4_SetConfig+0xc0>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8008070 <TIM_OC4_SetConfig+0x120>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d007      	beq.n	8008010 <TIM_OC4_SetConfig+0xc0>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a1c      	ldr	r2, [pc, #112]	@ (8008074 <TIM_OC4_SetConfig+0x124>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d003      	beq.n	8008010 <TIM_OC4_SetConfig+0xc0>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a17      	ldr	r2, [pc, #92]	@ (8008068 <TIM_OC4_SetConfig+0x118>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d113      	bne.n	8008038 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008016:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800801e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	019b      	lsls	r3, r3, #6
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	4313      	orrs	r3, r2
 800802a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	019b      	lsls	r3, r3, #6
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	4313      	orrs	r3, r2
 8008036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	621a      	str	r2, [r3, #32]
}
 8008052:	bf00      	nop
 8008054:	371c      	adds	r7, #28
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	40012c00 	.word	0x40012c00
 8008064:	40013400 	.word	0x40013400
 8008068:	40015000 	.word	0x40015000
 800806c:	40014000 	.word	0x40014000
 8008070:	40014400 	.word	0x40014400
 8008074:	40014800 	.word	0x40014800

08008078 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008078:	b480      	push	{r7}
 800807a:	b087      	sub	sp, #28
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800809e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80080bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	041b      	lsls	r3, r3, #16
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a19      	ldr	r2, [pc, #100]	@ (8008134 <TIM_OC5_SetConfig+0xbc>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d013      	beq.n	80080fa <TIM_OC5_SetConfig+0x82>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a18      	ldr	r2, [pc, #96]	@ (8008138 <TIM_OC5_SetConfig+0xc0>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d00f      	beq.n	80080fa <TIM_OC5_SetConfig+0x82>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a17      	ldr	r2, [pc, #92]	@ (800813c <TIM_OC5_SetConfig+0xc4>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d00b      	beq.n	80080fa <TIM_OC5_SetConfig+0x82>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a16      	ldr	r2, [pc, #88]	@ (8008140 <TIM_OC5_SetConfig+0xc8>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d007      	beq.n	80080fa <TIM_OC5_SetConfig+0x82>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a15      	ldr	r2, [pc, #84]	@ (8008144 <TIM_OC5_SetConfig+0xcc>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d003      	beq.n	80080fa <TIM_OC5_SetConfig+0x82>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a14      	ldr	r2, [pc, #80]	@ (8008148 <TIM_OC5_SetConfig+0xd0>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d109      	bne.n	800810e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008100:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	021b      	lsls	r3, r3, #8
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	4313      	orrs	r3, r2
 800810c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	621a      	str	r2, [r3, #32]
}
 8008128:	bf00      	nop
 800812a:	371c      	adds	r7, #28
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	40012c00 	.word	0x40012c00
 8008138:	40013400 	.word	0x40013400
 800813c:	40014000 	.word	0x40014000
 8008140:	40014400 	.word	0x40014400
 8008144:	40014800 	.word	0x40014800
 8008148:	40015000 	.word	0x40015000

0800814c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800814c:	b480      	push	{r7}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800817a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800817e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	021b      	lsls	r3, r3, #8
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	051b      	lsls	r3, r3, #20
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a1a      	ldr	r2, [pc, #104]	@ (800820c <TIM_OC6_SetConfig+0xc0>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d013      	beq.n	80081d0 <TIM_OC6_SetConfig+0x84>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a19      	ldr	r2, [pc, #100]	@ (8008210 <TIM_OC6_SetConfig+0xc4>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d00f      	beq.n	80081d0 <TIM_OC6_SetConfig+0x84>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a18      	ldr	r2, [pc, #96]	@ (8008214 <TIM_OC6_SetConfig+0xc8>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d00b      	beq.n	80081d0 <TIM_OC6_SetConfig+0x84>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a17      	ldr	r2, [pc, #92]	@ (8008218 <TIM_OC6_SetConfig+0xcc>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d007      	beq.n	80081d0 <TIM_OC6_SetConfig+0x84>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a16      	ldr	r2, [pc, #88]	@ (800821c <TIM_OC6_SetConfig+0xd0>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d003      	beq.n	80081d0 <TIM_OC6_SetConfig+0x84>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a15      	ldr	r2, [pc, #84]	@ (8008220 <TIM_OC6_SetConfig+0xd4>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d109      	bne.n	80081e4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80081d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	029b      	lsls	r3, r3, #10
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	621a      	str	r2, [r3, #32]
}
 80081fe:	bf00      	nop
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	40012c00 	.word	0x40012c00
 8008210:	40013400 	.word	0x40013400
 8008214:	40014000 	.word	0x40014000
 8008218:	40014400 	.word	0x40014400
 800821c:	40014800 	.word	0x40014800
 8008220:	40015000 	.word	0x40015000

08008224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008224:	b480      	push	{r7}
 8008226:	b087      	sub	sp, #28
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6a1b      	ldr	r3, [r3, #32]
 8008234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	f023 0201 	bic.w	r2, r3, #1
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800824e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	011b      	lsls	r3, r3, #4
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	4313      	orrs	r3, r2
 8008258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f023 030a 	bic.w	r3, r3, #10
 8008260:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	4313      	orrs	r3, r2
 8008268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	621a      	str	r2, [r3, #32]
}
 8008276:	bf00      	nop
 8008278:	371c      	adds	r7, #28
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008282:	b480      	push	{r7}
 8008284:	b087      	sub	sp, #28
 8008286:	af00      	add	r7, sp, #0
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	60b9      	str	r1, [r7, #8]
 800828c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	f023 0210 	bic.w	r2, r3, #16
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	031b      	lsls	r3, r3, #12
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	011b      	lsls	r3, r3, #4
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	621a      	str	r2, [r3, #32]
}
 80082d6:	bf00      	nop
 80082d8:	371c      	adds	r7, #28
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b085      	sub	sp, #20
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80082f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	4313      	orrs	r3, r2
 8008304:	f043 0307 	orr.w	r3, r3, #7
 8008308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	609a      	str	r2, [r3, #8]
}
 8008310:	bf00      	nop
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	021a      	lsls	r2, r3, #8
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	431a      	orrs	r2, r3
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	4313      	orrs	r3, r2
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	4313      	orrs	r3, r2
 8008348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	609a      	str	r2, [r3, #8]
}
 8008350:	bf00      	nop
 8008352:	371c      	adds	r7, #28
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800835c:	b480      	push	{r7}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	f003 031f 	and.w	r3, r3, #31
 800836e:	2201      	movs	r2, #1
 8008370:	fa02 f303 	lsl.w	r3, r2, r3
 8008374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6a1a      	ldr	r2, [r3, #32]
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	43db      	mvns	r3, r3
 800837e:	401a      	ands	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6a1a      	ldr	r2, [r3, #32]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f003 031f 	and.w	r3, r3, #31
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	fa01 f303 	lsl.w	r3, r1, r3
 8008394:	431a      	orrs	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	621a      	str	r2, [r3, #32]
}
 800839a:	bf00      	nop
 800839c:	371c      	adds	r7, #28
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
	...

080083a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d101      	bne.n	80083c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083bc:	2302      	movs	r3, #2
 80083be:	e074      	b.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2202      	movs	r2, #2
 80083cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a34      	ldr	r2, [pc, #208]	@ (80084b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d009      	beq.n	80083fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a33      	ldr	r2, [pc, #204]	@ (80084bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d004      	beq.n	80083fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a31      	ldr	r2, [pc, #196]	@ (80084c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d108      	bne.n	8008410 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008404:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	4313      	orrs	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800841a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a21      	ldr	r2, [pc, #132]	@ (80084b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d022      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008440:	d01d      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a1f      	ldr	r2, [pc, #124]	@ (80084c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d018      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a1d      	ldr	r2, [pc, #116]	@ (80084c8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d013      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a1c      	ldr	r2, [pc, #112]	@ (80084cc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00e      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a15      	ldr	r2, [pc, #84]	@ (80084bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d009      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a18      	ldr	r2, [pc, #96]	@ (80084d0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d004      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a11      	ldr	r2, [pc, #68]	@ (80084c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d10c      	bne.n	8008498 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	4313      	orrs	r3, r2
 800848e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	40012c00 	.word	0x40012c00
 80084bc:	40013400 	.word	0x40013400
 80084c0:	40015000 	.word	0x40015000
 80084c4:	40000400 	.word	0x40000400
 80084c8:	40000800 	.word	0x40000800
 80084cc:	40000c00 	.word	0x40000c00
 80084d0:	40014000 	.word	0x40014000

080084d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d101      	bne.n	80084f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80084ec:	2302      	movs	r3, #2
 80084ee:	e078      	b.n	80085e2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	4313      	orrs	r3, r2
 8008504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	4313      	orrs	r3, r2
 8008512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	4313      	orrs	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4313      	orrs	r3, r2
 800852e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	4313      	orrs	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	4313      	orrs	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008556:	4313      	orrs	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	699b      	ldr	r3, [r3, #24]
 8008564:	041b      	lsls	r3, r3, #16
 8008566:	4313      	orrs	r3, r2
 8008568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	4313      	orrs	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a1c      	ldr	r2, [pc, #112]	@ (80085f0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d009      	beq.n	8008596 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a1b      	ldr	r2, [pc, #108]	@ (80085f4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d004      	beq.n	8008596 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a19      	ldr	r2, [pc, #100]	@ (80085f8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d11c      	bne.n	80085d0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a0:	051b      	lsls	r3, r3, #20
 80085a2:	4313      	orrs	r3, r2
 80085a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	6a1b      	ldr	r3, [r3, #32]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085be:	4313      	orrs	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085cc:	4313      	orrs	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	40012c00 	.word	0x40012c00
 80085f4:	40013400 	.word	0x40013400
 80085f8:	40015000 	.word	0x40015000

080085fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008698:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800869c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b085      	sub	sp, #20
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80086be:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80086c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	43db      	mvns	r3, r3
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	4013      	ands	r3, r2
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	1d3b      	adds	r3, r7, #4
 80086f6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008728:	b480      	push	{r7}
 800872a:	b09d      	sub	sp, #116	@ 0x74
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	b29b      	uxth	r3, r3
 8008746:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800874a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800874e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	78db      	ldrb	r3, [r3, #3]
 8008756:	2b03      	cmp	r3, #3
 8008758:	d81f      	bhi.n	800879a <USB_ActivateEndpoint+0x72>
 800875a:	a201      	add	r2, pc, #4	@ (adr r2, 8008760 <USB_ActivateEndpoint+0x38>)
 800875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008760:	08008771 	.word	0x08008771
 8008764:	0800878d 	.word	0x0800878d
 8008768:	080087a3 	.word	0x080087a3
 800876c:	0800877f 	.word	0x0800877f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008770:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008774:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008778:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800877c:	e012      	b.n	80087a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800877e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008782:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008786:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800878a:	e00b      	b.n	80087a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800878c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008790:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008794:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008798:	e004      	b.n	80087a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80087a0:	e000      	b.n	80087a4 <USB_ActivateEndpoint+0x7c>
      break;
 80087a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	441a      	add	r2, r3
 80087ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80087b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	b21b      	sxth	r3, r3
 80087d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087de:	b21a      	sxth	r2, r3
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	b21b      	sxth	r3, r3
 80087e6:	4313      	orrs	r3, r2
 80087e8:	b21b      	sxth	r3, r3
 80087ea:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	441a      	add	r2, r3
 80087f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80087fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008800:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008804:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800880c:	b29b      	uxth	r3, r3
 800880e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	7b1b      	ldrb	r3, [r3, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	f040 8178 	bne.w	8008b0a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	785b      	ldrb	r3, [r3, #1]
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 8084 	beq.w	800892c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	61bb      	str	r3, [r7, #24]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800882e:	b29b      	uxth	r3, r3
 8008830:	461a      	mov	r2, r3
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	4413      	add	r3, r2
 8008836:	61bb      	str	r3, [r7, #24]
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	00da      	lsls	r2, r3, #3
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	4413      	add	r3, r2
 8008842:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008846:	617b      	str	r3, [r7, #20]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	88db      	ldrh	r3, [r3, #6]
 800884c:	085b      	lsrs	r3, r3, #1
 800884e:	b29b      	uxth	r3, r3
 8008850:	005b      	lsls	r3, r3, #1
 8008852:	b29a      	uxth	r2, r3
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	881b      	ldrh	r3, [r3, #0]
 8008864:	827b      	strh	r3, [r7, #18]
 8008866:	8a7b      	ldrh	r3, [r7, #18]
 8008868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800886c:	2b00      	cmp	r3, #0
 800886e:	d01b      	beq.n	80088a8 <USB_ActivateEndpoint+0x180>
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	b29b      	uxth	r3, r3
 800887e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008886:	823b      	strh	r3, [r7, #16]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	441a      	add	r2, r3
 8008892:	8a3b      	ldrh	r3, [r7, #16]
 8008894:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008898:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800889c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	78db      	ldrb	r3, [r3, #3]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d020      	beq.n	80088f2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088c6:	81bb      	strh	r3, [r7, #12]
 80088c8:	89bb      	ldrh	r3, [r7, #12]
 80088ca:	f083 0320 	eor.w	r3, r3, #32
 80088ce:	81bb      	strh	r3, [r7, #12]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	441a      	add	r2, r3
 80088da:	89bb      	ldrh	r3, [r7, #12]
 80088dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	8013      	strh	r3, [r2, #0]
 80088f0:	e2d5      	b.n	8008e9e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	b29b      	uxth	r3, r3
 8008900:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008908:	81fb      	strh	r3, [r7, #14]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	441a      	add	r2, r3
 8008914:	89fb      	ldrh	r3, [r7, #14]
 8008916:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800891a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800891e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008926:	b29b      	uxth	r3, r3
 8008928:	8013      	strh	r3, [r2, #0]
 800892a:	e2b8      	b.n	8008e9e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008936:	b29b      	uxth	r3, r3
 8008938:	461a      	mov	r2, r3
 800893a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893c:	4413      	add	r3, r2
 800893e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	00da      	lsls	r2, r3, #3
 8008946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008948:	4413      	add	r3, r2
 800894a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800894e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	88db      	ldrh	r3, [r3, #6]
 8008954:	085b      	lsrs	r3, r3, #1
 8008956:	b29b      	uxth	r3, r3
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	b29a      	uxth	r2, r3
 800895c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800896a:	b29b      	uxth	r3, r3
 800896c:	461a      	mov	r2, r3
 800896e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008970:	4413      	add	r3, r2
 8008972:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	00da      	lsls	r2, r3, #3
 800897a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897c:	4413      	add	r3, r2
 800897e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008982:	627b      	str	r3, [r7, #36]	@ 0x24
 8008984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008986:	881b      	ldrh	r3, [r3, #0]
 8008988:	b29b      	uxth	r3, r3
 800898a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800898e:	b29a      	uxth	r2, r3
 8008990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008992:	801a      	strh	r2, [r3, #0]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	2b3e      	cmp	r3, #62	@ 0x3e
 800899a:	d91d      	bls.n	80089d8 <USB_ActivateEndpoint+0x2b0>
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	095b      	lsrs	r3, r3, #5
 80089a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	f003 031f 	and.w	r3, r3, #31
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d102      	bne.n	80089b6 <USB_ActivateEndpoint+0x28e>
 80089b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089b2:	3b01      	subs	r3, #1
 80089b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089be:	b29b      	uxth	r3, r3
 80089c0:	029b      	lsls	r3, r3, #10
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	4313      	orrs	r3, r2
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	801a      	strh	r2, [r3, #0]
 80089d6:	e026      	b.n	8008a26 <USB_ActivateEndpoint+0x2fe>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10a      	bne.n	80089f6 <USB_ActivateEndpoint+0x2ce>
 80089e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f2:	801a      	strh	r2, [r3, #0]
 80089f4:	e017      	b.n	8008a26 <USB_ActivateEndpoint+0x2fe>
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	085b      	lsrs	r3, r3, #1
 80089fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d002      	beq.n	8008a10 <USB_ActivateEndpoint+0x2e8>
 8008a0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	029b      	lsls	r3, r3, #10
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a24:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	881b      	ldrh	r3, [r3, #0]
 8008a32:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008a34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d01b      	beq.n	8008a76 <USB_ActivateEndpoint+0x34e>
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a54:	843b      	strh	r3, [r7, #32]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	441a      	add	r2, r3
 8008a60:	8c3b      	ldrh	r3, [r7, #32]
 8008a62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d124      	bne.n	8008ac8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a94:	83bb      	strh	r3, [r7, #28]
 8008a96:	8bbb      	ldrh	r3, [r7, #28]
 8008a98:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008a9c:	83bb      	strh	r3, [r7, #28]
 8008a9e:	8bbb      	ldrh	r3, [r7, #28]
 8008aa0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008aa4:	83bb      	strh	r3, [r7, #28]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	441a      	add	r2, r3
 8008ab0:	8bbb      	ldrh	r3, [r7, #28]
 8008ab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	8013      	strh	r3, [r2, #0]
 8008ac6:	e1ea      	b.n	8008e9e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4413      	add	r3, r2
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ade:	83fb      	strh	r3, [r7, #30]
 8008ae0:	8bfb      	ldrh	r3, [r7, #30]
 8008ae2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008ae6:	83fb      	strh	r3, [r7, #30]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	441a      	add	r2, r3
 8008af2:	8bfb      	ldrh	r3, [r7, #30]
 8008af4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008af8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008afc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	8013      	strh	r3, [r2, #0]
 8008b08:	e1c9      	b.n	8008e9e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	78db      	ldrb	r3, [r3, #3]
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d11e      	bne.n	8008b50 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b28:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	441a      	add	r2, r3
 8008b36:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008b3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b42:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	8013      	strh	r3, [r2, #0]
 8008b4e:	e01d      	b.n	8008b8c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b66:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	441a      	add	r2, r3
 8008b74:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008b78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	461a      	mov	r2, r3
 8008b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b9c:	4413      	add	r3, r2
 8008b9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	00da      	lsls	r2, r3, #3
 8008ba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008bae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	891b      	ldrh	r3, [r3, #8]
 8008bb4:	085b      	lsrs	r3, r3, #1
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	005b      	lsls	r3, r3, #1
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bbe:	801a      	strh	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	461a      	mov	r2, r3
 8008bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bd0:	4413      	add	r3, r2
 8008bd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	00da      	lsls	r2, r3, #3
 8008bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bdc:	4413      	add	r3, r2
 8008bde:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008be2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	895b      	ldrh	r3, [r3, #10]
 8008be8:	085b      	lsrs	r3, r3, #1
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	005b      	lsls	r3, r3, #1
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bf2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	785b      	ldrb	r3, [r3, #1]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f040 8093 	bne.w	8008d24 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008c0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d01b      	beq.n	8008c52 <USB_ActivateEndpoint+0x52a>
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c30:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	441a      	add	r2, r3
 8008c3c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008c3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008c60:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d01b      	beq.n	8008ca2 <USB_ActivateEndpoint+0x57a>
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c80:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	441a      	add	r2, r3
 8008c8c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008c8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cb8:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008cba:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008cbc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008cc0:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008cc2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008cc4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008cc8:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	441a      	add	r2, r3
 8008cd4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008cd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4413      	add	r3, r2
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d00:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	441a      	add	r2, r3
 8008d0c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008d0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	8013      	strh	r3, [r2, #0]
 8008d22:	e0bc      	b.n	8008e9e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	881b      	ldrh	r3, [r3, #0]
 8008d30:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008d34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008d38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d01d      	beq.n	8008d7c <USB_ActivateEndpoint+0x654>
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d56:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	441a      	add	r2, r3
 8008d64:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008d68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008d8c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d01d      	beq.n	8008dd4 <USB_ActivateEndpoint+0x6ac>
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dae:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	441a      	add	r2, r3
 8008dbc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008dc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dcc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	78db      	ldrb	r3, [r3, #3]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d024      	beq.n	8008e26 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008df2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008df6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008dfa:	f083 0320 	eor.w	r3, r3, #32
 8008dfe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	441a      	add	r2, r3
 8008e0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008e10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	8013      	strh	r3, [r2, #0]
 8008e24:	e01d      	b.n	8008e62 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e3c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	441a      	add	r2, r3
 8008e4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4413      	add	r3, r2
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e78:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	441a      	add	r2, r3
 8008e86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008e8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008e9e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3774      	adds	r7, #116	@ 0x74
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop

08008eb0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b08d      	sub	sp, #52	@ 0x34
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	7b1b      	ldrb	r3, [r3, #12]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f040 808e 	bne.w	8008fe0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	785b      	ldrb	r3, [r3, #1]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d044      	beq.n	8008f56 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	81bb      	strh	r3, [r7, #12]
 8008eda:	89bb      	ldrh	r3, [r7, #12]
 8008edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d01b      	beq.n	8008f1c <USB_DeactivateEndpoint+0x6c>
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008efa:	817b      	strh	r3, [r7, #10]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	441a      	add	r2, r3
 8008f06:	897b      	ldrh	r3, [r7, #10]
 8008f08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f32:	813b      	strh	r3, [r7, #8]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	441a      	add	r2, r3
 8008f3e:	893b      	ldrh	r3, [r7, #8]
 8008f40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	8013      	strh	r3, [r2, #0]
 8008f54:	e192      	b.n	800927c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	827b      	strh	r3, [r7, #18]
 8008f64:	8a7b      	ldrh	r3, [r7, #18]
 8008f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d01b      	beq.n	8008fa6 <USB_DeactivateEndpoint+0xf6>
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	881b      	ldrh	r3, [r3, #0]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f84:	823b      	strh	r3, [r7, #16]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	441a      	add	r2, r3
 8008f90:	8a3b      	ldrh	r3, [r7, #16]
 8008f92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fbc:	81fb      	strh	r3, [r7, #14]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	441a      	add	r2, r3
 8008fc8:	89fb      	ldrh	r3, [r7, #14]
 8008fca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	8013      	strh	r3, [r2, #0]
 8008fde:	e14d      	b.n	800927c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	785b      	ldrb	r3, [r3, #1]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f040 80a5 	bne.w	8009134 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	881b      	ldrh	r3, [r3, #0]
 8008ff6:	843b      	strh	r3, [r7, #32]
 8008ff8:	8c3b      	ldrh	r3, [r7, #32]
 8008ffa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d01b      	beq.n	800903a <USB_DeactivateEndpoint+0x18a>
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	881b      	ldrh	r3, [r3, #0]
 800900e:	b29b      	uxth	r3, r3
 8009010:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009018:	83fb      	strh	r3, [r7, #30]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	441a      	add	r2, r3
 8009024:	8bfb      	ldrh	r3, [r7, #30]
 8009026:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800902a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800902e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009036:	b29b      	uxth	r3, r3
 8009038:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4413      	add	r3, r2
 8009044:	881b      	ldrh	r3, [r3, #0]
 8009046:	83bb      	strh	r3, [r7, #28]
 8009048:	8bbb      	ldrh	r3, [r7, #28]
 800904a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800904e:	2b00      	cmp	r3, #0
 8009050:	d01b      	beq.n	800908a <USB_DeactivateEndpoint+0x1da>
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	881b      	ldrh	r3, [r3, #0]
 800905e:	b29b      	uxth	r3, r3
 8009060:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009068:	837b      	strh	r3, [r7, #26]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	441a      	add	r2, r3
 8009074:	8b7b      	ldrh	r3, [r7, #26]
 8009076:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800907a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800907e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009082:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009086:	b29b      	uxth	r3, r3
 8009088:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	b29b      	uxth	r3, r3
 8009098:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800909c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090a0:	833b      	strh	r3, [r7, #24]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	441a      	add	r2, r3
 80090ac:	8b3b      	ldrh	r3, [r7, #24]
 80090ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80090be:	b29b      	uxth	r3, r3
 80090c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	881b      	ldrh	r3, [r3, #0]
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090d8:	82fb      	strh	r3, [r7, #22]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	441a      	add	r2, r3
 80090e4:	8afb      	ldrh	r3, [r7, #22]
 80090e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4413      	add	r3, r2
 8009104:	881b      	ldrh	r3, [r3, #0]
 8009106:	b29b      	uxth	r3, r3
 8009108:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800910c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009110:	82bb      	strh	r3, [r7, #20]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	441a      	add	r2, r3
 800911c:	8abb      	ldrh	r3, [r7, #20]
 800911e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009122:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800912a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800912e:	b29b      	uxth	r3, r3
 8009130:	8013      	strh	r3, [r2, #0]
 8009132:	e0a3      	b.n	800927c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	881b      	ldrh	r3, [r3, #0]
 8009140:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009142:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d01b      	beq.n	8009184 <USB_DeactivateEndpoint+0x2d4>
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	b29b      	uxth	r3, r3
 800915a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800915e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009162:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	441a      	add	r2, r3
 800916e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009170:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009174:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009178:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800917c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009180:	b29b      	uxth	r3, r3
 8009182:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009192:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009198:	2b00      	cmp	r3, #0
 800919a:	d01b      	beq.n	80091d4 <USB_DeactivateEndpoint+0x324>
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091b2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	441a      	add	r2, r3
 80091be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80091c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	441a      	add	r2, r3
 80091f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80091f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009200:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009208:	b29b      	uxth	r3, r3
 800920a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	881b      	ldrh	r3, [r3, #0]
 8009218:	b29b      	uxth	r3, r3
 800921a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800921e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009222:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	441a      	add	r2, r3
 800922e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009230:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009234:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009238:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800923c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009240:	b29b      	uxth	r3, r3
 8009242:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	b29b      	uxth	r3, r3
 8009252:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800925a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	441a      	add	r2, r3
 8009266:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800926c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009278:	b29b      	uxth	r3, r3
 800927a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3734      	adds	r7, #52	@ 0x34
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b0c2      	sub	sp, #264	@ 0x108
 800928e:	af00      	add	r7, sp, #0
 8009290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009294:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009298:	6018      	str	r0, [r3, #0]
 800929a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800929e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092a2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	785b      	ldrb	r3, [r3, #1]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	f040 86b7 	bne.w	800a024 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80092b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	699a      	ldr	r2, [r3, #24]
 80092c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d908      	bls.n	80092e4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80092d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80092e2:	e007      	b.n	80092f4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80092e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80092f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	7b1b      	ldrb	r3, [r3, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d13a      	bne.n	800937a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6959      	ldr	r1, [r3, #20]
 8009310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	88da      	ldrh	r2, [r3, #6]
 800931c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009320:	b29b      	uxth	r3, r3
 8009322:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009326:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800932a:	6800      	ldr	r0, [r0, #0]
 800932c:	f001 fc98 	bl	800ac60 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009334:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	613b      	str	r3, [r7, #16]
 800933c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009340:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800934a:	b29b      	uxth	r3, r3
 800934c:	461a      	mov	r2, r3
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	4413      	add	r3, r2
 8009352:	613b      	str	r3, [r7, #16]
 8009354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	00da      	lsls	r2, r3, #3
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	4413      	add	r3, r2
 8009366:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009370:	b29a      	uxth	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	801a      	strh	r2, [r3, #0]
 8009376:	f000 be1f 	b.w	8009fb8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800937a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800937e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	78db      	ldrb	r3, [r3, #3]
 8009386:	2b02      	cmp	r3, #2
 8009388:	f040 8462 	bne.w	8009c50 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800938c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	6a1a      	ldr	r2, [r3, #32]
 8009398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800939c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	f240 83df 	bls.w	8009b68 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80093aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	881b      	ldrh	r3, [r3, #0]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093d0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80093d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	441a      	add	r2, r3
 80093ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80093f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093fa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80093fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009402:	b29b      	uxth	r3, r3
 8009404:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800940a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6a1a      	ldr	r2, [r3, #32]
 8009412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009416:	1ad2      	subs	r2, r2, r3
 8009418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800941c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009428:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	881b      	ldrh	r3, [r3, #0]
 8009440:	b29b      	uxth	r3, r3
 8009442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 81c7 	beq.w	80097da <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800944c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009450:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	633b      	str	r3, [r7, #48]	@ 0x30
 8009458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800945c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	785b      	ldrb	r3, [r3, #1]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d177      	bne.n	8009558 <USB_EPStartXfer+0x2ce>
 8009468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800946c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009482:	b29b      	uxth	r3, r3
 8009484:	461a      	mov	r2, r3
 8009486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009488:	4413      	add	r3, r2
 800948a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800948c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	00da      	lsls	r2, r3, #3
 800949a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949c:	4413      	add	r3, r2
 800949e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80094a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80094a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a6:	881b      	ldrh	r3, [r3, #0]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b2:	801a      	strh	r2, [r3, #0]
 80094b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80094ba:	d921      	bls.n	8009500 <USB_EPStartXfer+0x276>
 80094bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094c0:	095b      	lsrs	r3, r3, #5
 80094c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80094c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ca:	f003 031f 	and.w	r3, r3, #31
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d104      	bne.n	80094dc <USB_EPStartXfer+0x252>
 80094d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80094d6:	3b01      	subs	r3, #1
 80094d8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80094dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094de:	881b      	ldrh	r3, [r3, #0]
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	029b      	lsls	r3, r3, #10
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	4313      	orrs	r3, r2
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fc:	801a      	strh	r2, [r3, #0]
 80094fe:	e050      	b.n	80095a2 <USB_EPStartXfer+0x318>
 8009500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10a      	bne.n	800951e <USB_EPStartXfer+0x294>
 8009508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950a:	881b      	ldrh	r3, [r3, #0]
 800950c:	b29b      	uxth	r3, r3
 800950e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009516:	b29a      	uxth	r2, r3
 8009518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951a:	801a      	strh	r2, [r3, #0]
 800951c:	e041      	b.n	80095a2 <USB_EPStartXfer+0x318>
 800951e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009522:	085b      	lsrs	r3, r3, #1
 8009524:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	d004      	beq.n	800953e <USB_EPStartXfer+0x2b4>
 8009534:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009538:	3301      	adds	r3, #1
 800953a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800953e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009540:	881b      	ldrh	r3, [r3, #0]
 8009542:	b29a      	uxth	r2, r3
 8009544:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009548:	b29b      	uxth	r3, r3
 800954a:	029b      	lsls	r3, r3, #10
 800954c:	b29b      	uxth	r3, r3
 800954e:	4313      	orrs	r3, r2
 8009550:	b29a      	uxth	r2, r3
 8009552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009554:	801a      	strh	r2, [r3, #0]
 8009556:	e024      	b.n	80095a2 <USB_EPStartXfer+0x318>
 8009558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800955c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	785b      	ldrb	r3, [r3, #1]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d11c      	bne.n	80095a2 <USB_EPStartXfer+0x318>
 8009568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800956c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009576:	b29b      	uxth	r3, r3
 8009578:	461a      	mov	r2, r3
 800957a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957c:	4413      	add	r3, r2
 800957e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	00da      	lsls	r2, r3, #3
 800958e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009590:	4413      	add	r3, r2
 8009592:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009596:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800959c:	b29a      	uxth	r2, r3
 800959e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80095a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	895b      	ldrh	r3, [r3, #10]
 80095ae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	6959      	ldr	r1, [r3, #20]
 80095be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80095c8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80095cc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80095d0:	6800      	ldr	r0, [r0, #0]
 80095d2:	f001 fb45 	bl	800ac60 <USB_WritePMA>
            ep->xfer_buff += len;
 80095d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	695a      	ldr	r2, [r3, #20]
 80095e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e6:	441a      	add	r2, r3
 80095e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80095f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	6a1a      	ldr	r2, [r3, #32]
 8009600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	429a      	cmp	r2, r3
 800960e:	d90f      	bls.n	8009630 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6a1a      	ldr	r2, [r3, #32]
 800961c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009620:	1ad2      	subs	r2, r2, r3
 8009622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	621a      	str	r2, [r3, #32]
 800962e:	e00e      	b.n	800964e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6a1b      	ldr	r3, [r3, #32]
 800963c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2200      	movs	r2, #0
 800964c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800964e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	785b      	ldrb	r3, [r3, #1]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d177      	bne.n	800974e <USB_EPStartXfer+0x4c4>
 800965e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009662:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	61bb      	str	r3, [r7, #24]
 800966a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800966e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009678:	b29b      	uxth	r3, r3
 800967a:	461a      	mov	r2, r3
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	4413      	add	r3, r2
 8009680:	61bb      	str	r3, [r7, #24]
 8009682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	00da      	lsls	r2, r3, #3
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	4413      	add	r3, r2
 8009694:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009698:	617b      	str	r3, [r7, #20]
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	881b      	ldrh	r3, [r3, #0]
 800969e:	b29b      	uxth	r3, r3
 80096a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	801a      	strh	r2, [r3, #0]
 80096aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80096b0:	d921      	bls.n	80096f6 <USB_EPStartXfer+0x46c>
 80096b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b6:	095b      	lsrs	r3, r3, #5
 80096b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80096bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c0:	f003 031f 	and.w	r3, r3, #31
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d104      	bne.n	80096d2 <USB_EPStartXfer+0x448>
 80096c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096cc:	3b01      	subs	r3, #1
 80096ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096dc:	b29b      	uxth	r3, r3
 80096de:	029b      	lsls	r3, r3, #10
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	4313      	orrs	r3, r2
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	801a      	strh	r2, [r3, #0]
 80096f4:	e056      	b.n	80097a4 <USB_EPStartXfer+0x51a>
 80096f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10a      	bne.n	8009714 <USB_EPStartXfer+0x48a>
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	881b      	ldrh	r3, [r3, #0]
 8009702:	b29b      	uxth	r3, r3
 8009704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800970c:	b29a      	uxth	r2, r3
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	801a      	strh	r2, [r3, #0]
 8009712:	e047      	b.n	80097a4 <USB_EPStartXfer+0x51a>
 8009714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009718:	085b      	lsrs	r3, r3, #1
 800971a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800971e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b00      	cmp	r3, #0
 8009728:	d004      	beq.n	8009734 <USB_EPStartXfer+0x4aa>
 800972a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800972e:	3301      	adds	r3, #1
 8009730:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	881b      	ldrh	r3, [r3, #0]
 8009738:	b29a      	uxth	r2, r3
 800973a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800973e:	b29b      	uxth	r3, r3
 8009740:	029b      	lsls	r3, r3, #10
 8009742:	b29b      	uxth	r3, r3
 8009744:	4313      	orrs	r3, r2
 8009746:	b29a      	uxth	r2, r3
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	801a      	strh	r2, [r3, #0]
 800974c:	e02a      	b.n	80097a4 <USB_EPStartXfer+0x51a>
 800974e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	785b      	ldrb	r3, [r3, #1]
 800975a:	2b01      	cmp	r3, #1
 800975c:	d122      	bne.n	80097a4 <USB_EPStartXfer+0x51a>
 800975e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009762:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	623b      	str	r3, [r7, #32]
 800976a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800976e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009778:	b29b      	uxth	r3, r3
 800977a:	461a      	mov	r2, r3
 800977c:	6a3b      	ldr	r3, [r7, #32]
 800977e:	4413      	add	r3, r2
 8009780:	623b      	str	r3, [r7, #32]
 8009782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	00da      	lsls	r2, r3, #3
 8009790:	6a3b      	ldr	r3, [r7, #32]
 8009792:	4413      	add	r3, r2
 8009794:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009798:	61fb      	str	r3, [r7, #28]
 800979a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800979e:	b29a      	uxth	r2, r3
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80097a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	891b      	ldrh	r3, [r3, #8]
 80097b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	6959      	ldr	r1, [r3, #20]
 80097c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80097ca:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80097ce:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80097d2:	6800      	ldr	r0, [r0, #0]
 80097d4:	f001 fa44 	bl	800ac60 <USB_WritePMA>
 80097d8:	e3ee      	b.n	8009fb8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	785b      	ldrb	r3, [r3, #1]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d177      	bne.n	80098da <USB_EPStartXfer+0x650>
 80097ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009804:	b29b      	uxth	r3, r3
 8009806:	461a      	mov	r2, r3
 8009808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800980a:	4413      	add	r3, r2
 800980c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800980e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	00da      	lsls	r2, r3, #3
 800981c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800981e:	4413      	add	r3, r2
 8009820:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009824:	647b      	str	r3, [r7, #68]	@ 0x44
 8009826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009828:	881b      	ldrh	r3, [r3, #0]
 800982a:	b29b      	uxth	r3, r3
 800982c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009830:	b29a      	uxth	r2, r3
 8009832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009834:	801a      	strh	r2, [r3, #0]
 8009836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800983a:	2b3e      	cmp	r3, #62	@ 0x3e
 800983c:	d921      	bls.n	8009882 <USB_EPStartXfer+0x5f8>
 800983e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009842:	095b      	lsrs	r3, r3, #5
 8009844:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800984c:	f003 031f 	and.w	r3, r3, #31
 8009850:	2b00      	cmp	r3, #0
 8009852:	d104      	bne.n	800985e <USB_EPStartXfer+0x5d4>
 8009854:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009858:	3b01      	subs	r3, #1
 800985a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800985e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009860:	881b      	ldrh	r3, [r3, #0]
 8009862:	b29a      	uxth	r2, r3
 8009864:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009868:	b29b      	uxth	r3, r3
 800986a:	029b      	lsls	r3, r3, #10
 800986c:	b29b      	uxth	r3, r3
 800986e:	4313      	orrs	r3, r2
 8009870:	b29b      	uxth	r3, r3
 8009872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800987a:	b29a      	uxth	r2, r3
 800987c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800987e:	801a      	strh	r2, [r3, #0]
 8009880:	e056      	b.n	8009930 <USB_EPStartXfer+0x6a6>
 8009882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10a      	bne.n	80098a0 <USB_EPStartXfer+0x616>
 800988a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800988c:	881b      	ldrh	r3, [r3, #0]
 800988e:	b29b      	uxth	r3, r3
 8009890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009898:	b29a      	uxth	r2, r3
 800989a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800989c:	801a      	strh	r2, [r3, #0]
 800989e:	e047      	b.n	8009930 <USB_EPStartXfer+0x6a6>
 80098a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a4:	085b      	lsrs	r3, r3, #1
 80098a6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80098aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d004      	beq.n	80098c0 <USB_EPStartXfer+0x636>
 80098b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80098ba:	3301      	adds	r3, #1
 80098bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80098c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098c2:	881b      	ldrh	r3, [r3, #0]
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	029b      	lsls	r3, r3, #10
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	4313      	orrs	r3, r2
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098d6:	801a      	strh	r2, [r3, #0]
 80098d8:	e02a      	b.n	8009930 <USB_EPStartXfer+0x6a6>
 80098da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	785b      	ldrb	r3, [r3, #1]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d122      	bne.n	8009930 <USB_EPStartXfer+0x6a6>
 80098ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80098f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009904:	b29b      	uxth	r3, r3
 8009906:	461a      	mov	r2, r3
 8009908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800990a:	4413      	add	r3, r2
 800990c:	653b      	str	r3, [r7, #80]	@ 0x50
 800990e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	00da      	lsls	r2, r3, #3
 800991c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800991e:	4413      	add	r3, r2
 8009920:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800992a:	b29a      	uxth	r2, r3
 800992c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800992e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	891b      	ldrh	r3, [r3, #8]
 800993c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	6959      	ldr	r1, [r3, #20]
 800994c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009950:	b29b      	uxth	r3, r3
 8009952:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009956:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800995a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800995e:	6800      	ldr	r0, [r0, #0]
 8009960:	f001 f97e 	bl	800ac60 <USB_WritePMA>
            ep->xfer_buff += len;
 8009964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	695a      	ldr	r2, [r3, #20]
 8009970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009974:	441a      	add	r2, r3
 8009976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800997a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6a1a      	ldr	r2, [r3, #32]
 800998e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	429a      	cmp	r2, r3
 800999c:	d90f      	bls.n	80099be <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800999e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6a1a      	ldr	r2, [r3, #32]
 80099aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ae:	1ad2      	subs	r2, r2, r3
 80099b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	621a      	str	r2, [r3, #32]
 80099bc:	e00e      	b.n	80099dc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80099be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80099ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2200      	movs	r2, #0
 80099da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80099dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80099e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	785b      	ldrb	r3, [r3, #1]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d177      	bne.n	8009ae8 <USB_EPStartXfer+0x85e>
 80099f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	461a      	mov	r2, r3
 8009a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a18:	4413      	add	r3, r2
 8009a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	00da      	lsls	r2, r3, #3
 8009a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a36:	881b      	ldrh	r3, [r3, #0]
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a42:	801a      	strh	r2, [r3, #0]
 8009a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a48:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a4a:	d921      	bls.n	8009a90 <USB_EPStartXfer+0x806>
 8009a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a50:	095b      	lsrs	r3, r3, #5
 8009a52:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a5a:	f003 031f 	and.w	r3, r3, #31
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d104      	bne.n	8009a6c <USB_EPStartXfer+0x7e2>
 8009a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a66:	3b01      	subs	r3, #1
 8009a68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	029b      	lsls	r3, r3, #10
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a8c:	801a      	strh	r2, [r3, #0]
 8009a8e:	e050      	b.n	8009b32 <USB_EPStartXfer+0x8a8>
 8009a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10a      	bne.n	8009aae <USB_EPStartXfer+0x824>
 8009a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a9a:	881b      	ldrh	r3, [r3, #0]
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aaa:	801a      	strh	r2, [r3, #0]
 8009aac:	e041      	b.n	8009b32 <USB_EPStartXfer+0x8a8>
 8009aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab2:	085b      	lsrs	r3, r3, #1
 8009ab4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d004      	beq.n	8009ace <USB_EPStartXfer+0x844>
 8009ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ac8:	3301      	adds	r3, #1
 8009aca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ad0:	881b      	ldrh	r3, [r3, #0]
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	029b      	lsls	r3, r3, #10
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ae4:	801a      	strh	r2, [r3, #0]
 8009ae6:	e024      	b.n	8009b32 <USB_EPStartXfer+0x8a8>
 8009ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	785b      	ldrb	r3, [r3, #1]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d11c      	bne.n	8009b32 <USB_EPStartXfer+0x8a8>
 8009af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009afc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	461a      	mov	r2, r3
 8009b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b0c:	4413      	add	r3, r2
 8009b0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	00da      	lsls	r2, r3, #3
 8009b1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b20:	4413      	add	r3, r2
 8009b22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	895b      	ldrh	r3, [r3, #10]
 8009b3e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6959      	ldr	r1, [r3, #20]
 8009b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009b58:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009b5c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009b60:	6800      	ldr	r0, [r0, #0]
 8009b62:	f001 f87d 	bl	800ac60 <USB_WritePMA>
 8009b66:	e227      	b.n	8009fb8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	4413      	add	r3, r2
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b9e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ba6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	441a      	add	r2, r3
 8009bbc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009bc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009be4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bf4:	4413      	add	r3, r2
 8009bf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	00da      	lsls	r2, r3, #3
 8009c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c08:	4413      	add	r3, r2
 8009c0a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c18:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	891b      	ldrh	r3, [r3, #8]
 8009c26:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6959      	ldr	r1, [r3, #20]
 8009c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c40:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009c44:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009c48:	6800      	ldr	r0, [r0, #0]
 8009c4a:	f001 f809 	bl	800ac60 <USB_WritePMA>
 8009c4e:	e1b3      	b.n	8009fb8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	6a1a      	ldr	r2, [r3, #32]
 8009c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c60:	1ad2      	subs	r2, r2, r3
 8009c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 80c6 	beq.w	8009e22 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	673b      	str	r3, [r7, #112]	@ 0x70
 8009ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	785b      	ldrb	r3, [r3, #1]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d177      	bne.n	8009da2 <USB_EPStartXfer+0xb18>
 8009cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	461a      	mov	r2, r3
 8009cd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009cd2:	4413      	add	r3, r2
 8009cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	00da      	lsls	r2, r3, #3
 8009ce4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009cec:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cfc:	801a      	strh	r2, [r3, #0]
 8009cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d02:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d04:	d921      	bls.n	8009d4a <USB_EPStartXfer+0xac0>
 8009d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d0a:	095b      	lsrs	r3, r3, #5
 8009d0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d14:	f003 031f 	and.w	r3, r3, #31
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d104      	bne.n	8009d26 <USB_EPStartXfer+0xa9c>
 8009d1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009d20:	3b01      	subs	r3, #1
 8009d22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009d26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d28:	881b      	ldrh	r3, [r3, #0]
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	029b      	lsls	r3, r3, #10
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	4313      	orrs	r3, r2
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d46:	801a      	strh	r2, [r3, #0]
 8009d48:	e050      	b.n	8009dec <USB_EPStartXfer+0xb62>
 8009d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10a      	bne.n	8009d68 <USB_EPStartXfer+0xade>
 8009d52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d54:	881b      	ldrh	r3, [r3, #0]
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d64:	801a      	strh	r2, [r3, #0]
 8009d66:	e041      	b.n	8009dec <USB_EPStartXfer+0xb62>
 8009d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d6c:	085b      	lsrs	r3, r3, #1
 8009d6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d004      	beq.n	8009d88 <USB_EPStartXfer+0xafe>
 8009d7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009d82:	3301      	adds	r3, #1
 8009d84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009d88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	029b      	lsls	r3, r3, #10
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d9e:	801a      	strh	r2, [r3, #0]
 8009da0:	e024      	b.n	8009dec <USB_EPStartXfer+0xb62>
 8009da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	785b      	ldrb	r3, [r3, #1]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d11c      	bne.n	8009dec <USB_EPStartXfer+0xb62>
 8009db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009db6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dc6:	4413      	add	r3, r2
 8009dc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8009dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	00da      	lsls	r2, r3, #3
 8009dd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dda:	4413      	add	r3, r2
 8009ddc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009de0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	895b      	ldrh	r3, [r3, #10]
 8009df8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	6959      	ldr	r1, [r3, #20]
 8009e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009e12:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009e16:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009e1a:	6800      	ldr	r0, [r0, #0]
 8009e1c:	f000 ff20 	bl	800ac60 <USB_WritePMA>
 8009e20:	e0ca      	b.n	8009fb8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	785b      	ldrb	r3, [r3, #1]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d177      	bne.n	8009f22 <USB_EPStartXfer+0xc98>
 8009e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	461a      	mov	r2, r3
 8009e50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009e52:	4413      	add	r3, r2
 8009e54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	00da      	lsls	r2, r3, #3
 8009e64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009e66:	4413      	add	r3, r2
 8009e68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e70:	881b      	ldrh	r3, [r3, #0]
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e7c:	801a      	strh	r2, [r3, #0]
 8009e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e82:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e84:	d921      	bls.n	8009eca <USB_EPStartXfer+0xc40>
 8009e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e8a:	095b      	lsrs	r3, r3, #5
 8009e8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e94:	f003 031f 	and.w	r3, r3, #31
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d104      	bne.n	8009ea6 <USB_EPStartXfer+0xc1c>
 8009e9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009ea6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ea8:	881b      	ldrh	r3, [r3, #0]
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	029b      	lsls	r3, r3, #10
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ec6:	801a      	strh	r2, [r3, #0]
 8009ec8:	e05c      	b.n	8009f84 <USB_EPStartXfer+0xcfa>
 8009eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10a      	bne.n	8009ee8 <USB_EPStartXfer+0xc5e>
 8009ed2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ee4:	801a      	strh	r2, [r3, #0]
 8009ee6:	e04d      	b.n	8009f84 <USB_EPStartXfer+0xcfa>
 8009ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eec:	085b      	lsrs	r3, r3, #1
 8009eee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef6:	f003 0301 	and.w	r3, r3, #1
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d004      	beq.n	8009f08 <USB_EPStartXfer+0xc7e>
 8009efe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009f02:	3301      	adds	r3, #1
 8009f04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009f08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f0a:	881b      	ldrh	r3, [r3, #0]
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	029b      	lsls	r3, r3, #10
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f1e:	801a      	strh	r2, [r3, #0]
 8009f20:	e030      	b.n	8009f84 <USB_EPStartXfer+0xcfa>
 8009f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	785b      	ldrb	r3, [r3, #1]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d128      	bne.n	8009f84 <USB_EPStartXfer+0xcfa>
 8009f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	461a      	mov	r2, r3
 8009f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f56:	4413      	add	r3, r2
 8009f58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	00da      	lsls	r2, r3, #3
 8009f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f6e:	4413      	add	r3, r2
 8009f70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009f74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f7c:	b29a      	uxth	r2, r3
 8009f7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009f82:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	891b      	ldrh	r3, [r3, #8]
 8009f90:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	6959      	ldr	r1, [r3, #20]
 8009fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009faa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009fae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009fb2:	6800      	ldr	r0, [r0, #0]
 8009fb4:	f000 fe54 	bl	800ac60 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	4413      	add	r3, r2
 8009fd2:	881b      	ldrh	r3, [r3, #0]
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fde:	817b      	strh	r3, [r7, #10]
 8009fe0:	897b      	ldrh	r3, [r7, #10]
 8009fe2:	f083 0310 	eor.w	r3, r3, #16
 8009fe6:	817b      	strh	r3, [r7, #10]
 8009fe8:	897b      	ldrh	r3, [r7, #10]
 8009fea:	f083 0320 	eor.w	r3, r3, #32
 8009fee:	817b      	strh	r3, [r7, #10]
 8009ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	441a      	add	r2, r3
 800a00a:	897b      	ldrh	r3, [r7, #10]
 800a00c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	8013      	strh	r3, [r2, #0]
 800a020:	f000 bcde 	b.w	800a9e0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	7b1b      	ldrb	r3, [r3, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	f040 80bb 	bne.w	800a1ac <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a03a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	699a      	ldr	r2, [r3, #24]
 800a042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d917      	bls.n	800a082 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	699a      	ldr	r2, [r3, #24]
 800a06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a072:	1ad2      	subs	r2, r2, r3
 800a074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	619a      	str	r2, [r3, #24]
 800a080:	e00e      	b.n	800a0a0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2200      	movs	r2, #0
 800a09e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a0a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	461a      	mov	r2, r3
 800a0c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	00da      	lsls	r2, r3, #3
 800a0d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a0dc:	4413      	add	r3, r2
 800a0de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a0e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a0e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0ea:	881b      	ldrh	r3, [r3, #0]
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0f2:	b29a      	uxth	r2, r3
 800a0f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0f8:	801a      	strh	r2, [r3, #0]
 800a0fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0fe:	2b3e      	cmp	r3, #62	@ 0x3e
 800a100:	d924      	bls.n	800a14c <USB_EPStartXfer+0xec2>
 800a102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a106:	095b      	lsrs	r3, r3, #5
 800a108:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a110:	f003 031f 	and.w	r3, r3, #31
 800a114:	2b00      	cmp	r3, #0
 800a116:	d104      	bne.n	800a122 <USB_EPStartXfer+0xe98>
 800a118:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a11c:	3b01      	subs	r3, #1
 800a11e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a122:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	b29a      	uxth	r2, r3
 800a12a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a12e:	b29b      	uxth	r3, r3
 800a130:	029b      	lsls	r3, r3, #10
 800a132:	b29b      	uxth	r3, r3
 800a134:	4313      	orrs	r3, r2
 800a136:	b29b      	uxth	r3, r3
 800a138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a13c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a140:	b29a      	uxth	r2, r3
 800a142:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a146:	801a      	strh	r2, [r3, #0]
 800a148:	f000 bc10 	b.w	800a96c <USB_EPStartXfer+0x16e2>
 800a14c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10c      	bne.n	800a16e <USB_EPStartXfer+0xee4>
 800a154:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a164:	b29a      	uxth	r2, r3
 800a166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a16a:	801a      	strh	r2, [r3, #0]
 800a16c:	e3fe      	b.n	800a96c <USB_EPStartXfer+0x16e2>
 800a16e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a172:	085b      	lsrs	r3, r3, #1
 800a174:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d004      	beq.n	800a18e <USB_EPStartXfer+0xf04>
 800a184:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a188:	3301      	adds	r3, #1
 800a18a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a18e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a192:	881b      	ldrh	r3, [r3, #0]
 800a194:	b29a      	uxth	r2, r3
 800a196:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	029b      	lsls	r3, r3, #10
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1a8:	801a      	strh	r2, [r3, #0]
 800a1aa:	e3df      	b.n	800a96c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a1ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	78db      	ldrb	r3, [r3, #3]
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	f040 8218 	bne.w	800a5ee <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a1be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	785b      	ldrb	r3, [r3, #1]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	f040 809d 	bne.w	800a30a <USB_EPStartXfer+0x1080>
 800a1d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a1de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a1fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	00da      	lsls	r2, r3, #3
 800a208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a20c:	4413      	add	r3, r2
 800a20e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a212:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a216:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a21a:	881b      	ldrh	r3, [r3, #0]
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a222:	b29a      	uxth	r2, r3
 800a224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a228:	801a      	strh	r2, [r3, #0]
 800a22a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a22e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	2b3e      	cmp	r3, #62	@ 0x3e
 800a238:	d92b      	bls.n	800a292 <USB_EPStartXfer+0x1008>
 800a23a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a23e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	095b      	lsrs	r3, r3, #5
 800a248:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a24c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	f003 031f 	and.w	r3, r3, #31
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d104      	bne.n	800a26a <USB_EPStartXfer+0xfe0>
 800a260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a264:	3b01      	subs	r3, #1
 800a266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a26a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a26e:	881b      	ldrh	r3, [r3, #0]
 800a270:	b29a      	uxth	r2, r3
 800a272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a276:	b29b      	uxth	r3, r3
 800a278:	029b      	lsls	r3, r3, #10
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	4313      	orrs	r3, r2
 800a27e:	b29b      	uxth	r3, r3
 800a280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a288:	b29a      	uxth	r2, r3
 800a28a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a28e:	801a      	strh	r2, [r3, #0]
 800a290:	e070      	b.n	800a374 <USB_EPStartXfer+0x10ea>
 800a292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10c      	bne.n	800a2bc <USB_EPStartXfer+0x1032>
 800a2a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2a6:	881b      	ldrh	r3, [r3, #0]
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2b8:	801a      	strh	r2, [r3, #0]
 800a2ba:	e05b      	b.n	800a374 <USB_EPStartXfer+0x10ea>
 800a2bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	085b      	lsrs	r3, r3, #1
 800a2ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d004      	beq.n	800a2ec <USB_EPStartXfer+0x1062>
 800a2e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	029b      	lsls	r3, r3, #10
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	4313      	orrs	r3, r2
 800a300:	b29a      	uxth	r2, r3
 800a302:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a306:	801a      	strh	r2, [r3, #0]
 800a308:	e034      	b.n	800a374 <USB_EPStartXfer+0x10ea>
 800a30a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a30e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	785b      	ldrb	r3, [r3, #1]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d12c      	bne.n	800a374 <USB_EPStartXfer+0x10ea>
 800a31a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a31e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a32c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a336:	b29b      	uxth	r3, r3
 800a338:	461a      	mov	r2, r3
 800a33a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a33e:	4413      	add	r3, r2
 800a340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	00da      	lsls	r2, r3, #3
 800a352:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a356:	4413      	add	r3, r2
 800a358:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a35c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a372:	801a      	strh	r2, [r3, #0]
 800a374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a378:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	785b      	ldrb	r3, [r3, #1]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f040 809d 	bne.w	800a4ce <USB_EPStartXfer+0x1244>
 800a394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a3a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a3b8:	4413      	add	r3, r2
 800a3ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a3be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	00da      	lsls	r2, r3, #3
 800a3cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a3d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a3da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a3de:	881b      	ldrh	r3, [r3, #0]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a3ec:	801a      	strh	r2, [r3, #0]
 800a3ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	2b3e      	cmp	r3, #62	@ 0x3e
 800a3fc:	d92b      	bls.n	800a456 <USB_EPStartXfer+0x11cc>
 800a3fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	095b      	lsrs	r3, r3, #5
 800a40c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	f003 031f 	and.w	r3, r3, #31
 800a420:	2b00      	cmp	r3, #0
 800a422:	d104      	bne.n	800a42e <USB_EPStartXfer+0x11a4>
 800a424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a428:	3b01      	subs	r3, #1
 800a42a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a42e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a432:	881b      	ldrh	r3, [r3, #0]
 800a434:	b29a      	uxth	r2, r3
 800a436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	029b      	lsls	r3, r3, #10
 800a43e:	b29b      	uxth	r3, r3
 800a440:	4313      	orrs	r3, r2
 800a442:	b29b      	uxth	r3, r3
 800a444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a452:	801a      	strh	r2, [r3, #0]
 800a454:	e069      	b.n	800a52a <USB_EPStartXfer+0x12a0>
 800a456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a45a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10c      	bne.n	800a480 <USB_EPStartXfer+0x11f6>
 800a466:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a46a:	881b      	ldrh	r3, [r3, #0]
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a476:	b29a      	uxth	r2, r3
 800a478:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a47c:	801a      	strh	r2, [r3, #0]
 800a47e:	e054      	b.n	800a52a <USB_EPStartXfer+0x12a0>
 800a480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	085b      	lsrs	r3, r3, #1
 800a48e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	f003 0301 	and.w	r3, r3, #1
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d004      	beq.n	800a4b0 <USB_EPStartXfer+0x1226>
 800a4a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a4b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4b4:	881b      	ldrh	r3, [r3, #0]
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	029b      	lsls	r3, r3, #10
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4ca:	801a      	strh	r2, [r3, #0]
 800a4cc:	e02d      	b.n	800a52a <USB_EPStartXfer+0x12a0>
 800a4ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	785b      	ldrb	r3, [r3, #1]
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d125      	bne.n	800a52a <USB_EPStartXfer+0x12a0>
 800a4de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a4fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	00da      	lsls	r2, r3, #3
 800a508:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a50c:	4413      	add	r3, r2
 800a50e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a512:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a51a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	b29a      	uxth	r2, r3
 800a524:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a528:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a52a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a52e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	69db      	ldr	r3, [r3, #28]
 800a536:	2b00      	cmp	r3, #0
 800a538:	f000 8218 	beq.w	800a96c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a53c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a540:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a54a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	881b      	ldrh	r3, [r3, #0]
 800a558:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a55c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a560:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d005      	beq.n	800a574 <USB_EPStartXfer+0x12ea>
 800a568:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a56c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10d      	bne.n	800a590 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a574:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a578:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f040 81f5 	bne.w	800a96c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a582:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f040 81ee 	bne.w	800a96c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a59e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	881b      	ldrh	r3, [r3, #0]
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5b6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a5ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	441a      	add	r2, r3
 800a5d4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a5d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	8013      	strh	r3, [r2, #0]
 800a5ec:	e1be      	b.n	800a96c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a5ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	78db      	ldrb	r3, [r3, #3]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	f040 81b4 	bne.w	800a968 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	699a      	ldr	r2, [r3, #24]
 800a60c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d917      	bls.n	800a64c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a61c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800a62c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	699a      	ldr	r2, [r3, #24]
 800a638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a63c:	1ad2      	subs	r2, r2, r3
 800a63e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	619a      	str	r2, [r3, #24]
 800a64a:	e00e      	b.n	800a66a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a64c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	699b      	ldr	r3, [r3, #24]
 800a658:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800a65c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2200      	movs	r2, #0
 800a668:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a66a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a66e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	785b      	ldrb	r3, [r3, #1]
 800a676:	2b00      	cmp	r3, #0
 800a678:	f040 8085 	bne.w	800a786 <USB_EPStartXfer+0x14fc>
 800a67c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a680:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a68a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a68e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a698:	b29b      	uxth	r3, r3
 800a69a:	461a      	mov	r2, r3
 800a69c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a6a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	00da      	lsls	r2, r3, #3
 800a6b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a6b8:	4413      	add	r3, r2
 800a6ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a6c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6c6:	881b      	ldrh	r3, [r3, #0]
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6d4:	801a      	strh	r2, [r3, #0]
 800a6d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6da:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6dc:	d923      	bls.n	800a726 <USB_EPStartXfer+0x149c>
 800a6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6e2:	095b      	lsrs	r3, r3, #5
 800a6e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6ec:	f003 031f 	and.w	r3, r3, #31
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d104      	bne.n	800a6fe <USB_EPStartXfer+0x1474>
 800a6f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a6fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	b29a      	uxth	r2, r3
 800a706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	029b      	lsls	r3, r3, #10
 800a70e:	b29b      	uxth	r3, r3
 800a710:	4313      	orrs	r3, r2
 800a712:	b29b      	uxth	r3, r3
 800a714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a722:	801a      	strh	r2, [r3, #0]
 800a724:	e060      	b.n	800a7e8 <USB_EPStartXfer+0x155e>
 800a726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10c      	bne.n	800a748 <USB_EPStartXfer+0x14be>
 800a72e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a732:	881b      	ldrh	r3, [r3, #0]
 800a734:	b29b      	uxth	r3, r3
 800a736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a73a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a73e:	b29a      	uxth	r2, r3
 800a740:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a744:	801a      	strh	r2, [r3, #0]
 800a746:	e04f      	b.n	800a7e8 <USB_EPStartXfer+0x155e>
 800a748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a74c:	085b      	lsrs	r3, r3, #1
 800a74e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a756:	f003 0301 	and.w	r3, r3, #1
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d004      	beq.n	800a768 <USB_EPStartXfer+0x14de>
 800a75e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a762:	3301      	adds	r3, #1
 800a764:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a768:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a76c:	881b      	ldrh	r3, [r3, #0]
 800a76e:	b29a      	uxth	r2, r3
 800a770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a774:	b29b      	uxth	r3, r3
 800a776:	029b      	lsls	r3, r3, #10
 800a778:	b29b      	uxth	r3, r3
 800a77a:	4313      	orrs	r3, r2
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a782:	801a      	strh	r2, [r3, #0]
 800a784:	e030      	b.n	800a7e8 <USB_EPStartXfer+0x155e>
 800a786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a78a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	785b      	ldrb	r3, [r3, #1]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d128      	bne.n	800a7e8 <USB_EPStartXfer+0x155e>
 800a796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a79a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a7a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a7ba:	4413      	add	r3, r2
 800a7bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a7c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	00da      	lsls	r2, r3, #3
 800a7ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a7e6:	801a      	strh	r2, [r3, #0]
 800a7e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a7f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	785b      	ldrb	r3, [r3, #1]
 800a802:	2b00      	cmp	r3, #0
 800a804:	f040 8085 	bne.w	800a912 <USB_EPStartXfer+0x1688>
 800a808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a80c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a81a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a824:	b29b      	uxth	r3, r3
 800a826:	461a      	mov	r2, r3
 800a828:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a82c:	4413      	add	r3, r2
 800a82e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	00da      	lsls	r2, r3, #3
 800a840:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a844:	4413      	add	r3, r2
 800a846:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a84a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a84e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	b29b      	uxth	r3, r3
 800a856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a860:	801a      	strh	r2, [r3, #0]
 800a862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a866:	2b3e      	cmp	r3, #62	@ 0x3e
 800a868:	d923      	bls.n	800a8b2 <USB_EPStartXfer+0x1628>
 800a86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a86e:	095b      	lsrs	r3, r3, #5
 800a870:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a878:	f003 031f 	and.w	r3, r3, #31
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d104      	bne.n	800a88a <USB_EPStartXfer+0x1600>
 800a880:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a884:	3b01      	subs	r3, #1
 800a886:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a88a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	b29a      	uxth	r2, r3
 800a892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a896:	b29b      	uxth	r3, r3
 800a898:	029b      	lsls	r3, r3, #10
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	4313      	orrs	r3, r2
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8ae:	801a      	strh	r2, [r3, #0]
 800a8b0:	e05c      	b.n	800a96c <USB_EPStartXfer+0x16e2>
 800a8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10c      	bne.n	800a8d4 <USB_EPStartXfer+0x164a>
 800a8ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8d0:	801a      	strh	r2, [r3, #0]
 800a8d2:	e04b      	b.n	800a96c <USB_EPStartXfer+0x16e2>
 800a8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8d8:	085b      	lsrs	r3, r3, #1
 800a8da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8e2:	f003 0301 	and.w	r3, r3, #1
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d004      	beq.n	800a8f4 <USB_EPStartXfer+0x166a>
 800a8ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a900:	b29b      	uxth	r3, r3
 800a902:	029b      	lsls	r3, r3, #10
 800a904:	b29b      	uxth	r3, r3
 800a906:	4313      	orrs	r3, r2
 800a908:	b29a      	uxth	r2, r3
 800a90a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a90e:	801a      	strh	r2, [r3, #0]
 800a910:	e02c      	b.n	800a96c <USB_EPStartXfer+0x16e2>
 800a912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	785b      	ldrb	r3, [r3, #1]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d124      	bne.n	800a96c <USB_EPStartXfer+0x16e2>
 800a922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a926:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a930:	b29b      	uxth	r3, r3
 800a932:	461a      	mov	r2, r3
 800a934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a938:	4413      	add	r3, r2
 800a93a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a93e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	00da      	lsls	r2, r3, #3
 800a94c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a950:	4413      	add	r3, r2
 800a952:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a956:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a95e:	b29a      	uxth	r2, r3
 800a960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a964:	801a      	strh	r2, [r3, #0]
 800a966:	e001      	b.n	800a96c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e03a      	b.n	800a9e2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a96c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a970:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a97a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	881b      	ldrh	r3, [r3, #0]
 800a988:	b29b      	uxth	r3, r3
 800a98a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a98e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a992:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a996:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a99a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a99e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a9a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a9a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a9aa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a9ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	441a      	add	r2, r3
 800a9c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a9cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	785b      	ldrb	r3, [r3, #1]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d020      	beq.n	800aa40 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	4413      	add	r3, r2
 800aa08:	881b      	ldrh	r3, [r3, #0]
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa14:	81bb      	strh	r3, [r7, #12]
 800aa16:	89bb      	ldrh	r3, [r7, #12]
 800aa18:	f083 0310 	eor.w	r3, r3, #16
 800aa1c:	81bb      	strh	r3, [r7, #12]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	441a      	add	r2, r3
 800aa28:	89bb      	ldrh	r3, [r7, #12]
 800aa2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	8013      	strh	r3, [r2, #0]
 800aa3e:	e01f      	b.n	800aa80 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	4413      	add	r3, r2
 800aa4a:	881b      	ldrh	r3, [r3, #0]
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa56:	81fb      	strh	r3, [r7, #14]
 800aa58:	89fb      	ldrh	r3, [r7, #14]
 800aa5a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aa5e:	81fb      	strh	r3, [r7, #14]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	441a      	add	r2, r3
 800aa6a:	89fb      	ldrh	r3, [r7, #14]
 800aa6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3714      	adds	r7, #20
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aa8e:	b480      	push	{r7}
 800aa90:	b087      	sub	sp, #28
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
 800aa96:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	7b1b      	ldrb	r3, [r3, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f040 809d 	bne.w	800abdc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	785b      	ldrb	r3, [r3, #1]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d04c      	beq.n	800ab44 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	881b      	ldrh	r3, [r3, #0]
 800aab6:	823b      	strh	r3, [r7, #16]
 800aab8:	8a3b      	ldrh	r3, [r7, #16]
 800aaba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d01b      	beq.n	800aafa <USB_EPClearStall+0x6c>
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	881b      	ldrh	r3, [r3, #0]
 800aace:	b29b      	uxth	r3, r3
 800aad0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aad8:	81fb      	strh	r3, [r7, #14]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	441a      	add	r2, r3
 800aae4:	89fb      	ldrh	r3, [r7, #14]
 800aae6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aaea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aaee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aaf2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	78db      	ldrb	r3, [r3, #3]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d06c      	beq.n	800abdc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	4413      	add	r3, r2
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab18:	81bb      	strh	r3, [r7, #12]
 800ab1a:	89bb      	ldrh	r3, [r7, #12]
 800ab1c:	f083 0320 	eor.w	r3, r3, #32
 800ab20:	81bb      	strh	r3, [r7, #12]
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	441a      	add	r2, r3
 800ab2c:	89bb      	ldrh	r3, [r7, #12]
 800ab2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	8013      	strh	r3, [r2, #0]
 800ab42:	e04b      	b.n	800abdc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	881b      	ldrh	r3, [r3, #0]
 800ab50:	82fb      	strh	r3, [r7, #22]
 800ab52:	8afb      	ldrh	r3, [r7, #22]
 800ab54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d01b      	beq.n	800ab94 <USB_EPClearStall+0x106>
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4413      	add	r3, r2
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab72:	82bb      	strh	r3, [r7, #20]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	441a      	add	r2, r3
 800ab7e:	8abb      	ldrh	r3, [r7, #20]
 800ab80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ab8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4413      	add	r3, r2
 800ab9e:	881b      	ldrh	r3, [r3, #0]
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abaa:	827b      	strh	r3, [r7, #18]
 800abac:	8a7b      	ldrh	r3, [r7, #18]
 800abae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800abb2:	827b      	strh	r3, [r7, #18]
 800abb4:	8a7b      	ldrh	r3, [r7, #18]
 800abb6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800abba:	827b      	strh	r3, [r7, #18]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	441a      	add	r2, r3
 800abc6:	8a7b      	ldrh	r3, [r7, #18]
 800abc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abd8:	b29b      	uxth	r3, r3
 800abda:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	371c      	adds	r7, #28
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800abea:	b480      	push	{r7}
 800abec:	b083      	sub	sp, #12
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
 800abf2:	460b      	mov	r3, r1
 800abf4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800abf6:	78fb      	ldrb	r3, [r7, #3]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d103      	bne.n	800ac04 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2280      	movs	r2, #128	@ 0x80
 800ac00:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr

0800ac12 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ac12:	b480      	push	{r7}
 800ac14:	b083      	sub	sp, #12
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac2a:	b29a      	uxth	r2, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ac52:	68fb      	ldr	r3, [r7, #12]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3714      	adds	r7, #20
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b08b      	sub	sp, #44	@ 0x2c
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	460b      	mov	r3, r1
 800ac70:	80fb      	strh	r3, [r7, #6]
 800ac72:	4613      	mov	r3, r2
 800ac74:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ac76:	88bb      	ldrh	r3, [r7, #4]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	085b      	lsrs	r3, r3, #1
 800ac7c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ac86:	88fa      	ldrh	r2, [r7, #6]
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac90:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac96:	e01b      	b.n	800acd0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	3301      	adds	r3, #1
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	021b      	lsls	r3, r3, #8
 800aca6:	b21a      	sxth	r2, r3
 800aca8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800acac:	4313      	orrs	r3, r2
 800acae:	b21b      	sxth	r3, r3
 800acb0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800acb2:	6a3b      	ldr	r3, [r7, #32]
 800acb4:	8a7a      	ldrh	r2, [r7, #18]
 800acb6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800acb8:	6a3b      	ldr	r3, [r7, #32]
 800acba:	3302      	adds	r3, #2
 800acbc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	3301      	adds	r3, #1
 800acc2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	3301      	adds	r3, #1
 800acc8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800acca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800accc:	3b01      	subs	r3, #1
 800acce:	627b      	str	r3, [r7, #36]	@ 0x24
 800acd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1e0      	bne.n	800ac98 <USB_WritePMA+0x38>
  }
}
 800acd6:	bf00      	nop
 800acd8:	bf00      	nop
 800acda:	372c      	adds	r7, #44	@ 0x2c
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b08b      	sub	sp, #44	@ 0x2c
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	4611      	mov	r1, r2
 800acf0:	461a      	mov	r2, r3
 800acf2:	460b      	mov	r3, r1
 800acf4:	80fb      	strh	r3, [r7, #6]
 800acf6:	4613      	mov	r3, r2
 800acf8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800acfa:	88bb      	ldrh	r3, [r7, #4]
 800acfc:	085b      	lsrs	r3, r3, #1
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad0a:	88fa      	ldrh	r2, [r7, #6]
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	4413      	add	r3, r2
 800ad10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad14:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad1a:	e018      	b.n	800ad4e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ad1c:	6a3b      	ldr	r3, [r7, #32]
 800ad1e:	881b      	ldrh	r3, [r3, #0]
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ad24:	6a3b      	ldr	r3, [r7, #32]
 800ad26:	3302      	adds	r3, #2
 800ad28:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	b2da      	uxtb	r2, r3
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	3301      	adds	r3, #1
 800ad36:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	0a1b      	lsrs	r3, r3, #8
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	3301      	adds	r3, #1
 800ad46:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ad48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1e3      	bne.n	800ad1c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ad54:	88bb      	ldrh	r3, [r7, #4]
 800ad56:	f003 0301 	and.w	r3, r3, #1
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d007      	beq.n	800ad70 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ad60:	6a3b      	ldr	r3, [r7, #32]
 800ad62:	881b      	ldrh	r3, [r3, #0]
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	701a      	strb	r2, [r3, #0]
  }
}
 800ad70:	bf00      	nop
 800ad72:	372c      	adds	r7, #44	@ 0x2c
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	460b      	mov	r3, r1
 800ad86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ad88:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ad8c:	f002 f8fa 	bl	800cf84 <USBD_static_malloc>
 800ad90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d105      	bne.n	800ada4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800ada0:	2302      	movs	r3, #2
 800ada2:	e066      	b.n	800ae72 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	7c1b      	ldrb	r3, [r3, #16]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d119      	bne.n	800ade8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800adb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800adb8:	2202      	movs	r2, #2
 800adba:	2181      	movs	r1, #129	@ 0x81
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f001 ff88 	bl	800ccd2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2201      	movs	r2, #1
 800adc6:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800adc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800adcc:	2202      	movs	r2, #2
 800adce:	2101      	movs	r1, #1
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f001 ff7e 	bl	800ccd2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2201      	movs	r2, #1
 800adda:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2210      	movs	r2, #16
 800ade2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800ade6:	e016      	b.n	800ae16 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ade8:	2340      	movs	r3, #64	@ 0x40
 800adea:	2202      	movs	r2, #2
 800adec:	2181      	movs	r1, #129	@ 0x81
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f001 ff6f 	bl	800ccd2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800adfa:	2340      	movs	r3, #64	@ 0x40
 800adfc:	2202      	movs	r2, #2
 800adfe:	2101      	movs	r1, #1
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f001 ff66 	bl	800ccd2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2210      	movs	r2, #16
 800ae12:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ae16:	2308      	movs	r3, #8
 800ae18:	2203      	movs	r2, #3
 800ae1a:	2182      	movs	r1, #130	@ 0x82
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f001 ff58 	bl	800ccd2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	7c1b      	ldrb	r3, [r3, #16]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d109      	bne.n	800ae60 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae56:	2101      	movs	r1, #1
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f002 f829 	bl	800ceb0 <USBD_LL_PrepareReceive>
 800ae5e:	e007      	b.n	800ae70 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae66:	2340      	movs	r3, #64	@ 0x40
 800ae68:	2101      	movs	r1, #1
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f002 f820 	bl	800ceb0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b082      	sub	sp, #8
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	460b      	mov	r3, r1
 800ae84:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ae86:	2181      	movs	r1, #129	@ 0x81
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f001 ff48 	bl	800cd1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ae94:	2101      	movs	r1, #1
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f001 ff41 	bl	800cd1e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aea4:	2182      	movs	r1, #130	@ 0x82
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f001 ff39 	bl	800cd1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00e      	beq.n	800aee4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aed6:	4618      	mov	r0, r3
 800aed8:	f002 f862 	bl	800cfa0 <USBD_static_free>
    pdev->pClassData = NULL;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
	...

0800aef0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800af02:	2300      	movs	r3, #0
 800af04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800af06:	2300      	movs	r3, #0
 800af08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800af0a:	2300      	movs	r3, #0
 800af0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800af14:	2303      	movs	r3, #3
 800af16:	e0af      	b.n	800b078 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af20:	2b00      	cmp	r3, #0
 800af22:	d03f      	beq.n	800afa4 <USBD_CDC_Setup+0xb4>
 800af24:	2b20      	cmp	r3, #32
 800af26:	f040 809f 	bne.w	800b068 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	88db      	ldrh	r3, [r3, #6]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d02e      	beq.n	800af90 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	b25b      	sxtb	r3, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	da16      	bge.n	800af6a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	683a      	ldr	r2, [r7, #0]
 800af46:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800af48:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af4a:	683a      	ldr	r2, [r7, #0]
 800af4c:	88d2      	ldrh	r2, [r2, #6]
 800af4e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	88db      	ldrh	r3, [r3, #6]
 800af54:	2b07      	cmp	r3, #7
 800af56:	bf28      	it	cs
 800af58:	2307      	movcs	r3, #7
 800af5a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	89fa      	ldrh	r2, [r7, #14]
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f001 facd 	bl	800c502 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800af68:	e085      	b.n	800b076 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	785a      	ldrb	r2, [r3, #1]
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	88db      	ldrh	r3, [r3, #6]
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800af80:	6939      	ldr	r1, [r7, #16]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	88db      	ldrh	r3, [r3, #6]
 800af86:	461a      	mov	r2, r3
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f001 fae6 	bl	800c55a <USBD_CtlPrepareRx>
      break;
 800af8e:	e072      	b.n	800b076 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	683a      	ldr	r2, [r7, #0]
 800af9a:	7850      	ldrb	r0, [r2, #1]
 800af9c:	2200      	movs	r2, #0
 800af9e:	6839      	ldr	r1, [r7, #0]
 800afa0:	4798      	blx	r3
      break;
 800afa2:	e068      	b.n	800b076 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	785b      	ldrb	r3, [r3, #1]
 800afa8:	2b0b      	cmp	r3, #11
 800afaa:	d852      	bhi.n	800b052 <USBD_CDC_Setup+0x162>
 800afac:	a201      	add	r2, pc, #4	@ (adr r2, 800afb4 <USBD_CDC_Setup+0xc4>)
 800afae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb2:	bf00      	nop
 800afb4:	0800afe5 	.word	0x0800afe5
 800afb8:	0800b061 	.word	0x0800b061
 800afbc:	0800b053 	.word	0x0800b053
 800afc0:	0800b053 	.word	0x0800b053
 800afc4:	0800b053 	.word	0x0800b053
 800afc8:	0800b053 	.word	0x0800b053
 800afcc:	0800b053 	.word	0x0800b053
 800afd0:	0800b053 	.word	0x0800b053
 800afd4:	0800b053 	.word	0x0800b053
 800afd8:	0800b053 	.word	0x0800b053
 800afdc:	0800b00f 	.word	0x0800b00f
 800afe0:	0800b039 	.word	0x0800b039
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b03      	cmp	r3, #3
 800afee:	d107      	bne.n	800b000 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aff0:	f107 030a 	add.w	r3, r7, #10
 800aff4:	2202      	movs	r2, #2
 800aff6:	4619      	mov	r1, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f001 fa82 	bl	800c502 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800affe:	e032      	b.n	800b066 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f001 fa0c 	bl	800c420 <USBD_CtlError>
            ret = USBD_FAIL;
 800b008:	2303      	movs	r3, #3
 800b00a:	75fb      	strb	r3, [r7, #23]
          break;
 800b00c:	e02b      	b.n	800b066 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b03      	cmp	r3, #3
 800b018:	d107      	bne.n	800b02a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b01a:	f107 030d 	add.w	r3, r7, #13
 800b01e:	2201      	movs	r2, #1
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f001 fa6d 	bl	800c502 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b028:	e01d      	b.n	800b066 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b02a:	6839      	ldr	r1, [r7, #0]
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f001 f9f7 	bl	800c420 <USBD_CtlError>
            ret = USBD_FAIL;
 800b032:	2303      	movs	r3, #3
 800b034:	75fb      	strb	r3, [r7, #23]
          break;
 800b036:	e016      	b.n	800b066 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	2b03      	cmp	r3, #3
 800b042:	d00f      	beq.n	800b064 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b044:	6839      	ldr	r1, [r7, #0]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f001 f9ea 	bl	800c420 <USBD_CtlError>
            ret = USBD_FAIL;
 800b04c:	2303      	movs	r3, #3
 800b04e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b050:	e008      	b.n	800b064 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f001 f9e3 	bl	800c420 <USBD_CtlError>
          ret = USBD_FAIL;
 800b05a:	2303      	movs	r3, #3
 800b05c:	75fb      	strb	r3, [r7, #23]
          break;
 800b05e:	e002      	b.n	800b066 <USBD_CDC_Setup+0x176>
          break;
 800b060:	bf00      	nop
 800b062:	e008      	b.n	800b076 <USBD_CDC_Setup+0x186>
          break;
 800b064:	bf00      	nop
      }
      break;
 800b066:	e006      	b.n	800b076 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f001 f9d8 	bl	800c420 <USBD_CtlError>
      ret = USBD_FAIL;
 800b070:	2303      	movs	r3, #3
 800b072:	75fb      	strb	r3, [r7, #23]
      break;
 800b074:	bf00      	nop
  }

  return (uint8_t)ret;
 800b076:	7dfb      	ldrb	r3, [r7, #23]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3718      	adds	r7, #24
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b092:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d101      	bne.n	800b0a2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	e04f      	b.n	800b142 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b0a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b0aa:	78fa      	ldrb	r2, [r7, #3]
 800b0ac:	6879      	ldr	r1, [r7, #4]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	440b      	add	r3, r1
 800b0b8:	3318      	adds	r3, #24
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d029      	beq.n	800b114 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b0c0:	78fa      	ldrb	r2, [r7, #3]
 800b0c2:	6879      	ldr	r1, [r7, #4]
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	440b      	add	r3, r1
 800b0ce:	3318      	adds	r3, #24
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	78f9      	ldrb	r1, [r7, #3]
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	440b      	add	r3, r1
 800b0dc:	00db      	lsls	r3, r3, #3
 800b0de:	4403      	add	r3, r0
 800b0e0:	3320      	adds	r3, #32
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0e8:	fb01 f303 	mul.w	r3, r1, r3
 800b0ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d110      	bne.n	800b114 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b0f2:	78fa      	ldrb	r2, [r7, #3]
 800b0f4:	6879      	ldr	r1, [r7, #4]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	4413      	add	r3, r2
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	440b      	add	r3, r1
 800b100:	3318      	adds	r3, #24
 800b102:	2200      	movs	r2, #0
 800b104:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b106:	78f9      	ldrb	r1, [r7, #3]
 800b108:	2300      	movs	r3, #0
 800b10a:	2200      	movs	r2, #0
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f001 feae 	bl	800ce6e <USBD_LL_Transmit>
 800b112:	e015      	b.n	800b140 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	2200      	movs	r2, #0
 800b118:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00b      	beq.n	800b140 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b13c:	78fa      	ldrb	r2, [r7, #3]
 800b13e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b084      	sub	sp, #16
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	460b      	mov	r3, r1
 800b154:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b15c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b164:	2b00      	cmp	r3, #0
 800b166:	d101      	bne.n	800b16c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b168:	2303      	movs	r3, #3
 800b16a:	e015      	b.n	800b198 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b16c:	78fb      	ldrb	r3, [r7, #3]
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f001 febe 	bl	800cef2 <USBD_LL_GetRxDataSize>
 800b176:	4602      	mov	r2, r0
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b192:	4611      	mov	r1, r2
 800b194:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b196:	2300      	movs	r3, #0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d101      	bne.n	800b1ba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	e01a      	b.n	800b1f0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d014      	beq.n	800b1ee <USBD_CDC_EP0_RxReady+0x4e>
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b1ca:	2bff      	cmp	r3, #255	@ 0xff
 800b1cc:	d00f      	beq.n	800b1ee <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800b1dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b1e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	22ff      	movs	r2, #255	@ 0xff
 800b1ea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3710      	adds	r7, #16
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2243      	movs	r2, #67	@ 0x43
 800b204:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b206:	4b03      	ldr	r3, [pc, #12]	@ (800b214 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b208:	4618      	mov	r0, r3
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr
 800b214:	20000094 	.word	0x20000094

0800b218 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2243      	movs	r2, #67	@ 0x43
 800b224:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b226:	4b03      	ldr	r3, [pc, #12]	@ (800b234 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b228:	4618      	mov	r0, r3
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr
 800b234:	20000050 	.word	0x20000050

0800b238 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2243      	movs	r2, #67	@ 0x43
 800b244:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b246:	4b03      	ldr	r3, [pc, #12]	@ (800b254 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b248:	4618      	mov	r0, r3
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr
 800b254:	200000d8 	.word	0x200000d8

0800b258 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	220a      	movs	r2, #10
 800b264:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b266:	4b03      	ldr	r3, [pc, #12]	@ (800b274 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b268:	4618      	mov	r0, r3
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr
 800b274:	2000000c 	.word	0x2000000c

0800b278 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d101      	bne.n	800b28c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b288:	2303      	movs	r3, #3
 800b28a:	e004      	b.n	800b296 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	370c      	adds	r7, #12
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr

0800b2a2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b2a2:	b480      	push	{r7}
 800b2a4:	b087      	sub	sp, #28
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	60f8      	str	r0, [r7, #12]
 800b2aa:	60b9      	str	r1, [r7, #8]
 800b2ac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2b4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	e008      	b.n	800b2d2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	687a      	ldr	r2, [r7, #4]
 800b2cc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	371c      	adds	r7, #28
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b085      	sub	sp, #20
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
 800b2e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d101      	bne.n	800b2fa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e004      	b.n	800b304 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	683a      	ldr	r2, [r7, #0]
 800b2fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b31e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b320:	2301      	movs	r3, #1
 800b322:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d101      	bne.n	800b332 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b32e:	2303      	movs	r3, #3
 800b330:	e01a      	b.n	800b368 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d114      	bne.n	800b366 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	2201      	movs	r2, #1
 800b340:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b35a:	2181      	movs	r1, #129	@ 0x81
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f001 fd86 	bl	800ce6e <USBD_LL_Transmit>

    ret = USBD_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b366:	7bfb      	ldrb	r3, [r7, #15]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b37e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b386:	2b00      	cmp	r3, #0
 800b388:	d101      	bne.n	800b38e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b38a:	2303      	movs	r3, #3
 800b38c:	e016      	b.n	800b3bc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	7c1b      	ldrb	r3, [r3, #16]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d109      	bne.n	800b3aa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b39c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f001 fd84 	bl	800ceb0 <USBD_LL_PrepareReceive>
 800b3a8:	e007      	b.n	800b3ba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3b0:	2340      	movs	r3, #64	@ 0x40
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f001 fd7b 	bl	800ceb0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b086      	sub	sp, #24
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d101      	bne.n	800b3dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	e01f      	b.n	800b41c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d003      	beq.n	800b402 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2201      	movs	r2, #1
 800b406:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	79fa      	ldrb	r2, [r7, #7]
 800b40e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f001 fbe3 	bl	800cbdc <USBD_LL_Init>
 800b416:	4603      	mov	r3, r0
 800b418:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b41a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3718      	adds	r7, #24
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b42e:	2300      	movs	r3, #0
 800b430:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b438:	2303      	movs	r3, #3
 800b43a:	e016      	b.n	800b46a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	683a      	ldr	r2, [r7, #0]
 800b440:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00b      	beq.n	800b468 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b458:	f107 020e 	add.w	r2, r7, #14
 800b45c:	4610      	mov	r0, r2
 800b45e:	4798      	blx	r3
 800b460:	4602      	mov	r2, r0
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b082      	sub	sp, #8
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f001 fc0e 	bl	800cc9c <USBD_LL_Start>
 800b480:	4603      	mov	r3, r0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b083      	sub	sp, #12
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d009      	beq.n	800b4ce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	78fa      	ldrb	r2, [r7, #3]
 800b4c4:	4611      	mov	r1, r2
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	4798      	blx	r3
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d007      	beq.n	800b4fe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	78fa      	ldrb	r2, [r7, #3]
 800b4f8:	4611      	mov	r1, r2
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	4798      	blx	r3
  }

  return USBD_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b518:	6839      	ldr	r1, [r7, #0]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f000 ff46 	bl	800c3ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b52e:	461a      	mov	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b53c:	f003 031f 	and.w	r3, r3, #31
 800b540:	2b02      	cmp	r3, #2
 800b542:	d01a      	beq.n	800b57a <USBD_LL_SetupStage+0x72>
 800b544:	2b02      	cmp	r3, #2
 800b546:	d822      	bhi.n	800b58e <USBD_LL_SetupStage+0x86>
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d002      	beq.n	800b552 <USBD_LL_SetupStage+0x4a>
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d00a      	beq.n	800b566 <USBD_LL_SetupStage+0x5e>
 800b550:	e01d      	b.n	800b58e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b558:	4619      	mov	r1, r3
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 f9ee 	bl	800b93c <USBD_StdDevReq>
 800b560:	4603      	mov	r3, r0
 800b562:	73fb      	strb	r3, [r7, #15]
      break;
 800b564:	e020      	b.n	800b5a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b56c:	4619      	mov	r1, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 fa52 	bl	800ba18 <USBD_StdItfReq>
 800b574:	4603      	mov	r3, r0
 800b576:	73fb      	strb	r3, [r7, #15]
      break;
 800b578:	e016      	b.n	800b5a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b580:	4619      	mov	r1, r3
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fa91 	bl	800baaa <USBD_StdEPReq>
 800b588:	4603      	mov	r3, r0
 800b58a:	73fb      	strb	r3, [r7, #15]
      break;
 800b58c:	e00c      	b.n	800b5a8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b594:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	4619      	mov	r1, r3
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f001 fbdd 	bl	800cd5c <USBD_LL_StallEP>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	73fb      	strb	r3, [r7, #15]
      break;
 800b5a6:	bf00      	nop
  }

  return ret;
 800b5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b086      	sub	sp, #24
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	60f8      	str	r0, [r7, #12]
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	607a      	str	r2, [r7, #4]
 800b5be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b5c0:	7afb      	ldrb	r3, [r7, #11]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d138      	bne.n	800b638 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b5cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b5d4:	2b03      	cmp	r3, #3
 800b5d6:	d14a      	bne.n	800b66e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	689a      	ldr	r2, [r3, #8]
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d913      	bls.n	800b60c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	689a      	ldr	r2, [r3, #8]
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	1ad2      	subs	r2, r2, r3
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	68da      	ldr	r2, [r3, #12]
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	bf28      	it	cs
 800b5fe:	4613      	movcs	r3, r2
 800b600:	461a      	mov	r2, r3
 800b602:	6879      	ldr	r1, [r7, #4]
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f000 ffc5 	bl	800c594 <USBD_CtlContinueRx>
 800b60a:	e030      	b.n	800b66e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b612:	b2db      	uxtb	r3, r3
 800b614:	2b03      	cmp	r3, #3
 800b616:	d10b      	bne.n	800b630 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b61e:	691b      	ldr	r3, [r3, #16]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d005      	beq.n	800b630 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f000 ffc0 	bl	800c5b6 <USBD_CtlSendStatus>
 800b636:	e01a      	b.n	800b66e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	2b03      	cmp	r3, #3
 800b642:	d114      	bne.n	800b66e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b64a:	699b      	ldr	r3, [r3, #24]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00e      	beq.n	800b66e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	7afa      	ldrb	r2, [r7, #11]
 800b65a:	4611      	mov	r1, r2
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	4798      	blx	r3
 800b660:	4603      	mov	r3, r0
 800b662:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b664:	7dfb      	ldrb	r3, [r7, #23]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d001      	beq.n	800b66e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b66a:	7dfb      	ldrb	r3, [r7, #23]
 800b66c:	e000      	b.n	800b670 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	3718      	adds	r7, #24
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	460b      	mov	r3, r1
 800b682:	607a      	str	r2, [r7, #4]
 800b684:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b686:	7afb      	ldrb	r3, [r7, #11]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d16b      	bne.n	800b764 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	3314      	adds	r3, #20
 800b690:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b698:	2b02      	cmp	r3, #2
 800b69a:	d156      	bne.n	800b74a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	689a      	ldr	r2, [r3, #8]
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d914      	bls.n	800b6d2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	689a      	ldr	r2, [r3, #8]
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	1ad2      	subs	r2, r2, r3
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	6879      	ldr	r1, [r7, #4]
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f000 ff3a 	bl	800c538 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f001 fbf0 	bl	800ceb0 <USBD_LL_PrepareReceive>
 800b6d0:	e03b      	b.n	800b74a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	68da      	ldr	r2, [r3, #12]
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d11c      	bne.n	800b718 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	685a      	ldr	r2, [r3, #4]
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d316      	bcc.n	800b718 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d20f      	bcs.n	800b718 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f000 ff1b 	bl	800c538 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2200      	movs	r2, #0
 800b706:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b70a:	2300      	movs	r3, #0
 800b70c:	2200      	movs	r2, #0
 800b70e:	2100      	movs	r1, #0
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f001 fbcd 	bl	800ceb0 <USBD_LL_PrepareReceive>
 800b716:	e018      	b.n	800b74a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	2b03      	cmp	r3, #3
 800b722:	d10b      	bne.n	800b73c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d005      	beq.n	800b73c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b73c:	2180      	movs	r1, #128	@ 0x80
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f001 fb0c 	bl	800cd5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f000 ff49 	bl	800c5dc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b750:	2b01      	cmp	r3, #1
 800b752:	d122      	bne.n	800b79a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f7ff fe98 	bl	800b48a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b762:	e01a      	b.n	800b79a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	2b03      	cmp	r3, #3
 800b76e:	d114      	bne.n	800b79a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b776:	695b      	ldr	r3, [r3, #20]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00e      	beq.n	800b79a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b782:	695b      	ldr	r3, [r3, #20]
 800b784:	7afa      	ldrb	r2, [r7, #11]
 800b786:	4611      	mov	r1, r2
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	4798      	blx	r3
 800b78c:	4603      	mov	r3, r0
 800b78e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b790:	7dfb      	ldrb	r3, [r7, #23]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b796:	7dfb      	ldrb	r3, [r7, #23]
 800b798:	e000      	b.n	800b79c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3718      	adds	r7, #24
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d101      	bne.n	800b7d8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	e02f      	b.n	800b838 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00f      	beq.n	800b802 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d009      	beq.n	800b802 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	6852      	ldr	r2, [r2, #4]
 800b7fa:	b2d2      	uxtb	r2, r2
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b802:	2340      	movs	r3, #64	@ 0x40
 800b804:	2200      	movs	r2, #0
 800b806:	2100      	movs	r1, #0
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f001 fa62 	bl	800ccd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2201      	movs	r2, #1
 800b812:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2240      	movs	r2, #64	@ 0x40
 800b81a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b81e:	2340      	movs	r3, #64	@ 0x40
 800b820:	2200      	movs	r2, #0
 800b822:	2180      	movs	r1, #128	@ 0x80
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f001 fa54 	bl	800ccd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2201      	movs	r2, #1
 800b82e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2240      	movs	r2, #64	@ 0x40
 800b834:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	460b      	mov	r3, r1
 800b84a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	78fa      	ldrb	r2, [r7, #3]
 800b850:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	370c      	adds	r7, #12
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b860:	b480      	push	{r7}
 800b862:	b083      	sub	sp, #12
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b86e:	b2da      	uxtb	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2204      	movs	r2, #4
 800b87a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	2b04      	cmp	r3, #4
 800b89e:	d106      	bne.n	800b8ae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b8a6:	b2da      	uxtb	r2, r3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d101      	bne.n	800b8d2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b8ce:	2303      	movs	r3, #3
 800b8d0:	e012      	b.n	800b8f8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	2b03      	cmp	r3, #3
 800b8dc:	d10b      	bne.n	800b8f6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8e4:	69db      	ldr	r3, [r3, #28]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d005      	beq.n	800b8f6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8f0:	69db      	ldr	r3, [r3, #28]
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3708      	adds	r7, #8
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b900:	b480      	push	{r7}
 800b902:	b087      	sub	sp, #28
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	3301      	adds	r3, #1
 800b916:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b91e:	8a3b      	ldrh	r3, [r7, #16]
 800b920:	021b      	lsls	r3, r3, #8
 800b922:	b21a      	sxth	r2, r3
 800b924:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b928:	4313      	orrs	r3, r2
 800b92a:	b21b      	sxth	r3, r3
 800b92c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b92e:	89fb      	ldrh	r3, [r7, #14]
}
 800b930:	4618      	mov	r0, r3
 800b932:	371c      	adds	r7, #28
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b952:	2b40      	cmp	r3, #64	@ 0x40
 800b954:	d005      	beq.n	800b962 <USBD_StdDevReq+0x26>
 800b956:	2b40      	cmp	r3, #64	@ 0x40
 800b958:	d853      	bhi.n	800ba02 <USBD_StdDevReq+0xc6>
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00b      	beq.n	800b976 <USBD_StdDevReq+0x3a>
 800b95e:	2b20      	cmp	r3, #32
 800b960:	d14f      	bne.n	800ba02 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	6839      	ldr	r1, [r7, #0]
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	4798      	blx	r3
 800b970:	4603      	mov	r3, r0
 800b972:	73fb      	strb	r3, [r7, #15]
      break;
 800b974:	e04a      	b.n	800ba0c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	785b      	ldrb	r3, [r3, #1]
 800b97a:	2b09      	cmp	r3, #9
 800b97c:	d83b      	bhi.n	800b9f6 <USBD_StdDevReq+0xba>
 800b97e:	a201      	add	r2, pc, #4	@ (adr r2, 800b984 <USBD_StdDevReq+0x48>)
 800b980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b984:	0800b9d9 	.word	0x0800b9d9
 800b988:	0800b9ed 	.word	0x0800b9ed
 800b98c:	0800b9f7 	.word	0x0800b9f7
 800b990:	0800b9e3 	.word	0x0800b9e3
 800b994:	0800b9f7 	.word	0x0800b9f7
 800b998:	0800b9b7 	.word	0x0800b9b7
 800b99c:	0800b9ad 	.word	0x0800b9ad
 800b9a0:	0800b9f7 	.word	0x0800b9f7
 800b9a4:	0800b9cf 	.word	0x0800b9cf
 800b9a8:	0800b9c1 	.word	0x0800b9c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b9ac:	6839      	ldr	r1, [r7, #0]
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f9de 	bl	800bd70 <USBD_GetDescriptor>
          break;
 800b9b4:	e024      	b.n	800ba00 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b9b6:	6839      	ldr	r1, [r7, #0]
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 fb6d 	bl	800c098 <USBD_SetAddress>
          break;
 800b9be:	e01f      	b.n	800ba00 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fbac 	bl	800c120 <USBD_SetConfig>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	73fb      	strb	r3, [r7, #15]
          break;
 800b9cc:	e018      	b.n	800ba00 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 fc4b 	bl	800c26c <USBD_GetConfig>
          break;
 800b9d6:	e013      	b.n	800ba00 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b9d8:	6839      	ldr	r1, [r7, #0]
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 fc7c 	bl	800c2d8 <USBD_GetStatus>
          break;
 800b9e0:	e00e      	b.n	800ba00 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b9e2:	6839      	ldr	r1, [r7, #0]
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 fcab 	bl	800c340 <USBD_SetFeature>
          break;
 800b9ea:	e009      	b.n	800ba00 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b9ec:	6839      	ldr	r1, [r7, #0]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fcba 	bl	800c368 <USBD_ClrFeature>
          break;
 800b9f4:	e004      	b.n	800ba00 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fd11 	bl	800c420 <USBD_CtlError>
          break;
 800b9fe:	bf00      	nop
      }
      break;
 800ba00:	e004      	b.n	800ba0c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ba02:	6839      	ldr	r1, [r7, #0]
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 fd0b 	bl	800c420 <USBD_CtlError>
      break;
 800ba0a:	bf00      	nop
  }

  return ret;
 800ba0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop

0800ba18 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba22:	2300      	movs	r3, #0
 800ba24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba2e:	2b40      	cmp	r3, #64	@ 0x40
 800ba30:	d005      	beq.n	800ba3e <USBD_StdItfReq+0x26>
 800ba32:	2b40      	cmp	r3, #64	@ 0x40
 800ba34:	d82f      	bhi.n	800ba96 <USBD_StdItfReq+0x7e>
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d001      	beq.n	800ba3e <USBD_StdItfReq+0x26>
 800ba3a:	2b20      	cmp	r3, #32
 800ba3c:	d12b      	bne.n	800ba96 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	3b01      	subs	r3, #1
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d81d      	bhi.n	800ba88 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	889b      	ldrh	r3, [r3, #4]
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d813      	bhi.n	800ba7e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	4798      	blx	r3
 800ba64:	4603      	mov	r3, r0
 800ba66:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	88db      	ldrh	r3, [r3, #6]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d110      	bne.n	800ba92 <USBD_StdItfReq+0x7a>
 800ba70:	7bfb      	ldrb	r3, [r7, #15]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10d      	bne.n	800ba92 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 fd9d 	bl	800c5b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ba7c:	e009      	b.n	800ba92 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ba7e:	6839      	ldr	r1, [r7, #0]
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fccd 	bl	800c420 <USBD_CtlError>
          break;
 800ba86:	e004      	b.n	800ba92 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ba88:	6839      	ldr	r1, [r7, #0]
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 fcc8 	bl	800c420 <USBD_CtlError>
          break;
 800ba90:	e000      	b.n	800ba94 <USBD_StdItfReq+0x7c>
          break;
 800ba92:	bf00      	nop
      }
      break;
 800ba94:	e004      	b.n	800baa0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fcc1 	bl	800c420 <USBD_CtlError>
      break;
 800ba9e:	bf00      	nop
  }

  return ret;
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b084      	sub	sp, #16
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bab4:	2300      	movs	r3, #0
 800bab6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	889b      	ldrh	r3, [r3, #4]
 800babc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bac6:	2b40      	cmp	r3, #64	@ 0x40
 800bac8:	d007      	beq.n	800bada <USBD_StdEPReq+0x30>
 800baca:	2b40      	cmp	r3, #64	@ 0x40
 800bacc:	f200 8145 	bhi.w	800bd5a <USBD_StdEPReq+0x2b0>
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d00c      	beq.n	800baee <USBD_StdEPReq+0x44>
 800bad4:	2b20      	cmp	r3, #32
 800bad6:	f040 8140 	bne.w	800bd5a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	6839      	ldr	r1, [r7, #0]
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	4798      	blx	r3
 800bae8:	4603      	mov	r3, r0
 800baea:	73fb      	strb	r3, [r7, #15]
      break;
 800baec:	e13a      	b.n	800bd64 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	785b      	ldrb	r3, [r3, #1]
 800baf2:	2b03      	cmp	r3, #3
 800baf4:	d007      	beq.n	800bb06 <USBD_StdEPReq+0x5c>
 800baf6:	2b03      	cmp	r3, #3
 800baf8:	f300 8129 	bgt.w	800bd4e <USBD_StdEPReq+0x2a4>
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d07f      	beq.n	800bc00 <USBD_StdEPReq+0x156>
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d03c      	beq.n	800bb7e <USBD_StdEPReq+0xd4>
 800bb04:	e123      	b.n	800bd4e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	2b02      	cmp	r3, #2
 800bb10:	d002      	beq.n	800bb18 <USBD_StdEPReq+0x6e>
 800bb12:	2b03      	cmp	r3, #3
 800bb14:	d016      	beq.n	800bb44 <USBD_StdEPReq+0x9a>
 800bb16:	e02c      	b.n	800bb72 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00d      	beq.n	800bb3a <USBD_StdEPReq+0x90>
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	2b80      	cmp	r3, #128	@ 0x80
 800bb22:	d00a      	beq.n	800bb3a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb24:	7bbb      	ldrb	r3, [r7, #14]
 800bb26:	4619      	mov	r1, r3
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f001 f917 	bl	800cd5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb2e:	2180      	movs	r1, #128	@ 0x80
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f001 f913 	bl	800cd5c <USBD_LL_StallEP>
 800bb36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb38:	e020      	b.n	800bb7c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bb3a:	6839      	ldr	r1, [r7, #0]
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 fc6f 	bl	800c420 <USBD_CtlError>
              break;
 800bb42:	e01b      	b.n	800bb7c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	885b      	ldrh	r3, [r3, #2]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10e      	bne.n	800bb6a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bb4c:	7bbb      	ldrb	r3, [r7, #14]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00b      	beq.n	800bb6a <USBD_StdEPReq+0xc0>
 800bb52:	7bbb      	ldrb	r3, [r7, #14]
 800bb54:	2b80      	cmp	r3, #128	@ 0x80
 800bb56:	d008      	beq.n	800bb6a <USBD_StdEPReq+0xc0>
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	88db      	ldrh	r3, [r3, #6]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d104      	bne.n	800bb6a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb60:	7bbb      	ldrb	r3, [r7, #14]
 800bb62:	4619      	mov	r1, r3
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f001 f8f9 	bl	800cd5c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fd23 	bl	800c5b6 <USBD_CtlSendStatus>

              break;
 800bb70:	e004      	b.n	800bb7c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bb72:	6839      	ldr	r1, [r7, #0]
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 fc53 	bl	800c420 <USBD_CtlError>
              break;
 800bb7a:	bf00      	nop
          }
          break;
 800bb7c:	e0ec      	b.n	800bd58 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	2b02      	cmp	r3, #2
 800bb88:	d002      	beq.n	800bb90 <USBD_StdEPReq+0xe6>
 800bb8a:	2b03      	cmp	r3, #3
 800bb8c:	d016      	beq.n	800bbbc <USBD_StdEPReq+0x112>
 800bb8e:	e030      	b.n	800bbf2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb90:	7bbb      	ldrb	r3, [r7, #14]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00d      	beq.n	800bbb2 <USBD_StdEPReq+0x108>
 800bb96:	7bbb      	ldrb	r3, [r7, #14]
 800bb98:	2b80      	cmp	r3, #128	@ 0x80
 800bb9a:	d00a      	beq.n	800bbb2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb9c:	7bbb      	ldrb	r3, [r7, #14]
 800bb9e:	4619      	mov	r1, r3
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f001 f8db 	bl	800cd5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bba6:	2180      	movs	r1, #128	@ 0x80
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f001 f8d7 	bl	800cd5c <USBD_LL_StallEP>
 800bbae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bbb0:	e025      	b.n	800bbfe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bbb2:	6839      	ldr	r1, [r7, #0]
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fc33 	bl	800c420 <USBD_CtlError>
              break;
 800bbba:	e020      	b.n	800bbfe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	885b      	ldrh	r3, [r3, #2]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d11b      	bne.n	800bbfc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bbc4:	7bbb      	ldrb	r3, [r7, #14]
 800bbc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d004      	beq.n	800bbd8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bbce:	7bbb      	ldrb	r3, [r7, #14]
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f001 f8e1 	bl	800cd9a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 fcec 	bl	800c5b6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	4798      	blx	r3
 800bbec:	4603      	mov	r3, r0
 800bbee:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bbf0:	e004      	b.n	800bbfc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bbf2:	6839      	ldr	r1, [r7, #0]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 fc13 	bl	800c420 <USBD_CtlError>
              break;
 800bbfa:	e000      	b.n	800bbfe <USBD_StdEPReq+0x154>
              break;
 800bbfc:	bf00      	nop
          }
          break;
 800bbfe:	e0ab      	b.n	800bd58 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d002      	beq.n	800bc12 <USBD_StdEPReq+0x168>
 800bc0c:	2b03      	cmp	r3, #3
 800bc0e:	d032      	beq.n	800bc76 <USBD_StdEPReq+0x1cc>
 800bc10:	e097      	b.n	800bd42 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc12:	7bbb      	ldrb	r3, [r7, #14]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d007      	beq.n	800bc28 <USBD_StdEPReq+0x17e>
 800bc18:	7bbb      	ldrb	r3, [r7, #14]
 800bc1a:	2b80      	cmp	r3, #128	@ 0x80
 800bc1c:	d004      	beq.n	800bc28 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fbfd 	bl	800c420 <USBD_CtlError>
                break;
 800bc26:	e091      	b.n	800bd4c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	da0b      	bge.n	800bc48 <USBD_StdEPReq+0x19e>
 800bc30:	7bbb      	ldrb	r3, [r7, #14]
 800bc32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc36:	4613      	mov	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	4413      	add	r3, r2
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	3310      	adds	r3, #16
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	4413      	add	r3, r2
 800bc44:	3304      	adds	r3, #4
 800bc46:	e00b      	b.n	800bc60 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc48:	7bbb      	ldrb	r3, [r7, #14]
 800bc4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc4e:	4613      	mov	r3, r2
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	4413      	add	r3, r2
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	3304      	adds	r3, #4
 800bc60:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	2200      	movs	r2, #0
 800bc66:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	2202      	movs	r2, #2
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 fc47 	bl	800c502 <USBD_CtlSendData>
              break;
 800bc74:	e06a      	b.n	800bd4c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bc76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	da11      	bge.n	800bca2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc7e:	7bbb      	ldrb	r3, [r7, #14]
 800bc80:	f003 020f 	and.w	r2, r3, #15
 800bc84:	6879      	ldr	r1, [r7, #4]
 800bc86:	4613      	mov	r3, r2
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	4413      	add	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	440b      	add	r3, r1
 800bc90:	3324      	adds	r3, #36	@ 0x24
 800bc92:	881b      	ldrh	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d117      	bne.n	800bcc8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bc98:	6839      	ldr	r1, [r7, #0]
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 fbc0 	bl	800c420 <USBD_CtlError>
                  break;
 800bca0:	e054      	b.n	800bd4c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bca2:	7bbb      	ldrb	r3, [r7, #14]
 800bca4:	f003 020f 	and.w	r2, r3, #15
 800bca8:	6879      	ldr	r1, [r7, #4]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4413      	add	r3, r2
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	440b      	add	r3, r1
 800bcb4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bcb8:	881b      	ldrh	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d104      	bne.n	800bcc8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bcbe:	6839      	ldr	r1, [r7, #0]
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 fbad 	bl	800c420 <USBD_CtlError>
                  break;
 800bcc6:	e041      	b.n	800bd4c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	da0b      	bge.n	800bce8 <USBD_StdEPReq+0x23e>
 800bcd0:	7bbb      	ldrb	r3, [r7, #14]
 800bcd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	4413      	add	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	3310      	adds	r3, #16
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	4413      	add	r3, r2
 800bce4:	3304      	adds	r3, #4
 800bce6:	e00b      	b.n	800bd00 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bce8:	7bbb      	ldrb	r3, [r7, #14]
 800bcea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcee:	4613      	mov	r3, r2
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	4413      	add	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	3304      	adds	r3, #4
 800bd00:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd02:	7bbb      	ldrb	r3, [r7, #14]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d002      	beq.n	800bd0e <USBD_StdEPReq+0x264>
 800bd08:	7bbb      	ldrb	r3, [r7, #14]
 800bd0a:	2b80      	cmp	r3, #128	@ 0x80
 800bd0c:	d103      	bne.n	800bd16 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	2200      	movs	r2, #0
 800bd12:	601a      	str	r2, [r3, #0]
 800bd14:	e00e      	b.n	800bd34 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bd16:	7bbb      	ldrb	r3, [r7, #14]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f001 f85c 	bl	800cdd8 <USBD_LL_IsStallEP>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d003      	beq.n	800bd2e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	2201      	movs	r2, #1
 800bd2a:	601a      	str	r2, [r3, #0]
 800bd2c:	e002      	b.n	800bd34 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	2200      	movs	r2, #0
 800bd32:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	2202      	movs	r2, #2
 800bd38:	4619      	mov	r1, r3
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 fbe1 	bl	800c502 <USBD_CtlSendData>
              break;
 800bd40:	e004      	b.n	800bd4c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bd42:	6839      	ldr	r1, [r7, #0]
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 fb6b 	bl	800c420 <USBD_CtlError>
              break;
 800bd4a:	bf00      	nop
          }
          break;
 800bd4c:	e004      	b.n	800bd58 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bd4e:	6839      	ldr	r1, [r7, #0]
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 fb65 	bl	800c420 <USBD_CtlError>
          break;
 800bd56:	bf00      	nop
      }
      break;
 800bd58:	e004      	b.n	800bd64 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bd5a:	6839      	ldr	r1, [r7, #0]
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 fb5f 	bl	800c420 <USBD_CtlError>
      break;
 800bd62:	bf00      	nop
  }

  return ret;
 800bd64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
	...

0800bd70 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd82:	2300      	movs	r3, #0
 800bd84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	885b      	ldrh	r3, [r3, #2]
 800bd8a:	0a1b      	lsrs	r3, r3, #8
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	2b0e      	cmp	r3, #14
 800bd92:	f200 8152 	bhi.w	800c03a <USBD_GetDescriptor+0x2ca>
 800bd96:	a201      	add	r2, pc, #4	@ (adr r2, 800bd9c <USBD_GetDescriptor+0x2c>)
 800bd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd9c:	0800be0d 	.word	0x0800be0d
 800bda0:	0800be25 	.word	0x0800be25
 800bda4:	0800be65 	.word	0x0800be65
 800bda8:	0800c03b 	.word	0x0800c03b
 800bdac:	0800c03b 	.word	0x0800c03b
 800bdb0:	0800bfdb 	.word	0x0800bfdb
 800bdb4:	0800c007 	.word	0x0800c007
 800bdb8:	0800c03b 	.word	0x0800c03b
 800bdbc:	0800c03b 	.word	0x0800c03b
 800bdc0:	0800c03b 	.word	0x0800c03b
 800bdc4:	0800c03b 	.word	0x0800c03b
 800bdc8:	0800c03b 	.word	0x0800c03b
 800bdcc:	0800c03b 	.word	0x0800c03b
 800bdd0:	0800c03b 	.word	0x0800c03b
 800bdd4:	0800bdd9 	.word	0x0800bdd9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdde:	69db      	ldr	r3, [r3, #28]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00b      	beq.n	800bdfc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdea:	69db      	ldr	r3, [r3, #28]
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	7c12      	ldrb	r2, [r2, #16]
 800bdf0:	f107 0108 	add.w	r1, r7, #8
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	4798      	blx	r3
 800bdf8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdfa:	e126      	b.n	800c04a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 fb0e 	bl	800c420 <USBD_CtlError>
        err++;
 800be04:	7afb      	ldrb	r3, [r7, #11]
 800be06:	3301      	adds	r3, #1
 800be08:	72fb      	strb	r3, [r7, #11]
      break;
 800be0a:	e11e      	b.n	800c04a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	7c12      	ldrb	r2, [r2, #16]
 800be18:	f107 0108 	add.w	r1, r7, #8
 800be1c:	4610      	mov	r0, r2
 800be1e:	4798      	blx	r3
 800be20:	60f8      	str	r0, [r7, #12]
      break;
 800be22:	e112      	b.n	800c04a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	7c1b      	ldrb	r3, [r3, #16]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10d      	bne.n	800be48 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be34:	f107 0208 	add.w	r2, r7, #8
 800be38:	4610      	mov	r0, r2
 800be3a:	4798      	blx	r3
 800be3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	3301      	adds	r3, #1
 800be42:	2202      	movs	r2, #2
 800be44:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be46:	e100      	b.n	800c04a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be50:	f107 0208 	add.w	r2, r7, #8
 800be54:	4610      	mov	r0, r2
 800be56:	4798      	blx	r3
 800be58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	3301      	adds	r3, #1
 800be5e:	2202      	movs	r2, #2
 800be60:	701a      	strb	r2, [r3, #0]
      break;
 800be62:	e0f2      	b.n	800c04a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	885b      	ldrh	r3, [r3, #2]
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b05      	cmp	r3, #5
 800be6c:	f200 80ac 	bhi.w	800bfc8 <USBD_GetDescriptor+0x258>
 800be70:	a201      	add	r2, pc, #4	@ (adr r2, 800be78 <USBD_GetDescriptor+0x108>)
 800be72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be76:	bf00      	nop
 800be78:	0800be91 	.word	0x0800be91
 800be7c:	0800bec5 	.word	0x0800bec5
 800be80:	0800bef9 	.word	0x0800bef9
 800be84:	0800bf2d 	.word	0x0800bf2d
 800be88:	0800bf61 	.word	0x0800bf61
 800be8c:	0800bf95 	.word	0x0800bf95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00b      	beq.n	800beb4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	7c12      	ldrb	r2, [r2, #16]
 800bea8:	f107 0108 	add.w	r1, r7, #8
 800beac:	4610      	mov	r0, r2
 800beae:	4798      	blx	r3
 800beb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800beb2:	e091      	b.n	800bfd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800beb4:	6839      	ldr	r1, [r7, #0]
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 fab2 	bl	800c420 <USBD_CtlError>
            err++;
 800bebc:	7afb      	ldrb	r3, [r7, #11]
 800bebe:	3301      	adds	r3, #1
 800bec0:	72fb      	strb	r3, [r7, #11]
          break;
 800bec2:	e089      	b.n	800bfd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d00b      	beq.n	800bee8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	7c12      	ldrb	r2, [r2, #16]
 800bedc:	f107 0108 	add.w	r1, r7, #8
 800bee0:	4610      	mov	r0, r2
 800bee2:	4798      	blx	r3
 800bee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bee6:	e077      	b.n	800bfd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bee8:	6839      	ldr	r1, [r7, #0]
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fa98 	bl	800c420 <USBD_CtlError>
            err++;
 800bef0:	7afb      	ldrb	r3, [r7, #11]
 800bef2:	3301      	adds	r3, #1
 800bef4:	72fb      	strb	r3, [r7, #11]
          break;
 800bef6:	e06f      	b.n	800bfd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00b      	beq.n	800bf1c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	7c12      	ldrb	r2, [r2, #16]
 800bf10:	f107 0108 	add.w	r1, r7, #8
 800bf14:	4610      	mov	r0, r2
 800bf16:	4798      	blx	r3
 800bf18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf1a:	e05d      	b.n	800bfd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf1c:	6839      	ldr	r1, [r7, #0]
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 fa7e 	bl	800c420 <USBD_CtlError>
            err++;
 800bf24:	7afb      	ldrb	r3, [r7, #11]
 800bf26:	3301      	adds	r3, #1
 800bf28:	72fb      	strb	r3, [r7, #11]
          break;
 800bf2a:	e055      	b.n	800bfd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00b      	beq.n	800bf50 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	7c12      	ldrb	r2, [r2, #16]
 800bf44:	f107 0108 	add.w	r1, r7, #8
 800bf48:	4610      	mov	r0, r2
 800bf4a:	4798      	blx	r3
 800bf4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf4e:	e043      	b.n	800bfd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fa64 	bl	800c420 <USBD_CtlError>
            err++;
 800bf58:	7afb      	ldrb	r3, [r7, #11]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf5e:	e03b      	b.n	800bfd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf66:	695b      	ldr	r3, [r3, #20]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00b      	beq.n	800bf84 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf72:	695b      	ldr	r3, [r3, #20]
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	7c12      	ldrb	r2, [r2, #16]
 800bf78:	f107 0108 	add.w	r1, r7, #8
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	4798      	blx	r3
 800bf80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf82:	e029      	b.n	800bfd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf84:	6839      	ldr	r1, [r7, #0]
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 fa4a 	bl	800c420 <USBD_CtlError>
            err++;
 800bf8c:	7afb      	ldrb	r3, [r7, #11]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	72fb      	strb	r3, [r7, #11]
          break;
 800bf92:	e021      	b.n	800bfd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf9a:	699b      	ldr	r3, [r3, #24]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d00b      	beq.n	800bfb8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfa6:	699b      	ldr	r3, [r3, #24]
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	7c12      	ldrb	r2, [r2, #16]
 800bfac:	f107 0108 	add.w	r1, r7, #8
 800bfb0:	4610      	mov	r0, r2
 800bfb2:	4798      	blx	r3
 800bfb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfb6:	e00f      	b.n	800bfd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bfb8:	6839      	ldr	r1, [r7, #0]
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 fa30 	bl	800c420 <USBD_CtlError>
            err++;
 800bfc0:	7afb      	ldrb	r3, [r7, #11]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	72fb      	strb	r3, [r7, #11]
          break;
 800bfc6:	e007      	b.n	800bfd8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bfc8:	6839      	ldr	r1, [r7, #0]
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fa28 	bl	800c420 <USBD_CtlError>
          err++;
 800bfd0:	7afb      	ldrb	r3, [r7, #11]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bfd6:	bf00      	nop
      }
      break;
 800bfd8:	e037      	b.n	800c04a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	7c1b      	ldrb	r3, [r3, #16]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d109      	bne.n	800bff6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfea:	f107 0208 	add.w	r2, r7, #8
 800bfee:	4610      	mov	r0, r2
 800bff0:	4798      	blx	r3
 800bff2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bff4:	e029      	b.n	800c04a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bff6:	6839      	ldr	r1, [r7, #0]
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 fa11 	bl	800c420 <USBD_CtlError>
        err++;
 800bffe:	7afb      	ldrb	r3, [r7, #11]
 800c000:	3301      	adds	r3, #1
 800c002:	72fb      	strb	r3, [r7, #11]
      break;
 800c004:	e021      	b.n	800c04a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	7c1b      	ldrb	r3, [r3, #16]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10d      	bne.n	800c02a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c016:	f107 0208 	add.w	r2, r7, #8
 800c01a:	4610      	mov	r0, r2
 800c01c:	4798      	blx	r3
 800c01e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	3301      	adds	r3, #1
 800c024:	2207      	movs	r2, #7
 800c026:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c028:	e00f      	b.n	800c04a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c02a:	6839      	ldr	r1, [r7, #0]
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 f9f7 	bl	800c420 <USBD_CtlError>
        err++;
 800c032:	7afb      	ldrb	r3, [r7, #11]
 800c034:	3301      	adds	r3, #1
 800c036:	72fb      	strb	r3, [r7, #11]
      break;
 800c038:	e007      	b.n	800c04a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 f9ef 	bl	800c420 <USBD_CtlError>
      err++;
 800c042:	7afb      	ldrb	r3, [r7, #11]
 800c044:	3301      	adds	r3, #1
 800c046:	72fb      	strb	r3, [r7, #11]
      break;
 800c048:	bf00      	nop
  }

  if (err != 0U)
 800c04a:	7afb      	ldrb	r3, [r7, #11]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d11e      	bne.n	800c08e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	88db      	ldrh	r3, [r3, #6]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d016      	beq.n	800c086 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c058:	893b      	ldrh	r3, [r7, #8]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00e      	beq.n	800c07c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	88da      	ldrh	r2, [r3, #6]
 800c062:	893b      	ldrh	r3, [r7, #8]
 800c064:	4293      	cmp	r3, r2
 800c066:	bf28      	it	cs
 800c068:	4613      	movcs	r3, r2
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c06e:	893b      	ldrh	r3, [r7, #8]
 800c070:	461a      	mov	r2, r3
 800c072:	68f9      	ldr	r1, [r7, #12]
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fa44 	bl	800c502 <USBD_CtlSendData>
 800c07a:	e009      	b.n	800c090 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 f9ce 	bl	800c420 <USBD_CtlError>
 800c084:	e004      	b.n	800c090 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 fa95 	bl	800c5b6 <USBD_CtlSendStatus>
 800c08c:	e000      	b.n	800c090 <USBD_GetDescriptor+0x320>
    return;
 800c08e:	bf00      	nop
  }
}
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop

0800c098 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	889b      	ldrh	r3, [r3, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d131      	bne.n	800c10e <USBD_SetAddress+0x76>
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	88db      	ldrh	r3, [r3, #6]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d12d      	bne.n	800c10e <USBD_SetAddress+0x76>
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	885b      	ldrh	r3, [r3, #2]
 800c0b6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c0b8:	d829      	bhi.n	800c10e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	885b      	ldrh	r3, [r3, #2]
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	2b03      	cmp	r3, #3
 800c0d0:	d104      	bne.n	800c0dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f9a3 	bl	800c420 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0da:	e01d      	b.n	800c118 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	7bfa      	ldrb	r2, [r7, #15]
 800c0e0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c0e4:	7bfb      	ldrb	r3, [r7, #15]
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 fea1 	bl	800ce30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f000 fa61 	bl	800c5b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c0f4:	7bfb      	ldrb	r3, [r7, #15]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d004      	beq.n	800c104 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2202      	movs	r2, #2
 800c0fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c102:	e009      	b.n	800c118 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c10c:	e004      	b.n	800c118 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 f985 	bl	800c420 <USBD_CtlError>
  }
}
 800c116:	bf00      	nop
 800c118:	bf00      	nop
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c12a:	2300      	movs	r3, #0
 800c12c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	885b      	ldrh	r3, [r3, #2]
 800c132:	b2da      	uxtb	r2, r3
 800c134:	4b4c      	ldr	r3, [pc, #304]	@ (800c268 <USBD_SetConfig+0x148>)
 800c136:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c138:	4b4b      	ldr	r3, [pc, #300]	@ (800c268 <USBD_SetConfig+0x148>)
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d905      	bls.n	800c14c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c140:	6839      	ldr	r1, [r7, #0]
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 f96c 	bl	800c420 <USBD_CtlError>
    return USBD_FAIL;
 800c148:	2303      	movs	r3, #3
 800c14a:	e088      	b.n	800c25e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b02      	cmp	r3, #2
 800c156:	d002      	beq.n	800c15e <USBD_SetConfig+0x3e>
 800c158:	2b03      	cmp	r3, #3
 800c15a:	d025      	beq.n	800c1a8 <USBD_SetConfig+0x88>
 800c15c:	e071      	b.n	800c242 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c15e:	4b42      	ldr	r3, [pc, #264]	@ (800c268 <USBD_SetConfig+0x148>)
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d01c      	beq.n	800c1a0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c166:	4b40      	ldr	r3, [pc, #256]	@ (800c268 <USBD_SetConfig+0x148>)
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	461a      	mov	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c170:	4b3d      	ldr	r3, [pc, #244]	@ (800c268 <USBD_SetConfig+0x148>)
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	4619      	mov	r1, r3
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f7ff f992 	bl	800b4a0 <USBD_SetClassConfig>
 800c17c:	4603      	mov	r3, r0
 800c17e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c180:	7bfb      	ldrb	r3, [r7, #15]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d004      	beq.n	800c190 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 f949 	bl	800c420 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c18e:	e065      	b.n	800c25c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 fa10 	bl	800c5b6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2203      	movs	r2, #3
 800c19a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c19e:	e05d      	b.n	800c25c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 fa08 	bl	800c5b6 <USBD_CtlSendStatus>
      break;
 800c1a6:	e059      	b.n	800c25c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c1a8:	4b2f      	ldr	r3, [pc, #188]	@ (800c268 <USBD_SetConfig+0x148>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d112      	bne.n	800c1d6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2202      	movs	r2, #2
 800c1b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c1b8:	4b2b      	ldr	r3, [pc, #172]	@ (800c268 <USBD_SetConfig+0x148>)
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1c2:	4b29      	ldr	r3, [pc, #164]	@ (800c268 <USBD_SetConfig+0x148>)
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f7ff f985 	bl	800b4d8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 f9f1 	bl	800c5b6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1d4:	e042      	b.n	800c25c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c1d6:	4b24      	ldr	r3, [pc, #144]	@ (800c268 <USBD_SetConfig+0x148>)
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	461a      	mov	r2, r3
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d02a      	beq.n	800c23a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f7ff f973 	bl	800b4d8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c1f2:	4b1d      	ldr	r3, [pc, #116]	@ (800c268 <USBD_SetConfig+0x148>)
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1fc:	4b1a      	ldr	r3, [pc, #104]	@ (800c268 <USBD_SetConfig+0x148>)
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	4619      	mov	r1, r3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7ff f94c 	bl	800b4a0 <USBD_SetClassConfig>
 800c208:	4603      	mov	r3, r0
 800c20a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c20c:	7bfb      	ldrb	r3, [r7, #15]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00f      	beq.n	800c232 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c212:	6839      	ldr	r1, [r7, #0]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 f903 	bl	800c420 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	4619      	mov	r1, r3
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f7ff f958 	bl	800b4d8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2202      	movs	r2, #2
 800c22c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c230:	e014      	b.n	800c25c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f9bf 	bl	800c5b6 <USBD_CtlSendStatus>
      break;
 800c238:	e010      	b.n	800c25c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 f9bb 	bl	800c5b6 <USBD_CtlSendStatus>
      break;
 800c240:	e00c      	b.n	800c25c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c242:	6839      	ldr	r1, [r7, #0]
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f8eb 	bl	800c420 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c24a:	4b07      	ldr	r3, [pc, #28]	@ (800c268 <USBD_SetConfig+0x148>)
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	4619      	mov	r1, r3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f7ff f941 	bl	800b4d8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c256:	2303      	movs	r3, #3
 800c258:	73fb      	strb	r3, [r7, #15]
      break;
 800c25a:	bf00      	nop
  }

  return ret;
 800c25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	20000730 	.word	0x20000730

0800c26c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	88db      	ldrh	r3, [r3, #6]
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d004      	beq.n	800c288 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c27e:	6839      	ldr	r1, [r7, #0]
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 f8cd 	bl	800c420 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c286:	e023      	b.n	800c2d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	2b02      	cmp	r3, #2
 800c292:	dc02      	bgt.n	800c29a <USBD_GetConfig+0x2e>
 800c294:	2b00      	cmp	r3, #0
 800c296:	dc03      	bgt.n	800c2a0 <USBD_GetConfig+0x34>
 800c298:	e015      	b.n	800c2c6 <USBD_GetConfig+0x5a>
 800c29a:	2b03      	cmp	r3, #3
 800c29c:	d00b      	beq.n	800c2b6 <USBD_GetConfig+0x4a>
 800c29e:	e012      	b.n	800c2c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	3308      	adds	r3, #8
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 f927 	bl	800c502 <USBD_CtlSendData>
        break;
 800c2b4:	e00c      	b.n	800c2d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	3304      	adds	r3, #4
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	4619      	mov	r1, r3
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 f91f 	bl	800c502 <USBD_CtlSendData>
        break;
 800c2c4:	e004      	b.n	800c2d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 f8a9 	bl	800c420 <USBD_CtlError>
        break;
 800c2ce:	bf00      	nop
}
 800c2d0:	bf00      	nop
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d81e      	bhi.n	800c32e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	88db      	ldrh	r3, [r3, #6]
 800c2f4:	2b02      	cmp	r3, #2
 800c2f6:	d004      	beq.n	800c302 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 f890 	bl	800c420 <USBD_CtlError>
        break;
 800c300:	e01a      	b.n	800c338 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2201      	movs	r2, #1
 800c306:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d005      	beq.n	800c31e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	f043 0202 	orr.w	r2, r3, #2
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	330c      	adds	r3, #12
 800c322:	2202      	movs	r2, #2
 800c324:	4619      	mov	r1, r3
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f8eb 	bl	800c502 <USBD_CtlSendData>
      break;
 800c32c:	e004      	b.n	800c338 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c32e:	6839      	ldr	r1, [r7, #0]
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 f875 	bl	800c420 <USBD_CtlError>
      break;
 800c336:	bf00      	nop
  }
}
 800c338:	bf00      	nop
 800c33a:	3708      	adds	r7, #8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	885b      	ldrh	r3, [r3, #2]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d106      	bne.n	800c360 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2201      	movs	r2, #1
 800c356:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 f92b 	bl	800c5b6 <USBD_CtlSendStatus>
  }
}
 800c360:	bf00      	nop
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	3b01      	subs	r3, #1
 800c37c:	2b02      	cmp	r3, #2
 800c37e:	d80b      	bhi.n	800c398 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	885b      	ldrh	r3, [r3, #2]
 800c384:	2b01      	cmp	r3, #1
 800c386:	d10c      	bne.n	800c3a2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 f910 	bl	800c5b6 <USBD_CtlSendStatus>
      }
      break;
 800c396:	e004      	b.n	800c3a2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c398:	6839      	ldr	r1, [r7, #0]
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f840 	bl	800c420 <USBD_CtlError>
      break;
 800c3a0:	e000      	b.n	800c3a4 <USBD_ClrFeature+0x3c>
      break;
 800c3a2:	bf00      	nop
  }
}
 800c3a4:	bf00      	nop
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	781a      	ldrb	r2, [r3, #0]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	781a      	ldrb	r2, [r3, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f7ff fa92 	bl	800b900 <SWAPBYTE>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	461a      	mov	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f7ff fa85 	bl	800b900 <SWAPBYTE>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	3301      	adds	r3, #1
 800c402:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	3301      	adds	r3, #1
 800c408:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c40a:	68f8      	ldr	r0, [r7, #12]
 800c40c:	f7ff fa78 	bl	800b900 <SWAPBYTE>
 800c410:	4603      	mov	r3, r0
 800c412:	461a      	mov	r2, r3
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	80da      	strh	r2, [r3, #6]
}
 800c418:	bf00      	nop
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c42a:	2180      	movs	r1, #128	@ 0x80
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fc95 	bl	800cd5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c432:	2100      	movs	r1, #0
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 fc91 	bl	800cd5c <USBD_LL_StallEP>
}
 800c43a:	bf00      	nop
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b086      	sub	sp, #24
 800c446:	af00      	add	r7, sp, #0
 800c448:	60f8      	str	r0, [r7, #12]
 800c44a:	60b9      	str	r1, [r7, #8]
 800c44c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c44e:	2300      	movs	r3, #0
 800c450:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d036      	beq.n	800c4c6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c45c:	6938      	ldr	r0, [r7, #16]
 800c45e:	f000 f836 	bl	800c4ce <USBD_GetLen>
 800c462:	4603      	mov	r3, r0
 800c464:	3301      	adds	r3, #1
 800c466:	b29b      	uxth	r3, r3
 800c468:	005b      	lsls	r3, r3, #1
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c470:	7dfb      	ldrb	r3, [r7, #23]
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	4413      	add	r3, r2
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	7812      	ldrb	r2, [r2, #0]
 800c47a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c47c:	7dfb      	ldrb	r3, [r7, #23]
 800c47e:	3301      	adds	r3, #1
 800c480:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c482:	7dfb      	ldrb	r3, [r7, #23]
 800c484:	68ba      	ldr	r2, [r7, #8]
 800c486:	4413      	add	r3, r2
 800c488:	2203      	movs	r2, #3
 800c48a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c48c:	7dfb      	ldrb	r3, [r7, #23]
 800c48e:	3301      	adds	r3, #1
 800c490:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c492:	e013      	b.n	800c4bc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c494:	7dfb      	ldrb	r3, [r7, #23]
 800c496:	68ba      	ldr	r2, [r7, #8]
 800c498:	4413      	add	r3, r2
 800c49a:	693a      	ldr	r2, [r7, #16]
 800c49c:	7812      	ldrb	r2, [r2, #0]
 800c49e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	613b      	str	r3, [r7, #16]
    idx++;
 800c4a6:	7dfb      	ldrb	r3, [r7, #23]
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c4ac:	7dfb      	ldrb	r3, [r7, #23]
 800c4ae:	68ba      	ldr	r2, [r7, #8]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	701a      	strb	r2, [r3, #0]
    idx++;
 800c4b6:	7dfb      	ldrb	r3, [r7, #23]
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d1e7      	bne.n	800c494 <USBD_GetString+0x52>
 800c4c4:	e000      	b.n	800c4c8 <USBD_GetString+0x86>
    return;
 800c4c6:	bf00      	nop
  }
}
 800c4c8:	3718      	adds	r7, #24
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4ce:	b480      	push	{r7}
 800c4d0:	b085      	sub	sp, #20
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c4de:	e005      	b.n	800c4ec <USBD_GetLen+0x1e>
  {
    len++;
 800c4e0:	7bfb      	ldrb	r3, [r7, #15]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d1f5      	bne.n	800c4e0 <USBD_GetLen+0x12>
  }

  return len;
 800c4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3714      	adds	r7, #20
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b084      	sub	sp, #16
 800c506:	af00      	add	r7, sp, #0
 800c508:	60f8      	str	r0, [r7, #12]
 800c50a:	60b9      	str	r1, [r7, #8]
 800c50c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2202      	movs	r2, #2
 800c512:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	68ba      	ldr	r2, [r7, #8]
 800c526:	2100      	movs	r1, #0
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f000 fca0 	bl	800ce6e <USBD_LL_Transmit>

  return USBD_OK;
 800c52e:	2300      	movs	r3, #0
}
 800c530:	4618      	mov	r0, r3
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	68ba      	ldr	r2, [r7, #8]
 800c548:	2100      	movs	r1, #0
 800c54a:	68f8      	ldr	r0, [r7, #12]
 800c54c:	f000 fc8f 	bl	800ce6e <USBD_LL_Transmit>

  return USBD_OK;
 800c550:	2300      	movs	r3, #0
}
 800c552:	4618      	mov	r0, r3
 800c554:	3710      	adds	r7, #16
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b084      	sub	sp, #16
 800c55e:	af00      	add	r7, sp, #0
 800c560:	60f8      	str	r0, [r7, #12]
 800c562:	60b9      	str	r1, [r7, #8]
 800c564:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2203      	movs	r2, #3
 800c56a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	68ba      	ldr	r2, [r7, #8]
 800c582:	2100      	movs	r1, #0
 800c584:	68f8      	ldr	r0, [r7, #12]
 800c586:	f000 fc93 	bl	800ceb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3710      	adds	r7, #16
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	f000 fc82 	bl	800ceb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5ac:	2300      	movs	r3, #0
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b082      	sub	sp, #8
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2204      	movs	r2, #4
 800c5c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 fc4e 	bl	800ce6e <USBD_LL_Transmit>

  return USBD_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2205      	movs	r2, #5
 800c5e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 fc5c 	bl	800ceb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3708      	adds	r7, #8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
	...

0800c604 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c608:	2200      	movs	r2, #0
 800c60a:	4912      	ldr	r1, [pc, #72]	@ (800c654 <MX_USB_Device_Init+0x50>)
 800c60c:	4812      	ldr	r0, [pc, #72]	@ (800c658 <MX_USB_Device_Init+0x54>)
 800c60e:	f7fe fed9 	bl	800b3c4 <USBD_Init>
 800c612:	4603      	mov	r3, r0
 800c614:	2b00      	cmp	r3, #0
 800c616:	d001      	beq.n	800c61c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c618:	f7f5 fc3b 	bl	8001e92 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c61c:	490f      	ldr	r1, [pc, #60]	@ (800c65c <MX_USB_Device_Init+0x58>)
 800c61e:	480e      	ldr	r0, [pc, #56]	@ (800c658 <MX_USB_Device_Init+0x54>)
 800c620:	f7fe ff00 	bl	800b424 <USBD_RegisterClass>
 800c624:	4603      	mov	r3, r0
 800c626:	2b00      	cmp	r3, #0
 800c628:	d001      	beq.n	800c62e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c62a:	f7f5 fc32 	bl	8001e92 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c62e:	490c      	ldr	r1, [pc, #48]	@ (800c660 <MX_USB_Device_Init+0x5c>)
 800c630:	4809      	ldr	r0, [pc, #36]	@ (800c658 <MX_USB_Device_Init+0x54>)
 800c632:	f7fe fe21 	bl	800b278 <USBD_CDC_RegisterInterface>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d001      	beq.n	800c640 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c63c:	f7f5 fc29 	bl	8001e92 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c640:	4805      	ldr	r0, [pc, #20]	@ (800c658 <MX_USB_Device_Init+0x54>)
 800c642:	f7fe ff16 	bl	800b472 <USBD_Start>
 800c646:	4603      	mov	r3, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d001      	beq.n	800c650 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c64c:	f7f5 fc21 	bl	8001e92 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c650:	bf00      	nop
 800c652:	bd80      	pop	{r7, pc}
 800c654:	20000130 	.word	0x20000130
 800c658:	20000734 	.word	0x20000734
 800c65c:	20000018 	.word	0x20000018
 800c660:	2000011c 	.word	0x2000011c

0800c664 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c668:	2200      	movs	r2, #0
 800c66a:	4905      	ldr	r1, [pc, #20]	@ (800c680 <CDC_Init_FS+0x1c>)
 800c66c:	4805      	ldr	r0, [pc, #20]	@ (800c684 <CDC_Init_FS+0x20>)
 800c66e:	f7fe fe18 	bl	800b2a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c672:	4905      	ldr	r1, [pc, #20]	@ (800c688 <CDC_Init_FS+0x24>)
 800c674:	4803      	ldr	r0, [pc, #12]	@ (800c684 <CDC_Init_FS+0x20>)
 800c676:	f7fe fe32 	bl	800b2de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c67a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	20001204 	.word	0x20001204
 800c684:	20000734 	.word	0x20000734
 800c688:	20000a04 	.word	0x20000a04

0800c68c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c68c:	b480      	push	{r7}
 800c68e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c690:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c692:	4618      	mov	r0, r3
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr

0800c69c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	6039      	str	r1, [r7, #0]
 800c6a6:	71fb      	strb	r3, [r7, #7]
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c6ac:	79fb      	ldrb	r3, [r7, #7]
 800c6ae:	2b23      	cmp	r3, #35	@ 0x23
 800c6b0:	d84a      	bhi.n	800c748 <CDC_Control_FS+0xac>
 800c6b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c6b8 <CDC_Control_FS+0x1c>)
 800c6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b8:	0800c749 	.word	0x0800c749
 800c6bc:	0800c749 	.word	0x0800c749
 800c6c0:	0800c749 	.word	0x0800c749
 800c6c4:	0800c749 	.word	0x0800c749
 800c6c8:	0800c749 	.word	0x0800c749
 800c6cc:	0800c749 	.word	0x0800c749
 800c6d0:	0800c749 	.word	0x0800c749
 800c6d4:	0800c749 	.word	0x0800c749
 800c6d8:	0800c749 	.word	0x0800c749
 800c6dc:	0800c749 	.word	0x0800c749
 800c6e0:	0800c749 	.word	0x0800c749
 800c6e4:	0800c749 	.word	0x0800c749
 800c6e8:	0800c749 	.word	0x0800c749
 800c6ec:	0800c749 	.word	0x0800c749
 800c6f0:	0800c749 	.word	0x0800c749
 800c6f4:	0800c749 	.word	0x0800c749
 800c6f8:	0800c749 	.word	0x0800c749
 800c6fc:	0800c749 	.word	0x0800c749
 800c700:	0800c749 	.word	0x0800c749
 800c704:	0800c749 	.word	0x0800c749
 800c708:	0800c749 	.word	0x0800c749
 800c70c:	0800c749 	.word	0x0800c749
 800c710:	0800c749 	.word	0x0800c749
 800c714:	0800c749 	.word	0x0800c749
 800c718:	0800c749 	.word	0x0800c749
 800c71c:	0800c749 	.word	0x0800c749
 800c720:	0800c749 	.word	0x0800c749
 800c724:	0800c749 	.word	0x0800c749
 800c728:	0800c749 	.word	0x0800c749
 800c72c:	0800c749 	.word	0x0800c749
 800c730:	0800c749 	.word	0x0800c749
 800c734:	0800c749 	.word	0x0800c749
 800c738:	0800c749 	.word	0x0800c749
 800c73c:	0800c749 	.word	0x0800c749
 800c740:	0800c749 	.word	0x0800c749
 800c744:	0800c749 	.word	0x0800c749
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c748:	bf00      	nop
  }

  return (USBD_OK);
 800c74a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c762:	6879      	ldr	r1, [r7, #4]
 800c764:	4805      	ldr	r0, [pc, #20]	@ (800c77c <CDC_Receive_FS+0x24>)
 800c766:	f7fe fdba 	bl	800b2de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c76a:	4804      	ldr	r0, [pc, #16]	@ (800c77c <CDC_Receive_FS+0x24>)
 800c76c:	f7fe fe00 	bl	800b370 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c770:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c772:	4618      	mov	r0, r3
 800c774:	3708      	adds	r7, #8
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	20000734 	.word	0x20000734

0800c780 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	460b      	mov	r3, r1
 800c78a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c78c:	2300      	movs	r3, #0
 800c78e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c790:	4b0d      	ldr	r3, [pc, #52]	@ (800c7c8 <CDC_Transmit_FS+0x48>)
 800c792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c796:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d001      	beq.n	800c7a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e00b      	b.n	800c7be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c7a6:	887b      	ldrh	r3, [r7, #2]
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	6879      	ldr	r1, [r7, #4]
 800c7ac:	4806      	ldr	r0, [pc, #24]	@ (800c7c8 <CDC_Transmit_FS+0x48>)
 800c7ae:	f7fe fd78 	bl	800b2a2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c7b2:	4805      	ldr	r0, [pc, #20]	@ (800c7c8 <CDC_Transmit_FS+0x48>)
 800c7b4:	f7fe fdac 	bl	800b310 <USBD_CDC_TransmitPacket>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20000734 	.word	0x20000734

0800c7cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b087      	sub	sp, #28
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c7de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	371c      	adds	r7, #28
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr
	...

0800c7f0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	6039      	str	r1, [r7, #0]
 800c7fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	2212      	movs	r2, #18
 800c800:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c802:	4b03      	ldr	r3, [pc, #12]	@ (800c810 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c804:	4618      	mov	r0, r3
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr
 800c810:	20000150 	.word	0x20000150

0800c814 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	4603      	mov	r3, r0
 800c81c:	6039      	str	r1, [r7, #0]
 800c81e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	2204      	movs	r2, #4
 800c824:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c826:	4b03      	ldr	r3, [pc, #12]	@ (800c834 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c828:	4618      	mov	r0, r3
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr
 800c834:	20000164 	.word	0x20000164

0800c838 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	4603      	mov	r3, r0
 800c840:	6039      	str	r1, [r7, #0]
 800c842:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c844:	79fb      	ldrb	r3, [r7, #7]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d105      	bne.n	800c856 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c84a:	683a      	ldr	r2, [r7, #0]
 800c84c:	4907      	ldr	r1, [pc, #28]	@ (800c86c <USBD_CDC_ProductStrDescriptor+0x34>)
 800c84e:	4808      	ldr	r0, [pc, #32]	@ (800c870 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c850:	f7ff fdf7 	bl	800c442 <USBD_GetString>
 800c854:	e004      	b.n	800c860 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c856:	683a      	ldr	r2, [r7, #0]
 800c858:	4904      	ldr	r1, [pc, #16]	@ (800c86c <USBD_CDC_ProductStrDescriptor+0x34>)
 800c85a:	4805      	ldr	r0, [pc, #20]	@ (800c870 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c85c:	f7ff fdf1 	bl	800c442 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c860:	4b02      	ldr	r3, [pc, #8]	@ (800c86c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c862:	4618      	mov	r0, r3
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	20001a04 	.word	0x20001a04
 800c870:	0800ea3c 	.word	0x0800ea3c

0800c874 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	4603      	mov	r3, r0
 800c87c:	6039      	str	r1, [r7, #0]
 800c87e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c880:	683a      	ldr	r2, [r7, #0]
 800c882:	4904      	ldr	r1, [pc, #16]	@ (800c894 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c884:	4804      	ldr	r0, [pc, #16]	@ (800c898 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c886:	f7ff fddc 	bl	800c442 <USBD_GetString>
  return USBD_StrDesc;
 800c88a:	4b02      	ldr	r3, [pc, #8]	@ (800c894 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	20001a04 	.word	0x20001a04
 800c898:	0800ea54 	.word	0x0800ea54

0800c89c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	6039      	str	r1, [r7, #0]
 800c8a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	221a      	movs	r2, #26
 800c8ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c8ae:	f000 f843 	bl	800c938 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c8b2:	4b02      	ldr	r3, [pc, #8]	@ (800c8bc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	20000168 	.word	0x20000168

0800c8c0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	6039      	str	r1, [r7, #0]
 800c8ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c8cc:	79fb      	ldrb	r3, [r7, #7]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d105      	bne.n	800c8de <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	4907      	ldr	r1, [pc, #28]	@ (800c8f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c8d6:	4808      	ldr	r0, [pc, #32]	@ (800c8f8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c8d8:	f7ff fdb3 	bl	800c442 <USBD_GetString>
 800c8dc:	e004      	b.n	800c8e8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c8de:	683a      	ldr	r2, [r7, #0]
 800c8e0:	4904      	ldr	r1, [pc, #16]	@ (800c8f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c8e2:	4805      	ldr	r0, [pc, #20]	@ (800c8f8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c8e4:	f7ff fdad 	bl	800c442 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8e8:	4b02      	ldr	r3, [pc, #8]	@ (800c8f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3708      	adds	r7, #8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	20001a04 	.word	0x20001a04
 800c8f8:	0800ea68 	.word	0x0800ea68

0800c8fc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	4603      	mov	r3, r0
 800c904:	6039      	str	r1, [r7, #0]
 800c906:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c908:	79fb      	ldrb	r3, [r7, #7]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d105      	bne.n	800c91a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c90e:	683a      	ldr	r2, [r7, #0]
 800c910:	4907      	ldr	r1, [pc, #28]	@ (800c930 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c912:	4808      	ldr	r0, [pc, #32]	@ (800c934 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c914:	f7ff fd95 	bl	800c442 <USBD_GetString>
 800c918:	e004      	b.n	800c924 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c91a:	683a      	ldr	r2, [r7, #0]
 800c91c:	4904      	ldr	r1, [pc, #16]	@ (800c930 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c91e:	4805      	ldr	r0, [pc, #20]	@ (800c934 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c920:	f7ff fd8f 	bl	800c442 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c924:	4b02      	ldr	r3, [pc, #8]	@ (800c930 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c926:	4618      	mov	r0, r3
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	20001a04 	.word	0x20001a04
 800c934:	0800ea74 	.word	0x0800ea74

0800c938 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c93e:	4b0f      	ldr	r3, [pc, #60]	@ (800c97c <Get_SerialNum+0x44>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c944:	4b0e      	ldr	r3, [pc, #56]	@ (800c980 <Get_SerialNum+0x48>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c94a:	4b0e      	ldr	r3, [pc, #56]	@ (800c984 <Get_SerialNum+0x4c>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4413      	add	r3, r2
 800c956:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d009      	beq.n	800c972 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c95e:	2208      	movs	r2, #8
 800c960:	4909      	ldr	r1, [pc, #36]	@ (800c988 <Get_SerialNum+0x50>)
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	f000 f814 	bl	800c990 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c968:	2204      	movs	r2, #4
 800c96a:	4908      	ldr	r1, [pc, #32]	@ (800c98c <Get_SerialNum+0x54>)
 800c96c:	68b8      	ldr	r0, [r7, #8]
 800c96e:	f000 f80f 	bl	800c990 <IntToUnicode>
  }
}
 800c972:	bf00      	nop
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	1fff7590 	.word	0x1fff7590
 800c980:	1fff7594 	.word	0x1fff7594
 800c984:	1fff7598 	.word	0x1fff7598
 800c988:	2000016a 	.word	0x2000016a
 800c98c:	2000017a 	.word	0x2000017a

0800c990 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c990:	b480      	push	{r7}
 800c992:	b087      	sub	sp, #28
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	4613      	mov	r3, r2
 800c99c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	75fb      	strb	r3, [r7, #23]
 800c9a6:	e027      	b.n	800c9f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	0f1b      	lsrs	r3, r3, #28
 800c9ac:	2b09      	cmp	r3, #9
 800c9ae:	d80b      	bhi.n	800c9c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	0f1b      	lsrs	r3, r3, #28
 800c9b4:	b2da      	uxtb	r2, r3
 800c9b6:	7dfb      	ldrb	r3, [r7, #23]
 800c9b8:	005b      	lsls	r3, r3, #1
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	440b      	add	r3, r1
 800c9c0:	3230      	adds	r2, #48	@ 0x30
 800c9c2:	b2d2      	uxtb	r2, r2
 800c9c4:	701a      	strb	r2, [r3, #0]
 800c9c6:	e00a      	b.n	800c9de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	0f1b      	lsrs	r3, r3, #28
 800c9cc:	b2da      	uxtb	r2, r3
 800c9ce:	7dfb      	ldrb	r3, [r7, #23]
 800c9d0:	005b      	lsls	r3, r3, #1
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	440b      	add	r3, r1
 800c9d8:	3237      	adds	r2, #55	@ 0x37
 800c9da:	b2d2      	uxtb	r2, r2
 800c9dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	011b      	lsls	r3, r3, #4
 800c9e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c9e4:	7dfb      	ldrb	r3, [r7, #23]
 800c9e6:	005b      	lsls	r3, r3, #1
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	68ba      	ldr	r2, [r7, #8]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c9f2:	7dfb      	ldrb	r3, [r7, #23]
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	75fb      	strb	r3, [r7, #23]
 800c9f8:	7dfa      	ldrb	r2, [r7, #23]
 800c9fa:	79fb      	ldrb	r3, [r7, #7]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d3d3      	bcc.n	800c9a8 <IntToUnicode+0x18>
  }
}
 800ca00:	bf00      	nop
 800ca02:	bf00      	nop
 800ca04:	371c      	adds	r7, #28
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
	...

0800ca10 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b098      	sub	sp, #96	@ 0x60
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ca18:	f107 030c 	add.w	r3, r7, #12
 800ca1c:	2254      	movs	r2, #84	@ 0x54
 800ca1e:	2100      	movs	r1, #0
 800ca20:	4618      	mov	r0, r3
 800ca22:	f001 fc27 	bl	800e274 <memset>
  if(pcdHandle->Instance==USB)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a15      	ldr	r2, [pc, #84]	@ (800ca80 <HAL_PCD_MspInit+0x70>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d123      	bne.n	800ca78 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ca30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ca34:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800ca36:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ca3a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ca3c:	f107 030c 	add.w	r3, r7, #12
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7f9 ff3d 	bl	80068c0 <HAL_RCCEx_PeriphCLKConfig>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d001      	beq.n	800ca50 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800ca4c:	f7f5 fa21 	bl	8001e92 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ca50:	4b0c      	ldr	r3, [pc, #48]	@ (800ca84 <HAL_PCD_MspInit+0x74>)
 800ca52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca54:	4a0b      	ldr	r2, [pc, #44]	@ (800ca84 <HAL_PCD_MspInit+0x74>)
 800ca56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ca5a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ca5c:	4b09      	ldr	r3, [pc, #36]	@ (800ca84 <HAL_PCD_MspInit+0x74>)
 800ca5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca64:	60bb      	str	r3, [r7, #8]
 800ca66:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ca68:	2200      	movs	r2, #0
 800ca6a:	2100      	movs	r1, #0
 800ca6c:	2014      	movs	r0, #20
 800ca6e:	f7f7 fa34 	bl	8003eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ca72:	2014      	movs	r0, #20
 800ca74:	f7f7 fa4b 	bl	8003f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ca78:	bf00      	nop
 800ca7a:	3760      	adds	r7, #96	@ 0x60
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	40005c00 	.word	0x40005c00
 800ca84:	40021000 	.word	0x40021000

0800ca88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	4610      	mov	r0, r2
 800caa0:	f7fe fd32 	bl	800b508 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800caa4:	bf00      	nop
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	460b      	mov	r3, r1
 800cab6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cabe:	78fa      	ldrb	r2, [r7, #3]
 800cac0:	6879      	ldr	r1, [r7, #4]
 800cac2:	4613      	mov	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	4413      	add	r3, r2
 800cac8:	00db      	lsls	r3, r3, #3
 800caca:	440b      	add	r3, r1
 800cacc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	78fb      	ldrb	r3, [r7, #3]
 800cad4:	4619      	mov	r1, r3
 800cad6:	f7fe fd6c 	bl	800b5b2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800cada:	bf00      	nop
 800cadc:	3708      	adds	r7, #8
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b082      	sub	sp, #8
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
 800caea:	460b      	mov	r3, r1
 800caec:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800caf4:	78fa      	ldrb	r2, [r7, #3]
 800caf6:	6879      	ldr	r1, [r7, #4]
 800caf8:	4613      	mov	r3, r2
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	4413      	add	r3, r2
 800cafe:	00db      	lsls	r3, r3, #3
 800cb00:	440b      	add	r3, r1
 800cb02:	3324      	adds	r3, #36	@ 0x24
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	78fb      	ldrb	r3, [r7, #3]
 800cb08:	4619      	mov	r1, r3
 800cb0a:	f7fe fdb5 	bl	800b678 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800cb0e:	bf00      	nop
 800cb10:	3708      	adds	r7, #8
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b082      	sub	sp, #8
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cb24:	4618      	mov	r0, r3
 800cb26:	f7fe fec9 	bl	800b8bc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800cb2a:	bf00      	nop
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b084      	sub	sp, #16
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	795b      	ldrb	r3, [r3, #5]
 800cb42:	2b02      	cmp	r3, #2
 800cb44:	d001      	beq.n	800cb4a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cb46:	f7f5 f9a4 	bl	8001e92 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cb50:	7bfa      	ldrb	r2, [r7, #15]
 800cb52:	4611      	mov	r1, r2
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7fe fe73 	bl	800b840 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7fe fe1f 	bl	800b7a4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cb66:	bf00      	nop
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
	...

0800cb70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fe fe6e 	bl	800b860 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	7a5b      	ldrb	r3, [r3, #9]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d005      	beq.n	800cb98 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb8c:	4b04      	ldr	r3, [pc, #16]	@ (800cba0 <HAL_PCD_SuspendCallback+0x30>)
 800cb8e:	691b      	ldr	r3, [r3, #16]
 800cb90:	4a03      	ldr	r2, [pc, #12]	@ (800cba0 <HAL_PCD_SuspendCallback+0x30>)
 800cb92:	f043 0306 	orr.w	r3, r3, #6
 800cb96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cb98:	bf00      	nop
 800cb9a:	3708      	adds	r7, #8
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	e000ed00 	.word	0xe000ed00

0800cba4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	7a5b      	ldrb	r3, [r3, #9]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d007      	beq.n	800cbc4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cbb4:	4b08      	ldr	r3, [pc, #32]	@ (800cbd8 <HAL_PCD_ResumeCallback+0x34>)
 800cbb6:	691b      	ldr	r3, [r3, #16]
 800cbb8:	4a07      	ldr	r2, [pc, #28]	@ (800cbd8 <HAL_PCD_ResumeCallback+0x34>)
 800cbba:	f023 0306 	bic.w	r3, r3, #6
 800cbbe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cbc0:	f000 f9f8 	bl	800cfb4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fe fe5e 	bl	800b88c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800cbd0:	bf00      	nop
 800cbd2:	3708      	adds	r7, #8
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	e000ed00 	.word	0xe000ed00

0800cbdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800cbe4:	4a2b      	ldr	r2, [pc, #172]	@ (800cc94 <USBD_LL_Init+0xb8>)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	4a29      	ldr	r2, [pc, #164]	@ (800cc94 <USBD_LL_Init+0xb8>)
 800cbf0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800cbf4:	4b27      	ldr	r3, [pc, #156]	@ (800cc94 <USBD_LL_Init+0xb8>)
 800cbf6:	4a28      	ldr	r2, [pc, #160]	@ (800cc98 <USBD_LL_Init+0xbc>)
 800cbf8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cbfa:	4b26      	ldr	r3, [pc, #152]	@ (800cc94 <USBD_LL_Init+0xb8>)
 800cbfc:	2208      	movs	r2, #8
 800cbfe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cc00:	4b24      	ldr	r3, [pc, #144]	@ (800cc94 <USBD_LL_Init+0xb8>)
 800cc02:	2202      	movs	r2, #2
 800cc04:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cc06:	4b23      	ldr	r3, [pc, #140]	@ (800cc94 <USBD_LL_Init+0xb8>)
 800cc08:	2202      	movs	r2, #2
 800cc0a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cc0c:	4b21      	ldr	r3, [pc, #132]	@ (800cc94 <USBD_LL_Init+0xb8>)
 800cc0e:	2200      	movs	r2, #0
 800cc10:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cc12:	4b20      	ldr	r3, [pc, #128]	@ (800cc94 <USBD_LL_Init+0xb8>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cc18:	4b1e      	ldr	r3, [pc, #120]	@ (800cc94 <USBD_LL_Init+0xb8>)
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cc1e:	4b1d      	ldr	r3, [pc, #116]	@ (800cc94 <USBD_LL_Init+0xb8>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cc24:	481b      	ldr	r0, [pc, #108]	@ (800cc94 <USBD_LL_Init+0xb8>)
 800cc26:	f7f7 fb27 	bl	8004278 <HAL_PCD_Init>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d001      	beq.n	800cc34 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800cc30:	f7f5 f92f 	bl	8001e92 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cc3a:	2318      	movs	r3, #24
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	2100      	movs	r1, #0
 800cc40:	f7f8 ffe0 	bl	8005c04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cc4a:	2358      	movs	r3, #88	@ 0x58
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	2180      	movs	r1, #128	@ 0x80
 800cc50:	f7f8 ffd8 	bl	8005c04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cc5a:	23c0      	movs	r3, #192	@ 0xc0
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	2181      	movs	r1, #129	@ 0x81
 800cc60:	f7f8 ffd0 	bl	8005c04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cc6a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cc6e:	2200      	movs	r2, #0
 800cc70:	2101      	movs	r1, #1
 800cc72:	f7f8 ffc7 	bl	8005c04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cc7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc80:	2200      	movs	r2, #0
 800cc82:	2182      	movs	r1, #130	@ 0x82
 800cc84:	f7f8 ffbe 	bl	8005c04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cc88:	2300      	movs	r3, #0
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3708      	adds	r7, #8
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	20001c04 	.word	0x20001c04
 800cc98:	40005c00 	.word	0x40005c00

0800cc9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cca4:	2300      	movs	r3, #0
 800cca6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7f7 fbae 	bl	8004414 <HAL_PCD_Start>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccbc:	7bfb      	ldrb	r3, [r7, #15]
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f000 f97e 	bl	800cfc0 <USBD_Get_USB_Status>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b084      	sub	sp, #16
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
 800ccda:	4608      	mov	r0, r1
 800ccdc:	4611      	mov	r1, r2
 800ccde:	461a      	mov	r2, r3
 800cce0:	4603      	mov	r3, r0
 800cce2:	70fb      	strb	r3, [r7, #3]
 800cce4:	460b      	mov	r3, r1
 800cce6:	70bb      	strb	r3, [r7, #2]
 800cce8:	4613      	mov	r3, r2
 800ccea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccec:	2300      	movs	r3, #0
 800ccee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ccfa:	78bb      	ldrb	r3, [r7, #2]
 800ccfc:	883a      	ldrh	r2, [r7, #0]
 800ccfe:	78f9      	ldrb	r1, [r7, #3]
 800cd00:	f7f7 fcf5 	bl	80046ee <HAL_PCD_EP_Open>
 800cd04:	4603      	mov	r3, r0
 800cd06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd08:	7bfb      	ldrb	r3, [r7, #15]
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f000 f958 	bl	800cfc0 <USBD_Get_USB_Status>
 800cd10:	4603      	mov	r3, r0
 800cd12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd14:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b084      	sub	sp, #16
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
 800cd26:	460b      	mov	r3, r1
 800cd28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cd38:	78fa      	ldrb	r2, [r7, #3]
 800cd3a:	4611      	mov	r1, r2
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7f7 fd33 	bl	80047a8 <HAL_PCD_EP_Close>
 800cd42:	4603      	mov	r3, r0
 800cd44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd46:	7bfb      	ldrb	r3, [r7, #15]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f000 f939 	bl	800cfc0 <USBD_Get_USB_Status>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd52:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3710      	adds	r7, #16
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	460b      	mov	r3, r1
 800cd66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cd76:	78fa      	ldrb	r2, [r7, #3]
 800cd78:	4611      	mov	r1, r2
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7f7 fddc 	bl	8004938 <HAL_PCD_EP_SetStall>
 800cd80:	4603      	mov	r3, r0
 800cd82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd84:	7bfb      	ldrb	r3, [r7, #15]
 800cd86:	4618      	mov	r0, r3
 800cd88:	f000 f91a 	bl	800cfc0 <USBD_Get_USB_Status>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd90:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b084      	sub	sp, #16
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	460b      	mov	r3, r1
 800cda4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cda6:	2300      	movs	r3, #0
 800cda8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cdb4:	78fa      	ldrb	r2, [r7, #3]
 800cdb6:	4611      	mov	r1, r2
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7f7 fe0f 	bl	80049dc <HAL_PCD_EP_ClrStall>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdc2:	7bfb      	ldrb	r3, [r7, #15]
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f000 f8fb 	bl	800cfc0 <USBD_Get_USB_Status>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdce:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	460b      	mov	r3, r1
 800cde2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cdea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cdec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	da0b      	bge.n	800ce0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cdf4:	78fb      	ldrb	r3, [r7, #3]
 800cdf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cdfa:	68f9      	ldr	r1, [r7, #12]
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	4413      	add	r3, r2
 800ce02:	00db      	lsls	r3, r3, #3
 800ce04:	440b      	add	r3, r1
 800ce06:	3312      	adds	r3, #18
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	e00b      	b.n	800ce24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ce0c:	78fb      	ldrb	r3, [r7, #3]
 800ce0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce12:	68f9      	ldr	r1, [r7, #12]
 800ce14:	4613      	mov	r3, r2
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	4413      	add	r3, r2
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	440b      	add	r3, r1
 800ce1e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ce22:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3714      	adds	r7, #20
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	460b      	mov	r3, r1
 800ce3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce40:	2300      	movs	r3, #0
 800ce42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ce4a:	78fa      	ldrb	r2, [r7, #3]
 800ce4c:	4611      	mov	r1, r2
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7f7 fc29 	bl	80046a6 <HAL_PCD_SetAddress>
 800ce54:	4603      	mov	r3, r0
 800ce56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce58:	7bfb      	ldrb	r3, [r7, #15]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f000 f8b0 	bl	800cfc0 <USBD_Get_USB_Status>
 800ce60:	4603      	mov	r3, r0
 800ce62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b086      	sub	sp, #24
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	60f8      	str	r0, [r7, #12]
 800ce76:	607a      	str	r2, [r7, #4]
 800ce78:	603b      	str	r3, [r7, #0]
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce82:	2300      	movs	r3, #0
 800ce84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ce8c:	7af9      	ldrb	r1, [r7, #11]
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	f7f7 fd1a 	bl	80048ca <HAL_PCD_EP_Transmit>
 800ce96:	4603      	mov	r3, r0
 800ce98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce9a:	7dfb      	ldrb	r3, [r7, #23]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f000 f88f 	bl	800cfc0 <USBD_Get_USB_Status>
 800cea2:	4603      	mov	r3, r0
 800cea4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cea6:	7dbb      	ldrb	r3, [r7, #22]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3718      	adds	r7, #24
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	607a      	str	r2, [r7, #4]
 800ceba:	603b      	str	r3, [r7, #0]
 800cebc:	460b      	mov	r3, r1
 800cebe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cec0:	2300      	movs	r3, #0
 800cec2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cec4:	2300      	movs	r3, #0
 800cec6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cece:	7af9      	ldrb	r1, [r7, #11]
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	f7f7 fcb0 	bl	8004838 <HAL_PCD_EP_Receive>
 800ced8:	4603      	mov	r3, r0
 800ceda:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cedc:	7dfb      	ldrb	r3, [r7, #23]
 800cede:	4618      	mov	r0, r3
 800cee0:	f000 f86e 	bl	800cfc0 <USBD_Get_USB_Status>
 800cee4:	4603      	mov	r3, r0
 800cee6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cee8:	7dbb      	ldrb	r3, [r7, #22]
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3718      	adds	r7, #24
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b082      	sub	sp, #8
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	6078      	str	r0, [r7, #4]
 800cefa:	460b      	mov	r3, r1
 800cefc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cf04:	78fa      	ldrb	r2, [r7, #3]
 800cf06:	4611      	mov	r1, r2
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7f7 fcc6 	bl	800489a <HAL_PCD_EP_GetRxCount>
 800cf0e:	4603      	mov	r3, r0
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3708      	adds	r7, #8
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	460b      	mov	r3, r1
 800cf22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800cf24:	78fb      	ldrb	r3, [r7, #3]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d002      	beq.n	800cf30 <HAL_PCDEx_LPM_Callback+0x18>
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d013      	beq.n	800cf56 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800cf2e:	e023      	b.n	800cf78 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	7a5b      	ldrb	r3, [r3, #9]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d007      	beq.n	800cf48 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cf38:	f000 f83c 	bl	800cfb4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf3c:	4b10      	ldr	r3, [pc, #64]	@ (800cf80 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf3e:	691b      	ldr	r3, [r3, #16]
 800cf40:	4a0f      	ldr	r2, [pc, #60]	@ (800cf80 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf42:	f023 0306 	bic.w	r3, r3, #6
 800cf46:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fe fc9c 	bl	800b88c <USBD_LL_Resume>
    break;
 800cf54:	e010      	b.n	800cf78 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7fe fc7f 	bl	800b860 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	7a5b      	ldrb	r3, [r3, #9]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d005      	beq.n	800cf76 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf6a:	4b05      	ldr	r3, [pc, #20]	@ (800cf80 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf6c:	691b      	ldr	r3, [r3, #16]
 800cf6e:	4a04      	ldr	r2, [pc, #16]	@ (800cf80 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf70:	f043 0306 	orr.w	r3, r3, #6
 800cf74:	6113      	str	r3, [r2, #16]
    break;
 800cf76:	bf00      	nop
}
 800cf78:	bf00      	nop
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	e000ed00 	.word	0xe000ed00

0800cf84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cf8c:	4b03      	ldr	r3, [pc, #12]	@ (800cf9c <USBD_static_malloc+0x18>)
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	370c      	adds	r7, #12
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr
 800cf9a:	bf00      	nop
 800cf9c:	20001ee0 	.word	0x20001ee0

0800cfa0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]

}
 800cfa8:	bf00      	nop
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cfb8:	f7f4 fd62 	bl	8001a80 <SystemClock_Config>
}
 800cfbc:	bf00      	nop
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cfce:	79fb      	ldrb	r3, [r7, #7]
 800cfd0:	2b03      	cmp	r3, #3
 800cfd2:	d817      	bhi.n	800d004 <USBD_Get_USB_Status+0x44>
 800cfd4:	a201      	add	r2, pc, #4	@ (adr r2, 800cfdc <USBD_Get_USB_Status+0x1c>)
 800cfd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfda:	bf00      	nop
 800cfdc:	0800cfed 	.word	0x0800cfed
 800cfe0:	0800cff3 	.word	0x0800cff3
 800cfe4:	0800cff9 	.word	0x0800cff9
 800cfe8:	0800cfff 	.word	0x0800cfff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cfec:	2300      	movs	r3, #0
 800cfee:	73fb      	strb	r3, [r7, #15]
    break;
 800cff0:	e00b      	b.n	800d00a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cff2:	2303      	movs	r3, #3
 800cff4:	73fb      	strb	r3, [r7, #15]
    break;
 800cff6:	e008      	b.n	800d00a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cff8:	2301      	movs	r3, #1
 800cffa:	73fb      	strb	r3, [r7, #15]
    break;
 800cffc:	e005      	b.n	800d00a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cffe:	2303      	movs	r3, #3
 800d000:	73fb      	strb	r3, [r7, #15]
    break;
 800d002:	e002      	b.n	800d00a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d004:	2303      	movs	r3, #3
 800d006:	73fb      	strb	r3, [r7, #15]
    break;
 800d008:	bf00      	nop
  }
  return usb_status;
 800d00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3714      	adds	r7, #20
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr

0800d018 <sin>:
 800d018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d01a:	ec53 2b10 	vmov	r2, r3, d0
 800d01e:	4826      	ldr	r0, [pc, #152]	@ (800d0b8 <sin+0xa0>)
 800d020:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d024:	4281      	cmp	r1, r0
 800d026:	d807      	bhi.n	800d038 <sin+0x20>
 800d028:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d0b0 <sin+0x98>
 800d02c:	2000      	movs	r0, #0
 800d02e:	b005      	add	sp, #20
 800d030:	f85d eb04 	ldr.w	lr, [sp], #4
 800d034:	f000 b90c 	b.w	800d250 <__kernel_sin>
 800d038:	4820      	ldr	r0, [pc, #128]	@ (800d0bc <sin+0xa4>)
 800d03a:	4281      	cmp	r1, r0
 800d03c:	d908      	bls.n	800d050 <sin+0x38>
 800d03e:	4610      	mov	r0, r2
 800d040:	4619      	mov	r1, r3
 800d042:	f7f3 f949 	bl	80002d8 <__aeabi_dsub>
 800d046:	ec41 0b10 	vmov	d0, r0, r1
 800d04a:	b005      	add	sp, #20
 800d04c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d050:	4668      	mov	r0, sp
 800d052:	f000 f9b9 	bl	800d3c8 <__ieee754_rem_pio2>
 800d056:	f000 0003 	and.w	r0, r0, #3
 800d05a:	2801      	cmp	r0, #1
 800d05c:	d00c      	beq.n	800d078 <sin+0x60>
 800d05e:	2802      	cmp	r0, #2
 800d060:	d011      	beq.n	800d086 <sin+0x6e>
 800d062:	b9e8      	cbnz	r0, 800d0a0 <sin+0x88>
 800d064:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d068:	ed9d 0b00 	vldr	d0, [sp]
 800d06c:	2001      	movs	r0, #1
 800d06e:	f000 f8ef 	bl	800d250 <__kernel_sin>
 800d072:	ec51 0b10 	vmov	r0, r1, d0
 800d076:	e7e6      	b.n	800d046 <sin+0x2e>
 800d078:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d07c:	ed9d 0b00 	vldr	d0, [sp]
 800d080:	f000 f81e 	bl	800d0c0 <__kernel_cos>
 800d084:	e7f5      	b.n	800d072 <sin+0x5a>
 800d086:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d08a:	ed9d 0b00 	vldr	d0, [sp]
 800d08e:	2001      	movs	r0, #1
 800d090:	f000 f8de 	bl	800d250 <__kernel_sin>
 800d094:	ec53 2b10 	vmov	r2, r3, d0
 800d098:	4610      	mov	r0, r2
 800d09a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d09e:	e7d2      	b.n	800d046 <sin+0x2e>
 800d0a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d0a4:	ed9d 0b00 	vldr	d0, [sp]
 800d0a8:	f000 f80a 	bl	800d0c0 <__kernel_cos>
 800d0ac:	e7f2      	b.n	800d094 <sin+0x7c>
 800d0ae:	bf00      	nop
	...
 800d0b8:	3fe921fb 	.word	0x3fe921fb
 800d0bc:	7fefffff 	.word	0x7fefffff

0800d0c0 <__kernel_cos>:
 800d0c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c4:	ec57 6b10 	vmov	r6, r7, d0
 800d0c8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d0cc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800d0d0:	ed8d 1b00 	vstr	d1, [sp]
 800d0d4:	d206      	bcs.n	800d0e4 <__kernel_cos+0x24>
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	4639      	mov	r1, r7
 800d0da:	f7f3 fd4f 	bl	8000b7c <__aeabi_d2iz>
 800d0de:	2800      	cmp	r0, #0
 800d0e0:	f000 8088 	beq.w	800d1f4 <__kernel_cos+0x134>
 800d0e4:	4632      	mov	r2, r6
 800d0e6:	463b      	mov	r3, r7
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	4639      	mov	r1, r7
 800d0ec:	f7f3 faac 	bl	8000648 <__aeabi_dmul>
 800d0f0:	4b51      	ldr	r3, [pc, #324]	@ (800d238 <__kernel_cos+0x178>)
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	460d      	mov	r5, r1
 800d0f8:	f7f3 faa6 	bl	8000648 <__aeabi_dmul>
 800d0fc:	a340      	add	r3, pc, #256	@ (adr r3, 800d200 <__kernel_cos+0x140>)
 800d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d102:	4682      	mov	sl, r0
 800d104:	468b      	mov	fp, r1
 800d106:	4620      	mov	r0, r4
 800d108:	4629      	mov	r1, r5
 800d10a:	f7f3 fa9d 	bl	8000648 <__aeabi_dmul>
 800d10e:	a33e      	add	r3, pc, #248	@ (adr r3, 800d208 <__kernel_cos+0x148>)
 800d110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d114:	f7f3 f8e2 	bl	80002dc <__adddf3>
 800d118:	4622      	mov	r2, r4
 800d11a:	462b      	mov	r3, r5
 800d11c:	f7f3 fa94 	bl	8000648 <__aeabi_dmul>
 800d120:	a33b      	add	r3, pc, #236	@ (adr r3, 800d210 <__kernel_cos+0x150>)
 800d122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d126:	f7f3 f8d7 	bl	80002d8 <__aeabi_dsub>
 800d12a:	4622      	mov	r2, r4
 800d12c:	462b      	mov	r3, r5
 800d12e:	f7f3 fa8b 	bl	8000648 <__aeabi_dmul>
 800d132:	a339      	add	r3, pc, #228	@ (adr r3, 800d218 <__kernel_cos+0x158>)
 800d134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d138:	f7f3 f8d0 	bl	80002dc <__adddf3>
 800d13c:	4622      	mov	r2, r4
 800d13e:	462b      	mov	r3, r5
 800d140:	f7f3 fa82 	bl	8000648 <__aeabi_dmul>
 800d144:	a336      	add	r3, pc, #216	@ (adr r3, 800d220 <__kernel_cos+0x160>)
 800d146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14a:	f7f3 f8c5 	bl	80002d8 <__aeabi_dsub>
 800d14e:	4622      	mov	r2, r4
 800d150:	462b      	mov	r3, r5
 800d152:	f7f3 fa79 	bl	8000648 <__aeabi_dmul>
 800d156:	a334      	add	r3, pc, #208	@ (adr r3, 800d228 <__kernel_cos+0x168>)
 800d158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15c:	f7f3 f8be 	bl	80002dc <__adddf3>
 800d160:	4622      	mov	r2, r4
 800d162:	462b      	mov	r3, r5
 800d164:	f7f3 fa70 	bl	8000648 <__aeabi_dmul>
 800d168:	4622      	mov	r2, r4
 800d16a:	462b      	mov	r3, r5
 800d16c:	f7f3 fa6c 	bl	8000648 <__aeabi_dmul>
 800d170:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d174:	4604      	mov	r4, r0
 800d176:	460d      	mov	r5, r1
 800d178:	4630      	mov	r0, r6
 800d17a:	4639      	mov	r1, r7
 800d17c:	f7f3 fa64 	bl	8000648 <__aeabi_dmul>
 800d180:	460b      	mov	r3, r1
 800d182:	4602      	mov	r2, r0
 800d184:	4629      	mov	r1, r5
 800d186:	4620      	mov	r0, r4
 800d188:	f7f3 f8a6 	bl	80002d8 <__aeabi_dsub>
 800d18c:	4b2b      	ldr	r3, [pc, #172]	@ (800d23c <__kernel_cos+0x17c>)
 800d18e:	4598      	cmp	r8, r3
 800d190:	4606      	mov	r6, r0
 800d192:	460f      	mov	r7, r1
 800d194:	d810      	bhi.n	800d1b8 <__kernel_cos+0xf8>
 800d196:	4602      	mov	r2, r0
 800d198:	460b      	mov	r3, r1
 800d19a:	4650      	mov	r0, sl
 800d19c:	4659      	mov	r1, fp
 800d19e:	f7f3 f89b 	bl	80002d8 <__aeabi_dsub>
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	4926      	ldr	r1, [pc, #152]	@ (800d240 <__kernel_cos+0x180>)
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	f7f3 f895 	bl	80002d8 <__aeabi_dsub>
 800d1ae:	ec41 0b10 	vmov	d0, r0, r1
 800d1b2:	b003      	add	sp, #12
 800d1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1b8:	4b22      	ldr	r3, [pc, #136]	@ (800d244 <__kernel_cos+0x184>)
 800d1ba:	4921      	ldr	r1, [pc, #132]	@ (800d240 <__kernel_cos+0x180>)
 800d1bc:	4598      	cmp	r8, r3
 800d1be:	bf8c      	ite	hi
 800d1c0:	4d21      	ldrhi	r5, [pc, #132]	@ (800d248 <__kernel_cos+0x188>)
 800d1c2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800d1c6:	2400      	movs	r4, #0
 800d1c8:	4622      	mov	r2, r4
 800d1ca:	462b      	mov	r3, r5
 800d1cc:	2000      	movs	r0, #0
 800d1ce:	f7f3 f883 	bl	80002d8 <__aeabi_dsub>
 800d1d2:	4622      	mov	r2, r4
 800d1d4:	4680      	mov	r8, r0
 800d1d6:	4689      	mov	r9, r1
 800d1d8:	462b      	mov	r3, r5
 800d1da:	4650      	mov	r0, sl
 800d1dc:	4659      	mov	r1, fp
 800d1de:	f7f3 f87b 	bl	80002d8 <__aeabi_dsub>
 800d1e2:	4632      	mov	r2, r6
 800d1e4:	463b      	mov	r3, r7
 800d1e6:	f7f3 f877 	bl	80002d8 <__aeabi_dsub>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	4640      	mov	r0, r8
 800d1f0:	4649      	mov	r1, r9
 800d1f2:	e7da      	b.n	800d1aa <__kernel_cos+0xea>
 800d1f4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800d230 <__kernel_cos+0x170>
 800d1f8:	e7db      	b.n	800d1b2 <__kernel_cos+0xf2>
 800d1fa:	bf00      	nop
 800d1fc:	f3af 8000 	nop.w
 800d200:	be8838d4 	.word	0xbe8838d4
 800d204:	bda8fae9 	.word	0xbda8fae9
 800d208:	bdb4b1c4 	.word	0xbdb4b1c4
 800d20c:	3e21ee9e 	.word	0x3e21ee9e
 800d210:	809c52ad 	.word	0x809c52ad
 800d214:	3e927e4f 	.word	0x3e927e4f
 800d218:	19cb1590 	.word	0x19cb1590
 800d21c:	3efa01a0 	.word	0x3efa01a0
 800d220:	16c15177 	.word	0x16c15177
 800d224:	3f56c16c 	.word	0x3f56c16c
 800d228:	5555554c 	.word	0x5555554c
 800d22c:	3fa55555 	.word	0x3fa55555
 800d230:	00000000 	.word	0x00000000
 800d234:	3ff00000 	.word	0x3ff00000
 800d238:	3fe00000 	.word	0x3fe00000
 800d23c:	3fd33332 	.word	0x3fd33332
 800d240:	3ff00000 	.word	0x3ff00000
 800d244:	3fe90000 	.word	0x3fe90000
 800d248:	3fd20000 	.word	0x3fd20000
 800d24c:	00000000 	.word	0x00000000

0800d250 <__kernel_sin>:
 800d250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d254:	ec55 4b10 	vmov	r4, r5, d0
 800d258:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d25c:	b085      	sub	sp, #20
 800d25e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d262:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d266:	4680      	mov	r8, r0
 800d268:	d205      	bcs.n	800d276 <__kernel_sin+0x26>
 800d26a:	4620      	mov	r0, r4
 800d26c:	4629      	mov	r1, r5
 800d26e:	f7f3 fc85 	bl	8000b7c <__aeabi_d2iz>
 800d272:	2800      	cmp	r0, #0
 800d274:	d052      	beq.n	800d31c <__kernel_sin+0xcc>
 800d276:	4622      	mov	r2, r4
 800d278:	462b      	mov	r3, r5
 800d27a:	4620      	mov	r0, r4
 800d27c:	4629      	mov	r1, r5
 800d27e:	f7f3 f9e3 	bl	8000648 <__aeabi_dmul>
 800d282:	4682      	mov	sl, r0
 800d284:	468b      	mov	fp, r1
 800d286:	4602      	mov	r2, r0
 800d288:	460b      	mov	r3, r1
 800d28a:	4620      	mov	r0, r4
 800d28c:	4629      	mov	r1, r5
 800d28e:	f7f3 f9db 	bl	8000648 <__aeabi_dmul>
 800d292:	a342      	add	r3, pc, #264	@ (adr r3, 800d39c <__kernel_sin+0x14c>)
 800d294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d298:	e9cd 0100 	strd	r0, r1, [sp]
 800d29c:	4650      	mov	r0, sl
 800d29e:	4659      	mov	r1, fp
 800d2a0:	f7f3 f9d2 	bl	8000648 <__aeabi_dmul>
 800d2a4:	a33f      	add	r3, pc, #252	@ (adr r3, 800d3a4 <__kernel_sin+0x154>)
 800d2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2aa:	f7f3 f815 	bl	80002d8 <__aeabi_dsub>
 800d2ae:	4652      	mov	r2, sl
 800d2b0:	465b      	mov	r3, fp
 800d2b2:	f7f3 f9c9 	bl	8000648 <__aeabi_dmul>
 800d2b6:	a33d      	add	r3, pc, #244	@ (adr r3, 800d3ac <__kernel_sin+0x15c>)
 800d2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2bc:	f7f3 f80e 	bl	80002dc <__adddf3>
 800d2c0:	4652      	mov	r2, sl
 800d2c2:	465b      	mov	r3, fp
 800d2c4:	f7f3 f9c0 	bl	8000648 <__aeabi_dmul>
 800d2c8:	a33a      	add	r3, pc, #232	@ (adr r3, 800d3b4 <__kernel_sin+0x164>)
 800d2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ce:	f7f3 f803 	bl	80002d8 <__aeabi_dsub>
 800d2d2:	4652      	mov	r2, sl
 800d2d4:	465b      	mov	r3, fp
 800d2d6:	f7f3 f9b7 	bl	8000648 <__aeabi_dmul>
 800d2da:	a338      	add	r3, pc, #224	@ (adr r3, 800d3bc <__kernel_sin+0x16c>)
 800d2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e0:	f7f2 fffc 	bl	80002dc <__adddf3>
 800d2e4:	4606      	mov	r6, r0
 800d2e6:	460f      	mov	r7, r1
 800d2e8:	f1b8 0f00 	cmp.w	r8, #0
 800d2ec:	d11b      	bne.n	800d326 <__kernel_sin+0xd6>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	4650      	mov	r0, sl
 800d2f4:	4659      	mov	r1, fp
 800d2f6:	f7f3 f9a7 	bl	8000648 <__aeabi_dmul>
 800d2fa:	a325      	add	r3, pc, #148	@ (adr r3, 800d390 <__kernel_sin+0x140>)
 800d2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d300:	f7f2 ffea 	bl	80002d8 <__aeabi_dsub>
 800d304:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d308:	f7f3 f99e 	bl	8000648 <__aeabi_dmul>
 800d30c:	4602      	mov	r2, r0
 800d30e:	460b      	mov	r3, r1
 800d310:	4620      	mov	r0, r4
 800d312:	4629      	mov	r1, r5
 800d314:	f7f2 ffe2 	bl	80002dc <__adddf3>
 800d318:	4604      	mov	r4, r0
 800d31a:	460d      	mov	r5, r1
 800d31c:	ec45 4b10 	vmov	d0, r4, r5
 800d320:	b005      	add	sp, #20
 800d322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d32a:	4b1b      	ldr	r3, [pc, #108]	@ (800d398 <__kernel_sin+0x148>)
 800d32c:	2200      	movs	r2, #0
 800d32e:	f7f3 f98b 	bl	8000648 <__aeabi_dmul>
 800d332:	4632      	mov	r2, r6
 800d334:	4680      	mov	r8, r0
 800d336:	4689      	mov	r9, r1
 800d338:	463b      	mov	r3, r7
 800d33a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d33e:	f7f3 f983 	bl	8000648 <__aeabi_dmul>
 800d342:	4602      	mov	r2, r0
 800d344:	460b      	mov	r3, r1
 800d346:	4640      	mov	r0, r8
 800d348:	4649      	mov	r1, r9
 800d34a:	f7f2 ffc5 	bl	80002d8 <__aeabi_dsub>
 800d34e:	4652      	mov	r2, sl
 800d350:	465b      	mov	r3, fp
 800d352:	f7f3 f979 	bl	8000648 <__aeabi_dmul>
 800d356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d35a:	f7f2 ffbd 	bl	80002d8 <__aeabi_dsub>
 800d35e:	a30c      	add	r3, pc, #48	@ (adr r3, 800d390 <__kernel_sin+0x140>)
 800d360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d364:	4606      	mov	r6, r0
 800d366:	460f      	mov	r7, r1
 800d368:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d36c:	f7f3 f96c 	bl	8000648 <__aeabi_dmul>
 800d370:	4602      	mov	r2, r0
 800d372:	460b      	mov	r3, r1
 800d374:	4630      	mov	r0, r6
 800d376:	4639      	mov	r1, r7
 800d378:	f7f2 ffb0 	bl	80002dc <__adddf3>
 800d37c:	4602      	mov	r2, r0
 800d37e:	460b      	mov	r3, r1
 800d380:	4620      	mov	r0, r4
 800d382:	4629      	mov	r1, r5
 800d384:	f7f2 ffa8 	bl	80002d8 <__aeabi_dsub>
 800d388:	e7c6      	b.n	800d318 <__kernel_sin+0xc8>
 800d38a:	bf00      	nop
 800d38c:	f3af 8000 	nop.w
 800d390:	55555549 	.word	0x55555549
 800d394:	3fc55555 	.word	0x3fc55555
 800d398:	3fe00000 	.word	0x3fe00000
 800d39c:	5acfd57c 	.word	0x5acfd57c
 800d3a0:	3de5d93a 	.word	0x3de5d93a
 800d3a4:	8a2b9ceb 	.word	0x8a2b9ceb
 800d3a8:	3e5ae5e6 	.word	0x3e5ae5e6
 800d3ac:	57b1fe7d 	.word	0x57b1fe7d
 800d3b0:	3ec71de3 	.word	0x3ec71de3
 800d3b4:	19c161d5 	.word	0x19c161d5
 800d3b8:	3f2a01a0 	.word	0x3f2a01a0
 800d3bc:	1110f8a6 	.word	0x1110f8a6
 800d3c0:	3f811111 	.word	0x3f811111
 800d3c4:	00000000 	.word	0x00000000

0800d3c8 <__ieee754_rem_pio2>:
 800d3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3cc:	ec57 6b10 	vmov	r6, r7, d0
 800d3d0:	4bc5      	ldr	r3, [pc, #788]	@ (800d6e8 <__ieee754_rem_pio2+0x320>)
 800d3d2:	b08d      	sub	sp, #52	@ 0x34
 800d3d4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d3d8:	4598      	cmp	r8, r3
 800d3da:	4604      	mov	r4, r0
 800d3dc:	9704      	str	r7, [sp, #16]
 800d3de:	d807      	bhi.n	800d3f0 <__ieee754_rem_pio2+0x28>
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	ed80 0b00 	vstr	d0, [r0]
 800d3e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d3ec:	2500      	movs	r5, #0
 800d3ee:	e028      	b.n	800d442 <__ieee754_rem_pio2+0x7a>
 800d3f0:	4bbe      	ldr	r3, [pc, #760]	@ (800d6ec <__ieee754_rem_pio2+0x324>)
 800d3f2:	4598      	cmp	r8, r3
 800d3f4:	d878      	bhi.n	800d4e8 <__ieee754_rem_pio2+0x120>
 800d3f6:	9b04      	ldr	r3, [sp, #16]
 800d3f8:	4dbd      	ldr	r5, [pc, #756]	@ (800d6f0 <__ieee754_rem_pio2+0x328>)
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	a3ac      	add	r3, pc, #688	@ (adr r3, 800d6b0 <__ieee754_rem_pio2+0x2e8>)
 800d400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d404:	4639      	mov	r1, r7
 800d406:	dd38      	ble.n	800d47a <__ieee754_rem_pio2+0xb2>
 800d408:	f7f2 ff66 	bl	80002d8 <__aeabi_dsub>
 800d40c:	45a8      	cmp	r8, r5
 800d40e:	4606      	mov	r6, r0
 800d410:	460f      	mov	r7, r1
 800d412:	d01a      	beq.n	800d44a <__ieee754_rem_pio2+0x82>
 800d414:	a3a8      	add	r3, pc, #672	@ (adr r3, 800d6b8 <__ieee754_rem_pio2+0x2f0>)
 800d416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41a:	f7f2 ff5d 	bl	80002d8 <__aeabi_dsub>
 800d41e:	4602      	mov	r2, r0
 800d420:	460b      	mov	r3, r1
 800d422:	4680      	mov	r8, r0
 800d424:	4689      	mov	r9, r1
 800d426:	4630      	mov	r0, r6
 800d428:	4639      	mov	r1, r7
 800d42a:	f7f2 ff55 	bl	80002d8 <__aeabi_dsub>
 800d42e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800d6b8 <__ieee754_rem_pio2+0x2f0>)
 800d430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d434:	f7f2 ff50 	bl	80002d8 <__aeabi_dsub>
 800d438:	e9c4 8900 	strd	r8, r9, [r4]
 800d43c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d440:	2501      	movs	r5, #1
 800d442:	4628      	mov	r0, r5
 800d444:	b00d      	add	sp, #52	@ 0x34
 800d446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44a:	a39d      	add	r3, pc, #628	@ (adr r3, 800d6c0 <__ieee754_rem_pio2+0x2f8>)
 800d44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d450:	f7f2 ff42 	bl	80002d8 <__aeabi_dsub>
 800d454:	a39c      	add	r3, pc, #624	@ (adr r3, 800d6c8 <__ieee754_rem_pio2+0x300>)
 800d456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45a:	4606      	mov	r6, r0
 800d45c:	460f      	mov	r7, r1
 800d45e:	f7f2 ff3b 	bl	80002d8 <__aeabi_dsub>
 800d462:	4602      	mov	r2, r0
 800d464:	460b      	mov	r3, r1
 800d466:	4680      	mov	r8, r0
 800d468:	4689      	mov	r9, r1
 800d46a:	4630      	mov	r0, r6
 800d46c:	4639      	mov	r1, r7
 800d46e:	f7f2 ff33 	bl	80002d8 <__aeabi_dsub>
 800d472:	a395      	add	r3, pc, #596	@ (adr r3, 800d6c8 <__ieee754_rem_pio2+0x300>)
 800d474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d478:	e7dc      	b.n	800d434 <__ieee754_rem_pio2+0x6c>
 800d47a:	f7f2 ff2f 	bl	80002dc <__adddf3>
 800d47e:	45a8      	cmp	r8, r5
 800d480:	4606      	mov	r6, r0
 800d482:	460f      	mov	r7, r1
 800d484:	d018      	beq.n	800d4b8 <__ieee754_rem_pio2+0xf0>
 800d486:	a38c      	add	r3, pc, #560	@ (adr r3, 800d6b8 <__ieee754_rem_pio2+0x2f0>)
 800d488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48c:	f7f2 ff26 	bl	80002dc <__adddf3>
 800d490:	4602      	mov	r2, r0
 800d492:	460b      	mov	r3, r1
 800d494:	4680      	mov	r8, r0
 800d496:	4689      	mov	r9, r1
 800d498:	4630      	mov	r0, r6
 800d49a:	4639      	mov	r1, r7
 800d49c:	f7f2 ff1c 	bl	80002d8 <__aeabi_dsub>
 800d4a0:	a385      	add	r3, pc, #532	@ (adr r3, 800d6b8 <__ieee754_rem_pio2+0x2f0>)
 800d4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a6:	f7f2 ff19 	bl	80002dc <__adddf3>
 800d4aa:	f04f 35ff 	mov.w	r5, #4294967295
 800d4ae:	e9c4 8900 	strd	r8, r9, [r4]
 800d4b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d4b6:	e7c4      	b.n	800d442 <__ieee754_rem_pio2+0x7a>
 800d4b8:	a381      	add	r3, pc, #516	@ (adr r3, 800d6c0 <__ieee754_rem_pio2+0x2f8>)
 800d4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4be:	f7f2 ff0d 	bl	80002dc <__adddf3>
 800d4c2:	a381      	add	r3, pc, #516	@ (adr r3, 800d6c8 <__ieee754_rem_pio2+0x300>)
 800d4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c8:	4606      	mov	r6, r0
 800d4ca:	460f      	mov	r7, r1
 800d4cc:	f7f2 ff06 	bl	80002dc <__adddf3>
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	460b      	mov	r3, r1
 800d4d4:	4680      	mov	r8, r0
 800d4d6:	4689      	mov	r9, r1
 800d4d8:	4630      	mov	r0, r6
 800d4da:	4639      	mov	r1, r7
 800d4dc:	f7f2 fefc 	bl	80002d8 <__aeabi_dsub>
 800d4e0:	a379      	add	r3, pc, #484	@ (adr r3, 800d6c8 <__ieee754_rem_pio2+0x300>)
 800d4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e6:	e7de      	b.n	800d4a6 <__ieee754_rem_pio2+0xde>
 800d4e8:	4b82      	ldr	r3, [pc, #520]	@ (800d6f4 <__ieee754_rem_pio2+0x32c>)
 800d4ea:	4598      	cmp	r8, r3
 800d4ec:	f200 80d1 	bhi.w	800d692 <__ieee754_rem_pio2+0x2ca>
 800d4f0:	f000 f966 	bl	800d7c0 <fabs>
 800d4f4:	ec57 6b10 	vmov	r6, r7, d0
 800d4f8:	a375      	add	r3, pc, #468	@ (adr r3, 800d6d0 <__ieee754_rem_pio2+0x308>)
 800d4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fe:	4630      	mov	r0, r6
 800d500:	4639      	mov	r1, r7
 800d502:	f7f3 f8a1 	bl	8000648 <__aeabi_dmul>
 800d506:	4b7c      	ldr	r3, [pc, #496]	@ (800d6f8 <__ieee754_rem_pio2+0x330>)
 800d508:	2200      	movs	r2, #0
 800d50a:	f7f2 fee7 	bl	80002dc <__adddf3>
 800d50e:	f7f3 fb35 	bl	8000b7c <__aeabi_d2iz>
 800d512:	4605      	mov	r5, r0
 800d514:	f7f3 f82e 	bl	8000574 <__aeabi_i2d>
 800d518:	4602      	mov	r2, r0
 800d51a:	460b      	mov	r3, r1
 800d51c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d520:	a363      	add	r3, pc, #396	@ (adr r3, 800d6b0 <__ieee754_rem_pio2+0x2e8>)
 800d522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d526:	f7f3 f88f 	bl	8000648 <__aeabi_dmul>
 800d52a:	4602      	mov	r2, r0
 800d52c:	460b      	mov	r3, r1
 800d52e:	4630      	mov	r0, r6
 800d530:	4639      	mov	r1, r7
 800d532:	f7f2 fed1 	bl	80002d8 <__aeabi_dsub>
 800d536:	a360      	add	r3, pc, #384	@ (adr r3, 800d6b8 <__ieee754_rem_pio2+0x2f0>)
 800d538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53c:	4682      	mov	sl, r0
 800d53e:	468b      	mov	fp, r1
 800d540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d544:	f7f3 f880 	bl	8000648 <__aeabi_dmul>
 800d548:	2d1f      	cmp	r5, #31
 800d54a:	4606      	mov	r6, r0
 800d54c:	460f      	mov	r7, r1
 800d54e:	dc0c      	bgt.n	800d56a <__ieee754_rem_pio2+0x1a2>
 800d550:	4b6a      	ldr	r3, [pc, #424]	@ (800d6fc <__ieee754_rem_pio2+0x334>)
 800d552:	1e6a      	subs	r2, r5, #1
 800d554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d558:	4543      	cmp	r3, r8
 800d55a:	d006      	beq.n	800d56a <__ieee754_rem_pio2+0x1a2>
 800d55c:	4632      	mov	r2, r6
 800d55e:	463b      	mov	r3, r7
 800d560:	4650      	mov	r0, sl
 800d562:	4659      	mov	r1, fp
 800d564:	f7f2 feb8 	bl	80002d8 <__aeabi_dsub>
 800d568:	e00e      	b.n	800d588 <__ieee754_rem_pio2+0x1c0>
 800d56a:	463b      	mov	r3, r7
 800d56c:	4632      	mov	r2, r6
 800d56e:	4650      	mov	r0, sl
 800d570:	4659      	mov	r1, fp
 800d572:	f7f2 feb1 	bl	80002d8 <__aeabi_dsub>
 800d576:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d57a:	9305      	str	r3, [sp, #20]
 800d57c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d580:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d584:	2b10      	cmp	r3, #16
 800d586:	dc02      	bgt.n	800d58e <__ieee754_rem_pio2+0x1c6>
 800d588:	e9c4 0100 	strd	r0, r1, [r4]
 800d58c:	e039      	b.n	800d602 <__ieee754_rem_pio2+0x23a>
 800d58e:	a34c      	add	r3, pc, #304	@ (adr r3, 800d6c0 <__ieee754_rem_pio2+0x2f8>)
 800d590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d598:	f7f3 f856 	bl	8000648 <__aeabi_dmul>
 800d59c:	4606      	mov	r6, r0
 800d59e:	460f      	mov	r7, r1
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	4650      	mov	r0, sl
 800d5a6:	4659      	mov	r1, fp
 800d5a8:	f7f2 fe96 	bl	80002d8 <__aeabi_dsub>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	4680      	mov	r8, r0
 800d5b2:	4689      	mov	r9, r1
 800d5b4:	4650      	mov	r0, sl
 800d5b6:	4659      	mov	r1, fp
 800d5b8:	f7f2 fe8e 	bl	80002d8 <__aeabi_dsub>
 800d5bc:	4632      	mov	r2, r6
 800d5be:	463b      	mov	r3, r7
 800d5c0:	f7f2 fe8a 	bl	80002d8 <__aeabi_dsub>
 800d5c4:	a340      	add	r3, pc, #256	@ (adr r3, 800d6c8 <__ieee754_rem_pio2+0x300>)
 800d5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	460f      	mov	r7, r1
 800d5ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5d2:	f7f3 f839 	bl	8000648 <__aeabi_dmul>
 800d5d6:	4632      	mov	r2, r6
 800d5d8:	463b      	mov	r3, r7
 800d5da:	f7f2 fe7d 	bl	80002d8 <__aeabi_dsub>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	4606      	mov	r6, r0
 800d5e4:	460f      	mov	r7, r1
 800d5e6:	4640      	mov	r0, r8
 800d5e8:	4649      	mov	r1, r9
 800d5ea:	f7f2 fe75 	bl	80002d8 <__aeabi_dsub>
 800d5ee:	9a05      	ldr	r2, [sp, #20]
 800d5f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d5f4:	1ad3      	subs	r3, r2, r3
 800d5f6:	2b31      	cmp	r3, #49	@ 0x31
 800d5f8:	dc20      	bgt.n	800d63c <__ieee754_rem_pio2+0x274>
 800d5fa:	e9c4 0100 	strd	r0, r1, [r4]
 800d5fe:	46c2      	mov	sl, r8
 800d600:	46cb      	mov	fp, r9
 800d602:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d606:	4650      	mov	r0, sl
 800d608:	4642      	mov	r2, r8
 800d60a:	464b      	mov	r3, r9
 800d60c:	4659      	mov	r1, fp
 800d60e:	f7f2 fe63 	bl	80002d8 <__aeabi_dsub>
 800d612:	463b      	mov	r3, r7
 800d614:	4632      	mov	r2, r6
 800d616:	f7f2 fe5f 	bl	80002d8 <__aeabi_dsub>
 800d61a:	9b04      	ldr	r3, [sp, #16]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d622:	f6bf af0e 	bge.w	800d442 <__ieee754_rem_pio2+0x7a>
 800d626:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d62a:	6063      	str	r3, [r4, #4]
 800d62c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d630:	f8c4 8000 	str.w	r8, [r4]
 800d634:	60a0      	str	r0, [r4, #8]
 800d636:	60e3      	str	r3, [r4, #12]
 800d638:	426d      	negs	r5, r5
 800d63a:	e702      	b.n	800d442 <__ieee754_rem_pio2+0x7a>
 800d63c:	a326      	add	r3, pc, #152	@ (adr r3, 800d6d8 <__ieee754_rem_pio2+0x310>)
 800d63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d646:	f7f2 ffff 	bl	8000648 <__aeabi_dmul>
 800d64a:	4606      	mov	r6, r0
 800d64c:	460f      	mov	r7, r1
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	4640      	mov	r0, r8
 800d654:	4649      	mov	r1, r9
 800d656:	f7f2 fe3f 	bl	80002d8 <__aeabi_dsub>
 800d65a:	4602      	mov	r2, r0
 800d65c:	460b      	mov	r3, r1
 800d65e:	4682      	mov	sl, r0
 800d660:	468b      	mov	fp, r1
 800d662:	4640      	mov	r0, r8
 800d664:	4649      	mov	r1, r9
 800d666:	f7f2 fe37 	bl	80002d8 <__aeabi_dsub>
 800d66a:	4632      	mov	r2, r6
 800d66c:	463b      	mov	r3, r7
 800d66e:	f7f2 fe33 	bl	80002d8 <__aeabi_dsub>
 800d672:	a31b      	add	r3, pc, #108	@ (adr r3, 800d6e0 <__ieee754_rem_pio2+0x318>)
 800d674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d678:	4606      	mov	r6, r0
 800d67a:	460f      	mov	r7, r1
 800d67c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d680:	f7f2 ffe2 	bl	8000648 <__aeabi_dmul>
 800d684:	4632      	mov	r2, r6
 800d686:	463b      	mov	r3, r7
 800d688:	f7f2 fe26 	bl	80002d8 <__aeabi_dsub>
 800d68c:	4606      	mov	r6, r0
 800d68e:	460f      	mov	r7, r1
 800d690:	e764      	b.n	800d55c <__ieee754_rem_pio2+0x194>
 800d692:	4b1b      	ldr	r3, [pc, #108]	@ (800d700 <__ieee754_rem_pio2+0x338>)
 800d694:	4598      	cmp	r8, r3
 800d696:	d935      	bls.n	800d704 <__ieee754_rem_pio2+0x33c>
 800d698:	4632      	mov	r2, r6
 800d69a:	463b      	mov	r3, r7
 800d69c:	4630      	mov	r0, r6
 800d69e:	4639      	mov	r1, r7
 800d6a0:	f7f2 fe1a 	bl	80002d8 <__aeabi_dsub>
 800d6a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d6a8:	e9c4 0100 	strd	r0, r1, [r4]
 800d6ac:	e69e      	b.n	800d3ec <__ieee754_rem_pio2+0x24>
 800d6ae:	bf00      	nop
 800d6b0:	54400000 	.word	0x54400000
 800d6b4:	3ff921fb 	.word	0x3ff921fb
 800d6b8:	1a626331 	.word	0x1a626331
 800d6bc:	3dd0b461 	.word	0x3dd0b461
 800d6c0:	1a600000 	.word	0x1a600000
 800d6c4:	3dd0b461 	.word	0x3dd0b461
 800d6c8:	2e037073 	.word	0x2e037073
 800d6cc:	3ba3198a 	.word	0x3ba3198a
 800d6d0:	6dc9c883 	.word	0x6dc9c883
 800d6d4:	3fe45f30 	.word	0x3fe45f30
 800d6d8:	2e000000 	.word	0x2e000000
 800d6dc:	3ba3198a 	.word	0x3ba3198a
 800d6e0:	252049c1 	.word	0x252049c1
 800d6e4:	397b839a 	.word	0x397b839a
 800d6e8:	3fe921fb 	.word	0x3fe921fb
 800d6ec:	4002d97b 	.word	0x4002d97b
 800d6f0:	3ff921fb 	.word	0x3ff921fb
 800d6f4:	413921fb 	.word	0x413921fb
 800d6f8:	3fe00000 	.word	0x3fe00000
 800d6fc:	0800ea94 	.word	0x0800ea94
 800d700:	7fefffff 	.word	0x7fefffff
 800d704:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d708:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800d70c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d710:	4630      	mov	r0, r6
 800d712:	460f      	mov	r7, r1
 800d714:	f7f3 fa32 	bl	8000b7c <__aeabi_d2iz>
 800d718:	f7f2 ff2c 	bl	8000574 <__aeabi_i2d>
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	4630      	mov	r0, r6
 800d722:	4639      	mov	r1, r7
 800d724:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d728:	f7f2 fdd6 	bl	80002d8 <__aeabi_dsub>
 800d72c:	4b22      	ldr	r3, [pc, #136]	@ (800d7b8 <__ieee754_rem_pio2+0x3f0>)
 800d72e:	2200      	movs	r2, #0
 800d730:	f7f2 ff8a 	bl	8000648 <__aeabi_dmul>
 800d734:	460f      	mov	r7, r1
 800d736:	4606      	mov	r6, r0
 800d738:	f7f3 fa20 	bl	8000b7c <__aeabi_d2iz>
 800d73c:	f7f2 ff1a 	bl	8000574 <__aeabi_i2d>
 800d740:	4602      	mov	r2, r0
 800d742:	460b      	mov	r3, r1
 800d744:	4630      	mov	r0, r6
 800d746:	4639      	mov	r1, r7
 800d748:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d74c:	f7f2 fdc4 	bl	80002d8 <__aeabi_dsub>
 800d750:	4b19      	ldr	r3, [pc, #100]	@ (800d7b8 <__ieee754_rem_pio2+0x3f0>)
 800d752:	2200      	movs	r2, #0
 800d754:	f7f2 ff78 	bl	8000648 <__aeabi_dmul>
 800d758:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800d75c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800d760:	f04f 0803 	mov.w	r8, #3
 800d764:	2600      	movs	r6, #0
 800d766:	2700      	movs	r7, #0
 800d768:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d76c:	4632      	mov	r2, r6
 800d76e:	463b      	mov	r3, r7
 800d770:	46c2      	mov	sl, r8
 800d772:	f108 38ff 	add.w	r8, r8, #4294967295
 800d776:	f7f3 f9cf 	bl	8000b18 <__aeabi_dcmpeq>
 800d77a:	2800      	cmp	r0, #0
 800d77c:	d1f4      	bne.n	800d768 <__ieee754_rem_pio2+0x3a0>
 800d77e:	4b0f      	ldr	r3, [pc, #60]	@ (800d7bc <__ieee754_rem_pio2+0x3f4>)
 800d780:	9301      	str	r3, [sp, #4]
 800d782:	2302      	movs	r3, #2
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	462a      	mov	r2, r5
 800d788:	4653      	mov	r3, sl
 800d78a:	4621      	mov	r1, r4
 800d78c:	a806      	add	r0, sp, #24
 800d78e:	f000 f81f 	bl	800d7d0 <__kernel_rem_pio2>
 800d792:	9b04      	ldr	r3, [sp, #16]
 800d794:	2b00      	cmp	r3, #0
 800d796:	4605      	mov	r5, r0
 800d798:	f6bf ae53 	bge.w	800d442 <__ieee754_rem_pio2+0x7a>
 800d79c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800d7a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d7a4:	e9c4 2300 	strd	r2, r3, [r4]
 800d7a8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800d7ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d7b0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d7b4:	e740      	b.n	800d638 <__ieee754_rem_pio2+0x270>
 800d7b6:	bf00      	nop
 800d7b8:	41700000 	.word	0x41700000
 800d7bc:	0800eb14 	.word	0x0800eb14

0800d7c0 <fabs>:
 800d7c0:	ec51 0b10 	vmov	r0, r1, d0
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d7ca:	ec43 2b10 	vmov	d0, r2, r3
 800d7ce:	4770      	bx	lr

0800d7d0 <__kernel_rem_pio2>:
 800d7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d4:	ed2d 8b02 	vpush	{d8}
 800d7d8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800d7dc:	f112 0f14 	cmn.w	r2, #20
 800d7e0:	9306      	str	r3, [sp, #24]
 800d7e2:	9104      	str	r1, [sp, #16]
 800d7e4:	4bbe      	ldr	r3, [pc, #760]	@ (800dae0 <__kernel_rem_pio2+0x310>)
 800d7e6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800d7e8:	9008      	str	r0, [sp, #32]
 800d7ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d7ee:	9300      	str	r3, [sp, #0]
 800d7f0:	9b06      	ldr	r3, [sp, #24]
 800d7f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d7f6:	bfa8      	it	ge
 800d7f8:	1ed4      	subge	r4, r2, #3
 800d7fa:	9305      	str	r3, [sp, #20]
 800d7fc:	bfb2      	itee	lt
 800d7fe:	2400      	movlt	r4, #0
 800d800:	2318      	movge	r3, #24
 800d802:	fb94 f4f3 	sdivge	r4, r4, r3
 800d806:	f06f 0317 	mvn.w	r3, #23
 800d80a:	fb04 3303 	mla	r3, r4, r3, r3
 800d80e:	eb03 0b02 	add.w	fp, r3, r2
 800d812:	9b00      	ldr	r3, [sp, #0]
 800d814:	9a05      	ldr	r2, [sp, #20]
 800d816:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800dad0 <__kernel_rem_pio2+0x300>
 800d81a:	eb03 0802 	add.w	r8, r3, r2
 800d81e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d820:	1aa7      	subs	r7, r4, r2
 800d822:	ae20      	add	r6, sp, #128	@ 0x80
 800d824:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d828:	2500      	movs	r5, #0
 800d82a:	4545      	cmp	r5, r8
 800d82c:	dd13      	ble.n	800d856 <__kernel_rem_pio2+0x86>
 800d82e:	9b06      	ldr	r3, [sp, #24]
 800d830:	aa20      	add	r2, sp, #128	@ 0x80
 800d832:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d836:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800d83a:	f04f 0800 	mov.w	r8, #0
 800d83e:	9b00      	ldr	r3, [sp, #0]
 800d840:	4598      	cmp	r8, r3
 800d842:	dc31      	bgt.n	800d8a8 <__kernel_rem_pio2+0xd8>
 800d844:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800dad0 <__kernel_rem_pio2+0x300>
 800d848:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d84c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d850:	462f      	mov	r7, r5
 800d852:	2600      	movs	r6, #0
 800d854:	e01b      	b.n	800d88e <__kernel_rem_pio2+0xbe>
 800d856:	42ef      	cmn	r7, r5
 800d858:	d407      	bmi.n	800d86a <__kernel_rem_pio2+0x9a>
 800d85a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d85e:	f7f2 fe89 	bl	8000574 <__aeabi_i2d>
 800d862:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d866:	3501      	adds	r5, #1
 800d868:	e7df      	b.n	800d82a <__kernel_rem_pio2+0x5a>
 800d86a:	ec51 0b18 	vmov	r0, r1, d8
 800d86e:	e7f8      	b.n	800d862 <__kernel_rem_pio2+0x92>
 800d870:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d874:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d878:	f7f2 fee6 	bl	8000648 <__aeabi_dmul>
 800d87c:	4602      	mov	r2, r0
 800d87e:	460b      	mov	r3, r1
 800d880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d884:	f7f2 fd2a 	bl	80002dc <__adddf3>
 800d888:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d88c:	3601      	adds	r6, #1
 800d88e:	9b05      	ldr	r3, [sp, #20]
 800d890:	429e      	cmp	r6, r3
 800d892:	f1a7 0708 	sub.w	r7, r7, #8
 800d896:	ddeb      	ble.n	800d870 <__kernel_rem_pio2+0xa0>
 800d898:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d89c:	f108 0801 	add.w	r8, r8, #1
 800d8a0:	ecaa 7b02 	vstmia	sl!, {d7}
 800d8a4:	3508      	adds	r5, #8
 800d8a6:	e7ca      	b.n	800d83e <__kernel_rem_pio2+0x6e>
 800d8a8:	9b00      	ldr	r3, [sp, #0]
 800d8aa:	f8dd 8000 	ldr.w	r8, [sp]
 800d8ae:	aa0c      	add	r2, sp, #48	@ 0x30
 800d8b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8b6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d8b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d8bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8be:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800d8c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8c4:	ab98      	add	r3, sp, #608	@ 0x260
 800d8c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d8ca:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800d8ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d8d2:	ac0c      	add	r4, sp, #48	@ 0x30
 800d8d4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d8d6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800d8da:	46a1      	mov	r9, r4
 800d8dc:	46c2      	mov	sl, r8
 800d8de:	f1ba 0f00 	cmp.w	sl, #0
 800d8e2:	f1a5 0508 	sub.w	r5, r5, #8
 800d8e6:	dc77      	bgt.n	800d9d8 <__kernel_rem_pio2+0x208>
 800d8e8:	4658      	mov	r0, fp
 800d8ea:	ed9d 0b02 	vldr	d0, [sp, #8]
 800d8ee:	f000 fac7 	bl	800de80 <scalbn>
 800d8f2:	ec57 6b10 	vmov	r6, r7, d0
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	4639      	mov	r1, r7
 800d900:	f7f2 fea2 	bl	8000648 <__aeabi_dmul>
 800d904:	ec41 0b10 	vmov	d0, r0, r1
 800d908:	f000 fb3a 	bl	800df80 <floor>
 800d90c:	4b75      	ldr	r3, [pc, #468]	@ (800dae4 <__kernel_rem_pio2+0x314>)
 800d90e:	ec51 0b10 	vmov	r0, r1, d0
 800d912:	2200      	movs	r2, #0
 800d914:	f7f2 fe98 	bl	8000648 <__aeabi_dmul>
 800d918:	4602      	mov	r2, r0
 800d91a:	460b      	mov	r3, r1
 800d91c:	4630      	mov	r0, r6
 800d91e:	4639      	mov	r1, r7
 800d920:	f7f2 fcda 	bl	80002d8 <__aeabi_dsub>
 800d924:	460f      	mov	r7, r1
 800d926:	4606      	mov	r6, r0
 800d928:	f7f3 f928 	bl	8000b7c <__aeabi_d2iz>
 800d92c:	9002      	str	r0, [sp, #8]
 800d92e:	f7f2 fe21 	bl	8000574 <__aeabi_i2d>
 800d932:	4602      	mov	r2, r0
 800d934:	460b      	mov	r3, r1
 800d936:	4630      	mov	r0, r6
 800d938:	4639      	mov	r1, r7
 800d93a:	f7f2 fccd 	bl	80002d8 <__aeabi_dsub>
 800d93e:	f1bb 0f00 	cmp.w	fp, #0
 800d942:	4606      	mov	r6, r0
 800d944:	460f      	mov	r7, r1
 800d946:	dd6c      	ble.n	800da22 <__kernel_rem_pio2+0x252>
 800d948:	f108 31ff 	add.w	r1, r8, #4294967295
 800d94c:	ab0c      	add	r3, sp, #48	@ 0x30
 800d94e:	9d02      	ldr	r5, [sp, #8]
 800d950:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d954:	f1cb 0018 	rsb	r0, fp, #24
 800d958:	fa43 f200 	asr.w	r2, r3, r0
 800d95c:	4415      	add	r5, r2
 800d95e:	4082      	lsls	r2, r0
 800d960:	1a9b      	subs	r3, r3, r2
 800d962:	aa0c      	add	r2, sp, #48	@ 0x30
 800d964:	9502      	str	r5, [sp, #8]
 800d966:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d96a:	f1cb 0217 	rsb	r2, fp, #23
 800d96e:	fa43 f902 	asr.w	r9, r3, r2
 800d972:	f1b9 0f00 	cmp.w	r9, #0
 800d976:	dd64      	ble.n	800da42 <__kernel_rem_pio2+0x272>
 800d978:	9b02      	ldr	r3, [sp, #8]
 800d97a:	2200      	movs	r2, #0
 800d97c:	3301      	adds	r3, #1
 800d97e:	9302      	str	r3, [sp, #8]
 800d980:	4615      	mov	r5, r2
 800d982:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800d986:	4590      	cmp	r8, r2
 800d988:	f300 80b8 	bgt.w	800dafc <__kernel_rem_pio2+0x32c>
 800d98c:	f1bb 0f00 	cmp.w	fp, #0
 800d990:	dd07      	ble.n	800d9a2 <__kernel_rem_pio2+0x1d2>
 800d992:	f1bb 0f01 	cmp.w	fp, #1
 800d996:	f000 80bf 	beq.w	800db18 <__kernel_rem_pio2+0x348>
 800d99a:	f1bb 0f02 	cmp.w	fp, #2
 800d99e:	f000 80c6 	beq.w	800db2e <__kernel_rem_pio2+0x35e>
 800d9a2:	f1b9 0f02 	cmp.w	r9, #2
 800d9a6:	d14c      	bne.n	800da42 <__kernel_rem_pio2+0x272>
 800d9a8:	4632      	mov	r2, r6
 800d9aa:	463b      	mov	r3, r7
 800d9ac:	494e      	ldr	r1, [pc, #312]	@ (800dae8 <__kernel_rem_pio2+0x318>)
 800d9ae:	2000      	movs	r0, #0
 800d9b0:	f7f2 fc92 	bl	80002d8 <__aeabi_dsub>
 800d9b4:	4606      	mov	r6, r0
 800d9b6:	460f      	mov	r7, r1
 800d9b8:	2d00      	cmp	r5, #0
 800d9ba:	d042      	beq.n	800da42 <__kernel_rem_pio2+0x272>
 800d9bc:	4658      	mov	r0, fp
 800d9be:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800dad8 <__kernel_rem_pio2+0x308>
 800d9c2:	f000 fa5d 	bl	800de80 <scalbn>
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	4639      	mov	r1, r7
 800d9ca:	ec53 2b10 	vmov	r2, r3, d0
 800d9ce:	f7f2 fc83 	bl	80002d8 <__aeabi_dsub>
 800d9d2:	4606      	mov	r6, r0
 800d9d4:	460f      	mov	r7, r1
 800d9d6:	e034      	b.n	800da42 <__kernel_rem_pio2+0x272>
 800d9d8:	4b44      	ldr	r3, [pc, #272]	@ (800daec <__kernel_rem_pio2+0x31c>)
 800d9da:	2200      	movs	r2, #0
 800d9dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9e0:	f7f2 fe32 	bl	8000648 <__aeabi_dmul>
 800d9e4:	f7f3 f8ca 	bl	8000b7c <__aeabi_d2iz>
 800d9e8:	f7f2 fdc4 	bl	8000574 <__aeabi_i2d>
 800d9ec:	4b40      	ldr	r3, [pc, #256]	@ (800daf0 <__kernel_rem_pio2+0x320>)
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	4606      	mov	r6, r0
 800d9f2:	460f      	mov	r7, r1
 800d9f4:	f7f2 fe28 	bl	8000648 <__aeabi_dmul>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da00:	f7f2 fc6a 	bl	80002d8 <__aeabi_dsub>
 800da04:	f7f3 f8ba 	bl	8000b7c <__aeabi_d2iz>
 800da08:	e9d5 2300 	ldrd	r2, r3, [r5]
 800da0c:	f849 0b04 	str.w	r0, [r9], #4
 800da10:	4639      	mov	r1, r7
 800da12:	4630      	mov	r0, r6
 800da14:	f7f2 fc62 	bl	80002dc <__adddf3>
 800da18:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da20:	e75d      	b.n	800d8de <__kernel_rem_pio2+0x10e>
 800da22:	d107      	bne.n	800da34 <__kernel_rem_pio2+0x264>
 800da24:	f108 33ff 	add.w	r3, r8, #4294967295
 800da28:	aa0c      	add	r2, sp, #48	@ 0x30
 800da2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da2e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800da32:	e79e      	b.n	800d972 <__kernel_rem_pio2+0x1a2>
 800da34:	4b2f      	ldr	r3, [pc, #188]	@ (800daf4 <__kernel_rem_pio2+0x324>)
 800da36:	2200      	movs	r2, #0
 800da38:	f7f3 f88c 	bl	8000b54 <__aeabi_dcmpge>
 800da3c:	2800      	cmp	r0, #0
 800da3e:	d143      	bne.n	800dac8 <__kernel_rem_pio2+0x2f8>
 800da40:	4681      	mov	r9, r0
 800da42:	2200      	movs	r2, #0
 800da44:	2300      	movs	r3, #0
 800da46:	4630      	mov	r0, r6
 800da48:	4639      	mov	r1, r7
 800da4a:	f7f3 f865 	bl	8000b18 <__aeabi_dcmpeq>
 800da4e:	2800      	cmp	r0, #0
 800da50:	f000 80bf 	beq.w	800dbd2 <__kernel_rem_pio2+0x402>
 800da54:	f108 33ff 	add.w	r3, r8, #4294967295
 800da58:	2200      	movs	r2, #0
 800da5a:	9900      	ldr	r1, [sp, #0]
 800da5c:	428b      	cmp	r3, r1
 800da5e:	da6e      	bge.n	800db3e <__kernel_rem_pio2+0x36e>
 800da60:	2a00      	cmp	r2, #0
 800da62:	f000 8089 	beq.w	800db78 <__kernel_rem_pio2+0x3a8>
 800da66:	f108 38ff 	add.w	r8, r8, #4294967295
 800da6a:	ab0c      	add	r3, sp, #48	@ 0x30
 800da6c:	f1ab 0b18 	sub.w	fp, fp, #24
 800da70:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d0f6      	beq.n	800da66 <__kernel_rem_pio2+0x296>
 800da78:	4658      	mov	r0, fp
 800da7a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800dad8 <__kernel_rem_pio2+0x308>
 800da7e:	f000 f9ff 	bl	800de80 <scalbn>
 800da82:	f108 0301 	add.w	r3, r8, #1
 800da86:	00da      	lsls	r2, r3, #3
 800da88:	9205      	str	r2, [sp, #20]
 800da8a:	ec55 4b10 	vmov	r4, r5, d0
 800da8e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800da90:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800daec <__kernel_rem_pio2+0x31c>
 800da94:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800da98:	4646      	mov	r6, r8
 800da9a:	f04f 0a00 	mov.w	sl, #0
 800da9e:	2e00      	cmp	r6, #0
 800daa0:	f280 80cf 	bge.w	800dc42 <__kernel_rem_pio2+0x472>
 800daa4:	4644      	mov	r4, r8
 800daa6:	2c00      	cmp	r4, #0
 800daa8:	f2c0 80fd 	blt.w	800dca6 <__kernel_rem_pio2+0x4d6>
 800daac:	4b12      	ldr	r3, [pc, #72]	@ (800daf8 <__kernel_rem_pio2+0x328>)
 800daae:	461f      	mov	r7, r3
 800dab0:	ab70      	add	r3, sp, #448	@ 0x1c0
 800dab2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dab6:	9306      	str	r3, [sp, #24]
 800dab8:	f04f 0a00 	mov.w	sl, #0
 800dabc:	f04f 0b00 	mov.w	fp, #0
 800dac0:	2600      	movs	r6, #0
 800dac2:	eba8 0504 	sub.w	r5, r8, r4
 800dac6:	e0e2      	b.n	800dc8e <__kernel_rem_pio2+0x4be>
 800dac8:	f04f 0902 	mov.w	r9, #2
 800dacc:	e754      	b.n	800d978 <__kernel_rem_pio2+0x1a8>
 800dace:	bf00      	nop
	...
 800dadc:	3ff00000 	.word	0x3ff00000
 800dae0:	0800ec60 	.word	0x0800ec60
 800dae4:	40200000 	.word	0x40200000
 800dae8:	3ff00000 	.word	0x3ff00000
 800daec:	3e700000 	.word	0x3e700000
 800daf0:	41700000 	.word	0x41700000
 800daf4:	3fe00000 	.word	0x3fe00000
 800daf8:	0800ec20 	.word	0x0800ec20
 800dafc:	f854 3b04 	ldr.w	r3, [r4], #4
 800db00:	b945      	cbnz	r5, 800db14 <__kernel_rem_pio2+0x344>
 800db02:	b123      	cbz	r3, 800db0e <__kernel_rem_pio2+0x33e>
 800db04:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800db08:	f844 3c04 	str.w	r3, [r4, #-4]
 800db0c:	2301      	movs	r3, #1
 800db0e:	3201      	adds	r2, #1
 800db10:	461d      	mov	r5, r3
 800db12:	e738      	b.n	800d986 <__kernel_rem_pio2+0x1b6>
 800db14:	1acb      	subs	r3, r1, r3
 800db16:	e7f7      	b.n	800db08 <__kernel_rem_pio2+0x338>
 800db18:	f108 32ff 	add.w	r2, r8, #4294967295
 800db1c:	ab0c      	add	r3, sp, #48	@ 0x30
 800db1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db22:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800db26:	a90c      	add	r1, sp, #48	@ 0x30
 800db28:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800db2c:	e739      	b.n	800d9a2 <__kernel_rem_pio2+0x1d2>
 800db2e:	f108 32ff 	add.w	r2, r8, #4294967295
 800db32:	ab0c      	add	r3, sp, #48	@ 0x30
 800db34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db38:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800db3c:	e7f3      	b.n	800db26 <__kernel_rem_pio2+0x356>
 800db3e:	a90c      	add	r1, sp, #48	@ 0x30
 800db40:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800db44:	3b01      	subs	r3, #1
 800db46:	430a      	orrs	r2, r1
 800db48:	e787      	b.n	800da5a <__kernel_rem_pio2+0x28a>
 800db4a:	3401      	adds	r4, #1
 800db4c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800db50:	2a00      	cmp	r2, #0
 800db52:	d0fa      	beq.n	800db4a <__kernel_rem_pio2+0x37a>
 800db54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db56:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800db5a:	eb0d 0503 	add.w	r5, sp, r3
 800db5e:	9b06      	ldr	r3, [sp, #24]
 800db60:	aa20      	add	r2, sp, #128	@ 0x80
 800db62:	4443      	add	r3, r8
 800db64:	f108 0701 	add.w	r7, r8, #1
 800db68:	3d98      	subs	r5, #152	@ 0x98
 800db6a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800db6e:	4444      	add	r4, r8
 800db70:	42bc      	cmp	r4, r7
 800db72:	da04      	bge.n	800db7e <__kernel_rem_pio2+0x3ae>
 800db74:	46a0      	mov	r8, r4
 800db76:	e6a2      	b.n	800d8be <__kernel_rem_pio2+0xee>
 800db78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db7a:	2401      	movs	r4, #1
 800db7c:	e7e6      	b.n	800db4c <__kernel_rem_pio2+0x37c>
 800db7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db80:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800db84:	f7f2 fcf6 	bl	8000574 <__aeabi_i2d>
 800db88:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800de50 <__kernel_rem_pio2+0x680>
 800db8c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800db90:	ed8d 7b02 	vstr	d7, [sp, #8]
 800db94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800db98:	46b2      	mov	sl, r6
 800db9a:	f04f 0800 	mov.w	r8, #0
 800db9e:	9b05      	ldr	r3, [sp, #20]
 800dba0:	4598      	cmp	r8, r3
 800dba2:	dd05      	ble.n	800dbb0 <__kernel_rem_pio2+0x3e0>
 800dba4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dba8:	3701      	adds	r7, #1
 800dbaa:	eca5 7b02 	vstmia	r5!, {d7}
 800dbae:	e7df      	b.n	800db70 <__kernel_rem_pio2+0x3a0>
 800dbb0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800dbb4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dbb8:	f7f2 fd46 	bl	8000648 <__aeabi_dmul>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbc4:	f7f2 fb8a 	bl	80002dc <__adddf3>
 800dbc8:	f108 0801 	add.w	r8, r8, #1
 800dbcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbd0:	e7e5      	b.n	800db9e <__kernel_rem_pio2+0x3ce>
 800dbd2:	f1cb 0000 	rsb	r0, fp, #0
 800dbd6:	ec47 6b10 	vmov	d0, r6, r7
 800dbda:	f000 f951 	bl	800de80 <scalbn>
 800dbde:	ec55 4b10 	vmov	r4, r5, d0
 800dbe2:	4b9d      	ldr	r3, [pc, #628]	@ (800de58 <__kernel_rem_pio2+0x688>)
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	4629      	mov	r1, r5
 800dbea:	f7f2 ffb3 	bl	8000b54 <__aeabi_dcmpge>
 800dbee:	b300      	cbz	r0, 800dc32 <__kernel_rem_pio2+0x462>
 800dbf0:	4b9a      	ldr	r3, [pc, #616]	@ (800de5c <__kernel_rem_pio2+0x68c>)
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	4629      	mov	r1, r5
 800dbf8:	f7f2 fd26 	bl	8000648 <__aeabi_dmul>
 800dbfc:	f7f2 ffbe 	bl	8000b7c <__aeabi_d2iz>
 800dc00:	4606      	mov	r6, r0
 800dc02:	f7f2 fcb7 	bl	8000574 <__aeabi_i2d>
 800dc06:	4b94      	ldr	r3, [pc, #592]	@ (800de58 <__kernel_rem_pio2+0x688>)
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f7f2 fd1d 	bl	8000648 <__aeabi_dmul>
 800dc0e:	460b      	mov	r3, r1
 800dc10:	4602      	mov	r2, r0
 800dc12:	4629      	mov	r1, r5
 800dc14:	4620      	mov	r0, r4
 800dc16:	f7f2 fb5f 	bl	80002d8 <__aeabi_dsub>
 800dc1a:	f7f2 ffaf 	bl	8000b7c <__aeabi_d2iz>
 800dc1e:	ab0c      	add	r3, sp, #48	@ 0x30
 800dc20:	f10b 0b18 	add.w	fp, fp, #24
 800dc24:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800dc28:	f108 0801 	add.w	r8, r8, #1
 800dc2c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800dc30:	e722      	b.n	800da78 <__kernel_rem_pio2+0x2a8>
 800dc32:	4620      	mov	r0, r4
 800dc34:	4629      	mov	r1, r5
 800dc36:	f7f2 ffa1 	bl	8000b7c <__aeabi_d2iz>
 800dc3a:	ab0c      	add	r3, sp, #48	@ 0x30
 800dc3c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800dc40:	e71a      	b.n	800da78 <__kernel_rem_pio2+0x2a8>
 800dc42:	ab0c      	add	r3, sp, #48	@ 0x30
 800dc44:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dc48:	f7f2 fc94 	bl	8000574 <__aeabi_i2d>
 800dc4c:	4622      	mov	r2, r4
 800dc4e:	462b      	mov	r3, r5
 800dc50:	f7f2 fcfa 	bl	8000648 <__aeabi_dmul>
 800dc54:	4652      	mov	r2, sl
 800dc56:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800dc5a:	465b      	mov	r3, fp
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	4629      	mov	r1, r5
 800dc60:	f7f2 fcf2 	bl	8000648 <__aeabi_dmul>
 800dc64:	3e01      	subs	r6, #1
 800dc66:	4604      	mov	r4, r0
 800dc68:	460d      	mov	r5, r1
 800dc6a:	e718      	b.n	800da9e <__kernel_rem_pio2+0x2ce>
 800dc6c:	9906      	ldr	r1, [sp, #24]
 800dc6e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800dc72:	9106      	str	r1, [sp, #24]
 800dc74:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800dc78:	f7f2 fce6 	bl	8000648 <__aeabi_dmul>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	460b      	mov	r3, r1
 800dc80:	4650      	mov	r0, sl
 800dc82:	4659      	mov	r1, fp
 800dc84:	f7f2 fb2a 	bl	80002dc <__adddf3>
 800dc88:	3601      	adds	r6, #1
 800dc8a:	4682      	mov	sl, r0
 800dc8c:	468b      	mov	fp, r1
 800dc8e:	9b00      	ldr	r3, [sp, #0]
 800dc90:	429e      	cmp	r6, r3
 800dc92:	dc01      	bgt.n	800dc98 <__kernel_rem_pio2+0x4c8>
 800dc94:	42b5      	cmp	r5, r6
 800dc96:	dae9      	bge.n	800dc6c <__kernel_rem_pio2+0x49c>
 800dc98:	ab48      	add	r3, sp, #288	@ 0x120
 800dc9a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dc9e:	e9c5 ab00 	strd	sl, fp, [r5]
 800dca2:	3c01      	subs	r4, #1
 800dca4:	e6ff      	b.n	800daa6 <__kernel_rem_pio2+0x2d6>
 800dca6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800dca8:	2b02      	cmp	r3, #2
 800dcaa:	dc0b      	bgt.n	800dcc4 <__kernel_rem_pio2+0x4f4>
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	dc39      	bgt.n	800dd24 <__kernel_rem_pio2+0x554>
 800dcb0:	d05d      	beq.n	800dd6e <__kernel_rem_pio2+0x59e>
 800dcb2:	9b02      	ldr	r3, [sp, #8]
 800dcb4:	f003 0007 	and.w	r0, r3, #7
 800dcb8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800dcbc:	ecbd 8b02 	vpop	{d8}
 800dcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800dcc6:	2b03      	cmp	r3, #3
 800dcc8:	d1f3      	bne.n	800dcb2 <__kernel_rem_pio2+0x4e2>
 800dcca:	9b05      	ldr	r3, [sp, #20]
 800dccc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dcd0:	eb0d 0403 	add.w	r4, sp, r3
 800dcd4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800dcd8:	4625      	mov	r5, r4
 800dcda:	46c2      	mov	sl, r8
 800dcdc:	f1ba 0f00 	cmp.w	sl, #0
 800dce0:	f1a5 0508 	sub.w	r5, r5, #8
 800dce4:	dc6b      	bgt.n	800ddbe <__kernel_rem_pio2+0x5ee>
 800dce6:	4645      	mov	r5, r8
 800dce8:	2d01      	cmp	r5, #1
 800dcea:	f1a4 0408 	sub.w	r4, r4, #8
 800dcee:	f300 8087 	bgt.w	800de00 <__kernel_rem_pio2+0x630>
 800dcf2:	9c05      	ldr	r4, [sp, #20]
 800dcf4:	ab48      	add	r3, sp, #288	@ 0x120
 800dcf6:	441c      	add	r4, r3
 800dcf8:	2000      	movs	r0, #0
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	f1b8 0f01 	cmp.w	r8, #1
 800dd00:	f300 809c 	bgt.w	800de3c <__kernel_rem_pio2+0x66c>
 800dd04:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800dd08:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800dd0c:	f1b9 0f00 	cmp.w	r9, #0
 800dd10:	f040 80a6 	bne.w	800de60 <__kernel_rem_pio2+0x690>
 800dd14:	9b04      	ldr	r3, [sp, #16]
 800dd16:	e9c3 7800 	strd	r7, r8, [r3]
 800dd1a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800dd1e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dd22:	e7c6      	b.n	800dcb2 <__kernel_rem_pio2+0x4e2>
 800dd24:	9d05      	ldr	r5, [sp, #20]
 800dd26:	ab48      	add	r3, sp, #288	@ 0x120
 800dd28:	441d      	add	r5, r3
 800dd2a:	4644      	mov	r4, r8
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	2100      	movs	r1, #0
 800dd30:	2c00      	cmp	r4, #0
 800dd32:	da35      	bge.n	800dda0 <__kernel_rem_pio2+0x5d0>
 800dd34:	f1b9 0f00 	cmp.w	r9, #0
 800dd38:	d038      	beq.n	800ddac <__kernel_rem_pio2+0x5dc>
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd40:	9c04      	ldr	r4, [sp, #16]
 800dd42:	e9c4 2300 	strd	r2, r3, [r4]
 800dd46:	4602      	mov	r2, r0
 800dd48:	460b      	mov	r3, r1
 800dd4a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800dd4e:	f7f2 fac3 	bl	80002d8 <__aeabi_dsub>
 800dd52:	ad4a      	add	r5, sp, #296	@ 0x128
 800dd54:	2401      	movs	r4, #1
 800dd56:	45a0      	cmp	r8, r4
 800dd58:	da2b      	bge.n	800ddb2 <__kernel_rem_pio2+0x5e2>
 800dd5a:	f1b9 0f00 	cmp.w	r9, #0
 800dd5e:	d002      	beq.n	800dd66 <__kernel_rem_pio2+0x596>
 800dd60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd64:	4619      	mov	r1, r3
 800dd66:	9b04      	ldr	r3, [sp, #16]
 800dd68:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dd6c:	e7a1      	b.n	800dcb2 <__kernel_rem_pio2+0x4e2>
 800dd6e:	9c05      	ldr	r4, [sp, #20]
 800dd70:	ab48      	add	r3, sp, #288	@ 0x120
 800dd72:	441c      	add	r4, r3
 800dd74:	2000      	movs	r0, #0
 800dd76:	2100      	movs	r1, #0
 800dd78:	f1b8 0f00 	cmp.w	r8, #0
 800dd7c:	da09      	bge.n	800dd92 <__kernel_rem_pio2+0x5c2>
 800dd7e:	f1b9 0f00 	cmp.w	r9, #0
 800dd82:	d002      	beq.n	800dd8a <__kernel_rem_pio2+0x5ba>
 800dd84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd88:	4619      	mov	r1, r3
 800dd8a:	9b04      	ldr	r3, [sp, #16]
 800dd8c:	e9c3 0100 	strd	r0, r1, [r3]
 800dd90:	e78f      	b.n	800dcb2 <__kernel_rem_pio2+0x4e2>
 800dd92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dd96:	f7f2 faa1 	bl	80002dc <__adddf3>
 800dd9a:	f108 38ff 	add.w	r8, r8, #4294967295
 800dd9e:	e7eb      	b.n	800dd78 <__kernel_rem_pio2+0x5a8>
 800dda0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800dda4:	f7f2 fa9a 	bl	80002dc <__adddf3>
 800dda8:	3c01      	subs	r4, #1
 800ddaa:	e7c1      	b.n	800dd30 <__kernel_rem_pio2+0x560>
 800ddac:	4602      	mov	r2, r0
 800ddae:	460b      	mov	r3, r1
 800ddb0:	e7c6      	b.n	800dd40 <__kernel_rem_pio2+0x570>
 800ddb2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ddb6:	f7f2 fa91 	bl	80002dc <__adddf3>
 800ddba:	3401      	adds	r4, #1
 800ddbc:	e7cb      	b.n	800dd56 <__kernel_rem_pio2+0x586>
 800ddbe:	ed95 7b00 	vldr	d7, [r5]
 800ddc2:	ed8d 7b00 	vstr	d7, [sp]
 800ddc6:	ed95 7b02 	vldr	d7, [r5, #8]
 800ddca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ddce:	ec53 2b17 	vmov	r2, r3, d7
 800ddd2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ddd6:	f7f2 fa81 	bl	80002dc <__adddf3>
 800ddda:	4602      	mov	r2, r0
 800dddc:	460b      	mov	r3, r1
 800ddde:	4606      	mov	r6, r0
 800dde0:	460f      	mov	r7, r1
 800dde2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dde6:	f7f2 fa77 	bl	80002d8 <__aeabi_dsub>
 800ddea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ddee:	f7f2 fa75 	bl	80002dc <__adddf3>
 800ddf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ddf6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800ddfa:	e9c5 6700 	strd	r6, r7, [r5]
 800ddfe:	e76d      	b.n	800dcdc <__kernel_rem_pio2+0x50c>
 800de00:	ed94 7b00 	vldr	d7, [r4]
 800de04:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800de08:	ec51 0b17 	vmov	r0, r1, d7
 800de0c:	4652      	mov	r2, sl
 800de0e:	465b      	mov	r3, fp
 800de10:	ed8d 7b00 	vstr	d7, [sp]
 800de14:	f7f2 fa62 	bl	80002dc <__adddf3>
 800de18:	4602      	mov	r2, r0
 800de1a:	460b      	mov	r3, r1
 800de1c:	4606      	mov	r6, r0
 800de1e:	460f      	mov	r7, r1
 800de20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de24:	f7f2 fa58 	bl	80002d8 <__aeabi_dsub>
 800de28:	4652      	mov	r2, sl
 800de2a:	465b      	mov	r3, fp
 800de2c:	f7f2 fa56 	bl	80002dc <__adddf3>
 800de30:	3d01      	subs	r5, #1
 800de32:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800de36:	e9c4 6700 	strd	r6, r7, [r4]
 800de3a:	e755      	b.n	800dce8 <__kernel_rem_pio2+0x518>
 800de3c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800de40:	f7f2 fa4c 	bl	80002dc <__adddf3>
 800de44:	f108 38ff 	add.w	r8, r8, #4294967295
 800de48:	e758      	b.n	800dcfc <__kernel_rem_pio2+0x52c>
 800de4a:	bf00      	nop
 800de4c:	f3af 8000 	nop.w
	...
 800de58:	41700000 	.word	0x41700000
 800de5c:	3e700000 	.word	0x3e700000
 800de60:	9b04      	ldr	r3, [sp, #16]
 800de62:	9a04      	ldr	r2, [sp, #16]
 800de64:	601f      	str	r7, [r3, #0]
 800de66:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800de6a:	605c      	str	r4, [r3, #4]
 800de6c:	609d      	str	r5, [r3, #8]
 800de6e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800de72:	60d3      	str	r3, [r2, #12]
 800de74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800de78:	6110      	str	r0, [r2, #16]
 800de7a:	6153      	str	r3, [r2, #20]
 800de7c:	e719      	b.n	800dcb2 <__kernel_rem_pio2+0x4e2>
 800de7e:	bf00      	nop

0800de80 <scalbn>:
 800de80:	b570      	push	{r4, r5, r6, lr}
 800de82:	ec55 4b10 	vmov	r4, r5, d0
 800de86:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800de8a:	4606      	mov	r6, r0
 800de8c:	462b      	mov	r3, r5
 800de8e:	b991      	cbnz	r1, 800deb6 <scalbn+0x36>
 800de90:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800de94:	4323      	orrs	r3, r4
 800de96:	d03d      	beq.n	800df14 <scalbn+0x94>
 800de98:	4b35      	ldr	r3, [pc, #212]	@ (800df70 <scalbn+0xf0>)
 800de9a:	4620      	mov	r0, r4
 800de9c:	4629      	mov	r1, r5
 800de9e:	2200      	movs	r2, #0
 800dea0:	f7f2 fbd2 	bl	8000648 <__aeabi_dmul>
 800dea4:	4b33      	ldr	r3, [pc, #204]	@ (800df74 <scalbn+0xf4>)
 800dea6:	429e      	cmp	r6, r3
 800dea8:	4604      	mov	r4, r0
 800deaa:	460d      	mov	r5, r1
 800deac:	da0f      	bge.n	800dece <scalbn+0x4e>
 800deae:	a328      	add	r3, pc, #160	@ (adr r3, 800df50 <scalbn+0xd0>)
 800deb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb4:	e01e      	b.n	800def4 <scalbn+0x74>
 800deb6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800deba:	4291      	cmp	r1, r2
 800debc:	d10b      	bne.n	800ded6 <scalbn+0x56>
 800debe:	4622      	mov	r2, r4
 800dec0:	4620      	mov	r0, r4
 800dec2:	4629      	mov	r1, r5
 800dec4:	f7f2 fa0a 	bl	80002dc <__adddf3>
 800dec8:	4604      	mov	r4, r0
 800deca:	460d      	mov	r5, r1
 800decc:	e022      	b.n	800df14 <scalbn+0x94>
 800dece:	460b      	mov	r3, r1
 800ded0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ded4:	3936      	subs	r1, #54	@ 0x36
 800ded6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800deda:	4296      	cmp	r6, r2
 800dedc:	dd0d      	ble.n	800defa <scalbn+0x7a>
 800dede:	2d00      	cmp	r5, #0
 800dee0:	a11d      	add	r1, pc, #116	@ (adr r1, 800df58 <scalbn+0xd8>)
 800dee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dee6:	da02      	bge.n	800deee <scalbn+0x6e>
 800dee8:	a11d      	add	r1, pc, #116	@ (adr r1, 800df60 <scalbn+0xe0>)
 800deea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800deee:	a31a      	add	r3, pc, #104	@ (adr r3, 800df58 <scalbn+0xd8>)
 800def0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def4:	f7f2 fba8 	bl	8000648 <__aeabi_dmul>
 800def8:	e7e6      	b.n	800dec8 <scalbn+0x48>
 800defa:	1872      	adds	r2, r6, r1
 800defc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800df00:	428a      	cmp	r2, r1
 800df02:	dcec      	bgt.n	800dede <scalbn+0x5e>
 800df04:	2a00      	cmp	r2, #0
 800df06:	dd08      	ble.n	800df1a <scalbn+0x9a>
 800df08:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800df0c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800df10:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800df14:	ec45 4b10 	vmov	d0, r4, r5
 800df18:	bd70      	pop	{r4, r5, r6, pc}
 800df1a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800df1e:	da08      	bge.n	800df32 <scalbn+0xb2>
 800df20:	2d00      	cmp	r5, #0
 800df22:	a10b      	add	r1, pc, #44	@ (adr r1, 800df50 <scalbn+0xd0>)
 800df24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df28:	dac1      	bge.n	800deae <scalbn+0x2e>
 800df2a:	a10f      	add	r1, pc, #60	@ (adr r1, 800df68 <scalbn+0xe8>)
 800df2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df30:	e7bd      	b.n	800deae <scalbn+0x2e>
 800df32:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800df36:	3236      	adds	r2, #54	@ 0x36
 800df38:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800df3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800df40:	4620      	mov	r0, r4
 800df42:	4b0d      	ldr	r3, [pc, #52]	@ (800df78 <scalbn+0xf8>)
 800df44:	4629      	mov	r1, r5
 800df46:	2200      	movs	r2, #0
 800df48:	e7d4      	b.n	800def4 <scalbn+0x74>
 800df4a:	bf00      	nop
 800df4c:	f3af 8000 	nop.w
 800df50:	c2f8f359 	.word	0xc2f8f359
 800df54:	01a56e1f 	.word	0x01a56e1f
 800df58:	8800759c 	.word	0x8800759c
 800df5c:	7e37e43c 	.word	0x7e37e43c
 800df60:	8800759c 	.word	0x8800759c
 800df64:	fe37e43c 	.word	0xfe37e43c
 800df68:	c2f8f359 	.word	0xc2f8f359
 800df6c:	81a56e1f 	.word	0x81a56e1f
 800df70:	43500000 	.word	0x43500000
 800df74:	ffff3cb0 	.word	0xffff3cb0
 800df78:	3c900000 	.word	0x3c900000
 800df7c:	00000000 	.word	0x00000000

0800df80 <floor>:
 800df80:	ec51 0b10 	vmov	r0, r1, d0
 800df84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800df88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df8c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800df90:	2e13      	cmp	r6, #19
 800df92:	460c      	mov	r4, r1
 800df94:	4605      	mov	r5, r0
 800df96:	4680      	mov	r8, r0
 800df98:	dc34      	bgt.n	800e004 <floor+0x84>
 800df9a:	2e00      	cmp	r6, #0
 800df9c:	da17      	bge.n	800dfce <floor+0x4e>
 800df9e:	a332      	add	r3, pc, #200	@ (adr r3, 800e068 <floor+0xe8>)
 800dfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa4:	f7f2 f99a 	bl	80002dc <__adddf3>
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	2300      	movs	r3, #0
 800dfac:	f7f2 fddc 	bl	8000b68 <__aeabi_dcmpgt>
 800dfb0:	b150      	cbz	r0, 800dfc8 <floor+0x48>
 800dfb2:	2c00      	cmp	r4, #0
 800dfb4:	da55      	bge.n	800e062 <floor+0xe2>
 800dfb6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800dfba:	432c      	orrs	r4, r5
 800dfbc:	2500      	movs	r5, #0
 800dfbe:	42ac      	cmp	r4, r5
 800dfc0:	4c2b      	ldr	r4, [pc, #172]	@ (800e070 <floor+0xf0>)
 800dfc2:	bf08      	it	eq
 800dfc4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800dfc8:	4621      	mov	r1, r4
 800dfca:	4628      	mov	r0, r5
 800dfcc:	e023      	b.n	800e016 <floor+0x96>
 800dfce:	4f29      	ldr	r7, [pc, #164]	@ (800e074 <floor+0xf4>)
 800dfd0:	4137      	asrs	r7, r6
 800dfd2:	ea01 0307 	and.w	r3, r1, r7
 800dfd6:	4303      	orrs	r3, r0
 800dfd8:	d01d      	beq.n	800e016 <floor+0x96>
 800dfda:	a323      	add	r3, pc, #140	@ (adr r3, 800e068 <floor+0xe8>)
 800dfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe0:	f7f2 f97c 	bl	80002dc <__adddf3>
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	f7f2 fdbe 	bl	8000b68 <__aeabi_dcmpgt>
 800dfec:	2800      	cmp	r0, #0
 800dfee:	d0eb      	beq.n	800dfc8 <floor+0x48>
 800dff0:	2c00      	cmp	r4, #0
 800dff2:	bfbe      	ittt	lt
 800dff4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800dff8:	4133      	asrlt	r3, r6
 800dffa:	18e4      	addlt	r4, r4, r3
 800dffc:	ea24 0407 	bic.w	r4, r4, r7
 800e000:	2500      	movs	r5, #0
 800e002:	e7e1      	b.n	800dfc8 <floor+0x48>
 800e004:	2e33      	cmp	r6, #51	@ 0x33
 800e006:	dd0a      	ble.n	800e01e <floor+0x9e>
 800e008:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e00c:	d103      	bne.n	800e016 <floor+0x96>
 800e00e:	4602      	mov	r2, r0
 800e010:	460b      	mov	r3, r1
 800e012:	f7f2 f963 	bl	80002dc <__adddf3>
 800e016:	ec41 0b10 	vmov	d0, r0, r1
 800e01a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e01e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e022:	f04f 37ff 	mov.w	r7, #4294967295
 800e026:	40df      	lsrs	r7, r3
 800e028:	4207      	tst	r7, r0
 800e02a:	d0f4      	beq.n	800e016 <floor+0x96>
 800e02c:	a30e      	add	r3, pc, #56	@ (adr r3, 800e068 <floor+0xe8>)
 800e02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e032:	f7f2 f953 	bl	80002dc <__adddf3>
 800e036:	2200      	movs	r2, #0
 800e038:	2300      	movs	r3, #0
 800e03a:	f7f2 fd95 	bl	8000b68 <__aeabi_dcmpgt>
 800e03e:	2800      	cmp	r0, #0
 800e040:	d0c2      	beq.n	800dfc8 <floor+0x48>
 800e042:	2c00      	cmp	r4, #0
 800e044:	da0a      	bge.n	800e05c <floor+0xdc>
 800e046:	2e14      	cmp	r6, #20
 800e048:	d101      	bne.n	800e04e <floor+0xce>
 800e04a:	3401      	adds	r4, #1
 800e04c:	e006      	b.n	800e05c <floor+0xdc>
 800e04e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e052:	2301      	movs	r3, #1
 800e054:	40b3      	lsls	r3, r6
 800e056:	441d      	add	r5, r3
 800e058:	4545      	cmp	r5, r8
 800e05a:	d3f6      	bcc.n	800e04a <floor+0xca>
 800e05c:	ea25 0507 	bic.w	r5, r5, r7
 800e060:	e7b2      	b.n	800dfc8 <floor+0x48>
 800e062:	2500      	movs	r5, #0
 800e064:	462c      	mov	r4, r5
 800e066:	e7af      	b.n	800dfc8 <floor+0x48>
 800e068:	8800759c 	.word	0x8800759c
 800e06c:	7e37e43c 	.word	0x7e37e43c
 800e070:	bff00000 	.word	0xbff00000
 800e074:	000fffff 	.word	0x000fffff

0800e078 <calloc>:
 800e078:	4b02      	ldr	r3, [pc, #8]	@ (800e084 <calloc+0xc>)
 800e07a:	460a      	mov	r2, r1
 800e07c:	4601      	mov	r1, r0
 800e07e:	6818      	ldr	r0, [r3, #0]
 800e080:	f000 b802 	b.w	800e088 <_calloc_r>
 800e084:	20000184 	.word	0x20000184

0800e088 <_calloc_r>:
 800e088:	b570      	push	{r4, r5, r6, lr}
 800e08a:	fba1 5402 	umull	r5, r4, r1, r2
 800e08e:	b93c      	cbnz	r4, 800e0a0 <_calloc_r+0x18>
 800e090:	4629      	mov	r1, r5
 800e092:	f000 f82f 	bl	800e0f4 <_malloc_r>
 800e096:	4606      	mov	r6, r0
 800e098:	b928      	cbnz	r0, 800e0a6 <_calloc_r+0x1e>
 800e09a:	2600      	movs	r6, #0
 800e09c:	4630      	mov	r0, r6
 800e09e:	bd70      	pop	{r4, r5, r6, pc}
 800e0a0:	220c      	movs	r2, #12
 800e0a2:	6002      	str	r2, [r0, #0]
 800e0a4:	e7f9      	b.n	800e09a <_calloc_r+0x12>
 800e0a6:	462a      	mov	r2, r5
 800e0a8:	4621      	mov	r1, r4
 800e0aa:	f000 f8e3 	bl	800e274 <memset>
 800e0ae:	e7f5      	b.n	800e09c <_calloc_r+0x14>

0800e0b0 <sbrk_aligned>:
 800e0b0:	b570      	push	{r4, r5, r6, lr}
 800e0b2:	4e0f      	ldr	r6, [pc, #60]	@ (800e0f0 <sbrk_aligned+0x40>)
 800e0b4:	460c      	mov	r4, r1
 800e0b6:	6831      	ldr	r1, [r6, #0]
 800e0b8:	4605      	mov	r5, r0
 800e0ba:	b911      	cbnz	r1, 800e0c2 <sbrk_aligned+0x12>
 800e0bc:	f000 f8e2 	bl	800e284 <_sbrk_r>
 800e0c0:	6030      	str	r0, [r6, #0]
 800e0c2:	4621      	mov	r1, r4
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	f000 f8dd 	bl	800e284 <_sbrk_r>
 800e0ca:	1c43      	adds	r3, r0, #1
 800e0cc:	d103      	bne.n	800e0d6 <sbrk_aligned+0x26>
 800e0ce:	f04f 34ff 	mov.w	r4, #4294967295
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	bd70      	pop	{r4, r5, r6, pc}
 800e0d6:	1cc4      	adds	r4, r0, #3
 800e0d8:	f024 0403 	bic.w	r4, r4, #3
 800e0dc:	42a0      	cmp	r0, r4
 800e0de:	d0f8      	beq.n	800e0d2 <sbrk_aligned+0x22>
 800e0e0:	1a21      	subs	r1, r4, r0
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	f000 f8ce 	bl	800e284 <_sbrk_r>
 800e0e8:	3001      	adds	r0, #1
 800e0ea:	d1f2      	bne.n	800e0d2 <sbrk_aligned+0x22>
 800e0ec:	e7ef      	b.n	800e0ce <sbrk_aligned+0x1e>
 800e0ee:	bf00      	nop
 800e0f0:	20002100 	.word	0x20002100

0800e0f4 <_malloc_r>:
 800e0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0f8:	1ccd      	adds	r5, r1, #3
 800e0fa:	f025 0503 	bic.w	r5, r5, #3
 800e0fe:	3508      	adds	r5, #8
 800e100:	2d0c      	cmp	r5, #12
 800e102:	bf38      	it	cc
 800e104:	250c      	movcc	r5, #12
 800e106:	2d00      	cmp	r5, #0
 800e108:	4606      	mov	r6, r0
 800e10a:	db01      	blt.n	800e110 <_malloc_r+0x1c>
 800e10c:	42a9      	cmp	r1, r5
 800e10e:	d904      	bls.n	800e11a <_malloc_r+0x26>
 800e110:	230c      	movs	r3, #12
 800e112:	6033      	str	r3, [r6, #0]
 800e114:	2000      	movs	r0, #0
 800e116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e11a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e1f0 <_malloc_r+0xfc>
 800e11e:	f000 f869 	bl	800e1f4 <__malloc_lock>
 800e122:	f8d8 3000 	ldr.w	r3, [r8]
 800e126:	461c      	mov	r4, r3
 800e128:	bb44      	cbnz	r4, 800e17c <_malloc_r+0x88>
 800e12a:	4629      	mov	r1, r5
 800e12c:	4630      	mov	r0, r6
 800e12e:	f7ff ffbf 	bl	800e0b0 <sbrk_aligned>
 800e132:	1c43      	adds	r3, r0, #1
 800e134:	4604      	mov	r4, r0
 800e136:	d158      	bne.n	800e1ea <_malloc_r+0xf6>
 800e138:	f8d8 4000 	ldr.w	r4, [r8]
 800e13c:	4627      	mov	r7, r4
 800e13e:	2f00      	cmp	r7, #0
 800e140:	d143      	bne.n	800e1ca <_malloc_r+0xd6>
 800e142:	2c00      	cmp	r4, #0
 800e144:	d04b      	beq.n	800e1de <_malloc_r+0xea>
 800e146:	6823      	ldr	r3, [r4, #0]
 800e148:	4639      	mov	r1, r7
 800e14a:	4630      	mov	r0, r6
 800e14c:	eb04 0903 	add.w	r9, r4, r3
 800e150:	f000 f898 	bl	800e284 <_sbrk_r>
 800e154:	4581      	cmp	r9, r0
 800e156:	d142      	bne.n	800e1de <_malloc_r+0xea>
 800e158:	6821      	ldr	r1, [r4, #0]
 800e15a:	1a6d      	subs	r5, r5, r1
 800e15c:	4629      	mov	r1, r5
 800e15e:	4630      	mov	r0, r6
 800e160:	f7ff ffa6 	bl	800e0b0 <sbrk_aligned>
 800e164:	3001      	adds	r0, #1
 800e166:	d03a      	beq.n	800e1de <_malloc_r+0xea>
 800e168:	6823      	ldr	r3, [r4, #0]
 800e16a:	442b      	add	r3, r5
 800e16c:	6023      	str	r3, [r4, #0]
 800e16e:	f8d8 3000 	ldr.w	r3, [r8]
 800e172:	685a      	ldr	r2, [r3, #4]
 800e174:	bb62      	cbnz	r2, 800e1d0 <_malloc_r+0xdc>
 800e176:	f8c8 7000 	str.w	r7, [r8]
 800e17a:	e00f      	b.n	800e19c <_malloc_r+0xa8>
 800e17c:	6822      	ldr	r2, [r4, #0]
 800e17e:	1b52      	subs	r2, r2, r5
 800e180:	d420      	bmi.n	800e1c4 <_malloc_r+0xd0>
 800e182:	2a0b      	cmp	r2, #11
 800e184:	d917      	bls.n	800e1b6 <_malloc_r+0xc2>
 800e186:	1961      	adds	r1, r4, r5
 800e188:	42a3      	cmp	r3, r4
 800e18a:	6025      	str	r5, [r4, #0]
 800e18c:	bf18      	it	ne
 800e18e:	6059      	strne	r1, [r3, #4]
 800e190:	6863      	ldr	r3, [r4, #4]
 800e192:	bf08      	it	eq
 800e194:	f8c8 1000 	streq.w	r1, [r8]
 800e198:	5162      	str	r2, [r4, r5]
 800e19a:	604b      	str	r3, [r1, #4]
 800e19c:	4630      	mov	r0, r6
 800e19e:	f000 f82f 	bl	800e200 <__malloc_unlock>
 800e1a2:	f104 000b 	add.w	r0, r4, #11
 800e1a6:	1d23      	adds	r3, r4, #4
 800e1a8:	f020 0007 	bic.w	r0, r0, #7
 800e1ac:	1ac2      	subs	r2, r0, r3
 800e1ae:	bf1c      	itt	ne
 800e1b0:	1a1b      	subne	r3, r3, r0
 800e1b2:	50a3      	strne	r3, [r4, r2]
 800e1b4:	e7af      	b.n	800e116 <_malloc_r+0x22>
 800e1b6:	6862      	ldr	r2, [r4, #4]
 800e1b8:	42a3      	cmp	r3, r4
 800e1ba:	bf0c      	ite	eq
 800e1bc:	f8c8 2000 	streq.w	r2, [r8]
 800e1c0:	605a      	strne	r2, [r3, #4]
 800e1c2:	e7eb      	b.n	800e19c <_malloc_r+0xa8>
 800e1c4:	4623      	mov	r3, r4
 800e1c6:	6864      	ldr	r4, [r4, #4]
 800e1c8:	e7ae      	b.n	800e128 <_malloc_r+0x34>
 800e1ca:	463c      	mov	r4, r7
 800e1cc:	687f      	ldr	r7, [r7, #4]
 800e1ce:	e7b6      	b.n	800e13e <_malloc_r+0x4a>
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	42a3      	cmp	r3, r4
 800e1d6:	d1fb      	bne.n	800e1d0 <_malloc_r+0xdc>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	6053      	str	r3, [r2, #4]
 800e1dc:	e7de      	b.n	800e19c <_malloc_r+0xa8>
 800e1de:	230c      	movs	r3, #12
 800e1e0:	6033      	str	r3, [r6, #0]
 800e1e2:	4630      	mov	r0, r6
 800e1e4:	f000 f80c 	bl	800e200 <__malloc_unlock>
 800e1e8:	e794      	b.n	800e114 <_malloc_r+0x20>
 800e1ea:	6005      	str	r5, [r0, #0]
 800e1ec:	e7d6      	b.n	800e19c <_malloc_r+0xa8>
 800e1ee:	bf00      	nop
 800e1f0:	20002104 	.word	0x20002104

0800e1f4 <__malloc_lock>:
 800e1f4:	4801      	ldr	r0, [pc, #4]	@ (800e1fc <__malloc_lock+0x8>)
 800e1f6:	f000 b87f 	b.w	800e2f8 <__retarget_lock_acquire_recursive>
 800e1fa:	bf00      	nop
 800e1fc:	20002244 	.word	0x20002244

0800e200 <__malloc_unlock>:
 800e200:	4801      	ldr	r0, [pc, #4]	@ (800e208 <__malloc_unlock+0x8>)
 800e202:	f000 b87a 	b.w	800e2fa <__retarget_lock_release_recursive>
 800e206:	bf00      	nop
 800e208:	20002244 	.word	0x20002244

0800e20c <sniprintf>:
 800e20c:	b40c      	push	{r2, r3}
 800e20e:	b530      	push	{r4, r5, lr}
 800e210:	4b17      	ldr	r3, [pc, #92]	@ (800e270 <sniprintf+0x64>)
 800e212:	1e0c      	subs	r4, r1, #0
 800e214:	681d      	ldr	r5, [r3, #0]
 800e216:	b09d      	sub	sp, #116	@ 0x74
 800e218:	da08      	bge.n	800e22c <sniprintf+0x20>
 800e21a:	238b      	movs	r3, #139	@ 0x8b
 800e21c:	602b      	str	r3, [r5, #0]
 800e21e:	f04f 30ff 	mov.w	r0, #4294967295
 800e222:	b01d      	add	sp, #116	@ 0x74
 800e224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e228:	b002      	add	sp, #8
 800e22a:	4770      	bx	lr
 800e22c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e230:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e234:	bf14      	ite	ne
 800e236:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e23a:	4623      	moveq	r3, r4
 800e23c:	9304      	str	r3, [sp, #16]
 800e23e:	9307      	str	r3, [sp, #28]
 800e240:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e244:	9002      	str	r0, [sp, #8]
 800e246:	9006      	str	r0, [sp, #24]
 800e248:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e24c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e24e:	ab21      	add	r3, sp, #132	@ 0x84
 800e250:	a902      	add	r1, sp, #8
 800e252:	4628      	mov	r0, r5
 800e254:	9301      	str	r3, [sp, #4]
 800e256:	f000 f8f7 	bl	800e448 <_svfiprintf_r>
 800e25a:	1c43      	adds	r3, r0, #1
 800e25c:	bfbc      	itt	lt
 800e25e:	238b      	movlt	r3, #139	@ 0x8b
 800e260:	602b      	strlt	r3, [r5, #0]
 800e262:	2c00      	cmp	r4, #0
 800e264:	d0dd      	beq.n	800e222 <sniprintf+0x16>
 800e266:	9b02      	ldr	r3, [sp, #8]
 800e268:	2200      	movs	r2, #0
 800e26a:	701a      	strb	r2, [r3, #0]
 800e26c:	e7d9      	b.n	800e222 <sniprintf+0x16>
 800e26e:	bf00      	nop
 800e270:	20000184 	.word	0x20000184

0800e274 <memset>:
 800e274:	4402      	add	r2, r0
 800e276:	4603      	mov	r3, r0
 800e278:	4293      	cmp	r3, r2
 800e27a:	d100      	bne.n	800e27e <memset+0xa>
 800e27c:	4770      	bx	lr
 800e27e:	f803 1b01 	strb.w	r1, [r3], #1
 800e282:	e7f9      	b.n	800e278 <memset+0x4>

0800e284 <_sbrk_r>:
 800e284:	b538      	push	{r3, r4, r5, lr}
 800e286:	4d06      	ldr	r5, [pc, #24]	@ (800e2a0 <_sbrk_r+0x1c>)
 800e288:	2300      	movs	r3, #0
 800e28a:	4604      	mov	r4, r0
 800e28c:	4608      	mov	r0, r1
 800e28e:	602b      	str	r3, [r5, #0]
 800e290:	f7f3 ff0c 	bl	80020ac <_sbrk>
 800e294:	1c43      	adds	r3, r0, #1
 800e296:	d102      	bne.n	800e29e <_sbrk_r+0x1a>
 800e298:	682b      	ldr	r3, [r5, #0]
 800e29a:	b103      	cbz	r3, 800e29e <_sbrk_r+0x1a>
 800e29c:	6023      	str	r3, [r4, #0]
 800e29e:	bd38      	pop	{r3, r4, r5, pc}
 800e2a0:	20002240 	.word	0x20002240

0800e2a4 <__errno>:
 800e2a4:	4b01      	ldr	r3, [pc, #4]	@ (800e2ac <__errno+0x8>)
 800e2a6:	6818      	ldr	r0, [r3, #0]
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop
 800e2ac:	20000184 	.word	0x20000184

0800e2b0 <__libc_init_array>:
 800e2b0:	b570      	push	{r4, r5, r6, lr}
 800e2b2:	4d0d      	ldr	r5, [pc, #52]	@ (800e2e8 <__libc_init_array+0x38>)
 800e2b4:	4c0d      	ldr	r4, [pc, #52]	@ (800e2ec <__libc_init_array+0x3c>)
 800e2b6:	1b64      	subs	r4, r4, r5
 800e2b8:	10a4      	asrs	r4, r4, #2
 800e2ba:	2600      	movs	r6, #0
 800e2bc:	42a6      	cmp	r6, r4
 800e2be:	d109      	bne.n	800e2d4 <__libc_init_array+0x24>
 800e2c0:	4d0b      	ldr	r5, [pc, #44]	@ (800e2f0 <__libc_init_array+0x40>)
 800e2c2:	4c0c      	ldr	r4, [pc, #48]	@ (800e2f4 <__libc_init_array+0x44>)
 800e2c4:	f000 fba8 	bl	800ea18 <_init>
 800e2c8:	1b64      	subs	r4, r4, r5
 800e2ca:	10a4      	asrs	r4, r4, #2
 800e2cc:	2600      	movs	r6, #0
 800e2ce:	42a6      	cmp	r6, r4
 800e2d0:	d105      	bne.n	800e2de <__libc_init_array+0x2e>
 800e2d2:	bd70      	pop	{r4, r5, r6, pc}
 800e2d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2d8:	4798      	blx	r3
 800e2da:	3601      	adds	r6, #1
 800e2dc:	e7ee      	b.n	800e2bc <__libc_init_array+0xc>
 800e2de:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2e2:	4798      	blx	r3
 800e2e4:	3601      	adds	r6, #1
 800e2e6:	e7f2      	b.n	800e2ce <__libc_init_array+0x1e>
 800e2e8:	0800ecac 	.word	0x0800ecac
 800e2ec:	0800ecac 	.word	0x0800ecac
 800e2f0:	0800ecac 	.word	0x0800ecac
 800e2f4:	0800ecb0 	.word	0x0800ecb0

0800e2f8 <__retarget_lock_acquire_recursive>:
 800e2f8:	4770      	bx	lr

0800e2fa <__retarget_lock_release_recursive>:
 800e2fa:	4770      	bx	lr

0800e2fc <_free_r>:
 800e2fc:	b538      	push	{r3, r4, r5, lr}
 800e2fe:	4605      	mov	r5, r0
 800e300:	2900      	cmp	r1, #0
 800e302:	d041      	beq.n	800e388 <_free_r+0x8c>
 800e304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e308:	1f0c      	subs	r4, r1, #4
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	bfb8      	it	lt
 800e30e:	18e4      	addlt	r4, r4, r3
 800e310:	f7ff ff70 	bl	800e1f4 <__malloc_lock>
 800e314:	4a1d      	ldr	r2, [pc, #116]	@ (800e38c <_free_r+0x90>)
 800e316:	6813      	ldr	r3, [r2, #0]
 800e318:	b933      	cbnz	r3, 800e328 <_free_r+0x2c>
 800e31a:	6063      	str	r3, [r4, #4]
 800e31c:	6014      	str	r4, [r2, #0]
 800e31e:	4628      	mov	r0, r5
 800e320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e324:	f7ff bf6c 	b.w	800e200 <__malloc_unlock>
 800e328:	42a3      	cmp	r3, r4
 800e32a:	d908      	bls.n	800e33e <_free_r+0x42>
 800e32c:	6820      	ldr	r0, [r4, #0]
 800e32e:	1821      	adds	r1, r4, r0
 800e330:	428b      	cmp	r3, r1
 800e332:	bf01      	itttt	eq
 800e334:	6819      	ldreq	r1, [r3, #0]
 800e336:	685b      	ldreq	r3, [r3, #4]
 800e338:	1809      	addeq	r1, r1, r0
 800e33a:	6021      	streq	r1, [r4, #0]
 800e33c:	e7ed      	b.n	800e31a <_free_r+0x1e>
 800e33e:	461a      	mov	r2, r3
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	b10b      	cbz	r3, 800e348 <_free_r+0x4c>
 800e344:	42a3      	cmp	r3, r4
 800e346:	d9fa      	bls.n	800e33e <_free_r+0x42>
 800e348:	6811      	ldr	r1, [r2, #0]
 800e34a:	1850      	adds	r0, r2, r1
 800e34c:	42a0      	cmp	r0, r4
 800e34e:	d10b      	bne.n	800e368 <_free_r+0x6c>
 800e350:	6820      	ldr	r0, [r4, #0]
 800e352:	4401      	add	r1, r0
 800e354:	1850      	adds	r0, r2, r1
 800e356:	4283      	cmp	r3, r0
 800e358:	6011      	str	r1, [r2, #0]
 800e35a:	d1e0      	bne.n	800e31e <_free_r+0x22>
 800e35c:	6818      	ldr	r0, [r3, #0]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	6053      	str	r3, [r2, #4]
 800e362:	4408      	add	r0, r1
 800e364:	6010      	str	r0, [r2, #0]
 800e366:	e7da      	b.n	800e31e <_free_r+0x22>
 800e368:	d902      	bls.n	800e370 <_free_r+0x74>
 800e36a:	230c      	movs	r3, #12
 800e36c:	602b      	str	r3, [r5, #0]
 800e36e:	e7d6      	b.n	800e31e <_free_r+0x22>
 800e370:	6820      	ldr	r0, [r4, #0]
 800e372:	1821      	adds	r1, r4, r0
 800e374:	428b      	cmp	r3, r1
 800e376:	bf04      	itt	eq
 800e378:	6819      	ldreq	r1, [r3, #0]
 800e37a:	685b      	ldreq	r3, [r3, #4]
 800e37c:	6063      	str	r3, [r4, #4]
 800e37e:	bf04      	itt	eq
 800e380:	1809      	addeq	r1, r1, r0
 800e382:	6021      	streq	r1, [r4, #0]
 800e384:	6054      	str	r4, [r2, #4]
 800e386:	e7ca      	b.n	800e31e <_free_r+0x22>
 800e388:	bd38      	pop	{r3, r4, r5, pc}
 800e38a:	bf00      	nop
 800e38c:	20002104 	.word	0x20002104

0800e390 <__ssputs_r>:
 800e390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e394:	688e      	ldr	r6, [r1, #8]
 800e396:	461f      	mov	r7, r3
 800e398:	42be      	cmp	r6, r7
 800e39a:	680b      	ldr	r3, [r1, #0]
 800e39c:	4682      	mov	sl, r0
 800e39e:	460c      	mov	r4, r1
 800e3a0:	4690      	mov	r8, r2
 800e3a2:	d82d      	bhi.n	800e400 <__ssputs_r+0x70>
 800e3a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e3a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e3ac:	d026      	beq.n	800e3fc <__ssputs_r+0x6c>
 800e3ae:	6965      	ldr	r5, [r4, #20]
 800e3b0:	6909      	ldr	r1, [r1, #16]
 800e3b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3b6:	eba3 0901 	sub.w	r9, r3, r1
 800e3ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e3be:	1c7b      	adds	r3, r7, #1
 800e3c0:	444b      	add	r3, r9
 800e3c2:	106d      	asrs	r5, r5, #1
 800e3c4:	429d      	cmp	r5, r3
 800e3c6:	bf38      	it	cc
 800e3c8:	461d      	movcc	r5, r3
 800e3ca:	0553      	lsls	r3, r2, #21
 800e3cc:	d527      	bpl.n	800e41e <__ssputs_r+0x8e>
 800e3ce:	4629      	mov	r1, r5
 800e3d0:	f7ff fe90 	bl	800e0f4 <_malloc_r>
 800e3d4:	4606      	mov	r6, r0
 800e3d6:	b360      	cbz	r0, 800e432 <__ssputs_r+0xa2>
 800e3d8:	6921      	ldr	r1, [r4, #16]
 800e3da:	464a      	mov	r2, r9
 800e3dc:	f000 fad8 	bl	800e990 <memcpy>
 800e3e0:	89a3      	ldrh	r3, [r4, #12]
 800e3e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e3e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3ea:	81a3      	strh	r3, [r4, #12]
 800e3ec:	6126      	str	r6, [r4, #16]
 800e3ee:	6165      	str	r5, [r4, #20]
 800e3f0:	444e      	add	r6, r9
 800e3f2:	eba5 0509 	sub.w	r5, r5, r9
 800e3f6:	6026      	str	r6, [r4, #0]
 800e3f8:	60a5      	str	r5, [r4, #8]
 800e3fa:	463e      	mov	r6, r7
 800e3fc:	42be      	cmp	r6, r7
 800e3fe:	d900      	bls.n	800e402 <__ssputs_r+0x72>
 800e400:	463e      	mov	r6, r7
 800e402:	6820      	ldr	r0, [r4, #0]
 800e404:	4632      	mov	r2, r6
 800e406:	4641      	mov	r1, r8
 800e408:	f000 faa8 	bl	800e95c <memmove>
 800e40c:	68a3      	ldr	r3, [r4, #8]
 800e40e:	1b9b      	subs	r3, r3, r6
 800e410:	60a3      	str	r3, [r4, #8]
 800e412:	6823      	ldr	r3, [r4, #0]
 800e414:	4433      	add	r3, r6
 800e416:	6023      	str	r3, [r4, #0]
 800e418:	2000      	movs	r0, #0
 800e41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e41e:	462a      	mov	r2, r5
 800e420:	f000 fac4 	bl	800e9ac <_realloc_r>
 800e424:	4606      	mov	r6, r0
 800e426:	2800      	cmp	r0, #0
 800e428:	d1e0      	bne.n	800e3ec <__ssputs_r+0x5c>
 800e42a:	6921      	ldr	r1, [r4, #16]
 800e42c:	4650      	mov	r0, sl
 800e42e:	f7ff ff65 	bl	800e2fc <_free_r>
 800e432:	230c      	movs	r3, #12
 800e434:	f8ca 3000 	str.w	r3, [sl]
 800e438:	89a3      	ldrh	r3, [r4, #12]
 800e43a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e43e:	81a3      	strh	r3, [r4, #12]
 800e440:	f04f 30ff 	mov.w	r0, #4294967295
 800e444:	e7e9      	b.n	800e41a <__ssputs_r+0x8a>
	...

0800e448 <_svfiprintf_r>:
 800e448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e44c:	4698      	mov	r8, r3
 800e44e:	898b      	ldrh	r3, [r1, #12]
 800e450:	061b      	lsls	r3, r3, #24
 800e452:	b09d      	sub	sp, #116	@ 0x74
 800e454:	4607      	mov	r7, r0
 800e456:	460d      	mov	r5, r1
 800e458:	4614      	mov	r4, r2
 800e45a:	d510      	bpl.n	800e47e <_svfiprintf_r+0x36>
 800e45c:	690b      	ldr	r3, [r1, #16]
 800e45e:	b973      	cbnz	r3, 800e47e <_svfiprintf_r+0x36>
 800e460:	2140      	movs	r1, #64	@ 0x40
 800e462:	f7ff fe47 	bl	800e0f4 <_malloc_r>
 800e466:	6028      	str	r0, [r5, #0]
 800e468:	6128      	str	r0, [r5, #16]
 800e46a:	b930      	cbnz	r0, 800e47a <_svfiprintf_r+0x32>
 800e46c:	230c      	movs	r3, #12
 800e46e:	603b      	str	r3, [r7, #0]
 800e470:	f04f 30ff 	mov.w	r0, #4294967295
 800e474:	b01d      	add	sp, #116	@ 0x74
 800e476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e47a:	2340      	movs	r3, #64	@ 0x40
 800e47c:	616b      	str	r3, [r5, #20]
 800e47e:	2300      	movs	r3, #0
 800e480:	9309      	str	r3, [sp, #36]	@ 0x24
 800e482:	2320      	movs	r3, #32
 800e484:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e488:	f8cd 800c 	str.w	r8, [sp, #12]
 800e48c:	2330      	movs	r3, #48	@ 0x30
 800e48e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e62c <_svfiprintf_r+0x1e4>
 800e492:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e496:	f04f 0901 	mov.w	r9, #1
 800e49a:	4623      	mov	r3, r4
 800e49c:	469a      	mov	sl, r3
 800e49e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4a2:	b10a      	cbz	r2, 800e4a8 <_svfiprintf_r+0x60>
 800e4a4:	2a25      	cmp	r2, #37	@ 0x25
 800e4a6:	d1f9      	bne.n	800e49c <_svfiprintf_r+0x54>
 800e4a8:	ebba 0b04 	subs.w	fp, sl, r4
 800e4ac:	d00b      	beq.n	800e4c6 <_svfiprintf_r+0x7e>
 800e4ae:	465b      	mov	r3, fp
 800e4b0:	4622      	mov	r2, r4
 800e4b2:	4629      	mov	r1, r5
 800e4b4:	4638      	mov	r0, r7
 800e4b6:	f7ff ff6b 	bl	800e390 <__ssputs_r>
 800e4ba:	3001      	adds	r0, #1
 800e4bc:	f000 80a7 	beq.w	800e60e <_svfiprintf_r+0x1c6>
 800e4c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4c2:	445a      	add	r2, fp
 800e4c4:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4c6:	f89a 3000 	ldrb.w	r3, [sl]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f000 809f 	beq.w	800e60e <_svfiprintf_r+0x1c6>
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4da:	f10a 0a01 	add.w	sl, sl, #1
 800e4de:	9304      	str	r3, [sp, #16]
 800e4e0:	9307      	str	r3, [sp, #28]
 800e4e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4e8:	4654      	mov	r4, sl
 800e4ea:	2205      	movs	r2, #5
 800e4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4f0:	484e      	ldr	r0, [pc, #312]	@ (800e62c <_svfiprintf_r+0x1e4>)
 800e4f2:	f7f1 fe9d 	bl	8000230 <memchr>
 800e4f6:	9a04      	ldr	r2, [sp, #16]
 800e4f8:	b9d8      	cbnz	r0, 800e532 <_svfiprintf_r+0xea>
 800e4fa:	06d0      	lsls	r0, r2, #27
 800e4fc:	bf44      	itt	mi
 800e4fe:	2320      	movmi	r3, #32
 800e500:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e504:	0711      	lsls	r1, r2, #28
 800e506:	bf44      	itt	mi
 800e508:	232b      	movmi	r3, #43	@ 0x2b
 800e50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e50e:	f89a 3000 	ldrb.w	r3, [sl]
 800e512:	2b2a      	cmp	r3, #42	@ 0x2a
 800e514:	d015      	beq.n	800e542 <_svfiprintf_r+0xfa>
 800e516:	9a07      	ldr	r2, [sp, #28]
 800e518:	4654      	mov	r4, sl
 800e51a:	2000      	movs	r0, #0
 800e51c:	f04f 0c0a 	mov.w	ip, #10
 800e520:	4621      	mov	r1, r4
 800e522:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e526:	3b30      	subs	r3, #48	@ 0x30
 800e528:	2b09      	cmp	r3, #9
 800e52a:	d94b      	bls.n	800e5c4 <_svfiprintf_r+0x17c>
 800e52c:	b1b0      	cbz	r0, 800e55c <_svfiprintf_r+0x114>
 800e52e:	9207      	str	r2, [sp, #28]
 800e530:	e014      	b.n	800e55c <_svfiprintf_r+0x114>
 800e532:	eba0 0308 	sub.w	r3, r0, r8
 800e536:	fa09 f303 	lsl.w	r3, r9, r3
 800e53a:	4313      	orrs	r3, r2
 800e53c:	9304      	str	r3, [sp, #16]
 800e53e:	46a2      	mov	sl, r4
 800e540:	e7d2      	b.n	800e4e8 <_svfiprintf_r+0xa0>
 800e542:	9b03      	ldr	r3, [sp, #12]
 800e544:	1d19      	adds	r1, r3, #4
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	9103      	str	r1, [sp, #12]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	bfbb      	ittet	lt
 800e54e:	425b      	neglt	r3, r3
 800e550:	f042 0202 	orrlt.w	r2, r2, #2
 800e554:	9307      	strge	r3, [sp, #28]
 800e556:	9307      	strlt	r3, [sp, #28]
 800e558:	bfb8      	it	lt
 800e55a:	9204      	strlt	r2, [sp, #16]
 800e55c:	7823      	ldrb	r3, [r4, #0]
 800e55e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e560:	d10a      	bne.n	800e578 <_svfiprintf_r+0x130>
 800e562:	7863      	ldrb	r3, [r4, #1]
 800e564:	2b2a      	cmp	r3, #42	@ 0x2a
 800e566:	d132      	bne.n	800e5ce <_svfiprintf_r+0x186>
 800e568:	9b03      	ldr	r3, [sp, #12]
 800e56a:	1d1a      	adds	r2, r3, #4
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	9203      	str	r2, [sp, #12]
 800e570:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e574:	3402      	adds	r4, #2
 800e576:	9305      	str	r3, [sp, #20]
 800e578:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e63c <_svfiprintf_r+0x1f4>
 800e57c:	7821      	ldrb	r1, [r4, #0]
 800e57e:	2203      	movs	r2, #3
 800e580:	4650      	mov	r0, sl
 800e582:	f7f1 fe55 	bl	8000230 <memchr>
 800e586:	b138      	cbz	r0, 800e598 <_svfiprintf_r+0x150>
 800e588:	9b04      	ldr	r3, [sp, #16]
 800e58a:	eba0 000a 	sub.w	r0, r0, sl
 800e58e:	2240      	movs	r2, #64	@ 0x40
 800e590:	4082      	lsls	r2, r0
 800e592:	4313      	orrs	r3, r2
 800e594:	3401      	adds	r4, #1
 800e596:	9304      	str	r3, [sp, #16]
 800e598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e59c:	4824      	ldr	r0, [pc, #144]	@ (800e630 <_svfiprintf_r+0x1e8>)
 800e59e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e5a2:	2206      	movs	r2, #6
 800e5a4:	f7f1 fe44 	bl	8000230 <memchr>
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	d036      	beq.n	800e61a <_svfiprintf_r+0x1d2>
 800e5ac:	4b21      	ldr	r3, [pc, #132]	@ (800e634 <_svfiprintf_r+0x1ec>)
 800e5ae:	bb1b      	cbnz	r3, 800e5f8 <_svfiprintf_r+0x1b0>
 800e5b0:	9b03      	ldr	r3, [sp, #12]
 800e5b2:	3307      	adds	r3, #7
 800e5b4:	f023 0307 	bic.w	r3, r3, #7
 800e5b8:	3308      	adds	r3, #8
 800e5ba:	9303      	str	r3, [sp, #12]
 800e5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5be:	4433      	add	r3, r6
 800e5c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5c2:	e76a      	b.n	800e49a <_svfiprintf_r+0x52>
 800e5c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5c8:	460c      	mov	r4, r1
 800e5ca:	2001      	movs	r0, #1
 800e5cc:	e7a8      	b.n	800e520 <_svfiprintf_r+0xd8>
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	3401      	adds	r4, #1
 800e5d2:	9305      	str	r3, [sp, #20]
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	f04f 0c0a 	mov.w	ip, #10
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5e0:	3a30      	subs	r2, #48	@ 0x30
 800e5e2:	2a09      	cmp	r2, #9
 800e5e4:	d903      	bls.n	800e5ee <_svfiprintf_r+0x1a6>
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d0c6      	beq.n	800e578 <_svfiprintf_r+0x130>
 800e5ea:	9105      	str	r1, [sp, #20]
 800e5ec:	e7c4      	b.n	800e578 <_svfiprintf_r+0x130>
 800e5ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	e7f0      	b.n	800e5da <_svfiprintf_r+0x192>
 800e5f8:	ab03      	add	r3, sp, #12
 800e5fa:	9300      	str	r3, [sp, #0]
 800e5fc:	462a      	mov	r2, r5
 800e5fe:	4b0e      	ldr	r3, [pc, #56]	@ (800e638 <_svfiprintf_r+0x1f0>)
 800e600:	a904      	add	r1, sp, #16
 800e602:	4638      	mov	r0, r7
 800e604:	f3af 8000 	nop.w
 800e608:	1c42      	adds	r2, r0, #1
 800e60a:	4606      	mov	r6, r0
 800e60c:	d1d6      	bne.n	800e5bc <_svfiprintf_r+0x174>
 800e60e:	89ab      	ldrh	r3, [r5, #12]
 800e610:	065b      	lsls	r3, r3, #25
 800e612:	f53f af2d 	bmi.w	800e470 <_svfiprintf_r+0x28>
 800e616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e618:	e72c      	b.n	800e474 <_svfiprintf_r+0x2c>
 800e61a:	ab03      	add	r3, sp, #12
 800e61c:	9300      	str	r3, [sp, #0]
 800e61e:	462a      	mov	r2, r5
 800e620:	4b05      	ldr	r3, [pc, #20]	@ (800e638 <_svfiprintf_r+0x1f0>)
 800e622:	a904      	add	r1, sp, #16
 800e624:	4638      	mov	r0, r7
 800e626:	f000 f879 	bl	800e71c <_printf_i>
 800e62a:	e7ed      	b.n	800e608 <_svfiprintf_r+0x1c0>
 800e62c:	0800ec70 	.word	0x0800ec70
 800e630:	0800ec7a 	.word	0x0800ec7a
 800e634:	00000000 	.word	0x00000000
 800e638:	0800e391 	.word	0x0800e391
 800e63c:	0800ec76 	.word	0x0800ec76

0800e640 <_printf_common>:
 800e640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e644:	4616      	mov	r6, r2
 800e646:	4698      	mov	r8, r3
 800e648:	688a      	ldr	r2, [r1, #8]
 800e64a:	690b      	ldr	r3, [r1, #16]
 800e64c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e650:	4293      	cmp	r3, r2
 800e652:	bfb8      	it	lt
 800e654:	4613      	movlt	r3, r2
 800e656:	6033      	str	r3, [r6, #0]
 800e658:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e65c:	4607      	mov	r7, r0
 800e65e:	460c      	mov	r4, r1
 800e660:	b10a      	cbz	r2, 800e666 <_printf_common+0x26>
 800e662:	3301      	adds	r3, #1
 800e664:	6033      	str	r3, [r6, #0]
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	0699      	lsls	r1, r3, #26
 800e66a:	bf42      	ittt	mi
 800e66c:	6833      	ldrmi	r3, [r6, #0]
 800e66e:	3302      	addmi	r3, #2
 800e670:	6033      	strmi	r3, [r6, #0]
 800e672:	6825      	ldr	r5, [r4, #0]
 800e674:	f015 0506 	ands.w	r5, r5, #6
 800e678:	d106      	bne.n	800e688 <_printf_common+0x48>
 800e67a:	f104 0a19 	add.w	sl, r4, #25
 800e67e:	68e3      	ldr	r3, [r4, #12]
 800e680:	6832      	ldr	r2, [r6, #0]
 800e682:	1a9b      	subs	r3, r3, r2
 800e684:	42ab      	cmp	r3, r5
 800e686:	dc26      	bgt.n	800e6d6 <_printf_common+0x96>
 800e688:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e68c:	6822      	ldr	r2, [r4, #0]
 800e68e:	3b00      	subs	r3, #0
 800e690:	bf18      	it	ne
 800e692:	2301      	movne	r3, #1
 800e694:	0692      	lsls	r2, r2, #26
 800e696:	d42b      	bmi.n	800e6f0 <_printf_common+0xb0>
 800e698:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e69c:	4641      	mov	r1, r8
 800e69e:	4638      	mov	r0, r7
 800e6a0:	47c8      	blx	r9
 800e6a2:	3001      	adds	r0, #1
 800e6a4:	d01e      	beq.n	800e6e4 <_printf_common+0xa4>
 800e6a6:	6823      	ldr	r3, [r4, #0]
 800e6a8:	6922      	ldr	r2, [r4, #16]
 800e6aa:	f003 0306 	and.w	r3, r3, #6
 800e6ae:	2b04      	cmp	r3, #4
 800e6b0:	bf02      	ittt	eq
 800e6b2:	68e5      	ldreq	r5, [r4, #12]
 800e6b4:	6833      	ldreq	r3, [r6, #0]
 800e6b6:	1aed      	subeq	r5, r5, r3
 800e6b8:	68a3      	ldr	r3, [r4, #8]
 800e6ba:	bf0c      	ite	eq
 800e6bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6c0:	2500      	movne	r5, #0
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	bfc4      	itt	gt
 800e6c6:	1a9b      	subgt	r3, r3, r2
 800e6c8:	18ed      	addgt	r5, r5, r3
 800e6ca:	2600      	movs	r6, #0
 800e6cc:	341a      	adds	r4, #26
 800e6ce:	42b5      	cmp	r5, r6
 800e6d0:	d11a      	bne.n	800e708 <_printf_common+0xc8>
 800e6d2:	2000      	movs	r0, #0
 800e6d4:	e008      	b.n	800e6e8 <_printf_common+0xa8>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	4652      	mov	r2, sl
 800e6da:	4641      	mov	r1, r8
 800e6dc:	4638      	mov	r0, r7
 800e6de:	47c8      	blx	r9
 800e6e0:	3001      	adds	r0, #1
 800e6e2:	d103      	bne.n	800e6ec <_printf_common+0xac>
 800e6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6ec:	3501      	adds	r5, #1
 800e6ee:	e7c6      	b.n	800e67e <_printf_common+0x3e>
 800e6f0:	18e1      	adds	r1, r4, r3
 800e6f2:	1c5a      	adds	r2, r3, #1
 800e6f4:	2030      	movs	r0, #48	@ 0x30
 800e6f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e6fa:	4422      	add	r2, r4
 800e6fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e700:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e704:	3302      	adds	r3, #2
 800e706:	e7c7      	b.n	800e698 <_printf_common+0x58>
 800e708:	2301      	movs	r3, #1
 800e70a:	4622      	mov	r2, r4
 800e70c:	4641      	mov	r1, r8
 800e70e:	4638      	mov	r0, r7
 800e710:	47c8      	blx	r9
 800e712:	3001      	adds	r0, #1
 800e714:	d0e6      	beq.n	800e6e4 <_printf_common+0xa4>
 800e716:	3601      	adds	r6, #1
 800e718:	e7d9      	b.n	800e6ce <_printf_common+0x8e>
	...

0800e71c <_printf_i>:
 800e71c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e720:	7e0f      	ldrb	r7, [r1, #24]
 800e722:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e724:	2f78      	cmp	r7, #120	@ 0x78
 800e726:	4691      	mov	r9, r2
 800e728:	4680      	mov	r8, r0
 800e72a:	460c      	mov	r4, r1
 800e72c:	469a      	mov	sl, r3
 800e72e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e732:	d807      	bhi.n	800e744 <_printf_i+0x28>
 800e734:	2f62      	cmp	r7, #98	@ 0x62
 800e736:	d80a      	bhi.n	800e74e <_printf_i+0x32>
 800e738:	2f00      	cmp	r7, #0
 800e73a:	f000 80d2 	beq.w	800e8e2 <_printf_i+0x1c6>
 800e73e:	2f58      	cmp	r7, #88	@ 0x58
 800e740:	f000 80b9 	beq.w	800e8b6 <_printf_i+0x19a>
 800e744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e748:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e74c:	e03a      	b.n	800e7c4 <_printf_i+0xa8>
 800e74e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e752:	2b15      	cmp	r3, #21
 800e754:	d8f6      	bhi.n	800e744 <_printf_i+0x28>
 800e756:	a101      	add	r1, pc, #4	@ (adr r1, 800e75c <_printf_i+0x40>)
 800e758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e75c:	0800e7b5 	.word	0x0800e7b5
 800e760:	0800e7c9 	.word	0x0800e7c9
 800e764:	0800e745 	.word	0x0800e745
 800e768:	0800e745 	.word	0x0800e745
 800e76c:	0800e745 	.word	0x0800e745
 800e770:	0800e745 	.word	0x0800e745
 800e774:	0800e7c9 	.word	0x0800e7c9
 800e778:	0800e745 	.word	0x0800e745
 800e77c:	0800e745 	.word	0x0800e745
 800e780:	0800e745 	.word	0x0800e745
 800e784:	0800e745 	.word	0x0800e745
 800e788:	0800e8c9 	.word	0x0800e8c9
 800e78c:	0800e7f3 	.word	0x0800e7f3
 800e790:	0800e883 	.word	0x0800e883
 800e794:	0800e745 	.word	0x0800e745
 800e798:	0800e745 	.word	0x0800e745
 800e79c:	0800e8eb 	.word	0x0800e8eb
 800e7a0:	0800e745 	.word	0x0800e745
 800e7a4:	0800e7f3 	.word	0x0800e7f3
 800e7a8:	0800e745 	.word	0x0800e745
 800e7ac:	0800e745 	.word	0x0800e745
 800e7b0:	0800e88b 	.word	0x0800e88b
 800e7b4:	6833      	ldr	r3, [r6, #0]
 800e7b6:	1d1a      	adds	r2, r3, #4
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	6032      	str	r2, [r6, #0]
 800e7bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e7c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	e09d      	b.n	800e904 <_printf_i+0x1e8>
 800e7c8:	6833      	ldr	r3, [r6, #0]
 800e7ca:	6820      	ldr	r0, [r4, #0]
 800e7cc:	1d19      	adds	r1, r3, #4
 800e7ce:	6031      	str	r1, [r6, #0]
 800e7d0:	0606      	lsls	r6, r0, #24
 800e7d2:	d501      	bpl.n	800e7d8 <_printf_i+0xbc>
 800e7d4:	681d      	ldr	r5, [r3, #0]
 800e7d6:	e003      	b.n	800e7e0 <_printf_i+0xc4>
 800e7d8:	0645      	lsls	r5, r0, #25
 800e7da:	d5fb      	bpl.n	800e7d4 <_printf_i+0xb8>
 800e7dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e7e0:	2d00      	cmp	r5, #0
 800e7e2:	da03      	bge.n	800e7ec <_printf_i+0xd0>
 800e7e4:	232d      	movs	r3, #45	@ 0x2d
 800e7e6:	426d      	negs	r5, r5
 800e7e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e7ec:	4859      	ldr	r0, [pc, #356]	@ (800e954 <_printf_i+0x238>)
 800e7ee:	230a      	movs	r3, #10
 800e7f0:	e011      	b.n	800e816 <_printf_i+0xfa>
 800e7f2:	6821      	ldr	r1, [r4, #0]
 800e7f4:	6833      	ldr	r3, [r6, #0]
 800e7f6:	0608      	lsls	r0, r1, #24
 800e7f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800e7fc:	d402      	bmi.n	800e804 <_printf_i+0xe8>
 800e7fe:	0649      	lsls	r1, r1, #25
 800e800:	bf48      	it	mi
 800e802:	b2ad      	uxthmi	r5, r5
 800e804:	2f6f      	cmp	r7, #111	@ 0x6f
 800e806:	4853      	ldr	r0, [pc, #332]	@ (800e954 <_printf_i+0x238>)
 800e808:	6033      	str	r3, [r6, #0]
 800e80a:	bf14      	ite	ne
 800e80c:	230a      	movne	r3, #10
 800e80e:	2308      	moveq	r3, #8
 800e810:	2100      	movs	r1, #0
 800e812:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e816:	6866      	ldr	r6, [r4, #4]
 800e818:	60a6      	str	r6, [r4, #8]
 800e81a:	2e00      	cmp	r6, #0
 800e81c:	bfa2      	ittt	ge
 800e81e:	6821      	ldrge	r1, [r4, #0]
 800e820:	f021 0104 	bicge.w	r1, r1, #4
 800e824:	6021      	strge	r1, [r4, #0]
 800e826:	b90d      	cbnz	r5, 800e82c <_printf_i+0x110>
 800e828:	2e00      	cmp	r6, #0
 800e82a:	d04b      	beq.n	800e8c4 <_printf_i+0x1a8>
 800e82c:	4616      	mov	r6, r2
 800e82e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e832:	fb03 5711 	mls	r7, r3, r1, r5
 800e836:	5dc7      	ldrb	r7, [r0, r7]
 800e838:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e83c:	462f      	mov	r7, r5
 800e83e:	42bb      	cmp	r3, r7
 800e840:	460d      	mov	r5, r1
 800e842:	d9f4      	bls.n	800e82e <_printf_i+0x112>
 800e844:	2b08      	cmp	r3, #8
 800e846:	d10b      	bne.n	800e860 <_printf_i+0x144>
 800e848:	6823      	ldr	r3, [r4, #0]
 800e84a:	07df      	lsls	r7, r3, #31
 800e84c:	d508      	bpl.n	800e860 <_printf_i+0x144>
 800e84e:	6923      	ldr	r3, [r4, #16]
 800e850:	6861      	ldr	r1, [r4, #4]
 800e852:	4299      	cmp	r1, r3
 800e854:	bfde      	ittt	le
 800e856:	2330      	movle	r3, #48	@ 0x30
 800e858:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e85c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e860:	1b92      	subs	r2, r2, r6
 800e862:	6122      	str	r2, [r4, #16]
 800e864:	f8cd a000 	str.w	sl, [sp]
 800e868:	464b      	mov	r3, r9
 800e86a:	aa03      	add	r2, sp, #12
 800e86c:	4621      	mov	r1, r4
 800e86e:	4640      	mov	r0, r8
 800e870:	f7ff fee6 	bl	800e640 <_printf_common>
 800e874:	3001      	adds	r0, #1
 800e876:	d14a      	bne.n	800e90e <_printf_i+0x1f2>
 800e878:	f04f 30ff 	mov.w	r0, #4294967295
 800e87c:	b004      	add	sp, #16
 800e87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e882:	6823      	ldr	r3, [r4, #0]
 800e884:	f043 0320 	orr.w	r3, r3, #32
 800e888:	6023      	str	r3, [r4, #0]
 800e88a:	4833      	ldr	r0, [pc, #204]	@ (800e958 <_printf_i+0x23c>)
 800e88c:	2778      	movs	r7, #120	@ 0x78
 800e88e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e892:	6823      	ldr	r3, [r4, #0]
 800e894:	6831      	ldr	r1, [r6, #0]
 800e896:	061f      	lsls	r7, r3, #24
 800e898:	f851 5b04 	ldr.w	r5, [r1], #4
 800e89c:	d402      	bmi.n	800e8a4 <_printf_i+0x188>
 800e89e:	065f      	lsls	r7, r3, #25
 800e8a0:	bf48      	it	mi
 800e8a2:	b2ad      	uxthmi	r5, r5
 800e8a4:	6031      	str	r1, [r6, #0]
 800e8a6:	07d9      	lsls	r1, r3, #31
 800e8a8:	bf44      	itt	mi
 800e8aa:	f043 0320 	orrmi.w	r3, r3, #32
 800e8ae:	6023      	strmi	r3, [r4, #0]
 800e8b0:	b11d      	cbz	r5, 800e8ba <_printf_i+0x19e>
 800e8b2:	2310      	movs	r3, #16
 800e8b4:	e7ac      	b.n	800e810 <_printf_i+0xf4>
 800e8b6:	4827      	ldr	r0, [pc, #156]	@ (800e954 <_printf_i+0x238>)
 800e8b8:	e7e9      	b.n	800e88e <_printf_i+0x172>
 800e8ba:	6823      	ldr	r3, [r4, #0]
 800e8bc:	f023 0320 	bic.w	r3, r3, #32
 800e8c0:	6023      	str	r3, [r4, #0]
 800e8c2:	e7f6      	b.n	800e8b2 <_printf_i+0x196>
 800e8c4:	4616      	mov	r6, r2
 800e8c6:	e7bd      	b.n	800e844 <_printf_i+0x128>
 800e8c8:	6833      	ldr	r3, [r6, #0]
 800e8ca:	6825      	ldr	r5, [r4, #0]
 800e8cc:	6961      	ldr	r1, [r4, #20]
 800e8ce:	1d18      	adds	r0, r3, #4
 800e8d0:	6030      	str	r0, [r6, #0]
 800e8d2:	062e      	lsls	r6, r5, #24
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	d501      	bpl.n	800e8dc <_printf_i+0x1c0>
 800e8d8:	6019      	str	r1, [r3, #0]
 800e8da:	e002      	b.n	800e8e2 <_printf_i+0x1c6>
 800e8dc:	0668      	lsls	r0, r5, #25
 800e8de:	d5fb      	bpl.n	800e8d8 <_printf_i+0x1bc>
 800e8e0:	8019      	strh	r1, [r3, #0]
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	6123      	str	r3, [r4, #16]
 800e8e6:	4616      	mov	r6, r2
 800e8e8:	e7bc      	b.n	800e864 <_printf_i+0x148>
 800e8ea:	6833      	ldr	r3, [r6, #0]
 800e8ec:	1d1a      	adds	r2, r3, #4
 800e8ee:	6032      	str	r2, [r6, #0]
 800e8f0:	681e      	ldr	r6, [r3, #0]
 800e8f2:	6862      	ldr	r2, [r4, #4]
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	f7f1 fc9a 	bl	8000230 <memchr>
 800e8fc:	b108      	cbz	r0, 800e902 <_printf_i+0x1e6>
 800e8fe:	1b80      	subs	r0, r0, r6
 800e900:	6060      	str	r0, [r4, #4]
 800e902:	6863      	ldr	r3, [r4, #4]
 800e904:	6123      	str	r3, [r4, #16]
 800e906:	2300      	movs	r3, #0
 800e908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e90c:	e7aa      	b.n	800e864 <_printf_i+0x148>
 800e90e:	6923      	ldr	r3, [r4, #16]
 800e910:	4632      	mov	r2, r6
 800e912:	4649      	mov	r1, r9
 800e914:	4640      	mov	r0, r8
 800e916:	47d0      	blx	sl
 800e918:	3001      	adds	r0, #1
 800e91a:	d0ad      	beq.n	800e878 <_printf_i+0x15c>
 800e91c:	6823      	ldr	r3, [r4, #0]
 800e91e:	079b      	lsls	r3, r3, #30
 800e920:	d413      	bmi.n	800e94a <_printf_i+0x22e>
 800e922:	68e0      	ldr	r0, [r4, #12]
 800e924:	9b03      	ldr	r3, [sp, #12]
 800e926:	4298      	cmp	r0, r3
 800e928:	bfb8      	it	lt
 800e92a:	4618      	movlt	r0, r3
 800e92c:	e7a6      	b.n	800e87c <_printf_i+0x160>
 800e92e:	2301      	movs	r3, #1
 800e930:	4632      	mov	r2, r6
 800e932:	4649      	mov	r1, r9
 800e934:	4640      	mov	r0, r8
 800e936:	47d0      	blx	sl
 800e938:	3001      	adds	r0, #1
 800e93a:	d09d      	beq.n	800e878 <_printf_i+0x15c>
 800e93c:	3501      	adds	r5, #1
 800e93e:	68e3      	ldr	r3, [r4, #12]
 800e940:	9903      	ldr	r1, [sp, #12]
 800e942:	1a5b      	subs	r3, r3, r1
 800e944:	42ab      	cmp	r3, r5
 800e946:	dcf2      	bgt.n	800e92e <_printf_i+0x212>
 800e948:	e7eb      	b.n	800e922 <_printf_i+0x206>
 800e94a:	2500      	movs	r5, #0
 800e94c:	f104 0619 	add.w	r6, r4, #25
 800e950:	e7f5      	b.n	800e93e <_printf_i+0x222>
 800e952:	bf00      	nop
 800e954:	0800ec81 	.word	0x0800ec81
 800e958:	0800ec92 	.word	0x0800ec92

0800e95c <memmove>:
 800e95c:	4288      	cmp	r0, r1
 800e95e:	b510      	push	{r4, lr}
 800e960:	eb01 0402 	add.w	r4, r1, r2
 800e964:	d902      	bls.n	800e96c <memmove+0x10>
 800e966:	4284      	cmp	r4, r0
 800e968:	4623      	mov	r3, r4
 800e96a:	d807      	bhi.n	800e97c <memmove+0x20>
 800e96c:	1e43      	subs	r3, r0, #1
 800e96e:	42a1      	cmp	r1, r4
 800e970:	d008      	beq.n	800e984 <memmove+0x28>
 800e972:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e976:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e97a:	e7f8      	b.n	800e96e <memmove+0x12>
 800e97c:	4402      	add	r2, r0
 800e97e:	4601      	mov	r1, r0
 800e980:	428a      	cmp	r2, r1
 800e982:	d100      	bne.n	800e986 <memmove+0x2a>
 800e984:	bd10      	pop	{r4, pc}
 800e986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e98a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e98e:	e7f7      	b.n	800e980 <memmove+0x24>

0800e990 <memcpy>:
 800e990:	440a      	add	r2, r1
 800e992:	4291      	cmp	r1, r2
 800e994:	f100 33ff 	add.w	r3, r0, #4294967295
 800e998:	d100      	bne.n	800e99c <memcpy+0xc>
 800e99a:	4770      	bx	lr
 800e99c:	b510      	push	{r4, lr}
 800e99e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9a6:	4291      	cmp	r1, r2
 800e9a8:	d1f9      	bne.n	800e99e <memcpy+0xe>
 800e9aa:	bd10      	pop	{r4, pc}

0800e9ac <_realloc_r>:
 800e9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9b0:	4680      	mov	r8, r0
 800e9b2:	4615      	mov	r5, r2
 800e9b4:	460c      	mov	r4, r1
 800e9b6:	b921      	cbnz	r1, 800e9c2 <_realloc_r+0x16>
 800e9b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9bc:	4611      	mov	r1, r2
 800e9be:	f7ff bb99 	b.w	800e0f4 <_malloc_r>
 800e9c2:	b92a      	cbnz	r2, 800e9d0 <_realloc_r+0x24>
 800e9c4:	f7ff fc9a 	bl	800e2fc <_free_r>
 800e9c8:	2400      	movs	r4, #0
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d0:	f000 f81a 	bl	800ea08 <_malloc_usable_size_r>
 800e9d4:	4285      	cmp	r5, r0
 800e9d6:	4606      	mov	r6, r0
 800e9d8:	d802      	bhi.n	800e9e0 <_realloc_r+0x34>
 800e9da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e9de:	d8f4      	bhi.n	800e9ca <_realloc_r+0x1e>
 800e9e0:	4629      	mov	r1, r5
 800e9e2:	4640      	mov	r0, r8
 800e9e4:	f7ff fb86 	bl	800e0f4 <_malloc_r>
 800e9e8:	4607      	mov	r7, r0
 800e9ea:	2800      	cmp	r0, #0
 800e9ec:	d0ec      	beq.n	800e9c8 <_realloc_r+0x1c>
 800e9ee:	42b5      	cmp	r5, r6
 800e9f0:	462a      	mov	r2, r5
 800e9f2:	4621      	mov	r1, r4
 800e9f4:	bf28      	it	cs
 800e9f6:	4632      	movcs	r2, r6
 800e9f8:	f7ff ffca 	bl	800e990 <memcpy>
 800e9fc:	4621      	mov	r1, r4
 800e9fe:	4640      	mov	r0, r8
 800ea00:	f7ff fc7c 	bl	800e2fc <_free_r>
 800ea04:	463c      	mov	r4, r7
 800ea06:	e7e0      	b.n	800e9ca <_realloc_r+0x1e>

0800ea08 <_malloc_usable_size_r>:
 800ea08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea0c:	1f18      	subs	r0, r3, #4
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	bfbc      	itt	lt
 800ea12:	580b      	ldrlt	r3, [r1, r0]
 800ea14:	18c0      	addlt	r0, r0, r3
 800ea16:	4770      	bx	lr

0800ea18 <_init>:
 800ea18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea1a:	bf00      	nop
 800ea1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea1e:	bc08      	pop	{r3}
 800ea20:	469e      	mov	lr, r3
 800ea22:	4770      	bx	lr

0800ea24 <_fini>:
 800ea24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea26:	bf00      	nop
 800ea28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea2a:	bc08      	pop	{r3}
 800ea2c:	469e      	mov	lr, r3
 800ea2e:	4770      	bx	lr
