
UCEIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001159c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  08011774  08011774  00012774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801216c  0801216c  000141a0  2**0
                  CONTENTS
  4 .ARM          00000008  0801216c  0801216c  0001316c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012174  08012174  000141a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012174  08012174  00013174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012178  08012178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a0  20000000  0801217c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002664  200001a0  0801231c  000141a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  20002804  0801231c  00014804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000141a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022b7c  00000000  00000000  000141d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bbd  00000000  00000000  00036d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e90  00000000  00000000  0003b910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017a8  00000000  00000000  0003d7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00023bcb  00000000  00000000  0003ef48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00009b59  00000000  00000000  00062b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0006c66c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008414  00000000  00000000  0006c6b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005e  00000000  00000000  00074ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a0 	.word	0x200001a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0801175c 	.word	0x0801175c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001a4 	.word	0x200001a4
 8000214:	0801175c 	.word	0x0801175c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08c      	sub	sp, #48	@ 0x30
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2220      	movs	r2, #32
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f010 fcb1 	bl	8011704 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000da2:	4b33      	ldr	r3, [pc, #204]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000da4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000da8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000daa:	4b31      	ldr	r3, [pc, #196]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000dac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000db0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000db2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dca:	4b29      	ldr	r3, [pc, #164]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000dcc:	2204      	movs	r2, #4
 8000dce:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dd0:	4b27      	ldr	r3, [pc, #156]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dd6:	4b26      	ldr	r3, [pc, #152]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ddc:	4b24      	ldr	r3, [pc, #144]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000de2:	4b23      	ldr	r3, [pc, #140]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8000dea:	4b21      	ldr	r3, [pc, #132]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000dec:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 8000df0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000df4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000df8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e08:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e10:	4817      	ldr	r0, [pc, #92]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000e12:	f001 fee9 	bl	8002be8 <HAL_ADC_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000e1c:	f001 fa9c 	bl	8002358 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4811      	ldr	r0, [pc, #68]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000e2c:	f003 fec8 	bl	8004bc0 <HAL_ADCEx_MultiModeConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000e36:	f001 fa8f 	bl	8002358 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <MX_ADC1_Init+0xf0>)
 8000e3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e3e:	2306      	movs	r3, #6
 8000e40:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e46:	237f      	movs	r3, #127	@ 0x7f
 8000e48:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	@ (8000e70 <MX_ADC1_Init+0xec>)
 8000e58:	f002 fc78 	bl	800374c <HAL_ADC_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e62:	f001 fa79 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	3730      	adds	r7, #48	@ 0x30
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200001bc 	.word	0x200001bc
 8000e74:	04300002 	.word	0x04300002

08000e78 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2220      	movs	r2, #32
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f010 fc3d 	bl	8011704 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000e8c:	4a2c      	ldr	r2, [pc, #176]	@ (8000f40 <MX_ADC2_Init+0xc8>)
 8000e8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e90:	4b2a      	ldr	r3, [pc, #168]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000e92:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e96:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e98:	4b28      	ldr	r3, [pc, #160]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e9e:	4b27      	ldr	r3, [pc, #156]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000ea4:	4b25      	ldr	r3, [pc, #148]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eaa:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eb0:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000eb6:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000ed2:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 8000ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000eda:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8000ede:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000eee:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ef6:	4811      	ldr	r0, [pc, #68]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000ef8:	f001 fe76 	bl	8002be8 <HAL_ADC_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000f02:	f001 fa29 	bl	8002358 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_ADC2_Init+0xcc>)
 8000f08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f0a:	2306      	movs	r3, #6
 8000f0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f12:	237f      	movs	r3, #127	@ 0x7f
 8000f14:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f16:	2304      	movs	r3, #4
 8000f18:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4619      	mov	r1, r3
 8000f22:	4806      	ldr	r0, [pc, #24]	@ (8000f3c <MX_ADC2_Init+0xc4>)
 8000f24:	f002 fc12 	bl	800374c <HAL_ADC_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000f2e:	f001 fa13 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	3720      	adds	r7, #32
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000228 	.word	0x20000228
 8000f40:	50000100 	.word	0x50000100
 8000f44:	0c900008 	.word	0x0c900008

08000f48 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08c      	sub	sp, #48	@ 0x30
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f010 fbcf 	bl	8011704 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f66:	4b32      	ldr	r3, [pc, #200]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000f68:	4a32      	ldr	r2, [pc, #200]	@ (8001034 <MX_ADC3_Init+0xec>)
 8000f6a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f6c:	4b30      	ldr	r3, [pc, #192]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000f6e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f72:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f74:	4b2e      	ldr	r3, [pc, #184]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000f80:	4b2b      	ldr	r3, [pc, #172]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f86:	4b2a      	ldr	r3, [pc, #168]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f8c:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000f8e:	2204      	movs	r2, #4
 8000f90:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000f92:	4b27      	ldr	r3, [pc, #156]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000f98:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000f9e:	4b24      	ldr	r3, [pc, #144]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fa4:	4b22      	ldr	r3, [pc, #136]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8000fac:	4b20      	ldr	r3, [pc, #128]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000fae:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 8000fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000fb6:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8000fba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000fca:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fd2:	4817      	ldr	r0, [pc, #92]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000fd4:	f001 fe08 	bl	8002be8 <HAL_ADC_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000fde:	f001 f9bb 	bl	8002358 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fea:	4619      	mov	r1, r3
 8000fec:	4810      	ldr	r0, [pc, #64]	@ (8001030 <MX_ADC3_Init+0xe8>)
 8000fee:	f003 fde7 	bl	8004bc0 <HAL_ADCEx_MultiModeConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000ff8:	f001 f9ae 	bl	8002358 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <MX_ADC3_Init+0xf0>)
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001000:	2306      	movs	r3, #6
 8001002:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001008:	237f      	movs	r3, #127	@ 0x7f
 800100a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800100c:	2304      	movs	r3, #4
 800100e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	@ (8001030 <MX_ADC3_Init+0xe8>)
 800101a:	f002 fb97 	bl	800374c <HAL_ADC_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 8001024:	f001 f998 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	3730      	adds	r7, #48	@ 0x30
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000294 	.word	0x20000294
 8001034:	50000400 	.word	0x50000400
 8001038:	04300002 	.word	0x04300002

0800103c <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001042:	463b      	mov	r3, r7
 8001044:	2220      	movs	r2, #32
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f010 fb5b 	bl	8011704 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800104e:	4b2c      	ldr	r3, [pc, #176]	@ (8001100 <MX_ADC4_Init+0xc4>)
 8001050:	4a2c      	ldr	r2, [pc, #176]	@ (8001104 <MX_ADC4_Init+0xc8>)
 8001052:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001054:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <MX_ADC4_Init+0xc4>)
 8001056:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800105a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800105c:	4b28      	ldr	r3, [pc, #160]	@ (8001100 <MX_ADC4_Init+0xc4>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001062:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <MX_ADC4_Init+0xc4>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001068:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <MX_ADC4_Init+0xc4>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800106e:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <MX_ADC4_Init+0xc4>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001074:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <MX_ADC4_Init+0xc4>)
 8001076:	2204      	movs	r2, #4
 8001078:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800107a:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <MX_ADC4_Init+0xc4>)
 800107c:	2200      	movs	r2, #0
 800107e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001080:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <MX_ADC4_Init+0xc4>)
 8001082:	2200      	movs	r2, #0
 8001084:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001086:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <MX_ADC4_Init+0xc4>)
 8001088:	2201      	movs	r2, #1
 800108a:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800108c:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <MX_ADC4_Init+0xc4>)
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8001094:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <MX_ADC4_Init+0xc4>)
 8001096:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 800109a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800109c:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <MX_ADC4_Init+0xc4>)
 800109e:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80010a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80010a4:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <MX_ADC4_Init+0xc4>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ac:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <MX_ADC4_Init+0xc4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80010b2:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <MX_ADC4_Init+0xc4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80010ba:	4811      	ldr	r0, [pc, #68]	@ (8001100 <MX_ADC4_Init+0xc4>)
 80010bc:	f001 fd94 	bl	8002be8 <HAL_ADC_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC4_Init+0x8e>
  {
    Error_Handler();
 80010c6:	f001 f947 	bl	8002358 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <MX_ADC4_Init+0xcc>)
 80010cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ce:	2306      	movs	r3, #6
 80010d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010d6:	237f      	movs	r3, #127	@ 0x7f
 80010d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010da:	2304      	movs	r3, #4
 80010dc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80010e2:	463b      	mov	r3, r7
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	@ (8001100 <MX_ADC4_Init+0xc4>)
 80010e8:	f002 fb30 	bl	800374c <HAL_ADC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC4_Init+0xba>
  {
    Error_Handler();
 80010f2:	f001 f931 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000300 	.word	0x20000300
 8001104:	50000500 	.word	0x50000500
 8001108:	04300002 	.word	0x04300002

0800110c <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2220      	movs	r2, #32
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f010 faf3 	bl	8011704 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800111e:	4b2c      	ldr	r3, [pc, #176]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 8001120:	4a2c      	ldr	r2, [pc, #176]	@ (80011d4 <MX_ADC5_Init+0xc8>)
 8001122:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001124:	4b2a      	ldr	r3, [pc, #168]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 8001126:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800112a:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 800112c:	4b28      	ldr	r3, [pc, #160]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001132:	4b27      	ldr	r3, [pc, #156]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001138:	4b25      	ldr	r3, [pc, #148]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800113e:	4b24      	ldr	r3, [pc, #144]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001144:	4b22      	ldr	r3, [pc, #136]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 8001146:	2204      	movs	r2, #4
 8001148:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800114a:	4b21      	ldr	r3, [pc, #132]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 800114c:	2200      	movs	r2, #0
 800114e:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001150:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 8001152:	2200      	movs	r2, #0
 8001154:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001156:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 8001158:	2201      	movs	r2, #1
 800115a:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 800115c:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8001164:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 8001166:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 800116a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800116c:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 800116e:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8001172:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001174:	4b16      	ldr	r3, [pc, #88]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800117c:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 800117e:	2200      	movs	r2, #0
 8001180:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001182:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800118a:	4811      	ldr	r0, [pc, #68]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 800118c:	f001 fd2c 	bl	8002be8 <HAL_ADC_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_ADC5_Init+0x8e>
  {
    Error_Handler();
 8001196:	f001 f8df 	bl	8002358 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <MX_ADC5_Init+0xcc>)
 800119c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800119e:	2306      	movs	r3, #6
 80011a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011a6:	237f      	movs	r3, #127	@ 0x7f
 80011a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011aa:	2304      	movs	r3, #4
 80011ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	@ (80011d0 <MX_ADC5_Init+0xc4>)
 80011b8:	f002 fac8 	bl	800374c <HAL_ADC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC5_Init+0xba>
  {
    Error_Handler();
 80011c2:	f001 f8c9 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3720      	adds	r7, #32
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000036c 	.word	0x2000036c
 80011d4:	50000600 	.word	0x50000600
 80011d8:	19200040 	.word	0x19200040

080011dc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b0a6      	sub	sp, #152	@ 0x98
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011f8:	2254      	movs	r2, #84	@ 0x54
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f010 fa81 	bl	8011704 <memset>
  if(adcHandle->Instance==ADC1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800120a:	d16c      	bne.n	80012e6 <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800120c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001210:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001212:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001216:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001218:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800121c:	4618      	mov	r0, r3
 800121e:	f008 fee9 	bl	8009ff4 <HAL_RCCEx_PeriphCLKConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001228:	f001 f896 	bl	8002358 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800122c:	4ba0      	ldr	r3, [pc, #640]	@ (80014b0 <HAL_ADC_MspInit+0x2d4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	4a9f      	ldr	r2, [pc, #636]	@ (80014b0 <HAL_ADC_MspInit+0x2d4>)
 8001234:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001236:	4b9e      	ldr	r3, [pc, #632]	@ (80014b0 <HAL_ADC_MspInit+0x2d4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d10b      	bne.n	8001256 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800123e:	4b9d      	ldr	r3, [pc, #628]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	4a9c      	ldr	r2, [pc, #624]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 8001244:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124a:	4b9a      	ldr	r3, [pc, #616]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b97      	ldr	r3, [pc, #604]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	4a96      	ldr	r2, [pc, #600]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001262:	4b94      	ldr	r3, [pc, #592]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800126c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800126e:	2301      	movs	r3, #1
 8001270:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001274:	2303      	movs	r3, #3
 8001276:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128a:	f004 fb25 	bl	80058d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800128e:	4b8a      	ldr	r3, [pc, #552]	@ (80014b8 <HAL_ADC_MspInit+0x2dc>)
 8001290:	4a8a      	ldr	r2, [pc, #552]	@ (80014bc <HAL_ADC_MspInit+0x2e0>)
 8001292:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001294:	4b88      	ldr	r3, [pc, #544]	@ (80014b8 <HAL_ADC_MspInit+0x2dc>)
 8001296:	2205      	movs	r2, #5
 8001298:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800129a:	4b87      	ldr	r3, [pc, #540]	@ (80014b8 <HAL_ADC_MspInit+0x2dc>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a0:	4b85      	ldr	r3, [pc, #532]	@ (80014b8 <HAL_ADC_MspInit+0x2dc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012a6:	4b84      	ldr	r3, [pc, #528]	@ (80014b8 <HAL_ADC_MspInit+0x2dc>)
 80012a8:	2280      	movs	r2, #128	@ 0x80
 80012aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ac:	4b82      	ldr	r3, [pc, #520]	@ (80014b8 <HAL_ADC_MspInit+0x2dc>)
 80012ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012b4:	4b80      	ldr	r3, [pc, #512]	@ (80014b8 <HAL_ADC_MspInit+0x2dc>)
 80012b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012bc:	4b7e      	ldr	r3, [pc, #504]	@ (80014b8 <HAL_ADC_MspInit+0x2dc>)
 80012be:	2220      	movs	r2, #32
 80012c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012c2:	4b7d      	ldr	r3, [pc, #500]	@ (80014b8 <HAL_ADC_MspInit+0x2dc>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012c8:	487b      	ldr	r0, [pc, #492]	@ (80014b8 <HAL_ADC_MspInit+0x2dc>)
 80012ca:	f003 ff93 	bl	80051f4 <HAL_DMA_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80012d4:	f001 f840 	bl	8002358 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a77      	ldr	r2, [pc, #476]	@ (80014b8 <HAL_ADC_MspInit+0x2dc>)
 80012dc:	655a      	str	r2, [r3, #84]	@ 0x54
 80012de:	4a76      	ldr	r2, [pc, #472]	@ (80014b8 <HAL_ADC_MspInit+0x2dc>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 80012e4:	e1df      	b.n	80016a6 <HAL_ADC_MspInit+0x4ca>
  else if(adcHandle->Instance==ADC2)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a75      	ldr	r2, [pc, #468]	@ (80014c0 <HAL_ADC_MspInit+0x2e4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d16c      	bne.n	80013ca <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012f4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012f6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012fa:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001300:	4618      	mov	r0, r3
 8001302:	f008 fe77 	bl	8009ff4 <HAL_RCCEx_PeriphCLKConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 800130c:	f001 f824 	bl	8002358 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001310:	4b67      	ldr	r3, [pc, #412]	@ (80014b0 <HAL_ADC_MspInit+0x2d4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	4a66      	ldr	r2, [pc, #408]	@ (80014b0 <HAL_ADC_MspInit+0x2d4>)
 8001318:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800131a:	4b65      	ldr	r3, [pc, #404]	@ (80014b0 <HAL_ADC_MspInit+0x2d4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d10b      	bne.n	800133a <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001322:	4b64      	ldr	r3, [pc, #400]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	4a63      	ldr	r2, [pc, #396]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 8001328:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800132c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132e:	4b61      	ldr	r3, [pc, #388]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
 8001338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	4b5e      	ldr	r3, [pc, #376]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a5d      	ldr	r2, [pc, #372]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b5b      	ldr	r3, [pc, #364]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	623b      	str	r3, [r7, #32]
 8001350:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001352:	2340      	movs	r3, #64	@ 0x40
 8001354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001358:	2303      	movs	r3, #3
 800135a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001368:	4619      	mov	r1, r3
 800136a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800136e:	f004 fab3 	bl	80058d8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001372:	4b54      	ldr	r3, [pc, #336]	@ (80014c4 <HAL_ADC_MspInit+0x2e8>)
 8001374:	4a54      	ldr	r2, [pc, #336]	@ (80014c8 <HAL_ADC_MspInit+0x2ec>)
 8001376:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001378:	4b52      	ldr	r3, [pc, #328]	@ (80014c4 <HAL_ADC_MspInit+0x2e8>)
 800137a:	2224      	movs	r2, #36	@ 0x24
 800137c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800137e:	4b51      	ldr	r3, [pc, #324]	@ (80014c4 <HAL_ADC_MspInit+0x2e8>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001384:	4b4f      	ldr	r3, [pc, #316]	@ (80014c4 <HAL_ADC_MspInit+0x2e8>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800138a:	4b4e      	ldr	r3, [pc, #312]	@ (80014c4 <HAL_ADC_MspInit+0x2e8>)
 800138c:	2280      	movs	r2, #128	@ 0x80
 800138e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001390:	4b4c      	ldr	r3, [pc, #304]	@ (80014c4 <HAL_ADC_MspInit+0x2e8>)
 8001392:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001396:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001398:	4b4a      	ldr	r3, [pc, #296]	@ (80014c4 <HAL_ADC_MspInit+0x2e8>)
 800139a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800139e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80013a0:	4b48      	ldr	r3, [pc, #288]	@ (80014c4 <HAL_ADC_MspInit+0x2e8>)
 80013a2:	2220      	movs	r2, #32
 80013a4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80013a6:	4b47      	ldr	r3, [pc, #284]	@ (80014c4 <HAL_ADC_MspInit+0x2e8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80013ac:	4845      	ldr	r0, [pc, #276]	@ (80014c4 <HAL_ADC_MspInit+0x2e8>)
 80013ae:	f003 ff21 	bl	80051f4 <HAL_DMA_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 80013b8:	f000 ffce 	bl	8002358 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a41      	ldr	r2, [pc, #260]	@ (80014c4 <HAL_ADC_MspInit+0x2e8>)
 80013c0:	655a      	str	r2, [r3, #84]	@ 0x54
 80013c2:	4a40      	ldr	r2, [pc, #256]	@ (80014c4 <HAL_ADC_MspInit+0x2e8>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80013c8:	e16d      	b.n	80016a6 <HAL_ADC_MspInit+0x4ca>
  else if(adcHandle->Instance==ADC3)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a3f      	ldr	r2, [pc, #252]	@ (80014cc <HAL_ADC_MspInit+0x2f0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	f040 8085 	bne.w	80014e0 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80013d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013da:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80013dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80013e0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013e6:	4618      	mov	r0, r3
 80013e8:	f008 fe04 	bl	8009ff4 <HAL_RCCEx_PeriphCLKConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 80013f2:	f000 ffb1 	bl	8002358 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80013f6:	4b36      	ldr	r3, [pc, #216]	@ (80014d0 <HAL_ADC_MspInit+0x2f4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	4a34      	ldr	r2, [pc, #208]	@ (80014d0 <HAL_ADC_MspInit+0x2f4>)
 80013fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001400:	4b33      	ldr	r3, [pc, #204]	@ (80014d0 <HAL_ADC_MspInit+0x2f4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d10b      	bne.n	8001420 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001408:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140c:	4a29      	ldr	r2, [pc, #164]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 800140e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001412:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001414:	4b27      	ldr	r3, [pc, #156]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001418:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	4b24      	ldr	r3, [pc, #144]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001424:	4a23      	ldr	r2, [pc, #140]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 8001426:	f043 0302 	orr.w	r3, r3, #2
 800142a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142c:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <HAL_ADC_MspInit+0x2d8>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001438:	2302      	movs	r3, #2
 800143a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800143e:	2303      	movs	r3, #3
 8001440:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800144e:	4619      	mov	r1, r3
 8001450:	4820      	ldr	r0, [pc, #128]	@ (80014d4 <HAL_ADC_MspInit+0x2f8>)
 8001452:	f004 fa41 	bl	80058d8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001456:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <HAL_ADC_MspInit+0x2fc>)
 8001458:	4a20      	ldr	r2, [pc, #128]	@ (80014dc <HAL_ADC_MspInit+0x300>)
 800145a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800145c:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <HAL_ADC_MspInit+0x2fc>)
 800145e:	2225      	movs	r2, #37	@ 0x25
 8001460:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001462:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <HAL_ADC_MspInit+0x2fc>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <HAL_ADC_MspInit+0x2fc>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <HAL_ADC_MspInit+0x2fc>)
 8001470:	2280      	movs	r2, #128	@ 0x80
 8001472:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <HAL_ADC_MspInit+0x2fc>)
 8001476:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800147a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800147c:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <HAL_ADC_MspInit+0x2fc>)
 800147e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001482:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001484:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <HAL_ADC_MspInit+0x2fc>)
 8001486:	2220      	movs	r2, #32
 8001488:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800148a:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <HAL_ADC_MspInit+0x2fc>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001490:	4811      	ldr	r0, [pc, #68]	@ (80014d8 <HAL_ADC_MspInit+0x2fc>)
 8001492:	f003 feaf 	bl	80051f4 <HAL_DMA_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_ADC_MspInit+0x2c4>
      Error_Handler();
 800149c:	f000 ff5c 	bl	8002358 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a0d      	ldr	r2, [pc, #52]	@ (80014d8 <HAL_ADC_MspInit+0x2fc>)
 80014a4:	655a      	str	r2, [r3, #84]	@ 0x54
 80014a6:	4a0c      	ldr	r2, [pc, #48]	@ (80014d8 <HAL_ADC_MspInit+0x2fc>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80014ac:	e0fb      	b.n	80016a6 <HAL_ADC_MspInit+0x4ca>
 80014ae:	bf00      	nop
 80014b0:	200005b8 	.word	0x200005b8
 80014b4:	40021000 	.word	0x40021000
 80014b8:	200003d8 	.word	0x200003d8
 80014bc:	40020008 	.word	0x40020008
 80014c0:	50000100 	.word	0x50000100
 80014c4:	20000438 	.word	0x20000438
 80014c8:	4002001c 	.word	0x4002001c
 80014cc:	50000400 	.word	0x50000400
 80014d0:	200005bc 	.word	0x200005bc
 80014d4:	48000400 	.word	0x48000400
 80014d8:	20000498 	.word	0x20000498
 80014dc:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a72      	ldr	r2, [pc, #456]	@ (80016b0 <HAL_ADC_MspInit+0x4d4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d16c      	bne.n	80015c4 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014ee:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80014f4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014fa:	4618      	mov	r0, r3
 80014fc:	f008 fd7a 	bl	8009ff4 <HAL_RCCEx_PeriphCLKConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8001506:	f000 ff27 	bl	8002358 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800150a:	4b6a      	ldr	r3, [pc, #424]	@ (80016b4 <HAL_ADC_MspInit+0x4d8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	4a68      	ldr	r2, [pc, #416]	@ (80016b4 <HAL_ADC_MspInit+0x4d8>)
 8001512:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001514:	4b67      	ldr	r3, [pc, #412]	@ (80016b4 <HAL_ADC_MspInit+0x4d8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d10b      	bne.n	8001534 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800151c:	4b66      	ldr	r3, [pc, #408]	@ (80016b8 <HAL_ADC_MspInit+0x4dc>)
 800151e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001520:	4a65      	ldr	r2, [pc, #404]	@ (80016b8 <HAL_ADC_MspInit+0x4dc>)
 8001522:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001526:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001528:	4b63      	ldr	r3, [pc, #396]	@ (80016b8 <HAL_ADC_MspInit+0x4dc>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001534:	4b60      	ldr	r3, [pc, #384]	@ (80016b8 <HAL_ADC_MspInit+0x4dc>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001538:	4a5f      	ldr	r2, [pc, #380]	@ (80016b8 <HAL_ADC_MspInit+0x4dc>)
 800153a:	f043 0310 	orr.w	r3, r3, #16
 800153e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001540:	4b5d      	ldr	r3, [pc, #372]	@ (80016b8 <HAL_ADC_MspInit+0x4dc>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800154c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001550:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001554:	2303      	movs	r3, #3
 8001556:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001560:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001564:	4619      	mov	r1, r3
 8001566:	4855      	ldr	r0, [pc, #340]	@ (80016bc <HAL_ADC_MspInit+0x4e0>)
 8001568:	f004 f9b6 	bl	80058d8 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 800156c:	4b54      	ldr	r3, [pc, #336]	@ (80016c0 <HAL_ADC_MspInit+0x4e4>)
 800156e:	4a55      	ldr	r2, [pc, #340]	@ (80016c4 <HAL_ADC_MspInit+0x4e8>)
 8001570:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8001572:	4b53      	ldr	r3, [pc, #332]	@ (80016c0 <HAL_ADC_MspInit+0x4e4>)
 8001574:	2226      	movs	r2, #38	@ 0x26
 8001576:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001578:	4b51      	ldr	r3, [pc, #324]	@ (80016c0 <HAL_ADC_MspInit+0x4e4>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800157e:	4b50      	ldr	r3, [pc, #320]	@ (80016c0 <HAL_ADC_MspInit+0x4e4>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001584:	4b4e      	ldr	r3, [pc, #312]	@ (80016c0 <HAL_ADC_MspInit+0x4e4>)
 8001586:	2280      	movs	r2, #128	@ 0x80
 8001588:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800158a:	4b4d      	ldr	r3, [pc, #308]	@ (80016c0 <HAL_ADC_MspInit+0x4e4>)
 800158c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001590:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001592:	4b4b      	ldr	r3, [pc, #300]	@ (80016c0 <HAL_ADC_MspInit+0x4e4>)
 8001594:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001598:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 800159a:	4b49      	ldr	r3, [pc, #292]	@ (80016c0 <HAL_ADC_MspInit+0x4e4>)
 800159c:	2220      	movs	r2, #32
 800159e:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80015a0:	4b47      	ldr	r3, [pc, #284]	@ (80016c0 <HAL_ADC_MspInit+0x4e4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80015a6:	4846      	ldr	r0, [pc, #280]	@ (80016c0 <HAL_ADC_MspInit+0x4e4>)
 80015a8:	f003 fe24 	bl	80051f4 <HAL_DMA_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 80015b2:	f000 fed1 	bl	8002358 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a41      	ldr	r2, [pc, #260]	@ (80016c0 <HAL_ADC_MspInit+0x4e4>)
 80015ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80015bc:	4a40      	ldr	r2, [pc, #256]	@ (80016c0 <HAL_ADC_MspInit+0x4e4>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80015c2:	e070      	b.n	80016a6 <HAL_ADC_MspInit+0x4ca>
  else if(adcHandle->Instance==ADC5)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a3f      	ldr	r2, [pc, #252]	@ (80016c8 <HAL_ADC_MspInit+0x4ec>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d16b      	bne.n	80016a6 <HAL_ADC_MspInit+0x4ca>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80015d8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015de:	4618      	mov	r0, r3
 80015e0:	f008 fd08 	bl	8009ff4 <HAL_RCCEx_PeriphCLKConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_ADC_MspInit+0x412>
      Error_Handler();
 80015ea:	f000 feb5 	bl	8002358 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015ee:	4b31      	ldr	r3, [pc, #196]	@ (80016b4 <HAL_ADC_MspInit+0x4d8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a2f      	ldr	r2, [pc, #188]	@ (80016b4 <HAL_ADC_MspInit+0x4d8>)
 80015f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015f8:	4b2e      	ldr	r3, [pc, #184]	@ (80016b4 <HAL_ADC_MspInit+0x4d8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d10b      	bne.n	8001618 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001600:	4b2d      	ldr	r3, [pc, #180]	@ (80016b8 <HAL_ADC_MspInit+0x4dc>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001604:	4a2c      	ldr	r2, [pc, #176]	@ (80016b8 <HAL_ADC_MspInit+0x4dc>)
 8001606:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800160a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160c:	4b2a      	ldr	r3, [pc, #168]	@ (80016b8 <HAL_ADC_MspInit+0x4dc>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001610:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001618:	4b27      	ldr	r3, [pc, #156]	@ (80016b8 <HAL_ADC_MspInit+0x4dc>)
 800161a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161c:	4a26      	ldr	r2, [pc, #152]	@ (80016b8 <HAL_ADC_MspInit+0x4dc>)
 800161e:	f043 0310 	orr.w	r3, r3, #16
 8001622:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001624:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <HAL_ADC_MspInit+0x4dc>)
 8001626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001630:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001634:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001638:	2303      	movs	r3, #3
 800163a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001644:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001648:	4619      	mov	r1, r3
 800164a:	481c      	ldr	r0, [pc, #112]	@ (80016bc <HAL_ADC_MspInit+0x4e0>)
 800164c:	f004 f944 	bl	80058d8 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8001650:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <HAL_ADC_MspInit+0x4f0>)
 8001652:	4a1f      	ldr	r2, [pc, #124]	@ (80016d0 <HAL_ADC_MspInit+0x4f4>)
 8001654:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8001656:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <HAL_ADC_MspInit+0x4f0>)
 8001658:	2227      	movs	r2, #39	@ 0x27
 800165a:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800165c:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <HAL_ADC_MspInit+0x4f0>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001662:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <HAL_ADC_MspInit+0x4f0>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8001668:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <HAL_ADC_MspInit+0x4f0>)
 800166a:	2280      	movs	r2, #128	@ 0x80
 800166c:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800166e:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <HAL_ADC_MspInit+0x4f0>)
 8001670:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001674:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <HAL_ADC_MspInit+0x4f0>)
 8001678:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800167c:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 800167e:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <HAL_ADC_MspInit+0x4f0>)
 8001680:	2220      	movs	r2, #32
 8001682:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <HAL_ADC_MspInit+0x4f0>)
 8001686:	2200      	movs	r2, #0
 8001688:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800168a:	4810      	ldr	r0, [pc, #64]	@ (80016cc <HAL_ADC_MspInit+0x4f0>)
 800168c:	f003 fdb2 	bl	80051f4 <HAL_DMA_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_ADC_MspInit+0x4be>
      Error_Handler();
 8001696:	f000 fe5f 	bl	8002358 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a0b      	ldr	r2, [pc, #44]	@ (80016cc <HAL_ADC_MspInit+0x4f0>)
 800169e:	655a      	str	r2, [r3, #84]	@ 0x54
 80016a0:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <HAL_ADC_MspInit+0x4f0>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80016a6:	bf00      	nop
 80016a8:	3798      	adds	r7, #152	@ 0x98
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	50000500 	.word	0x50000500
 80016b4:	200005bc 	.word	0x200005bc
 80016b8:	40021000 	.word	0x40021000
 80016bc:	48001000 	.word	0x48001000
 80016c0:	200004f8 	.word	0x200004f8
 80016c4:	40020044 	.word	0x40020044
 80016c8:	50000600 	.word	0x50000600
 80016cc:	20000558 	.word	0x20000558
 80016d0:	40020058 	.word	0x40020058

080016d4 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <MX_CORDIC_Init+0x20>)
 80016da:	4a07      	ldr	r2, [pc, #28]	@ (80016f8 <MX_CORDIC_Init+0x24>)
 80016dc:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_CORDIC_Init+0x20>)
 80016e0:	f003 fc0c 	bl	8004efc <HAL_CORDIC_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80016ea:	f000 fe35 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200005c0 	.word	0x200005c0
 80016f8:	40020c00 	.word	0x40020c00

080016fc <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <HAL_CORDIC_MspInit+0x38>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d10b      	bne.n	8001726 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800170e:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_CORDIC_MspInit+0x3c>)
 8001710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001712:	4a09      	ldr	r2, [pc, #36]	@ (8001738 <HAL_CORDIC_MspInit+0x3c>)
 8001714:	f043 0308 	orr.w	r3, r3, #8
 8001718:	6493      	str	r3, [r2, #72]	@ 0x48
 800171a:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <HAL_CORDIC_MspInit+0x3c>)
 800171c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40020c00 	.word	0x40020c00
 8001738:	40021000 	.word	0x40021000

0800173c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001742:	4b2c      	ldr	r3, [pc, #176]	@ (80017f4 <MX_DMA_Init+0xb8>)
 8001744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001746:	4a2b      	ldr	r2, [pc, #172]	@ (80017f4 <MX_DMA_Init+0xb8>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	6493      	str	r3, [r2, #72]	@ 0x48
 800174e:	4b29      	ldr	r3, [pc, #164]	@ (80017f4 <MX_DMA_Init+0xb8>)
 8001750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800175a:	4b26      	ldr	r3, [pc, #152]	@ (80017f4 <MX_DMA_Init+0xb8>)
 800175c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800175e:	4a25      	ldr	r2, [pc, #148]	@ (80017f4 <MX_DMA_Init+0xb8>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6493      	str	r3, [r2, #72]	@ 0x48
 8001766:	4b23      	ldr	r3, [pc, #140]	@ (80017f4 <MX_DMA_Init+0xb8>)
 8001768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001772:	4b20      	ldr	r3, [pc, #128]	@ (80017f4 <MX_DMA_Init+0xb8>)
 8001774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001776:	4a1f      	ldr	r2, [pc, #124]	@ (80017f4 <MX_DMA_Init+0xb8>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	6493      	str	r3, [r2, #72]	@ 0x48
 800177e:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <MX_DMA_Init+0xb8>)
 8001780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2101      	movs	r1, #1
 800178e:	200b      	movs	r0, #11
 8001790:	f003 fce2 	bl	8005158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001794:	200b      	movs	r0, #11
 8001796:	f003 fd09 	bl	80051ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2101      	movs	r1, #1
 800179e:	200c      	movs	r0, #12
 80017a0:	f003 fcda 	bl	8005158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017a4:	200c      	movs	r0, #12
 80017a6:	f003 fd01 	bl	80051ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 1, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2101      	movs	r1, #1
 80017ae:	200d      	movs	r0, #13
 80017b0:	f003 fcd2 	bl	8005158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80017b4:	200d      	movs	r0, #13
 80017b6:	f003 fcf9 	bl	80051ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2101      	movs	r1, #1
 80017be:	200e      	movs	r0, #14
 80017c0:	f003 fcca 	bl	8005158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80017c4:	200e      	movs	r0, #14
 80017c6:	f003 fcf1 	bl	80051ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2101      	movs	r1, #1
 80017ce:	200f      	movs	r0, #15
 80017d0:	f003 fcc2 	bl	8005158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80017d4:	200f      	movs	r0, #15
 80017d6:	f003 fce9 	bl	80051ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2038      	movs	r0, #56	@ 0x38
 80017e0:	f003 fcba 	bl	8005158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80017e4:	2038      	movs	r0, #56	@ 0x38
 80017e6:	f003 fce1 	bl	80051ac <HAL_NVIC_EnableIRQ>

}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000

080017f8 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	@ 0x30
 80017fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800180e:	4b9e      	ldr	r3, [pc, #632]	@ (8001a88 <MX_GPIO_Init+0x290>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001812:	4a9d      	ldr	r2, [pc, #628]	@ (8001a88 <MX_GPIO_Init+0x290>)
 8001814:	f043 0310 	orr.w	r3, r3, #16
 8001818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800181a:	4b9b      	ldr	r3, [pc, #620]	@ (8001a88 <MX_GPIO_Init+0x290>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	4b98      	ldr	r3, [pc, #608]	@ (8001a88 <MX_GPIO_Init+0x290>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182a:	4a97      	ldr	r2, [pc, #604]	@ (8001a88 <MX_GPIO_Init+0x290>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001832:	4b95      	ldr	r3, [pc, #596]	@ (8001a88 <MX_GPIO_Init+0x290>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800183e:	4b92      	ldr	r3, [pc, #584]	@ (8001a88 <MX_GPIO_Init+0x290>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	4a91      	ldr	r2, [pc, #580]	@ (8001a88 <MX_GPIO_Init+0x290>)
 8001844:	f043 0320 	orr.w	r3, r3, #32
 8001848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184a:	4b8f      	ldr	r3, [pc, #572]	@ (8001a88 <MX_GPIO_Init+0x290>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	f003 0320 	and.w	r3, r3, #32
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001856:	4b8c      	ldr	r3, [pc, #560]	@ (8001a88 <MX_GPIO_Init+0x290>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	4a8b      	ldr	r2, [pc, #556]	@ (8001a88 <MX_GPIO_Init+0x290>)
 800185c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001862:	4b89      	ldr	r3, [pc, #548]	@ (8001a88 <MX_GPIO_Init+0x290>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b86      	ldr	r3, [pc, #536]	@ (8001a88 <MX_GPIO_Init+0x290>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	4a85      	ldr	r2, [pc, #532]	@ (8001a88 <MX_GPIO_Init+0x290>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187a:	4b83      	ldr	r3, [pc, #524]	@ (8001a88 <MX_GPIO_Init+0x290>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b80      	ldr	r3, [pc, #512]	@ (8001a88 <MX_GPIO_Init+0x290>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	4a7f      	ldr	r2, [pc, #508]	@ (8001a88 <MX_GPIO_Init+0x290>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001892:	4b7d      	ldr	r3, [pc, #500]	@ (8001a88 <MX_GPIO_Init+0x290>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800189e:	4b7a      	ldr	r3, [pc, #488]	@ (8001a88 <MX_GPIO_Init+0x290>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	4a79      	ldr	r2, [pc, #484]	@ (8001a88 <MX_GPIO_Init+0x290>)
 80018a4:	f043 0308 	orr.w	r3, r3, #8
 80018a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018aa:	4b77      	ldr	r3, [pc, #476]	@ (8001a88 <MX_GPIO_Init+0x290>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80018b6:	2200      	movs	r2, #0
 80018b8:	f64b 413c 	movw	r1, #48188	@ 0xbc3c
 80018bc:	4873      	ldr	r0, [pc, #460]	@ (8001a8c <MX_GPIO_Init+0x294>)
 80018be:	f004 fa5f 	bl	8005d80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80018c2:	2200      	movs	r2, #0
 80018c4:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 80018c8:	4871      	ldr	r0, [pc, #452]	@ (8001a90 <MX_GPIO_Init+0x298>)
 80018ca:	f004 fa59 	bl	8005d80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80018d4:	486f      	ldr	r0, [pc, #444]	@ (8001a94 <MX_GPIO_Init+0x29c>)
 80018d6:	f004 fa53 	bl	8005d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80018da:	2200      	movs	r2, #0
 80018dc:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 80018e0:	486d      	ldr	r0, [pc, #436]	@ (8001a98 <MX_GPIO_Init+0x2a0>)
 80018e2:	f004 fa4d 	bl	8005d80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 80018e6:	2201      	movs	r2, #1
 80018e8:	210f      	movs	r1, #15
 80018ea:	486b      	ldr	r0, [pc, #428]	@ (8001a98 <MX_GPIO_Init+0x2a0>)
 80018ec:	f004 fa48 	bl	8005d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE10 PE11 PE12 PE13
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80018f0:	f64b 433c 	movw	r3, #48188	@ 0xbc3c
 80018f4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001902:	f107 031c 	add.w	r3, r7, #28
 8001906:	4619      	mov	r1, r3
 8001908:	4860      	ldr	r0, [pc, #384]	@ (8001a8c <MX_GPIO_Init+0x294>)
 800190a:	f003 ffe5 	bl	80058d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE9 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_0
 800190e:	f240 23c3 	movw	r3, #707	@ 0x2c3
 8001912:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001914:	2303      	movs	r3, #3
 8001916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4619      	mov	r1, r3
 8001922:	485a      	ldr	r0, [pc, #360]	@ (8001a8c <MX_GPIO_Init+0x294>)
 8001924:	f003 ffd8 	bl	80058d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001928:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800192c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192e:	2301      	movs	r3, #1
 8001930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193a:	f107 031c 	add.w	r3, r7, #28
 800193e:	4619      	mov	r1, r3
 8001940:	4853      	ldr	r0, [pc, #332]	@ (8001a90 <MX_GPIO_Init+0x298>)
 8001942:	f003 ffc9 	bl	80058d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001946:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800194a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800194c:	2303      	movs	r3, #3
 800194e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	4619      	mov	r1, r3
 800195a:	484d      	ldr	r0, [pc, #308]	@ (8001a90 <MX_GPIO_Init+0x298>)
 800195c:	f003 ffbc 	bl	80058d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF9 PF10 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_2;
 8001960:	f240 6304 	movw	r3, #1540	@ 0x604
 8001964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001966:	2303      	movs	r3, #3
 8001968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	4619      	mov	r1, r3
 8001974:	4849      	ldr	r0, [pc, #292]	@ (8001a9c <MX_GPIO_Init+0x2a4>)
 8001976:	f003 ffaf 	bl	80058d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800197a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800197e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001980:	2303      	movs	r3, #3
 8001982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	4844      	ldr	r0, [pc, #272]	@ (8001aa0 <MX_GPIO_Init+0x2a8>)
 8001990:	f003 ffa2 	bl	80058d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001994:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001998:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	2301      	movs	r3, #1
 800199c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	4619      	mov	r1, r3
 80019ac:	4838      	ldr	r0, [pc, #224]	@ (8001a90 <MX_GPIO_Init+0x298>)
 80019ae:	f003 ff93 	bl	80058d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA7 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80019b2:	f248 63be 	movw	r3, #34494	@ 0x86be
 80019b6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b8:	2303      	movs	r3, #3
 80019ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ca:	f003 ff85 	bl	80058d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80019ce:	f640 73fd 	movw	r3, #4093	@ 0xffd
 80019d2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d4:	2303      	movs	r3, #3
 80019d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	4619      	mov	r1, r3
 80019e2:	482c      	ldr	r0, [pc, #176]	@ (8001a94 <MX_GPIO_Init+0x29c>)
 80019e4:	f003 ff78 	bl	80058d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019e8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80019ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	4824      	ldr	r0, [pc, #144]	@ (8001a94 <MX_GPIO_Init+0x29c>)
 8001a02:	f003 ff69 	bl	80058d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001a06:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	481d      	ldr	r0, [pc, #116]	@ (8001a94 <MX_GPIO_Init+0x29c>)
 8001a20:	f003 ff5a 	bl	80058d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a24:	f64f 730f 	movw	r3, #65295	@ 0xff0f
 8001a28:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4816      	ldr	r0, [pc, #88]	@ (8001a98 <MX_GPIO_Init+0x2a0>)
 8001a3e:	f003 ff4b 	bl	80058d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a62:	f003 ff39 	bl	80058d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a66:	23f0      	movs	r3, #240	@ 0xf0
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	4807      	ldr	r0, [pc, #28]	@ (8001a98 <MX_GPIO_Init+0x2a0>)
 8001a7a:	f003 ff2d 	bl	80058d8 <HAL_GPIO_Init>

}
 8001a7e:	bf00      	nop
 8001a80:	3730      	adds	r7, #48	@ 0x30
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	48001000 	.word	0x48001000
 8001a90:	48000800 	.word	0x48000800
 8001a94:	48000400 	.word	0x48000400
 8001a98:	48000c00 	.word	0x48000c00
 8001a9c:	48001400 	.word	0x48001400
 8001aa0:	48001800 	.word	0x48001800

08001aa4 <MX_HRTIM1_Init>:
HRTIM_HandleTypeDef hhrtim1;
DMA_HandleTypeDef hdma_hrtim1_a;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08e      	sub	sp, #56	@ 0x38
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 8001aaa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001ab4:	f107 0320 	add.w	r3, r7, #32
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
 8001ad0:	615a      	str	r2, [r3, #20]
 8001ad2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8001ad4:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd4 <MX_HRTIM1_Init+0x130>)
 8001ad6:	4a40      	ldr	r2, [pc, #256]	@ (8001bd8 <MX_HRTIM1_Init+0x134>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001ada:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd4 <MX_HRTIM1_Init+0x130>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001ae0:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd4 <MX_HRTIM1_Init+0x130>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8001ae6:	483b      	ldr	r0, [pc, #236]	@ (8001bd4 <MX_HRTIM1_Init+0x130>)
 8001ae8:	f004 f998 	bl	8005e1c <HAL_HRTIM_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_HRTIM1_Init+0x52>
  {
    Error_Handler();
 8001af2:	f000 fc31 	bl	8002358 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8001af6:	210c      	movs	r1, #12
 8001af8:	4836      	ldr	r0, [pc, #216]	@ (8001bd4 <MX_HRTIM1_Init+0x130>)
 8001afa:	f004 fab7 	bl	800606c <HAL_HRTIM_DLLCalibrationStart>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_HRTIM1_Init+0x64>
  {
    Error_Handler();
 8001b04:	f000 fc28 	bl	8002358 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8001b08:	210a      	movs	r1, #10
 8001b0a:	4832      	ldr	r0, [pc, #200]	@ (8001bd4 <MX_HRTIM1_Init+0x130>)
 8001b0c:	f004 fb1c 	bl	8006148 <HAL_HRTIM_PollForDLLCalibration>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_HRTIM1_Init+0x76>
  {
    Error_Handler();
 8001b16:	f000 fc1f 	bl	8002358 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_B;
 8001b1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b1e:	633b      	str	r3, [r7, #48]	@ 0x30
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERB_PERIOD;
 8001b20:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001b24:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 8001b26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	4829      	ldr	r0, [pc, #164]	@ (8001bd4 <MX_HRTIM1_Init+0x130>)
 8001b30:	f004 fcbc 	bl	80064ac <HAL_HRTIM_ADCTriggerConfig>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 8001b3a:	f000 fc0d 	bl	8002358 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 0x0) != HAL_OK)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2101      	movs	r1, #1
 8001b42:	4824      	ldr	r0, [pc, #144]	@ (8001bd4 <MX_HRTIM1_Init+0x130>)
 8001b44:	f004 feec 	bl	8006920 <HAL_HRTIM_ADCPostScalerConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_HRTIM1_Init+0xae>
  {
    Error_Handler();
 8001b4e:	f000 fc03 	bl	8002358 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0x0060;
 8001b52:	2360      	movs	r3, #96	@ 0x60
 8001b54:	623b      	str	r3, [r7, #32]
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001b5e:	2308      	movs	r3, #8
 8001b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001b62:	f107 0320 	add.w	r3, r7, #32
 8001b66:	461a      	mov	r2, r3
 8001b68:	2100      	movs	r1, #0
 8001b6a:	481a      	ldr	r0, [pc, #104]	@ (8001bd4 <MX_HRTIM1_Init+0x130>)
 8001b6c:	f004 fb20 	bl	80061b0 <HAL_HRTIM_TimeBaseConfig>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_HRTIM1_Init+0xd6>
  {
    Error_Handler();
 8001b76:	f000 fbef 	bl	8002358 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]

  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	461a      	mov	r2, r3
 8001b86:	2100      	movs	r1, #0
 8001b88:	4812      	ldr	r0, [pc, #72]	@ (8001bd4 <MX_HRTIM1_Init+0x130>)
 8001b8a:	f005 f839 	bl	8006c00 <HAL_HRTIM_WaveformTimerControl>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_HRTIM1_Init+0xf4>
  {
    Error_Handler();
 8001b94:	f000 fbe0 	bl	8002358 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xAF80;
 8001b98:	f64a 7380 	movw	r3, #44928	@ 0xaf80
 8001b9c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8001b9e:	f107 0320 	add.w	r3, r7, #32
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	480b      	ldr	r0, [pc, #44]	@ (8001bd4 <MX_HRTIM1_Init+0x130>)
 8001ba8:	f004 fb02 	bl	80061b0 <HAL_HRTIM_TimeBaseConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_HRTIM1_Init+0x112>
  {
    Error_Handler();
 8001bb2:	f000 fbd1 	bl	8002358 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2101      	movs	r1, #1
 8001bbc:	4805      	ldr	r0, [pc, #20]	@ (8001bd4 <MX_HRTIM1_Init+0x130>)
 8001bbe:	f005 f81f 	bl	8006c00 <HAL_HRTIM_WaveformTimerControl>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_HRTIM1_Init+0x128>
  {
    Error_Handler();
 8001bc8:	f000 fbc6 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	3738      	adds	r7, #56	@ 0x38
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200005e8 	.word	0x200005e8
 8001bd8:	40016800 	.word	0x40016800

08001bdc <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c68 <HAL_HRTIM_MspInit+0x8c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d137      	bne.n	8001c5e <HAL_HRTIM_MspInit+0x82>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001bee:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <HAL_HRTIM_MspInit+0x90>)
 8001bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c6c <HAL_HRTIM_MspInit+0x90>)
 8001bf4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001bf8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001c6c <HAL_HRTIM_MspInit+0x90>)
 8001bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bfe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]

    /* HRTIM1 DMA Init */
    /* HRTIM1_A Init */
    hdma_hrtim1_a.Instance = DMA2_Channel1;
 8001c06:	4b1a      	ldr	r3, [pc, #104]	@ (8001c70 <HAL_HRTIM_MspInit+0x94>)
 8001c08:	4a1a      	ldr	r2, [pc, #104]	@ (8001c74 <HAL_HRTIM_MspInit+0x98>)
 8001c0a:	601a      	str	r2, [r3, #0]
    hdma_hrtim1_a.Init.Request = DMA_REQUEST_HRTIM1_A;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_HRTIM_MspInit+0x94>)
 8001c0e:	2260      	movs	r2, #96	@ 0x60
 8001c10:	605a      	str	r2, [r3, #4]
    hdma_hrtim1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c12:	4b17      	ldr	r3, [pc, #92]	@ (8001c70 <HAL_HRTIM_MspInit+0x94>)
 8001c14:	2210      	movs	r2, #16
 8001c16:	609a      	str	r2, [r3, #8]
    hdma_hrtim1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c18:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_HRTIM_MspInit+0x94>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
    hdma_hrtim1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001c1e:	4b14      	ldr	r3, [pc, #80]	@ (8001c70 <HAL_HRTIM_MspInit+0x94>)
 8001c20:	2280      	movs	r2, #128	@ 0x80
 8001c22:	611a      	str	r2, [r3, #16]
    hdma_hrtim1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c24:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_HRTIM_MspInit+0x94>)
 8001c26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c2a:	615a      	str	r2, [r3, #20]
    hdma_hrtim1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c2c:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <HAL_HRTIM_MspInit+0x94>)
 8001c2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c32:	619a      	str	r2, [r3, #24]
    hdma_hrtim1_a.Init.Mode = DMA_CIRCULAR;
 8001c34:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_HRTIM_MspInit+0x94>)
 8001c36:	2220      	movs	r2, #32
 8001c38:	61da      	str	r2, [r3, #28]
    hdma_hrtim1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c70 <HAL_HRTIM_MspInit+0x94>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_hrtim1_a) != HAL_OK)
 8001c40:	480b      	ldr	r0, [pc, #44]	@ (8001c70 <HAL_HRTIM_MspInit+0x94>)
 8001c42:	f003 fad7 	bl	80051f4 <HAL_DMA_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_HRTIM_MspInit+0x74>
    {
      Error_Handler();
 8001c4c:	f000 fb84 	bl	8002358 <Error_Handler>
    }

    __HAL_LINKDMA(hrtimHandle,hdmaTimerA,hdma_hrtim1_a);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a07      	ldr	r2, [pc, #28]	@ (8001c70 <HAL_HRTIM_MspInit+0x94>)
 8001c54:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8001c58:	4a05      	ldr	r2, [pc, #20]	@ (8001c70 <HAL_HRTIM_MspInit+0x94>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40016800 	.word	0x40016800
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	200006e4 	.word	0x200006e4
 8001c74:	40020408 	.word	0x40020408

08001c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c7e:	f000 fcce 	bl	800261e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c82:	f000 f933 	bl	8001eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c86:	f7ff fdb7 	bl	80017f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c8a:	f7ff fd57 	bl	800173c <MX_DMA_Init>
  MX_USB_Device_Init();
 8001c8e:	f00e faf5 	bl	801027c <MX_USB_Device_Init>
  MX_ADC1_Init();
 8001c92:	f7ff f877 	bl	8000d84 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001c96:	f7ff f8ef 	bl	8000e78 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001c9a:	f7ff f955 	bl	8000f48 <MX_ADC3_Init>
  MX_ADC4_Init();
 8001c9e:	f7ff f9cd 	bl	800103c <MX_ADC4_Init>
  MX_ADC5_Init();
 8001ca2:	f7ff fa33 	bl	800110c <MX_ADC5_Init>
  MX_TIM2_Init();
 8001ca6:	f000 fc1f 	bl	80024e8 <MX_TIM2_Init>
  MX_HRTIM1_Init();
 8001caa:	f7ff fefb 	bl	8001aa4 <MX_HRTIM1_Init>
  MX_CORDIC_Init();
 8001cae:	f7ff fd11 	bl	80016d4 <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */



  //---------- ADC Calibration ----------
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8001cb2:	217f      	movs	r1, #127	@ 0x7f
 8001cb4:	4876      	ldr	r0, [pc, #472]	@ (8001e90 <main+0x218>)
 8001cb6:	f002 feed 	bl	8004a94 <HAL_ADCEx_Calibration_Start>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <main+0x4c>
  	  Error_Handler();
 8001cc0:	f000 fb4a 	bl	8002358 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8001cc4:	217f      	movs	r1, #127	@ 0x7f
 8001cc6:	4873      	ldr	r0, [pc, #460]	@ (8001e94 <main+0x21c>)
 8001cc8:	f002 fee4 	bl	8004a94 <HAL_ADCEx_Calibration_Start>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <main+0x5e>
  	  Error_Handler();
 8001cd2:	f000 fb41 	bl	8002358 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED) != HAL_OK)
 8001cd6:	217f      	movs	r1, #127	@ 0x7f
 8001cd8:	486f      	ldr	r0, [pc, #444]	@ (8001e98 <main+0x220>)
 8001cda:	f002 fedb 	bl	8004a94 <HAL_ADCEx_Calibration_Start>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <main+0x70>
  	  Error_Handler();
 8001ce4:	f000 fb38 	bl	8002358 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED) != HAL_OK)
 8001ce8:	217f      	movs	r1, #127	@ 0x7f
 8001cea:	486c      	ldr	r0, [pc, #432]	@ (8001e9c <main+0x224>)
 8001cec:	f002 fed2 	bl	8004a94 <HAL_ADCEx_Calibration_Start>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <main+0x82>
  	  Error_Handler();
 8001cf6:	f000 fb2f 	bl	8002358 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED) != HAL_OK)
 8001cfa:	217f      	movs	r1, #127	@ 0x7f
 8001cfc:	4868      	ldr	r0, [pc, #416]	@ (8001ea0 <main+0x228>)
 8001cfe:	f002 fec9 	bl	8004a94 <HAL_ADCEx_Calibration_Start>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <main+0x94>
  	  Error_Handler();
 8001d08:	f000 fb26 	bl	8002358 <Error_Handler>

  //---------- ADC Start ----------
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1Buff, BUFFER_SIZE);
 8001d0c:	2280      	movs	r2, #128	@ 0x80
 8001d0e:	4965      	ldr	r1, [pc, #404]	@ (8001ea4 <main+0x22c>)
 8001d10:	485f      	ldr	r0, [pc, #380]	@ (8001e90 <main+0x218>)
 8001d12:	f001 fc09 	bl	8003528 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2Buff, BUFFER_SIZE);
 8001d16:	2280      	movs	r2, #128	@ 0x80
 8001d18:	4963      	ldr	r1, [pc, #396]	@ (8001ea8 <main+0x230>)
 8001d1a:	485e      	ldr	r0, [pc, #376]	@ (8001e94 <main+0x21c>)
 8001d1c:	f001 fc04 	bl	8003528 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3Buff, BUFFER_SIZE);
 8001d20:	2280      	movs	r2, #128	@ 0x80
 8001d22:	4962      	ldr	r1, [pc, #392]	@ (8001eac <main+0x234>)
 8001d24:	485c      	ldr	r0, [pc, #368]	@ (8001e98 <main+0x220>)
 8001d26:	f001 fbff 	bl	8003528 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4Buff, BUFFER_SIZE);
 8001d2a:	2280      	movs	r2, #128	@ 0x80
 8001d2c:	4960      	ldr	r1, [pc, #384]	@ (8001eb0 <main+0x238>)
 8001d2e:	485b      	ldr	r0, [pc, #364]	@ (8001e9c <main+0x224>)
 8001d30:	f001 fbfa 	bl	8003528 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5Buff, BUFFER_SIZE);
 8001d34:	2280      	movs	r2, #128	@ 0x80
 8001d36:	495f      	ldr	r1, [pc, #380]	@ (8001eb4 <main+0x23c>)
 8001d38:	4859      	ldr	r0, [pc, #356]	@ (8001ea0 <main+0x228>)
 8001d3a:	f001 fbf5 	bl	8003528 <HAL_ADC_Start_DMA>

  //---------- Timer Period Set ----------
  uint32_t period = (uint32_t)(CLKFREQ / (2*TIMER2_PRESCALAR * TIMER2_FREQ) - 1);
 8001d3e:	f240 3351 	movw	r3, #849	@ 0x351
 8001d42:	607b      	str	r3, [r7, #4]
  TIM2->ARR = period;
 8001d44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIM2->PSC = TIMER2_PRESCALAR;
 8001d4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d50:	2201      	movs	r2, #1
 8001d52:	629a      	str	r2, [r3, #40]	@ 0x28


  uint32_t updateFreq = (LUT_SIZE*DAC_FREQ);
 8001d54:	4b58      	ldr	r3, [pc, #352]	@ (8001eb8 <main+0x240>)
 8001d56:	603b      	str	r3, [r7, #0]
  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].PERxR = HRTIM_MUL*(CLKFREQ/updateFreq);
 8001d58:	6838      	ldr	r0, [r7, #0]
 8001d5a:	f7fe fb9f 	bl	800049c <__aeabi_ui2d>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	a149      	add	r1, pc, #292	@ (adr r1, 8001e88 <main+0x210>)
 8001d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d68:	f7fe fd3c 	bl	80007e4 <__aeabi_ddiv>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	4b50      	ldr	r3, [pc, #320]	@ (8001ebc <main+0x244>)
 8001d7a:	f7fe fc09 	bl	8000590 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4c4f      	ldr	r4, [pc, #316]	@ (8001ec0 <main+0x248>)
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	f7fe fe14 	bl	80009b4 <__aeabi_d2uiz>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94

  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR = HRTIM_MUL*(CLKFREQ/SAMPLING_FREQUENCY);
 8001d92:	4b4b      	ldr	r3, [pc, #300]	@ (8001ec0 <main+0x248>)
 8001d94:	f24d 4280 	movw	r2, #54400	@ 0xd480
 8001d98:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114


  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8001d9c:	4849      	ldr	r0, [pc, #292]	@ (8001ec4 <main+0x24c>)
 8001d9e:	f008 fea1 	bl	800aae4 <HAL_TIM_Base_Start_IT>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <main+0x134>
  	  Error_Handler();
 8001da8:	f000 fad6 	bl	8002358 <Error_Handler>


  if (HAL_HRTIM_SimpleBaseStart(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B) != HAL_OK)
 8001dac:	2101      	movs	r1, #1
 8001dae:	4846      	ldr	r0, [pc, #280]	@ (8001ec8 <main+0x250>)
 8001db0:	f004 fa78 	bl	80062a4 <HAL_HRTIM_SimpleBaseStart>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <main+0x146>
    	  Error_Handler();
 8001dba:	f000 facd 	bl	8002358 <Error_Handler>

  HAL_Delay(400);
 8001dbe:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001dc2:	f000 fc9d 	bl	8002700 <HAL_Delay>

  //---------- LUT Initialisation ----------
  init_lut();
 8001dc6:	f000 f99b 	bl	8002100 <init_lut>
  HAL_Delay(100);
 8001dca:	2064      	movs	r0, #100	@ 0x64
 8001dcc:	f000 fc98 	bl	8002700 <HAL_Delay>
  HAL_HRTIM_SimpleBaseStart_DMA(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, (uint32_t)&sinewave[0], (uint32_t)&GPIOC->ODR, LUT_SIZE);
 8001dd0:	4a3e      	ldr	r2, [pc, #248]	@ (8001ecc <main+0x254>)
 8001dd2:	2364      	movs	r3, #100	@ 0x64
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed0 <main+0x258>)
 8001dd8:	2100      	movs	r1, #0
 8001dda:	483b      	ldr	r0, [pc, #236]	@ (8001ec8 <main+0x250>)
 8001ddc:	f004 faac 	bl	8006338 <HAL_HRTIM_SimpleBaseStart_DMA>



  //---------- MUX Enable ----------
  updateCurrent(0);
 8001de0:	2000      	movs	r0, #0
 8001de2:	f000 fa91 	bl	8002308 <updateCurrent>
  updateVoltage(0);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f000 f974 	bl	80020d4 <updateVoltage>
//  setGain(1,0b0011);
//  setGain(2,0b0011);
//  setGain(3,0b0011);
//  setGain(4,0b0011);
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001dec:	2201      	movs	r2, #1
 8001dee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001df2:	4838      	ldr	r0, [pc, #224]	@ (8001ed4 <main+0x25c>)
 8001df4:	f003 ffc4 	bl	8005d80 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if (is_main) { // Toggles a status LED
 8001df8:	4b37      	ldr	r3, [pc, #220]	@ (8001ed8 <main+0x260>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d006      	beq.n	8001e10 <main+0x198>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8001e02:	2104      	movs	r1, #4
 8001e04:	4835      	ldr	r0, [pc, #212]	@ (8001edc <main+0x264>)
 8001e06:	f003 ffe7 	bl	8005dd8 <HAL_GPIO_TogglePin>
		is_main = 0;
 8001e0a:	4b33      	ldr	r3, [pc, #204]	@ (8001ed8 <main+0x260>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
	}
	if (is_voltage_mux) { //Updates Voltage MUX and triggers a MUX change
 8001e10:	4b33      	ldr	r3, [pc, #204]	@ (8001ee0 <main+0x268>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0ee      	beq.n	8001df8 <main+0x180>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_1);
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	482f      	ldr	r0, [pc, #188]	@ (8001edc <main+0x264>)
 8001e1e:	f003 ffdb 	bl	8005dd8 <HAL_GPIO_TogglePin>
//		calcMagnitude();
		sendBuffers();
 8001e22:	f000 f8f1 	bl	8002008 <sendBuffers>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_1);
 8001e26:	2102      	movs	r1, #2
 8001e28:	482c      	ldr	r0, [pc, #176]	@ (8001edc <main+0x264>)
 8001e2a:	f003 ffd5 	bl	8005dd8 <HAL_GPIO_TogglePin>

		voltage_mux++;
 8001e2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee4 <main+0x26c>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee4 <main+0x26c>)
 8001e38:	701a      	strb	r2, [r3, #0]
		if (voltage_mux > 3) {
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee4 <main+0x26c>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d90f      	bls.n	8001e62 <main+0x1ea>
			voltage_mux = 0;
 8001e42:	4b28      	ldr	r3, [pc, #160]	@ (8001ee4 <main+0x26c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
			current_mux++;
 8001e48:	4b27      	ldr	r3, [pc, #156]	@ (8001ee8 <main+0x270>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4b25      	ldr	r3, [pc, #148]	@ (8001ee8 <main+0x270>)
 8001e52:	701a      	strb	r2, [r3, #0]
			if (current_mux > 15) {
 8001e54:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <main+0x270>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b0f      	cmp	r3, #15
 8001e5a:	d902      	bls.n	8001e62 <main+0x1ea>
				  current_mux = 0;
 8001e5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <main+0x270>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]

//				  sendMagnitude();

				}
		}
		updateVoltage(voltage_mux);
 8001e62:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <main+0x26c>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f934 	bl	80020d4 <updateVoltage>
		updateCurrent(current_mux);
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee8 <main+0x270>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 fa49 	bl	8002308 <updateCurrent>
		checkStim();
 8001e76:	f000 f9fd 	bl	8002274 <checkStim>
		is_voltage_mux = 0;
 8001e7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <main+0x268>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
	if (is_main) { // Toggles a status LED
 8001e80:	e7ba      	b.n	8001df8 <main+0x180>
 8001e82:	bf00      	nop
 8001e84:	f3af 8000 	nop.w
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	41a443fd 	.word	0x41a443fd
 8001e90:	200001bc 	.word	0x200001bc
 8001e94:	20000228 	.word	0x20000228
 8001e98:	20000294 	.word	0x20000294
 8001e9c:	20000300 	.word	0x20000300
 8001ea0:	2000036c 	.word	0x2000036c
 8001ea4:	200008e4 	.word	0x200008e4
 8001ea8:	200009e4 	.word	0x200009e4
 8001eac:	20000ae4 	.word	0x20000ae4
 8001eb0:	20000be4 	.word	0x20000be4
 8001eb4:	20000ce4 	.word	0x20000ce4
 8001eb8:	000f4240 	.word	0x000f4240
 8001ebc:	40400000 	.word	0x40400000
 8001ec0:	40016800 	.word	0x40016800
 8001ec4:	20000de4 	.word	0x20000de4
 8001ec8:	200005e8 	.word	0x200005e8
 8001ecc:	20000744 	.word	0x20000744
 8001ed0:	48000814 	.word	0x48000814
 8001ed4:	48001000 	.word	0x48001000
 8001ed8:	200008e0 	.word	0x200008e0
 8001edc:	48000c00 	.word	0x48000c00
 8001ee0:	200008e1 	.word	0x200008e1
 8001ee4:	200008d5 	.word	0x200008d5
 8001ee8:	200008d4 	.word	0x200008d4

08001eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b094      	sub	sp, #80	@ 0x50
 8001ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef2:	f107 0318 	add.w	r3, r7, #24
 8001ef6:	2238      	movs	r2, #56	@ 0x38
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f00f fc02 	bl	8011704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f007 f866 	bl	8008fe0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001f14:	2321      	movs	r3, #33	@ 0x21
 8001f16:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f1c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f22:	2302      	movs	r3, #2
 8001f24:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f26:	2303      	movs	r3, #3
 8001f28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV12;
 8001f2a:	230c      	movs	r3, #12
 8001f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001f2e:	2355      	movs	r3, #85	@ 0x55
 8001f30:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f32:	2307      	movs	r3, #7
 8001f34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8001f36:	2306      	movs	r3, #6
 8001f38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f3e:	f107 0318 	add.w	r3, r7, #24
 8001f42:	4618      	mov	r0, r3
 8001f44:	f007 f910 	bl	8009168 <HAL_RCC_OscConfig>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001f4e:	f000 fa03 	bl	8002358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f52:	230f      	movs	r3, #15
 8001f54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f56:	2303      	movs	r3, #3
 8001f58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	2104      	movs	r1, #4
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f007 fd08 	bl	8009980 <HAL_RCC_ClockConfig>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001f76:	f000 f9ef 	bl	8002358 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_2);
 8001f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f7e:	f04f 61a0 	mov.w	r1, #83886080	@ 0x5000000
 8001f82:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001f86:	f007 fef9 	bl	8009d7c <HAL_RCC_MCOConfig>
}
 8001f8a:	bf00      	nop
 8001f8c:	3750      	adds	r7, #80	@ 0x50
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <HAL_TIM_PeriodElapsedCallback>:
 * Args:
 * 		htim: Handle type for the timer to define
 * 			which timer has triggered the callback.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001f94:	b5b0      	push	{r4, r5, r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa4:	d126      	bne.n	8001ff4 <HAL_TIM_PeriodElapsedCallback+0x60>
		gl_ticks++;
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	1c54      	adds	r4, r2, #1
 8001fae:	f143 0500 	adc.w	r5, r3, #0
 8001fb2:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001fb4:	e9c3 4500 	strd	r4, r5, [r3]

		if (gl_ticks % (uint64_t)(TIMER2_FREQ / MAIN_FREQ) == 1) {
 8001fb8:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001fba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fbe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	f7fe fd65 	bl	8000a94 <__aeabi_uldivmod>
 8001fca:	1e51      	subs	r1, r2, #1
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	d102      	bne.n	8001fd6 <HAL_TIM_PeriodElapsedCallback+0x42>
			is_main = 1;
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
		}
	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / VOLTAGE_FREQ) == 1) {
 8001fd6:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001fd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe0:	f04f 0300 	mov.w	r3, #0
 8001fe4:	f7fe fd56 	bl	8000a94 <__aeabi_uldivmod>
 8001fe8:	1e51      	subs	r1, r2, #1
 8001fea:	430b      	orrs	r3, r1
 8001fec:	d102      	bne.n	8001ff4 <HAL_TIM_PeriodElapsedCallback+0x60>
	    	is_voltage_mux = 1;
 8001fee:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
	    }
	}

}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8001ffc:	200008d8 	.word	0x200008d8
 8002000:	200008e0 	.word	0x200008e0
 8002004:	200008e1 	.word	0x200008e1

08002008 <sendBuffers>:
void sendMagnitude(void) {
	uint8_t* data = (uint8_t*)magnitude;
	CDC_Transmit_FS(data, 512);
}

void sendBuffers(void) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
	uint8_t idx_A1 = (current_mux) *16 + 4 * (1 - 1) + voltage_mux;
 800200e:	4b2b      	ldr	r3, [pc, #172]	@ (80020bc <sendBuffers+0xb4>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4b2a      	ldr	r3, [pc, #168]	@ (80020c0 <sendBuffers+0xb8>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	4413      	add	r3, r2
 800201c:	75fb      	strb	r3, [r7, #23]
	uint8_t idx_A2 = (current_mux) *16 + 4 * (2 - 1) + voltage_mux;
 800201e:	4b27      	ldr	r3, [pc, #156]	@ (80020bc <sendBuffers+0xb4>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4b26      	ldr	r3, [pc, #152]	@ (80020c0 <sendBuffers+0xb8>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	b2db      	uxtb	r3, r3
 800202e:	3304      	adds	r3, #4
 8002030:	75bb      	strb	r3, [r7, #22]
	uint8_t idx_A3 = (current_mux) *16 + 4 * (3 - 1) + voltage_mux;
 8002032:	4b22      	ldr	r3, [pc, #136]	@ (80020bc <sendBuffers+0xb4>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b21      	ldr	r3, [pc, #132]	@ (80020c0 <sendBuffers+0xb8>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	4413      	add	r3, r2
 8002040:	b2db      	uxtb	r3, r3
 8002042:	3308      	adds	r3, #8
 8002044:	757b      	strb	r3, [r7, #21]
	uint8_t idx_A4 = (current_mux) *16 + 4 * (4 - 1) + voltage_mux;
 8002046:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <sendBuffers+0xb4>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b1c      	ldr	r3, [pc, #112]	@ (80020c0 <sendBuffers+0xb8>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	4413      	add	r3, r2
 8002054:	b2db      	uxtb	r3, r3
 8002056:	330c      	adds	r3, #12
 8002058:	753b      	strb	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800205a:	b672      	cpsid	i
}
 800205c:	bf00      	nop

	__disable_irq();

	uint8_t* data1 = (uint8_t*)adc1Buff;
 800205e:	4b19      	ldr	r3, [pc, #100]	@ (80020c4 <sendBuffers+0xbc>)
 8002060:	613b      	str	r3, [r7, #16]
	data1[0] = idx_A1;
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	7dfa      	ldrb	r2, [r7, #23]
 8002066:	701a      	strb	r2, [r3, #0]


	uint8_t* data2 = (uint8_t*)adc2Buff;
 8002068:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <sendBuffers+0xc0>)
 800206a:	60fb      	str	r3, [r7, #12]
	data2[0] = idx_A2;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	7dba      	ldrb	r2, [r7, #22]
 8002070:	701a      	strb	r2, [r3, #0]


	uint8_t* data3 = (uint8_t*)adc3Buff;
 8002072:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <sendBuffers+0xc4>)
 8002074:	60bb      	str	r3, [r7, #8]
	data3[0] = idx_A3;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	7d7a      	ldrb	r2, [r7, #21]
 800207a:	701a      	strb	r2, [r3, #0]


	uint8_t* data4 = (uint8_t*)adc4Buff;
 800207c:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <sendBuffers+0xc8>)
 800207e:	607b      	str	r3, [r7, #4]
	data4[0] = idx_A4;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7d3a      	ldrb	r2, [r7, #20]
 8002084:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002086:	b662      	cpsie	i
}
 8002088:	bf00      	nop
	__enable_irq();


	CDC_Transmit_FS(data1, BUFFER_SIZE*2);
 800208a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800208e:	6938      	ldr	r0, [r7, #16]
 8002090:	f00e f9b2 	bl	80103f8 <CDC_Transmit_FS>
	CDC_Transmit_FS(data2, BUFFER_SIZE*2);
 8002094:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f00e f9ad 	bl	80103f8 <CDC_Transmit_FS>
	CDC_Transmit_FS(data3, BUFFER_SIZE*2);
 800209e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020a2:	68b8      	ldr	r0, [r7, #8]
 80020a4:	f00e f9a8 	bl	80103f8 <CDC_Transmit_FS>
	CDC_Transmit_FS(data4, BUFFER_SIZE*2);
 80020a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f00e f9a3 	bl	80103f8 <CDC_Transmit_FS>
}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200008d4 	.word	0x200008d4
 80020c0:	200008d5 	.word	0x200008d5
 80020c4:	200008e4 	.word	0x200008e4
 80020c8:	200009e4 	.word	0x200009e4
 80020cc:	20000ae4 	.word	0x20000ae4
 80020d0:	20000be4 	.word	0x20000be4

080020d4 <updateVoltage>:
 *
 * Args:
 * 		index: The configuration that is being set, only four
 * 			combinations exist to get all readings.
 */
void updateVoltage(uint16_t index) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	80fb      	strh	r3, [r7, #6]
	uint16_t mask = 0xC000; //1100 0000 0000 0000
 80020de:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80020e2:	81fb      	strh	r3, [r7, #14]
	WriteBits(GPIOB, mask, index);
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	89fb      	ldrh	r3, [r7, #14]
 80020ea:	4619      	mov	r1, r3
 80020ec:	4803      	ldr	r0, [pc, #12]	@ (80020fc <updateVoltage+0x28>)
 80020ee:	f000 f867 	bl	80021c0 <WriteBits>
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	48000400 	.word	0x48000400

08002100 <init_lut>:
 * Sets up a look up table of a sinewave with a DC offset
 * and a max 14 bit amplitude. THe frequency is adjusted according
 * to the update rate of the DAC.
 *
 */
void init_lut(void) {
 8002100:	b5b0      	push	{r4, r5, r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
	uint32_t amp = 819;
 8002106:	f240 3333 	movw	r3, #819	@ 0x333
 800210a:	60bb      	str	r3, [r7, #8]
	uint32_t max = 16383;
 800210c:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8002110:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < LUT_SIZE; i++) {
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	e041      	b.n	800219c <init_lut+0x9c>
		float sine = sinf(i * (2.0 * M_PI / LUT_SIZE));
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f7fe f9cf 	bl	80004bc <__aeabi_i2d>
 800211e:	a326      	add	r3, pc, #152	@ (adr r3, 80021b8 <init_lut+0xb8>)
 8002120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002124:	f7fe fa34 	bl	8000590 <__aeabi_dmul>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	f7fe fc60 	bl	80009f4 <__aeabi_d2f>
 8002134:	4603      	mov	r3, r0
 8002136:	ee00 3a10 	vmov	s0, r3
 800213a:	f00e fda9 	bl	8010c90 <sinf>
 800213e:	ed87 0a00 	vstr	s0, [r7]
		sinewave[i] = (uint16_t)(amp * sine + max * 0.5);
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	ee07 3a90 	vmov	s15, r3
 8002148:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800214c:	edd7 7a00 	vldr	s15, [r7]
 8002150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002154:	ee17 0a90 	vmov	r0, s15
 8002158:	f7fe f9c2 	bl	80004e0 <__aeabi_f2d>
 800215c:	4604      	mov	r4, r0
 800215e:	460d      	mov	r5, r1
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7fe f99b 	bl	800049c <__aeabi_ui2d>
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <init_lut+0xb0>)
 800216c:	f7fe fa10 	bl	8000590 <__aeabi_dmul>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4620      	mov	r0, r4
 8002176:	4629      	mov	r1, r5
 8002178:	f7fe f854 	bl	8000224 <__adddf3>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4610      	mov	r0, r2
 8002182:	4619      	mov	r1, r3
 8002184:	f7fe fc16 	bl	80009b4 <__aeabi_d2uiz>
 8002188:	4603      	mov	r3, r0
 800218a:	b29b      	uxth	r3, r3
 800218c:	4619      	mov	r1, r3
 800218e:	4a09      	ldr	r2, [pc, #36]	@ (80021b4 <init_lut+0xb4>)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < LUT_SIZE; i++) {
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3301      	adds	r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b63      	cmp	r3, #99	@ 0x63
 80021a0:	ddba      	ble.n	8002118 <init_lut+0x18>
//		sinewave[i] = (uint16_t)(max * 0.5 * ((amp / max) * sine + 1.0));
	}
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bdb0      	pop	{r4, r5, r7, pc}
 80021ac:	f3af 8000 	nop.w
 80021b0:	3fe00000 	.word	0x3fe00000
 80021b4:	20000744 	.word	0x20000744
 80021b8:	9217271a 	.word	0x9217271a
 80021bc:	3fb015bf 	.word	0x3fb015bf

080021c0 <WriteBits>:
 * 		pinMask: The binary value of the pins that are
 * 			to be changed.
 * 		value: The binary number that is being written
 * 			to the pins defined in pinMask.
 */
void WriteBits(GPIO_TypeDef* GPIOx, uint16_t pinMask, uint8_t value) {
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
 80021cc:	4613      	mov	r3, r2
 80021ce:	707b      	strb	r3, [r7, #1]
    // Clear the bits at the positions of pinMask
    GPIOx->ODR &= ~pinMask;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	887a      	ldrh	r2, [r7, #2]
 80021d6:	43d2      	mvns	r2, r2
 80021d8:	401a      	ands	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	615a      	str	r2, [r3, #20]

    // Set the new value at the positions of pinMask
    GPIOx->ODR |= (value & 0x0F) << __builtin_ctz(pinMask);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	787a      	ldrb	r2, [r7, #1]
 80021e4:	f002 010f 	and.w	r1, r2, #15
 80021e8:	887a      	ldrh	r2, [r7, #2]
 80021ea:	fa92 f2a2 	rbit	r2, r2
 80021ee:	fab2 f282 	clz	r2, r2
 80021f2:	fa01 f202 	lsl.w	r2, r1, r2
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	615a      	str	r2, [r3, #20]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <setGain>:

void setGain(uint16_t adc, uint8_t gain){
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	460a      	mov	r2, r1
 8002212:	80fb      	strh	r3, [r7, #6]
 8002214:	4613      	mov	r3, r2
 8002216:	717b      	strb	r3, [r7, #5]
	if (adc == 1) {
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d106      	bne.n	800222c <setGain+0x24>
		WriteBits(GPIOD, 0b0000001100000000, gain); //0000 0011 0000 0000
 800221e:	797b      	ldrb	r3, [r7, #5]
 8002220:	461a      	mov	r2, r3
 8002222:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002226:	4812      	ldr	r0, [pc, #72]	@ (8002270 <setGain+0x68>)
 8002228:	f7ff ffca 	bl	80021c0 <WriteBits>
	}
	if (adc == 2) {
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d106      	bne.n	8002240 <setGain+0x38>
		WriteBits(GPIOD, 0b0000110000000000, gain); //0000 1100 0000 0000
 8002232:	797b      	ldrb	r3, [r7, #5]
 8002234:	461a      	mov	r2, r3
 8002236:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 800223a:	480d      	ldr	r0, [pc, #52]	@ (8002270 <setGain+0x68>)
 800223c:	f7ff ffc0 	bl	80021c0 <WriteBits>
	}
	if (adc == 3) {
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d106      	bne.n	8002254 <setGain+0x4c>
		WriteBits(GPIOD, 0b0011000000000000, gain); //0011 0000 0000 0000
 8002246:	797b      	ldrb	r3, [r7, #5]
 8002248:	461a      	mov	r2, r3
 800224a:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800224e:	4808      	ldr	r0, [pc, #32]	@ (8002270 <setGain+0x68>)
 8002250:	f7ff ffb6 	bl	80021c0 <WriteBits>
	}
	if (adc == 4) {
 8002254:	88fb      	ldrh	r3, [r7, #6]
 8002256:	2b04      	cmp	r3, #4
 8002258:	d106      	bne.n	8002268 <setGain+0x60>
		WriteBits(GPIOD, 0b1100000000000000, gain); //1100 0000 0000 0000
 800225a:	797b      	ldrb	r3, [r7, #5]
 800225c:	461a      	mov	r2, r3
 800225e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002262:	4803      	ldr	r0, [pc, #12]	@ (8002270 <setGain+0x68>)
 8002264:	f7ff ffac 	bl	80021c0 <WriteBits>
	}
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	48000c00 	.word	0x48000c00

08002274 <checkStim>:

void checkStim(void) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
	for (size_t A = 1; A<5; A++) {
 800227a:	2301      	movs	r3, #1
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e037      	b.n	80022f0 <checkStim+0x7c>
		int firstElec = 4 * (A - 1) + voltage_mux + 1;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	3b01      	subs	r3, #1
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4a1e      	ldr	r2, [pc, #120]	@ (8002300 <checkStim+0x8c>)
 8002288:	7812      	ldrb	r2, [r2, #0]
 800228a:	4413      	add	r3, r2
 800228c:	3301      	adds	r3, #1
 800228e:	613b      	str	r3, [r7, #16]
		int secondElec = (firstElec < 16) ? (firstElec + 1) : 1;
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	dc02      	bgt.n	800229c <checkStim+0x28>
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	3301      	adds	r3, #1
 800229a:	e000      	b.n	800229e <checkStim+0x2a>
 800229c:	2301      	movs	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]

		int firstStim = current_mux + 1;
 80022a0:	4b18      	ldr	r3, [pc, #96]	@ (8002304 <checkStim+0x90>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
		int secondStim = (firstStim < 16) ? (firstStim + 1) : 1;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b0f      	cmp	r3, #15
 80022ac:	dc02      	bgt.n	80022b4 <checkStim+0x40>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3301      	adds	r3, #1
 80022b2:	e000      	b.n	80022b6 <checkStim+0x42>
 80022b4:	2301      	movs	r3, #1
 80022b6:	607b      	str	r3, [r7, #4]
		if (firstElec != firstStim && firstElec != secondStim && secondElec != firstStim) {
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d00e      	beq.n	80022de <checkStim+0x6a>
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d00a      	beq.n	80022de <checkStim+0x6a>
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d006      	beq.n	80022de <checkStim+0x6a>
			setGain(A,0b0011);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2103      	movs	r1, #3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ff96 	bl	8002208 <setGain>
 80022dc:	e005      	b.n	80022ea <checkStim+0x76>
		} else {
			setGain(A,0b0000);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff8f 	bl	8002208 <setGain>
	for (size_t A = 1; A<5; A++) {
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d9c4      	bls.n	8002280 <checkStim+0xc>
		}
	}

}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	200008d5 	.word	0x200008d5
 8002304:	200008d4 	.word	0x200008d4

08002308 <updateCurrent>:
 * passed to it defining what electrodes are written to.
 *
 * Args:
 * 		electrodes: The configuration that is being set.
 */
void updateCurrent(uint16_t electrodes) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	80fb      	strh	r3, [r7, #6]
	uint16_t maskP = 0x003C; //0000 0000 0011 1100
 8002312:	233c      	movs	r3, #60	@ 0x3c
 8002314:	81fb      	strh	r3, [r7, #14]
	uint16_t maskN = 0x3C00; //0011 1100 0000 0000
 8002316:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800231a:	81bb      	strh	r3, [r7, #12]
	uint8_t pinsP = (uint8_t)electrodes; //1,2
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	72fb      	strb	r3, [r7, #11]
	uint8_t pinsN = pinsP < 15 ? pinsP + 1 : 0;
 8002320:	7afb      	ldrb	r3, [r7, #11]
 8002322:	2b0e      	cmp	r3, #14
 8002324:	d803      	bhi.n	800232e <updateCurrent+0x26>
 8002326:	7afb      	ldrb	r3, [r7, #11]
 8002328:	3301      	adds	r3, #1
 800232a:	b2db      	uxtb	r3, r3
 800232c:	e000      	b.n	8002330 <updateCurrent+0x28>
 800232e:	2300      	movs	r3, #0
 8002330:	72bb      	strb	r3, [r7, #10]
	WriteBits(GPIOE, maskP, pinsP);
 8002332:	7afa      	ldrb	r2, [r7, #11]
 8002334:	89fb      	ldrh	r3, [r7, #14]
 8002336:	4619      	mov	r1, r3
 8002338:	4806      	ldr	r0, [pc, #24]	@ (8002354 <updateCurrent+0x4c>)
 800233a:	f7ff ff41 	bl	80021c0 <WriteBits>
	WriteBits(GPIOE, maskN, pinsN);
 800233e:	7aba      	ldrb	r2, [r7, #10]
 8002340:	89bb      	ldrh	r3, [r7, #12]
 8002342:	4619      	mov	r1, r3
 8002344:	4803      	ldr	r0, [pc, #12]	@ (8002354 <updateCurrent+0x4c>)
 8002346:	f7ff ff3b 	bl	80021c0 <WriteBits>
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	48001000 	.word	0x48001000

08002358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800235c:	b672      	cpsid	i
}
 800235e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <Error_Handler+0x8>

08002364 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	4b0f      	ldr	r3, [pc, #60]	@ (80023c0 <HAL_MspInit+0x44>)
 8002384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002386:	4a0e      	ldr	r2, [pc, #56]	@ (80023c0 <HAL_MspInit+0x44>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6613      	str	r3, [r2, #96]	@ 0x60
 800238e:	4b0c      	ldr	r3, [pc, #48]	@ (80023c0 <HAL_MspInit+0x44>)
 8002390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <HAL_MspInit+0x44>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239e:	4a08      	ldr	r2, [pc, #32]	@ (80023c0 <HAL_MspInit+0x44>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80023a6:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <HAL_MspInit+0x44>)
 80023a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80023b2:	f006 fec9 	bl	8009148 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000

080023c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <NMI_Handler+0x4>

080023cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <HardFault_Handler+0x4>

080023d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <MemManage_Handler+0x4>

080023dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <BusFault_Handler+0x4>

080023e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <UsageFault_Handler+0x4>

080023ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800241a:	f000 f953 	bl	80026c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002428:	4802      	ldr	r0, [pc, #8]	@ (8002434 <DMA1_Channel1_IRQHandler+0x10>)
 800242a:	f003 f905 	bl	8005638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200003d8 	.word	0x200003d8

08002438 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800243c:	4802      	ldr	r0, [pc, #8]	@ (8002448 <DMA1_Channel2_IRQHandler+0x10>)
 800243e:	f003 f8fb 	bl	8005638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000438 	.word	0x20000438

0800244c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002450:	4802      	ldr	r0, [pc, #8]	@ (800245c <DMA1_Channel3_IRQHandler+0x10>)
 8002452:	f003 f8f1 	bl	8005638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000498 	.word	0x20000498

08002460 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8002464:	4802      	ldr	r0, [pc, #8]	@ (8002470 <DMA1_Channel4_IRQHandler+0x10>)
 8002466:	f003 f8e7 	bl	8005638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200004f8 	.word	0x200004f8

08002474 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8002478:	4802      	ldr	r0, [pc, #8]	@ (8002484 <DMA1_Channel5_IRQHandler+0x10>)
 800247a:	f003 f8dd 	bl	8005638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000558 	.word	0x20000558

08002488 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800248c:	4802      	ldr	r0, [pc, #8]	@ (8002498 <USB_LP_IRQHandler+0x10>)
 800248e:	f005 f963 	bl	8007758 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20002308 	.word	0x20002308

0800249c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024a0:	4802      	ldr	r0, [pc, #8]	@ (80024ac <TIM2_IRQHandler+0x10>)
 80024a2:	f008 fbdf 	bl	800ac64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000de4 	.word	0x20000de4

080024b0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_hrtim1_a);
 80024b4:	4802      	ldr	r0, [pc, #8]	@ (80024c0 <DMA2_Channel1_IRQHandler+0x10>)
 80024b6:	f003 f8bf 	bl	8005638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200006e4 	.word	0x200006e4

080024c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024c8:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <SystemInit+0x20>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ce:	4a05      	ldr	r2, [pc, #20]	@ (80024e4 <SystemInit+0x20>)
 80024d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ee:	f107 0310 	add.w	r3, r7, #16
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002506:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <MX_TIM2_Init+0x94>)
 8002508:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800250c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800250e:	4b1b      	ldr	r3, [pc, #108]	@ (800257c <MX_TIM2_Init+0x94>)
 8002510:	2201      	movs	r2, #1
 8002512:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002514:	4b19      	ldr	r3, [pc, #100]	@ (800257c <MX_TIM2_Init+0x94>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72000;
 800251a:	4b18      	ldr	r3, [pc, #96]	@ (800257c <MX_TIM2_Init+0x94>)
 800251c:	4a18      	ldr	r2, [pc, #96]	@ (8002580 <MX_TIM2_Init+0x98>)
 800251e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002520:	4b16      	ldr	r3, [pc, #88]	@ (800257c <MX_TIM2_Init+0x94>)
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002526:	4b15      	ldr	r3, [pc, #84]	@ (800257c <MX_TIM2_Init+0x94>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800252c:	4813      	ldr	r0, [pc, #76]	@ (800257c <MX_TIM2_Init+0x94>)
 800252e:	f008 f9c7 	bl	800a8c0 <HAL_TIM_Base_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002538:	f7ff ff0e 	bl	8002358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800253c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002540:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002542:	f107 0310 	add.w	r3, r7, #16
 8002546:	4619      	mov	r1, r3
 8002548:	480c      	ldr	r0, [pc, #48]	@ (800257c <MX_TIM2_Init+0x94>)
 800254a:	f008 fcdb 	bl	800af04 <HAL_TIM_ConfigClockSource>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002554:	f7ff ff00 	bl	8002358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002558:	2300      	movs	r3, #0
 800255a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	4619      	mov	r1, r3
 8002564:	4805      	ldr	r0, [pc, #20]	@ (800257c <MX_TIM2_Init+0x94>)
 8002566:	f009 fd15 	bl	800bf94 <HAL_TIMEx_MasterConfigSynchronization>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002570:	f7ff fef2 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002574:	bf00      	nop
 8002576:	3720      	adds	r7, #32
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000de4 	.word	0x20000de4
 8002580:	00011940 	.word	0x00011940

08002584 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002594:	d113      	bne.n	80025be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002596:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <HAL_TIM_Base_MspInit+0x44>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259a:	4a0b      	ldr	r2, [pc, #44]	@ (80025c8 <HAL_TIM_Base_MspInit+0x44>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a2:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <HAL_TIM_Base_MspInit+0x44>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	201c      	movs	r0, #28
 80025b4:	f002 fdd0 	bl	8005158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025b8:	201c      	movs	r0, #28
 80025ba:	f002 fdf7 	bl	80051ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000

080025cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025cc:	480d      	ldr	r0, [pc, #52]	@ (8002604 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025d0:	f7ff ff78 	bl	80024c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d4:	480c      	ldr	r0, [pc, #48]	@ (8002608 <LoopForever+0x6>)
  ldr r1, =_edata
 80025d6:	490d      	ldr	r1, [pc, #52]	@ (800260c <LoopForever+0xa>)
  ldr r2, =_sidata
 80025d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002610 <LoopForever+0xe>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80025dc:	e002      	b.n	80025e4 <LoopCopyDataInit>

080025de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e2:	3304      	adds	r3, #4

080025e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e8:	d3f9      	bcc.n	80025de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002614 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002618 <LoopForever+0x16>)
  movs r3, #0
 80025ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f0:	e001      	b.n	80025f6 <LoopFillZerobss>

080025f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f4:	3204      	adds	r2, #4

080025f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f8:	d3fb      	bcc.n	80025f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025fa:	f00f f88b 	bl	8011714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025fe:	f7ff fb3b 	bl	8001c78 <main>

08002602 <LoopForever>:

LoopForever:
    b LoopForever
 8002602:	e7fe      	b.n	8002602 <LoopForever>
  ldr   r0, =_estack
 8002604:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800260c:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8002610:	0801217c 	.word	0x0801217c
  ldr r2, =_sbss
 8002614:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8002618:	20002804 	.word	0x20002804

0800261c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800261c:	e7fe      	b.n	800261c <ADC1_2_IRQHandler>

0800261e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002628:	2003      	movs	r0, #3
 800262a:	f002 fd75 	bl	8005118 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800262e:	200f      	movs	r0, #15
 8002630:	f000 f80e 	bl	8002650 <HAL_InitTick>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	71fb      	strb	r3, [r7, #7]
 800263e:	e001      	b.n	8002644 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002640:	f7ff fe9c 	bl	800237c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002644:	79fb      	ldrb	r3, [r7, #7]

}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800265c:	4b16      	ldr	r3, [pc, #88]	@ (80026b8 <HAL_InitTick+0x68>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d022      	beq.n	80026aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002664:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <HAL_InitTick+0x6c>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b13      	ldr	r3, [pc, #76]	@ (80026b8 <HAL_InitTick+0x68>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002670:	fbb1 f3f3 	udiv	r3, r1, r3
 8002674:	fbb2 f3f3 	udiv	r3, r2, r3
 8002678:	4618      	mov	r0, r3
 800267a:	f002 fdaf 	bl	80051dc <HAL_SYSTICK_Config>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10f      	bne.n	80026a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b0f      	cmp	r3, #15
 8002688:	d809      	bhi.n	800269e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800268a:	2200      	movs	r2, #0
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	f04f 30ff 	mov.w	r0, #4294967295
 8002692:	f002 fd61 	bl	8005158 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002696:	4a0a      	ldr	r2, [pc, #40]	@ (80026c0 <HAL_InitTick+0x70>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	e007      	b.n	80026ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
 80026a2:	e004      	b.n	80026ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
 80026a8:	e001      	b.n	80026ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000008 	.word	0x20000008
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000004 	.word	0x20000004

080026c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c8:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <HAL_IncTick+0x1c>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <HAL_IncTick+0x20>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4413      	add	r3, r2
 80026d2:	4a03      	ldr	r2, [pc, #12]	@ (80026e0 <HAL_IncTick+0x1c>)
 80026d4:	6013      	str	r3, [r2, #0]
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	20000e30 	.word	0x20000e30
 80026e4:	20000008 	.word	0x20000008

080026e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return uwTick;
 80026ec:	4b03      	ldr	r3, [pc, #12]	@ (80026fc <HAL_GetTick+0x14>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000e30 	.word	0x20000e30

08002700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff ffee 	bl	80026e8 <HAL_GetTick>
 800270c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d004      	beq.n	8002724 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800271a:	4b09      	ldr	r3, [pc, #36]	@ (8002740 <HAL_Delay+0x40>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4413      	add	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002724:	bf00      	nop
 8002726:	f7ff ffdf 	bl	80026e8 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	429a      	cmp	r2, r3
 8002734:	d8f7      	bhi.n	8002726 <HAL_Delay+0x26>
  {
  }
}
 8002736:	bf00      	nop
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000008 	.word	0x20000008

08002744 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	609a      	str	r2, [r3, #8]
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	609a      	str	r2, [r3, #8]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(const ADC_TypeDef *ADCx)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0318 	and.w	r3, r3, #24
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3360      	adds	r3, #96	@ 0x60
 80027da:	461a      	mov	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b08      	ldr	r3, [pc, #32]	@ (800280c <LL_ADC_SetOffset+0x44>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002800:	bf00      	nop
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	03fff000 	.word	0x03fff000

08002810 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3360      	adds	r3, #96	@ 0x60
 800281e:	461a      	mov	r2, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3360      	adds	r3, #96	@ 0x60
 800284c:	461a      	mov	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	431a      	orrs	r2, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002872:	b480      	push	{r7}
 8002874:	b087      	sub	sp, #28
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3360      	adds	r3, #96	@ 0x60
 8002882:	461a      	mov	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	431a      	orrs	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800289c:	bf00      	nop
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3360      	adds	r3, #96	@ 0x60
 80028b8:	461a      	mov	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80028d2:	bf00      	nop
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	615a      	str	r2, [r3, #20]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800292a:	b480      	push	{r7}
 800292c:	b087      	sub	sp, #28
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3330      	adds	r3, #48	@ 0x30
 800293a:	461a      	mov	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	4413      	add	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	211f      	movs	r1, #31
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	401a      	ands	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	0e9b      	lsrs	r3, r3, #26
 8002962:	f003 011f 	and.w	r1, r3, #31
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	431a      	orrs	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002976:	bf00      	nop
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002982:	b480      	push	{r7}
 8002984:	b087      	sub	sp, #28
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3314      	adds	r3, #20
 8002992:	461a      	mov	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	0e5b      	lsrs	r3, r3, #25
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	4413      	add	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	0d1b      	lsrs	r3, r3, #20
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	2107      	movs	r1, #7
 80029b0:	fa01 f303 	lsl.w	r3, r1, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	401a      	ands	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	0d1b      	lsrs	r3, r3, #20
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	431a      	orrs	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f0:	43db      	mvns	r3, r3
 80029f2:	401a      	ands	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f003 0318 	and.w	r3, r3, #24
 80029fa:	4908      	ldr	r1, [pc, #32]	@ (8002a1c <LL_ADC_SetChannelSingleDiff+0x44>)
 80029fc:	40d9      	lsrs	r1, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	400b      	ands	r3, r1
 8002a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a06:	431a      	orrs	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	0007ffff 	.word	0x0007ffff

08002a20 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 031f 	and.w	r3, r3, #31
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002a4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6093      	str	r3, [r2, #8]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a74:	d101      	bne.n	8002a7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002a98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ac4:	d101      	bne.n	8002aca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ae8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002aec:	f043 0201 	orr.w	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b14:	f043 0202 	orr.w	r2, r3, #2
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <LL_ADC_IsEnabled+0x18>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <LL_ADC_IsEnabled+0x1a>
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d101      	bne.n	8002b66 <LL_ADC_IsDisableOngoing+0x18>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <LL_ADC_IsDisableOngoing+0x1a>
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b88:	f043 0204 	orr.w	r2, r3, #4
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d101      	bne.n	8002bb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d101      	bne.n	8002bda <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b089      	sub	sp, #36	@ 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <HAL_ADC_Init+0x1c>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f000 bc8c 	b.w	800351c <HAL_ADC_Init+0x934>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c0c:	d018      	beq.n	8002c40 <HAL_ADC_Init+0x58>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a63      	ldr	r2, [pc, #396]	@ (8002da0 <HAL_ADC_Init+0x1b8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d013      	beq.n	8002c40 <HAL_ADC_Init+0x58>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a61      	ldr	r2, [pc, #388]	@ (8002da4 <HAL_ADC_Init+0x1bc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00e      	beq.n	8002c40 <HAL_ADC_Init+0x58>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a60      	ldr	r2, [pc, #384]	@ (8002da8 <HAL_ADC_Init+0x1c0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d009      	beq.n	8002c40 <HAL_ADC_Init+0x58>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a5e      	ldr	r2, [pc, #376]	@ (8002dac <HAL_ADC_Init+0x1c4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d004      	beq.n	8002c40 <HAL_ADC_Init+0x58>
 8002c36:	f240 119b 	movw	r1, #411	@ 0x19b
 8002c3a:	485d      	ldr	r0, [pc, #372]	@ (8002db0 <HAL_ADC_Init+0x1c8>)
 8002c3c:	f7ff fb92 	bl	8002364 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c48:	d049      	beq.n	8002cde <HAL_ADC_Init+0xf6>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c52:	d044      	beq.n	8002cde <HAL_ADC_Init+0xf6>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c5c:	d03f      	beq.n	8002cde <HAL_ADC_Init+0xf6>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d03b      	beq.n	8002cde <HAL_ADC_Init+0xf6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c6e:	d036      	beq.n	8002cde <HAL_ADC_Init+0xf6>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c78:	d031      	beq.n	8002cde <HAL_ADC_Init+0xf6>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c82:	d02c      	beq.n	8002cde <HAL_ADC_Init+0xf6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c8c:	d027      	beq.n	8002cde <HAL_ADC_Init+0xf6>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002c96:	d022      	beq.n	8002cde <HAL_ADC_Init+0xf6>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002ca0:	d01d      	beq.n	8002cde <HAL_ADC_Init+0xf6>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002caa:	d018      	beq.n	8002cde <HAL_ADC_Init+0xf6>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cb4:	d013      	beq.n	8002cde <HAL_ADC_Init+0xf6>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002cbe:	d00e      	beq.n	8002cde <HAL_ADC_Init+0xf6>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002cc8:	d009      	beq.n	8002cde <HAL_ADC_Init+0xf6>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002cd2:	d004      	beq.n	8002cde <HAL_ADC_Init+0xf6>
 8002cd4:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8002cd8:	4835      	ldr	r0, [pc, #212]	@ (8002db0 <HAL_ADC_Init+0x1c8>)
 8002cda:	f7ff fb43 	bl	8002364 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d010      	beq.n	8002d08 <HAL_ADC_Init+0x120>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d00c      	beq.n	8002d08 <HAL_ADC_Init+0x120>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b10      	cmp	r3, #16
 8002cf4:	d008      	beq.n	8002d08 <HAL_ADC_Init+0x120>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b18      	cmp	r3, #24
 8002cfc:	d004      	beq.n	8002d08 <HAL_ADC_Init+0x120>
 8002cfe:	f240 119d 	movw	r1, #413	@ 0x19d
 8002d02:	482b      	ldr	r0, [pc, #172]	@ (8002db0 <HAL_ADC_Init+0x1c8>)
 8002d04:	f7ff fb2e 	bl	8002364 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <HAL_ADC_Init+0x13c>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d18:	d004      	beq.n	8002d24 <HAL_ADC_Init+0x13c>
 8002d1a:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8002d1e:	4824      	ldr	r0, [pc, #144]	@ (8002db0 <HAL_ADC_Init+0x1c8>)
 8002d20:	f7ff fb20 	bl	8002364 <assert_failed>
  assert_param(IS_ADC_GAIN_COMPENSATION(hadc->Init.GainCompensation));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f244 0209 	movw	r2, #16393	@ 0x4009
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d904      	bls.n	8002d3a <HAL_ADC_Init+0x152>
 8002d30:	f240 119f 	movw	r1, #415	@ 0x19f
 8002d34:	481e      	ldr	r0, [pc, #120]	@ (8002db0 <HAL_ADC_Init+0x1c8>)
 8002d36:	f7ff fb15 	bl	8002364 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_ADC_Init+0x16c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d004      	beq.n	8002d54 <HAL_ADC_Init+0x16c>
 8002d4a:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8002d4e:	4818      	ldr	r0, [pc, #96]	@ (8002db0 <HAL_ADC_Init+0x1c8>)
 8002d50:	f7ff fb08 	bl	8002364 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	7f5b      	ldrb	r3, [r3, #29]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_ADC_Init+0x186>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7f5b      	ldrb	r3, [r3, #29]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d004      	beq.n	8002d6e <HAL_ADC_Init+0x186>
 8002d64:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8002d68:	4811      	ldr	r0, [pc, #68]	@ (8002db0 <HAL_ADC_Init+0x1c8>)
 8002d6a:	f7ff fafb 	bl	8002364 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d01e      	beq.n	8002db4 <HAL_ADC_Init+0x1cc>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d7e:	d019      	beq.n	8002db4 <HAL_ADC_Init+0x1cc>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d88:	d014      	beq.n	8002db4 <HAL_ADC_Init+0x1cc>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d92:	d00f      	beq.n	8002db4 <HAL_ADC_Init+0x1cc>
 8002d94:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8002d98:	4805      	ldr	r0, [pc, #20]	@ (8002db0 <HAL_ADC_Init+0x1c8>)
 8002d9a:	f7ff fae3 	bl	8002364 <assert_failed>
 8002d9e:	e009      	b.n	8002db4 <HAL_ADC_Init+0x1cc>
 8002da0:	50000100 	.word	0x50000100
 8002da4:	50000400 	.word	0x50000400
 8002da8:	50000500 	.word	0x50000500
 8002dac:	50000600 	.word	0x50000600
 8002db0:	08011774 	.word	0x08011774
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db8:	f5b3 6fa4 	cmp.w	r3, #1312	@ 0x520
 8002dbc:	f000 80f3 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	f5b3 6fa8 	cmp.w	r3, #1344	@ 0x540
 8002dc8:	f000 80ed 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd0:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 8002dd4:	f000 80e7 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ddc:	f5b3 6fac 	cmp.w	r3, #1376	@ 0x560
 8002de0:	f000 80e1 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de8:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8002dec:	f000 80db 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df4:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8002df8:	f000 80d5 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e00:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8002e04:	f000 80cf 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	f5b3 6ff8 	cmp.w	r3, #1984	@ 0x7c0
 8002e10:	f000 80c9 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e18:	f5b3 6f9c 	cmp.w	r3, #1248	@ 0x4e0
 8002e1c:	f000 80c3 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e24:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002e28:	f000 80bd 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e30:	f5b3 6fb8 	cmp.w	r3, #1472	@ 0x5c0
 8002e34:	f000 80b7 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002e40:	f000 80b1 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	f5b3 6fc4 	cmp.w	r3, #1568	@ 0x620
 8002e4c:	f000 80ab 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e54:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8002e58:	f000 80a5 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e60:	f5b3 6fd4 	cmp.w	r3, #1696	@ 0x6a0
 8002e64:	f000 809f 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	f5b3 6fd8 	cmp.w	r3, #1728	@ 0x6c0
 8002e70:	f000 8099 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e78:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8002e7c:	f000 8093 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e88:	f000 808d 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e90:	f5b3 6fe4 	cmp.w	r3, #1824	@ 0x720
 8002e94:	f000 8087 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9c:	f5b3 6fe8 	cmp.w	r3, #1856	@ 0x740
 8002ea0:	f000 8081 	beq.w	8002fa6 <HAL_ADC_Init+0x3be>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	f5b3 6fec 	cmp.w	r3, #1888	@ 0x760
 8002eac:	d07b      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb2:	f5b3 6ff0 	cmp.w	r3, #1920	@ 0x780
 8002eb6:	d076      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	f5b3 6ff4 	cmp.w	r3, #1952	@ 0x7a0
 8002ec0:	d071      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eca:	d004      	beq.n	8002ed6 <HAL_ADC_Init+0x2ee>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a97      	ldr	r2, [pc, #604]	@ (8003130 <HAL_ADC_Init+0x548>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d127      	bne.n	8002f26 <HAL_ADC_Init+0x33e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ede:	d062      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee4:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 8002ee8:	d05d      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eee:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 8002ef2:	d058      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 8002efc:	d053      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f02:	f5b3 6f94 	cmp.w	r3, #1184	@ 0x4a0
 8002f06:	d04e      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	f5b3 6fcc 	cmp.w	r3, #1632	@ 0x660
 8002f10:	d049      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8002f1a:	d044      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	f5b3 6f98 	cmp.w	r3, #1216	@ 0x4c0
 8002f24:	d03f      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a82      	ldr	r2, [pc, #520]	@ (8003134 <HAL_ADC_Init+0x54c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d009      	beq.n	8002f44 <HAL_ADC_Init+0x35c>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a80      	ldr	r2, [pc, #512]	@ (8003138 <HAL_ADC_Init+0x550>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <HAL_ADC_Init+0x35c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a7f      	ldr	r2, [pc, #508]	@ (800313c <HAL_ADC_Init+0x554>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d127      	bne.n	8002f94 <HAL_ADC_Init+0x3ac>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 8002f4c:	d02b      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f52:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 8002f56:	d026      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f60:	d021      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f66:	f5b3 6f98 	cmp.w	r3, #1216	@ 0x4c0
 8002f6a:	d01c      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f70:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 8002f74:	d017      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7a:	f5b3 6fcc 	cmp.w	r3, #1632	@ 0x660
 8002f7e:	d012      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f84:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8002f88:	d00d      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8e:	f5b3 6f94 	cmp.w	r3, #1184	@ 0x4a0
 8002f92:	d008      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d004      	beq.n	8002fa6 <HAL_ADC_Init+0x3be>
 8002f9c:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8002fa0:	4867      	ldr	r0, [pc, #412]	@ (8003140 <HAL_ADC_Init+0x558>)
 8002fa2:	f7ff f9df 	bl	8002364 <assert_failed>
  assert_param(IS_ADC_SAMPLINGMODE(hadc->Init.SamplingMode));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00e      	beq.n	8002fcc <HAL_ADC_Init+0x3e4>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fb6:	d009      	beq.n	8002fcc <HAL_ADC_Init+0x3e4>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fc0:	d004      	beq.n	8002fcc <HAL_ADC_Init+0x3e4>
 8002fc2:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8002fc6:	485e      	ldr	r0, [pc, #376]	@ (8003140 <HAL_ADC_Init+0x558>)
 8002fc8:	f7ff f9cc 	bl	8002364 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d009      	beq.n	8002fea <HAL_ADC_Init+0x402>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d004      	beq.n	8002fea <HAL_ADC_Init+0x402>
 8002fe0:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002fe4:	4856      	ldr	r0, [pc, #344]	@ (8003140 <HAL_ADC_Init+0x558>)
 8002fe6:	f7ff f9bd 	bl	8002364 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d008      	beq.n	8003004 <HAL_ADC_Init+0x41c>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d004      	beq.n	8003004 <HAL_ADC_Init+0x41c>
 8002ffa:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 8002ffe:	4850      	ldr	r0, [pc, #320]	@ (8003140 <HAL_ADC_Init+0x558>)
 8003000:	f7ff f9b0 	bl	8002364 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d009      	beq.n	8003020 <HAL_ADC_Init+0x438>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003010:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003014:	d004      	beq.n	8003020 <HAL_ADC_Init+0x438>
 8003016:	f240 11a7 	movw	r1, #423	@ 0x1a7
 800301a:	4849      	ldr	r0, [pc, #292]	@ (8003140 <HAL_ADC_Init+0x558>)
 800301c:	f7ff f9a2 	bl	8002364 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	7f1b      	ldrb	r3, [r3, #28]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_ADC_Init+0x452>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	7f1b      	ldrb	r3, [r3, #28]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d004      	beq.n	800303a <HAL_ADC_Init+0x452>
 8003030:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 8003034:	4842      	ldr	r0, [pc, #264]	@ (8003140 <HAL_ADC_Init+0x558>)
 8003036:	f7ff f995 	bl	8002364 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003040:	2b00      	cmp	r3, #0
 8003042:	d009      	beq.n	8003058 <HAL_ADC_Init+0x470>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800304a:	2b01      	cmp	r3, #1
 800304c:	d004      	beq.n	8003058 <HAL_ADC_Init+0x470>
 800304e:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8003052:	483b      	ldr	r0, [pc, #236]	@ (8003140 <HAL_ADC_Init+0x558>)
 8003054:	f7ff f986 	bl	8002364 <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d02d      	beq.n	80030bc <HAL_ADC_Init+0x4d4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_ADC_Init+0x488>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	2b10      	cmp	r3, #16
 800306e:	d904      	bls.n	800307a <HAL_ADC_Init+0x492>
 8003070:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8003074:	4832      	ldr	r0, [pc, #200]	@ (8003140 <HAL_ADC_Init+0x558>)
 8003076:	f7ff f975 	bl	8002364 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003080:	2b00      	cmp	r3, #0
 8003082:	d009      	beq.n	8003098 <HAL_ADC_Init+0x4b0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800308a:	2b01      	cmp	r3, #1
 800308c:	d004      	beq.n	8003098 <HAL_ADC_Init+0x4b0>
 800308e:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8003092:	482b      	ldr	r0, [pc, #172]	@ (8003140 <HAL_ADC_Init+0x558>)
 8003094:	f7ff f966 	bl	8002364 <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d10c      	bne.n	80030bc <HAL_ADC_Init+0x4d4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_ADC_Init+0x4ca>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d904      	bls.n	80030bc <HAL_ADC_Init+0x4d4>
 80030b2:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 80030b6:	4822      	ldr	r0, [pc, #136]	@ (8003140 <HAL_ADC_Init+0x558>)
 80030b8:	f7ff f954 	bl	8002364 <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d108      	bne.n	80030d8 <HAL_ADC_Init+0x4f0>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7f5b      	ldrb	r3, [r3, #29]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d104      	bne.n	80030d8 <HAL_ADC_Init+0x4f0>
 80030ce:	f240 11b7 	movw	r1, #439	@ 0x1b7
 80030d2:	481b      	ldr	r0, [pc, #108]	@ (8003140 <HAL_ADC_Init+0x558>)
 80030d4:	f7ff f946 	bl	8002364 <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d109      	bne.n	80030f4 <HAL_ADC_Init+0x50c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7fe f87b 	bl	80011dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fcb1 	bl	8002a60 <LL_ADC_IsDeepPowerDownEnabled>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d004      	beq.n	800310e <HAL_ADC_Init+0x526>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fc97 	bl	8002a3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fccc 	bl	8002ab0 <LL_ADC_IsInternalRegulatorEnabled>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d122      	bne.n	8003164 <HAL_ADC_Init+0x57c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fcb0 	bl	8002a88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003128:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <HAL_ADC_Init+0x55c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	099b      	lsrs	r3, r3, #6
 800312e:	e00b      	b.n	8003148 <HAL_ADC_Init+0x560>
 8003130:	50000100 	.word	0x50000100
 8003134:	50000400 	.word	0x50000400
 8003138:	50000500 	.word	0x50000500
 800313c:	50000600 	.word	0x50000600
 8003140:	08011774 	.word	0x08011774
 8003144:	20000000 	.word	0x20000000
 8003148:	4a83      	ldr	r2, [pc, #524]	@ (8003358 <HAL_ADC_Init+0x770>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	099b      	lsrs	r3, r3, #6
 8003150:	3301      	adds	r3, #1
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003156:	e002      	b.n	800315e <HAL_ADC_Init+0x576>
    {
      wait_loop_index--;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	3b01      	subs	r3, #1
 800315c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f9      	bne.n	8003158 <HAL_ADC_Init+0x570>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fca1 	bl	8002ab0 <LL_ADC_IsInternalRegulatorEnabled>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10d      	bne.n	8003190 <HAL_ADC_Init+0x5a8>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003178:	f043 0210 	orr.w	r2, r3, #16
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003184:	f043 0201 	orr.w	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fd01 	bl	8002b9c <LL_ADC_REG_IsConversionOngoing>
 800319a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f040 81b0 	bne.w	800350a <HAL_ADC_Init+0x922>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f040 81ac 	bne.w	800350a <HAL_ADC_Init+0x922>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80031ba:	f043 0202 	orr.w	r2, r3, #2
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fcae 	bl	8002b28 <LL_ADC_IsEnabled>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d141      	bne.n	8003256 <HAL_ADC_Init+0x66e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031da:	d004      	beq.n	80031e6 <HAL_ADC_Init+0x5fe>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a5e      	ldr	r2, [pc, #376]	@ (800335c <HAL_ADC_Init+0x774>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d10f      	bne.n	8003206 <HAL_ADC_Init+0x61e>
 80031e6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80031ea:	f7ff fc9d 	bl	8002b28 <LL_ADC_IsEnabled>
 80031ee:	4604      	mov	r4, r0
 80031f0:	485a      	ldr	r0, [pc, #360]	@ (800335c <HAL_ADC_Init+0x774>)
 80031f2:	f7ff fc99 	bl	8002b28 <LL_ADC_IsEnabled>
 80031f6:	4603      	mov	r3, r0
 80031f8:	4323      	orrs	r3, r4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	e012      	b.n	800322c <HAL_ADC_Init+0x644>
 8003206:	4856      	ldr	r0, [pc, #344]	@ (8003360 <HAL_ADC_Init+0x778>)
 8003208:	f7ff fc8e 	bl	8002b28 <LL_ADC_IsEnabled>
 800320c:	4604      	mov	r4, r0
 800320e:	4855      	ldr	r0, [pc, #340]	@ (8003364 <HAL_ADC_Init+0x77c>)
 8003210:	f7ff fc8a 	bl	8002b28 <LL_ADC_IsEnabled>
 8003214:	4603      	mov	r3, r0
 8003216:	431c      	orrs	r4, r3
 8003218:	4853      	ldr	r0, [pc, #332]	@ (8003368 <HAL_ADC_Init+0x780>)
 800321a:	f7ff fc85 	bl	8002b28 <LL_ADC_IsEnabled>
 800321e:	4603      	mov	r3, r0
 8003220:	4323      	orrs	r3, r4
 8003222:	2b00      	cmp	r3, #0
 8003224:	bf0c      	ite	eq
 8003226:	2301      	moveq	r3, #1
 8003228:	2300      	movne	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d012      	beq.n	8003256 <HAL_ADC_Init+0x66e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003238:	d004      	beq.n	8003244 <HAL_ADC_Init+0x65c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a47      	ldr	r2, [pc, #284]	@ (800335c <HAL_ADC_Init+0x774>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d101      	bne.n	8003248 <HAL_ADC_Init+0x660>
 8003244:	4a49      	ldr	r2, [pc, #292]	@ (800336c <HAL_ADC_Init+0x784>)
 8003246:	e000      	b.n	800324a <HAL_ADC_Init+0x662>
 8003248:	4a49      	ldr	r2, [pc, #292]	@ (8003370 <HAL_ADC_Init+0x788>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7ff fa77 	bl	8002744 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7f5b      	ldrb	r3, [r3, #29]
 800325a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003260:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003266:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800326c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003274:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003280:	2b01      	cmp	r3, #1
 8003282:	d106      	bne.n	8003292 <HAL_ADC_Init+0x6aa>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	3b01      	subs	r3, #1
 800328a:	045b      	lsls	r3, r3, #17
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_ADC_Init+0x6c6>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003374 <HAL_ADC_Init+0x78c>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	69b9      	ldr	r1, [r7, #24]
 80032be:	430b      	orrs	r3, r1
 80032c0:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fc70 	bl	8002bc2 <LL_ADC_INJ_IsConversionOngoing>
 80032e2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f040 80ed 	bne.w	80034c6 <HAL_ADC_Init+0x8de>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f040 80e9 	bne.w	80034c6 <HAL_ADC_Init+0x8de>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80032f8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003300:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003310:	f023 0302 	bic.w	r3, r3, #2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	69b9      	ldr	r1, [r7, #24]
 800331a:	430b      	orrs	r3, r1
 800331c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d028      	beq.n	8003378 <HAL_ADC_Init+0x790>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003334:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800333e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003342:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6911      	ldr	r1, [r2, #16]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	430b      	orrs	r3, r1
 8003350:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003354:	e024      	b.n	80033a0 <HAL_ADC_Init+0x7b8>
 8003356:	bf00      	nop
 8003358:	053e2d63 	.word	0x053e2d63
 800335c:	50000100 	.word	0x50000100
 8003360:	50000400 	.word	0x50000400
 8003364:	50000500 	.word	0x50000500
 8003368:	50000600 	.word	0x50000600
 800336c:	50000300 	.word	0x50000300
 8003370:	50000700 	.word	0x50000700
 8003374:	fff04007 	.word	0xfff04007
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003386:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003398:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800339c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	f040 8085 	bne.w	80034b6 <HAL_ADC_Init+0x8ce>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_ADC_Init+0x80e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d01c      	beq.n	80033f6 <HAL_ADC_Init+0x80e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d018      	beq.n	80033f6 <HAL_ADC_Init+0x80e>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c8:	2b0c      	cmp	r3, #12
 80033ca:	d014      	beq.n	80033f6 <HAL_ADC_Init+0x80e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d010      	beq.n	80033f6 <HAL_ADC_Init+0x80e>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d8:	2b14      	cmp	r3, #20
 80033da:	d00c      	beq.n	80033f6 <HAL_ADC_Init+0x80e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e0:	2b18      	cmp	r3, #24
 80033e2:	d008      	beq.n	80033f6 <HAL_ADC_Init+0x80e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e8:	2b1c      	cmp	r3, #28
 80033ea:	d004      	beq.n	80033f6 <HAL_ADC_Init+0x80e>
 80033ec:	f240 2176 	movw	r1, #630	@ 0x276
 80033f0:	484c      	ldr	r0, [pc, #304]	@ (8003524 <HAL_ADC_Init+0x93c>)
 80033f2:	f7fe ffb7 	bl	8002364 <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d025      	beq.n	800344a <HAL_ADC_Init+0x862>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003402:	2b20      	cmp	r3, #32
 8003404:	d021      	beq.n	800344a <HAL_ADC_Init+0x862>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800340a:	2b40      	cmp	r3, #64	@ 0x40
 800340c:	d01d      	beq.n	800344a <HAL_ADC_Init+0x862>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003412:	2b60      	cmp	r3, #96	@ 0x60
 8003414:	d019      	beq.n	800344a <HAL_ADC_Init+0x862>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800341a:	2b80      	cmp	r3, #128	@ 0x80
 800341c:	d015      	beq.n	800344a <HAL_ADC_Init+0x862>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003422:	2ba0      	cmp	r3, #160	@ 0xa0
 8003424:	d011      	beq.n	800344a <HAL_ADC_Init+0x862>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800342a:	2bc0      	cmp	r3, #192	@ 0xc0
 800342c:	d00d      	beq.n	800344a <HAL_ADC_Init+0x862>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003432:	2be0      	cmp	r3, #224	@ 0xe0
 8003434:	d009      	beq.n	800344a <HAL_ADC_Init+0x862>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800343e:	d004      	beq.n	800344a <HAL_ADC_Init+0x862>
 8003440:	f240 2177 	movw	r1, #631	@ 0x277
 8003444:	4837      	ldr	r0, [pc, #220]	@ (8003524 <HAL_ADC_Init+0x93c>)
 8003446:	f7fe ff8d 	bl	8002364 <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_ADC_Init+0x87e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003456:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800345a:	d004      	beq.n	8003466 <HAL_ADC_Init+0x87e>
 800345c:	f44f 711e 	mov.w	r1, #632	@ 0x278
 8003460:	4830      	ldr	r0, [pc, #192]	@ (8003524 <HAL_ADC_Init+0x93c>)
 8003462:	f7fe ff7f 	bl	8002364 <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800346a:	2b01      	cmp	r3, #1
 800346c:	d00a      	beq.n	8003484 <HAL_ADC_Init+0x89c>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003472:	f240 4201 	movw	r2, #1025	@ 0x401
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <HAL_ADC_Init+0x89c>
 800347a:	f240 2179 	movw	r1, #633	@ 0x279
 800347e:	4829      	ldr	r0, [pc, #164]	@ (8003524 <HAL_ADC_Init+0x93c>)
 8003480:	f7fe ff70 	bl	8002364 <assert_failed>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800348e:	f023 0304 	bic.w	r3, r3, #4
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800349a:	4311      	orrs	r1, r2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034a0:	4311      	orrs	r1, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034a6:	430a      	orrs	r2, r1
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	611a      	str	r2, [r3, #16]
 80034b4:	e007      	b.n	80034c6 <HAL_ADC_Init+0x8de>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10c      	bne.n	80034e8 <HAL_ADC_Init+0x900>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d4:	f023 010f 	bic.w	r1, r3, #15
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	1e5a      	subs	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80034e6:	e007      	b.n	80034f8 <HAL_ADC_Init+0x910>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 020f 	bic.w	r2, r2, #15
 80034f6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fc:	f023 0303 	bic.w	r3, r3, #3
 8003500:	f043 0201 	orr.w	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003508:	e007      	b.n	800351a <HAL_ADC_Init+0x932>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350e:	f043 0210 	orr.w	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800351a:	7ffb      	ldrb	r3, [r7, #31]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3724      	adds	r7, #36	@ 0x24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd90      	pop	{r4, r7, pc}
 8003524:	08011774 	.word	0x08011774

08003528 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800353c:	d004      	beq.n	8003548 <HAL_ADC_Start_DMA+0x20>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a69      	ldr	r2, [pc, #420]	@ (80036e8 <HAL_ADC_Start_DMA+0x1c0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d101      	bne.n	800354c <HAL_ADC_Start_DMA+0x24>
 8003548:	4b68      	ldr	r3, [pc, #416]	@ (80036ec <HAL_ADC_Start_DMA+0x1c4>)
 800354a:	e000      	b.n	800354e <HAL_ADC_Start_DMA+0x26>
 800354c:	4b68      	ldr	r3, [pc, #416]	@ (80036f0 <HAL_ADC_Start_DMA+0x1c8>)
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff fa66 	bl	8002a20 <LL_ADC_GetMultimode>
 8003554:	6138      	str	r0, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800355e:	d018      	beq.n	8003592 <HAL_ADC_Start_DMA+0x6a>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a60      	ldr	r2, [pc, #384]	@ (80036e8 <HAL_ADC_Start_DMA+0x1c0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <HAL_ADC_Start_DMA+0x6a>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a61      	ldr	r2, [pc, #388]	@ (80036f4 <HAL_ADC_Start_DMA+0x1cc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00e      	beq.n	8003592 <HAL_ADC_Start_DMA+0x6a>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a5f      	ldr	r2, [pc, #380]	@ (80036f8 <HAL_ADC_Start_DMA+0x1d0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d009      	beq.n	8003592 <HAL_ADC_Start_DMA+0x6a>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a5e      	ldr	r2, [pc, #376]	@ (80036fc <HAL_ADC_Start_DMA+0x1d4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_ADC_Start_DMA+0x6a>
 8003588:	f240 71db 	movw	r1, #2011	@ 0x7db
 800358c:	485c      	ldr	r0, [pc, #368]	@ (8003700 <HAL_ADC_Start_DMA+0x1d8>)
 800358e:	f7fe fee9 	bl	8002364 <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fb00 	bl	8002b9c <LL_ADC_REG_IsConversionOngoing>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f040 809b 	bne.w	80036da <HAL_ADC_Start_DMA+0x1b2>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_ADC_Start_DMA+0x8a>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e096      	b.n	80036e0 <HAL_ADC_Start_DMA+0x1b8>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a4f      	ldr	r2, [pc, #316]	@ (80036fc <HAL_ADC_Start_DMA+0x1d4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d008      	beq.n	80035d6 <HAL_ADC_Start_DMA+0xae>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d005      	beq.n	80035d6 <HAL_ADC_Start_DMA+0xae>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	2b05      	cmp	r3, #5
 80035ce:	d002      	beq.n	80035d6 <HAL_ADC_Start_DMA+0xae>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b09      	cmp	r3, #9
 80035d4:	d17a      	bne.n	80036cc <HAL_ADC_Start_DMA+0x1a4>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f001 f880 	bl	80046dc <ADC_Enable>
 80035dc:	4603      	mov	r3, r0
 80035de:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d16d      	bne.n	80036c2 <HAL_ADC_Start_DMA+0x19a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80035ee:	f023 0301 	bic.w	r3, r3, #1
 80035f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a3a      	ldr	r2, [pc, #232]	@ (80036e8 <HAL_ADC_Start_DMA+0x1c0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d009      	beq.n	8003618 <HAL_ADC_Start_DMA+0xf0>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a3b      	ldr	r2, [pc, #236]	@ (80036f8 <HAL_ADC_Start_DMA+0x1d0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d002      	beq.n	8003614 <HAL_ADC_Start_DMA+0xec>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	e003      	b.n	800361c <HAL_ADC_Start_DMA+0xf4>
 8003614:	4b37      	ldr	r3, [pc, #220]	@ (80036f4 <HAL_ADC_Start_DMA+0x1cc>)
 8003616:	e001      	b.n	800361c <HAL_ADC_Start_DMA+0xf4>
 8003618:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	4293      	cmp	r3, r2
 8003622:	d002      	beq.n	800362a <HAL_ADC_Start_DMA+0x102>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d105      	bne.n	8003636 <HAL_ADC_Start_DMA+0x10e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d006      	beq.n	8003650 <HAL_ADC_Start_DMA+0x128>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003646:	f023 0206 	bic.w	r2, r3, #6
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	661a      	str	r2, [r3, #96]	@ 0x60
 800364e:	e002      	b.n	8003656 <HAL_ADC_Start_DMA+0x12e>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365a:	4a2a      	ldr	r2, [pc, #168]	@ (8003704 <HAL_ADC_Start_DMA+0x1dc>)
 800365c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003662:	4a29      	ldr	r2, [pc, #164]	@ (8003708 <HAL_ADC_Start_DMA+0x1e0>)
 8003664:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800366a:	4a28      	ldr	r2, [pc, #160]	@ (800370c <HAL_ADC_Start_DMA+0x1e4>)
 800366c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	221c      	movs	r2, #28
 8003674:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0210 	orr.w	r2, r2, #16
 800368c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0201 	orr.w	r2, r2, #1
 800369c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3340      	adds	r3, #64	@ 0x40
 80036a8:	4619      	mov	r1, r3
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f001 ff39 	bl	8005524 <HAL_DMA_Start_IT>
 80036b2:	4603      	mov	r3, r0
 80036b4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fa5a 	bl	8002b74 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80036c0:	e00d      	b.n	80036de <HAL_ADC_Start_DMA+0x1b6>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80036ca:	e008      	b.n	80036de <HAL_ADC_Start_DMA+0x1b6>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80036d8:	e001      	b.n	80036de <HAL_ADC_Start_DMA+0x1b6>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036da:	2302      	movs	r3, #2
 80036dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80036de:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	50000100 	.word	0x50000100
 80036ec:	50000300 	.word	0x50000300
 80036f0:	50000700 	.word	0x50000700
 80036f4:	50000400 	.word	0x50000400
 80036f8:	50000500 	.word	0x50000500
 80036fc:	50000600 	.word	0x50000600
 8003700:	08011774 	.word	0x08011774
 8003704:	080048c7 	.word	0x080048c7
 8003708:	0800499f 	.word	0x0800499f
 800370c:	080049bb 	.word	0x080049bb

08003710 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b0b7      	sub	sp, #220	@ 0xdc
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003768:	d018      	beq.n	800379c <HAL_ADC_ConfigChannel+0x50>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a93      	ldr	r2, [pc, #588]	@ (80039bc <HAL_ADC_ConfigChannel+0x270>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d013      	beq.n	800379c <HAL_ADC_ConfigChannel+0x50>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a91      	ldr	r2, [pc, #580]	@ (80039c0 <HAL_ADC_ConfigChannel+0x274>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00e      	beq.n	800379c <HAL_ADC_ConfigChannel+0x50>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a90      	ldr	r2, [pc, #576]	@ (80039c4 <HAL_ADC_ConfigChannel+0x278>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d009      	beq.n	800379c <HAL_ADC_ConfigChannel+0x50>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a8e      	ldr	r2, [pc, #568]	@ (80039c8 <HAL_ADC_ConfigChannel+0x27c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d004      	beq.n	800379c <HAL_ADC_ConfigChannel+0x50>
 8003792:	f640 21d2 	movw	r1, #2770	@ 0xad2
 8003796:	488d      	ldr	r0, [pc, #564]	@ (80039cc <HAL_ADC_ConfigChannel+0x280>)
 8003798:	f7fe fde4 	bl	8002364 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b06      	cmp	r3, #6
 80037a2:	d04f      	beq.n	8003844 <HAL_ADC_ConfigChannel+0xf8>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b0c      	cmp	r3, #12
 80037aa:	d04b      	beq.n	8003844 <HAL_ADC_ConfigChannel+0xf8>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b12      	cmp	r3, #18
 80037b2:	d047      	beq.n	8003844 <HAL_ADC_ConfigChannel+0xf8>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b18      	cmp	r3, #24
 80037ba:	d043      	beq.n	8003844 <HAL_ADC_ConfigChannel+0xf8>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037c4:	d03e      	beq.n	8003844 <HAL_ADC_ConfigChannel+0xf8>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80037ce:	d039      	beq.n	8003844 <HAL_ADC_ConfigChannel+0xf8>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 80037d8:	d034      	beq.n	8003844 <HAL_ADC_ConfigChannel+0xf8>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 80037e2:	d02f      	beq.n	8003844 <HAL_ADC_ConfigChannel+0xf8>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80037ec:	d02a      	beq.n	8003844 <HAL_ADC_ConfigChannel+0xf8>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037f6:	d025      	beq.n	8003844 <HAL_ADC_ConfigChannel+0xf8>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f240 2206 	movw	r2, #518	@ 0x206
 8003800:	4293      	cmp	r3, r2
 8003802:	d01f      	beq.n	8003844 <HAL_ADC_ConfigChannel+0xf8>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 800380c:	d01a      	beq.n	8003844 <HAL_ADC_ConfigChannel+0xf8>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f240 2212 	movw	r2, #530	@ 0x212
 8003816:	4293      	cmp	r3, r2
 8003818:	d014      	beq.n	8003844 <HAL_ADC_ConfigChannel+0xf8>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8003822:	d00f      	beq.n	8003844 <HAL_ADC_ConfigChannel+0xf8>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800382c:	d00a      	beq.n	8003844 <HAL_ADC_ConfigChannel+0xf8>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f240 3206 	movw	r2, #774	@ 0x306
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_ADC_ConfigChannel+0xf8>
 800383a:	f640 21d3 	movw	r1, #2771	@ 0xad3
 800383e:	4863      	ldr	r0, [pc, #396]	@ (80039cc <HAL_ADC_ConfigChannel+0x280>)
 8003840:	f7fe fd90 	bl	8002364 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(pConfig->SamplingTime));
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d025      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x14c>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003854:	d020      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x14c>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d01c      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x14c>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d018      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x14c>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b03      	cmp	r3, #3
 800386c:	d014      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x14c>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b04      	cmp	r3, #4
 8003874:	d010      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x14c>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b05      	cmp	r3, #5
 800387c:	d00c      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x14c>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b06      	cmp	r3, #6
 8003884:	d008      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x14c>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b07      	cmp	r3, #7
 800388c:	d004      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x14c>
 800388e:	f640 21d4 	movw	r1, #2772	@ 0xad4
 8003892:	484e      	ldr	r0, [pc, #312]	@ (80039cc <HAL_ADC_ConfigChannel+0x280>)
 8003894:	f7fe fd66 	bl	8002364 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(pConfig->SingleDiff));
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	2b7f      	cmp	r3, #127	@ 0x7f
 800389e:	d009      	beq.n	80038b4 <HAL_ADC_ConfigChannel+0x168>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4a4a      	ldr	r2, [pc, #296]	@ (80039d0 <HAL_ADC_ConfigChannel+0x284>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d004      	beq.n	80038b4 <HAL_ADC_ConfigChannel+0x168>
 80038aa:	f640 21d5 	movw	r1, #2773	@ 0xad5
 80038ae:	4847      	ldr	r0, [pc, #284]	@ (80039cc <HAL_ADC_ConfigChannel+0x280>)
 80038b0:	f7fe fd58 	bl	8002364 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(pConfig->OffsetNumber));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d014      	beq.n	80038e6 <HAL_ADC_ConfigChannel+0x19a>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d010      	beq.n	80038e6 <HAL_ADC_ConfigChannel+0x19a>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d00c      	beq.n	80038e6 <HAL_ADC_ConfigChannel+0x19a>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d008      	beq.n	80038e6 <HAL_ADC_ConfigChannel+0x19a>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d004      	beq.n	80038e6 <HAL_ADC_ConfigChannel+0x19a>
 80038dc:	f640 21d6 	movw	r1, #2774	@ 0xad6
 80038e0:	483a      	ldr	r0, [pc, #232]	@ (80039cc <HAL_ADC_ConfigChannel+0x280>)
 80038e2:	f7fe fd3f 	bl	8002364 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pConfig->Offset));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	695c      	ldr	r4, [r3, #20]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe ff5c 	bl	80027ac <LL_ADC_GetResolution>
 80038f4:	4603      	mov	r3, r0
 80038f6:	089b      	lsrs	r3, r3, #2
 80038f8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003900:	429c      	cmp	r4, r3
 8003902:	d904      	bls.n	800390e <HAL_ADC_ConfigChannel+0x1c2>
 8003904:	f640 21d7 	movw	r1, #2775	@ 0xad7
 8003908:	4830      	ldr	r0, [pc, #192]	@ (80039cc <HAL_ADC_ConfigChannel+0x280>)
 800390a:	f7fe fd2b 	bl	8002364 <assert_failed>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((pConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b04      	cmp	r3, #4
 8003914:	d009      	beq.n	800392a <HAL_ADC_ConfigChannel+0x1de>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800391c:	2b01      	cmp	r3, #1
 800391e:	d104      	bne.n	800392a <HAL_ADC_ConfigChannel+0x1de>
 8003920:	f640 21db 	movw	r1, #2779	@ 0xadb
 8003924:	4829      	ldr	r0, [pc, #164]	@ (80039cc <HAL_ADC_ConfigChannel+0x280>)
 8003926:	f7fe fd1d 	bl	8002364 <assert_failed>

  /* Verification of channel number */
  if (pConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	4a28      	ldr	r2, [pc, #160]	@ (80039d0 <HAL_ADC_ConfigChannel+0x284>)
 8003930:	4293      	cmp	r3, r2
 8003932:	f000 8189 	beq.w	8003c48 <HAL_ADC_ConfigChannel+0x4fc>
  {
    assert_param(IS_ADC_CHANNEL(hadc, pConfig->Channel));
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b01      	cmp	r3, #1
 800393c:	f000 8253 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a23      	ldr	r2, [pc, #140]	@ (80039d4 <HAL_ADC_ConfigChannel+0x288>)
 8003946:	4293      	cmp	r3, r2
 8003948:	f000 824d 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a21      	ldr	r2, [pc, #132]	@ (80039d8 <HAL_ADC_ConfigChannel+0x28c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	f000 8247 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1f      	ldr	r2, [pc, #124]	@ (80039dc <HAL_ADC_ConfigChannel+0x290>)
 800395e:	4293      	cmp	r3, r2
 8003960:	f000 8241 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1d      	ldr	r2, [pc, #116]	@ (80039e0 <HAL_ADC_ConfigChannel+0x294>)
 800396a:	4293      	cmp	r3, r2
 800396c:	f000 823b 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1b      	ldr	r2, [pc, #108]	@ (80039e4 <HAL_ADC_ConfigChannel+0x298>)
 8003976:	4293      	cmp	r3, r2
 8003978:	f000 8235 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a19      	ldr	r2, [pc, #100]	@ (80039e8 <HAL_ADC_ConfigChannel+0x29c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	f000 822f 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a17      	ldr	r2, [pc, #92]	@ (80039ec <HAL_ADC_ConfigChannel+0x2a0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	f000 8229 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a15      	ldr	r2, [pc, #84]	@ (80039f0 <HAL_ADC_ConfigChannel+0x2a4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	f000 8223 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a13      	ldr	r2, [pc, #76]	@ (80039f4 <HAL_ADC_ConfigChannel+0x2a8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	f000 821d 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a11      	ldr	r2, [pc, #68]	@ (80039f8 <HAL_ADC_ConfigChannel+0x2ac>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	f000 8217 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 80039b8:	e020      	b.n	80039fc <HAL_ADC_ConfigChannel+0x2b0>
 80039ba:	bf00      	nop
 80039bc:	50000100 	.word	0x50000100
 80039c0:	50000400 	.word	0x50000400
 80039c4:	50000500 	.word	0x50000500
 80039c8:	50000600 	.word	0x50000600
 80039cc:	08011774 	.word	0x08011774
 80039d0:	407f0000 	.word	0x407f0000
 80039d4:	04300002 	.word	0x04300002
 80039d8:	08600004 	.word	0x08600004
 80039dc:	19200040 	.word	0x19200040
 80039e0:	1d500080 	.word	0x1d500080
 80039e4:	21800100 	.word	0x21800100
 80039e8:	25b00200 	.word	0x25b00200
 80039ec:	2a000400 	.word	0x2a000400
 80039f0:	2e300800 	.word	0x2e300800
 80039f4:	32601000 	.word	0x32601000
 80039f8:	3ac04000 	.word	0x3ac04000
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a7a      	ldr	r2, [pc, #488]	@ (8003bec <HAL_ADC_ConfigChannel+0x4a0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	f000 81ef 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a10:	d129      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x31a>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a76      	ldr	r2, [pc, #472]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x4a4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	f000 81e4 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a74      	ldr	r2, [pc, #464]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x4a8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	f000 81de 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a72      	ldr	r2, [pc, #456]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x4ac>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	f000 81d8 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a70      	ldr	r2, [pc, #448]	@ (8003bfc <HAL_ADC_ConfigChannel+0x4b0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	f000 81d2 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a6e      	ldr	r2, [pc, #440]	@ (8003c00 <HAL_ADC_ConfigChannel+0x4b4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	f000 81cc 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a6c      	ldr	r2, [pc, #432]	@ (8003c04 <HAL_ADC_ConfigChannel+0x4b8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	f000 81c6 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a6a      	ldr	r2, [pc, #424]	@ (8003c08 <HAL_ADC_ConfigChannel+0x4bc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	f000 81c0 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a68      	ldr	r2, [pc, #416]	@ (8003c0c <HAL_ADC_ConfigChannel+0x4c0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d129      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x378>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a5e      	ldr	r2, [pc, #376]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x4a4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	f000 81b5 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a5c      	ldr	r2, [pc, #368]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x4a8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	f000 81af 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a5a      	ldr	r2, [pc, #360]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x4ac>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	f000 81a9 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a5d      	ldr	r2, [pc, #372]	@ (8003c10 <HAL_ADC_ConfigChannel+0x4c4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	f000 81a3 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a5b      	ldr	r2, [pc, #364]	@ (8003c14 <HAL_ADC_ConfigChannel+0x4c8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	f000 819d 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a59      	ldr	r2, [pc, #356]	@ (8003c18 <HAL_ADC_ConfigChannel+0x4cc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	f000 8197 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a57      	ldr	r2, [pc, #348]	@ (8003c1c <HAL_ADC_ConfigChannel+0x4d0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	f000 8191 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a55      	ldr	r2, [pc, #340]	@ (8003c20 <HAL_ADC_ConfigChannel+0x4d4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d129      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x3d6>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a47      	ldr	r2, [pc, #284]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x4a4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	f000 8186 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a45      	ldr	r2, [pc, #276]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x4a8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	f000 8180 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a43      	ldr	r2, [pc, #268]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x4ac>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	f000 817a 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a4b      	ldr	r2, [pc, #300]	@ (8003c24 <HAL_ADC_ConfigChannel+0x4d8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	f000 8174 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a49      	ldr	r2, [pc, #292]	@ (8003c28 <HAL_ADC_ConfigChannel+0x4dc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	f000 816e 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a3d      	ldr	r2, [pc, #244]	@ (8003c04 <HAL_ADC_ConfigChannel+0x4b8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	f000 8168 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a3b      	ldr	r2, [pc, #236]	@ (8003c08 <HAL_ADC_ConfigChannel+0x4bc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	f000 8162 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a41      	ldr	r2, [pc, #260]	@ (8003c2c <HAL_ADC_ConfigChannel+0x4e0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d129      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x434>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2f      	ldr	r2, [pc, #188]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x4a4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	f000 8157 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a2d      	ldr	r2, [pc, #180]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x4a8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	f000 8151 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x4ac>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	f000 814b 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2e      	ldr	r2, [pc, #184]	@ (8003c10 <HAL_ADC_ConfigChannel+0x4c4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	f000 8145 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a31      	ldr	r2, [pc, #196]	@ (8003c28 <HAL_ADC_ConfigChannel+0x4dc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	f000 813f 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a30      	ldr	r2, [pc, #192]	@ (8003c30 <HAL_ADC_ConfigChannel+0x4e4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	f000 8139 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a23      	ldr	r2, [pc, #140]	@ (8003c08 <HAL_ADC_ConfigChannel+0x4bc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	f000 8133 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a2b      	ldr	r2, [pc, #172]	@ (8003c34 <HAL_ADC_ConfigChannel+0x4e8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d129      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x492>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003c38 <HAL_ADC_ConfigChannel+0x4ec>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	f000 8128 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a28      	ldr	r2, [pc, #160]	@ (8003c3c <HAL_ADC_ConfigChannel+0x4f0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	f000 8122 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a26      	ldr	r2, [pc, #152]	@ (8003c40 <HAL_ADC_ConfigChannel+0x4f4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	f000 811c 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a17      	ldr	r2, [pc, #92]	@ (8003c10 <HAL_ADC_ConfigChannel+0x4c4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	f000 8116 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8003c28 <HAL_ADC_ConfigChannel+0x4dc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	f000 8110 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a0e      	ldr	r2, [pc, #56]	@ (8003c04 <HAL_ADC_ConfigChannel+0x4b8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	f000 810a 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8003c08 <HAL_ADC_ConfigChannel+0x4bc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	f000 8104 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003bde:	f44f 612e 	mov.w	r1, #2784	@ 0xae0
 8003be2:	4818      	ldr	r0, [pc, #96]	@ (8003c44 <HAL_ADC_ConfigChannel+0x4f8>)
 8003be4:	f7fe fbbe 	bl	8002364 <assert_failed>
 8003be8:	e0fd      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003bea:	bf00      	nop
 8003bec:	3ef08000 	.word	0x3ef08000
 8003bf0:	0c900008 	.word	0x0c900008
 8003bf4:	10c00010 	.word	0x10c00010
 8003bf8:	14f00020 	.word	0x14f00020
 8003bfc:	b6902000 	.word	0xb6902000
 8003c00:	c3210000 	.word	0xc3210000
 8003c04:	c7520000 	.word	0xc7520000
 8003c08:	cb840000 	.word	0xcb840000
 8003c0c:	50000100 	.word	0x50000100
 8003c10:	36902000 	.word	0x36902000
 8003c14:	c3290000 	.word	0xc3290000
 8003c18:	47520000 	.word	0x47520000
 8003c1c:	cb8c0000 	.word	0xcb8c0000
 8003c20:	50000400 	.word	0x50000400
 8003c24:	b6982000 	.word	0xb6982000
 8003c28:	43210000 	.word	0x43210000
 8003c2c:	50000500 	.word	0x50000500
 8003c30:	c75a0000 	.word	0xc75a0000
 8003c34:	50000600 	.word	0x50000600
 8003c38:	8c900008 	.word	0x8c900008
 8003c3c:	90c00010 	.word	0x90c00010
 8003c40:	94f00020 	.word	0x94f00020
 8003c44:	08011774 	.word	0x08011774
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a8b      	ldr	r2, [pc, #556]	@ (8003e7c <HAL_ADC_ConfigChannel+0x730>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	f000 80c9 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a89      	ldr	r2, [pc, #548]	@ (8003e80 <HAL_ADC_ConfigChannel+0x734>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	f000 80c3 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a87      	ldr	r2, [pc, #540]	@ (8003e84 <HAL_ADC_ConfigChannel+0x738>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	f000 80bd 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a85      	ldr	r2, [pc, #532]	@ (8003e88 <HAL_ADC_ConfigChannel+0x73c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	f000 80b7 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a83      	ldr	r2, [pc, #524]	@ (8003e8c <HAL_ADC_ConfigChannel+0x740>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	f000 80b1 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a81      	ldr	r2, [pc, #516]	@ (8003e90 <HAL_ADC_ConfigChannel+0x744>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	f000 80ab 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a7f      	ldr	r2, [pc, #508]	@ (8003e94 <HAL_ADC_ConfigChannel+0x748>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	f000 80a5 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7d      	ldr	r2, [pc, #500]	@ (8003e98 <HAL_ADC_ConfigChannel+0x74c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	f000 809f 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cb0:	d117      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x596>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a79      	ldr	r2, [pc, #484]	@ (8003e9c <HAL_ADC_ConfigChannel+0x750>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	f000 8094 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a77      	ldr	r2, [pc, #476]	@ (8003ea0 <HAL_ADC_ConfigChannel+0x754>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	f000 808e 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a75      	ldr	r2, [pc, #468]	@ (8003ea4 <HAL_ADC_ConfigChannel+0x758>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	f000 8088 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a73      	ldr	r2, [pc, #460]	@ (8003ea8 <HAL_ADC_ConfigChannel+0x75c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	f000 8082 	beq.w	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a71      	ldr	r2, [pc, #452]	@ (8003eac <HAL_ADC_ConfigChannel+0x760>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d11d      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x5dc>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a6a      	ldr	r2, [pc, #424]	@ (8003e9c <HAL_ADC_ConfigChannel+0x750>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d077      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a69      	ldr	r2, [pc, #420]	@ (8003ea0 <HAL_ADC_ConfigChannel+0x754>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d072      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a67      	ldr	r2, [pc, #412]	@ (8003ea4 <HAL_ADC_ConfigChannel+0x758>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d06d      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a66      	ldr	r2, [pc, #408]	@ (8003ea8 <HAL_ADC_ConfigChannel+0x75c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d068      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a65      	ldr	r2, [pc, #404]	@ (8003eb0 <HAL_ADC_ConfigChannel+0x764>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d063      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a64      	ldr	r2, [pc, #400]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x768>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d05e      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a62      	ldr	r2, [pc, #392]	@ (8003eb8 <HAL_ADC_ConfigChannel+0x76c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d118      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x618>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a59      	ldr	r2, [pc, #356]	@ (8003e9c <HAL_ADC_ConfigChannel+0x750>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d054      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a57      	ldr	r2, [pc, #348]	@ (8003ea0 <HAL_ADC_ConfigChannel+0x754>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d04f      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a56      	ldr	r2, [pc, #344]	@ (8003ea4 <HAL_ADC_ConfigChannel+0x758>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d04a      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a54      	ldr	r2, [pc, #336]	@ (8003ea8 <HAL_ADC_ConfigChannel+0x75c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d045      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a57      	ldr	r2, [pc, #348]	@ (8003ebc <HAL_ADC_ConfigChannel+0x770>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d040      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a55      	ldr	r2, [pc, #340]	@ (8003ec0 <HAL_ADC_ConfigChannel+0x774>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d122      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x668>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a4a      	ldr	r2, [pc, #296]	@ (8003e9c <HAL_ADC_ConfigChannel+0x750>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d036      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a48      	ldr	r2, [pc, #288]	@ (8003ea0 <HAL_ADC_ConfigChannel+0x754>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d031      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a47      	ldr	r2, [pc, #284]	@ (8003ea4 <HAL_ADC_ConfigChannel+0x758>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d02c      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a45      	ldr	r2, [pc, #276]	@ (8003ea8 <HAL_ADC_ConfigChannel+0x75c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d027      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a45      	ldr	r2, [pc, #276]	@ (8003eb0 <HAL_ADC_ConfigChannel+0x764>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d022      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a43      	ldr	r2, [pc, #268]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x768>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01d      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a43      	ldr	r2, [pc, #268]	@ (8003ebc <HAL_ADC_ConfigChannel+0x770>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d018      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a42      	ldr	r2, [pc, #264]	@ (8003ec4 <HAL_ADC_ConfigChannel+0x778>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d10e      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x690>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a3b      	ldr	r2, [pc, #236]	@ (8003eb0 <HAL_ADC_ConfigChannel+0x764>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a39      	ldr	r2, [pc, #228]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x768>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a39      	ldr	r2, [pc, #228]	@ (8003ebc <HAL_ADC_ConfigChannel+0x770>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_ADC_ConfigChannel+0x69a>
 8003ddc:	f640 21e4 	movw	r1, #2788	@ 0xae4
 8003de0:	4839      	ldr	r0, [pc, #228]	@ (8003ec8 <HAL_ADC_ConfigChannel+0x77c>)
 8003de2:	f7fe fabf 	bl	8002364 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d102      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x6aa>
 8003df0:	2302      	movs	r3, #2
 8003df2:	f000 bc58 	b.w	80046a6 <HAL_ADC_ConfigChannel+0xf5a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fe feca 	bl	8002b9c <LL_ADC_REG_IsConversionOngoing>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f040 8438 	bne.w	8004680 <HAL_ADC_ConfigChannel+0xf34>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6859      	ldr	r1, [r3, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f7fe fd84 	bl	800292a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe feb8 	bl	8002b9c <LL_ADC_REG_IsConversionOngoing>
 8003e2c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fe fec4 	bl	8002bc2 <LL_ADC_INJ_IsConversionOngoing>
 8003e3a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f040 821f 	bne.w	8004286 <HAL_ADC_ConfigChannel+0xb3a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f040 821a 	bne.w	8004286 <HAL_ADC_ConfigChannel+0xb3a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e5a:	d137      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x780>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2200      	movs	r2, #0
 8003e66:	4619      	mov	r1, r3
 8003e68:	f7fe fd8b 	bl	8002982 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fe fd32 	bl	80028de <LL_ADC_SetSamplingTimeCommonConfig>
 8003e7a:	e036      	b.n	8003eea <HAL_ADC_ConfigChannel+0x79e>
 8003e7c:	04300002 	.word	0x04300002
 8003e80:	19200040 	.word	0x19200040
 8003e84:	1d500080 	.word	0x1d500080
 8003e88:	21800100 	.word	0x21800100
 8003e8c:	25b00200 	.word	0x25b00200
 8003e90:	2a000400 	.word	0x2a000400
 8003e94:	2e300800 	.word	0x2e300800
 8003e98:	3ac04000 	.word	0x3ac04000
 8003e9c:	08600004 	.word	0x08600004
 8003ea0:	0c900008 	.word	0x0c900008
 8003ea4:	10c00010 	.word	0x10c00010
 8003ea8:	14f00020 	.word	0x14f00020
 8003eac:	50000100 	.word	0x50000100
 8003eb0:	32601000 	.word	0x32601000
 8003eb4:	36902000 	.word	0x36902000
 8003eb8:	50000400 	.word	0x50000400
 8003ebc:	3ef08000 	.word	0x3ef08000
 8003ec0:	50000500 	.word	0x50000500
 8003ec4:	50000600 	.word	0x50000600
 8003ec8:	08011774 	.word	0x08011774
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6819      	ldr	r1, [r3, #0]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f7fe fd52 	bl	8002982 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe fcfa 	bl	80028de <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	08db      	lsrs	r3, r3, #3
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d03d      	beq.n	8003f88 <HAL_ADC_ConfigChannel+0x83c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6919      	ldr	r1, [r3, #16]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f1c:	f7fe fc54 	bl	80027c8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d009      	beq.n	8003f3c <HAL_ADC_ConfigChannel+0x7f0>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f30:	d004      	beq.n	8003f3c <HAL_ADC_ConfigChannel+0x7f0>
 8003f32:	f640 311c 	movw	r1, #2844	@ 0xb1c
 8003f36:	48b3      	ldr	r0, [pc, #716]	@ (8004204 <HAL_ADC_ConfigChannel+0xab8>)
 8003f38:	f7fe fa14 	bl	8002364 <assert_failed>
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	7f1b      	ldrb	r3, [r3, #28]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_ADC_ConfigChannel+0x80a>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	7f1b      	ldrb	r3, [r3, #28]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d004      	beq.n	8003f56 <HAL_ADC_ConfigChannel+0x80a>
 8003f4c:	f640 311d 	movw	r1, #2845	@ 0xb1d
 8003f50:	48ac      	ldr	r0, [pc, #688]	@ (8004204 <HAL_ADC_ConfigChannel+0xab8>)
 8003f52:	f7fe fa07 	bl	8002364 <assert_failed>
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6919      	ldr	r1, [r3, #16]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f7fe fc85 	bl	8002872 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d102      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x832>
 8003f78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f7c:	e000      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x834>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	461a      	mov	r2, r3
 8003f82:	f7fe fc91 	bl	80028a8 <LL_ADC_SetOffsetSaturation>
 8003f86:	e17e      	b.n	8004286 <HAL_ADC_ConfigChannel+0xb3a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe fc3e 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x868>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe fc33 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003faa:	4603      	mov	r3, r0
 8003fac:	0e9b      	lsrs	r3, r3, #26
 8003fae:	f003 021f 	and.w	r2, r3, #31
 8003fb2:	e01e      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x8a6>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe fc28 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003fd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0x89a>
  {
    return 32U;
 8003fe2:	2320      	movs	r3, #32
 8003fe4:	e004      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x8a4>
  }
  return __builtin_clz(value);
 8003fe6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d105      	bne.n	800400a <HAL_ADC_ConfigChannel+0x8be>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	0e9b      	lsrs	r3, r3, #26
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	e018      	b.n	800403c <HAL_ADC_ConfigChannel+0x8f0>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800401e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004022:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004026:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x8e6>
    return 32U;
 800402e:	2320      	movs	r3, #32
 8004030:	e004      	b.n	800403c <HAL_ADC_ConfigChannel+0x8f0>
  return __builtin_clz(value);
 8004032:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004036:	fab3 f383 	clz	r3, r3
 800403a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800403c:	429a      	cmp	r2, r3
 800403e:	d106      	bne.n	800404e <HAL_ADC_ConfigChannel+0x902>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2200      	movs	r2, #0
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe fbf7 	bl	800283c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2101      	movs	r1, #1
 8004054:	4618      	mov	r0, r3
 8004056:	f7fe fbdb 	bl	8002810 <LL_ADC_GetOffsetChannel>
 800405a:	4603      	mov	r3, r0
 800405c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <HAL_ADC_ConfigChannel+0x92e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2101      	movs	r1, #1
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe fbd0 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8004070:	4603      	mov	r3, r0
 8004072:	0e9b      	lsrs	r3, r3, #26
 8004074:	f003 021f 	and.w	r2, r3, #31
 8004078:	e01e      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x96c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2101      	movs	r1, #1
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe fbc5 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8004086:	4603      	mov	r3, r0
 8004088:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004090:	fa93 f3a3 	rbit	r3, r3
 8004094:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004098:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800409c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80040a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x960>
    return 32U;
 80040a8:	2320      	movs	r3, #32
 80040aa:	e004      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x96a>
  return __builtin_clz(value);
 80040ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040b0:	fab3 f383 	clz	r3, r3
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x984>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	0e9b      	lsrs	r3, r3, #26
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	e018      	b.n	8004102 <HAL_ADC_ConfigChannel+0x9b6>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040dc:	fa93 f3a3 	rbit	r3, r3
 80040e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80040e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80040ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x9ac>
    return 32U;
 80040f4:	2320      	movs	r3, #32
 80040f6:	e004      	b.n	8004102 <HAL_ADC_ConfigChannel+0x9b6>
  return __builtin_clz(value);
 80040f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040fc:	fab3 f383 	clz	r3, r3
 8004100:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004102:	429a      	cmp	r2, r3
 8004104:	d106      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x9c8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2200      	movs	r2, #0
 800410c:	2101      	movs	r1, #1
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe fb94 	bl	800283c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2102      	movs	r1, #2
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe fb78 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8004120:	4603      	mov	r3, r0
 8004122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x9f4>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2102      	movs	r1, #2
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe fb6d 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8004136:	4603      	mov	r3, r0
 8004138:	0e9b      	lsrs	r3, r3, #26
 800413a:	f003 021f 	and.w	r2, r3, #31
 800413e:	e01e      	b.n	800417e <HAL_ADC_ConfigChannel+0xa32>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2102      	movs	r1, #2
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe fb62 	bl	8002810 <LL_ADC_GetOffsetChannel>
 800414c:	4603      	mov	r3, r0
 800414e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004156:	fa93 f3a3 	rbit	r3, r3
 800415a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800415e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004162:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004166:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_ADC_ConfigChannel+0xa26>
    return 32U;
 800416e:	2320      	movs	r3, #32
 8004170:	e004      	b.n	800417c <HAL_ADC_ConfigChannel+0xa30>
  return __builtin_clz(value);
 8004172:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004176:	fab3 f383 	clz	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004186:	2b00      	cmp	r3, #0
 8004188:	d105      	bne.n	8004196 <HAL_ADC_ConfigChannel+0xa4a>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	0e9b      	lsrs	r3, r3, #26
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	e016      	b.n	80041c4 <HAL_ADC_ConfigChannel+0xa78>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041a2:	fa93 f3a3 	rbit	r3, r3
 80041a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80041a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80041ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_ADC_ConfigChannel+0xa6e>
    return 32U;
 80041b6:	2320      	movs	r3, #32
 80041b8:	e004      	b.n	80041c4 <HAL_ADC_ConfigChannel+0xa78>
  return __builtin_clz(value);
 80041ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041be:	fab3 f383 	clz	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d106      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0xa8a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2200      	movs	r2, #0
 80041ce:	2102      	movs	r1, #2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fe fb33 	bl	800283c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2103      	movs	r1, #3
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe fb17 	bl	8002810 <LL_ADC_GetOffsetChannel>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10d      	bne.n	8004208 <HAL_ADC_ConfigChannel+0xabc>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2103      	movs	r1, #3
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe fb0c 	bl	8002810 <LL_ADC_GetOffsetChannel>
 80041f8:	4603      	mov	r3, r0
 80041fa:	0e9b      	lsrs	r3, r3, #26
 80041fc:	f003 021f 	and.w	r2, r3, #31
 8004200:	e01a      	b.n	8004238 <HAL_ADC_ConfigChannel+0xaec>
 8004202:	bf00      	nop
 8004204:	08011774 	.word	0x08011774
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2103      	movs	r1, #3
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe fafe 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8004214:	4603      	mov	r3, r0
 8004216:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800421a:	fa93 f3a3 	rbit	r3, r3
 800421e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004220:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004222:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004224:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_ADC_ConfigChannel+0xae2>
    return 32U;
 800422a:	2320      	movs	r3, #32
 800422c:	e003      	b.n	8004236 <HAL_ADC_ConfigChannel+0xaea>
  return __builtin_clz(value);
 800422e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004230:	fab3 f383 	clz	r3, r3
 8004234:	b2db      	uxtb	r3, r3
 8004236:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <HAL_ADC_ConfigChannel+0xb04>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	0e9b      	lsrs	r3, r3, #26
 800424a:	f003 031f 	and.w	r3, r3, #31
 800424e:	e011      	b.n	8004274 <HAL_ADC_ConfigChannel+0xb28>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004256:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004258:	fa93 f3a3 	rbit	r3, r3
 800425c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800425e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004260:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_ADC_ConfigChannel+0xb20>
    return 32U;
 8004268:	2320      	movs	r3, #32
 800426a:	e003      	b.n	8004274 <HAL_ADC_ConfigChannel+0xb28>
  return __builtin_clz(value);
 800426c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800426e:	fab3 f383 	clz	r3, r3
 8004272:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004274:	429a      	cmp	r2, r3
 8004276:	d106      	bne.n	8004286 <HAL_ADC_ConfigChannel+0xb3a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2200      	movs	r2, #0
 800427e:	2103      	movs	r1, #3
 8004280:	4618      	mov	r0, r3
 8004282:	f7fe fadb 	bl	800283c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe fc4c 	bl	8002b28 <LL_ADC_IsEnabled>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	f040 813d 	bne.w	8004512 <HAL_ADC_ConfigChannel+0xdc6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	6819      	ldr	r1, [r3, #0]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	461a      	mov	r2, r3
 80042a6:	f7fe fb97 	bl	80029d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	4aa2      	ldr	r2, [pc, #648]	@ (8004538 <HAL_ADC_ConfigChannel+0xdec>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	f040 812e 	bne.w	8004512 <HAL_ADC_ConfigChannel+0xdc6>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10b      	bne.n	80042de <HAL_ADC_ConfigChannel+0xb92>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	0e9b      	lsrs	r3, r3, #26
 80042cc:	3301      	adds	r3, #1
 80042ce:	f003 031f 	and.w	r3, r3, #31
 80042d2:	2b09      	cmp	r3, #9
 80042d4:	bf94      	ite	ls
 80042d6:	2301      	movls	r3, #1
 80042d8:	2300      	movhi	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	e019      	b.n	8004312 <HAL_ADC_ConfigChannel+0xbc6>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042e6:	fa93 f3a3 	rbit	r3, r3
 80042ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80042ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042ee:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80042f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_ADC_ConfigChannel+0xbae>
    return 32U;
 80042f6:	2320      	movs	r3, #32
 80042f8:	e003      	b.n	8004302 <HAL_ADC_ConfigChannel+0xbb6>
  return __builtin_clz(value);
 80042fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042fc:	fab3 f383 	clz	r3, r3
 8004300:	b2db      	uxtb	r3, r3
 8004302:	3301      	adds	r3, #1
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	2b09      	cmp	r3, #9
 800430a:	bf94      	ite	ls
 800430c:	2301      	movls	r3, #1
 800430e:	2300      	movhi	r3, #0
 8004310:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004312:	2b00      	cmp	r3, #0
 8004314:	d079      	beq.n	800440a <HAL_ADC_ConfigChannel+0xcbe>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431e:	2b00      	cmp	r3, #0
 8004320:	d107      	bne.n	8004332 <HAL_ADC_ConfigChannel+0xbe6>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	0e9b      	lsrs	r3, r3, #26
 8004328:	3301      	adds	r3, #1
 800432a:	069b      	lsls	r3, r3, #26
 800432c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004330:	e015      	b.n	800435e <HAL_ADC_ConfigChannel+0xc12>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004342:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_ADC_ConfigChannel+0xc02>
    return 32U;
 800434a:	2320      	movs	r3, #32
 800434c:	e003      	b.n	8004356 <HAL_ADC_ConfigChannel+0xc0a>
  return __builtin_clz(value);
 800434e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004350:	fab3 f383 	clz	r3, r3
 8004354:	b2db      	uxtb	r3, r3
 8004356:	3301      	adds	r3, #1
 8004358:	069b      	lsls	r3, r3, #26
 800435a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <HAL_ADC_ConfigChannel+0xc32>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	0e9b      	lsrs	r3, r3, #26
 8004370:	3301      	adds	r3, #1
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	2101      	movs	r1, #1
 8004378:	fa01 f303 	lsl.w	r3, r1, r3
 800437c:	e017      	b.n	80043ae <HAL_ADC_ConfigChannel+0xc62>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004386:	fa93 f3a3 	rbit	r3, r3
 800438a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800438c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800438e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_ADC_ConfigChannel+0xc4e>
    return 32U;
 8004396:	2320      	movs	r3, #32
 8004398:	e003      	b.n	80043a2 <HAL_ADC_ConfigChannel+0xc56>
  return __builtin_clz(value);
 800439a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800439c:	fab3 f383 	clz	r3, r3
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	3301      	adds	r3, #1
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	2101      	movs	r1, #1
 80043aa:	fa01 f303 	lsl.w	r3, r1, r3
 80043ae:	ea42 0103 	orr.w	r1, r2, r3
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0xc88>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	0e9b      	lsrs	r3, r3, #26
 80043c4:	3301      	adds	r3, #1
 80043c6:	f003 021f 	and.w	r2, r3, #31
 80043ca:	4613      	mov	r3, r2
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	4413      	add	r3, r2
 80043d0:	051b      	lsls	r3, r3, #20
 80043d2:	e018      	b.n	8004406 <HAL_ADC_ConfigChannel+0xcba>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043dc:	fa93 f3a3 	rbit	r3, r3
 80043e0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80043e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80043e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0xca4>
    return 32U;
 80043ec:	2320      	movs	r3, #32
 80043ee:	e003      	b.n	80043f8 <HAL_ADC_ConfigChannel+0xcac>
  return __builtin_clz(value);
 80043f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043f2:	fab3 f383 	clz	r3, r3
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	3301      	adds	r3, #1
 80043fa:	f003 021f 	and.w	r2, r3, #31
 80043fe:	4613      	mov	r3, r2
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	4413      	add	r3, r2
 8004404:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004406:	430b      	orrs	r3, r1
 8004408:	e07e      	b.n	8004508 <HAL_ADC_ConfigChannel+0xdbc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004412:	2b00      	cmp	r3, #0
 8004414:	d107      	bne.n	8004426 <HAL_ADC_ConfigChannel+0xcda>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	0e9b      	lsrs	r3, r3, #26
 800441c:	3301      	adds	r3, #1
 800441e:	069b      	lsls	r3, r3, #26
 8004420:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004424:	e015      	b.n	8004452 <HAL_ADC_ConfigChannel+0xd06>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442e:	fa93 f3a3 	rbit	r3, r3
 8004432:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004436:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_ADC_ConfigChannel+0xcf6>
    return 32U;
 800443e:	2320      	movs	r3, #32
 8004440:	e003      	b.n	800444a <HAL_ADC_ConfigChannel+0xcfe>
  return __builtin_clz(value);
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	fab3 f383 	clz	r3, r3
 8004448:	b2db      	uxtb	r3, r3
 800444a:	3301      	adds	r3, #1
 800444c:	069b      	lsls	r3, r3, #26
 800444e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <HAL_ADC_ConfigChannel+0xd26>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0e9b      	lsrs	r3, r3, #26
 8004464:	3301      	adds	r3, #1
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	2101      	movs	r1, #1
 800446c:	fa01 f303 	lsl.w	r3, r1, r3
 8004470:	e017      	b.n	80044a2 <HAL_ADC_ConfigChannel+0xd56>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	fa93 f3a3 	rbit	r3, r3
 800447e:	61fb      	str	r3, [r7, #28]
  return result;
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_ADC_ConfigChannel+0xd42>
    return 32U;
 800448a:	2320      	movs	r3, #32
 800448c:	e003      	b.n	8004496 <HAL_ADC_ConfigChannel+0xd4a>
  return __builtin_clz(value);
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	fab3 f383 	clz	r3, r3
 8004494:	b2db      	uxtb	r3, r3
 8004496:	3301      	adds	r3, #1
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	2101      	movs	r1, #1
 800449e:	fa01 f303 	lsl.w	r3, r1, r3
 80044a2:	ea42 0103 	orr.w	r1, r2, r3
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10d      	bne.n	80044ce <HAL_ADC_ConfigChannel+0xd82>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	0e9b      	lsrs	r3, r3, #26
 80044b8:	3301      	adds	r3, #1
 80044ba:	f003 021f 	and.w	r2, r3, #31
 80044be:	4613      	mov	r3, r2
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	4413      	add	r3, r2
 80044c4:	3b1e      	subs	r3, #30
 80044c6:	051b      	lsls	r3, r3, #20
 80044c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044cc:	e01b      	b.n	8004506 <HAL_ADC_ConfigChannel+0xdba>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	fa93 f3a3 	rbit	r3, r3
 80044da:	613b      	str	r3, [r7, #16]
  return result;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_ADC_ConfigChannel+0xd9e>
    return 32U;
 80044e6:	2320      	movs	r3, #32
 80044e8:	e003      	b.n	80044f2 <HAL_ADC_ConfigChannel+0xda6>
  return __builtin_clz(value);
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	fab3 f383 	clz	r3, r3
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	3301      	adds	r3, #1
 80044f4:	f003 021f 	and.w	r2, r3, #31
 80044f8:	4613      	mov	r3, r2
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	4413      	add	r3, r2
 80044fe:	3b1e      	subs	r3, #30
 8004500:	051b      	lsls	r3, r3, #20
 8004502:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004506:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800450c:	4619      	mov	r1, r3
 800450e:	f7fe fa38 	bl	8002982 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4b09      	ldr	r3, [pc, #36]	@ (800453c <HAL_ADC_ConfigChannel+0xdf0>)
 8004518:	4013      	ands	r3, r2
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80bd 	beq.w	800469a <HAL_ADC_ConfigChannel+0xf4e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004528:	d004      	beq.n	8004534 <HAL_ADC_ConfigChannel+0xde8>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a04      	ldr	r2, [pc, #16]	@ (8004540 <HAL_ADC_ConfigChannel+0xdf4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d109      	bne.n	8004548 <HAL_ADC_ConfigChannel+0xdfc>
 8004534:	4b03      	ldr	r3, [pc, #12]	@ (8004544 <HAL_ADC_ConfigChannel+0xdf8>)
 8004536:	e008      	b.n	800454a <HAL_ADC_ConfigChannel+0xdfe>
 8004538:	407f0000 	.word	0x407f0000
 800453c:	80080000 	.word	0x80080000
 8004540:	50000100 	.word	0x50000100
 8004544:	50000300 	.word	0x50000300
 8004548:	4b59      	ldr	r3, [pc, #356]	@ (80046b0 <HAL_ADC_ConfigChannel+0xf64>)
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe f920 	bl	8002790 <LL_ADC_GetCommonPathInternalCh>
 8004550:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a56      	ldr	r2, [pc, #344]	@ (80046b4 <HAL_ADC_ConfigChannel+0xf68>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d004      	beq.n	8004568 <HAL_ADC_ConfigChannel+0xe1c>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a55      	ldr	r2, [pc, #340]	@ (80046b8 <HAL_ADC_ConfigChannel+0xf6c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d13a      	bne.n	80045de <HAL_ADC_ConfigChannel+0xe92>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004568:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800456c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d134      	bne.n	80045de <HAL_ADC_ConfigChannel+0xe92>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800457c:	d005      	beq.n	800458a <HAL_ADC_ConfigChannel+0xe3e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a4e      	ldr	r2, [pc, #312]	@ (80046bc <HAL_ADC_ConfigChannel+0xf70>)
 8004584:	4293      	cmp	r3, r2
 8004586:	f040 8085 	bne.w	8004694 <HAL_ADC_ConfigChannel+0xf48>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004592:	d004      	beq.n	800459e <HAL_ADC_ConfigChannel+0xe52>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a49      	ldr	r2, [pc, #292]	@ (80046c0 <HAL_ADC_ConfigChannel+0xf74>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d101      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0xe56>
 800459e:	4a49      	ldr	r2, [pc, #292]	@ (80046c4 <HAL_ADC_ConfigChannel+0xf78>)
 80045a0:	e000      	b.n	80045a4 <HAL_ADC_ConfigChannel+0xe58>
 80045a2:	4a43      	ldr	r2, [pc, #268]	@ (80046b0 <HAL_ADC_ConfigChannel+0xf64>)
 80045a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045ac:	4619      	mov	r1, r3
 80045ae:	4610      	mov	r0, r2
 80045b0:	f7fe f8db 	bl	800276a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045b4:	4b44      	ldr	r3, [pc, #272]	@ (80046c8 <HAL_ADC_ConfigChannel+0xf7c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	099b      	lsrs	r3, r3, #6
 80045ba:	4a44      	ldr	r2, [pc, #272]	@ (80046cc <HAL_ADC_ConfigChannel+0xf80>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	099b      	lsrs	r3, r3, #6
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	4613      	mov	r3, r2
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045ce:	e002      	b.n	80045d6 <HAL_ADC_ConfigChannel+0xe8a>
          {
            wait_loop_index--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f9      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0xe84>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045dc:	e05a      	b.n	8004694 <HAL_ADC_ConfigChannel+0xf48>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a3b      	ldr	r2, [pc, #236]	@ (80046d0 <HAL_ADC_ConfigChannel+0xf84>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d125      	bne.n	8004634 <HAL_ADC_ConfigChannel+0xee8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d11f      	bne.n	8004634 <HAL_ADC_ConfigChannel+0xee8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a31      	ldr	r2, [pc, #196]	@ (80046c0 <HAL_ADC_ConfigChannel+0xf74>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d104      	bne.n	8004608 <HAL_ADC_ConfigChannel+0xebc>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a34      	ldr	r2, [pc, #208]	@ (80046d4 <HAL_ADC_ConfigChannel+0xf88>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d047      	beq.n	8004698 <HAL_ADC_ConfigChannel+0xf4c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004610:	d004      	beq.n	800461c <HAL_ADC_ConfigChannel+0xed0>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a2a      	ldr	r2, [pc, #168]	@ (80046c0 <HAL_ADC_ConfigChannel+0xf74>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d101      	bne.n	8004620 <HAL_ADC_ConfigChannel+0xed4>
 800461c:	4a29      	ldr	r2, [pc, #164]	@ (80046c4 <HAL_ADC_ConfigChannel+0xf78>)
 800461e:	e000      	b.n	8004622 <HAL_ADC_ConfigChannel+0xed6>
 8004620:	4a23      	ldr	r2, [pc, #140]	@ (80046b0 <HAL_ADC_ConfigChannel+0xf64>)
 8004622:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800462a:	4619      	mov	r1, r3
 800462c:	4610      	mov	r0, r2
 800462e:	f7fe f89c 	bl	800276a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004632:	e031      	b.n	8004698 <HAL_ADC_ConfigChannel+0xf4c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a27      	ldr	r2, [pc, #156]	@ (80046d8 <HAL_ADC_ConfigChannel+0xf8c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d12d      	bne.n	800469a <HAL_ADC_ConfigChannel+0xf4e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800463e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d127      	bne.n	800469a <HAL_ADC_ConfigChannel+0xf4e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a1c      	ldr	r2, [pc, #112]	@ (80046c0 <HAL_ADC_ConfigChannel+0xf74>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d022      	beq.n	800469a <HAL_ADC_ConfigChannel+0xf4e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800465c:	d004      	beq.n	8004668 <HAL_ADC_ConfigChannel+0xf1c>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a17      	ldr	r2, [pc, #92]	@ (80046c0 <HAL_ADC_ConfigChannel+0xf74>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d101      	bne.n	800466c <HAL_ADC_ConfigChannel+0xf20>
 8004668:	4a16      	ldr	r2, [pc, #88]	@ (80046c4 <HAL_ADC_ConfigChannel+0xf78>)
 800466a:	e000      	b.n	800466e <HAL_ADC_ConfigChannel+0xf22>
 800466c:	4a10      	ldr	r2, [pc, #64]	@ (80046b0 <HAL_ADC_ConfigChannel+0xf64>)
 800466e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004672:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004676:	4619      	mov	r1, r3
 8004678:	4610      	mov	r0, r2
 800467a:	f7fe f876 	bl	800276a <LL_ADC_SetCommonPathInternalCh>
 800467e:	e00c      	b.n	800469a <HAL_ADC_ConfigChannel+0xf4e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004684:	f043 0220 	orr.w	r2, r3, #32
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004692:	e002      	b.n	800469a <HAL_ADC_ConfigChannel+0xf4e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004694:	bf00      	nop
 8004696:	e000      	b.n	800469a <HAL_ADC_ConfigChannel+0xf4e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004698:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80046a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	37dc      	adds	r7, #220	@ 0xdc
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd90      	pop	{r4, r7, pc}
 80046ae:	bf00      	nop
 80046b0:	50000700 	.word	0x50000700
 80046b4:	c3210000 	.word	0xc3210000
 80046b8:	90c00010 	.word	0x90c00010
 80046bc:	50000600 	.word	0x50000600
 80046c0:	50000100 	.word	0x50000100
 80046c4:	50000300 	.word	0x50000300
 80046c8:	20000000 	.word	0x20000000
 80046cc:	053e2d63 	.word	0x053e2d63
 80046d0:	c7520000 	.word	0xc7520000
 80046d4:	50000500 	.word	0x50000500
 80046d8:	cb840000 	.word	0xcb840000

080046dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fe fa1b 	bl	8002b28 <LL_ADC_IsEnabled>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d176      	bne.n	80047e6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	4b3c      	ldr	r3, [pc, #240]	@ (80047f0 <ADC_Enable+0x114>)
 8004700:	4013      	ands	r3, r2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00d      	beq.n	8004722 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470a:	f043 0210 	orr.w	r2, r3, #16
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004716:	f043 0201 	orr.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e062      	b.n	80047e8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe f9d6 	bl	8002ad8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004734:	d004      	beq.n	8004740 <ADC_Enable+0x64>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a2e      	ldr	r2, [pc, #184]	@ (80047f4 <ADC_Enable+0x118>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d101      	bne.n	8004744 <ADC_Enable+0x68>
 8004740:	4b2d      	ldr	r3, [pc, #180]	@ (80047f8 <ADC_Enable+0x11c>)
 8004742:	e000      	b.n	8004746 <ADC_Enable+0x6a>
 8004744:	4b2d      	ldr	r3, [pc, #180]	@ (80047fc <ADC_Enable+0x120>)
 8004746:	4618      	mov	r0, r3
 8004748:	f7fe f822 	bl	8002790 <LL_ADC_GetCommonPathInternalCh>
 800474c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800474e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004752:	2b00      	cmp	r3, #0
 8004754:	d013      	beq.n	800477e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004756:	4b2a      	ldr	r3, [pc, #168]	@ (8004800 <ADC_Enable+0x124>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	099b      	lsrs	r3, r3, #6
 800475c:	4a29      	ldr	r2, [pc, #164]	@ (8004804 <ADC_Enable+0x128>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	099b      	lsrs	r3, r3, #6
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	4613      	mov	r3, r2
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004770:	e002      	b.n	8004778 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	3b01      	subs	r3, #1
 8004776:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f9      	bne.n	8004772 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800477e:	f7fd ffb3 	bl	80026e8 <HAL_GetTick>
 8004782:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004784:	e028      	b.n	80047d8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fe f9cc 	bl	8002b28 <LL_ADC_IsEnabled>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fe f99c 	bl	8002ad8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047a0:	f7fd ffa2 	bl	80026e8 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d914      	bls.n	80047d8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d00d      	beq.n	80047d8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c0:	f043 0210 	orr.w	r2, r3, #16
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047cc:	f043 0201 	orr.w	r2, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e007      	b.n	80047e8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d1cf      	bne.n	8004786 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	8000003f 	.word	0x8000003f
 80047f4:	50000100 	.word	0x50000100
 80047f8:	50000300 	.word	0x50000300
 80047fc:	50000700 	.word	0x50000700
 8004800:	20000000 	.word	0x20000000
 8004804:	053e2d63 	.word	0x053e2d63

08004808 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7fe f99a 	bl	8002b4e <LL_ADC_IsDisableOngoing>
 800481a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f7fe f981 	bl	8002b28 <LL_ADC_IsEnabled>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d047      	beq.n	80048bc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d144      	bne.n	80048bc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 030d 	and.w	r3, r3, #13
 800483c:	2b01      	cmp	r3, #1
 800483e:	d10c      	bne.n	800485a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe f95b 	bl	8002b00 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2203      	movs	r2, #3
 8004850:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004852:	f7fd ff49 	bl	80026e8 <HAL_GetTick>
 8004856:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004858:	e029      	b.n	80048ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485e:	f043 0210 	orr.w	r2, r3, #16
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800486a:	f043 0201 	orr.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e023      	b.n	80048be <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004876:	f7fd ff37 	bl	80026e8 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d914      	bls.n	80048ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00d      	beq.n	80048ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004896:	f043 0210 	orr.w	r2, r3, #16
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a2:	f043 0201 	orr.w	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e007      	b.n	80048be <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1dc      	bne.n	8004876 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d14b      	bne.n	8004978 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d021      	beq.n	800493e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe f800 	bl	8002904 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d032      	beq.n	8004970 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d12b      	bne.n	8004970 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004928:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d11f      	bne.n	8004970 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004934:	f043 0201 	orr.w	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800493c:	e018      	b.n	8004970 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d111      	bne.n	8004970 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004950:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800495c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d105      	bne.n	8004970 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004968:	f043 0201 	orr.w	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f7fe fecd 	bl	8003710 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004976:	e00e      	b.n	8004996 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7fe fed7 	bl	8003738 <HAL_ADC_ErrorCallback>
}
 800498a:	e004      	b.n	8004996 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
}
 8004996:	bf00      	nop
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f7fe feb9 	bl	8003724 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d8:	f043 0204 	orr.w	r2, r3, #4
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f7fe fea9 	bl	8003738 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049e6:	bf00      	nop
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <LL_ADC_IsEnabled>:
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <LL_ADC_IsEnabled+0x18>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <LL_ADC_IsEnabled+0x1a>
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <LL_ADC_StartCalibration>:
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004a26:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	609a      	str	r2, [r3, #8]
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <LL_ADC_IsCalibrationOnGoing>:
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a5a:	d101      	bne.n	8004a60 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <LL_ADC_REG_IsConversionOngoing>:
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d101      	bne.n	8004a86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004aaa:	d017      	beq.n	8004adc <HAL_ADCEx_Calibration_Start+0x48>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ba4 <HAL_ADCEx_Calibration_Start+0x110>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d012      	beq.n	8004adc <HAL_ADCEx_Calibration_Start+0x48>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a3b      	ldr	r2, [pc, #236]	@ (8004ba8 <HAL_ADCEx_Calibration_Start+0x114>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00d      	beq.n	8004adc <HAL_ADCEx_Calibration_Start+0x48>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a39      	ldr	r2, [pc, #228]	@ (8004bac <HAL_ADCEx_Calibration_Start+0x118>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d008      	beq.n	8004adc <HAL_ADCEx_Calibration_Start+0x48>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a38      	ldr	r2, [pc, #224]	@ (8004bb0 <HAL_ADCEx_Calibration_Start+0x11c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d003      	beq.n	8004adc <HAL_ADCEx_Calibration_Start+0x48>
 8004ad4:	2184      	movs	r1, #132	@ 0x84
 8004ad6:	4837      	ldr	r0, [pc, #220]	@ (8004bb4 <HAL_ADCEx_Calibration_Start+0x120>)
 8004ad8:	f7fd fc44 	bl	8002364 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ae0:	d007      	beq.n	8004af2 <HAL_ADCEx_Calibration_Start+0x5e>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	4a34      	ldr	r2, [pc, #208]	@ (8004bb8 <HAL_ADCEx_Calibration_Start+0x124>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <HAL_ADCEx_Calibration_Start+0x5e>
 8004aea:	2185      	movs	r1, #133	@ 0x85
 8004aec:	4831      	ldr	r0, [pc, #196]	@ (8004bb4 <HAL_ADCEx_Calibration_Start+0x120>)
 8004aee:	f7fd fc39 	bl	8002364 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_ADCEx_Calibration_Start+0x6c>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e04d      	b.n	8004b9c <HAL_ADCEx_Calibration_Start+0x108>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fe7d 	bl	8004808 <ADC_Disable>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d136      	bne.n	8004b86 <HAL_ADCEx_Calibration_Start+0xf2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004b20:	f023 0302 	bic.w	r3, r3, #2
 8004b24:	f043 0202 	orr.w	r2, r3, #2
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6839      	ldr	r1, [r7, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff ff6e 	bl	8004a14 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b38:	e014      	b.n	8004b64 <HAL_ADCEx_Calibration_Start+0xd0>
    {
      wait_loop_index++;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4a1e      	ldr	r2, [pc, #120]	@ (8004bbc <HAL_ADCEx_Calibration_Start+0x128>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d90d      	bls.n	8004b64 <HAL_ADCEx_Calibration_Start+0xd0>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4c:	f023 0312 	bic.w	r3, r3, #18
 8004b50:	f043 0210 	orr.w	r2, r3, #16
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e01b      	b.n	8004b9c <HAL_ADCEx_Calibration_Start+0x108>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff ff6c 	bl	8004a46 <LL_ADC_IsCalibrationOnGoing>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e2      	bne.n	8004b3a <HAL_ADCEx_Calibration_Start+0xa6>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b78:	f023 0303 	bic.w	r3, r3, #3
 8004b7c:	f043 0201 	orr.w	r2, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b84:	e005      	b.n	8004b92 <HAL_ADCEx_Calibration_Start+0xfe>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b8a:	f043 0210 	orr.w	r2, r3, #16
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	50000100 	.word	0x50000100
 8004ba8:	50000400 	.word	0x50000400
 8004bac:	50000500 	.word	0x50000500
 8004bb0:	50000600 	.word	0x50000600
 8004bb4:	080117e4 	.word	0x080117e4
 8004bb8:	407f0000 	.word	0x407f0000
 8004bbc:	0004de01 	.word	0x0004de01

08004bc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004bc0:	b590      	push	{r4, r7, lr}
 8004bc2:	b0a1      	sub	sp, #132	@ 0x84
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmp_hadc_slave;
  uint32_t tmp_hadc_slave_conversion_on_going;

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bd8:	d009      	beq.n	8004bee <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a92      	ldr	r2, [pc, #584]	@ (8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x268>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d004      	beq.n	8004bee <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8004be4:	f640 014c 	movw	r1, #2124	@ 0x84c
 8004be8:	4890      	ldr	r0, [pc, #576]	@ (8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8004bea:	f7fd fbbb 	bl	8002364 <assert_failed>
  assert_param(IS_ADC_MULTIMODE(pMultimode->Mode));
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d020      	beq.n	8004c38 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d01c      	beq.n	8004c38 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d018      	beq.n	8004c38 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	d014      	beq.n	8004c38 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b05      	cmp	r3, #5
 8004c14:	d010      	beq.n	8004c38 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b06      	cmp	r3, #6
 8004c1c:	d00c      	beq.n	8004c38 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b07      	cmp	r3, #7
 8004c24:	d008      	beq.n	8004c38 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b09      	cmp	r3, #9
 8004c2c:	d004      	beq.n	8004c38 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8004c2e:	f640 014d 	movw	r1, #2125	@ 0x84d
 8004c32:	487e      	ldr	r0, [pc, #504]	@ (8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8004c34:	f7fd fb96 	bl	8002364 <assert_failed>
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d052      	beq.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
  {
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00e      	beq.n	8004c66 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c50:	d009      	beq.n	8004c66 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004c5a:	d004      	beq.n	8004c66 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8004c5c:	f44f 6105 	mov.w	r1, #2128	@ 0x850
 8004c60:	4872      	ldr	r0, [pc, #456]	@ (8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8004c62:	f7fd fb7f 	bl	8002364 <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d03b      	beq.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c76:	d036      	beq.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c80:	d031      	beq.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c8a:	d02c      	beq.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c94:	d027      	beq.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004c9e:	d022      	beq.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004ca8:	d01d      	beq.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004cb2:	d018      	beq.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cbc:	d013      	beq.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8004cc6:	d00e      	beq.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004cd0:	d009      	beq.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8004cda:	d004      	beq.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004cdc:	f640 0151 	movw	r1, #2129	@ 0x851
 8004ce0:	4852      	ldr	r0, [pc, #328]	@ (8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8004ce2:	f7fd fb3f 	bl	8002364 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x134>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e0f6      	b.n	8004ee2 <HAL_ADCEx_MultiModeConfigChannel+0x322>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004d00:	2300      	movs	r3, #0
 8004d02:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d0c:	d102      	bne.n	8004d14 <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8004d0e:	4b48      	ldr	r3, [pc, #288]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	e009      	b.n	8004d28 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a43      	ldr	r2, [pc, #268]	@ (8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x268>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d102      	bne.n	8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x164>
 8004d1e:	4b45      	ldr	r3, [pc, #276]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x274>)
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	e001      	b.n	8004d28 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004d24:	2300      	movs	r3, #0
 8004d26:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10b      	bne.n	8004d46 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d32:	f043 0220 	orr.w	r2, r3, #32
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e0cd      	b.n	8004ee2 <HAL_ADCEx_MultiModeConfigChannel+0x322>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff fe90 	bl	8004a6e <LL_ADC_REG_IsConversionOngoing>
 8004d4e:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff fe8a 	bl	8004a6e <LL_ADC_REG_IsConversionOngoing>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f040 80af 	bne.w	8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x300>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004d62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f040 80ab 	bne.w	8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x300>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d72:	d004      	beq.n	8004d7e <HAL_ADCEx_MultiModeConfigChannel+0x1be>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a2d      	ldr	r2, [pc, #180]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d101      	bne.n	8004d82 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8004d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x278>)
 8004d80:	e000      	b.n	8004d84 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
 8004d82:	4b2e      	ldr	r3, [pc, #184]	@ (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x27c>)
 8004d84:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d05a      	beq.n	8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x284>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	6859      	ldr	r1, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004da0:	035b      	lsls	r3, r3, #13
 8004da2:	430b      	orrs	r3, r1
 8004da4:	431a      	orrs	r2, r3
 8004da6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004da8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004db2:	d004      	beq.n	8004dbe <HAL_ADCEx_MultiModeConfigChannel+0x1fe>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d10f      	bne.n	8004dde <HAL_ADCEx_MultiModeConfigChannel+0x21e>
 8004dbe:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004dc2:	f7ff fe14 	bl	80049ee <LL_ADC_IsEnabled>
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	4819      	ldr	r0, [pc, #100]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 8004dca:	f7ff fe10 	bl	80049ee <LL_ADC_IsEnabled>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	4323      	orrs	r3, r4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bf0c      	ite	eq
 8004dd6:	2301      	moveq	r3, #1
 8004dd8:	2300      	movne	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	e012      	b.n	8004e04 <HAL_ADCEx_MultiModeConfigChannel+0x244>
 8004dde:	4812      	ldr	r0, [pc, #72]	@ (8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x268>)
 8004de0:	f7ff fe05 	bl	80049ee <LL_ADC_IsEnabled>
 8004de4:	4604      	mov	r4, r0
 8004de6:	4813      	ldr	r0, [pc, #76]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x274>)
 8004de8:	f7ff fe01 	bl	80049ee <LL_ADC_IsEnabled>
 8004dec:	4603      	mov	r3, r0
 8004dee:	431c      	orrs	r4, r3
 8004df0:	4813      	ldr	r0, [pc, #76]	@ (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x280>)
 8004df2:	f7ff fdfc 	bl	80049ee <LL_ADC_IsEnabled>
 8004df6:	4603      	mov	r3, r0
 8004df8:	4323      	orrs	r3, r4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bf0c      	ite	eq
 8004dfe:	2301      	moveq	r3, #1
 8004e00:	2300      	movne	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d065      	beq.n	8004ed4 <HAL_ADCEx_MultiModeConfigChannel+0x314>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004e10:	f023 030f 	bic.w	r3, r3, #15
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	6811      	ldr	r1, [r2, #0]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	6892      	ldr	r2, [r2, #8]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e22:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e24:	e056      	b.n	8004ed4 <HAL_ADCEx_MultiModeConfigChannel+0x314>
 8004e26:	bf00      	nop
 8004e28:	50000400 	.word	0x50000400
 8004e2c:	080117e4 	.word	0x080117e4
 8004e30:	50000100 	.word	0x50000100
 8004e34:	50000500 	.word	0x50000500
 8004e38:	50000300 	.word	0x50000300
 8004e3c:	50000700 	.word	0x50000700
 8004e40:	50000600 	.word	0x50000600
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004e44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e4e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e58:	d004      	beq.n	8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a23      	ldr	r2, [pc, #140]	@ (8004eec <HAL_ADCEx_MultiModeConfigChannel+0x32c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d10f      	bne.n	8004e84 <HAL_ADCEx_MultiModeConfigChannel+0x2c4>
 8004e64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004e68:	f7ff fdc1 	bl	80049ee <LL_ADC_IsEnabled>
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	481f      	ldr	r0, [pc, #124]	@ (8004eec <HAL_ADCEx_MultiModeConfigChannel+0x32c>)
 8004e70:	f7ff fdbd 	bl	80049ee <LL_ADC_IsEnabled>
 8004e74:	4603      	mov	r3, r0
 8004e76:	4323      	orrs	r3, r4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	bf0c      	ite	eq
 8004e7c:	2301      	moveq	r3, #1
 8004e7e:	2300      	movne	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	e012      	b.n	8004eaa <HAL_ADCEx_MultiModeConfigChannel+0x2ea>
 8004e84:	481a      	ldr	r0, [pc, #104]	@ (8004ef0 <HAL_ADCEx_MultiModeConfigChannel+0x330>)
 8004e86:	f7ff fdb2 	bl	80049ee <LL_ADC_IsEnabled>
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	4819      	ldr	r0, [pc, #100]	@ (8004ef4 <HAL_ADCEx_MultiModeConfigChannel+0x334>)
 8004e8e:	f7ff fdae 	bl	80049ee <LL_ADC_IsEnabled>
 8004e92:	4603      	mov	r3, r0
 8004e94:	431c      	orrs	r4, r3
 8004e96:	4818      	ldr	r0, [pc, #96]	@ (8004ef8 <HAL_ADCEx_MultiModeConfigChannel+0x338>)
 8004e98:	f7ff fda9 	bl	80049ee <LL_ADC_IsEnabled>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4323      	orrs	r3, r4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	bf0c      	ite	eq
 8004ea4:	2301      	moveq	r3, #1
 8004ea6:	2300      	movne	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d012      	beq.n	8004ed4 <HAL_ADCEx_MultiModeConfigChannel+0x314>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004eae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004eb6:	f023 030f 	bic.w	r3, r3, #15
 8004eba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004ebc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ebe:	e009      	b.n	8004ed4 <HAL_ADCEx_MultiModeConfigChannel+0x314>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004ed2:	e000      	b.n	8004ed6 <HAL_ADCEx_MultiModeConfigChannel+0x316>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ed4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004ede:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3784      	adds	r7, #132	@ 0x84
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd90      	pop	{r4, r7, pc}
 8004eea:	bf00      	nop
 8004eec:	50000100 	.word	0x50000100
 8004ef0:	50000400 	.word	0x50000400
 8004ef4:	50000500 	.word	0x50000500
 8004ef8:	50000600 	.word	0x50000600

08004efc <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e02c      	b.n	8004f68 <HAL_CORDIC_Init+0x6c>
  }

  /* Check the instance */
  assert_param(IS_CORDIC_ALL_INSTANCE(hcordic->Instance));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a17      	ldr	r2, [pc, #92]	@ (8004f70 <HAL_CORDIC_Init+0x74>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <HAL_CORDIC_Init+0x24>
 8004f18:	21d3      	movs	r1, #211	@ 0xd3
 8004f1a:	4816      	ldr	r0, [pc, #88]	@ (8004f74 <HAL_CORDIC_Init+0x78>)
 8004f1c:	f7fd fa22 	bl	8002364 <assert_failed>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <HAL_CORDIC_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fc fbe1 	bl	80016fc <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40020c00 	.word	0x40020c00
 8004f74:	08011858 	.word	0x08011858

08004f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f88:	4b0c      	ldr	r3, [pc, #48]	@ (8004fbc <__NVIC_SetPriorityGrouping+0x44>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f94:	4013      	ands	r3, r2
 8004f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004faa:	4a04      	ldr	r2, [pc, #16]	@ (8004fbc <__NVIC_SetPriorityGrouping+0x44>)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	60d3      	str	r3, [r2, #12]
}
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	e000ed00 	.word	0xe000ed00

08004fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fc4:	4b04      	ldr	r3, [pc, #16]	@ (8004fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	0a1b      	lsrs	r3, r3, #8
 8004fca:	f003 0307 	and.w	r3, r3, #7
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	e000ed00 	.word	0xe000ed00

08004fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	db0b      	blt.n	8005006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	f003 021f 	and.w	r2, r3, #31
 8004ff4:	4907      	ldr	r1, [pc, #28]	@ (8005014 <__NVIC_EnableIRQ+0x38>)
 8004ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ffa:	095b      	lsrs	r3, r3, #5
 8004ffc:	2001      	movs	r0, #1
 8004ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8005002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	e000e100 	.word	0xe000e100

08005018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	6039      	str	r1, [r7, #0]
 8005022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005028:	2b00      	cmp	r3, #0
 800502a:	db0a      	blt.n	8005042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	b2da      	uxtb	r2, r3
 8005030:	490c      	ldr	r1, [pc, #48]	@ (8005064 <__NVIC_SetPriority+0x4c>)
 8005032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005036:	0112      	lsls	r2, r2, #4
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	440b      	add	r3, r1
 800503c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005040:	e00a      	b.n	8005058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	b2da      	uxtb	r2, r3
 8005046:	4908      	ldr	r1, [pc, #32]	@ (8005068 <__NVIC_SetPriority+0x50>)
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	3b04      	subs	r3, #4
 8005050:	0112      	lsls	r2, r2, #4
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	440b      	add	r3, r1
 8005056:	761a      	strb	r2, [r3, #24]
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	e000e100 	.word	0xe000e100
 8005068:	e000ed00 	.word	0xe000ed00

0800506c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800506c:	b480      	push	{r7}
 800506e:	b089      	sub	sp, #36	@ 0x24
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f1c3 0307 	rsb	r3, r3, #7
 8005086:	2b04      	cmp	r3, #4
 8005088:	bf28      	it	cs
 800508a:	2304      	movcs	r3, #4
 800508c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	3304      	adds	r3, #4
 8005092:	2b06      	cmp	r3, #6
 8005094:	d902      	bls.n	800509c <NVIC_EncodePriority+0x30>
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	3b03      	subs	r3, #3
 800509a:	e000      	b.n	800509e <NVIC_EncodePriority+0x32>
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050a0:	f04f 32ff 	mov.w	r2, #4294967295
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	43da      	mvns	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	401a      	ands	r2, r3
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050b4:	f04f 31ff 	mov.w	r1, #4294967295
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	fa01 f303 	lsl.w	r3, r1, r3
 80050be:	43d9      	mvns	r1, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050c4:	4313      	orrs	r3, r2
         );
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3724      	adds	r7, #36	@ 0x24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3b01      	subs	r3, #1
 80050e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050e4:	d301      	bcc.n	80050ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050e6:	2301      	movs	r3, #1
 80050e8:	e00f      	b.n	800510a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005114 <SysTick_Config+0x40>)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050f2:	210f      	movs	r1, #15
 80050f4:	f04f 30ff 	mov.w	r0, #4294967295
 80050f8:	f7ff ff8e 	bl	8005018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050fc:	4b05      	ldr	r3, [pc, #20]	@ (8005114 <SysTick_Config+0x40>)
 80050fe:	2200      	movs	r2, #0
 8005100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005102:	4b04      	ldr	r3, [pc, #16]	@ (8005114 <SysTick_Config+0x40>)
 8005104:	2207      	movs	r2, #7
 8005106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	e000e010 	.word	0xe000e010

08005118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b07      	cmp	r3, #7
 8005124:	d00f      	beq.n	8005146 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b06      	cmp	r3, #6
 800512a:	d00c      	beq.n	8005146 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b05      	cmp	r3, #5
 8005130:	d009      	beq.n	8005146 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b04      	cmp	r3, #4
 8005136:	d006      	beq.n	8005146 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b03      	cmp	r3, #3
 800513c:	d003      	beq.n	8005146 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800513e:	21a6      	movs	r1, #166	@ 0xa6
 8005140:	4804      	ldr	r0, [pc, #16]	@ (8005154 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8005142:	f7fd f90f 	bl	8002364 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7ff ff16 	bl	8004f78 <__NVIC_SetPriorityGrouping>
}
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	080118cc 	.word	0x080118cc

08005158 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b0f      	cmp	r3, #15
 800516a:	d903      	bls.n	8005174 <HAL_NVIC_SetPriority+0x1c>
 800516c:	21be      	movs	r1, #190	@ 0xbe
 800516e:	480e      	ldr	r0, [pc, #56]	@ (80051a8 <HAL_NVIC_SetPriority+0x50>)
 8005170:	f7fd f8f8 	bl	8002364 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b0f      	cmp	r3, #15
 8005178:	d903      	bls.n	8005182 <HAL_NVIC_SetPriority+0x2a>
 800517a:	21bf      	movs	r1, #191	@ 0xbf
 800517c:	480a      	ldr	r0, [pc, #40]	@ (80051a8 <HAL_NVIC_SetPriority+0x50>)
 800517e:	f7fd f8f1 	bl	8002364 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8005182:	f7ff ff1d 	bl	8004fc0 <__NVIC_GetPriorityGrouping>
 8005186:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	6978      	ldr	r0, [r7, #20]
 800518e:	f7ff ff6d 	bl	800506c <NVIC_EncodePriority>
 8005192:	4602      	mov	r2, r0
 8005194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005198:	4611      	mov	r1, r2
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff ff3c 	bl	8005018 <__NVIC_SetPriority>
}
 80051a0:	bf00      	nop
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	080118cc 	.word	0x080118cc

080051ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80051b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	da03      	bge.n	80051c6 <HAL_NVIC_EnableIRQ+0x1a>
 80051be:	21d2      	movs	r1, #210	@ 0xd2
 80051c0:	4805      	ldr	r0, [pc, #20]	@ (80051d8 <HAL_NVIC_EnableIRQ+0x2c>)
 80051c2:	f7fd f8cf 	bl	8002364 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff ff06 	bl	8004fdc <__NVIC_EnableIRQ>
}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	080118cc 	.word	0x080118cc

080051dc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff ff75 	bl	80050d4 <SysTick_Config>
 80051ea:	4603      	mov	r3, r0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e184      	b.n	8005510 <HAL_DMA_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a70      	ldr	r2, [pc, #448]	@ (80053cc <HAL_DMA_Init+0x1d8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d04e      	beq.n	80052ae <HAL_DMA_Init+0xba>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a6e      	ldr	r2, [pc, #440]	@ (80053d0 <HAL_DMA_Init+0x1dc>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d049      	beq.n	80052ae <HAL_DMA_Init+0xba>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a6d      	ldr	r2, [pc, #436]	@ (80053d4 <HAL_DMA_Init+0x1e0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d044      	beq.n	80052ae <HAL_DMA_Init+0xba>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a6b      	ldr	r2, [pc, #428]	@ (80053d8 <HAL_DMA_Init+0x1e4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d03f      	beq.n	80052ae <HAL_DMA_Init+0xba>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a6a      	ldr	r2, [pc, #424]	@ (80053dc <HAL_DMA_Init+0x1e8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d03a      	beq.n	80052ae <HAL_DMA_Init+0xba>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a68      	ldr	r2, [pc, #416]	@ (80053e0 <HAL_DMA_Init+0x1ec>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d035      	beq.n	80052ae <HAL_DMA_Init+0xba>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a67      	ldr	r2, [pc, #412]	@ (80053e4 <HAL_DMA_Init+0x1f0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d030      	beq.n	80052ae <HAL_DMA_Init+0xba>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a65      	ldr	r2, [pc, #404]	@ (80053e8 <HAL_DMA_Init+0x1f4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d02b      	beq.n	80052ae <HAL_DMA_Init+0xba>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a64      	ldr	r2, [pc, #400]	@ (80053ec <HAL_DMA_Init+0x1f8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d026      	beq.n	80052ae <HAL_DMA_Init+0xba>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a62      	ldr	r2, [pc, #392]	@ (80053f0 <HAL_DMA_Init+0x1fc>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d021      	beq.n	80052ae <HAL_DMA_Init+0xba>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a61      	ldr	r2, [pc, #388]	@ (80053f4 <HAL_DMA_Init+0x200>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d01c      	beq.n	80052ae <HAL_DMA_Init+0xba>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a5f      	ldr	r2, [pc, #380]	@ (80053f8 <HAL_DMA_Init+0x204>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d017      	beq.n	80052ae <HAL_DMA_Init+0xba>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a5e      	ldr	r2, [pc, #376]	@ (80053fc <HAL_DMA_Init+0x208>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d012      	beq.n	80052ae <HAL_DMA_Init+0xba>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a5c      	ldr	r2, [pc, #368]	@ (8005400 <HAL_DMA_Init+0x20c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00d      	beq.n	80052ae <HAL_DMA_Init+0xba>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a5b      	ldr	r2, [pc, #364]	@ (8005404 <HAL_DMA_Init+0x210>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d008      	beq.n	80052ae <HAL_DMA_Init+0xba>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a59      	ldr	r2, [pc, #356]	@ (8005408 <HAL_DMA_Init+0x214>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d003      	beq.n	80052ae <HAL_DMA_Init+0xba>
 80052a6:	21a3      	movs	r1, #163	@ 0xa3
 80052a8:	4858      	ldr	r0, [pc, #352]	@ (800540c <HAL_DMA_Init+0x218>)
 80052aa:	f7fd f85b 	bl	8002364 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00c      	beq.n	80052d0 <HAL_DMA_Init+0xdc>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b10      	cmp	r3, #16
 80052bc:	d008      	beq.n	80052d0 <HAL_DMA_Init+0xdc>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052c6:	d003      	beq.n	80052d0 <HAL_DMA_Init+0xdc>
 80052c8:	21a4      	movs	r1, #164	@ 0xa4
 80052ca:	4850      	ldr	r0, [pc, #320]	@ (800540c <HAL_DMA_Init+0x218>)
 80052cc:	f7fd f84a 	bl	8002364 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	2b40      	cmp	r3, #64	@ 0x40
 80052d6:	d007      	beq.n	80052e8 <HAL_DMA_Init+0xf4>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_DMA_Init+0xf4>
 80052e0:	21a5      	movs	r1, #165	@ 0xa5
 80052e2:	484a      	ldr	r0, [pc, #296]	@ (800540c <HAL_DMA_Init+0x218>)
 80052e4:	f7fd f83e 	bl	8002364 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b80      	cmp	r3, #128	@ 0x80
 80052ee:	d007      	beq.n	8005300 <HAL_DMA_Init+0x10c>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <HAL_DMA_Init+0x10c>
 80052f8:	21a6      	movs	r1, #166	@ 0xa6
 80052fa:	4844      	ldr	r0, [pc, #272]	@ (800540c <HAL_DMA_Init+0x218>)
 80052fc:	f7fd f832 	bl	8002364 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00d      	beq.n	8005324 <HAL_DMA_Init+0x130>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005310:	d008      	beq.n	8005324 <HAL_DMA_Init+0x130>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800531a:	d003      	beq.n	8005324 <HAL_DMA_Init+0x130>
 800531c:	21a7      	movs	r1, #167	@ 0xa7
 800531e:	483b      	ldr	r0, [pc, #236]	@ (800540c <HAL_DMA_Init+0x218>)
 8005320:	f7fd f820 	bl	8002364 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00d      	beq.n	8005348 <HAL_DMA_Init+0x154>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005334:	d008      	beq.n	8005348 <HAL_DMA_Init+0x154>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800533e:	d003      	beq.n	8005348 <HAL_DMA_Init+0x154>
 8005340:	21a8      	movs	r1, #168	@ 0xa8
 8005342:	4832      	ldr	r0, [pc, #200]	@ (800540c <HAL_DMA_Init+0x218>)
 8005344:	f7fd f80e 	bl	8002364 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <HAL_DMA_Init+0x16c>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	2b20      	cmp	r3, #32
 8005356:	d003      	beq.n	8005360 <HAL_DMA_Init+0x16c>
 8005358:	21a9      	movs	r1, #169	@ 0xa9
 800535a:	482c      	ldr	r0, [pc, #176]	@ (800540c <HAL_DMA_Init+0x218>)
 800535c:	f7fd f802 	bl	8002364 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d012      	beq.n	800538e <HAL_DMA_Init+0x19a>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005370:	d00d      	beq.n	800538e <HAL_DMA_Init+0x19a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800537a:	d008      	beq.n	800538e <HAL_DMA_Init+0x19a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005384:	d003      	beq.n	800538e <HAL_DMA_Init+0x19a>
 8005386:	21aa      	movs	r1, #170	@ 0xaa
 8005388:	4820      	ldr	r0, [pc, #128]	@ (800540c <HAL_DMA_Init+0x218>)
 800538a:	f7fc ffeb 	bl	8002364 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b73      	cmp	r3, #115	@ 0x73
 8005394:	d903      	bls.n	800539e <HAL_DMA_Init+0x1aa>
 8005396:	21ac      	movs	r1, #172	@ 0xac
 8005398:	481c      	ldr	r0, [pc, #112]	@ (800540c <HAL_DMA_Init+0x218>)
 800539a:	f7fc ffe3 	bl	8002364 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005410 <HAL_DMA_Init+0x21c>)
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d83a      	bhi.n	8005420 <HAL_DMA_Init+0x22c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	4b18      	ldr	r3, [pc, #96]	@ (8005414 <HAL_DMA_Init+0x220>)
 80053b2:	4413      	add	r3, r2
 80053b4:	4a18      	ldr	r2, [pc, #96]	@ (8005418 <HAL_DMA_Init+0x224>)
 80053b6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ba:	091b      	lsrs	r3, r3, #4
 80053bc:	009a      	lsls	r2, r3, #2
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a15      	ldr	r2, [pc, #84]	@ (800541c <HAL_DMA_Init+0x228>)
 80053c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80053c8:	e039      	b.n	800543e <HAL_DMA_Init+0x24a>
 80053ca:	bf00      	nop
 80053cc:	40020008 	.word	0x40020008
 80053d0:	4002001c 	.word	0x4002001c
 80053d4:	40020030 	.word	0x40020030
 80053d8:	40020044 	.word	0x40020044
 80053dc:	40020058 	.word	0x40020058
 80053e0:	4002006c 	.word	0x4002006c
 80053e4:	40020080 	.word	0x40020080
 80053e8:	40020094 	.word	0x40020094
 80053ec:	40020408 	.word	0x40020408
 80053f0:	4002041c 	.word	0x4002041c
 80053f4:	40020430 	.word	0x40020430
 80053f8:	40020444 	.word	0x40020444
 80053fc:	40020458 	.word	0x40020458
 8005400:	4002046c 	.word	0x4002046c
 8005404:	40020480 	.word	0x40020480
 8005408:	40020494 	.word	0x40020494
 800540c:	08011940 	.word	0x08011940
 8005410:	40020407 	.word	0x40020407
 8005414:	bffdfff8 	.word	0xbffdfff8
 8005418:	cccccccd 	.word	0xcccccccd
 800541c:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	4b3c      	ldr	r3, [pc, #240]	@ (8005518 <HAL_DMA_Init+0x324>)
 8005428:	4413      	add	r3, r2
 800542a:	4a3c      	ldr	r2, [pc, #240]	@ (800551c <HAL_DMA_Init+0x328>)
 800542c:	fba2 2303 	umull	r2, r3, r2, r3
 8005430:	091b      	lsrs	r3, r3, #4
 8005432:	009a      	lsls	r2, r3, #2
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a39      	ldr	r2, [pc, #228]	@ (8005520 <HAL_DMA_Init+0x32c>)
 800543c:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2202      	movs	r2, #2
 8005442:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005458:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005462:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800546e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800547a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f9bf 	bl	8005814 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800549e:	d102      	bne.n	80054a6 <HAL_DMA_Init+0x2b2>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80054ba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d010      	beq.n	80054e6 <HAL_DMA_Init+0x2f2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d80c      	bhi.n	80054e6 <HAL_DMA_Init+0x2f2>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f9df 	bl	8005890 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80054e2:	605a      	str	r2, [r3, #4]
 80054e4:	e008      	b.n	80054f8 <HAL_DMA_Init+0x304>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	bffdfbf8 	.word	0xbffdfbf8
 800551c:	cccccccd 	.word	0xcccccccd
 8005520:	40020400 	.word	0x40020400

08005524 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_DMA_Start_IT+0x20>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005542:	d304      	bcc.n	800554e <HAL_DMA_Start_IT+0x2a>
 8005544:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8005548:	483a      	ldr	r0, [pc, #232]	@ (8005634 <HAL_DMA_Start_IT+0x110>)
 800554a:	f7fc ff0b 	bl	8002364 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_DMA_Start_IT+0x38>
 8005558:	2302      	movs	r3, #2
 800555a:	e066      	b.n	800562a <HAL_DMA_Start_IT+0x106>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b01      	cmp	r3, #1
 800556e:	d155      	bne.n	800561c <HAL_DMA_Start_IT+0xf8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0201 	bic.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f8fe 	bl	8005796 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d008      	beq.n	80055b4 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 020e 	orr.w	r2, r2, #14
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	e00f      	b.n	80055d4 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0204 	bic.w	r2, r2, #4
 80055c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 020a 	orr.w	r2, r2, #10
 80055d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d007      	beq.n	80055f2 <HAL_DMA_Start_IT+0xce>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055f0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <HAL_DMA_Start_IT+0xe6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005604:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005608:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0201 	orr.w	r2, r2, #1
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	e005      	b.n	8005628 <HAL_DMA_Start_IT+0x104>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005624:	2302      	movs	r3, #2
 8005626:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005628:	7dfb      	ldrb	r3, [r7, #23]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	08011940 	.word	0x08011940

08005638 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005654:	f003 031f 	and.w	r3, r3, #31
 8005658:	2204      	movs	r2, #4
 800565a:	409a      	lsls	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4013      	ands	r3, r2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d026      	beq.n	80056b2 <HAL_DMA_IRQHandler+0x7a>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d021      	beq.n	80056b2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b00      	cmp	r3, #0
 800567a:	d107      	bne.n	800568c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0204 	bic.w	r2, r2, #4
 800568a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005690:	f003 021f 	and.w	r2, r3, #31
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005698:	2104      	movs	r1, #4
 800569a:	fa01 f202 	lsl.w	r2, r1, r2
 800569e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d071      	beq.n	800578c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80056b0:	e06c      	b.n	800578c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	2202      	movs	r2, #2
 80056bc:	409a      	lsls	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4013      	ands	r3, r2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d02e      	beq.n	8005724 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d029      	beq.n	8005724 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10b      	bne.n	80056f6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 020a 	bic.w	r2, r2, #10
 80056ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fa:	f003 021f 	and.w	r2, r3, #31
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	2102      	movs	r1, #2
 8005704:	fa01 f202 	lsl.w	r2, r1, r2
 8005708:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d038      	beq.n	800578c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005722:	e033      	b.n	800578c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005728:	f003 031f 	and.w	r3, r3, #31
 800572c:	2208      	movs	r2, #8
 800572e:	409a      	lsls	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4013      	ands	r3, r2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d02a      	beq.n	800578e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d025      	beq.n	800578e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 020e 	bic.w	r2, r2, #14
 8005750:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005756:	f003 021f 	and.w	r2, r3, #31
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575e:	2101      	movs	r1, #1
 8005760:	fa01 f202 	lsl.w	r2, r1, r2
 8005764:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005780:	2b00      	cmp	r3, #0
 8005782:	d004      	beq.n	800578e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800578c:	bf00      	nop
 800578e:	bf00      	nop
}
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005796:	b480      	push	{r7}
 8005798:	b085      	sub	sp, #20
 800579a:	af00      	add	r7, sp, #0
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	607a      	str	r2, [r7, #4]
 80057a2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057ac:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d004      	beq.n	80057c0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80057be:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c4:	f003 021f 	and.w	r2, r3, #31
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057cc:	2101      	movs	r1, #1
 80057ce:	fa01 f202 	lsl.w	r2, r1, r2
 80057d2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b10      	cmp	r3, #16
 80057e2:	d108      	bne.n	80057f6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80057f4:	e007      	b.n	8005806 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	60da      	str	r2, [r3, #12]
}
 8005806:	bf00      	nop
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	461a      	mov	r2, r3
 8005822:	4b16      	ldr	r3, [pc, #88]	@ (800587c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005824:	429a      	cmp	r2, r3
 8005826:	d802      	bhi.n	800582e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005828:	4b15      	ldr	r3, [pc, #84]	@ (8005880 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	e001      	b.n	8005832 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800582e:	4b15      	ldr	r3, [pc, #84]	@ (8005884 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005830:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	b2db      	uxtb	r3, r3
 800583c:	3b08      	subs	r3, #8
 800583e:	4a12      	ldr	r2, [pc, #72]	@ (8005888 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	091b      	lsrs	r3, r3, #4
 8005846:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584c:	089b      	lsrs	r3, r3, #2
 800584e:	009a      	lsls	r2, r3, #2
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4413      	add	r3, r2
 8005854:	461a      	mov	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a0b      	ldr	r2, [pc, #44]	@ (800588c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800585e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f003 031f 	and.w	r3, r3, #31
 8005866:	2201      	movs	r2, #1
 8005868:	409a      	lsls	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40020407 	.word	0x40020407
 8005880:	40020800 	.word	0x40020800
 8005884:	40020820 	.word	0x40020820
 8005888:	cccccccd 	.word	0xcccccccd
 800588c:	40020880 	.word	0x40020880

08005890 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4b0b      	ldr	r3, [pc, #44]	@ (80058d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80058a4:	4413      	add	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	461a      	mov	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a08      	ldr	r2, [pc, #32]	@ (80058d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80058b2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	f003 031f 	and.w	r3, r3, #31
 80058bc:	2201      	movs	r2, #1
 80058be:	409a      	lsls	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	1000823f 	.word	0x1000823f
 80058d4:	40020940 	.word	0x40020940

080058d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80058ec:	d01b      	beq.n	8005926 <HAL_GPIO_Init+0x4e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a37      	ldr	r2, [pc, #220]	@ (80059d0 <HAL_GPIO_Init+0xf8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d017      	beq.n	8005926 <HAL_GPIO_Init+0x4e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a36      	ldr	r2, [pc, #216]	@ (80059d4 <HAL_GPIO_Init+0xfc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <HAL_GPIO_Init+0x4e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a35      	ldr	r2, [pc, #212]	@ (80059d8 <HAL_GPIO_Init+0x100>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00f      	beq.n	8005926 <HAL_GPIO_Init+0x4e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a34      	ldr	r2, [pc, #208]	@ (80059dc <HAL_GPIO_Init+0x104>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00b      	beq.n	8005926 <HAL_GPIO_Init+0x4e>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a33      	ldr	r2, [pc, #204]	@ (80059e0 <HAL_GPIO_Init+0x108>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d007      	beq.n	8005926 <HAL_GPIO_Init+0x4e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a32      	ldr	r2, [pc, #200]	@ (80059e4 <HAL_GPIO_Init+0x10c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d003      	beq.n	8005926 <HAL_GPIO_Init+0x4e>
 800591e:	21a9      	movs	r1, #169	@ 0xa9
 8005920:	4831      	ldr	r0, [pc, #196]	@ (80059e8 <HAL_GPIO_Init+0x110>)
 8005922:	f7fc fd1f 	bl	8002364 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d004      	beq.n	800593a <HAL_GPIO_Init+0x62>
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005938:	d303      	bcc.n	8005942 <HAL_GPIO_Init+0x6a>
 800593a:	21aa      	movs	r1, #170	@ 0xaa
 800593c:	482a      	ldr	r0, [pc, #168]	@ (80059e8 <HAL_GPIO_Init+0x110>)
 800593e:	f7fc fd11 	bl	8002364 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 8209 	beq.w	8005d5e <HAL_GPIO_Init+0x486>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b01      	cmp	r3, #1
 8005952:	f000 8204 	beq.w	8005d5e <HAL_GPIO_Init+0x486>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b11      	cmp	r3, #17
 800595c:	f000 81ff 	beq.w	8005d5e <HAL_GPIO_Init+0x486>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b02      	cmp	r3, #2
 8005966:	f000 81fa 	beq.w	8005d5e <HAL_GPIO_Init+0x486>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b12      	cmp	r3, #18
 8005970:	f000 81f5 	beq.w	8005d5e <HAL_GPIO_Init+0x486>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800597c:	f000 81ef 	beq.w	8005d5e <HAL_GPIO_Init+0x486>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005988:	f000 81e9 	beq.w	8005d5e <HAL_GPIO_Init+0x486>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8005994:	f000 81e3 	beq.w	8005d5e <HAL_GPIO_Init+0x486>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80059a0:	f000 81dd 	beq.w	8005d5e <HAL_GPIO_Init+0x486>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80059ac:	f000 81d7 	beq.w	8005d5e <HAL_GPIO_Init+0x486>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80059b8:	f000 81d1 	beq.w	8005d5e <HAL_GPIO_Init+0x486>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	f000 81cc 	beq.w	8005d5e <HAL_GPIO_Init+0x486>
 80059c6:	21ab      	movs	r1, #171	@ 0xab
 80059c8:	4807      	ldr	r0, [pc, #28]	@ (80059e8 <HAL_GPIO_Init+0x110>)
 80059ca:	f7fc fccb 	bl	8002364 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059ce:	e1c6      	b.n	8005d5e <HAL_GPIO_Init+0x486>
 80059d0:	48000400 	.word	0x48000400
 80059d4:	48000800 	.word	0x48000800
 80059d8:	48000c00 	.word	0x48000c00
 80059dc:	48001000 	.word	0x48001000
 80059e0:	48001400 	.word	0x48001400
 80059e4:	48001800 	.word	0x48001800
 80059e8:	080119b0 	.word	0x080119b0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	2101      	movs	r1, #1
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	fa01 f303 	lsl.w	r3, r1, r3
 80059f8:	4013      	ands	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 81aa 	beq.w	8005d58 <HAL_GPIO_Init+0x480>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d005      	beq.n	8005a1c <HAL_GPIO_Init+0x144>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d144      	bne.n	8005aa6 <HAL_GPIO_Init+0x1ce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00f      	beq.n	8005a44 <HAL_GPIO_Init+0x16c>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d00b      	beq.n	8005a44 <HAL_GPIO_Init+0x16c>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d007      	beq.n	8005a44 <HAL_GPIO_Init+0x16c>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d003      	beq.n	8005a44 <HAL_GPIO_Init+0x16c>
 8005a3c:	21bb      	movs	r1, #187	@ 0xbb
 8005a3e:	488b      	ldr	r0, [pc, #556]	@ (8005c6c <HAL_GPIO_Init+0x394>)
 8005a40:	f7fc fc90 	bl	8002364 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	2203      	movs	r2, #3
 8005a50:	fa02 f303 	lsl.w	r3, r2, r3
 8005a54:	43db      	mvns	r3, r3
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a82:	43db      	mvns	r3, r3
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	4013      	ands	r3, r2
 8005a88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	091b      	lsrs	r3, r3, #4
 8005a90:	f003 0201 	and.w	r2, r3, #1
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d027      	beq.n	8005b02 <HAL_GPIO_Init+0x22a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00b      	beq.n	8005ad2 <HAL_GPIO_Init+0x1fa>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d007      	beq.n	8005ad2 <HAL_GPIO_Init+0x1fa>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d003      	beq.n	8005ad2 <HAL_GPIO_Init+0x1fa>
 8005aca:	21cc      	movs	r1, #204	@ 0xcc
 8005acc:	4867      	ldr	r0, [pc, #412]	@ (8005c6c <HAL_GPIO_Init+0x394>)
 8005ace:	f7fc fc49 	bl	8002364 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	2203      	movs	r2, #3
 8005ade:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae2:	43db      	mvns	r3, r3
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d14b      	bne.n	8005ba6 <HAL_GPIO_Init+0x2ce>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b14:	d01b      	beq.n	8005b4e <HAL_GPIO_Init+0x276>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a55      	ldr	r2, [pc, #340]	@ (8005c70 <HAL_GPIO_Init+0x398>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d017      	beq.n	8005b4e <HAL_GPIO_Init+0x276>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a54      	ldr	r2, [pc, #336]	@ (8005c74 <HAL_GPIO_Init+0x39c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d013      	beq.n	8005b4e <HAL_GPIO_Init+0x276>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a53      	ldr	r2, [pc, #332]	@ (8005c78 <HAL_GPIO_Init+0x3a0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00f      	beq.n	8005b4e <HAL_GPIO_Init+0x276>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a52      	ldr	r2, [pc, #328]	@ (8005c7c <HAL_GPIO_Init+0x3a4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00b      	beq.n	8005b4e <HAL_GPIO_Init+0x276>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a51      	ldr	r2, [pc, #324]	@ (8005c80 <HAL_GPIO_Init+0x3a8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d007      	beq.n	8005b4e <HAL_GPIO_Init+0x276>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a50      	ldr	r2, [pc, #320]	@ (8005c84 <HAL_GPIO_Init+0x3ac>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d003      	beq.n	8005b4e <HAL_GPIO_Init+0x276>
 8005b46:	21d9      	movs	r1, #217	@ 0xd9
 8005b48:	4848      	ldr	r0, [pc, #288]	@ (8005c6c <HAL_GPIO_Init+0x394>)
 8005b4a:	f7fc fc0b 	bl	8002364 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b0f      	cmp	r3, #15
 8005b54:	d903      	bls.n	8005b5e <HAL_GPIO_Init+0x286>
 8005b56:	21da      	movs	r1, #218	@ 0xda
 8005b58:	4844      	ldr	r0, [pc, #272]	@ (8005c6c <HAL_GPIO_Init+0x394>)
 8005b5a:	f7fc fc03 	bl	8002364 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	08da      	lsrs	r2, r3, #3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3208      	adds	r2, #8
 8005b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	220f      	movs	r2, #15
 8005b76:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7a:	43db      	mvns	r3, r3
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	08da      	lsrs	r2, r3, #3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3208      	adds	r2, #8
 8005ba0:	6939      	ldr	r1, [r7, #16]
 8005ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f003 0203 	and.w	r2, r3, #3
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	fa02 f303 	lsl.w	r3, r2, r3
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 80b8 	beq.w	8005d58 <HAL_GPIO_Init+0x480>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005be8:	4b27      	ldr	r3, [pc, #156]	@ (8005c88 <HAL_GPIO_Init+0x3b0>)
 8005bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bec:	4a26      	ldr	r2, [pc, #152]	@ (8005c88 <HAL_GPIO_Init+0x3b0>)
 8005bee:	f043 0301 	orr.w	r3, r3, #1
 8005bf2:	6613      	str	r3, [r2, #96]	@ 0x60
 8005bf4:	4b24      	ldr	r3, [pc, #144]	@ (8005c88 <HAL_GPIO_Init+0x3b0>)
 8005bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	60bb      	str	r3, [r7, #8]
 8005bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c00:	4a22      	ldr	r2, [pc, #136]	@ (8005c8c <HAL_GPIO_Init+0x3b4>)
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	089b      	lsrs	r3, r3, #2
 8005c06:	3302      	adds	r3, #2
 8005c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f003 0303 	and.w	r3, r3, #3
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	220f      	movs	r2, #15
 8005c18:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4013      	ands	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005c2a:	d031      	beq.n	8005c90 <HAL_GPIO_Init+0x3b8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a10      	ldr	r2, [pc, #64]	@ (8005c70 <HAL_GPIO_Init+0x398>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d019      	beq.n	8005c68 <HAL_GPIO_Init+0x390>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a0f      	ldr	r2, [pc, #60]	@ (8005c74 <HAL_GPIO_Init+0x39c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d013      	beq.n	8005c64 <HAL_GPIO_Init+0x38c>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8005c78 <HAL_GPIO_Init+0x3a0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00d      	beq.n	8005c60 <HAL_GPIO_Init+0x388>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a0d      	ldr	r2, [pc, #52]	@ (8005c7c <HAL_GPIO_Init+0x3a4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d007      	beq.n	8005c5c <HAL_GPIO_Init+0x384>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8005c80 <HAL_GPIO_Init+0x3a8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d101      	bne.n	8005c58 <HAL_GPIO_Init+0x380>
 8005c54:	2305      	movs	r3, #5
 8005c56:	e01c      	b.n	8005c92 <HAL_GPIO_Init+0x3ba>
 8005c58:	2306      	movs	r3, #6
 8005c5a:	e01a      	b.n	8005c92 <HAL_GPIO_Init+0x3ba>
 8005c5c:	2304      	movs	r3, #4
 8005c5e:	e018      	b.n	8005c92 <HAL_GPIO_Init+0x3ba>
 8005c60:	2303      	movs	r3, #3
 8005c62:	e016      	b.n	8005c92 <HAL_GPIO_Init+0x3ba>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e014      	b.n	8005c92 <HAL_GPIO_Init+0x3ba>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e012      	b.n	8005c92 <HAL_GPIO_Init+0x3ba>
 8005c6c:	080119b0 	.word	0x080119b0
 8005c70:	48000400 	.word	0x48000400
 8005c74:	48000800 	.word	0x48000800
 8005c78:	48000c00 	.word	0x48000c00
 8005c7c:	48001000 	.word	0x48001000
 8005c80:	48001400 	.word	0x48001400
 8005c84:	48001800 	.word	0x48001800
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	2300      	movs	r3, #0
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	f002 0203 	and.w	r2, r2, #3
 8005c98:	0092      	lsls	r2, r2, #2
 8005c9a:	4093      	lsls	r3, r2
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ca2:	4935      	ldr	r1, [pc, #212]	@ (8005d78 <HAL_GPIO_Init+0x4a0>)
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	089b      	lsrs	r3, r3, #2
 8005ca8:	3302      	adds	r3, #2
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cb0:	4b32      	ldr	r3, [pc, #200]	@ (8005d7c <HAL_GPIO_Init+0x4a4>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <HAL_GPIO_Init+0x3fc>
        {
          temp |= iocurrent;
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005cd4:	4a29      	ldr	r2, [pc, #164]	@ (8005d7c <HAL_GPIO_Init+0x4a4>)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005cda:	4b28      	ldr	r3, [pc, #160]	@ (8005d7c <HAL_GPIO_Init+0x4a4>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	43db      	mvns	r3, r3
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_GPIO_Init+0x426>
        {
          temp |= iocurrent;
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8005d7c <HAL_GPIO_Init+0x4a4>)
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005d04:	4b1d      	ldr	r3, [pc, #116]	@ (8005d7c <HAL_GPIO_Init+0x4a4>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4013      	ands	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <HAL_GPIO_Init+0x450>
        {
          temp |= iocurrent;
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d28:	4a14      	ldr	r2, [pc, #80]	@ (8005d7c <HAL_GPIO_Init+0x4a4>)
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005d2e:	4b13      	ldr	r3, [pc, #76]	@ (8005d7c <HAL_GPIO_Init+0x4a4>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	43db      	mvns	r3, r3
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_GPIO_Init+0x47a>
        {
          temp |= iocurrent;
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d52:	4a0a      	ldr	r2, [pc, #40]	@ (8005d7c <HAL_GPIO_Init+0x4a4>)
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	fa22 f303 	lsr.w	r3, r2, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f47f ae3f 	bne.w	80059ec <HAL_GPIO_Init+0x114>
  }
}
 8005d6e:	bf00      	nop
 8005d70:	bf00      	nop
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	40010400 	.word	0x40010400

08005d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	807b      	strh	r3, [r7, #2]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005d90:	887b      	ldrh	r3, [r7, #2]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d104      	bne.n	8005da0 <HAL_GPIO_WritePin+0x20>
 8005d96:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 8005d9a:	480e      	ldr	r0, [pc, #56]	@ (8005dd4 <HAL_GPIO_WritePin+0x54>)
 8005d9c:	f7fc fae2 	bl	8002364 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005da0:	787b      	ldrb	r3, [r7, #1]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d007      	beq.n	8005db6 <HAL_GPIO_WritePin+0x36>
 8005da6:	787b      	ldrb	r3, [r7, #1]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d004      	beq.n	8005db6 <HAL_GPIO_WritePin+0x36>
 8005dac:	f240 119b 	movw	r1, #411	@ 0x19b
 8005db0:	4808      	ldr	r0, [pc, #32]	@ (8005dd4 <HAL_GPIO_WritePin+0x54>)
 8005db2:	f7fc fad7 	bl	8002364 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8005db6:	787b      	ldrb	r3, [r7, #1]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dbc:	887a      	ldrh	r2, [r7, #2]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005dc2:	e002      	b.n	8005dca <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005dc4:	887a      	ldrh	r2, [r7, #2]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005dca:	bf00      	nop
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	080119b0 	.word	0x080119b0

08005dd8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005de4:	887b      	ldrh	r3, [r7, #2]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d104      	bne.n	8005df4 <HAL_GPIO_TogglePin+0x1c>
 8005dea:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005dee:	480a      	ldr	r0, [pc, #40]	@ (8005e18 <HAL_GPIO_TogglePin+0x40>)
 8005df0:	f7fc fab8 	bl	8002364 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005dfa:	887a      	ldrh	r2, [r7, #2]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	041a      	lsls	r2, r3, #16
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	43d9      	mvns	r1, r3
 8005e06:	887b      	ldrh	r3, [r7, #2]
 8005e08:	400b      	ands	r3, r1
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	619a      	str	r2, [r3, #24]
}
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	080119b0 	.word	0x080119b0

08005e1c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e113      	b.n	8006056 <HAL_HRTIM_Init+0x23a>
  }

  /* Check the parameters */
  assert_param(IS_HRTIM_ALL_INSTANCE(hhrtim->Instance));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a8b      	ldr	r2, [pc, #556]	@ (8006060 <HAL_HRTIM_Init+0x244>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d004      	beq.n	8005e42 <HAL_HRTIM_Init+0x26>
 8005e38:	f44f 710d 	mov.w	r1, #564	@ 0x234
 8005e3c:	4889      	ldr	r0, [pc, #548]	@ (8006064 <HAL_HRTIM_Init+0x248>)
 8005e3e:	f7fc fa91 	bl	8002364 <assert_failed>
  assert_param(IS_HRTIM_IT(hhrtim->Init.HRTIMInterruptResquests));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005e4a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d004      	beq.n	8005e5c <HAL_HRTIM_Init+0x40>
 8005e52:	f240 2135 	movw	r1, #565	@ 0x235
 8005e56:	4883      	ldr	r0, [pc, #524]	@ (8006064 <HAL_HRTIM_Init+0x248>)
 8005e58:	f7fc fa84 	bl	8002364 <assert_failed>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d059      	beq.n	8005f5c <HAL_HRTIM_Init+0x140>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCOUTPUTSOURCE(hhrtim->Init.SyncOutputSource));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d013      	beq.n	8005ed8 <HAL_HRTIM_Init+0xbc>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005eb8:	d00e      	beq.n	8005ed8 <HAL_HRTIM_Init+0xbc>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ec2:	d009      	beq.n	8005ed8 <HAL_HRTIM_Init+0xbc>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005ecc:	d004      	beq.n	8005ed8 <HAL_HRTIM_Init+0xbc>
 8005ece:	f240 216d 	movw	r1, #621	@ 0x26d
 8005ed2:	4864      	ldr	r0, [pc, #400]	@ (8006064 <HAL_HRTIM_Init+0x248>)
 8005ed4:	f7fc fa46 	bl	8002364 <assert_failed>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00e      	beq.n	8005efe <HAL_HRTIM_Init+0xe2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ee8:	d009      	beq.n	8005efe <HAL_HRTIM_Init+0xe2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ef2:	d004      	beq.n	8005efe <HAL_HRTIM_Init+0xe2>
 8005ef4:	f240 216e 	movw	r1, #622	@ 0x26e
 8005ef8:	485a      	ldr	r0, [pc, #360]	@ (8006064 <HAL_HRTIM_Init+0x248>)
 8005efa:	f7fc fa33 	bl	8002364 <assert_failed>

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a57      	ldr	r2, [pc, #348]	@ (8006060 <HAL_HRTIM_Init+0x244>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d10b      	bne.n	8005f20 <HAL_HRTIM_Init+0x104>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8005f08:	4b57      	ldr	r3, [pc, #348]	@ (8006068 <HAL_HRTIM_Init+0x24c>)
 8005f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f0c:	4a56      	ldr	r2, [pc, #344]	@ (8006068 <HAL_HRTIM_Init+0x24c>)
 8005f0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f12:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f14:	4b54      	ldr	r3, [pc, #336]	@ (8006068 <HAL_HRTIM_Init+0x24c>)
 8005f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005f2e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005f44:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7fb fe3d 	bl	8001bdc <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d025      	beq.n	8005fba <HAL_HRTIM_Init+0x19e>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00e      	beq.n	8005f94 <HAL_HRTIM_Init+0x178>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f7e:	d009      	beq.n	8005f94 <HAL_HRTIM_Init+0x178>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f88:	d004      	beq.n	8005f94 <HAL_HRTIM_Init+0x178>
 8005f8a:	f240 2192 	movw	r1, #658	@ 0x292
 8005f8e:	4835      	ldr	r0, [pc, #212]	@ (8006064 <HAL_HRTIM_Init+0x248>)
 8005f90:	f7fc f9e8 	bl	8002364 <assert_failed>

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fa2:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	75fb      	strb	r3, [r7, #23]
 8005fce:	e03e      	b.n	800604e <HAL_HRTIM_Init+0x232>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8005fd0:	7dfa      	ldrb	r2, [r7, #23]
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	3318      	adds	r3, #24
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8005fe4:	7dfa      	ldrb	r2, [r7, #23]
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	1a9b      	subs	r3, r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	331c      	adds	r3, #28
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8005ff8:	7dfa      	ldrb	r2, [r7, #23]
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	1a9b      	subs	r3, r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	3320      	adds	r3, #32
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800600c:	7dfa      	ldrb	r2, [r7, #23]
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	4613      	mov	r3, r2
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	3324      	adds	r3, #36	@ 0x24
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8006020:	7dfa      	ldrb	r2, [r7, #23]
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	4613      	mov	r3, r2
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	1a9b      	subs	r3, r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	3328      	adds	r3, #40	@ 0x28
 8006030:	2200      	movs	r2, #0
 8006032:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8006034:	7dfa      	ldrb	r2, [r7, #23]
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4613      	mov	r3, r2
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	3330      	adds	r3, #48	@ 0x30
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8006048:	7dfb      	ldrb	r3, [r7, #23]
 800604a:	3301      	adds	r3, #1
 800604c:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 800604e:	7dfb      	ldrb	r3, [r7, #23]
 8006050:	2b06      	cmp	r3, #6
 8006052:	d9bd      	bls.n	8005fd0 <HAL_HRTIM_Init+0x1b4>
  }

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	40016800 	.word	0x40016800
 8006064:	08011a24 	.word	0x08011a24
 8006068:	40021000 	.word	0x40021000

0800606c <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607c:	d010      	beq.n	80060a0 <HAL_HRTIM_DLLCalibrationStart+0x34>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00d      	beq.n	80060a0 <HAL_HRTIM_DLLCalibrationStart+0x34>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b04      	cmp	r3, #4
 8006088:	d00a      	beq.n	80060a0 <HAL_HRTIM_DLLCalibrationStart+0x34>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b08      	cmp	r3, #8
 800608e:	d007      	beq.n	80060a0 <HAL_HRTIM_DLLCalibrationStart+0x34>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b0c      	cmp	r3, #12
 8006094:	d004      	beq.n	80060a0 <HAL_HRTIM_DLLCalibrationStart+0x34>
 8006096:	f240 3109 	movw	r1, #777	@ 0x309
 800609a:	482a      	ldr	r0, [pc, #168]	@ (8006144 <HAL_HRTIM_DLLCalibrationStart+0xd8>)
 800609c:	f7fc f962 	bl	8002364 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d101      	bne.n	80060ae <HAL_HRTIM_DLLCalibrationStart+0x42>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e045      	b.n	800613a <HAL_HRTIM_DLLCalibrationStart+0xce>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c4:	d114      	bne.n	80060f0 <HAL_HRTIM_DLLCalibrationStart+0x84>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0202 	bic.w	r2, r2, #2
 80060d6:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 80060ee:	e01f      	b.n	8006130 <HAL_HRTIM_DLLCalibrationStart+0xc4>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 0202 	orr.w	r2, r2, #2
 8006100:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800610c:	f023 010c 	bic.w	r1, r3, #12
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 0201 	orr.w	r2, r2, #1
 800612c:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	08011a24 	.word	0x08011a24

08006148 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8006152:	f7fc fac9 	bl	80026e8 <HAL_GetTick>
 8006156:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8006158:	e014      	b.n	8006184 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d010      	beq.n	8006184 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8006162:	f7fc fac1 	bl	80026e8 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d302      	bcc.n	8006178 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d105      	bne.n	8006184 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2207      	movs	r2, #7
 800617c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e011      	b.n	80061a8 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 800618c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006194:	d1e1      	bne.n	800615a <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b06      	cmp	r3, #6
 80061c0:	d016      	beq.n	80061f0 <HAL_HRTIM_TimeBaseConfig+0x40>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d013      	beq.n	80061f0 <HAL_HRTIM_TimeBaseConfig+0x40>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d010      	beq.n	80061f0 <HAL_HRTIM_TimeBaseConfig+0x40>
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d00d      	beq.n	80061f0 <HAL_HRTIM_TimeBaseConfig+0x40>
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d00a      	beq.n	80061f0 <HAL_HRTIM_TimeBaseConfig+0x40>
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d007      	beq.n	80061f0 <HAL_HRTIM_TimeBaseConfig+0x40>
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b05      	cmp	r3, #5
 80061e4:	d004      	beq.n	80061f0 <HAL_HRTIM_TimeBaseConfig+0x40>
 80061e6:	f240 3197 	movw	r1, #919	@ 0x397
 80061ea:	482d      	ldr	r0, [pc, #180]	@ (80062a0 <HAL_HRTIM_TimeBaseConfig+0xf0>)
 80061ec:	f7fc f8ba 	bl	8002364 <assert_failed>
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d020      	beq.n	800623a <HAL_HRTIM_TimeBaseConfig+0x8a>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d01c      	beq.n	800623a <HAL_HRTIM_TimeBaseConfig+0x8a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d018      	beq.n	800623a <HAL_HRTIM_TimeBaseConfig+0x8a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	2b03      	cmp	r3, #3
 800620e:	d014      	beq.n	800623a <HAL_HRTIM_TimeBaseConfig+0x8a>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b04      	cmp	r3, #4
 8006216:	d010      	beq.n	800623a <HAL_HRTIM_TimeBaseConfig+0x8a>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2b05      	cmp	r3, #5
 800621e:	d00c      	beq.n	800623a <HAL_HRTIM_TimeBaseConfig+0x8a>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	2b06      	cmp	r3, #6
 8006226:	d008      	beq.n	800623a <HAL_HRTIM_TimeBaseConfig+0x8a>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2b07      	cmp	r3, #7
 800622e:	d004      	beq.n	800623a <HAL_HRTIM_TimeBaseConfig+0x8a>
 8006230:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8006234:	481a      	ldr	r0, [pc, #104]	@ (80062a0 <HAL_HRTIM_TimeBaseConfig+0xf0>)
 8006236:	f7fc f895 	bl	8002364 <assert_failed>
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	2b08      	cmp	r3, #8
 8006240:	d00c      	beq.n	800625c <HAL_HRTIM_TimeBaseConfig+0xac>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d008      	beq.n	800625c <HAL_HRTIM_TimeBaseConfig+0xac>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	2b10      	cmp	r3, #16
 8006250:	d004      	beq.n	800625c <HAL_HRTIM_TimeBaseConfig+0xac>
 8006252:	f240 3199 	movw	r1, #921	@ 0x399
 8006256:	4812      	ldr	r0, [pc, #72]	@ (80062a0 <HAL_HRTIM_TimeBaseConfig+0xf0>)
 8006258:	f7fc f884 	bl	8002364 <assert_failed>

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d101      	bne.n	800626c <HAL_HRTIM_TimeBaseConfig+0xbc>
  {
     return HAL_BUSY;
 8006268:	2302      	movs	r3, #2
 800626a:	e015      	b.n	8006298 <HAL_HRTIM_TimeBaseConfig+0xe8>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b06      	cmp	r3, #6
 8006278:	d104      	bne.n	8006284 <HAL_HRTIM_TimeBaseConfig+0xd4>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 fe1b 	bl	8006eb8 <HRTIM_MasterBase_Config>
 8006282:	e004      	b.n	800628e <HAL_HRTIM_TimeBaseConfig+0xde>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 fe44 	bl	8006f16 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	08011a24 	.word	0x08011a24

080062a4 <HAL_HRTIM_SimpleBaseStart>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_SimpleBaseStart(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b06      	cmp	r3, #6
 80062b2:	d016      	beq.n	80062e2 <HAL_HRTIM_SimpleBaseStart+0x3e>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d013      	beq.n	80062e2 <HAL_HRTIM_SimpleBaseStart+0x3e>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d010      	beq.n	80062e2 <HAL_HRTIM_SimpleBaseStart+0x3e>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d00d      	beq.n	80062e2 <HAL_HRTIM_SimpleBaseStart+0x3e>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b03      	cmp	r3, #3
 80062ca:	d00a      	beq.n	80062e2 <HAL_HRTIM_SimpleBaseStart+0x3e>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	d007      	beq.n	80062e2 <HAL_HRTIM_SimpleBaseStart+0x3e>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b05      	cmp	r3, #5
 80062d6:	d004      	beq.n	80062e2 <HAL_HRTIM_SimpleBaseStart+0x3e>
 80062d8:	f240 31de 	movw	r1, #990	@ 0x3de
 80062dc:	4814      	ldr	r0, [pc, #80]	@ (8006330 <HAL_HRTIM_SimpleBaseStart+0x8c>)
 80062de:	f7fc f841 	bl	8002364 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_HRTIM_SimpleBaseStart+0x4c>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e01b      	b.n	8006328 <HAL_HRTIM_SimpleBaseStart+0x84>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6819      	ldr	r1, [r3, #0]
 8006306:	4a0b      	ldr	r2, [pc, #44]	@ (8006334 <HAL_HRTIM_SimpleBaseStart+0x90>)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	08011a24 	.word	0x08011a24
 8006334:	2000000c 	.word	0x2000000c

08006338 <HAL_HRTIM_SimpleBaseStart_DMA>:
HAL_StatusTypeDef HAL_HRTIM_SimpleBaseStart_DMA(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t TimerIdx,
                                               uint32_t SrcAddr,
                                               uint32_t DestAddr,
                                               uint32_t Length)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
  DMA_HandleTypeDef * hdma;

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2b06      	cmp	r3, #6
 800634a:	d016      	beq.n	800637a <HAL_HRTIM_SimpleBaseStart_DMA+0x42>
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d013      	beq.n	800637a <HAL_HRTIM_SimpleBaseStart_DMA+0x42>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d010      	beq.n	800637a <HAL_HRTIM_SimpleBaseStart_DMA+0x42>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b02      	cmp	r3, #2
 800635c:	d00d      	beq.n	800637a <HAL_HRTIM_SimpleBaseStart_DMA+0x42>
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b03      	cmp	r3, #3
 8006362:	d00a      	beq.n	800637a <HAL_HRTIM_SimpleBaseStart_DMA+0x42>
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b04      	cmp	r3, #4
 8006368:	d007      	beq.n	800637a <HAL_HRTIM_SimpleBaseStart_DMA+0x42>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b05      	cmp	r3, #5
 800636e:	d004      	beq.n	800637a <HAL_HRTIM_SimpleBaseStart_DMA+0x42>
 8006370:	f240 418d 	movw	r1, #1165	@ 0x48d
 8006374:	4848      	ldr	r0, [pc, #288]	@ (8006498 <HAL_HRTIM_SimpleBaseStart_DMA+0x160>)
 8006376:	f7fb fff5 	bl	8002364 <assert_failed>

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d101      	bne.n	800638a <HAL_HRTIM_SimpleBaseStart_DMA+0x52>
  {
     return HAL_BUSY;
 8006386:	2302      	movs	r3, #2
 8006388:	e081      	b.n	800648e <HAL_HRTIM_SimpleBaseStart_DMA+0x156>
  }
  if(hhrtim->State == HAL_HRTIM_STATE_READY)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b01      	cmp	r3, #1
 8006394:	d10e      	bne.n	80063b4 <HAL_HRTIM_SimpleBaseStart_DMA+0x7c>
  {
    if((SrcAddr == 0U ) || (DestAddr == 0U ) || (Length == 0U))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d005      	beq.n	80063a8 <HAL_HRTIM_SimpleBaseStart_DMA+0x70>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_HRTIM_SimpleBaseStart_DMA+0x70>
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <HAL_HRTIM_SimpleBaseStart_DMA+0x74>
    {
      return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e070      	b.n	800648e <HAL_HRTIM_SimpleBaseStart_DMA+0x156>
    }
    else
    {
      hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
    }
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d101      	bne.n	80063c2 <HAL_HRTIM_SimpleBaseStart_DMA+0x8a>
 80063be:	2302      	movs	r3, #2
 80063c0:	e065      	b.n	800648e <HAL_HRTIM_SimpleBaseStart_DMA+0x156>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Get the timer DMA handler */
  hdma = HRTIM_GetDMAHandleFromTimerIdx(hhrtim, TimerIdx);
 80063ca:	68b9      	ldr	r1, [r7, #8]
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 fe43 	bl	8007058 <HRTIM_GetDMAHandleFromTimerIdx>
 80063d2:	6178      	str	r0, [r7, #20]

  if (hdma == NULL)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d109      	bne.n	80063ee <HAL_HRTIM_SimpleBaseStart_DMA+0xb6>
  {
   hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2207      	movs	r2, #7
 80063de:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

   /* Process Unlocked */
   __HAL_UNLOCK(hhrtim);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

   return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e04f      	b.n	800648e <HAL_HRTIM_SimpleBaseStart_DMA+0x156>
  }

  /* Set the DMA transfer completed callback */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b06      	cmp	r3, #6
 80063f2:	d103      	bne.n	80063fc <HAL_HRTIM_SimpleBaseStart_DMA+0xc4>
  {
    hdma->XferCpltCallback = HRTIM_DMAMasterCplt;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	4a29      	ldr	r2, [pc, #164]	@ (800649c <HAL_HRTIM_SimpleBaseStart_DMA+0x164>)
 80063f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80063fa:	e002      	b.n	8006402 <HAL_HRTIM_SimpleBaseStart_DMA+0xca>
  }
  else
  {
    hdma->XferCpltCallback = HRTIM_DMATimerxCplt;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	4a28      	ldr	r2, [pc, #160]	@ (80064a0 <HAL_HRTIM_SimpleBaseStart_DMA+0x168>)
 8006400:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hdma->XferErrorCallback = HRTIM_DMAError ;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	4a27      	ldr	r2, [pc, #156]	@ (80064a4 <HAL_HRTIM_SimpleBaseStart_DMA+0x16c>)
 8006406:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA channel */
  if (HAL_DMA_Start_IT(hdma, SrcAddr, DestAddr, Length) != HAL_OK)
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	6978      	ldr	r0, [r7, #20]
 8006410:	f7ff f888 	bl	8005524 <HAL_DMA_Start_IT>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <HAL_HRTIM_SimpleBaseStart_DMA+0xf6>
    {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2207      	movs	r2, #7
 800641e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e02f      	b.n	800648e <HAL_HRTIM_SimpleBaseStart_DMA+0x156>
    }

  /* Enable the timer repetition DMA request */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2b06      	cmp	r3, #6
 8006432:	d108      	bne.n	8006446 <HAL_HRTIM_SimpleBaseStart_DMA+0x10e>
  {
    __HAL_HRTIM_MASTER_ENABLE_DMA(hhrtim, HRTIM_MASTER_DMA_MREP);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006442:	60da      	str	r2, [r3, #12]
 8006444:	e00f      	b.n	8006466 <HAL_HRTIM_SimpleBaseStart_DMA+0x12e>
  }
  else
  {
    __HAL_HRTIM_TIMER_ENABLE_DMA(hhrtim, TimerIdx, HRTIM_TIM_DMA_REP);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	01db      	lsls	r3, r3, #7
 800644e:	4413      	add	r3, r2
 8006450:	338c      	adds	r3, #140	@ 0x8c
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	6811      	ldr	r1, [r2, #0]
 8006458:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	01db      	lsls	r3, r3, #7
 8006460:	440b      	add	r3, r1
 8006462:	338c      	adds	r3, #140	@ 0x8c
 8006464:	601a      	str	r2, [r3, #0]
  }

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6819      	ldr	r1, [r3, #0]
 800646c:	4a0e      	ldr	r2, [pc, #56]	@ (80064a8 <HAL_HRTIM_SimpleBaseStart_DMA+0x170>)
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	08011a24 	.word	0x08011a24
 800649c:	08007261 	.word	0x08007261
 80064a0:	0800731b 	.word	0x0800731b
 80064a4:	0800753f 	.word	0x0800753f
 80064a8:	2000000c 	.word	0x2000000c

080064ac <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             const HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_cr1;
  uint32_t hrtim_adcur;

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d021      	beq.n	8006502 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d01e      	beq.n	8006502 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d01b      	beq.n	8006502 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d018      	beq.n	8006502 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2b10      	cmp	r3, #16
 80064d4:	d015      	beq.n	8006502 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b20      	cmp	r3, #32
 80064da:	d012      	beq.n	8006502 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2b40      	cmp	r3, #64	@ 0x40
 80064e0:	d00f      	beq.n	8006502 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b80      	cmp	r3, #128	@ 0x80
 80064e6:	d00c      	beq.n	8006502 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064ee:	d008      	beq.n	8006502 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064f6:	d004      	beq.n	8006502 <HAL_HRTIM_ADCTriggerConfig+0x56>
 80064f8:	f241 11d8 	movw	r1, #4568	@ 0x11d8
 80064fc:	48a7      	ldr	r0, [pc, #668]	@ (800679c <HAL_HRTIM_ADCTriggerConfig+0x2f0>)
 80064fe:	f7fb ff31 	bl	8002364 <assert_failed>
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d022      	beq.n	8006550 <HAL_HRTIM_ADCTriggerConfig+0xa4>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006512:	d01d      	beq.n	8006550 <HAL_HRTIM_ADCTriggerConfig+0xa4>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800651c:	d018      	beq.n	8006550 <HAL_HRTIM_ADCTriggerConfig+0xa4>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006526:	d013      	beq.n	8006550 <HAL_HRTIM_ADCTriggerConfig+0xa4>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006530:	d00e      	beq.n	8006550 <HAL_HRTIM_ADCTriggerConfig+0xa4>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800653a:	d009      	beq.n	8006550 <HAL_HRTIM_ADCTriggerConfig+0xa4>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006544:	d004      	beq.n	8006550 <HAL_HRTIM_ADCTriggerConfig+0xa4>
 8006546:	f241 11d9 	movw	r1, #4569	@ 0x11d9
 800654a:	4894      	ldr	r0, [pc, #592]	@ (800679c <HAL_HRTIM_ADCTriggerConfig+0x2f0>)
 800654c:	f7fb ff0a 	bl	8002364 <assert_failed>

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b02      	cmp	r3, #2
 800655a:	d101      	bne.n	8006560 <HAL_HRTIM_ADCTriggerConfig+0xb4>
  {
     return HAL_BUSY;
 800655c:	2302      	movs	r3, #2
 800655e:	e1da      	b.n	8006916 <HAL_HRTIM_ADCTriggerConfig+0x46a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_HRTIM_ADCTriggerConfig+0xc2>
 800656a:	2302      	movs	r3, #2
 800656c:	e1d3      	b.n	8006916 <HAL_HRTIM_ADCTriggerConfig+0x46a>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2202      	movs	r2, #2
 800657a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006586:	617b      	str	r3, [r7, #20]
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8006590:	613b      	str	r3, [r7, #16]

  switch (ADCTrigger)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006598:	f000 8170 	beq.w	800687c <HAL_HRTIM_ADCTriggerConfig+0x3d0>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065a2:	f200 8190 	bhi.w	80068c6 <HAL_HRTIM_ADCTriggerConfig+0x41a>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065ac:	f000 8142 	beq.w	8006834 <HAL_HRTIM_ADCTriggerConfig+0x388>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065b6:	f200 8186 	bhi.w	80068c6 <HAL_HRTIM_ADCTriggerConfig+0x41a>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b80      	cmp	r3, #128	@ 0x80
 80065be:	f000 8114 	beq.w	80067ea <HAL_HRTIM_ADCTriggerConfig+0x33e>
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b80      	cmp	r3, #128	@ 0x80
 80065c6:	f200 817e 	bhi.w	80068c6 <HAL_HRTIM_ADCTriggerConfig+0x41a>
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d84b      	bhi.n	8006668 <HAL_HRTIM_ADCTriggerConfig+0x1bc>
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 8177 	beq.w	80068c6 <HAL_HRTIM_ADCTriggerConfig+0x41a>
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	3b01      	subs	r3, #1
 80065dc:	2b1f      	cmp	r3, #31
 80065de:	f200 8172 	bhi.w	80068c6 <HAL_HRTIM_ADCTriggerConfig+0x41a>
 80065e2:	a201      	add	r2, pc, #4	@ (adr r2, 80065e8 <HAL_HRTIM_ADCTriggerConfig+0x13c>)
 80065e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e8:	08006673 	.word	0x08006673
 80065ec:	08006697 	.word	0x08006697
 80065f0:	080068c7 	.word	0x080068c7
 80065f4:	080066bd 	.word	0x080066bd
 80065f8:	080068c7 	.word	0x080068c7
 80065fc:	080068c7 	.word	0x080068c7
 8006600:	080068c7 	.word	0x080068c7
 8006604:	080066e3 	.word	0x080066e3
 8006608:	080068c7 	.word	0x080068c7
 800660c:	080068c7 	.word	0x080068c7
 8006610:	080068c7 	.word	0x080068c7
 8006614:	080068c7 	.word	0x080068c7
 8006618:	080068c7 	.word	0x080068c7
 800661c:	080068c7 	.word	0x080068c7
 8006620:	080068c7 	.word	0x080068c7
 8006624:	08006709 	.word	0x08006709
 8006628:	080068c7 	.word	0x080068c7
 800662c:	080068c7 	.word	0x080068c7
 8006630:	080068c7 	.word	0x080068c7
 8006634:	080068c7 	.word	0x080068c7
 8006638:	080068c7 	.word	0x080068c7
 800663c:	080068c7 	.word	0x080068c7
 8006640:	080068c7 	.word	0x080068c7
 8006644:	080068c7 	.word	0x080068c7
 8006648:	080068c7 	.word	0x080068c7
 800664c:	080068c7 	.word	0x080068c7
 8006650:	080068c7 	.word	0x080068c7
 8006654:	080068c7 	.word	0x080068c7
 8006658:	080068c7 	.word	0x080068c7
 800665c:	080068c7 	.word	0x080068c7
 8006660:	080068c7 	.word	0x080068c7
 8006664:	08006751 	.word	0x08006751
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b40      	cmp	r3, #64	@ 0x40
 800666c:	f000 8098 	beq.w	80067a0 <HAL_HRTIM_ADCTriggerConfig+0x2f4>
 8006670:	e129      	b.n	80068c6 <HAL_HRTIM_ADCTriggerConfig+0x41a>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006678:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6852      	ldr	r2, [r2, #4]
 8006690:	f8c3 23bc 	str.w	r2, [r3, #956]	@ 0x3bc
      break;
 8006694:	e120      	b.n	80068d8 <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 800669c:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6852      	ldr	r2, [r2, #4]
 80066b6:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0
      break;
 80066ba:	e10d      	b.n	80068d8 <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80066c2:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	019b      	lsls	r3, r3, #6
 80066ca:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6852      	ldr	r2, [r2, #4]
 80066dc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
      break;
 80066e0:	e0fa      	b.n	80068d8 <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80066e8:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	025b      	lsls	r3, r3, #9
 80066f0:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6852      	ldr	r2, [r2, #4]
 8006702:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
      break;
 8006706:	e0e7      	b.n	80068d8 <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD5USRC);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	f023 0307 	bic.w	r3, r3, #7
 800670e:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	0c1b      	lsrs	r3, r3, #16
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 5 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 021f 	bic.w	r2, r2, #31
 8006730:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f003 021f 	and.w	r2, r3, #31
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 800674e:	e0c3      	b.n	80068d8 <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006756:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	0b1b      	lsrs	r3, r3, #12
 800675e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 6 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8006778:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	015b      	lsls	r3, r3, #5
 800678a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006798:	e09e      	b.n	80068d8 <HAL_HRTIM_ADCTriggerConfig+0x42c>
 800679a:	bf00      	nop
 800679c:	08011a24 	.word	0x08011a24
    }

  case HRTIM_ADCTRIGGER_7:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80067a6:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	0a1b      	lsrs	r3, r3, #8
 80067ae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 7 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 80067c8:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	029b      	lsls	r3, r3, #10
 80067da:	f403 42f8 	and.w	r2, r3, #31744	@ 0x7c00
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 80067e8:	e076      	b.n	80068d8 <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067f0:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	091b      	lsrs	r3, r3, #4
 80067f8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 8 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8006812:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	041b      	lsls	r3, r3, #16
 8006824:	f403 12f8 	and.w	r2, r3, #2031616	@ 0x1f0000
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8006832:	e051      	b.n	80068d8 <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800683a:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 9 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 7278 	bic.w	r2, r2, #65011712	@ 0x3e00000
 800685a:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	055b      	lsls	r3, r3, #21
 800686c:	f003 7278 	and.w	r2, r3, #65011712	@ 0x3e00000
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 800687a:	e02d      	b.n	80068d8 <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006882:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 10 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 80068a4:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	069b      	lsls	r3, r3, #26
 80068b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 80068c4:	e008      	b.n	80068d8 <HAL_HRTIM_ADCTriggerConfig+0x42c>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2207      	movs	r2, #7
 80068ca:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 80068d6:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b07      	cmp	r3, #7
 80068e2:	d101      	bne.n	80068e8 <HAL_HRTIM_ADCTriggerConfig+0x43c>
  {
     return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e016      	b.n	8006916 <HAL_HRTIM_ADCTriggerConfig+0x46a>
  }

  /* Update the HRTIM registers */
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2b0f      	cmp	r3, #15
 80068ec:	d805      	bhi.n	80068fa <HAL_HRTIM_ADCTriggerConfig+0x44e>
  {
   hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
 80068f8:	e004      	b.n	8006904 <HAL_HRTIM_ADCTriggerConfig+0x458>
  }
  else
  {
   hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop

08006920 <HAL_HRTIM_ADCPostScalerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCPostScalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             uint32_t Postscaler)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d021      	beq.n	8006976 <HAL_HRTIM_ADCPostScalerConfig+0x56>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b02      	cmp	r3, #2
 8006936:	d01e      	beq.n	8006976 <HAL_HRTIM_ADCPostScalerConfig+0x56>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b04      	cmp	r3, #4
 800693c:	d01b      	beq.n	8006976 <HAL_HRTIM_ADCPostScalerConfig+0x56>
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2b08      	cmp	r3, #8
 8006942:	d018      	beq.n	8006976 <HAL_HRTIM_ADCPostScalerConfig+0x56>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b10      	cmp	r3, #16
 8006948:	d015      	beq.n	8006976 <HAL_HRTIM_ADCPostScalerConfig+0x56>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b20      	cmp	r3, #32
 800694e:	d012      	beq.n	8006976 <HAL_HRTIM_ADCPostScalerConfig+0x56>
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b40      	cmp	r3, #64	@ 0x40
 8006954:	d00f      	beq.n	8006976 <HAL_HRTIM_ADCPostScalerConfig+0x56>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b80      	cmp	r3, #128	@ 0x80
 800695a:	d00c      	beq.n	8006976 <HAL_HRTIM_ADCPostScalerConfig+0x56>
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006962:	d008      	beq.n	8006976 <HAL_HRTIM_ADCPostScalerConfig+0x56>
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800696a:	d004      	beq.n	8006976 <HAL_HRTIM_ADCPostScalerConfig+0x56>
 800696c:	f241 2190 	movw	r1, #4752	@ 0x1290
 8006970:	48a2      	ldr	r0, [pc, #648]	@ (8006bfc <HAL_HRTIM_ADCPostScalerConfig+0x2dc>)
 8006972:	f7fb fcf7 	bl	8002364 <assert_failed>

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d101      	bne.n	8006986 <HAL_HRTIM_ADCPostScalerConfig+0x66>
  {
     return HAL_BUSY;
 8006982:	2302      	movs	r3, #2
 8006984:	e136      	b.n	8006bf4 <HAL_HRTIM_ADCPostScalerConfig+0x2d4>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_HRTIM_ADCPostScalerConfig+0x74>
 8006990:	2302      	movs	r3, #2
 8006992:	e12f      	b.n	8006bf4 <HAL_HRTIM_ADCPostScalerConfig+0x2d4>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  switch (ADCTrigger)
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069aa:	f000 80f9 	beq.w	8006ba0 <HAL_HRTIM_ADCPostScalerConfig+0x280>
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069b4:	f200 8104 	bhi.w	8006bc0 <HAL_HRTIM_ADCPostScalerConfig+0x2a0>
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069be:	f000 80df 	beq.w	8006b80 <HAL_HRTIM_ADCPostScalerConfig+0x260>
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069c8:	f200 80fa 	bhi.w	8006bc0 <HAL_HRTIM_ADCPostScalerConfig+0x2a0>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2b80      	cmp	r3, #128	@ 0x80
 80069d0:	f000 80c6 	beq.w	8006b60 <HAL_HRTIM_ADCPostScalerConfig+0x240>
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b80      	cmp	r3, #128	@ 0x80
 80069d8:	f200 80f2 	bhi.w	8006bc0 <HAL_HRTIM_ADCPostScalerConfig+0x2a0>
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	2b20      	cmp	r3, #32
 80069e0:	d84c      	bhi.n	8006a7c <HAL_HRTIM_ADCPostScalerConfig+0x15c>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 80eb 	beq.w	8006bc0 <HAL_HRTIM_ADCPostScalerConfig+0x2a0>
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	3b01      	subs	r3, #1
 80069ee:	2b1f      	cmp	r3, #31
 80069f0:	f200 80e6 	bhi.w	8006bc0 <HAL_HRTIM_ADCPostScalerConfig+0x2a0>
 80069f4:	a201      	add	r2, pc, #4	@ (adr r2, 80069fc <HAL_HRTIM_ADCPostScalerConfig+0xdc>)
 80069f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fa:	bf00      	nop
 80069fc:	08006a85 	.word	0x08006a85
 8006a00:	08006aa3 	.word	0x08006aa3
 8006a04:	08006bc1 	.word	0x08006bc1
 8006a08:	08006ac3 	.word	0x08006ac3
 8006a0c:	08006bc1 	.word	0x08006bc1
 8006a10:	08006bc1 	.word	0x08006bc1
 8006a14:	08006bc1 	.word	0x08006bc1
 8006a18:	08006ae3 	.word	0x08006ae3
 8006a1c:	08006bc1 	.word	0x08006bc1
 8006a20:	08006bc1 	.word	0x08006bc1
 8006a24:	08006bc1 	.word	0x08006bc1
 8006a28:	08006bc1 	.word	0x08006bc1
 8006a2c:	08006bc1 	.word	0x08006bc1
 8006a30:	08006bc1 	.word	0x08006bc1
 8006a34:	08006bc1 	.word	0x08006bc1
 8006a38:	08006b03 	.word	0x08006b03
 8006a3c:	08006bc1 	.word	0x08006bc1
 8006a40:	08006bc1 	.word	0x08006bc1
 8006a44:	08006bc1 	.word	0x08006bc1
 8006a48:	08006bc1 	.word	0x08006bc1
 8006a4c:	08006bc1 	.word	0x08006bc1
 8006a50:	08006bc1 	.word	0x08006bc1
 8006a54:	08006bc1 	.word	0x08006bc1
 8006a58:	08006bc1 	.word	0x08006bc1
 8006a5c:	08006bc1 	.word	0x08006bc1
 8006a60:	08006bc1 	.word	0x08006bc1
 8006a64:	08006bc1 	.word	0x08006bc1
 8006a68:	08006bc1 	.word	0x08006bc1
 8006a6c:	08006bc1 	.word	0x08006bc1
 8006a70:	08006bc1 	.word	0x08006bc1
 8006a74:	08006bc1 	.word	0x08006bc1
 8006a78:	08006b23 	.word	0x08006b23
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2b40      	cmp	r3, #64	@ 0x40
 8006a80:	d05e      	beq.n	8006b40 <HAL_HRTIM_ADCPostScalerConfig+0x220>
 8006a82:	e09d      	b.n	8006bc0 <HAL_HRTIM_ADCPostScalerConfig+0x2a0>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006a8c:	f023 011f 	bic.w	r1, r3, #31
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f003 021f 	and.w	r2, r3, #31
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8006aa0:	e097      	b.n	8006bd2 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006aaa:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	019b      	lsls	r3, r3, #6
 8006ab2:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8006ac0:	e087      	b.n	8006bd2 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006aca:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	031b      	lsls	r3, r3, #12
 8006ad2:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8006ae0:	e077      	b.n	8006bd2 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006aea:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	049b      	lsls	r3, r3, #18
 8006af2:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8006b00:	e067      	b.n	8006bd2 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006b0a:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	061b      	lsls	r3, r3, #24
 8006b12:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8006b20:	e057      	b.n	8006bd2 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006b2a:	f023 011f 	bic.w	r1, r3, #31
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f003 021f 	and.w	r2, r3, #31
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8006b3e:	e048      	b.n	8006bd2 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006b48:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	019b      	lsls	r3, r3, #6
 8006b50:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8006b5e:	e038      	b.n	8006bd2 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006b68:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	031b      	lsls	r3, r3, #12
 8006b70:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8006b7e:	e028      	b.n	8006bd2 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006b88:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	049b      	lsls	r3, r3, #18
 8006b90:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8006b9e:	e018      	b.n	8006bd2 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006ba8:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	061b      	lsls	r3, r3, #24
 8006bb0:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 8006bbe:	e008      	b.n	8006bd2 <HAL_HRTIM_ADCPostScalerConfig+0x2b2>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2207      	movs	r2, #7
 8006bc4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 8006bd0:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b07      	cmp	r3, #7
 8006bdc:	d101      	bne.n	8006be2 <HAL_HRTIM_ADCPostScalerConfig+0x2c2>
  {
     return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e008      	b.n	8006bf4 <HAL_HRTIM_ADCPostScalerConfig+0x2d4>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	08011a24 	.word	0x08011a24

08006c00 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
    /* Check parameters */
    assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b06      	cmp	r3, #6
 8006c10:	d016      	beq.n	8006c40 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d013      	beq.n	8006c40 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d010      	beq.n	8006c40 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d00d      	beq.n	8006c40 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d00a      	beq.n	8006c40 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	d007      	beq.n	8006c40 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b05      	cmp	r3, #5
 8006c34:	d004      	beq.n	8006c40 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006c36:	f241 31cc 	movw	r1, #5068	@ 0x13cc
 8006c3a:	4847      	ldr	r0, [pc, #284]	@ (8006d58 <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006c3c:	f7fb fb92 	bl	8002364 <assert_failed>
    /* Relevant for all A..F HRTIM timers */
    assert_param(IS_HRTIM_TIMERUPDOWNMODE(pTimerCtl->UpDownMode));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d008      	beq.n	8006c5a <HAL_HRTIM_WaveformTimerControl+0x5a>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d004      	beq.n	8006c5a <HAL_HRTIM_WaveformTimerControl+0x5a>
 8006c50:	f241 31ce 	movw	r1, #5070	@ 0x13ce
 8006c54:	4840      	ldr	r0, [pc, #256]	@ (8006d58 <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006c56:	f7fb fb85 	bl	8002364 <assert_failed>
    assert_param(IS_HRTIM_TIMERTRGHLFMODE(pTimerCtl->TrigHalf));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d009      	beq.n	8006c76 <HAL_HRTIM_WaveformTimerControl+0x76>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c6a:	d004      	beq.n	8006c76 <HAL_HRTIM_WaveformTimerControl+0x76>
 8006c6c:	f241 31cf 	movw	r1, #5071	@ 0x13cf
 8006c70:	4839      	ldr	r0, [pc, #228]	@ (8006d58 <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006c72:	f7fb fb77 	bl	8002364 <assert_failed>
    assert_param(IS_HRTIM_TIMERGTCMP3(pTimerCtl->GreaterCMP3));
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d009      	beq.n	8006c92 <HAL_HRTIM_WaveformTimerControl+0x92>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c86:	d004      	beq.n	8006c92 <HAL_HRTIM_WaveformTimerControl+0x92>
 8006c88:	f241 31d0 	movw	r1, #5072	@ 0x13d0
 8006c8c:	4832      	ldr	r0, [pc, #200]	@ (8006d58 <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006c8e:	f7fb fb69 	bl	8002364 <assert_failed>
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d009      	beq.n	8006cae <HAL_HRTIM_WaveformTimerControl+0xae>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ca2:	d004      	beq.n	8006cae <HAL_HRTIM_WaveformTimerControl+0xae>
 8006ca4:	f241 31d1 	movw	r1, #5073	@ 0x13d1
 8006ca8:	482b      	ldr	r0, [pc, #172]	@ (8006d58 <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006caa:	f7fb fb5b 	bl	8002364 <assert_failed>
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d008      	beq.n	8006cc8 <HAL_HRTIM_WaveformTimerControl+0xc8>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d004      	beq.n	8006cc8 <HAL_HRTIM_WaveformTimerControl+0xc8>
 8006cbe:	f241 31d2 	movw	r1, #5074	@ 0x13d2
 8006cc2:	4825      	ldr	r0, [pc, #148]	@ (8006d58 <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006cc4:	f7fb fb4e 	bl	8002364 <assert_failed>
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d008      	beq.n	8006ce2 <HAL_HRTIM_WaveformTimerControl+0xe2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d004      	beq.n	8006ce2 <HAL_HRTIM_WaveformTimerControl+0xe2>
 8006cd8:	f241 31d3 	movw	r1, #5075	@ 0x13d3
 8006cdc:	481e      	ldr	r0, [pc, #120]	@ (8006d58 <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006cde:	f7fb fb41 	bl	8002364 <assert_failed>
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d008      	beq.n	8006cfc <HAL_HRTIM_WaveformTimerControl+0xfc>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d004      	beq.n	8006cfc <HAL_HRTIM_WaveformTimerControl+0xfc>
 8006cf2:	f241 31d4 	movw	r1, #5076	@ 0x13d4
 8006cf6:	4818      	ldr	r0, [pc, #96]	@ (8006d58 <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006cf8:	f7fb fb34 	bl	8002364 <assert_failed>

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d101      	bne.n	8006d0c <HAL_HRTIM_WaveformTimerControl+0x10c>
    {
       return HAL_BUSY;
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e020      	b.n	8006d4e <HAL_HRTIM_WaveformTimerControl+0x14e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d101      	bne.n	8006d1a <HAL_HRTIM_WaveformTimerControl+0x11a>
 8006d16:	2302      	movs	r3, #2
 8006d18:	e019      	b.n	8006d4e <HAL_HRTIM_WaveformTimerControl+0x14e>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2202      	movs	r2, #2
 8006d26:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	68b9      	ldr	r1, [r7, #8]
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 f931 	bl	8006f96 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8006d34:	68b9      	ldr	r1, [r7, #8]
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 fa24 	bl	8007184 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	08011a24 	.word	0x08011a24

08006d5c <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8006e82:	bf00      	nop
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_HRTIM_ErrorCallback>:
  * @brief  Callback function invoked when a DMA error occurs
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_ErrorCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_ErrorCallback could be implemented in the user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f023 0307 	bic.w	r3, r3, #7
 8006ed0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f023 0318 	bic.w	r3, r3, #24
 8006ee2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	6812      	ldr	r2, [r2, #0]
 8006efe:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	6852      	ldr	r2, [r2, #4]
 8006f08:	619a      	str	r2, [r3, #24]
}
 8006f0a:	bf00      	nop
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b087      	sub	sp, #28
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	01db      	lsls	r3, r3, #7
 8006f2c:	4413      	add	r3, r2
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f023 0307 	bic.w	r3, r3, #7
 8006f38:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f023 0318 	bic.w	r3, r3, #24
 8006f4a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	01db      	lsls	r3, r3, #7
 8006f60:	4413      	add	r3, r2
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6819      	ldr	r1, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	01db      	lsls	r3, r3, #7
 8006f72:	440b      	add	r3, r1
 8006f74:	3394      	adds	r3, #148	@ 0x94
 8006f76:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6819      	ldr	r1, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	01db      	lsls	r3, r3, #7
 8006f84:	440b      	add	r3, r1
 8006f86:	3398      	adds	r3, #152	@ 0x98
 8006f88:	601a      	str	r2, [r3, #0]
}
 8006f8a:	bf00      	nop
 8006f8c:	371c      	adds	r7, #28
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b087      	sub	sp, #28
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	60f8      	str	r0, [r7, #12]
 8006f9e:	60b9      	str	r1, [r7, #8]
 8006fa0:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	01db      	lsls	r3, r3, #7
 8006faa:	4413      	add	r3, r2
 8006fac:	33ec      	adds	r3, #236	@ 0xec
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f023 0310 	bic.w	r3, r3, #16
 8006fb8:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006fcc:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fde:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ff0:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d11a      	bne.n	800703a <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f023 0304 	bic.w	r3, r3, #4
 800700a:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f023 0302 	bic.w	r3, r3, #2
 800701c:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	4313      	orrs	r3, r2
 8007026:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f023 0301 	bic.w	r3, r3, #1
 800702e:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	01db      	lsls	r3, r3, #7
 8007042:	4413      	add	r3, r2
 8007044:	33ec      	adds	r3, #236	@ 0xec
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	601a      	str	r2, [r3, #0]

}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
	...

08007058 <HRTIM_GetDMAHandleFromTimerIdx>:
  return dma_request;
}

static DMA_HandleTypeDef * HRTIM_GetDMAHandleFromTimerIdx(const HRTIM_HandleTypeDef * hhrtim,
                                                          uint32_t TimerIdx)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  DMA_HandleTypeDef * hdma = (DMA_HandleTypeDef *)NULL;
 8007062:	2300      	movs	r3, #0
 8007064:	60fb      	str	r3, [r7, #12]

  switch (TimerIdx)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b06      	cmp	r3, #6
 800706a:	d834      	bhi.n	80070d6 <HRTIM_GetDMAHandleFromTimerIdx+0x7e>
 800706c:	a201      	add	r2, pc, #4	@ (adr r2, 8007074 <HRTIM_GetDMAHandleFromTimerIdx+0x1c>)
 800706e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007072:	bf00      	nop
 8007074:	0800709b 	.word	0x0800709b
 8007078:	080070a5 	.word	0x080070a5
 800707c:	080070af 	.word	0x080070af
 8007080:	080070b9 	.word	0x080070b9
 8007084:	080070c3 	.word	0x080070c3
 8007088:	080070cd 	.word	0x080070cd
 800708c:	08007091 	.word	0x08007091
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hdma = hhrtim->hdmaMaster;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007096:	60fb      	str	r3, [r7, #12]
      break;
 8007098:	e01e      	b.n	80070d8 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hdma = hhrtim->hdmaTimerA;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80070a0:	60fb      	str	r3, [r7, #12]
      break;
 80070a2:	e019      	b.n	80070d8 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hdma = hhrtim->hdmaTimerB;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070aa:	60fb      	str	r3, [r7, #12]
      break;
 80070ac:	e014      	b.n	80070d8 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hdma = hhrtim->hdmaTimerC;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80070b4:	60fb      	str	r3, [r7, #12]
      break;
 80070b6:	e00f      	b.n	80070d8 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hdma = hhrtim->hdmaTimerD;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070be:	60fb      	str	r3, [r7, #12]
      break;
 80070c0:	e00a      	b.n	80070d8 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hdma = hhrtim->hdmaTimerE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070c8:	60fb      	str	r3, [r7, #12]
      break;
 80070ca:	e005      	b.n	80070d8 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hdma = hhrtim->hdmaTimerF;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80070d2:	60fb      	str	r3, [r7, #12]
      break;
 80070d4:	e000      	b.n	80070d8 <HRTIM_GetDMAHandleFromTimerIdx+0x80>
    }

  default:
    break;
 80070d6:	bf00      	nop
  }

  return hdma;
 80070d8:	68fb      	ldr	r3, [r7, #12]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop

080070e8 <GetTimerIdxFromDMAHandle>:

static uint32_t GetTimerIdxFromDMAHandle(const HRTIM_HandleTypeDef * hhrtim,
                                         const DMA_HandleTypeDef * hdma)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t timed_idx = 0xFFFFFFFFU;
 80070f2:	f04f 33ff 	mov.w	r3, #4294967295
 80070f6:	60fb      	str	r3, [r7, #12]

  if (hdma == hhrtim->hdmaMaster)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	429a      	cmp	r2, r3
 8007102:	d102      	bne.n	800710a <GetTimerIdxFromDMAHandle+0x22>
  {
    timed_idx = HRTIM_TIMERINDEX_MASTER;
 8007104:	2306      	movs	r3, #6
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	e034      	b.n	8007174 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerA)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d102      	bne.n	800711c <GetTimerIdxFromDMAHandle+0x34>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_A;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	e02b      	b.n	8007174 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerB)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	429a      	cmp	r2, r3
 8007126:	d102      	bne.n	800712e <GetTimerIdxFromDMAHandle+0x46>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_B;
 8007128:	2301      	movs	r3, #1
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	e022      	b.n	8007174 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerC)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	429a      	cmp	r2, r3
 8007138:	d102      	bne.n	8007140 <GetTimerIdxFromDMAHandle+0x58>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_C;
 800713a:	2302      	movs	r3, #2
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	e019      	b.n	8007174 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerD)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	429a      	cmp	r2, r3
 800714a:	d102      	bne.n	8007152 <GetTimerIdxFromDMAHandle+0x6a>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_D;
 800714c:	2303      	movs	r3, #3
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	e010      	b.n	8007174 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	429a      	cmp	r2, r3
 800715c:	d102      	bne.n	8007164 <GetTimerIdxFromDMAHandle+0x7c>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_E;
 800715e:	2304      	movs	r3, #4
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	e007      	b.n	8007174 <GetTimerIdxFromDMAHandle+0x8c>
  }
  else if (hdma == hhrtim->hdmaTimerF)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	429a      	cmp	r2, r3
 800716e:	d101      	bne.n	8007174 <GetTimerIdxFromDMAHandle+0x8c>
  {
    timed_idx = HRTIM_TIMERINDEX_TIMER_F;
 8007170:	2305      	movs	r3, #5
 8007172:	60fb      	str	r3, [r7, #12]
  }
  else
  {
    /* nothing to do */
  }
  return timed_idx;
 8007174:	68fb      	ldr	r3, [r7, #12]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
	...

08007184 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b06      	cmp	r3, #6
 8007192:	d85e      	bhi.n	8007252 <HRTIM_ForceRegistersUpdate+0xce>
 8007194:	a201      	add	r2, pc, #4	@ (adr r2, 800719c <HRTIM_ForceRegistersUpdate+0x18>)
 8007196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719a:	bf00      	nop
 800719c:	080071cf 	.word	0x080071cf
 80071a0:	080071e5 	.word	0x080071e5
 80071a4:	080071fb 	.word	0x080071fb
 80071a8:	08007211 	.word	0x08007211
 80071ac:	08007227 	.word	0x08007227
 80071b0:	0800723d 	.word	0x0800723d
 80071b4:	080071b9 	.word	0x080071b9
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f042 0201 	orr.w	r2, r2, #1
 80071c8:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80071cc:	e042      	b.n	8007254 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0202 	orr.w	r2, r2, #2
 80071de:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80071e2:	e037      	b.n	8007254 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f042 0204 	orr.w	r2, r2, #4
 80071f4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80071f8:	e02c      	b.n	8007254 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0208 	orr.w	r2, r2, #8
 800720a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800720e:	e021      	b.n	8007254 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f042 0210 	orr.w	r2, r2, #16
 8007220:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8007224:	e016      	b.n	8007254 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0220 	orr.w	r2, r2, #32
 8007236:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800723a:	e00b      	b.n	8007254 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800724c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8007250:	e000      	b.n	8007254 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8007252:	bf00      	nop
  }
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HRTIM_DMAMasterCplt>:
  * @brief  DMA callback invoked upon master timer related DMA request completion
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void HRTIM_DMAMasterCplt(DMA_HandleTypeDef *hdma)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726c:	60fb      	str	r3, [r7, #12]

  if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP1) != (uint32_t)RESET)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d004      	beq.n	8007286 <HRTIM_DMAMasterCplt+0x26>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800727c:	2106      	movs	r1, #6
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7ff fd8c 	bl	8006d9c <HAL_HRTIM_Compare1EventCallback>
  }
  else
  {
    /* nothing to do */
  }
}
 8007284:	e045      	b.n	8007312 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP2) != (uint32_t)RESET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d004      	beq.n	800729e <HRTIM_DMAMasterCplt+0x3e>
    HAL_HRTIM_Compare2EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8007294:	2106      	movs	r1, #6
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f7ff fd8b 	bl	8006db2 <HAL_HRTIM_Compare2EventCallback>
}
 800729c:	e039      	b.n	8007312 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP3) != (uint32_t)RESET)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d004      	beq.n	80072b6 <HRTIM_DMAMasterCplt+0x56>
    HAL_HRTIM_Compare3EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 80072ac:	2106      	movs	r1, #6
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f7ff fd8a 	bl	8006dc8 <HAL_HRTIM_Compare3EventCallback>
}
 80072b4:	e02d      	b.n	8007312 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP4) != (uint32_t)RESET)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d004      	beq.n	80072ce <HRTIM_DMAMasterCplt+0x6e>
    HAL_HRTIM_Compare4EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 80072c4:	2106      	movs	r1, #6
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f7ff fd89 	bl	8006dde <HAL_HRTIM_Compare4EventCallback>
}
 80072cc:	e021      	b.n	8007312 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_SYNC) != (uint32_t)RESET)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <HRTIM_DMAMasterCplt+0x84>
    HAL_HRTIM_SynchronizationEventCallback(hrtim);
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f7ff fd3d 	bl	8006d5c <HAL_HRTIM_SynchronizationEventCallback>
}
 80072e2:	e016      	b.n	8007312 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MUPD) != (uint32_t)RESET)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <HRTIM_DMAMasterCplt+0x9c>
    HAL_HRTIM_RegistersUpdateCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 80072f2:	2106      	movs	r1, #6
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f7ff fd3b 	bl	8006d70 <HAL_HRTIM_RegistersUpdateCallback>
}
 80072fa:	e00a      	b.n	8007312 <HRTIM_DMAMasterCplt+0xb2>
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MREP) != (uint32_t)RESET)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <HRTIM_DMAMasterCplt+0xb2>
    HAL_HRTIM_RepetitionEventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800730a:	2106      	movs	r1, #6
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f7ff fd3a 	bl	8006d86 <HAL_HRTIM_RepetitionEventCallback>
}
 8007312:	bf00      	nop
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <HRTIM_DMATimerxCplt>:
  * @brief  DMA callback invoked upon timer A..F related DMA request completion
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void HRTIM_DMATimerxCplt(DMA_HandleTypeDef *hdma)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;

  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007326:	60fb      	str	r3, [r7, #12]

  timer_idx = (uint8_t)GetTimerIdxFromDMAHandle(hrtim, hdma);
 8007328:	6879      	ldr	r1, [r7, #4]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f7ff fedc 	bl	80070e8 <GetTimerIdxFromDMAHandle>
 8007330:	4603      	mov	r3, r0
 8007332:	72fb      	strb	r3, [r7, #11]

  if ( !IS_HRTIM_TIMING_UNIT(timer_idx) ) {return;}
 8007334:	7afb      	ldrb	r3, [r7, #11]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00f      	beq.n	800735a <HRTIM_DMATimerxCplt+0x40>
 800733a:	7afb      	ldrb	r3, [r7, #11]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d00c      	beq.n	800735a <HRTIM_DMATimerxCplt+0x40>
 8007340:	7afb      	ldrb	r3, [r7, #11]
 8007342:	2b02      	cmp	r3, #2
 8007344:	d009      	beq.n	800735a <HRTIM_DMATimerxCplt+0x40>
 8007346:	7afb      	ldrb	r3, [r7, #11]
 8007348:	2b03      	cmp	r3, #3
 800734a:	d006      	beq.n	800735a <HRTIM_DMATimerxCplt+0x40>
 800734c:	7afb      	ldrb	r3, [r7, #11]
 800734e:	2b04      	cmp	r3, #4
 8007350:	d003      	beq.n	800735a <HRTIM_DMATimerxCplt+0x40>
 8007352:	7afb      	ldrb	r3, [r7, #11]
 8007354:	2b05      	cmp	r3, #5
 8007356:	f040 80ee 	bne.w	8007536 <HRTIM_DMATimerxCplt+0x21c>

  if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP1) != (uint32_t)RESET)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	7afb      	ldrb	r3, [r7, #11]
 8007360:	01db      	lsls	r3, r3, #7
 8007362:	4413      	add	r3, r2
 8007364:	338c      	adds	r3, #140	@ 0x8c
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d005      	beq.n	800737c <HRTIM_DMATimerxCplt+0x62>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, timer_idx);
 8007370:	7afb      	ldrb	r3, [r7, #11]
 8007372:	4619      	mov	r1, r3
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f7ff fd11 	bl	8006d9c <HAL_HRTIM_Compare1EventCallback>
 800737a:	e0dd      	b.n	8007538 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP2) != (uint32_t)RESET)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	7afb      	ldrb	r3, [r7, #11]
 8007382:	01db      	lsls	r3, r3, #7
 8007384:	4413      	add	r3, r2
 8007386:	338c      	adds	r3, #140	@ 0x8c
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d005      	beq.n	800739e <HRTIM_DMATimerxCplt+0x84>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare2EventCallback(hrtim, timer_idx);
 8007392:	7afb      	ldrb	r3, [r7, #11]
 8007394:	4619      	mov	r1, r3
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f7ff fd0b 	bl	8006db2 <HAL_HRTIM_Compare2EventCallback>
 800739c:	e0cc      	b.n	8007538 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP3) != (uint32_t)RESET)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	7afb      	ldrb	r3, [r7, #11]
 80073a4:	01db      	lsls	r3, r3, #7
 80073a6:	4413      	add	r3, r2
 80073a8:	338c      	adds	r3, #140	@ 0x8c
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <HRTIM_DMATimerxCplt+0xa6>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare3EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare3EventCallback(hrtim, timer_idx);
 80073b4:	7afb      	ldrb	r3, [r7, #11]
 80073b6:	4619      	mov	r1, r3
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f7ff fd05 	bl	8006dc8 <HAL_HRTIM_Compare3EventCallback>
 80073be:	e0bb      	b.n	8007538 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP4) != (uint32_t)RESET)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	7afb      	ldrb	r3, [r7, #11]
 80073c6:	01db      	lsls	r3, r3, #7
 80073c8:	4413      	add	r3, r2
 80073ca:	338c      	adds	r3, #140	@ 0x8c
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <HRTIM_DMATimerxCplt+0xc8>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Compare4EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare4EventCallback(hrtim, timer_idx);
 80073d6:	7afb      	ldrb	r3, [r7, #11]
 80073d8:	4619      	mov	r1, r3
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7ff fcff 	bl	8006dde <HAL_HRTIM_Compare4EventCallback>
 80073e0:	e0aa      	b.n	8007538 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_UPD) != (uint32_t)RESET)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	01db      	lsls	r3, r3, #7
 80073ea:	4413      	add	r3, r2
 80073ec:	338c      	adds	r3, #140	@ 0x8c
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d005      	beq.n	8007404 <HRTIM_DMATimerxCplt+0xea>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->RegistersUpdateCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RegistersUpdateCallback(hrtim, timer_idx);
 80073f8:	7afb      	ldrb	r3, [r7, #11]
 80073fa:	4619      	mov	r1, r3
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f7ff fcb7 	bl	8006d70 <HAL_HRTIM_RegistersUpdateCallback>
 8007402:	e099      	b.n	8007538 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT1) != (uint32_t)RESET)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	7afb      	ldrb	r3, [r7, #11]
 800740a:	01db      	lsls	r3, r3, #7
 800740c:	4413      	add	r3, r2
 800740e:	338c      	adds	r3, #140	@ 0x8c
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <HRTIM_DMATimerxCplt+0x10c>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Capture1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture1EventCallback(hrtim, timer_idx);
 800741a:	7afb      	ldrb	r3, [r7, #11]
 800741c:	4619      	mov	r1, r3
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f7ff fce8 	bl	8006df4 <HAL_HRTIM_Capture1EventCallback>
 8007424:	e088      	b.n	8007538 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT2) != (uint32_t)RESET)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	7afb      	ldrb	r3, [r7, #11]
 800742c:	01db      	lsls	r3, r3, #7
 800742e:	4413      	add	r3, r2
 8007430:	338c      	adds	r3, #140	@ 0x8c
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d005      	beq.n	8007448 <HRTIM_DMATimerxCplt+0x12e>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Capture2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture2EventCallback(hrtim, timer_idx);
 800743c:	7afb      	ldrb	r3, [r7, #11]
 800743e:	4619      	mov	r1, r3
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f7ff fce2 	bl	8006e0a <HAL_HRTIM_Capture2EventCallback>
 8007446:	e077      	b.n	8007538 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET1) != (uint32_t)RESET)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	7afb      	ldrb	r3, [r7, #11]
 800744e:	01db      	lsls	r3, r3, #7
 8007450:	4413      	add	r3, r2
 8007452:	338c      	adds	r3, #140	@ 0x8c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d005      	beq.n	800746a <HRTIM_DMATimerxCplt+0x150>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output1SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1SetCallback(hrtim, timer_idx);
 800745e:	7afb      	ldrb	r3, [r7, #11]
 8007460:	4619      	mov	r1, r3
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f7ff fcf2 	bl	8006e4c <HAL_HRTIM_Output1SetCallback>
 8007468:	e066      	b.n	8007538 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST1) != (uint32_t)RESET)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	7afb      	ldrb	r3, [r7, #11]
 8007470:	01db      	lsls	r3, r3, #7
 8007472:	4413      	add	r3, r2
 8007474:	338c      	adds	r3, #140	@ 0x8c
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HRTIM_DMATimerxCplt+0x172>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output1ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1ResetCallback(hrtim, timer_idx);
 8007480:	7afb      	ldrb	r3, [r7, #11]
 8007482:	4619      	mov	r1, r3
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f7ff fcec 	bl	8006e62 <HAL_HRTIM_Output1ResetCallback>
 800748a:	e055      	b.n	8007538 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET2) != (uint32_t)RESET)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	7afb      	ldrb	r3, [r7, #11]
 8007492:	01db      	lsls	r3, r3, #7
 8007494:	4413      	add	r3, r2
 8007496:	338c      	adds	r3, #140	@ 0x8c
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <HRTIM_DMATimerxCplt+0x194>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output2SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2SetCallback(hrtim, timer_idx);
 80074a2:	7afb      	ldrb	r3, [r7, #11]
 80074a4:	4619      	mov	r1, r3
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f7ff fce6 	bl	8006e78 <HAL_HRTIM_Output2SetCallback>
 80074ac:	e044      	b.n	8007538 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST2) != (uint32_t)RESET)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	7afb      	ldrb	r3, [r7, #11]
 80074b4:	01db      	lsls	r3, r3, #7
 80074b6:	4413      	add	r3, r2
 80074b8:	338c      	adds	r3, #140	@ 0x8c
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <HRTIM_DMATimerxCplt+0x1b6>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->Output2ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2ResetCallback(hrtim, timer_idx);
 80074c4:	7afb      	ldrb	r3, [r7, #11]
 80074c6:	4619      	mov	r1, r3
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f7ff fce0 	bl	8006e8e <HAL_HRTIM_Output2ResetCallback>
 80074ce:	e033      	b.n	8007538 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST) != (uint32_t)RESET)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	7afb      	ldrb	r3, [r7, #11]
 80074d6:	01db      	lsls	r3, r3, #7
 80074d8:	4413      	add	r3, r2
 80074da:	338c      	adds	r3, #140	@ 0x8c
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d005      	beq.n	80074f2 <HRTIM_DMATimerxCplt+0x1d8>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->CounterResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_CounterResetCallback(hrtim, timer_idx);
 80074e6:	7afb      	ldrb	r3, [r7, #11]
 80074e8:	4619      	mov	r1, r3
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f7ff fca3 	bl	8006e36 <HAL_HRTIM_CounterResetCallback>
 80074f0:	e022      	b.n	8007538 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_DLYPRT) != (uint32_t)RESET)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	7afb      	ldrb	r3, [r7, #11]
 80074f8:	01db      	lsls	r3, r3, #7
 80074fa:	4413      	add	r3, r2
 80074fc:	338c      	adds	r3, #140	@ 0x8c
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d005      	beq.n	8007514 <HRTIM_DMATimerxCplt+0x1fa>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->DelayedProtectionCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_DelayedProtectionCallback(hrtim, timer_idx);
 8007508:	7afb      	ldrb	r3, [r7, #11]
 800750a:	4619      	mov	r1, r3
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f7ff fc87 	bl	8006e20 <HAL_HRTIM_DelayedProtectionCallback>
 8007512:	e011      	b.n	8007538 <HRTIM_DMATimerxCplt+0x21e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_REP) != (uint32_t)RESET)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	7afb      	ldrb	r3, [r7, #11]
 800751a:	01db      	lsls	r3, r3, #7
 800751c:	4413      	add	r3, r2
 800751e:	338c      	adds	r3, #140	@ 0x8c
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d006      	beq.n	8007538 <HRTIM_DMATimerxCplt+0x21e>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->RepetitionEventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RepetitionEventCallback(hrtim, timer_idx);
 800752a:	7afb      	ldrb	r3, [r7, #11]
 800752c:	4619      	mov	r1, r3
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f7ff fc29 	bl	8006d86 <HAL_HRTIM_RepetitionEventCallback>
 8007534:	e000      	b.n	8007538 <HRTIM_DMATimerxCplt+0x21e>
  if ( !IS_HRTIM_TIMING_UNIT(timer_idx) ) {return;}
 8007536:	bf00      	nop
  }
  else
  {
    /* nothing to do */
  }
}
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <HRTIM_DMAError>:
* @brief  DMA error callback
* @param  hdma pointer to DMA handle.
* @retval None
*/
static void HRTIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->ErrorCallback(hrtim);
#else
  HAL_HRTIM_ErrorCallback(hrtim);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7ff fca9 	bl	8006ea4 <HAL_HRTIM_ErrorCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
}
 8007552:	bf00      	nop
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e0c9      	b.n	8007702 <HAL_PCD_Init+0x1a6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a66      	ldr	r2, [pc, #408]	@ (800770c <HAL_PCD_Init+0x1b0>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d003      	beq.n	8007580 <HAL_PCD_Init+0x24>
 8007578:	2187      	movs	r1, #135	@ 0x87
 800757a:	4865      	ldr	r0, [pc, #404]	@ (8007710 <HAL_PCD_Init+0x1b4>)
 800757c:	f7fa fef2 	bl	8002364 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d106      	bne.n	800759a <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f009 f877 	bl	8010688 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2203      	movs	r2, #3
 800759e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f004 fec1 	bl	800c32e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075ac:	2300      	movs	r3, #0
 80075ae:	73fb      	strb	r3, [r7, #15]
 80075b0:	e03e      	b.n	8007630 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80075b2:	7bfa      	ldrb	r2, [r7, #15]
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	440b      	add	r3, r1
 80075c0:	3311      	adds	r3, #17
 80075c2:	2201      	movs	r2, #1
 80075c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80075c6:	7bfa      	ldrb	r2, [r7, #15]
 80075c8:	6879      	ldr	r1, [r7, #4]
 80075ca:	4613      	mov	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	440b      	add	r3, r1
 80075d4:	3310      	adds	r3, #16
 80075d6:	7bfa      	ldrb	r2, [r7, #15]
 80075d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80075da:	7bfa      	ldrb	r2, [r7, #15]
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	00db      	lsls	r3, r3, #3
 80075e6:	440b      	add	r3, r1
 80075e8:	3313      	adds	r3, #19
 80075ea:	2200      	movs	r2, #0
 80075ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80075ee:	7bfa      	ldrb	r2, [r7, #15]
 80075f0:	6879      	ldr	r1, [r7, #4]
 80075f2:	4613      	mov	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	440b      	add	r3, r1
 80075fc:	3320      	adds	r3, #32
 80075fe:	2200      	movs	r2, #0
 8007600:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007602:	7bfa      	ldrb	r2, [r7, #15]
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	00db      	lsls	r3, r3, #3
 800760e:	440b      	add	r3, r1
 8007610:	3324      	adds	r3, #36	@ 0x24
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	4613      	mov	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	440b      	add	r3, r1
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	3301      	adds	r3, #1
 800762e:	73fb      	strb	r3, [r7, #15]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	791b      	ldrb	r3, [r3, #4]
 8007634:	7bfa      	ldrb	r2, [r7, #15]
 8007636:	429a      	cmp	r2, r3
 8007638:	d3bb      	bcc.n	80075b2 <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800763a:	2300      	movs	r3, #0
 800763c:	73fb      	strb	r3, [r7, #15]
 800763e:	e044      	b.n	80076ca <HAL_PCD_Init+0x16e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007640:	7bfa      	ldrb	r2, [r7, #15]
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	440b      	add	r3, r1
 800764e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8007652:	2200      	movs	r2, #0
 8007654:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007656:	7bfa      	ldrb	r2, [r7, #15]
 8007658:	6879      	ldr	r1, [r7, #4]
 800765a:	4613      	mov	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	440b      	add	r3, r1
 8007664:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007668:	7bfa      	ldrb	r2, [r7, #15]
 800766a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800766c:	7bfa      	ldrb	r2, [r7, #15]
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	440b      	add	r3, r1
 800767a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800767e:	2200      	movs	r2, #0
 8007680:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007682:	7bfa      	ldrb	r2, [r7, #15]
 8007684:	6879      	ldr	r1, [r7, #4]
 8007686:	4613      	mov	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	00db      	lsls	r3, r3, #3
 800768e:	440b      	add	r3, r1
 8007690:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007698:	7bfa      	ldrb	r2, [r7, #15]
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	00db      	lsls	r3, r3, #3
 80076a4:	440b      	add	r3, r1
 80076a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80076ae:	7bfa      	ldrb	r2, [r7, #15]
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	4613      	mov	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	440b      	add	r3, r1
 80076bc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80076c0:	2200      	movs	r2, #0
 80076c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
 80076c6:	3301      	adds	r3, #1
 80076c8:	73fb      	strb	r3, [r7, #15]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	791b      	ldrb	r3, [r3, #4]
 80076ce:	7bfa      	ldrb	r2, [r7, #15]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d3b5      	bcc.n	8007640 <HAL_PCD_Init+0xe4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6818      	ldr	r0, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3304      	adds	r3, #4
 80076dc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80076e0:	f004 fe40 	bl	800c364 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	7a9b      	ldrb	r3, [r3, #10]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d102      	bne.n	8007700 <HAL_PCD_Init+0x1a4>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 fc45 	bl	8008f8a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	40005c00 	.word	0x40005c00
 8007710:	08011a98 	.word	0x08011a98

08007714 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007722:	2b01      	cmp	r3, #1
 8007724:	d101      	bne.n	800772a <HAL_PCD_Start+0x16>
 8007726:	2302      	movs	r3, #2
 8007728:	e012      	b.n	8007750 <HAL_PCD_Start+0x3c>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4618      	mov	r0, r3
 8007738:	f004 fde2 	bl	800c300 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4618      	mov	r0, r3
 8007742:	f007 f8a2 	bl	800e88a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4618      	mov	r0, r3
 8007766:	f007 f8a7 	bl	800e8b8 <USB_ReadInterrupts>
 800776a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fb04 	bl	8007d84 <PCD_EP_ISR_Handler>

    return;
 800777c:	e110      	b.n	80079a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007784:	2b00      	cmp	r3, #0
 8007786:	d013      	beq.n	80077b0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007790:	b29a      	uxth	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800779a:	b292      	uxth	r2, r2
 800779c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f009 f802 	bl	80107aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80077a6:	2100      	movs	r1, #0
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f8fc 	bl	80079a6 <HAL_PCD_SetAddress>

    return;
 80077ae:	e0f7      	b.n	80079a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00c      	beq.n	80077d4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80077cc:	b292      	uxth	r2, r2
 80077ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80077d2:	e0e5      	b.n	80079a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00c      	beq.n	80077f8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077f0:	b292      	uxth	r2, r2
 80077f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80077f6:	e0d3      	b.n	80079a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d034      	beq.n	800786c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800780a:	b29a      	uxth	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0204 	bic.w	r2, r2, #4
 8007814:	b292      	uxth	r2, r2
 8007816:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007822:	b29a      	uxth	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f022 0208 	bic.w	r2, r2, #8
 800782c:	b292      	uxth	r2, r2
 800782e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8007838:	2b01      	cmp	r3, #1
 800783a:	d107      	bne.n	800784c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007844:	2100      	movs	r1, #0
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f009 f9a2 	bl	8010b90 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f008 ffe5 	bl	801081c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800785a:	b29a      	uxth	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007864:	b292      	uxth	r2, r2
 8007866:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800786a:	e099      	b.n	80079a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007872:	2b00      	cmp	r3, #0
 8007874:	d027      	beq.n	80078c6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800787e:	b29a      	uxth	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f042 0208 	orr.w	r2, r2, #8
 8007888:	b292      	uxth	r2, r2
 800788a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007896:	b29a      	uxth	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078a0:	b292      	uxth	r2, r2
 80078a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f042 0204 	orr.w	r2, r2, #4
 80078b8:	b292      	uxth	r2, r2
 80078ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f008 ff92 	bl	80107e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80078c4:	e06c      	b.n	80079a0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d040      	beq.n	8007952 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80078d8:	b29a      	uxth	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80078e2:	b292      	uxth	r2, r2
 80078e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d12b      	bne.n	800794a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0204 	orr.w	r2, r2, #4
 8007904:	b292      	uxth	r2, r2
 8007906:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007912:	b29a      	uxth	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f042 0208 	orr.w	r2, r2, #8
 800791c:	b292      	uxth	r2, r2
 800791e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007932:	b29b      	uxth	r3, r3
 8007934:	089b      	lsrs	r3, r3, #2
 8007936:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007940:	2101      	movs	r1, #1
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f009 f924 	bl	8010b90 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8007948:	e02a      	b.n	80079a0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f008 ff4c 	bl	80107e8 <HAL_PCD_SuspendCallback>
    return;
 8007950:	e026      	b.n	80079a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00f      	beq.n	800797c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007964:	b29a      	uxth	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800796e:	b292      	uxth	r2, r2
 8007970:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f008 ff0a 	bl	801078e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800797a:	e011      	b.n	80079a0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00c      	beq.n	80079a0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800798e:	b29a      	uxth	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007998:	b292      	uxth	r2, r2
 800799a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800799e:	bf00      	nop
  }
}
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b082      	sub	sp, #8
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	460b      	mov	r3, r1
 80079b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d101      	bne.n	80079c0 <HAL_PCD_SetAddress+0x1a>
 80079bc:	2302      	movs	r3, #2
 80079be:	e012      	b.n	80079e6 <HAL_PCD_SetAddress+0x40>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	78fa      	ldrb	r2, [r7, #3]
 80079cc:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	78fa      	ldrb	r2, [r7, #3]
 80079d4:	4611      	mov	r1, r2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f006 ff43 	bl	800e862 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	4608      	mov	r0, r1
 80079f8:	4611      	mov	r1, r2
 80079fa:	461a      	mov	r2, r3
 80079fc:	4603      	mov	r3, r0
 80079fe:	70fb      	strb	r3, [r7, #3]
 8007a00:	460b      	mov	r3, r1
 8007a02:	803b      	strh	r3, [r7, #0]
 8007a04:	4613      	mov	r3, r2
 8007a06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	da0e      	bge.n	8007a32 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a14:	78fb      	ldrb	r3, [r7, #3]
 8007a16:	f003 0207 	and.w	r2, r3, #7
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	3310      	adds	r3, #16
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	4413      	add	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	705a      	strb	r2, [r3, #1]
 8007a30:	e00e      	b.n	8007a50 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a32:	78fb      	ldrb	r3, [r7, #3]
 8007a34:	f003 0207 	and.w	r2, r3, #7
 8007a38:	4613      	mov	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4413      	add	r3, r2
 8007a3e:	00db      	lsls	r3, r3, #3
 8007a40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	4413      	add	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007a50:	78fb      	ldrb	r3, [r7, #3]
 8007a52:	f003 0307 	and.w	r3, r3, #7
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007a5c:	883a      	ldrh	r2, [r7, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	78ba      	ldrb	r2, [r7, #2]
 8007a66:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007a68:	78bb      	ldrb	r3, [r7, #2]
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d102      	bne.n	8007a74 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d101      	bne.n	8007a82 <HAL_PCD_EP_Open+0x94>
 8007a7e:	2302      	movs	r3, #2
 8007a80:	e00e      	b.n	8007aa0 <HAL_PCD_EP_Open+0xb2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68f9      	ldr	r1, [r7, #12]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f004 fc85 	bl	800c3a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8007a9e:	7afb      	ldrb	r3, [r7, #11]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007ab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	da0e      	bge.n	8007ada <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007abc:	78fb      	ldrb	r3, [r7, #3]
 8007abe:	f003 0207 	and.w	r2, r3, #7
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	00db      	lsls	r3, r3, #3
 8007aca:	3310      	adds	r3, #16
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	4413      	add	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	705a      	strb	r2, [r3, #1]
 8007ad8:	e00e      	b.n	8007af8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ada:	78fb      	ldrb	r3, [r7, #3]
 8007adc:	f003 0207 	and.w	r2, r3, #7
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	00db      	lsls	r3, r3, #3
 8007ae8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	4413      	add	r3, r2
 8007af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007af8:	78fb      	ldrb	r3, [r7, #3]
 8007afa:	f003 0307 	and.w	r3, r3, #7
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d101      	bne.n	8007b12 <HAL_PCD_EP_Close+0x6a>
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e00e      	b.n	8007b30 <HAL_PCD_EP_Close+0x88>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68f9      	ldr	r1, [r7, #12]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f005 f801 	bl	800cb28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	607a      	str	r2, [r7, #4]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	460b      	mov	r3, r1
 8007b46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b48:	7afb      	ldrb	r3, [r7, #11]
 8007b4a:	f003 0207 	and.w	r2, r3, #7
 8007b4e:	4613      	mov	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	00db      	lsls	r3, r3, #3
 8007b56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2200      	movs	r2, #0
 8007b76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b78:	7afb      	ldrb	r3, [r7, #11]
 8007b7a:	f003 0307 	and.w	r3, r3, #7
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6979      	ldr	r1, [r7, #20]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f005 f9b9 	bl	800cf02 <USB_EPStartXfer>

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007ba6:	78fb      	ldrb	r3, [r7, #3]
 8007ba8:	f003 0207 	and.w	r2, r3, #7
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	00db      	lsls	r3, r3, #3
 8007bb6:	440b      	add	r3, r1
 8007bb8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007bbc:	681b      	ldr	r3, [r3, #0]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b086      	sub	sp, #24
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	603b      	str	r3, [r7, #0]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bda:	7afb      	ldrb	r3, [r7, #11]
 8007bdc:	f003 0207 	and.w	r2, r3, #7
 8007be0:	4613      	mov	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	3310      	adds	r3, #16
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	4413      	add	r3, r2
 8007bee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	2201      	movs	r2, #1
 8007c14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c16:	7afb      	ldrb	r3, [r7, #11]
 8007c18:	f003 0307 	and.w	r3, r3, #7
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6979      	ldr	r1, [r7, #20]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f005 f96a 	bl	800cf02 <USB_EPStartXfer>

  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007c44:	78fb      	ldrb	r3, [r7, #3]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	7912      	ldrb	r2, [r2, #4]
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d901      	bls.n	8007c56 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e03e      	b.n	8007cd4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007c56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	da0e      	bge.n	8007c7c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c5e:	78fb      	ldrb	r3, [r7, #3]
 8007c60:	f003 0207 	and.w	r2, r3, #7
 8007c64:	4613      	mov	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	3310      	adds	r3, #16
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	4413      	add	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2201      	movs	r2, #1
 8007c78:	705a      	strb	r2, [r3, #1]
 8007c7a:	e00c      	b.n	8007c96 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007c7c:	78fa      	ldrb	r2, [r7, #3]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c9c:	78fb      	ldrb	r3, [r7, #3]
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d101      	bne.n	8007cb6 <HAL_PCD_EP_SetStall+0x7e>
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	e00e      	b.n	8007cd4 <HAL_PCD_EP_SetStall+0x9c>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68f9      	ldr	r1, [r7, #12]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f006 fccd 	bl	800e664 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	f003 030f 	and.w	r3, r3, #15
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	7912      	ldrb	r2, [r2, #4]
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d901      	bls.n	8007cfa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e040      	b.n	8007d7c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007cfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	da0e      	bge.n	8007d20 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d02:	78fb      	ldrb	r3, [r7, #3]
 8007d04:	f003 0207 	and.w	r2, r3, #7
 8007d08:	4613      	mov	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	00db      	lsls	r3, r3, #3
 8007d10:	3310      	adds	r3, #16
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	4413      	add	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	705a      	strb	r2, [r3, #1]
 8007d1e:	e00e      	b.n	8007d3e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	f003 0207 	and.w	r2, r3, #7
 8007d26:	4613      	mov	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	4413      	add	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d44:	78fb      	ldrb	r3, [r7, #3]
 8007d46:	f003 0307 	and.w	r3, r3, #7
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d101      	bne.n	8007d5e <HAL_PCD_EP_ClrStall+0x82>
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e00e      	b.n	8007d7c <HAL_PCD_EP_ClrStall+0xa0>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68f9      	ldr	r1, [r7, #12]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f006 fcca 	bl	800e706 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b096      	sub	sp, #88	@ 0x58
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007d8c:	e3ad      	b.n	80084ea <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007d96:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007d9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 030f 	and.w	r3, r3, #15
 8007da4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8007da8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f040 816f 	bne.w	8008090 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007db2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007db6:	f003 0310 	and.w	r3, r3, #16
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d14c      	bne.n	8007e58 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dce:	81fb      	strh	r3, [r7, #14]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	89fb      	ldrh	r3, [r7, #14]
 8007dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3310      	adds	r3, #16
 8007de6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	461a      	mov	r2, r3
 8007df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	00db      	lsls	r3, r3, #3
 8007dfa:	4413      	add	r3, r2
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	6812      	ldr	r2, [r2, #0]
 8007e00:	4413      	add	r3, r2
 8007e02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e0e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e12:	695a      	ldr	r2, [r3, #20]
 8007e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	441a      	add	r2, r3
 8007e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e1c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007e1e:	2100      	movs	r1, #0
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f008 fc9a 	bl	801075a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	7b1b      	ldrb	r3, [r3, #12]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 835c 	beq.w	80084ea <PCD_EP_ISR_Handler+0x766>
 8007e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f040 8357 	bne.w	80084ea <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	7b1b      	ldrb	r3, [r3, #12]
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	731a      	strb	r2, [r3, #12]
 8007e56:	e348      	b.n	80084ea <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e5e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007e6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007e6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d032      	beq.n	8007edc <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	00db      	lsls	r3, r3, #3
 8007e88:	4413      	add	r3, r2
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	6812      	ldr	r2, [r2, #0]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e9c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6818      	ldr	r0, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eaa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	f006 fd53 	bl	800e95c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	823b      	strh	r3, [r7, #16]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	8a3a      	ldrh	r2, [r7, #16]
 8007ecc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007ed0:	b292      	uxth	r2, r2
 8007ed2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f008 fc13 	bl	8010700 <HAL_PCD_SetupStageCallback>
 8007eda:	e306      	b.n	80084ea <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007edc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f280 8302 	bge.w	80084ea <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	83fb      	strh	r3, [r7, #30]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	8bfa      	ldrh	r2, [r7, #30]
 8007efc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007f00:	b292      	uxth	r2, r2
 8007f02:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	461a      	mov	r2, r3
 8007f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	00db      	lsls	r3, r3, #3
 8007f16:	4413      	add	r3, r2
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	6812      	ldr	r2, [r2, #0]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f2a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d019      	beq.n	8007f68 <PCD_EP_ISR_Handler+0x1e4>
 8007f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d015      	beq.n	8007f68 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6818      	ldr	r0, [r3, #0]
 8007f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f42:	6959      	ldr	r1, [r3, #20]
 8007f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f46:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f4a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	f006 fd05 	bl	800e95c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f54:	695a      	ldr	r2, [r3, #20]
 8007f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	441a      	add	r2, r3
 8007f5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f5e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007f60:	2100      	movs	r1, #0
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f008 fbde 	bl	8010724 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007f72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007f76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f040 82b5 	bne.w	80084ea <PCD_EP_ISR_Handler+0x766>
 8007f80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007f84:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007f88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f8c:	f000 82ad 	beq.w	80084ea <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	61bb      	str	r3, [r7, #24]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	61bb      	str	r3, [r7, #24]
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007fae:	617b      	str	r3, [r7, #20]
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	801a      	strh	r2, [r3, #0]
 8007fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fc6:	d91d      	bls.n	8008004 <PCD_EP_ISR_Handler+0x280>
 8007fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	095b      	lsrs	r3, r3, #5
 8007fce:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	f003 031f 	and.w	r3, r3, #31
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d102      	bne.n	8007fe2 <PCD_EP_ISR_Handler+0x25e>
 8007fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	029b      	lsls	r3, r3, #10
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	801a      	strh	r2, [r3, #0]
 8008002:	e026      	b.n	8008052 <PCD_EP_ISR_Handler+0x2ce>
 8008004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10a      	bne.n	8008022 <PCD_EP_ISR_Handler+0x29e>
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	b29b      	uxth	r3, r3
 8008012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800801a:	b29a      	uxth	r2, r3
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	801a      	strh	r2, [r3, #0]
 8008020:	e017      	b.n	8008052 <PCD_EP_ISR_Handler+0x2ce>
 8008022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	085b      	lsrs	r3, r3, #1
 8008028:	647b      	str	r3, [r7, #68]	@ 0x44
 800802a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <PCD_EP_ISR_Handler+0x2b8>
 8008036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008038:	3301      	adds	r3, #1
 800803a:	647b      	str	r3, [r7, #68]	@ 0x44
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	b29a      	uxth	r2, r3
 8008042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008044:	b29b      	uxth	r3, r3
 8008046:	029b      	lsls	r3, r3, #10
 8008048:	b29b      	uxth	r3, r3
 800804a:	4313      	orrs	r3, r2
 800804c:	b29a      	uxth	r2, r3
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	b29b      	uxth	r3, r3
 800805a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800805e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008062:	827b      	strh	r3, [r7, #18]
 8008064:	8a7b      	ldrh	r3, [r7, #18]
 8008066:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800806a:	827b      	strh	r3, [r7, #18]
 800806c:	8a7b      	ldrh	r3, [r7, #18]
 800806e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008072:	827b      	strh	r3, [r7, #18]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	8a7b      	ldrh	r3, [r7, #18]
 800807a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800807e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800808a:	b29b      	uxth	r3, r3
 800808c:	8013      	strh	r3, [r2, #0]
 800808e:	e22c      	b.n	80084ea <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	461a      	mov	r2, r3
 8008096:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4413      	add	r3, r2
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80080a4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f280 80f6 	bge.w	800829a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	b29a      	uxth	r2, r3
 80080c0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80080c4:	4013      	ands	r3, r2
 80080c6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4413      	add	r3, r2
 80080d8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80080dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80080e0:	b292      	uxth	r2, r2
 80080e2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80080e4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80080e8:	4613      	mov	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	4413      	add	r3, r2
 80080f8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80080fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080fc:	7b1b      	ldrb	r3, [r3, #12]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d123      	bne.n	800814a <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800810a:	b29b      	uxth	r3, r3
 800810c:	461a      	mov	r2, r3
 800810e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	00db      	lsls	r3, r3, #3
 8008114:	4413      	add	r3, r2
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	6812      	ldr	r2, [r2, #0]
 800811a:	4413      	add	r3, r2
 800811c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008126:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800812a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 808e 	beq.w	8008250 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800813a:	6959      	ldr	r1, [r3, #20]
 800813c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800813e:	88da      	ldrh	r2, [r3, #6]
 8008140:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008144:	f006 fc0a 	bl	800e95c <USB_ReadPMA>
 8008148:	e082      	b.n	8008250 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800814a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800814c:	78db      	ldrb	r3, [r3, #3]
 800814e:	2b02      	cmp	r3, #2
 8008150:	d10a      	bne.n	8008168 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008152:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008156:	461a      	mov	r2, r3
 8008158:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f9d3 	bl	8008506 <HAL_PCD_EP_DB_Receive>
 8008160:	4603      	mov	r3, r0
 8008162:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8008166:	e073      	b.n	8008250 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	461a      	mov	r2, r3
 800816e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	b29b      	uxth	r3, r3
 800817a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800817e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008182:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	441a      	add	r2, r3
 8008194:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8008198:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800819c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	461a      	mov	r2, r3
 80081b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d022      	beq.n	800820c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	461a      	mov	r2, r3
 80081d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	4413      	add	r3, r2
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	6812      	ldr	r2, [r2, #0]
 80081de:	4413      	add	r3, r2
 80081e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081ea:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80081ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d02c      	beq.n	8008250 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081fc:	6959      	ldr	r1, [r3, #20]
 80081fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008200:	891a      	ldrh	r2, [r3, #8]
 8008202:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008206:	f006 fba9 	bl	800e95c <USB_ReadPMA>
 800820a:	e021      	b.n	8008250 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008214:	b29b      	uxth	r3, r3
 8008216:	461a      	mov	r2, r3
 8008218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	00db      	lsls	r3, r3, #3
 800821e:	4413      	add	r3, r2
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	6812      	ldr	r2, [r2, #0]
 8008224:	4413      	add	r3, r2
 8008226:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008230:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8008234:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008238:	2b00      	cmp	r3, #0
 800823a:	d009      	beq.n	8008250 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6818      	ldr	r0, [r3, #0]
 8008240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008242:	6959      	ldr	r1, [r3, #20]
 8008244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008246:	895a      	ldrh	r2, [r3, #10]
 8008248:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800824c:	f006 fb86 	bl	800e95c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008252:	69da      	ldr	r2, [r3, #28]
 8008254:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008258:	441a      	add	r2, r3
 800825a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800825c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800825e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008260:	695a      	ldr	r2, [r3, #20]
 8008262:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008266:	441a      	add	r2, r3
 8008268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800826a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800826c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <PCD_EP_ISR_Handler+0x4fc>
 8008274:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8008278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	429a      	cmp	r2, r3
 800827e:	d206      	bcs.n	800828e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f008 fa4c 	bl	8010724 <HAL_PCD_DataOutStageCallback>
 800828c:	e005      	b.n	800829a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008294:	4618      	mov	r0, r3
 8008296:	f004 fe34 	bl	800cf02 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800829a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800829e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 8121 	beq.w	80084ea <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80082a8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80082ac:	4613      	mov	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	3310      	adds	r3, #16
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	4413      	add	r3, r2
 80082ba:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	461a      	mov	r2, r3
 80082c2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80082d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	441a      	add	r2, r3
 80082e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80082ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80082f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082fa:	78db      	ldrb	r3, [r3, #3]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	f040 80a2 	bne.w	8008446 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8008302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008304:	2200      	movs	r2, #0
 8008306:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800830a:	7b1b      	ldrb	r3, [r3, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 8093 	beq.w	8008438 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008312:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800831a:	2b00      	cmp	r3, #0
 800831c:	d046      	beq.n	80083ac <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800831e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008320:	785b      	ldrb	r3, [r3, #1]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d126      	bne.n	8008374 <PCD_EP_ISR_Handler+0x5f0>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	627b      	str	r3, [r7, #36]	@ 0x24
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008334:	b29b      	uxth	r3, r3
 8008336:	461a      	mov	r2, r3
 8008338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833a:	4413      	add	r3, r2
 800833c:	627b      	str	r3, [r7, #36]	@ 0x24
 800833e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	00da      	lsls	r2, r3, #3
 8008344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008346:	4413      	add	r3, r2
 8008348:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800834c:	623b      	str	r3, [r7, #32]
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	881b      	ldrh	r3, [r3, #0]
 8008352:	b29b      	uxth	r3, r3
 8008354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008358:	b29a      	uxth	r2, r3
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	801a      	strh	r2, [r3, #0]
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b29b      	uxth	r3, r3
 8008364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800836c:	b29a      	uxth	r2, r3
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	801a      	strh	r2, [r3, #0]
 8008372:	e061      	b.n	8008438 <PCD_EP_ISR_Handler+0x6b4>
 8008374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008376:	785b      	ldrb	r3, [r3, #1]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d15d      	bne.n	8008438 <PCD_EP_ISR_Handler+0x6b4>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800838a:	b29b      	uxth	r3, r3
 800838c:	461a      	mov	r2, r3
 800838e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008390:	4413      	add	r3, r2
 8008392:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	00da      	lsls	r2, r3, #3
 800839a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800839c:	4413      	add	r3, r2
 800839e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80083a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a6:	2200      	movs	r2, #0
 80083a8:	801a      	strh	r2, [r3, #0]
 80083aa:	e045      	b.n	8008438 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083b4:	785b      	ldrb	r3, [r3, #1]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d126      	bne.n	8008408 <PCD_EP_ISR_Handler+0x684>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	637b      	str	r3, [r7, #52]	@ 0x34
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	461a      	mov	r2, r3
 80083cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ce:	4413      	add	r3, r2
 80083d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80083d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	00da      	lsls	r2, r3, #3
 80083d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083da:	4413      	add	r3, r2
 80083dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80083e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80083e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f0:	801a      	strh	r2, [r3, #0]
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008400:	b29a      	uxth	r2, r3
 8008402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008404:	801a      	strh	r2, [r3, #0]
 8008406:	e017      	b.n	8008438 <PCD_EP_ISR_Handler+0x6b4>
 8008408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800840a:	785b      	ldrb	r3, [r3, #1]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d113      	bne.n	8008438 <PCD_EP_ISR_Handler+0x6b4>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008418:	b29b      	uxth	r3, r3
 800841a:	461a      	mov	r2, r3
 800841c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800841e:	4413      	add	r3, r2
 8008420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	00da      	lsls	r2, r3, #3
 8008428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800842a:	4413      	add	r3, r2
 800842c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008430:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008434:	2200      	movs	r2, #0
 8008436:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f008 f98b 	bl	801075a <HAL_PCD_DataInStageCallback>
 8008444:	e051      	b.n	80084ea <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008446:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800844a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800844e:	2b00      	cmp	r3, #0
 8008450:	d144      	bne.n	80084dc <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800845a:	b29b      	uxth	r3, r3
 800845c:	461a      	mov	r2, r3
 800845e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	4413      	add	r3, r2
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	6812      	ldr	r2, [r2, #0]
 800846a:	4413      	add	r3, r2
 800846c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008476:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800847a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800847c:	699a      	ldr	r2, [r3, #24]
 800847e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008482:	429a      	cmp	r2, r3
 8008484:	d907      	bls.n	8008496 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8008486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008488:	699a      	ldr	r2, [r3, #24]
 800848a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800848e:	1ad2      	subs	r2, r2, r3
 8008490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008492:	619a      	str	r2, [r3, #24]
 8008494:	e002      	b.n	800849c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8008496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008498:	2200      	movs	r2, #0
 800849a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800849c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d106      	bne.n	80084b2 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80084a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f008 f955 	bl	801075a <HAL_PCD_DataInStageCallback>
 80084b0:	e01b      	b.n	80084ea <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80084b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084b4:	695a      	ldr	r2, [r3, #20]
 80084b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80084ba:	441a      	add	r2, r3
 80084bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084be:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80084c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084c2:	69da      	ldr	r2, [r3, #28]
 80084c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80084c8:	441a      	add	r2, r3
 80084ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084cc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084d4:	4618      	mov	r0, r3
 80084d6:	f004 fd14 	bl	800cf02 <USB_EPStartXfer>
 80084da:	e006      	b.n	80084ea <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80084dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80084e0:	461a      	mov	r2, r3
 80084e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f917 	bl	8008718 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	b21b      	sxth	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f6ff ac49 	blt.w	8007d8e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3758      	adds	r7, #88	@ 0x58
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b088      	sub	sp, #32
 800850a:	af00      	add	r7, sp, #0
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	4613      	mov	r3, r2
 8008512:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008514:	88fb      	ldrh	r3, [r7, #6]
 8008516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d07c      	beq.n	8008618 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008526:	b29b      	uxth	r3, r3
 8008528:	461a      	mov	r2, r3
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	00db      	lsls	r3, r3, #3
 8008530:	4413      	add	r3, r2
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	6812      	ldr	r2, [r2, #0]
 8008536:	4413      	add	r3, r2
 8008538:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008542:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	699a      	ldr	r2, [r3, #24]
 8008548:	8b7b      	ldrh	r3, [r7, #26]
 800854a:	429a      	cmp	r2, r3
 800854c:	d306      	bcc.n	800855c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	699a      	ldr	r2, [r3, #24]
 8008552:	8b7b      	ldrh	r3, [r7, #26]
 8008554:	1ad2      	subs	r2, r2, r3
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	619a      	str	r2, [r3, #24]
 800855a:	e002      	b.n	8008562 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2200      	movs	r2, #0
 8008560:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d123      	bne.n	80085b2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	b29b      	uxth	r3, r3
 800857c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008584:	833b      	strh	r3, [r7, #24]
 8008586:	8b3b      	ldrh	r3, [r7, #24]
 8008588:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800858c:	833b      	strh	r3, [r7, #24]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	441a      	add	r2, r3
 800859c:	8b3b      	ldrh	r3, [r7, #24]
 800859e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80085b2:	88fb      	ldrh	r3, [r7, #6]
 80085b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d01f      	beq.n	80085fc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	461a      	mov	r2, r3
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085d6:	82fb      	strh	r3, [r7, #22]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	461a      	mov	r2, r3
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	441a      	add	r2, r3
 80085e6:	8afb      	ldrh	r3, [r7, #22]
 80085e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80085fc:	8b7b      	ldrh	r3, [r7, #26]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 8085 	beq.w	800870e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6818      	ldr	r0, [r3, #0]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	6959      	ldr	r1, [r3, #20]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	891a      	ldrh	r2, [r3, #8]
 8008610:	8b7b      	ldrh	r3, [r7, #26]
 8008612:	f006 f9a3 	bl	800e95c <USB_ReadPMA>
 8008616:	e07a      	b.n	800870e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008620:	b29b      	uxth	r3, r3
 8008622:	461a      	mov	r2, r3
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	00db      	lsls	r3, r3, #3
 800862a:	4413      	add	r3, r2
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	6812      	ldr	r2, [r2, #0]
 8008630:	4413      	add	r3, r2
 8008632:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800863c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	699a      	ldr	r2, [r3, #24]
 8008642:	8b7b      	ldrh	r3, [r7, #26]
 8008644:	429a      	cmp	r2, r3
 8008646:	d306      	bcc.n	8008656 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	699a      	ldr	r2, [r3, #24]
 800864c:	8b7b      	ldrh	r3, [r7, #26]
 800864e:	1ad2      	subs	r2, r2, r3
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	619a      	str	r2, [r3, #24]
 8008654:	e002      	b.n	800865c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2200      	movs	r2, #0
 800865a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d123      	bne.n	80086ac <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	461a      	mov	r2, r3
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	b29b      	uxth	r3, r3
 8008676:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800867a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800867e:	83fb      	strh	r3, [r7, #30]
 8008680:	8bfb      	ldrh	r3, [r7, #30]
 8008682:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008686:	83fb      	strh	r3, [r7, #30]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	461a      	mov	r2, r3
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	441a      	add	r2, r3
 8008696:	8bfb      	ldrh	r3, [r7, #30]
 8008698:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800869c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80086ac:	88fb      	ldrh	r3, [r7, #6]
 80086ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d11f      	bne.n	80086f6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4413      	add	r3, r2
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086d0:	83bb      	strh	r3, [r7, #28]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	441a      	add	r2, r3
 80086e0:	8bbb      	ldrh	r3, [r7, #28]
 80086e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80086f6:	8b7b      	ldrh	r3, [r7, #26]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d008      	beq.n	800870e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6818      	ldr	r0, [r3, #0]
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	6959      	ldr	r1, [r3, #20]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	895a      	ldrh	r2, [r3, #10]
 8008708:	8b7b      	ldrh	r3, [r7, #26]
 800870a:	f006 f927 	bl	800e95c <USB_ReadPMA>
    }
  }

  return count;
 800870e:	8b7b      	ldrh	r3, [r7, #26]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3720      	adds	r7, #32
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b0a4      	sub	sp, #144	@ 0x90
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	4613      	mov	r3, r2
 8008724:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008726:	88fb      	ldrh	r3, [r7, #6]
 8008728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 81db 	beq.w	8008ae8 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800873a:	b29b      	uxth	r3, r3
 800873c:	461a      	mov	r2, r3
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	00db      	lsls	r3, r3, #3
 8008744:	4413      	add	r3, r2
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	6812      	ldr	r2, [r2, #0]
 800874a:	4413      	add	r3, r2
 800874c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008750:	881b      	ldrh	r3, [r3, #0]
 8008752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008756:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	699a      	ldr	r2, [r3, #24]
 800875e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008762:	429a      	cmp	r2, r3
 8008764:	d907      	bls.n	8008776 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	699a      	ldr	r2, [r3, #24]
 800876a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800876e:	1ad2      	subs	r2, r2, r3
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	619a      	str	r2, [r3, #24]
 8008774:	e002      	b.n	800877c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	2200      	movs	r2, #0
 800877a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	2b00      	cmp	r3, #0
 8008782:	f040 80b9 	bne.w	80088f8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	785b      	ldrb	r3, [r3, #1]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d126      	bne.n	80087dc <HAL_PCD_EP_DB_Transmit+0xc4>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800879c:	b29b      	uxth	r3, r3
 800879e:	461a      	mov	r2, r3
 80087a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a2:	4413      	add	r3, r2
 80087a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	00da      	lsls	r2, r3, #3
 80087ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ae:	4413      	add	r3, r2
 80087b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80087b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c4:	801a      	strh	r2, [r3, #0]
 80087c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d8:	801a      	strh	r2, [r3, #0]
 80087da:	e01a      	b.n	8008812 <HAL_PCD_EP_DB_Transmit+0xfa>
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	785b      	ldrb	r3, [r3, #1]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d116      	bne.n	8008812 <HAL_PCD_EP_DB_Transmit+0xfa>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	461a      	mov	r2, r3
 80087f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f8:	4413      	add	r3, r2
 80087fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	00da      	lsls	r2, r3, #3
 8008802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008804:	4413      	add	r3, r2
 8008806:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800880a:	633b      	str	r3, [r7, #48]	@ 0x30
 800880c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880e:	2200      	movs	r2, #0
 8008810:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	627b      	str	r3, [r7, #36]	@ 0x24
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	785b      	ldrb	r3, [r3, #1]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d126      	bne.n	800886e <HAL_PCD_EP_DB_Transmit+0x156>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	61fb      	str	r3, [r7, #28]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800882e:	b29b      	uxth	r3, r3
 8008830:	461a      	mov	r2, r3
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	4413      	add	r3, r2
 8008836:	61fb      	str	r3, [r7, #28]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	00da      	lsls	r2, r3, #3
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	4413      	add	r3, r2
 8008842:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008846:	61bb      	str	r3, [r7, #24]
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	881b      	ldrh	r3, [r3, #0]
 800884c:	b29b      	uxth	r3, r3
 800884e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008852:	b29a      	uxth	r2, r3
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	801a      	strh	r2, [r3, #0]
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	881b      	ldrh	r3, [r3, #0]
 800885c:	b29b      	uxth	r3, r3
 800885e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008866:	b29a      	uxth	r2, r3
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	801a      	strh	r2, [r3, #0]
 800886c:	e017      	b.n	800889e <HAL_PCD_EP_DB_Transmit+0x186>
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	785b      	ldrb	r3, [r3, #1]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d113      	bne.n	800889e <HAL_PCD_EP_DB_Transmit+0x186>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800887e:	b29b      	uxth	r3, r3
 8008880:	461a      	mov	r2, r3
 8008882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008884:	4413      	add	r3, r2
 8008886:	627b      	str	r3, [r7, #36]	@ 0x24
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	00da      	lsls	r2, r3, #3
 800888e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008890:	4413      	add	r3, r2
 8008892:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008896:	623b      	str	r3, [r7, #32]
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	2200      	movs	r2, #0
 800889c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	4619      	mov	r1, r3
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f007 ff58 	bl	801075a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80088aa:	88fb      	ldrh	r3, [r7, #6]
 80088ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 82fa 	beq.w	8008eaa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	881b      	ldrh	r3, [r3, #0]
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088d0:	82fb      	strh	r3, [r7, #22]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	441a      	add	r2, r3
 80088e0:	8afb      	ldrh	r3, [r7, #22]
 80088e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80088ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	8013      	strh	r3, [r2, #0]
 80088f6:	e2d8      	b.n	8008eaa <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80088f8:	88fb      	ldrh	r3, [r7, #6]
 80088fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d021      	beq.n	8008946 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	b29b      	uxth	r3, r3
 8008914:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800891c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	461a      	mov	r2, r3
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	441a      	add	r2, r3
 800892e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800893a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800893e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008942:	b29b      	uxth	r3, r3
 8008944:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800894c:	2b01      	cmp	r3, #1
 800894e:	f040 82ac 	bne.w	8008eaa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	695a      	ldr	r2, [r3, #20]
 8008956:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800895a:	441a      	add	r2, r3
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	69da      	ldr	r2, [r3, #28]
 8008964:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008968:	441a      	add	r2, r3
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	6a1a      	ldr	r2, [r3, #32]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	429a      	cmp	r2, r3
 8008978:	d30b      	bcc.n	8008992 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	6a1a      	ldr	r2, [r3, #32]
 8008986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800898a:	1ad2      	subs	r2, r2, r3
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	621a      	str	r2, [r3, #32]
 8008990:	e017      	b.n	80089c2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d108      	bne.n	80089ac <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800899a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800899e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80089aa:	e00a      	b.n	80089c2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	6a1b      	ldr	r3, [r3, #32]
 80089b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2200      	movs	r2, #0
 80089c0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	785b      	ldrb	r3, [r3, #1]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d165      	bne.n	8008a96 <HAL_PCD_EP_DB_Transmit+0x37e>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089d8:	b29b      	uxth	r3, r3
 80089da:	461a      	mov	r2, r3
 80089dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089de:	4413      	add	r3, r2
 80089e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	00da      	lsls	r2, r3, #3
 80089e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ea:	4413      	add	r3, r2
 80089ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80089f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80089f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a00:	801a      	strh	r2, [r3, #0]
 8008a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a06:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a08:	d91d      	bls.n	8008a46 <HAL_PCD_EP_DB_Transmit+0x32e>
 8008a0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a0e:	095b      	lsrs	r3, r3, #5
 8008a10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a16:	f003 031f 	and.w	r3, r3, #31
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d102      	bne.n	8008a24 <HAL_PCD_EP_DB_Transmit+0x30c>
 8008a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a20:	3b01      	subs	r3, #1
 8008a22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	029b      	lsls	r3, r3, #10
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	4313      	orrs	r3, r2
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a42:	801a      	strh	r2, [r3, #0]
 8008a44:	e044      	b.n	8008ad0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10a      	bne.n	8008a64 <HAL_PCD_EP_DB_Transmit+0x34c>
 8008a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a60:	801a      	strh	r2, [r3, #0]
 8008a62:	e035      	b.n	8008ad0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a68:	085b      	lsrs	r3, r3, #1
 8008a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d002      	beq.n	8008a7e <HAL_PCD_EP_DB_Transmit+0x366>
 8008a78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a80:	881b      	ldrh	r3, [r3, #0]
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	029b      	lsls	r3, r3, #10
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a92:	801a      	strh	r2, [r3, #0]
 8008a94:	e01c      	b.n	8008ad0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	785b      	ldrb	r3, [r3, #1]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d118      	bne.n	8008ad0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	461a      	mov	r2, r3
 8008ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ab2:	4413      	add	r3, r2
 8008ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	00da      	lsls	r2, r3, #3
 8008abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008abe:	4413      	add	r3, r2
 8008ac0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008ac4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ace:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6818      	ldr	r0, [r3, #0]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	6959      	ldr	r1, [r3, #20]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	891a      	ldrh	r2, [r3, #8]
 8008adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	f005 fef9 	bl	800e8d8 <USB_WritePMA>
 8008ae6:	e1e0      	b.n	8008eaa <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	461a      	mov	r2, r3
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	00db      	lsls	r3, r3, #3
 8008afa:	4413      	add	r3, r2
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	6812      	ldr	r2, [r2, #0]
 8008b00:	4413      	add	r3, r2
 8008b02:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b0c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	699a      	ldr	r2, [r3, #24]
 8008b14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d307      	bcc.n	8008b2c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	699a      	ldr	r2, [r3, #24]
 8008b20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008b24:	1ad2      	subs	r2, r2, r3
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	619a      	str	r2, [r3, #24]
 8008b2a:	e002      	b.n	8008b32 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f040 80c0 	bne.w	8008cbc <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	785b      	ldrb	r3, [r3, #1]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d126      	bne.n	8008b92 <HAL_PCD_EP_DB_Transmit+0x47a>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	461a      	mov	r2, r3
 8008b56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b58:	4413      	add	r3, r2
 8008b5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	00da      	lsls	r2, r3, #3
 8008b62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b64:	4413      	add	r3, r2
 8008b66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b7a:	801a      	strh	r2, [r3, #0]
 8008b7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b8e:	801a      	strh	r2, [r3, #0]
 8008b90:	e01a      	b.n	8008bc8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	785b      	ldrb	r3, [r3, #1]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d116      	bne.n	8008bc8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	461a      	mov	r2, r3
 8008bac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bae:	4413      	add	r3, r2
 8008bb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	00da      	lsls	r2, r3, #3
 8008bb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bba:	4413      	add	r3, r2
 8008bbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008bc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8008bc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	677b      	str	r3, [r7, #116]	@ 0x74
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	785b      	ldrb	r3, [r3, #1]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d12b      	bne.n	8008c2e <HAL_PCD_EP_DB_Transmit+0x516>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	461a      	mov	r2, r3
 8008be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bea:	4413      	add	r3, r2
 8008bec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	00da      	lsls	r2, r3, #3
 8008bf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008bfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c12:	801a      	strh	r2, [r3, #0]
 8008c14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c2a:	801a      	strh	r2, [r3, #0]
 8008c2c:	e017      	b.n	8008c5e <HAL_PCD_EP_DB_Transmit+0x546>
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d113      	bne.n	8008c5e <HAL_PCD_EP_DB_Transmit+0x546>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	461a      	mov	r2, r3
 8008c42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c44:	4413      	add	r3, r2
 8008c46:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	00da      	lsls	r2, r3, #3
 8008c4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c50:	4413      	add	r3, r2
 8008c52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c56:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	4619      	mov	r1, r3
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f007 fd78 	bl	801075a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008c6a:	88fb      	ldrh	r3, [r7, #6]
 8008c6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f040 811a 	bne.w	8008eaa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c90:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	441a      	add	r2, r3
 8008ca2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008ca6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008caa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	8013      	strh	r3, [r2, #0]
 8008cba:	e0f6      	b.n	8008eaa <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008cbc:	88fb      	ldrh	r3, [r7, #6]
 8008cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d121      	bne.n	8008d0a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ce0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	441a      	add	r2, r3
 8008cf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008cf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	f040 80ca 	bne.w	8008eaa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	695a      	ldr	r2, [r3, #20]
 8008d1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008d1e:	441a      	add	r2, r3
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	69da      	ldr	r2, [r3, #28]
 8008d28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008d2c:	441a      	add	r2, r3
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	6a1a      	ldr	r2, [r3, #32]
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d30b      	bcc.n	8008d56 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	6a1a      	ldr	r2, [r3, #32]
 8008d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d4e:	1ad2      	subs	r2, r2, r3
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	621a      	str	r2, [r3, #32]
 8008d54:	e017      	b.n	8008d86 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d108      	bne.n	8008d70 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8008d5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008d62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008d6e:	e00a      	b.n	8008d86 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	6a1b      	ldr	r3, [r3, #32]
 8008d74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	785b      	ldrb	r3, [r3, #1]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d165      	bne.n	8008e60 <HAL_PCD_EP_DB_Transmit+0x748>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	461a      	mov	r2, r3
 8008da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008da8:	4413      	add	r3, r2
 8008daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	00da      	lsls	r2, r3, #3
 8008db2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008db4:	4413      	add	r3, r2
 8008db6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008dba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008dbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008dca:	801a      	strh	r2, [r3, #0]
 8008dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008dd0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008dd2:	d91d      	bls.n	8008e10 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8008dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008dd8:	095b      	lsrs	r3, r3, #5
 8008dda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008de0:	f003 031f 	and.w	r3, r3, #31
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d102      	bne.n	8008dee <HAL_PCD_EP_DB_Transmit+0x6d6>
 8008de8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008dea:	3b01      	subs	r3, #1
 8008dec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008dee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	029b      	lsls	r3, r3, #10
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e0c:	801a      	strh	r2, [r3, #0]
 8008e0e:	e041      	b.n	8008e94 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10a      	bne.n	8008e2e <HAL_PCD_EP_DB_Transmit+0x716>
 8008e18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e2a:	801a      	strh	r2, [r3, #0]
 8008e2c:	e032      	b.n	8008e94 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e32:	085b      	lsrs	r3, r3, #1
 8008e34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d002      	beq.n	8008e48 <HAL_PCD_EP_DB_Transmit+0x730>
 8008e42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e44:	3301      	adds	r3, #1
 8008e46:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	029b      	lsls	r3, r3, #10
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	4313      	orrs	r3, r2
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e5c:	801a      	strh	r2, [r3, #0]
 8008e5e:	e019      	b.n	8008e94 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	785b      	ldrb	r3, [r3, #1]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d115      	bne.n	8008e94 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	461a      	mov	r2, r3
 8008e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e76:	4413      	add	r3, r2
 8008e78:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	00da      	lsls	r2, r3, #3
 8008e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e82:	4413      	add	r3, r2
 8008e84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008e88:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e92:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6818      	ldr	r0, [r3, #0]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	6959      	ldr	r1, [r3, #20]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	895a      	ldrh	r2, [r3, #10]
 8008ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	f005 fd17 	bl	800e8d8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ec0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ec4:	82bb      	strh	r3, [r7, #20]
 8008ec6:	8abb      	ldrh	r3, [r7, #20]
 8008ec8:	f083 0310 	eor.w	r3, r3, #16
 8008ecc:	82bb      	strh	r3, [r7, #20]
 8008ece:	8abb      	ldrh	r3, [r7, #20]
 8008ed0:	f083 0320 	eor.w	r3, r3, #32
 8008ed4:	82bb      	strh	r3, [r7, #20]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	461a      	mov	r2, r3
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	441a      	add	r2, r3
 8008ee4:	8abb      	ldrh	r3, [r7, #20]
 8008ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3790      	adds	r7, #144	@ 0x90
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	607b      	str	r3, [r7, #4]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	817b      	strh	r3, [r7, #10]
 8008f12:	4613      	mov	r3, r2
 8008f14:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008f16:	897b      	ldrh	r3, [r7, #10]
 8008f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00b      	beq.n	8008f3a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f22:	897b      	ldrh	r3, [r7, #10]
 8008f24:	f003 0207 	and.w	r2, r3, #7
 8008f28:	4613      	mov	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4413      	add	r3, r2
 8008f2e:	00db      	lsls	r3, r3, #3
 8008f30:	3310      	adds	r3, #16
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	4413      	add	r3, r2
 8008f36:	617b      	str	r3, [r7, #20]
 8008f38:	e009      	b.n	8008f4e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008f3a:	897a      	ldrh	r2, [r7, #10]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	00db      	lsls	r3, r3, #3
 8008f44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008f4e:	893b      	ldrh	r3, [r7, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d107      	bne.n	8008f64 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	2200      	movs	r2, #0
 8008f58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	80da      	strh	r2, [r3, #6]
 8008f62:	e00b      	b.n	8008f7c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2201      	movs	r2, #1
 8008f68:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	0c1b      	lsrs	r3, r3, #16
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	371c      	adds	r7, #28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b085      	sub	sp, #20
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	f043 0301 	orr.w	r3, r3, #1
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	f043 0302 	orr.w	r3, r3, #2
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
	...

08008fe0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00b      	beq.n	8009006 <HAL_PWREx_ControlVoltageScaling+0x26>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ff4:	d007      	beq.n	8009006 <HAL_PWREx_ControlVoltageScaling+0x26>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ffc:	d003      	beq.n	8009006 <HAL_PWREx_ControlVoltageScaling+0x26>
 8008ffe:	219d      	movs	r1, #157	@ 0x9d
 8009000:	484d      	ldr	r0, [pc, #308]	@ (8009138 <HAL_PWREx_ControlVoltageScaling+0x158>)
 8009002:	f7f9 f9af 	bl	8002364 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d141      	bne.n	8009090 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800900c:	4b4b      	ldr	r3, [pc, #300]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009018:	d131      	bne.n	800907e <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800901a:	4b48      	ldr	r3, [pc, #288]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800901c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009020:	4a46      	ldr	r2, [pc, #280]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009022:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009026:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800902a:	4b44      	ldr	r3, [pc, #272]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009032:	4a42      	ldr	r2, [pc, #264]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009034:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009038:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800903a:	4b41      	ldr	r3, [pc, #260]	@ (8009140 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2232      	movs	r2, #50	@ 0x32
 8009040:	fb02 f303 	mul.w	r3, r2, r3
 8009044:	4a3f      	ldr	r2, [pc, #252]	@ (8009144 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8009046:	fba2 2303 	umull	r2, r3, r2, r3
 800904a:	0c9b      	lsrs	r3, r3, #18
 800904c:	3301      	adds	r3, #1
 800904e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009050:	e002      	b.n	8009058 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3b01      	subs	r3, #1
 8009056:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009058:	4b38      	ldr	r3, [pc, #224]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800905a:	695b      	ldr	r3, [r3, #20]
 800905c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009064:	d102      	bne.n	800906c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1f2      	bne.n	8009052 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800906c:	4b33      	ldr	r3, [pc, #204]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009078:	d158      	bne.n	800912c <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e057      	b.n	800912e <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800907e:	4b2f      	ldr	r3, [pc, #188]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009084:	4a2d      	ldr	r2, [pc, #180]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009086:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800908a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800908e:	e04d      	b.n	800912c <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009096:	d141      	bne.n	800911c <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009098:	4b28      	ldr	r3, [pc, #160]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80090a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090a4:	d131      	bne.n	800910a <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80090a6:	4b25      	ldr	r3, [pc, #148]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80090a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090ac:	4a23      	ldr	r2, [pc, #140]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80090ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090b2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80090b6:	4b21      	ldr	r3, [pc, #132]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80090be:	4a1f      	ldr	r2, [pc, #124]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80090c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80090c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80090c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009140 <HAL_PWREx_ControlVoltageScaling+0x160>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2232      	movs	r2, #50	@ 0x32
 80090cc:	fb02 f303 	mul.w	r3, r2, r3
 80090d0:	4a1c      	ldr	r2, [pc, #112]	@ (8009144 <HAL_PWREx_ControlVoltageScaling+0x164>)
 80090d2:	fba2 2303 	umull	r2, r3, r2, r3
 80090d6:	0c9b      	lsrs	r3, r3, #18
 80090d8:	3301      	adds	r3, #1
 80090da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80090dc:	e002      	b.n	80090e4 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3b01      	subs	r3, #1
 80090e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80090e4:	4b15      	ldr	r3, [pc, #84]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090f0:	d102      	bne.n	80090f8 <HAL_PWREx_ControlVoltageScaling+0x118>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1f2      	bne.n	80090de <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80090f8:	4b10      	ldr	r3, [pc, #64]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80090fa:	695b      	ldr	r3, [r3, #20]
 80090fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009104:	d112      	bne.n	800912c <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e011      	b.n	800912e <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800910a:	4b0c      	ldr	r3, [pc, #48]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800910c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009110:	4a0a      	ldr	r2, [pc, #40]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009116:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800911a:	e007      	b.n	800912c <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800911c:	4b07      	ldr	r3, [pc, #28]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009124:	4a05      	ldr	r2, [pc, #20]	@ (800913c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800912a:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	08011b08 	.word	0x08011b08
 800913c:	40007000 	.word	0x40007000
 8009140:	20000000 	.word	0x20000000
 8009144:	431bde83 	.word	0x431bde83

08009148 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009148:	b480      	push	{r7}
 800914a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800914c:	4b05      	ldr	r3, [pc, #20]	@ (8009164 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	4a04      	ldr	r2, [pc, #16]	@ (8009164 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009152:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009156:	6093      	str	r3, [r2, #8]
}
 8009158:	bf00      	nop
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	40007000 	.word	0x40007000

08009168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b088      	sub	sp, #32
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e3fc      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d022      	beq.n	80091c8 <HAL_RCC_OscConfig+0x60>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d11c      	bne.n	80091c8 <HAL_RCC_OscConfig+0x60>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0302 	and.w	r3, r3, #2
 8009196:	2b00      	cmp	r3, #0
 8009198:	d116      	bne.n	80091c8 <HAL_RCC_OscConfig+0x60>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0320 	and.w	r3, r3, #32
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d110      	bne.n	80091c8 <HAL_RCC_OscConfig+0x60>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0308 	and.w	r3, r3, #8
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10a      	bne.n	80091c8 <HAL_RCC_OscConfig+0x60>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0304 	and.w	r3, r3, #4
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d104      	bne.n	80091c8 <HAL_RCC_OscConfig+0x60>
 80091be:	f240 1145 	movw	r1, #325	@ 0x145
 80091c2:	4893      	ldr	r0, [pc, #588]	@ (8009410 <HAL_RCC_OscConfig+0x2a8>)
 80091c4:	f7f9 f8ce 	bl	8002364 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 8089 	beq.w	80092e8 <HAL_RCC_OscConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00e      	beq.n	80091fc <HAL_RCC_OscConfig+0x94>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091e6:	d009      	beq.n	80091fc <HAL_RCC_OscConfig+0x94>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80091f0:	d004      	beq.n	80091fc <HAL_RCC_OscConfig+0x94>
 80091f2:	f240 114b 	movw	r1, #331	@ 0x14b
 80091f6:	4886      	ldr	r0, [pc, #536]	@ (8009410 <HAL_RCC_OscConfig+0x2a8>)
 80091f8:	f7f9 f8b4 	bl	8002364 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091fc:	4b85      	ldr	r3, [pc, #532]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f003 030c 	and.w	r3, r3, #12
 8009204:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009206:	4b83      	ldr	r3, [pc, #524]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	f003 0303 	and.w	r3, r3, #3
 800920e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	2b0c      	cmp	r3, #12
 8009214:	d102      	bne.n	800921c <HAL_RCC_OscConfig+0xb4>
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2b03      	cmp	r3, #3
 800921a:	d002      	beq.n	8009222 <HAL_RCC_OscConfig+0xba>
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	2b08      	cmp	r3, #8
 8009220:	d10b      	bne.n	800923a <HAL_RCC_OscConfig+0xd2>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009222:	4b7c      	ldr	r3, [pc, #496]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d05b      	beq.n	80092e6 <HAL_RCC_OscConfig+0x17e>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d157      	bne.n	80092e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e39c      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009242:	d106      	bne.n	8009252 <HAL_RCC_OscConfig+0xea>
 8009244:	4b73      	ldr	r3, [pc, #460]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a72      	ldr	r2, [pc, #456]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 800924a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	e01d      	b.n	800928e <HAL_RCC_OscConfig+0x126>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800925a:	d10c      	bne.n	8009276 <HAL_RCC_OscConfig+0x10e>
 800925c:	4b6d      	ldr	r3, [pc, #436]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a6c      	ldr	r2, [pc, #432]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 8009262:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	4b6a      	ldr	r3, [pc, #424]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a69      	ldr	r2, [pc, #420]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 800926e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009272:	6013      	str	r3, [r2, #0]
 8009274:	e00b      	b.n	800928e <HAL_RCC_OscConfig+0x126>
 8009276:	4b67      	ldr	r3, [pc, #412]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a66      	ldr	r2, [pc, #408]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 800927c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009280:	6013      	str	r3, [r2, #0]
 8009282:	4b64      	ldr	r3, [pc, #400]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a63      	ldr	r2, [pc, #396]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 8009288:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800928c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d013      	beq.n	80092be <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009296:	f7f9 fa27 	bl	80026e8 <HAL_GetTick>
 800929a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800929c:	e008      	b.n	80092b0 <HAL_RCC_OscConfig+0x148>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800929e:	f7f9 fa23 	bl	80026e8 <HAL_GetTick>
 80092a2:	4602      	mov	r2, r0
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	2b64      	cmp	r3, #100	@ 0x64
 80092aa:	d901      	bls.n	80092b0 <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e361      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80092b0:	4b58      	ldr	r3, [pc, #352]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d0f0      	beq.n	800929e <HAL_RCC_OscConfig+0x136>
 80092bc:	e014      	b.n	80092e8 <HAL_RCC_OscConfig+0x180>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092be:	f7f9 fa13 	bl	80026e8 <HAL_GetTick>
 80092c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80092c4:	e008      	b.n	80092d8 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092c6:	f7f9 fa0f 	bl	80026e8 <HAL_GetTick>
 80092ca:	4602      	mov	r2, r0
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	2b64      	cmp	r3, #100	@ 0x64
 80092d2:	d901      	bls.n	80092d8 <HAL_RCC_OscConfig+0x170>
          {
            return HAL_TIMEOUT;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e34d      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80092d8:	4b4e      	ldr	r3, [pc, #312]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1f0      	bne.n	80092c6 <HAL_RCC_OscConfig+0x15e>
 80092e4:	e000      	b.n	80092e8 <HAL_RCC_OscConfig+0x180>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 0302 	and.w	r3, r3, #2
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 8094 	beq.w	800941e <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d009      	beq.n	8009312 <HAL_RCC_OscConfig+0x1aa>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009306:	d004      	beq.n	8009312 <HAL_RCC_OscConfig+0x1aa>
 8009308:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800930c:	4840      	ldr	r0, [pc, #256]	@ (8009410 <HAL_RCC_OscConfig+0x2a8>)
 800930e:	f7f9 f829 	bl	8002364 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	2b7f      	cmp	r3, #127	@ 0x7f
 8009318:	d904      	bls.n	8009324 <HAL_RCC_OscConfig+0x1bc>
 800931a:	f240 1181 	movw	r1, #385	@ 0x181
 800931e:	483c      	ldr	r0, [pc, #240]	@ (8009410 <HAL_RCC_OscConfig+0x2a8>)
 8009320:	f7f9 f820 	bl	8002364 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009324:	4b3b      	ldr	r3, [pc, #236]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f003 030c 	and.w	r3, r3, #12
 800932c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800932e:	4b39      	ldr	r3, [pc, #228]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	2b0c      	cmp	r3, #12
 800933c:	d102      	bne.n	8009344 <HAL_RCC_OscConfig+0x1dc>
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b02      	cmp	r3, #2
 8009342:	d002      	beq.n	800934a <HAL_RCC_OscConfig+0x1e2>
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	2b04      	cmp	r3, #4
 8009348:	d11f      	bne.n	800938a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800934a:	4b32      	ldr	r3, [pc, #200]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <HAL_RCC_OscConfig+0x1fa>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_RCC_OscConfig+0x1fa>
      {
        return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e308      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009362:	4b2c      	ldr	r3, [pc, #176]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	061b      	lsls	r3, r3, #24
 8009370:	4928      	ldr	r1, [pc, #160]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 8009372:	4313      	orrs	r3, r2
 8009374:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009376:	4b28      	ldr	r3, [pc, #160]	@ (8009418 <HAL_RCC_OscConfig+0x2b0>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4618      	mov	r0, r3
 800937c:	f7f9 f968 	bl	8002650 <HAL_InitTick>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d04a      	beq.n	800941c <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e2f4      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d023      	beq.n	80093da <HAL_RCC_OscConfig+0x272>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009392:	4b20      	ldr	r3, [pc, #128]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a1f      	ldr	r2, [pc, #124]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 8009398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800939c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800939e:	f7f9 f9a3 	bl	80026e8 <HAL_GetTick>
 80093a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80093a4:	e008      	b.n	80093b8 <HAL_RCC_OscConfig+0x250>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093a6:	f7f9 f99f 	bl	80026e8 <HAL_GetTick>
 80093aa:	4602      	mov	r2, r0
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d901      	bls.n	80093b8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e2dd      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80093b8:	4b16      	ldr	r3, [pc, #88]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d0f0      	beq.n	80093a6 <HAL_RCC_OscConfig+0x23e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093c4:	4b13      	ldr	r3, [pc, #76]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	061b      	lsls	r3, r3, #24
 80093d2:	4910      	ldr	r1, [pc, #64]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	604b      	str	r3, [r1, #4]
 80093d8:	e021      	b.n	800941e <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093da:	4b0e      	ldr	r3, [pc, #56]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a0d      	ldr	r2, [pc, #52]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 80093e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093e6:	f7f9 f97f 	bl	80026e8 <HAL_GetTick>
 80093ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80093ec:	e008      	b.n	8009400 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093ee:	f7f9 f97b 	bl	80026e8 <HAL_GetTick>
 80093f2:	4602      	mov	r2, r0
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d901      	bls.n	8009400 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e2b9      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009400:	4b04      	ldr	r3, [pc, #16]	@ (8009414 <HAL_RCC_OscConfig+0x2ac>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1f0      	bne.n	80093ee <HAL_RCC_OscConfig+0x286>
 800940c:	e007      	b.n	800941e <HAL_RCC_OscConfig+0x2b6>
 800940e:	bf00      	nop
 8009410:	08011b7c 	.word	0x08011b7c
 8009414:	40021000 	.word	0x40021000
 8009418:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800941c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0308 	and.w	r3, r3, #8
 8009426:	2b00      	cmp	r3, #0
 8009428:	d049      	beq.n	80094be <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d008      	beq.n	8009444 <HAL_RCC_OscConfig+0x2dc>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d004      	beq.n	8009444 <HAL_RCC_OscConfig+0x2dc>
 800943a:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 800943e:	48a3      	ldr	r0, [pc, #652]	@ (80096cc <HAL_RCC_OscConfig+0x564>)
 8009440:	f7f8 ff90 	bl	8002364 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d01c      	beq.n	8009486 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800944c:	4ba0      	ldr	r3, [pc, #640]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 800944e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009452:	4a9f      	ldr	r2, [pc, #636]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 8009454:	f043 0301 	orr.w	r3, r3, #1
 8009458:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800945c:	f7f9 f944 	bl	80026e8 <HAL_GetTick>
 8009460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009462:	e008      	b.n	8009476 <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009464:	f7f9 f940 	bl	80026e8 <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	2b02      	cmp	r3, #2
 8009470:	d901      	bls.n	8009476 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8009472:	2303      	movs	r3, #3
 8009474:	e27e      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009476:	4b96      	ldr	r3, [pc, #600]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 8009478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800947c:	f003 0302 	and.w	r3, r3, #2
 8009480:	2b00      	cmp	r3, #0
 8009482:	d0ef      	beq.n	8009464 <HAL_RCC_OscConfig+0x2fc>
 8009484:	e01b      	b.n	80094be <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009486:	4b92      	ldr	r3, [pc, #584]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 8009488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800948c:	4a90      	ldr	r2, [pc, #576]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 800948e:	f023 0301 	bic.w	r3, r3, #1
 8009492:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009496:	f7f9 f927 	bl	80026e8 <HAL_GetTick>
 800949a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800949c:	e008      	b.n	80094b0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800949e:	f7f9 f923 	bl	80026e8 <HAL_GetTick>
 80094a2:	4602      	mov	r2, r0
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d901      	bls.n	80094b0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80094ac:	2303      	movs	r3, #3
 80094ae:	e261      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80094b0:	4b87      	ldr	r3, [pc, #540]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 80094b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094b6:	f003 0302 	and.w	r3, r3, #2
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1ef      	bne.n	800949e <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0304 	and.w	r3, r3, #4
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f000 80b7 	beq.w	800963a <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094cc:	2300      	movs	r3, #0
 80094ce:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00c      	beq.n	80094f2 <HAL_RCC_OscConfig+0x38a>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d008      	beq.n	80094f2 <HAL_RCC_OscConfig+0x38a>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	2b05      	cmp	r3, #5
 80094e6:	d004      	beq.n	80094f2 <HAL_RCC_OscConfig+0x38a>
 80094e8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80094ec:	4877      	ldr	r0, [pc, #476]	@ (80096cc <HAL_RCC_OscConfig+0x564>)
 80094ee:	f7f8 ff39 	bl	8002364 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80094f2:	4b77      	ldr	r3, [pc, #476]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 80094f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d101      	bne.n	8009502 <HAL_RCC_OscConfig+0x39a>
 80094fe:	2301      	movs	r3, #1
 8009500:	e000      	b.n	8009504 <HAL_RCC_OscConfig+0x39c>
 8009502:	2300      	movs	r3, #0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00d      	beq.n	8009524 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009508:	4b71      	ldr	r3, [pc, #452]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 800950a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800950c:	4a70      	ldr	r2, [pc, #448]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 800950e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009512:	6593      	str	r3, [r2, #88]	@ 0x58
 8009514:	4b6e      	ldr	r3, [pc, #440]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 8009516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800951c:	60fb      	str	r3, [r7, #12]
 800951e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009520:	2301      	movs	r3, #1
 8009522:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009524:	4b6b      	ldr	r3, [pc, #428]	@ (80096d4 <HAL_RCC_OscConfig+0x56c>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800952c:	2b00      	cmp	r3, #0
 800952e:	d118      	bne.n	8009562 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009530:	4b68      	ldr	r3, [pc, #416]	@ (80096d4 <HAL_RCC_OscConfig+0x56c>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a67      	ldr	r2, [pc, #412]	@ (80096d4 <HAL_RCC_OscConfig+0x56c>)
 8009536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800953a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800953c:	f7f9 f8d4 	bl	80026e8 <HAL_GetTick>
 8009540:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009542:	e008      	b.n	8009556 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009544:	f7f9 f8d0 	bl	80026e8 <HAL_GetTick>
 8009548:	4602      	mov	r2, r0
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	2b02      	cmp	r3, #2
 8009550:	d901      	bls.n	8009556 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e20e      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009556:	4b5f      	ldr	r3, [pc, #380]	@ (80096d4 <HAL_RCC_OscConfig+0x56c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800955e:	2b00      	cmp	r3, #0
 8009560:	d0f0      	beq.n	8009544 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d108      	bne.n	800957c <HAL_RCC_OscConfig+0x414>
 800956a:	4b59      	ldr	r3, [pc, #356]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 800956c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009570:	4a57      	ldr	r2, [pc, #348]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 8009572:	f043 0301 	orr.w	r3, r3, #1
 8009576:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800957a:	e024      	b.n	80095c6 <HAL_RCC_OscConfig+0x45e>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	2b05      	cmp	r3, #5
 8009582:	d110      	bne.n	80095a6 <HAL_RCC_OscConfig+0x43e>
 8009584:	4b52      	ldr	r3, [pc, #328]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 8009586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800958a:	4a51      	ldr	r2, [pc, #324]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 800958c:	f043 0304 	orr.w	r3, r3, #4
 8009590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009594:	4b4e      	ldr	r3, [pc, #312]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 8009596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800959a:	4a4d      	ldr	r2, [pc, #308]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 800959c:	f043 0301 	orr.w	r3, r3, #1
 80095a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80095a4:	e00f      	b.n	80095c6 <HAL_RCC_OscConfig+0x45e>
 80095a6:	4b4a      	ldr	r3, [pc, #296]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 80095a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ac:	4a48      	ldr	r2, [pc, #288]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 80095ae:	f023 0301 	bic.w	r3, r3, #1
 80095b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80095b6:	4b46      	ldr	r3, [pc, #280]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 80095b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095bc:	4a44      	ldr	r2, [pc, #272]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 80095be:	f023 0304 	bic.w	r3, r3, #4
 80095c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d016      	beq.n	80095fc <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095ce:	f7f9 f88b 	bl	80026e8 <HAL_GetTick>
 80095d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095d4:	e00a      	b.n	80095ec <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095d6:	f7f9 f887 	bl	80026e8 <HAL_GetTick>
 80095da:	4602      	mov	r2, r0
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d901      	bls.n	80095ec <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 80095e8:	2303      	movs	r3, #3
 80095ea:	e1c3      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095ec:	4b38      	ldr	r3, [pc, #224]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 80095ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095f2:	f003 0302 	and.w	r3, r3, #2
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d0ed      	beq.n	80095d6 <HAL_RCC_OscConfig+0x46e>
 80095fa:	e015      	b.n	8009628 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095fc:	f7f9 f874 	bl	80026e8 <HAL_GetTick>
 8009600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009602:	e00a      	b.n	800961a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009604:	f7f9 f870 	bl	80026e8 <HAL_GetTick>
 8009608:	4602      	mov	r2, r0
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009612:	4293      	cmp	r3, r2
 8009614:	d901      	bls.n	800961a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009616:	2303      	movs	r3, #3
 8009618:	e1ac      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800961a:	4b2d      	ldr	r3, [pc, #180]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 800961c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009620:	f003 0302 	and.w	r3, r3, #2
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1ed      	bne.n	8009604 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009628:	7ffb      	ldrb	r3, [r7, #31]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d105      	bne.n	800963a <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800962e:	4b28      	ldr	r3, [pc, #160]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 8009630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009632:	4a27      	ldr	r2, [pc, #156]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 8009634:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009638:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 0320 	and.w	r3, r3, #32
 8009642:	2b00      	cmp	r3, #0
 8009644:	d04f      	beq.n	80096e6 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d008      	beq.n	8009660 <HAL_RCC_OscConfig+0x4f8>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d004      	beq.n	8009660 <HAL_RCC_OscConfig+0x4f8>
 8009656:	f240 213b 	movw	r1, #571	@ 0x23b
 800965a:	481c      	ldr	r0, [pc, #112]	@ (80096cc <HAL_RCC_OscConfig+0x564>)
 800965c:	f7f8 fe82 	bl	8002364 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d01c      	beq.n	80096a2 <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009668:	4b19      	ldr	r3, [pc, #100]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 800966a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800966e:	4a18      	ldr	r2, [pc, #96]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 8009670:	f043 0301 	orr.w	r3, r3, #1
 8009674:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009678:	f7f9 f836 	bl	80026e8 <HAL_GetTick>
 800967c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800967e:	e008      	b.n	8009692 <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009680:	f7f9 f832 	bl	80026e8 <HAL_GetTick>
 8009684:	4602      	mov	r2, r0
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	2b02      	cmp	r3, #2
 800968c:	d901      	bls.n	8009692 <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 800968e:	2303      	movs	r3, #3
 8009690:	e170      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009692:	4b0f      	ldr	r3, [pc, #60]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 8009694:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009698:	f003 0302 	and.w	r3, r3, #2
 800969c:	2b00      	cmp	r3, #0
 800969e:	d0ef      	beq.n	8009680 <HAL_RCC_OscConfig+0x518>
 80096a0:	e021      	b.n	80096e6 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80096a2:	4b0b      	ldr	r3, [pc, #44]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 80096a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80096a8:	4a09      	ldr	r2, [pc, #36]	@ (80096d0 <HAL_RCC_OscConfig+0x568>)
 80096aa:	f023 0301 	bic.w	r3, r3, #1
 80096ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096b2:	f7f9 f819 	bl	80026e8 <HAL_GetTick>
 80096b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80096b8:	e00e      	b.n	80096d8 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80096ba:	f7f9 f815 	bl	80026e8 <HAL_GetTick>
 80096be:	4602      	mov	r2, r0
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d907      	bls.n	80096d8 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e153      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
 80096cc:	08011b7c 	.word	0x08011b7c
 80096d0:	40021000 	.word	0x40021000
 80096d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80096d8:	4b85      	ldr	r3, [pc, #532]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 80096da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80096de:	f003 0302 	and.w	r3, r3, #2
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1e9      	bne.n	80096ba <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	69db      	ldr	r3, [r3, #28]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00c      	beq.n	8009708 <HAL_RCC_OscConfig+0x5a0>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d008      	beq.n	8009708 <HAL_RCC_OscConfig+0x5a0>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	69db      	ldr	r3, [r3, #28]
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d004      	beq.n	8009708 <HAL_RCC_OscConfig+0x5a0>
 80096fe:	f44f 7119 	mov.w	r1, #612	@ 0x264
 8009702:	487c      	ldr	r0, [pc, #496]	@ (80098f4 <HAL_RCC_OscConfig+0x78c>)
 8009704:	f7f8 fe2e 	bl	8002364 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	2b00      	cmp	r3, #0
 800970e:	f000 8130 	beq.w	8009972 <HAL_RCC_OscConfig+0x80a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009712:	4b77      	ldr	r3, [pc, #476]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	f003 030c 	and.w	r3, r3, #12
 800971a:	2b0c      	cmp	r3, #12
 800971c:	f000 80e2 	beq.w	80098e4 <HAL_RCC_OscConfig+0x77c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	2b02      	cmp	r3, #2
 8009726:	f040 80bd 	bne.w	80098a4 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a1b      	ldr	r3, [r3, #32]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00c      	beq.n	800974c <HAL_RCC_OscConfig+0x5e4>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	2b02      	cmp	r3, #2
 8009738:	d008      	beq.n	800974c <HAL_RCC_OscConfig+0x5e4>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	2b03      	cmp	r3, #3
 8009740:	d004      	beq.n	800974c <HAL_RCC_OscConfig+0x5e4>
 8009742:	f240 216e 	movw	r1, #622	@ 0x26e
 8009746:	486b      	ldr	r0, [pc, #428]	@ (80098f4 <HAL_RCC_OscConfig+0x78c>)
 8009748:	f7f8 fe0c 	bl	8002364 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009750:	2b00      	cmp	r3, #0
 8009752:	d003      	beq.n	800975c <HAL_RCC_OscConfig+0x5f4>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009758:	2b10      	cmp	r3, #16
 800975a:	d904      	bls.n	8009766 <HAL_RCC_OscConfig+0x5fe>
 800975c:	f240 216f 	movw	r1, #623	@ 0x26f
 8009760:	4864      	ldr	r0, [pc, #400]	@ (80098f4 <HAL_RCC_OscConfig+0x78c>)
 8009762:	f7f8 fdff 	bl	8002364 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976a:	2b07      	cmp	r3, #7
 800976c:	d903      	bls.n	8009776 <HAL_RCC_OscConfig+0x60e>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009772:	2b7f      	cmp	r3, #127	@ 0x7f
 8009774:	d904      	bls.n	8009780 <HAL_RCC_OscConfig+0x618>
 8009776:	f44f 711c 	mov.w	r1, #624	@ 0x270
 800977a:	485e      	ldr	r0, [pc, #376]	@ (80098f4 <HAL_RCC_OscConfig+0x78c>)
 800977c:	f7f8 fdf2 	bl	8002364 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009784:	2b01      	cmp	r3, #1
 8009786:	d903      	bls.n	8009790 <HAL_RCC_OscConfig+0x628>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800978c:	2b1f      	cmp	r3, #31
 800978e:	d904      	bls.n	800979a <HAL_RCC_OscConfig+0x632>
 8009790:	f240 2171 	movw	r1, #625	@ 0x271
 8009794:	4857      	ldr	r0, [pc, #348]	@ (80098f4 <HAL_RCC_OscConfig+0x78c>)
 8009796:	f7f8 fde5 	bl	8002364 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d010      	beq.n	80097c4 <HAL_RCC_OscConfig+0x65c>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	d00c      	beq.n	80097c4 <HAL_RCC_OscConfig+0x65c>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ae:	2b06      	cmp	r3, #6
 80097b0:	d008      	beq.n	80097c4 <HAL_RCC_OscConfig+0x65c>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097b6:	2b08      	cmp	r3, #8
 80097b8:	d004      	beq.n	80097c4 <HAL_RCC_OscConfig+0x65c>
 80097ba:	f240 2172 	movw	r1, #626	@ 0x272
 80097be:	484d      	ldr	r0, [pc, #308]	@ (80098f4 <HAL_RCC_OscConfig+0x78c>)
 80097c0:	f7f8 fdd0 	bl	8002364 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d010      	beq.n	80097ee <HAL_RCC_OscConfig+0x686>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	d00c      	beq.n	80097ee <HAL_RCC_OscConfig+0x686>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097d8:	2b06      	cmp	r3, #6
 80097da:	d008      	beq.n	80097ee <HAL_RCC_OscConfig+0x686>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097e0:	2b08      	cmp	r3, #8
 80097e2:	d004      	beq.n	80097ee <HAL_RCC_OscConfig+0x686>
 80097e4:	f240 2173 	movw	r1, #627	@ 0x273
 80097e8:	4842      	ldr	r0, [pc, #264]	@ (80098f4 <HAL_RCC_OscConfig+0x78c>)
 80097ea:	f7f8 fdbb 	bl	8002364 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097ee:	4b40      	ldr	r3, [pc, #256]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a3f      	ldr	r2, [pc, #252]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 80097f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80097f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097fa:	f7f8 ff75 	bl	80026e8 <HAL_GetTick>
 80097fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009800:	e008      	b.n	8009814 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009802:	f7f8 ff71 	bl	80026e8 <HAL_GetTick>
 8009806:	4602      	mov	r2, r0
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	2b02      	cmp	r3, #2
 800980e:	d901      	bls.n	8009814 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e0af      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009814:	4b36      	ldr	r3, [pc, #216]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1f0      	bne.n	8009802 <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009820:	4b33      	ldr	r3, [pc, #204]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 8009822:	68da      	ldr	r2, [r3, #12]
 8009824:	4b34      	ldr	r3, [pc, #208]	@ (80098f8 <HAL_RCC_OscConfig+0x790>)
 8009826:	4013      	ands	r3, r2
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	6a11      	ldr	r1, [r2, #32]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009830:	3a01      	subs	r2, #1
 8009832:	0112      	lsls	r2, r2, #4
 8009834:	4311      	orrs	r1, r2
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800983a:	0212      	lsls	r2, r2, #8
 800983c:	4311      	orrs	r1, r2
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009842:	0852      	lsrs	r2, r2, #1
 8009844:	3a01      	subs	r2, #1
 8009846:	0552      	lsls	r2, r2, #21
 8009848:	4311      	orrs	r1, r2
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800984e:	0852      	lsrs	r2, r2, #1
 8009850:	3a01      	subs	r2, #1
 8009852:	0652      	lsls	r2, r2, #25
 8009854:	4311      	orrs	r1, r2
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800985a:	06d2      	lsls	r2, r2, #27
 800985c:	430a      	orrs	r2, r1
 800985e:	4924      	ldr	r1, [pc, #144]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 8009860:	4313      	orrs	r3, r2
 8009862:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009864:	4b22      	ldr	r3, [pc, #136]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a21      	ldr	r2, [pc, #132]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 800986a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800986e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009870:	4b1f      	ldr	r3, [pc, #124]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	4a1e      	ldr	r2, [pc, #120]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 8009876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800987a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800987c:	f7f8 ff34 	bl	80026e8 <HAL_GetTick>
 8009880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009882:	e008      	b.n	8009896 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009884:	f7f8 ff30 	bl	80026e8 <HAL_GetTick>
 8009888:	4602      	mov	r2, r0
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	2b02      	cmp	r3, #2
 8009890:	d901      	bls.n	8009896 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8009892:	2303      	movs	r3, #3
 8009894:	e06e      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009896:	4b16      	ldr	r3, [pc, #88]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d0f0      	beq.n	8009884 <HAL_RCC_OscConfig+0x71c>
 80098a2:	e066      	b.n	8009972 <HAL_RCC_OscConfig+0x80a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098a4:	4b12      	ldr	r3, [pc, #72]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a11      	ldr	r2, [pc, #68]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 80098aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098b0:	f7f8 ff1a 	bl	80026e8 <HAL_GetTick>
 80098b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098b6:	e008      	b.n	80098ca <HAL_RCC_OscConfig+0x762>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098b8:	f7f8 ff16 	bl	80026e8 <HAL_GetTick>
 80098bc:	4602      	mov	r2, r0
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d901      	bls.n	80098ca <HAL_RCC_OscConfig+0x762>
          {
            return HAL_TIMEOUT;
 80098c6:	2303      	movs	r3, #3
 80098c8:	e054      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098ca:	4b09      	ldr	r3, [pc, #36]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1f0      	bne.n	80098b8 <HAL_RCC_OscConfig+0x750>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80098d6:	4b06      	ldr	r3, [pc, #24]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 80098d8:	68da      	ldr	r2, [r3, #12]
 80098da:	4905      	ldr	r1, [pc, #20]	@ (80098f0 <HAL_RCC_OscConfig+0x788>)
 80098dc:	4b07      	ldr	r3, [pc, #28]	@ (80098fc <HAL_RCC_OscConfig+0x794>)
 80098de:	4013      	ands	r3, r2
 80098e0:	60cb      	str	r3, [r1, #12]
 80098e2:	e046      	b.n	8009972 <HAL_RCC_OscConfig+0x80a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	69db      	ldr	r3, [r3, #28]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d109      	bne.n	8009900 <HAL_RCC_OscConfig+0x798>
      {
        return HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e041      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
 80098f0:	40021000 	.word	0x40021000
 80098f4:	08011b7c 	.word	0x08011b7c
 80098f8:	019f800c 	.word	0x019f800c
 80098fc:	feeefffc 	.word	0xfeeefffc
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009900:	4b1e      	ldr	r3, [pc, #120]	@ (800997c <HAL_RCC_OscConfig+0x814>)
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f003 0203 	and.w	r2, r3, #3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a1b      	ldr	r3, [r3, #32]
 8009910:	429a      	cmp	r2, r3
 8009912:	d12c      	bne.n	800996e <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800991e:	3b01      	subs	r3, #1
 8009920:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009922:	429a      	cmp	r2, r3
 8009924:	d123      	bne.n	800996e <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009930:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009932:	429a      	cmp	r2, r3
 8009934:	d11b      	bne.n	800996e <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009940:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009942:	429a      	cmp	r2, r3
 8009944:	d113      	bne.n	800996e <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009950:	085b      	lsrs	r3, r3, #1
 8009952:	3b01      	subs	r3, #1
 8009954:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009956:	429a      	cmp	r2, r3
 8009958:	d109      	bne.n	800996e <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009964:	085b      	lsrs	r3, r3, #1
 8009966:	3b01      	subs	r3, #1
 8009968:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800996a:	429a      	cmp	r2, r3
 800996c:	d001      	beq.n	8009972 <HAL_RCC_OscConfig+0x80a>
      {
        return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e000      	b.n	8009974 <HAL_RCC_OscConfig+0x80c>
      }
    }
  }
  }

  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3720      	adds	r7, #32
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	40021000 	.word	0x40021000

08009980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800998a:	2300      	movs	r3, #0
 800998c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d101      	bne.n	8009998 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	e1e0      	b.n	8009d5a <HAL_RCC_ClockConfig+0x3da>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 030f 	and.w	r3, r3, #15
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d003      	beq.n	80099ac <HAL_RCC_ClockConfig+0x2c>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b0f      	cmp	r3, #15
 80099aa:	d904      	bls.n	80099b6 <HAL_RCC_ClockConfig+0x36>
 80099ac:	f240 310b 	movw	r1, #779	@ 0x30b
 80099b0:	4869      	ldr	r0, [pc, #420]	@ (8009b58 <HAL_RCC_ClockConfig+0x1d8>)
 80099b2:	f7f8 fcd7 	bl	8002364 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d031      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xa0>
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d02e      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xa0>
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d02b      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xa0>
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	2b03      	cmp	r3, #3
 80099cc:	d028      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xa0>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	d025      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xa0>
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	2b05      	cmp	r3, #5
 80099d8:	d022      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xa0>
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	2b06      	cmp	r3, #6
 80099de:	d01f      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xa0>
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	2b07      	cmp	r3, #7
 80099e4:	d01c      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xa0>
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	2b08      	cmp	r3, #8
 80099ea:	d019      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xa0>
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	2b09      	cmp	r3, #9
 80099f0:	d016      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xa0>
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b0a      	cmp	r3, #10
 80099f6:	d013      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xa0>
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	2b0b      	cmp	r3, #11
 80099fc:	d010      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xa0>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	2b0c      	cmp	r3, #12
 8009a02:	d00d      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xa0>
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	2b0d      	cmp	r3, #13
 8009a08:	d00a      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xa0>
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	2b0e      	cmp	r3, #14
 8009a0e:	d007      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xa0>
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	2b0f      	cmp	r3, #15
 8009a14:	d004      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xa0>
 8009a16:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 8009a1a:	484f      	ldr	r0, [pc, #316]	@ (8009b58 <HAL_RCC_ClockConfig+0x1d8>)
 8009a1c:	f7f8 fca2 	bl	8002364 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009a20:	4b4e      	ldr	r3, [pc, #312]	@ (8009b5c <HAL_RCC_ClockConfig+0x1dc>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 030f 	and.w	r3, r3, #15
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d910      	bls.n	8009a50 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a2e:	4b4b      	ldr	r3, [pc, #300]	@ (8009b5c <HAL_RCC_ClockConfig+0x1dc>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f023 020f 	bic.w	r2, r3, #15
 8009a36:	4949      	ldr	r1, [pc, #292]	@ (8009b5c <HAL_RCC_ClockConfig+0x1dc>)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a3e:	4b47      	ldr	r3, [pc, #284]	@ (8009b5c <HAL_RCC_ClockConfig+0x1dc>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 030f 	and.w	r3, r3, #15
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d001      	beq.n	8009a50 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e184      	b.n	8009d5a <HAL_RCC_ClockConfig+0x3da>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 808e 	beq.w	8009b7a <HAL_RCC_ClockConfig+0x1fa>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d00c      	beq.n	8009a80 <HAL_RCC_ClockConfig+0x100>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d008      	beq.n	8009a80 <HAL_RCC_ClockConfig+0x100>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d004      	beq.n	8009a80 <HAL_RCC_ClockConfig+0x100>
 8009a76:	f240 3123 	movw	r1, #803	@ 0x323
 8009a7a:	4837      	ldr	r0, [pc, #220]	@ (8009b58 <HAL_RCC_ClockConfig+0x1d8>)
 8009a7c:	f7f8 fc72 	bl	8002364 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	2b03      	cmp	r3, #3
 8009a86:	d129      	bne.n	8009adc <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a88:	4b35      	ldr	r3, [pc, #212]	@ (8009b60 <HAL_RCC_ClockConfig+0x1e0>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d101      	bne.n	8009a98 <HAL_RCC_ClockConfig+0x118>
      {
        return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e160      	b.n	8009d5a <HAL_RCC_ClockConfig+0x3da>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009a98:	f000 fa66 	bl	8009f68 <RCC_GetSysClockFreqFromPLLSource>
 8009a9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	4a30      	ldr	r2, [pc, #192]	@ (8009b64 <HAL_RCC_ClockConfig+0x1e4>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d93f      	bls.n	8009b26 <HAL_RCC_ClockConfig+0x1a6>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8009b60 <HAL_RCC_ClockConfig+0x1e0>)
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d009      	beq.n	8009ac6 <HAL_RCC_ClockConfig+0x146>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d033      	beq.n	8009b26 <HAL_RCC_ClockConfig+0x1a6>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d12f      	bne.n	8009b26 <HAL_RCC_ClockConfig+0x1a6>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009ac6:	4b26      	ldr	r3, [pc, #152]	@ (8009b60 <HAL_RCC_ClockConfig+0x1e0>)
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009ace:	4a24      	ldr	r2, [pc, #144]	@ (8009b60 <HAL_RCC_ClockConfig+0x1e0>)
 8009ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ad4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009ad6:	2380      	movs	r3, #128	@ 0x80
 8009ad8:	617b      	str	r3, [r7, #20]
 8009ada:	e024      	b.n	8009b26 <HAL_RCC_ClockConfig+0x1a6>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d107      	bne.n	8009af4 <HAL_RCC_ClockConfig+0x174>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8009b60 <HAL_RCC_ClockConfig+0x1e0>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d109      	bne.n	8009b04 <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	e132      	b.n	8009d5a <HAL_RCC_ClockConfig+0x3da>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009af4:	4b1a      	ldr	r3, [pc, #104]	@ (8009b60 <HAL_RCC_ClockConfig+0x1e0>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d101      	bne.n	8009b04 <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e12a      	b.n	8009d5a <HAL_RCC_ClockConfig+0x3da>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009b04:	f000 f9ce 	bl	8009ea4 <HAL_RCC_GetSysClockFreq>
 8009b08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	4a15      	ldr	r2, [pc, #84]	@ (8009b64 <HAL_RCC_ClockConfig+0x1e4>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d909      	bls.n	8009b26 <HAL_RCC_ClockConfig+0x1a6>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009b12:	4b13      	ldr	r3, [pc, #76]	@ (8009b60 <HAL_RCC_ClockConfig+0x1e0>)
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b1a:	4a11      	ldr	r2, [pc, #68]	@ (8009b60 <HAL_RCC_ClockConfig+0x1e0>)
 8009b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009b22:	2380      	movs	r3, #128	@ 0x80
 8009b24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b26:	4b0e      	ldr	r3, [pc, #56]	@ (8009b60 <HAL_RCC_ClockConfig+0x1e0>)
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	f023 0203 	bic.w	r2, r3, #3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	490b      	ldr	r1, [pc, #44]	@ (8009b60 <HAL_RCC_ClockConfig+0x1e0>)
 8009b34:	4313      	orrs	r3, r2
 8009b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b38:	f7f8 fdd6 	bl	80026e8 <HAL_GetTick>
 8009b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b3e:	e013      	b.n	8009b68 <HAL_RCC_ClockConfig+0x1e8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b40:	f7f8 fdd2 	bl	80026e8 <HAL_GetTick>
 8009b44:	4602      	mov	r2, r0
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d90a      	bls.n	8009b68 <HAL_RCC_ClockConfig+0x1e8>
      {
        return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e101      	b.n	8009d5a <HAL_RCC_ClockConfig+0x3da>
 8009b56:	bf00      	nop
 8009b58:	08011b7c 	.word	0x08011b7c
 8009b5c:	40022000 	.word	0x40022000
 8009b60:	40021000 	.word	0x40021000
 8009b64:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b68:	4b7e      	ldr	r3, [pc, #504]	@ (8009d64 <HAL_RCC_ClockConfig+0x3e4>)
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	f003 020c 	and.w	r2, r3, #12
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d1e2      	bne.n	8009b40 <HAL_RCC_ClockConfig+0x1c0>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 0302 	and.w	r3, r3, #2
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d04c      	beq.n	8009c20 <HAL_RCC_ClockConfig+0x2a0>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0304 	and.w	r3, r3, #4
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d005      	beq.n	8009b9e <HAL_RCC_ClockConfig+0x21e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b92:	4b74      	ldr	r3, [pc, #464]	@ (8009d64 <HAL_RCC_ClockConfig+0x3e4>)
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	4a73      	ldr	r2, [pc, #460]	@ (8009d64 <HAL_RCC_ClockConfig+0x3e4>)
 8009b98:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009b9c:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0308 	and.w	r3, r3, #8
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d007      	beq.n	8009bba <HAL_RCC_ClockConfig+0x23a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009baa:	4b6e      	ldr	r3, [pc, #440]	@ (8009d64 <HAL_RCC_ClockConfig+0x3e4>)
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009bb2:	4a6c      	ldr	r2, [pc, #432]	@ (8009d64 <HAL_RCC_ClockConfig+0x3e4>)
 8009bb4:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009bb8:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d024      	beq.n	8009c0c <HAL_RCC_ClockConfig+0x28c>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	2b80      	cmp	r3, #128	@ 0x80
 8009bc8:	d020      	beq.n	8009c0c <HAL_RCC_ClockConfig+0x28c>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	2b90      	cmp	r3, #144	@ 0x90
 8009bd0:	d01c      	beq.n	8009c0c <HAL_RCC_ClockConfig+0x28c>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	2ba0      	cmp	r3, #160	@ 0xa0
 8009bd8:	d018      	beq.n	8009c0c <HAL_RCC_ClockConfig+0x28c>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	2bb0      	cmp	r3, #176	@ 0xb0
 8009be0:	d014      	beq.n	8009c0c <HAL_RCC_ClockConfig+0x28c>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009be8:	d010      	beq.n	8009c0c <HAL_RCC_ClockConfig+0x28c>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	2bd0      	cmp	r3, #208	@ 0xd0
 8009bf0:	d00c      	beq.n	8009c0c <HAL_RCC_ClockConfig+0x28c>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	2be0      	cmp	r3, #224	@ 0xe0
 8009bf8:	d008      	beq.n	8009c0c <HAL_RCC_ClockConfig+0x28c>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	2bf0      	cmp	r3, #240	@ 0xf0
 8009c00:	d004      	beq.n	8009c0c <HAL_RCC_ClockConfig+0x28c>
 8009c02:	f240 317a 	movw	r1, #890	@ 0x37a
 8009c06:	4858      	ldr	r0, [pc, #352]	@ (8009d68 <HAL_RCC_ClockConfig+0x3e8>)
 8009c08:	f7f8 fbac 	bl	8002364 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c0c:	4b55      	ldr	r3, [pc, #340]	@ (8009d64 <HAL_RCC_ClockConfig+0x3e4>)
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	4952      	ldr	r1, [pc, #328]	@ (8009d64 <HAL_RCC_ClockConfig+0x3e4>)
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	608b      	str	r3, [r1, #8]
 8009c1e:	e008      	b.n	8009c32 <HAL_RCC_ClockConfig+0x2b2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	2b80      	cmp	r3, #128	@ 0x80
 8009c24:	d105      	bne.n	8009c32 <HAL_RCC_ClockConfig+0x2b2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009c26:	4b4f      	ldr	r3, [pc, #316]	@ (8009d64 <HAL_RCC_ClockConfig+0x3e4>)
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	4a4e      	ldr	r2, [pc, #312]	@ (8009d64 <HAL_RCC_ClockConfig+0x3e4>)
 8009c2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009c32:	4b4e      	ldr	r3, [pc, #312]	@ (8009d6c <HAL_RCC_ClockConfig+0x3ec>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 030f 	and.w	r3, r3, #15
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d21d      	bcs.n	8009c7c <HAL_RCC_ClockConfig+0x2fc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c40:	4b4a      	ldr	r3, [pc, #296]	@ (8009d6c <HAL_RCC_ClockConfig+0x3ec>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f023 020f 	bic.w	r2, r3, #15
 8009c48:	4948      	ldr	r1, [pc, #288]	@ (8009d6c <HAL_RCC_ClockConfig+0x3ec>)
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009c50:	f7f8 fd4a 	bl	80026e8 <HAL_GetTick>
 8009c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c56:	e00a      	b.n	8009c6e <HAL_RCC_ClockConfig+0x2ee>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c58:	f7f8 fd46 	bl	80026e8 <HAL_GetTick>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d901      	bls.n	8009c6e <HAL_RCC_ClockConfig+0x2ee>
      {
        return HAL_TIMEOUT;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e075      	b.n	8009d5a <HAL_RCC_ClockConfig+0x3da>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8009d6c <HAL_RCC_ClockConfig+0x3ec>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 030f 	and.w	r3, r3, #15
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d1ed      	bne.n	8009c58 <HAL_RCC_ClockConfig+0x2d8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0304 	and.w	r3, r3, #4
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d025      	beq.n	8009cd4 <HAL_RCC_ClockConfig+0x354>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d018      	beq.n	8009cc2 <HAL_RCC_ClockConfig+0x342>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c98:	d013      	beq.n	8009cc2 <HAL_RCC_ClockConfig+0x342>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009ca2:	d00e      	beq.n	8009cc2 <HAL_RCC_ClockConfig+0x342>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009cac:	d009      	beq.n	8009cc2 <HAL_RCC_ClockConfig+0x342>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009cb6:	d004      	beq.n	8009cc2 <HAL_RCC_ClockConfig+0x342>
 8009cb8:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8009cbc:	482a      	ldr	r0, [pc, #168]	@ (8009d68 <HAL_RCC_ClockConfig+0x3e8>)
 8009cbe:	f7f8 fb51 	bl	8002364 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009cc2:	4b28      	ldr	r3, [pc, #160]	@ (8009d64 <HAL_RCC_ClockConfig+0x3e4>)
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	4925      	ldr	r1, [pc, #148]	@ (8009d64 <HAL_RCC_ClockConfig+0x3e4>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f003 0308 	and.w	r3, r3, #8
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d026      	beq.n	8009d2e <HAL_RCC_ClockConfig+0x3ae>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d018      	beq.n	8009d1a <HAL_RCC_ClockConfig+0x39a>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cf0:	d013      	beq.n	8009d1a <HAL_RCC_ClockConfig+0x39a>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009cfa:	d00e      	beq.n	8009d1a <HAL_RCC_ClockConfig+0x39a>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009d04:	d009      	beq.n	8009d1a <HAL_RCC_ClockConfig+0x39a>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009d0e:	d004      	beq.n	8009d1a <HAL_RCC_ClockConfig+0x39a>
 8009d10:	f240 31a3 	movw	r1, #931	@ 0x3a3
 8009d14:	4814      	ldr	r0, [pc, #80]	@ (8009d68 <HAL_RCC_ClockConfig+0x3e8>)
 8009d16:	f7f8 fb25 	bl	8002364 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d1a:	4b12      	ldr	r3, [pc, #72]	@ (8009d64 <HAL_RCC_ClockConfig+0x3e4>)
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	00db      	lsls	r3, r3, #3
 8009d28:	490e      	ldr	r1, [pc, #56]	@ (8009d64 <HAL_RCC_ClockConfig+0x3e4>)
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009d2e:	f000 f8b9 	bl	8009ea4 <HAL_RCC_GetSysClockFreq>
 8009d32:	4602      	mov	r2, r0
 8009d34:	4b0b      	ldr	r3, [pc, #44]	@ (8009d64 <HAL_RCC_ClockConfig+0x3e4>)
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	091b      	lsrs	r3, r3, #4
 8009d3a:	f003 030f 	and.w	r3, r3, #15
 8009d3e:	490c      	ldr	r1, [pc, #48]	@ (8009d70 <HAL_RCC_ClockConfig+0x3f0>)
 8009d40:	5ccb      	ldrb	r3, [r1, r3]
 8009d42:	f003 031f 	and.w	r3, r3, #31
 8009d46:	fa22 f303 	lsr.w	r3, r2, r3
 8009d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8009d74 <HAL_RCC_ClockConfig+0x3f4>)
 8009d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009d78 <HAL_RCC_ClockConfig+0x3f8>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7f8 fc7c 	bl	8002650 <HAL_InitTick>
 8009d58:	4603      	mov	r3, r0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3718      	adds	r7, #24
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	40021000 	.word	0x40021000
 8009d68:	08011b7c 	.word	0x08011b7c
 8009d6c:	40022000 	.word	0x40022000
 8009d70:	08011d8c 	.word	0x08011d8c
 8009d74:	20000000 	.word	0x20000000
 8009d78:	20000004 	.word	0x20000004

08009d7c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b08c      	sub	sp, #48	@ 0x30
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
  uint32_t mcoindex;
  uint32_t mco_gpio_index;
  GPIO_TypeDef * mco_gpio_port;

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d8e:	d008      	beq.n	8009da2 <HAL_RCC_MCOConfig+0x26>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4a41      	ldr	r2, [pc, #260]	@ (8009e98 <HAL_RCC_MCOConfig+0x11c>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d004      	beq.n	8009da2 <HAL_RCC_MCOConfig+0x26>
 8009d98:	f240 31ea 	movw	r1, #1002	@ 0x3ea
 8009d9c:	483f      	ldr	r0, [pc, #252]	@ (8009e9c <HAL_RCC_MCOConfig+0x120>)
 8009d9e:	f7f8 fae1 	bl	8002364 <assert_failed>

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8009da2:	2302      	movs	r3, #2
 8009da4:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009da6:	2303      	movs	r3, #3
 8009da8:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8009daa:	2300      	movs	r3, #0
 8009dac:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009db4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	0c1b      	lsrs	r3, r3, #16
 8009dba:	f003 030f 	and.w	r3, r3, #15
 8009dbe:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8009dc2:	029b      	lsls	r3, r3, #10
 8009dc4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	0c1b      	lsrs	r3, r3, #16
 8009dca:	f003 030f 	and.w	r3, r3, #15
 8009dce:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8009dd0:	4b33      	ldr	r3, [pc, #204]	@ (8009ea0 <HAL_RCC_MCOConfig+0x124>)
 8009dd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009dd4:	2101      	movs	r1, #1
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ddc:	4930      	ldr	r1, [pc, #192]	@ (8009ea0 <HAL_RCC_MCOConfig+0x124>)
 8009dde:	4313      	orrs	r3, r2
 8009de0:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	0d1b      	lsrs	r3, r3, #20
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8009df0:	f107 0310 	add.w	r3, r7, #16
 8009df4:	4619      	mov	r1, r3
 8009df6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009df8:	f7fb fd6e 	bl	80058d8 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8009dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d145      	bne.n	8009e8e <HAL_RCC_MCOConfig+0x112>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d014      	beq.n	8009e32 <HAL_RCC_MCOConfig+0xb6>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e0e:	d010      	beq.n	8009e32 <HAL_RCC_MCOConfig+0xb6>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e16:	d00c      	beq.n	8009e32 <HAL_RCC_MCOConfig+0xb6>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009e1e:	d008      	beq.n	8009e32 <HAL_RCC_MCOConfig+0xb6>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e26:	d004      	beq.n	8009e32 <HAL_RCC_MCOConfig+0xb6>
 8009e28:	f240 4102 	movw	r1, #1026	@ 0x402
 8009e2c:	481b      	ldr	r0, [pc, #108]	@ (8009e9c <HAL_RCC_MCOConfig+0x120>)
 8009e2e:	f7f8 fa99 	bl	8002364 <assert_failed>
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d020      	beq.n	8009e7a <HAL_RCC_MCOConfig+0xfe>
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e3e:	d01c      	beq.n	8009e7a <HAL_RCC_MCOConfig+0xfe>
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009e46:	d018      	beq.n	8009e7a <HAL_RCC_MCOConfig+0xfe>
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009e4e:	d014      	beq.n	8009e7a <HAL_RCC_MCOConfig+0xfe>
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009e56:	d010      	beq.n	8009e7a <HAL_RCC_MCOConfig+0xfe>
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8009e5e:	d00c      	beq.n	8009e7a <HAL_RCC_MCOConfig+0xfe>
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 8009e66:	d008      	beq.n	8009e7a <HAL_RCC_MCOConfig+0xfe>
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e6e:	d004      	beq.n	8009e7a <HAL_RCC_MCOConfig+0xfe>
 8009e70:	f240 4103 	movw	r1, #1027	@ 0x403
 8009e74:	4809      	ldr	r0, [pc, #36]	@ (8009e9c <HAL_RCC_MCOConfig+0x120>)
 8009e76:	f7f8 fa75 	bl	8002364 <assert_failed>
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8009e7a:	4b09      	ldr	r3, [pc, #36]	@ (8009ea0 <HAL_RCC_MCOConfig+0x124>)
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009e82:	68b9      	ldr	r1, [r7, #8]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	430b      	orrs	r3, r1
 8009e88:	4905      	ldr	r1, [pc, #20]	@ (8009ea0 <HAL_RCC_MCOConfig+0x124>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	608b      	str	r3, [r1, #8]
  }
}
 8009e8e:	bf00      	nop
 8009e90:	3730      	adds	r7, #48	@ 0x30
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	00060400 	.word	0x00060400
 8009e9c:	08011b7c 	.word	0x08011b7c
 8009ea0:	40021000 	.word	0x40021000

08009ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b087      	sub	sp, #28
 8009ea8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8009f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	f003 030c 	and.w	r3, r3, #12
 8009eb2:	2b04      	cmp	r3, #4
 8009eb4:	d102      	bne.n	8009ebc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8009f60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009eb8:	613b      	str	r3, [r7, #16]
 8009eba:	e047      	b.n	8009f4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009ebc:	4b27      	ldr	r3, [pc, #156]	@ (8009f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	f003 030c 	and.w	r3, r3, #12
 8009ec4:	2b08      	cmp	r3, #8
 8009ec6:	d102      	bne.n	8009ece <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009ec8:	4b26      	ldr	r3, [pc, #152]	@ (8009f64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009eca:	613b      	str	r3, [r7, #16]
 8009ecc:	e03e      	b.n	8009f4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009ece:	4b23      	ldr	r3, [pc, #140]	@ (8009f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	f003 030c 	and.w	r3, r3, #12
 8009ed6:	2b0c      	cmp	r3, #12
 8009ed8:	d136      	bne.n	8009f48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009eda:	4b20      	ldr	r3, [pc, #128]	@ (8009f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	f003 0303 	and.w	r3, r3, #3
 8009ee2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8009f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	091b      	lsrs	r3, r3, #4
 8009eea:	f003 030f 	and.w	r3, r3, #15
 8009eee:	3301      	adds	r3, #1
 8009ef0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	d10c      	bne.n	8009f12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8009f64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f00:	4a16      	ldr	r2, [pc, #88]	@ (8009f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f02:	68d2      	ldr	r2, [r2, #12]
 8009f04:	0a12      	lsrs	r2, r2, #8
 8009f06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009f0a:	fb02 f303 	mul.w	r3, r2, r3
 8009f0e:	617b      	str	r3, [r7, #20]
      break;
 8009f10:	e00c      	b.n	8009f2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009f12:	4a13      	ldr	r2, [pc, #76]	@ (8009f60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f1a:	4a10      	ldr	r2, [pc, #64]	@ (8009f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f1c:	68d2      	ldr	r2, [r2, #12]
 8009f1e:	0a12      	lsrs	r2, r2, #8
 8009f20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009f24:	fb02 f303 	mul.w	r3, r2, r3
 8009f28:	617b      	str	r3, [r7, #20]
      break;
 8009f2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	0e5b      	lsrs	r3, r3, #25
 8009f32:	f003 0303 	and.w	r3, r3, #3
 8009f36:	3301      	adds	r3, #1
 8009f38:	005b      	lsls	r3, r3, #1
 8009f3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f44:	613b      	str	r3, [r7, #16]
 8009f46:	e001      	b.n	8009f4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009f4c:	693b      	ldr	r3, [r7, #16]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	40021000 	.word	0x40021000
 8009f60:	00f42400 	.word	0x00f42400
 8009f64:	02dc6c00 	.word	0x02dc6c00

08009f68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b087      	sub	sp, #28
 8009f6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8009fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	f003 0303 	and.w	r3, r3, #3
 8009f76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009f78:	4b1b      	ldr	r3, [pc, #108]	@ (8009fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	091b      	lsrs	r3, r3, #4
 8009f7e:	f003 030f 	and.w	r3, r3, #15
 8009f82:	3301      	adds	r3, #1
 8009f84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	2b03      	cmp	r3, #3
 8009f8a:	d10c      	bne.n	8009fa6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009f8c:	4a17      	ldr	r2, [pc, #92]	@ (8009fec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f94:	4a14      	ldr	r2, [pc, #80]	@ (8009fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009f96:	68d2      	ldr	r2, [r2, #12]
 8009f98:	0a12      	lsrs	r2, r2, #8
 8009f9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009f9e:	fb02 f303 	mul.w	r3, r2, r3
 8009fa2:	617b      	str	r3, [r7, #20]
    break;
 8009fa4:	e00c      	b.n	8009fc0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009fa6:	4a12      	ldr	r2, [pc, #72]	@ (8009ff0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fae:	4a0e      	ldr	r2, [pc, #56]	@ (8009fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009fb0:	68d2      	ldr	r2, [r2, #12]
 8009fb2:	0a12      	lsrs	r2, r2, #8
 8009fb4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009fb8:	fb02 f303 	mul.w	r3, r2, r3
 8009fbc:	617b      	str	r3, [r7, #20]
    break;
 8009fbe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009fc0:	4b09      	ldr	r3, [pc, #36]	@ (8009fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	0e5b      	lsrs	r3, r3, #25
 8009fc6:	f003 0303 	and.w	r3, r3, #3
 8009fca:	3301      	adds	r3, #1
 8009fcc:	005b      	lsls	r3, r3, #1
 8009fce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fd8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009fda:	687b      	ldr	r3, [r7, #4]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	371c      	adds	r7, #28
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	40021000 	.word	0x40021000
 8009fec:	02dc6c00 	.word	0x02dc6c00
 8009ff0:	00f42400 	.word	0x00f42400

08009ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a000:	2300      	movs	r3, #0
 800a002:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 0301 	and.w	r3, r3, #1
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d175      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 0302 	and.w	r3, r3, #2
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d16f      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 0304 	and.w	r3, r3, #4
 800a024:	2b00      	cmp	r3, #0
 800a026:	d169      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 0308 	and.w	r3, r3, #8
 800a030:	2b00      	cmp	r3, #0
 800a032:	d163      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 0310 	and.w	r3, r3, #16
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d15d      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0320 	and.w	r3, r3, #32
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d157      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a054:	2b00      	cmp	r3, #0
 800a056:	d151      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a060:	2b00      	cmp	r3, #0
 800a062:	d14b      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d145      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d13f      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a084:	2b00      	cmp	r3, #0
 800a086:	d139      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a090:	2b00      	cmp	r3, #0
 800a092:	d133      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d12d      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d127      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d121      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d11b      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d115      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10f      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d109      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d103      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a0f4:	2183      	movs	r1, #131	@ 0x83
 800a0f6:	4855      	ldr	r0, [pc, #340]	@ (800a24c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a0f8:	f7f8 f934 	bl	8002364 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 80b2 	beq.w	800a26e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a10a:	2300      	movs	r3, #0
 800a10c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a112:	2b00      	cmp	r3, #0
 800a114:	d012      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a11a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a11e:	d00d      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a128:	d008      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a12e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a132:	d003      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800a134:	218b      	movs	r1, #139	@ 0x8b
 800a136:	4845      	ldr	r0, [pc, #276]	@ (800a24c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a138:	f7f8 f914 	bl	8002364 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a13c:	4b44      	ldr	r3, [pc, #272]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a13e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10d      	bne.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a148:	4b41      	ldr	r3, [pc, #260]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a14a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a14c:	4a40      	ldr	r2, [pc, #256]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a14e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a152:	6593      	str	r3, [r2, #88]	@ 0x58
 800a154:	4b3e      	ldr	r3, [pc, #248]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a15c:	60bb      	str	r3, [r7, #8]
 800a15e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a160:	2301      	movs	r3, #1
 800a162:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a164:	4b3b      	ldr	r3, [pc, #236]	@ (800a254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a3a      	ldr	r2, [pc, #232]	@ (800a254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a16a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a16e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a170:	f7f8 faba 	bl	80026e8 <HAL_GetTick>
 800a174:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a176:	e009      	b.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a178:	f7f8 fab6 	bl	80026e8 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	2b02      	cmp	r3, #2
 800a184:	d902      	bls.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        ret = HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	74fb      	strb	r3, [r7, #19]
        break;
 800a18a:	e005      	b.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a18c:	4b31      	ldr	r3, [pc, #196]	@ (800a254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a194:	2b00      	cmp	r3, #0
 800a196:	d0ef      	beq.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x184>
      }
    }

    if(ret == HAL_OK)
 800a198:	7cfb      	ldrb	r3, [r7, #19]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d15c      	bne.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x264>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a19e:	4b2c      	ldr	r3, [pc, #176]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a1a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1a8:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d01e      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d019      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a1ba:	4b25      	ldr	r3, [pc, #148]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a1bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a1c6:	4b22      	ldr	r3, [pc, #136]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a1c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1cc:	4a20      	ldr	r2, [pc, #128]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a1ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a1d6:	4b1e      	ldr	r3, [pc, #120]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1dc:	4a1c      	ldr	r2, [pc, #112]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a1de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a1e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a1e6:	4a1a      	ldr	r2, [pc, #104]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f003 0301 	and.w	r3, r3, #1
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d016      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f8:	f7f8 fa76 	bl	80026e8 <HAL_GetTick>
 800a1fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1fe:	e00b      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a200:	f7f8 fa72 	bl	80026e8 <HAL_GetTick>
 800a204:	4602      	mov	r2, r0
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a20e:	4293      	cmp	r3, r2
 800a210:	d902      	bls.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800a212:	2303      	movs	r3, #3
 800a214:	74fb      	strb	r3, [r7, #19]
            break;
 800a216:	e006      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a218:	4b0d      	ldr	r3, [pc, #52]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a21a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a21e:	f003 0302 	and.w	r3, r3, #2
 800a222:	2b00      	cmp	r3, #0
 800a224:	d0ec      	beq.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a226:	7cfb      	ldrb	r3, [r7, #19]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10b      	bne.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a22c:	4b08      	ldr	r3, [pc, #32]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a22e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a232:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a23a:	4905      	ldr	r1, [pc, #20]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a23c:	4313      	orrs	r3, r2
 800a23e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a242:	e00b      	b.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x268>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a244:	7cfb      	ldrb	r3, [r7, #19]
 800a246:	74bb      	strb	r3, [r7, #18]
 800a248:	e008      	b.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x268>
 800a24a:	bf00      	nop
 800a24c:	08011bec 	.word	0x08011bec
 800a250:	40021000 	.word	0x40021000
 800a254:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a258:	7cfb      	ldrb	r3, [r7, #19]
 800a25a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a25c:	7c7b      	ldrb	r3, [r7, #17]
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d105      	bne.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a262:	4b9a      	ldr	r3, [pc, #616]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a266:	4a99      	ldr	r2, [pc, #612]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a268:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a26c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 0301 	and.w	r3, r3, #1
 800a276:	2b00      	cmp	r3, #0
 800a278:	d01e      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00f      	beq.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d00b      	beq.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	2b03      	cmp	r3, #3
 800a290:	d007      	beq.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	2b02      	cmp	r3, #2
 800a298:	d003      	beq.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800a29a:	21e0      	movs	r1, #224	@ 0xe0
 800a29c:	488c      	ldr	r0, [pc, #560]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800a29e:	f7f8 f861 	bl	8002364 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a2a2:	4b8a      	ldr	r3, [pc, #552]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a2a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2a8:	f023 0203 	bic.w	r2, r3, #3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	4986      	ldr	r1, [pc, #536]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0302 	and.w	r3, r3, #2
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d01e      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00f      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	2b04      	cmp	r3, #4
 800a2d2:	d00b      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	2b0c      	cmp	r3, #12
 800a2da:	d007      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	2b08      	cmp	r3, #8
 800a2e2:	d003      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800a2e4:	21ea      	movs	r1, #234	@ 0xea
 800a2e6:	487a      	ldr	r0, [pc, #488]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800a2e8:	f7f8 f83c 	bl	8002364 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a2ec:	4b77      	ldr	r3, [pc, #476]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2f2:	f023 020c 	bic.w	r2, r3, #12
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	4974      	ldr	r1, [pc, #464]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f003 0304 	and.w	r3, r3, #4
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d01e      	beq.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00f      	beq.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	2b10      	cmp	r3, #16
 800a31c:	d00b      	beq.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	2b30      	cmp	r3, #48	@ 0x30
 800a324:	d007      	beq.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	2b20      	cmp	r3, #32
 800a32c:	d003      	beq.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a32e:	21f4      	movs	r1, #244	@ 0xf4
 800a330:	4867      	ldr	r0, [pc, #412]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800a332:	f7f8 f817 	bl	8002364 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a336:	4b65      	ldr	r3, [pc, #404]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a33c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	4961      	ldr	r1, [pc, #388]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a346:	4313      	orrs	r3, r2
 800a348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 0308 	and.w	r3, r3, #8
 800a354:	2b00      	cmp	r3, #0
 800a356:	d01e      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00f      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	2b40      	cmp	r3, #64	@ 0x40
 800a366:	d00b      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a36e:	d007      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	2b80      	cmp	r3, #128	@ 0x80
 800a376:	d003      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800a378:	21ff      	movs	r1, #255	@ 0xff
 800a37a:	4855      	ldr	r0, [pc, #340]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800a37c:	f7f7 fff2 	bl	8002364 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a380:	4b52      	ldr	r3, [pc, #328]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a386:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	494f      	ldr	r1, [pc, #316]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a390:	4313      	orrs	r3, r2
 800a392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 0310 	and.w	r3, r3, #16
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d022      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d013      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3b2:	d00e      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	695b      	ldr	r3, [r3, #20]
 800a3b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3bc:	d009      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	695b      	ldr	r3, [r3, #20]
 800a3c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3c6:	d004      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a3c8:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800a3cc:	4840      	ldr	r0, [pc, #256]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800a3ce:	f7f7 ffc9 	bl	8002364 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a3d2:	4b3e      	ldr	r3, [pc, #248]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	695b      	ldr	r3, [r3, #20]
 800a3e0:	493a      	ldr	r1, [pc, #232]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 0320 	and.w	r3, r3, #32
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d022      	beq.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d013      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a404:	d00e      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a40e:	d009      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a418:	d004      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800a41a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800a41e:	482c      	ldr	r0, [pc, #176]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800a420:	f7f7 ffa0 	bl	8002364 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a424:	4b29      	ldr	r3, [pc, #164]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a42a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	4926      	ldr	r1, [pc, #152]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a434:	4313      	orrs	r3, r2
 800a436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a442:	2b00      	cmp	r3, #0
 800a444:	d01d      	beq.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	69db      	ldr	r3, [r3, #28]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00e      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	69db      	ldr	r3, [r3, #28]
 800a452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a456:	d009      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	69db      	ldr	r3, [r3, #28]
 800a45c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a460:	d004      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a462:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800a466:	481a      	ldr	r0, [pc, #104]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800a468:	f7f7 ff7c 	bl	8002364 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a46c:	4b17      	ldr	r3, [pc, #92]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a472:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	69db      	ldr	r3, [r3, #28]
 800a47a:	4914      	ldr	r1, [pc, #80]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a47c:	4313      	orrs	r3, r2
 800a47e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d022      	beq.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00e      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a49e:	d009      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a1b      	ldr	r3, [r3, #32]
 800a4a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4a8:	d004      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800a4aa:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800a4ae:	4808      	ldr	r0, [pc, #32]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800a4b0:	f7f7 ff58 	bl	8002364 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a4b4:	4b05      	ldr	r3, [pc, #20]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a1b      	ldr	r3, [r3, #32]
 800a4c2:	4902      	ldr	r1, [pc, #8]	@ (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800a4ca:	e003      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a4cc:	40021000 	.word	0x40021000
 800a4d0:	08011bec 	.word	0x08011bec
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d01d      	beq.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00e      	beq.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x512>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4f0:	d009      	beq.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x512>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4fa:	d004      	beq.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x512>
 800a4fc:	f44f 719b 	mov.w	r1, #310	@ 0x136
 800a500:	489e      	ldr	r0, [pc, #632]	@ (800a77c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a502:	f7f7 ff2f 	bl	8002364 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a506:	4b9e      	ldr	r3, [pc, #632]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a50c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a514:	499a      	ldr	r1, [pc, #616]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a516:	4313      	orrs	r3, r2
 800a518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d01b      	beq.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x56c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00c      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x556>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a534:	2b01      	cmp	r3, #1
 800a536:	d008      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x556>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d004      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x556>
 800a540:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 800a544:	488d      	ldr	r0, [pc, #564]	@ (800a77c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a546:	f7f7 ff0d 	bl	8002364 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a54a:	4b8d      	ldr	r3, [pc, #564]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a54c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a550:	f023 0203 	bic.w	r2, r3, #3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a558:	4989      	ldr	r1, [pc, #548]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a55a:	4313      	orrs	r3, r2
 800a55c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d022      	beq.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a570:	2b00      	cmp	r3, #0
 800a572:	d013      	beq.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a578:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a57c:	d00e      	beq.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a582:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a586:	d009      	beq.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a590:	d004      	beq.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800a592:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 800a596:	4879      	ldr	r0, [pc, #484]	@ (800a77c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a598:	f7f7 fee4 	bl	8002364 <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a59c:	4b78      	ldr	r3, [pc, #480]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5a2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5aa:	4975      	ldr	r1, [pc, #468]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d02d      	beq.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d013      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5ce:	d00e      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5d8:	d009      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a5e2:	d004      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800a5e4:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 800a5e8:	4864      	ldr	r0, [pc, #400]	@ (800a77c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a5ea:	f7f7 febb 	bl	8002364 <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a5ee:	4b64      	ldr	r3, [pc, #400]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a5f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5fc:	4960      	ldr	r1, [pc, #384]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a5fe:	4313      	orrs	r3, r2
 800a600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a608:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a60c:	d105      	bne.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x626>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a60e:	4b5c      	ldr	r3, [pc, #368]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	4a5b      	ldr	r2, [pc, #364]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a614:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a618:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a622:	2b00      	cmp	r3, #0
 800a624:	d02d      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x68e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d013      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a632:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a636:	d00e      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a63c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a640:	d009      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a646:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a64a:	d004      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a64c:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800a650:	484a      	ldr	r0, [pc, #296]	@ (800a77c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a652:	f7f7 fe87 	bl	8002364 <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a656:	4b4a      	ldr	r3, [pc, #296]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a65c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a664:	4946      	ldr	r1, [pc, #280]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a666:	4313      	orrs	r3, r2
 800a668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a670:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a674:	d105      	bne.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a676:	4b42      	ldr	r3, [pc, #264]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	4a41      	ldr	r2, [pc, #260]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a67c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a680:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d028      	beq.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00e      	beq.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a69a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a69e:	d009      	beq.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6a8:	d004      	beq.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800a6aa:	f240 1179 	movw	r1, #377	@ 0x179
 800a6ae:	4833      	ldr	r0, [pc, #204]	@ (800a77c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a6b0:	f7f7 fe58 	bl	8002364 <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a6b4:	4b32      	ldr	r3, [pc, #200]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c2:	492f      	ldr	r1, [pc, #188]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6d2:	d105      	bne.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6d4:	4b2a      	ldr	r3, [pc, #168]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	4a29      	ldr	r2, [pc, #164]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a6da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d023      	beq.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x740>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d009      	beq.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6fc:	d004      	beq.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800a6fe:	f240 118b 	movw	r1, #395	@ 0x18b
 800a702:	481e      	ldr	r0, [pc, #120]	@ (800a77c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a704:	f7f7 fe2e 	bl	8002364 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a708:	4b1d      	ldr	r3, [pc, #116]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a70a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a70e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a716:	491a      	ldr	r1, [pc, #104]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a718:	4313      	orrs	r3, r2
 800a71a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a722:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a726:	d105      	bne.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a728:	4b15      	ldr	r3, [pc, #84]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	4a14      	ldr	r2, [pc, #80]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a72e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a732:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d028      	beq.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x79e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a744:	2b00      	cmp	r3, #0
 800a746:	d009      	beq.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x768>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a74c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a750:	d004      	beq.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x768>
 800a752:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800a756:	4809      	ldr	r0, [pc, #36]	@ (800a77c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a758:	f7f7 fe04 	bl	8002364 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a75c:	4b08      	ldr	r3, [pc, #32]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a75e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a762:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a76a:	4905      	ldr	r1, [pc, #20]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a76c:	4313      	orrs	r3, r2
 800a76e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a77a:	e003      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x790>
 800a77c:	08011bec 	.word	0x08011bec
 800a780:	40021000 	.word	0x40021000
 800a784:	d105      	bne.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a786:	4b4c      	ldr	r3, [pc, #304]	@ (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	4a4b      	ldr	r2, [pc, #300]	@ (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a78c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a790:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d028      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00e      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7ae:	d009      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7b8:	d004      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800a7ba:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 800a7be:	483f      	ldr	r0, [pc, #252]	@ (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800a7c0:	f7f7 fdd0 	bl	8002364 <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a7c4:	4b3c      	ldr	r3, [pc, #240]	@ (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a7c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7d2:	4939      	ldr	r1, [pc, #228]	@ (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7e2:	d105      	bne.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a7e4:	4b34      	ldr	r3, [pc, #208]	@ (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	4a33      	ldr	r2, [pc, #204]	@ (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a7ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a7ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d028      	beq.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x85a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00e      	beq.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a80c:	d009      	beq.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a812:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a816:	d004      	beq.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800a818:	f240 11b9 	movw	r1, #441	@ 0x1b9
 800a81c:	4827      	ldr	r0, [pc, #156]	@ (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800a81e:	f7f7 fda1 	bl	8002364 <assert_failed>

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a822:	4b25      	ldr	r3, [pc, #148]	@ (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a828:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a830:	4921      	ldr	r1, [pc, #132]	@ (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a832:	4313      	orrs	r3, r2
 800a834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a83c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a840:	d105      	bne.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a842:	4b1d      	ldr	r3, [pc, #116]	@ (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	4a1c      	ldr	r2, [pc, #112]	@ (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a84c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d028      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a85e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a862:	d00d      	beq.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d009      	beq.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a870:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a874:	d004      	beq.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800a876:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 800a87a:	4810      	ldr	r0, [pc, #64]	@ (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800a87c:	f7f7 fd72 	bl	8002364 <assert_failed>

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a880:	4b0d      	ldr	r3, [pc, #52]	@ (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a882:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a886:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a88e:	490a      	ldr	r1, [pc, #40]	@ (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a890:	4313      	orrs	r3, r2
 800a892:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a89a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a89e:	d105      	bne.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a8a0:	4b05      	ldr	r3, [pc, #20]	@ (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	4a04      	ldr	r2, [pc, #16]	@ (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800a8a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a8ac:	7cbb      	ldrb	r3, [r7, #18]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3718      	adds	r7, #24
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	40021000 	.word	0x40021000
 800a8bc:	08011bec 	.word	0x08011bec

0800a8c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d101      	bne.n	800a8d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e0eb      	b.n	800aaaa <HAL_TIM_Base_Init+0x1ea>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a77      	ldr	r2, [pc, #476]	@ (800aab4 <HAL_TIM_Base_Init+0x1f4>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d03b      	beq.n	800a954 <HAL_TIM_Base_Init+0x94>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8e4:	d036      	beq.n	800a954 <HAL_TIM_Base_Init+0x94>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a73      	ldr	r2, [pc, #460]	@ (800aab8 <HAL_TIM_Base_Init+0x1f8>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d031      	beq.n	800a954 <HAL_TIM_Base_Init+0x94>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a71      	ldr	r2, [pc, #452]	@ (800aabc <HAL_TIM_Base_Init+0x1fc>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d02c      	beq.n	800a954 <HAL_TIM_Base_Init+0x94>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a70      	ldr	r2, [pc, #448]	@ (800aac0 <HAL_TIM_Base_Init+0x200>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d027      	beq.n	800a954 <HAL_TIM_Base_Init+0x94>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a6e      	ldr	r2, [pc, #440]	@ (800aac4 <HAL_TIM_Base_Init+0x204>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d022      	beq.n	800a954 <HAL_TIM_Base_Init+0x94>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a6d      	ldr	r2, [pc, #436]	@ (800aac8 <HAL_TIM_Base_Init+0x208>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d01d      	beq.n	800a954 <HAL_TIM_Base_Init+0x94>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a6b      	ldr	r2, [pc, #428]	@ (800aacc <HAL_TIM_Base_Init+0x20c>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d018      	beq.n	800a954 <HAL_TIM_Base_Init+0x94>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a6a      	ldr	r2, [pc, #424]	@ (800aad0 <HAL_TIM_Base_Init+0x210>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d013      	beq.n	800a954 <HAL_TIM_Base_Init+0x94>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a68      	ldr	r2, [pc, #416]	@ (800aad4 <HAL_TIM_Base_Init+0x214>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d00e      	beq.n	800a954 <HAL_TIM_Base_Init+0x94>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a67      	ldr	r2, [pc, #412]	@ (800aad8 <HAL_TIM_Base_Init+0x218>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d009      	beq.n	800a954 <HAL_TIM_Base_Init+0x94>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a65      	ldr	r2, [pc, #404]	@ (800aadc <HAL_TIM_Base_Init+0x21c>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d004      	beq.n	800a954 <HAL_TIM_Base_Init+0x94>
 800a94a:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800a94e:	4864      	ldr	r0, [pc, #400]	@ (800aae0 <HAL_TIM_Base_Init+0x220>)
 800a950:	f7f7 fd08 	bl	8002364 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d014      	beq.n	800a986 <HAL_TIM_Base_Init+0xc6>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	2b10      	cmp	r3, #16
 800a962:	d010      	beq.n	800a986 <HAL_TIM_Base_Init+0xc6>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	2b20      	cmp	r3, #32
 800a96a:	d00c      	beq.n	800a986 <HAL_TIM_Base_Init+0xc6>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	2b40      	cmp	r3, #64	@ 0x40
 800a972:	d008      	beq.n	800a986 <HAL_TIM_Base_Init+0xc6>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	2b60      	cmp	r3, #96	@ 0x60
 800a97a:	d004      	beq.n	800a986 <HAL_TIM_Base_Init+0xc6>
 800a97c:	f240 1123 	movw	r1, #291	@ 0x123
 800a980:	4857      	ldr	r0, [pc, #348]	@ (800aae0 <HAL_TIM_Base_Init+0x220>)
 800a982:	f7f7 fcef 	bl	8002364 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	691b      	ldr	r3, [r3, #16]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00e      	beq.n	800a9ac <HAL_TIM_Base_Init+0xec>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a996:	d009      	beq.n	800a9ac <HAL_TIM_Base_Init+0xec>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9a0:	d004      	beq.n	800a9ac <HAL_TIM_Base_Init+0xec>
 800a9a2:	f44f 7192 	mov.w	r1, #292	@ 0x124
 800a9a6:	484e      	ldr	r0, [pc, #312]	@ (800aae0 <HAL_TIM_Base_Init+0x220>)
 800a9a8:	f7f7 fcdc 	bl	8002364 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9b4:	d004      	beq.n	800a9c0 <HAL_TIM_Base_Init+0x100>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a41      	ldr	r2, [pc, #260]	@ (800aac0 <HAL_TIM_Base_Init+0x200>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d107      	bne.n	800a9d0 <HAL_TIM_Base_Init+0x110>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	bf14      	ite	ne
 800a9c8:	2301      	movne	r3, #1
 800a9ca:	2300      	moveq	r3, #0
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	e00e      	b.n	800a9ee <HAL_TIM_Base_Init+0x12e>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d006      	beq.n	800a9e6 <HAL_TIM_Base_Init+0x126>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9e0:	d201      	bcs.n	800a9e6 <HAL_TIM_Base_Init+0x126>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e000      	b.n	800a9e8 <HAL_TIM_Base_Init+0x128>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	f003 0301 	and.w	r3, r3, #1
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d104      	bne.n	800a9fc <HAL_TIM_Base_Init+0x13c>
 800a9f2:	f240 1125 	movw	r1, #293	@ 0x125
 800a9f6:	483a      	ldr	r0, [pc, #232]	@ (800aae0 <HAL_TIM_Base_Init+0x220>)
 800a9f8:	f7f7 fcb4 	bl	8002364 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d008      	beq.n	800aa16 <HAL_TIM_Base_Init+0x156>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	699b      	ldr	r3, [r3, #24]
 800aa08:	2b80      	cmp	r3, #128	@ 0x80
 800aa0a:	d004      	beq.n	800aa16 <HAL_TIM_Base_Init+0x156>
 800aa0c:	f44f 7193 	mov.w	r1, #294	@ 0x126
 800aa10:	4833      	ldr	r0, [pc, #204]	@ (800aae0 <HAL_TIM_Base_Init+0x220>)
 800aa12:	f7f7 fca7 	bl	8002364 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d106      	bne.n	800aa30 <HAL_TIM_Base_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f7f7 fdaa 	bl	8002584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2202      	movs	r2, #2
 800aa34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	3304      	adds	r3, #4
 800aa40:	4619      	mov	r1, r3
 800aa42:	4610      	mov	r0, r2
 800aa44:	f001 f956 	bl	800bcf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	40012c00 	.word	0x40012c00
 800aab8:	40000400 	.word	0x40000400
 800aabc:	40000800 	.word	0x40000800
 800aac0:	40000c00 	.word	0x40000c00
 800aac4:	40001000 	.word	0x40001000
 800aac8:	40001400 	.word	0x40001400
 800aacc:	40013400 	.word	0x40013400
 800aad0:	40014000 	.word	0x40014000
 800aad4:	40014400 	.word	0x40014400
 800aad8:	40014800 	.word	0x40014800
 800aadc:	40015000 	.word	0x40015000
 800aae0:	08011c60 	.word	0x08011c60

0800aae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a4f      	ldr	r2, [pc, #316]	@ (800ac30 <HAL_TIM_Base_Start_IT+0x14c>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d03b      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0x8a>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aafe:	d036      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0x8a>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a4b      	ldr	r2, [pc, #300]	@ (800ac34 <HAL_TIM_Base_Start_IT+0x150>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d031      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0x8a>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a4a      	ldr	r2, [pc, #296]	@ (800ac38 <HAL_TIM_Base_Start_IT+0x154>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d02c      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0x8a>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a48      	ldr	r2, [pc, #288]	@ (800ac3c <HAL_TIM_Base_Start_IT+0x158>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d027      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0x8a>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a47      	ldr	r2, [pc, #284]	@ (800ac40 <HAL_TIM_Base_Start_IT+0x15c>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d022      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0x8a>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a45      	ldr	r2, [pc, #276]	@ (800ac44 <HAL_TIM_Base_Start_IT+0x160>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d01d      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0x8a>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a44      	ldr	r2, [pc, #272]	@ (800ac48 <HAL_TIM_Base_Start_IT+0x164>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d018      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0x8a>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a42      	ldr	r2, [pc, #264]	@ (800ac4c <HAL_TIM_Base_Start_IT+0x168>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d013      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0x8a>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a41      	ldr	r2, [pc, #260]	@ (800ac50 <HAL_TIM_Base_Start_IT+0x16c>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d00e      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0x8a>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a3f      	ldr	r2, [pc, #252]	@ (800ac54 <HAL_TIM_Base_Start_IT+0x170>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d009      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0x8a>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a3e      	ldr	r2, [pc, #248]	@ (800ac58 <HAL_TIM_Base_Start_IT+0x174>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d004      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0x8a>
 800ab64:	f240 11df 	movw	r1, #479	@ 0x1df
 800ab68:	483c      	ldr	r0, [pc, #240]	@ (800ac5c <HAL_TIM_Base_Start_IT+0x178>)
 800ab6a:	f7f7 fbfb 	bl	8002364 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d001      	beq.n	800ab7e <HAL_TIM_Base_Start_IT+0x9a>
  {
    return HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e054      	b.n	800ac28 <HAL_TIM_Base_Start_IT+0x144>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2202      	movs	r2, #2
 800ab82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68da      	ldr	r2, [r3, #12]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f042 0201 	orr.w	r2, r2, #1
 800ab94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a25      	ldr	r2, [pc, #148]	@ (800ac30 <HAL_TIM_Base_Start_IT+0x14c>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d022      	beq.n	800abe6 <HAL_TIM_Base_Start_IT+0x102>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aba8:	d01d      	beq.n	800abe6 <HAL_TIM_Base_Start_IT+0x102>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a21      	ldr	r2, [pc, #132]	@ (800ac34 <HAL_TIM_Base_Start_IT+0x150>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d018      	beq.n	800abe6 <HAL_TIM_Base_Start_IT+0x102>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a1f      	ldr	r2, [pc, #124]	@ (800ac38 <HAL_TIM_Base_Start_IT+0x154>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d013      	beq.n	800abe6 <HAL_TIM_Base_Start_IT+0x102>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a1e      	ldr	r2, [pc, #120]	@ (800ac3c <HAL_TIM_Base_Start_IT+0x158>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d00e      	beq.n	800abe6 <HAL_TIM_Base_Start_IT+0x102>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a1e      	ldr	r2, [pc, #120]	@ (800ac48 <HAL_TIM_Base_Start_IT+0x164>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d009      	beq.n	800abe6 <HAL_TIM_Base_Start_IT+0x102>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a1d      	ldr	r2, [pc, #116]	@ (800ac4c <HAL_TIM_Base_Start_IT+0x168>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d004      	beq.n	800abe6 <HAL_TIM_Base_Start_IT+0x102>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a1d      	ldr	r2, [pc, #116]	@ (800ac58 <HAL_TIM_Base_Start_IT+0x174>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d115      	bne.n	800ac12 <HAL_TIM_Base_Start_IT+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	689a      	ldr	r2, [r3, #8]
 800abec:	4b1c      	ldr	r3, [pc, #112]	@ (800ac60 <HAL_TIM_Base_Start_IT+0x17c>)
 800abee:	4013      	ands	r3, r2
 800abf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2b06      	cmp	r3, #6
 800abf6:	d015      	beq.n	800ac24 <HAL_TIM_Base_Start_IT+0x140>
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abfe:	d011      	beq.n	800ac24 <HAL_TIM_Base_Start_IT+0x140>
    {
      __HAL_TIM_ENABLE(htim);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f042 0201 	orr.w	r2, r2, #1
 800ac0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac10:	e008      	b.n	800ac24 <HAL_TIM_Base_Start_IT+0x140>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f042 0201 	orr.w	r2, r2, #1
 800ac20:	601a      	str	r2, [r3, #0]
 800ac22:	e000      	b.n	800ac26 <HAL_TIM_Base_Start_IT+0x142>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	40012c00 	.word	0x40012c00
 800ac34:	40000400 	.word	0x40000400
 800ac38:	40000800 	.word	0x40000800
 800ac3c:	40000c00 	.word	0x40000c00
 800ac40:	40001000 	.word	0x40001000
 800ac44:	40001400 	.word	0x40001400
 800ac48:	40013400 	.word	0x40013400
 800ac4c:	40014000 	.word	0x40014000
 800ac50:	40014400 	.word	0x40014400
 800ac54:	40014800 	.word	0x40014800
 800ac58:	40015000 	.word	0x40015000
 800ac5c:	08011c60 	.word	0x08011c60
 800ac60:	00010007 	.word	0x00010007

0800ac64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	f003 0302 	and.w	r3, r3, #2
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d020      	beq.n	800acc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f003 0302 	and.w	r3, r3, #2
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d01b      	beq.n	800acc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f06f 0202 	mvn.w	r2, #2
 800ac98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	f003 0303 	and.w	r3, r3, #3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f001 f802 	bl	800bcb8 <HAL_TIM_IC_CaptureCallback>
 800acb4:	e005      	b.n	800acc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fff4 	bl	800bca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f001 f805 	bl	800bccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	f003 0304 	and.w	r3, r3, #4
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d020      	beq.n	800ad14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f003 0304 	and.w	r3, r3, #4
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d01b      	beq.n	800ad14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f06f 0204 	mvn.w	r2, #4
 800ace4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2202      	movs	r2, #2
 800acea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d003      	beq.n	800ad02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 ffdc 	bl	800bcb8 <HAL_TIM_IC_CaptureCallback>
 800ad00:	e005      	b.n	800ad0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 ffce 	bl	800bca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 ffdf 	bl	800bccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	f003 0308 	and.w	r3, r3, #8
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d020      	beq.n	800ad60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f003 0308 	and.w	r3, r3, #8
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d01b      	beq.n	800ad60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f06f 0208 	mvn.w	r2, #8
 800ad30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2204      	movs	r2, #4
 800ad36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	69db      	ldr	r3, [r3, #28]
 800ad3e:	f003 0303 	and.w	r3, r3, #3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d003      	beq.n	800ad4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 ffb6 	bl	800bcb8 <HAL_TIM_IC_CaptureCallback>
 800ad4c:	e005      	b.n	800ad5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 ffa8 	bl	800bca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 ffb9 	bl	800bccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	f003 0310 	and.w	r3, r3, #16
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d020      	beq.n	800adac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f003 0310 	and.w	r3, r3, #16
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d01b      	beq.n	800adac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f06f 0210 	mvn.w	r2, #16
 800ad7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2208      	movs	r2, #8
 800ad82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	69db      	ldr	r3, [r3, #28]
 800ad8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d003      	beq.n	800ad9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 ff90 	bl	800bcb8 <HAL_TIM_IC_CaptureCallback>
 800ad98:	e005      	b.n	800ada6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 ff82 	bl	800bca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 ff93 	bl	800bccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	f003 0301 	and.w	r3, r3, #1
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00c      	beq.n	800add0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f003 0301 	and.w	r3, r3, #1
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d007      	beq.n	800add0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f06f 0201 	mvn.w	r2, #1
 800adc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7f7 f8e2 	bl	8001f94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800add6:	2b00      	cmp	r3, #0
 800add8:	d104      	bne.n	800ade4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d00c      	beq.n	800adfe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adea:	2b00      	cmp	r3, #0
 800adec:	d007      	beq.n	800adfe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800adf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f001 fa45 	bl	800c288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00c      	beq.n	800ae22 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d007      	beq.n	800ae22 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ae1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f001 fa3d 	bl	800c29c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00c      	beq.n	800ae46 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d007      	beq.n	800ae46 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ae3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 ff4d 	bl	800bce0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	f003 0320 	and.w	r3, r3, #32
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00c      	beq.n	800ae6a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f003 0320 	and.w	r3, r3, #32
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d007      	beq.n	800ae6a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f06f 0220 	mvn.w	r2, #32
 800ae62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f001 fa05 	bl	800c274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00c      	beq.n	800ae8e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d007      	beq.n	800ae8e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800ae86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f001 fa11 	bl	800c2b0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00c      	beq.n	800aeb2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d007      	beq.n	800aeb2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800aeaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f001 fa09 	bl	800c2c4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00c      	beq.n	800aed6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d007      	beq.n	800aed6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800aece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f001 fa01 	bl	800c2d8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00c      	beq.n	800aefa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d007      	beq.n	800aefa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800aef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f001 f9f9 	bl	800c2ec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aefa:	bf00      	nop
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
	...

0800af04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d102      	bne.n	800af22 <HAL_TIM_ConfigClockSource+0x1e>
 800af1c:	2302      	movs	r3, #2
 800af1e:	f000 beb3 	b.w	800bc88 <HAL_TIM_ConfigClockSource+0xd84>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2202      	movs	r2, #2
 800af2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af3a:	d051      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b70      	cmp	r3, #112	@ 0x70
 800af42:	d04d      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af4c:	d048      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2b40      	cmp	r3, #64	@ 0x40
 800af54:	d044      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2b50      	cmp	r3, #80	@ 0x50
 800af5c:	d040      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2b60      	cmp	r3, #96	@ 0x60
 800af64:	d03c      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d038      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2b10      	cmp	r3, #16
 800af74:	d034      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b20      	cmp	r3, #32
 800af7c:	d030      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2b30      	cmp	r3, #48	@ 0x30
 800af84:	d02c      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af8e:	d027      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800af98:	d022      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a7f      	ldr	r2, [pc, #508]	@ (800b19c <HAL_TIM_ConfigClockSource+0x298>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d01d      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a7d      	ldr	r2, [pc, #500]	@ (800b1a0 <HAL_TIM_ConfigClockSource+0x29c>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d018      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a7c      	ldr	r2, [pc, #496]	@ (800b1a4 <HAL_TIM_ConfigClockSource+0x2a0>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d013      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a7a      	ldr	r2, [pc, #488]	@ (800b1a8 <HAL_TIM_ConfigClockSource+0x2a4>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d00e      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a79      	ldr	r2, [pc, #484]	@ (800b1ac <HAL_TIM_ConfigClockSource+0x2a8>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d009      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a77      	ldr	r2, [pc, #476]	@ (800b1b0 <HAL_TIM_ConfigClockSource+0x2ac>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d004      	beq.n	800afe0 <HAL_TIM_ConfigClockSource+0xdc>
 800afd6:	f241 51c5 	movw	r1, #5573	@ 0x15c5
 800afda:	4876      	ldr	r0, [pc, #472]	@ (800b1b4 <HAL_TIM_ConfigClockSource+0x2b0>)
 800afdc:	f7f7 f9c2 	bl	8002364 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800afee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800aff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800affa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a69      	ldr	r2, [pc, #420]	@ (800b1b0 <HAL_TIM_ConfigClockSource+0x2ac>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	f000 832a 	beq.w	800b664 <HAL_TIM_ConfigClockSource+0x760>
 800b010:	4a67      	ldr	r2, [pc, #412]	@ (800b1b0 <HAL_TIM_ConfigClockSource+0x2ac>)
 800b012:	4293      	cmp	r3, r2
 800b014:	f200 862b 	bhi.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
 800b018:	4a64      	ldr	r2, [pc, #400]	@ (800b1ac <HAL_TIM_ConfigClockSource+0x2a8>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	f000 8322 	beq.w	800b664 <HAL_TIM_ConfigClockSource+0x760>
 800b020:	4a62      	ldr	r2, [pc, #392]	@ (800b1ac <HAL_TIM_ConfigClockSource+0x2a8>)
 800b022:	4293      	cmp	r3, r2
 800b024:	f200 8623 	bhi.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
 800b028:	4a5f      	ldr	r2, [pc, #380]	@ (800b1a8 <HAL_TIM_ConfigClockSource+0x2a4>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	f000 831a 	beq.w	800b664 <HAL_TIM_ConfigClockSource+0x760>
 800b030:	4a5d      	ldr	r2, [pc, #372]	@ (800b1a8 <HAL_TIM_ConfigClockSource+0x2a4>)
 800b032:	4293      	cmp	r3, r2
 800b034:	f200 861b 	bhi.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
 800b038:	4a5a      	ldr	r2, [pc, #360]	@ (800b1a4 <HAL_TIM_ConfigClockSource+0x2a0>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	f000 8312 	beq.w	800b664 <HAL_TIM_ConfigClockSource+0x760>
 800b040:	4a58      	ldr	r2, [pc, #352]	@ (800b1a4 <HAL_TIM_ConfigClockSource+0x2a0>)
 800b042:	4293      	cmp	r3, r2
 800b044:	f200 8613 	bhi.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
 800b048:	4a55      	ldr	r2, [pc, #340]	@ (800b1a0 <HAL_TIM_ConfigClockSource+0x29c>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	f000 830a 	beq.w	800b664 <HAL_TIM_ConfigClockSource+0x760>
 800b050:	4a53      	ldr	r2, [pc, #332]	@ (800b1a0 <HAL_TIM_ConfigClockSource+0x29c>)
 800b052:	4293      	cmp	r3, r2
 800b054:	f200 860b 	bhi.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
 800b058:	4a50      	ldr	r2, [pc, #320]	@ (800b19c <HAL_TIM_ConfigClockSource+0x298>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	f000 8302 	beq.w	800b664 <HAL_TIM_ConfigClockSource+0x760>
 800b060:	4a4e      	ldr	r2, [pc, #312]	@ (800b19c <HAL_TIM_ConfigClockSource+0x298>)
 800b062:	4293      	cmp	r3, r2
 800b064:	f200 8603 	bhi.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
 800b068:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b06c:	f000 82fa 	beq.w	800b664 <HAL_TIM_ConfigClockSource+0x760>
 800b070:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b074:	f200 85fb 	bhi.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
 800b078:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b07c:	f000 82f2 	beq.w	800b664 <HAL_TIM_ConfigClockSource+0x760>
 800b080:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b084:	f200 85f3 	bhi.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
 800b088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b08c:	f000 8125 	beq.w	800b2da <HAL_TIM_ConfigClockSource+0x3d6>
 800b090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b094:	f200 85eb 	bhi.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
 800b098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b09c:	d02f      	beq.n	800b0fe <HAL_TIM_ConfigClockSource+0x1fa>
 800b09e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0a2:	f200 85e4 	bhi.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
 800b0a6:	2b70      	cmp	r3, #112	@ 0x70
 800b0a8:	f000 809c 	beq.w	800b1e4 <HAL_TIM_ConfigClockSource+0x2e0>
 800b0ac:	2b70      	cmp	r3, #112	@ 0x70
 800b0ae:	f200 85de 	bhi.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
 800b0b2:	2b60      	cmp	r3, #96	@ 0x60
 800b0b4:	f000 81f6 	beq.w	800b4a4 <HAL_TIM_ConfigClockSource+0x5a0>
 800b0b8:	2b60      	cmp	r3, #96	@ 0x60
 800b0ba:	f200 85d8 	bhi.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
 800b0be:	2b50      	cmp	r3, #80	@ 0x50
 800b0c0:	f000 8190 	beq.w	800b3e4 <HAL_TIM_ConfigClockSource+0x4e0>
 800b0c4:	2b50      	cmp	r3, #80	@ 0x50
 800b0c6:	f200 85d2 	bhi.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
 800b0ca:	2b40      	cmp	r3, #64	@ 0x40
 800b0cc:	f000 825a 	beq.w	800b584 <HAL_TIM_ConfigClockSource+0x680>
 800b0d0:	2b40      	cmp	r3, #64	@ 0x40
 800b0d2:	f200 85cc 	bhi.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
 800b0d6:	2b30      	cmp	r3, #48	@ 0x30
 800b0d8:	f000 82c4 	beq.w	800b664 <HAL_TIM_ConfigClockSource+0x760>
 800b0dc:	2b30      	cmp	r3, #48	@ 0x30
 800b0de:	f200 85c6 	bhi.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
 800b0e2:	2b20      	cmp	r3, #32
 800b0e4:	f000 82be 	beq.w	800b664 <HAL_TIM_ConfigClockSource+0x760>
 800b0e8:	2b20      	cmp	r3, #32
 800b0ea:	f200 85c0 	bhi.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	f000 82b8 	beq.w	800b664 <HAL_TIM_ConfigClockSource+0x760>
 800b0f4:	2b10      	cmp	r3, #16
 800b0f6:	f000 82b5 	beq.w	800b664 <HAL_TIM_ConfigClockSource+0x760>
 800b0fa:	f000 bdb8 	b.w	800bc6e <HAL_TIM_ConfigClockSource+0xd6a>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a2d      	ldr	r2, [pc, #180]	@ (800b1b8 <HAL_TIM_ConfigClockSource+0x2b4>)
 800b104:	4293      	cmp	r3, r2
 800b106:	f000 85b5 	beq.w	800bc74 <HAL_TIM_ConfigClockSource+0xd70>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b112:	f000 85af 	beq.w	800bc74 <HAL_TIM_ConfigClockSource+0xd70>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a28      	ldr	r2, [pc, #160]	@ (800b1bc <HAL_TIM_ConfigClockSource+0x2b8>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	f000 85a9 	beq.w	800bc74 <HAL_TIM_ConfigClockSource+0xd70>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a26      	ldr	r2, [pc, #152]	@ (800b1c0 <HAL_TIM_ConfigClockSource+0x2bc>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	f000 85a3 	beq.w	800bc74 <HAL_TIM_ConfigClockSource+0xd70>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a24      	ldr	r2, [pc, #144]	@ (800b1c4 <HAL_TIM_ConfigClockSource+0x2c0>)
 800b134:	4293      	cmp	r3, r2
 800b136:	f000 859d 	beq.w	800bc74 <HAL_TIM_ConfigClockSource+0xd70>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4a22      	ldr	r2, [pc, #136]	@ (800b1c8 <HAL_TIM_ConfigClockSource+0x2c4>)
 800b140:	4293      	cmp	r3, r2
 800b142:	f000 8597 	beq.w	800bc74 <HAL_TIM_ConfigClockSource+0xd70>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a20      	ldr	r2, [pc, #128]	@ (800b1cc <HAL_TIM_ConfigClockSource+0x2c8>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	f000 8591 	beq.w	800bc74 <HAL_TIM_ConfigClockSource+0xd70>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a1e      	ldr	r2, [pc, #120]	@ (800b1d0 <HAL_TIM_ConfigClockSource+0x2cc>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	f000 858b 	beq.w	800bc74 <HAL_TIM_ConfigClockSource+0xd70>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a1c      	ldr	r2, [pc, #112]	@ (800b1d4 <HAL_TIM_ConfigClockSource+0x2d0>)
 800b164:	4293      	cmp	r3, r2
 800b166:	f000 8585 	beq.w	800bc74 <HAL_TIM_ConfigClockSource+0xd70>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a1a      	ldr	r2, [pc, #104]	@ (800b1d8 <HAL_TIM_ConfigClockSource+0x2d4>)
 800b170:	4293      	cmp	r3, r2
 800b172:	f000 857f 	beq.w	800bc74 <HAL_TIM_ConfigClockSource+0xd70>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a18      	ldr	r2, [pc, #96]	@ (800b1dc <HAL_TIM_ConfigClockSource+0x2d8>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	f000 8579 	beq.w	800bc74 <HAL_TIM_ConfigClockSource+0xd70>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a16      	ldr	r2, [pc, #88]	@ (800b1e0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	f000 8573 	beq.w	800bc74 <HAL_TIM_ConfigClockSource+0xd70>
 800b18e:	f241 51d1 	movw	r1, #5585	@ 0x15d1
 800b192:	4808      	ldr	r0, [pc, #32]	@ (800b1b4 <HAL_TIM_ConfigClockSource+0x2b0>)
 800b194:	f7f7 f8e6 	bl	8002364 <assert_failed>
      break;
 800b198:	f000 bd6c 	b.w	800bc74 <HAL_TIM_ConfigClockSource+0xd70>
 800b19c:	00100020 	.word	0x00100020
 800b1a0:	00100030 	.word	0x00100030
 800b1a4:	00100040 	.word	0x00100040
 800b1a8:	00100050 	.word	0x00100050
 800b1ac:	00100060 	.word	0x00100060
 800b1b0:	00100070 	.word	0x00100070
 800b1b4:	08011c60 	.word	0x08011c60
 800b1b8:	40012c00 	.word	0x40012c00
 800b1bc:	40000400 	.word	0x40000400
 800b1c0:	40000800 	.word	0x40000800
 800b1c4:	40000c00 	.word	0x40000c00
 800b1c8:	40001000 	.word	0x40001000
 800b1cc:	40001400 	.word	0x40001400
 800b1d0:	40013400 	.word	0x40013400
 800b1d4:	40014000 	.word	0x40014000
 800b1d8:	40014400 	.word	0x40014400
 800b1dc:	40014800 	.word	0x40014800
 800b1e0:	40015000 	.word	0x40015000
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a77      	ldr	r2, [pc, #476]	@ (800b3c8 <HAL_TIM_ConfigClockSource+0x4c4>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d022      	beq.n	800b234 <HAL_TIM_ConfigClockSource+0x330>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1f6:	d01d      	beq.n	800b234 <HAL_TIM_ConfigClockSource+0x330>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a73      	ldr	r2, [pc, #460]	@ (800b3cc <HAL_TIM_ConfigClockSource+0x4c8>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d018      	beq.n	800b234 <HAL_TIM_ConfigClockSource+0x330>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a72      	ldr	r2, [pc, #456]	@ (800b3d0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d013      	beq.n	800b234 <HAL_TIM_ConfigClockSource+0x330>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a70      	ldr	r2, [pc, #448]	@ (800b3d4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d00e      	beq.n	800b234 <HAL_TIM_ConfigClockSource+0x330>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a6f      	ldr	r2, [pc, #444]	@ (800b3d8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d009      	beq.n	800b234 <HAL_TIM_ConfigClockSource+0x330>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a6d      	ldr	r2, [pc, #436]	@ (800b3dc <HAL_TIM_ConfigClockSource+0x4d8>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d004      	beq.n	800b234 <HAL_TIM_ConfigClockSource+0x330>
 800b22a:	f241 51d8 	movw	r1, #5592	@ 0x15d8
 800b22e:	486c      	ldr	r0, [pc, #432]	@ (800b3e0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b230:	f7f7 f898 	bl	8002364 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d013      	beq.n	800b264 <HAL_TIM_ConfigClockSource+0x360>
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b244:	d00e      	beq.n	800b264 <HAL_TIM_ConfigClockSource+0x360>
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b24e:	d009      	beq.n	800b264 <HAL_TIM_ConfigClockSource+0x360>
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b258:	d004      	beq.n	800b264 <HAL_TIM_ConfigClockSource+0x360>
 800b25a:	f241 51db 	movw	r1, #5595	@ 0x15db
 800b25e:	4860      	ldr	r0, [pc, #384]	@ (800b3e0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b260:	f7f7 f880 	bl	8002364 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b26c:	d014      	beq.n	800b298 <HAL_TIM_ConfigClockSource+0x394>
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d010      	beq.n	800b298 <HAL_TIM_ConfigClockSource+0x394>
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d00c      	beq.n	800b298 <HAL_TIM_ConfigClockSource+0x394>
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	2b02      	cmp	r3, #2
 800b284:	d008      	beq.n	800b298 <HAL_TIM_ConfigClockSource+0x394>
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	2b0a      	cmp	r3, #10
 800b28c:	d004      	beq.n	800b298 <HAL_TIM_ConfigClockSource+0x394>
 800b28e:	f241 51dc 	movw	r1, #5596	@ 0x15dc
 800b292:	4853      	ldr	r0, [pc, #332]	@ (800b3e0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b294:	f7f7 f866 	bl	8002364 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	2b0f      	cmp	r3, #15
 800b29e:	d904      	bls.n	800b2aa <HAL_TIM_ConfigClockSource+0x3a6>
 800b2a0:	f241 51dd 	movw	r1, #5597	@ 0x15dd
 800b2a4:	484e      	ldr	r0, [pc, #312]	@ (800b3e0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b2a6:	f7f7 f85d 	bl	8002364 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b2ba:	f000 fe4b 	bl	800bf54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b2cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	609a      	str	r2, [r3, #8]
      break;
 800b2d6:	f000 bcce 	b.w	800bc76 <HAL_TIM_ConfigClockSource+0xd72>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a3a      	ldr	r2, [pc, #232]	@ (800b3c8 <HAL_TIM_ConfigClockSource+0x4c4>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d022      	beq.n	800b32a <HAL_TIM_ConfigClockSource+0x426>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2ec:	d01d      	beq.n	800b32a <HAL_TIM_ConfigClockSource+0x426>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a36      	ldr	r2, [pc, #216]	@ (800b3cc <HAL_TIM_ConfigClockSource+0x4c8>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d018      	beq.n	800b32a <HAL_TIM_ConfigClockSource+0x426>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a34      	ldr	r2, [pc, #208]	@ (800b3d0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d013      	beq.n	800b32a <HAL_TIM_ConfigClockSource+0x426>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a33      	ldr	r2, [pc, #204]	@ (800b3d4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d00e      	beq.n	800b32a <HAL_TIM_ConfigClockSource+0x426>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a31      	ldr	r2, [pc, #196]	@ (800b3d8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d009      	beq.n	800b32a <HAL_TIM_ConfigClockSource+0x426>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a30      	ldr	r2, [pc, #192]	@ (800b3dc <HAL_TIM_ConfigClockSource+0x4d8>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d004      	beq.n	800b32a <HAL_TIM_ConfigClockSource+0x426>
 800b320:	f241 51f0 	movw	r1, #5616	@ 0x15f0
 800b324:	482e      	ldr	r0, [pc, #184]	@ (800b3e0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b326:	f7f7 f81d 	bl	8002364 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d013      	beq.n	800b35a <HAL_TIM_ConfigClockSource+0x456>
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b33a:	d00e      	beq.n	800b35a <HAL_TIM_ConfigClockSource+0x456>
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b344:	d009      	beq.n	800b35a <HAL_TIM_ConfigClockSource+0x456>
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	689b      	ldr	r3, [r3, #8]
 800b34a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b34e:	d004      	beq.n	800b35a <HAL_TIM_ConfigClockSource+0x456>
 800b350:	f241 51f3 	movw	r1, #5619	@ 0x15f3
 800b354:	4822      	ldr	r0, [pc, #136]	@ (800b3e0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b356:	f7f7 f805 	bl	8002364 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b362:	d014      	beq.n	800b38e <HAL_TIM_ConfigClockSource+0x48a>
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d010      	beq.n	800b38e <HAL_TIM_ConfigClockSource+0x48a>
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00c      	beq.n	800b38e <HAL_TIM_ConfigClockSource+0x48a>
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d008      	beq.n	800b38e <HAL_TIM_ConfigClockSource+0x48a>
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	2b0a      	cmp	r3, #10
 800b382:	d004      	beq.n	800b38e <HAL_TIM_ConfigClockSource+0x48a>
 800b384:	f241 51f4 	movw	r1, #5620	@ 0x15f4
 800b388:	4815      	ldr	r0, [pc, #84]	@ (800b3e0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b38a:	f7f6 ffeb 	bl	8002364 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	2b0f      	cmp	r3, #15
 800b394:	d904      	bls.n	800b3a0 <HAL_TIM_ConfigClockSource+0x49c>
 800b396:	f241 51f5 	movw	r1, #5621	@ 0x15f5
 800b39a:	4811      	ldr	r0, [pc, #68]	@ (800b3e0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b39c:	f7f6 ffe2 	bl	8002364 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b3b0:	f000 fdd0 	bl	800bf54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	689a      	ldr	r2, [r3, #8]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b3c2:	609a      	str	r2, [r3, #8]
      break;
 800b3c4:	f000 bc57 	b.w	800bc76 <HAL_TIM_ConfigClockSource+0xd72>
 800b3c8:	40012c00 	.word	0x40012c00
 800b3cc:	40000400 	.word	0x40000400
 800b3d0:	40000800 	.word	0x40000800
 800b3d4:	40000c00 	.word	0x40000c00
 800b3d8:	40013400 	.word	0x40013400
 800b3dc:	40015000 	.word	0x40015000
 800b3e0:	08011c60 	.word	0x08011c60
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a5e      	ldr	r2, [pc, #376]	@ (800b564 <HAL_TIM_ConfigClockSource+0x660>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d027      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0x53a>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3f6:	d022      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0x53a>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a5a      	ldr	r2, [pc, #360]	@ (800b568 <HAL_TIM_ConfigClockSource+0x664>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d01d      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0x53a>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a59      	ldr	r2, [pc, #356]	@ (800b56c <HAL_TIM_ConfigClockSource+0x668>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d018      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0x53a>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a57      	ldr	r2, [pc, #348]	@ (800b570 <HAL_TIM_ConfigClockSource+0x66c>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d013      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0x53a>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a56      	ldr	r2, [pc, #344]	@ (800b574 <HAL_TIM_ConfigClockSource+0x670>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d00e      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0x53a>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a54      	ldr	r2, [pc, #336]	@ (800b578 <HAL_TIM_ConfigClockSource+0x674>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d009      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0x53a>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a53      	ldr	r2, [pc, #332]	@ (800b57c <HAL_TIM_ConfigClockSource+0x678>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d004      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0x53a>
 800b434:	f241 6104 	movw	r1, #5636	@ 0x1604
 800b438:	4851      	ldr	r0, [pc, #324]	@ (800b580 <HAL_TIM_ConfigClockSource+0x67c>)
 800b43a:	f7f6 ff93 	bl	8002364 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b446:	d014      	beq.n	800b472 <HAL_TIM_ConfigClockSource+0x56e>
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d010      	beq.n	800b472 <HAL_TIM_ConfigClockSource+0x56e>
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00c      	beq.n	800b472 <HAL_TIM_ConfigClockSource+0x56e>
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	d008      	beq.n	800b472 <HAL_TIM_ConfigClockSource+0x56e>
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	2b0a      	cmp	r3, #10
 800b466:	d004      	beq.n	800b472 <HAL_TIM_ConfigClockSource+0x56e>
 800b468:	f241 6107 	movw	r1, #5639	@ 0x1607
 800b46c:	4844      	ldr	r0, [pc, #272]	@ (800b580 <HAL_TIM_ConfigClockSource+0x67c>)
 800b46e:	f7f6 ff79 	bl	8002364 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	2b0f      	cmp	r3, #15
 800b478:	d904      	bls.n	800b484 <HAL_TIM_ConfigClockSource+0x580>
 800b47a:	f241 6108 	movw	r1, #5640	@ 0x1608
 800b47e:	4840      	ldr	r0, [pc, #256]	@ (800b580 <HAL_TIM_ConfigClockSource+0x67c>)
 800b480:	f7f6 ff70 	bl	8002364 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b490:	461a      	mov	r2, r3
 800b492:	f000 fce3 	bl	800be5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2150      	movs	r1, #80	@ 0x50
 800b49c:	4618      	mov	r0, r3
 800b49e:	f000 fd3c 	bl	800bf1a <TIM_ITRx_SetConfig>
      break;
 800b4a2:	e3e8      	b.n	800bc76 <HAL_TIM_ConfigClockSource+0xd72>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a2e      	ldr	r2, [pc, #184]	@ (800b564 <HAL_TIM_ConfigClockSource+0x660>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d027      	beq.n	800b4fe <HAL_TIM_ConfigClockSource+0x5fa>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4b6:	d022      	beq.n	800b4fe <HAL_TIM_ConfigClockSource+0x5fa>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a2a      	ldr	r2, [pc, #168]	@ (800b568 <HAL_TIM_ConfigClockSource+0x664>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d01d      	beq.n	800b4fe <HAL_TIM_ConfigClockSource+0x5fa>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a29      	ldr	r2, [pc, #164]	@ (800b56c <HAL_TIM_ConfigClockSource+0x668>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d018      	beq.n	800b4fe <HAL_TIM_ConfigClockSource+0x5fa>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a27      	ldr	r2, [pc, #156]	@ (800b570 <HAL_TIM_ConfigClockSource+0x66c>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d013      	beq.n	800b4fe <HAL_TIM_ConfigClockSource+0x5fa>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a26      	ldr	r2, [pc, #152]	@ (800b574 <HAL_TIM_ConfigClockSource+0x670>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d00e      	beq.n	800b4fe <HAL_TIM_ConfigClockSource+0x5fa>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a24      	ldr	r2, [pc, #144]	@ (800b578 <HAL_TIM_ConfigClockSource+0x674>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d009      	beq.n	800b4fe <HAL_TIM_ConfigClockSource+0x5fa>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a23      	ldr	r2, [pc, #140]	@ (800b57c <HAL_TIM_ConfigClockSource+0x678>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d004      	beq.n	800b4fe <HAL_TIM_ConfigClockSource+0x5fa>
 800b4f4:	f241 6114 	movw	r1, #5652	@ 0x1614
 800b4f8:	4821      	ldr	r0, [pc, #132]	@ (800b580 <HAL_TIM_ConfigClockSource+0x67c>)
 800b4fa:	f7f6 ff33 	bl	8002364 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b506:	d014      	beq.n	800b532 <HAL_TIM_ConfigClockSource+0x62e>
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d010      	beq.n	800b532 <HAL_TIM_ConfigClockSource+0x62e>
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00c      	beq.n	800b532 <HAL_TIM_ConfigClockSource+0x62e>
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	2b02      	cmp	r3, #2
 800b51e:	d008      	beq.n	800b532 <HAL_TIM_ConfigClockSource+0x62e>
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	2b0a      	cmp	r3, #10
 800b526:	d004      	beq.n	800b532 <HAL_TIM_ConfigClockSource+0x62e>
 800b528:	f241 6117 	movw	r1, #5655	@ 0x1617
 800b52c:	4814      	ldr	r0, [pc, #80]	@ (800b580 <HAL_TIM_ConfigClockSource+0x67c>)
 800b52e:	f7f6 ff19 	bl	8002364 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	2b0f      	cmp	r3, #15
 800b538:	d904      	bls.n	800b544 <HAL_TIM_ConfigClockSource+0x640>
 800b53a:	f241 6118 	movw	r1, #5656	@ 0x1618
 800b53e:	4810      	ldr	r0, [pc, #64]	@ (800b580 <HAL_TIM_ConfigClockSource+0x67c>)
 800b540:	f7f6 ff10 	bl	8002364 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b550:	461a      	mov	r2, r3
 800b552:	f000 fcb2 	bl	800beba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2160      	movs	r1, #96	@ 0x60
 800b55c:	4618      	mov	r0, r3
 800b55e:	f000 fcdc 	bl	800bf1a <TIM_ITRx_SetConfig>
      break;
 800b562:	e388      	b.n	800bc76 <HAL_TIM_ConfigClockSource+0xd72>
 800b564:	40012c00 	.word	0x40012c00
 800b568:	40000400 	.word	0x40000400
 800b56c:	40000800 	.word	0x40000800
 800b570:	40000c00 	.word	0x40000c00
 800b574:	40013400 	.word	0x40013400
 800b578:	40014000 	.word	0x40014000
 800b57c:	40015000 	.word	0x40015000
 800b580:	08011c60 	.word	0x08011c60
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a2e      	ldr	r2, [pc, #184]	@ (800b644 <HAL_TIM_ConfigClockSource+0x740>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d027      	beq.n	800b5de <HAL_TIM_ConfigClockSource+0x6da>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b596:	d022      	beq.n	800b5de <HAL_TIM_ConfigClockSource+0x6da>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a2a      	ldr	r2, [pc, #168]	@ (800b648 <HAL_TIM_ConfigClockSource+0x744>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d01d      	beq.n	800b5de <HAL_TIM_ConfigClockSource+0x6da>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a29      	ldr	r2, [pc, #164]	@ (800b64c <HAL_TIM_ConfigClockSource+0x748>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d018      	beq.n	800b5de <HAL_TIM_ConfigClockSource+0x6da>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a27      	ldr	r2, [pc, #156]	@ (800b650 <HAL_TIM_ConfigClockSource+0x74c>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d013      	beq.n	800b5de <HAL_TIM_ConfigClockSource+0x6da>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a26      	ldr	r2, [pc, #152]	@ (800b654 <HAL_TIM_ConfigClockSource+0x750>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d00e      	beq.n	800b5de <HAL_TIM_ConfigClockSource+0x6da>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a24      	ldr	r2, [pc, #144]	@ (800b658 <HAL_TIM_ConfigClockSource+0x754>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d009      	beq.n	800b5de <HAL_TIM_ConfigClockSource+0x6da>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a23      	ldr	r2, [pc, #140]	@ (800b65c <HAL_TIM_ConfigClockSource+0x758>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d004      	beq.n	800b5de <HAL_TIM_ConfigClockSource+0x6da>
 800b5d4:	f241 6124 	movw	r1, #5668	@ 0x1624
 800b5d8:	4821      	ldr	r0, [pc, #132]	@ (800b660 <HAL_TIM_ConfigClockSource+0x75c>)
 800b5da:	f7f6 fec3 	bl	8002364 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b5e6:	d014      	beq.n	800b612 <HAL_TIM_ConfigClockSource+0x70e>
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d010      	beq.n	800b612 <HAL_TIM_ConfigClockSource+0x70e>
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d00c      	beq.n	800b612 <HAL_TIM_ConfigClockSource+0x70e>
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	d008      	beq.n	800b612 <HAL_TIM_ConfigClockSource+0x70e>
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	2b0a      	cmp	r3, #10
 800b606:	d004      	beq.n	800b612 <HAL_TIM_ConfigClockSource+0x70e>
 800b608:	f241 6127 	movw	r1, #5671	@ 0x1627
 800b60c:	4814      	ldr	r0, [pc, #80]	@ (800b660 <HAL_TIM_ConfigClockSource+0x75c>)
 800b60e:	f7f6 fea9 	bl	8002364 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	2b0f      	cmp	r3, #15
 800b618:	d904      	bls.n	800b624 <HAL_TIM_ConfigClockSource+0x720>
 800b61a:	f241 6128 	movw	r1, #5672	@ 0x1628
 800b61e:	4810      	ldr	r0, [pc, #64]	@ (800b660 <HAL_TIM_ConfigClockSource+0x75c>)
 800b620:	f7f6 fea0 	bl	8002364 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b630:	461a      	mov	r2, r3
 800b632:	f000 fc13 	bl	800be5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2140      	movs	r1, #64	@ 0x40
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 fc6c 	bl	800bf1a <TIM_ITRx_SetConfig>
      break;
 800b642:	e318      	b.n	800bc76 <HAL_TIM_ConfigClockSource+0xd72>
 800b644:	40012c00 	.word	0x40012c00
 800b648:	40000400 	.word	0x40000400
 800b64c:	40000800 	.word	0x40000800
 800b650:	40000c00 	.word	0x40000c00
 800b654:	40013400 	.word	0x40013400
 800b658:	40014000 	.word	0x40014000
 800b65c:	40015000 	.word	0x40015000
 800b660:	08011c60 	.word	0x08011c60
    case TIM_CLOCKSOURCE_ITR10:
#endif /* HRTIM1 */
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a9c      	ldr	r2, [pc, #624]	@ (800b8dc <HAL_TIM_ConfigClockSource+0x9d8>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d158      	bne.n	800b720 <HAL_TIM_ConfigClockSource+0x81c>
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b676:	f000 82f1 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b70      	cmp	r3, #112	@ 0x70
 800b680:	f000 82ec 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b68c:	f000 82e6 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2b40      	cmp	r3, #64	@ 0x40
 800b696:	f000 82e1 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b50      	cmp	r3, #80	@ 0x50
 800b6a0:	f000 82dc 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b60      	cmp	r3, #96	@ 0x60
 800b6aa:	f000 82d7 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2b10      	cmp	r3, #16
 800b6b4:	f000 82d2 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2b20      	cmp	r3, #32
 800b6be:	f000 82cd 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b30      	cmp	r3, #48	@ 0x30
 800b6c8:	f000 82c8 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6d4:	f000 82c2 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b6e0:	f000 82bc 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a7d      	ldr	r2, [pc, #500]	@ (800b8e0 <HAL_TIM_ConfigClockSource+0x9dc>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	f000 82b6 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a7b      	ldr	r2, [pc, #492]	@ (800b8e4 <HAL_TIM_ConfigClockSource+0x9e0>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	f000 82b0 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a79      	ldr	r2, [pc, #484]	@ (800b8e8 <HAL_TIM_ConfigClockSource+0x9e4>)
 800b702:	4293      	cmp	r3, r2
 800b704:	f000 82aa 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a77      	ldr	r2, [pc, #476]	@ (800b8ec <HAL_TIM_ConfigClockSource+0x9e8>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	f000 82a4 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a75      	ldr	r2, [pc, #468]	@ (800b8f0 <HAL_TIM_ConfigClockSource+0x9ec>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	f000 829e 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b728:	d15e      	bne.n	800b7e8 <HAL_TIM_ConfigClockSource+0x8e4>
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b732:	f000 8293 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b70      	cmp	r3, #112	@ 0x70
 800b73c:	f000 828e 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b748:	f000 8288 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b40      	cmp	r3, #64	@ 0x40
 800b752:	f000 8283 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2b50      	cmp	r3, #80	@ 0x50
 800b75c:	f000 827e 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b60      	cmp	r3, #96	@ 0x60
 800b766:	f000 8279 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f000 8274 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b20      	cmp	r3, #32
 800b77a:	f000 826f 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	2b30      	cmp	r3, #48	@ 0x30
 800b784:	f000 826a 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b790:	f000 8264 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b79c:	f000 825e 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a4e      	ldr	r2, [pc, #312]	@ (800b8e0 <HAL_TIM_ConfigClockSource+0x9dc>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	f000 8258 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a4c      	ldr	r2, [pc, #304]	@ (800b8e4 <HAL_TIM_ConfigClockSource+0x9e0>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	f000 8252 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a4a      	ldr	r2, [pc, #296]	@ (800b8e8 <HAL_TIM_ConfigClockSource+0x9e4>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	f000 824c 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a48      	ldr	r2, [pc, #288]	@ (800b8ec <HAL_TIM_ConfigClockSource+0x9e8>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	f000 8246 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a46      	ldr	r2, [pc, #280]	@ (800b8f0 <HAL_TIM_ConfigClockSource+0x9ec>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	f000 8240 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a44      	ldr	r2, [pc, #272]	@ (800b8f4 <HAL_TIM_ConfigClockSource+0x9f0>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	f000 823a 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a42      	ldr	r2, [pc, #264]	@ (800b8f8 <HAL_TIM_ConfigClockSource+0x9f4>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d158      	bne.n	800b8a4 <HAL_TIM_ConfigClockSource+0x9a0>
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7fa:	f000 822f 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	2b70      	cmp	r3, #112	@ 0x70
 800b804:	f000 822a 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b810:	f000 8224 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b40      	cmp	r3, #64	@ 0x40
 800b81a:	f000 821f 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b50      	cmp	r3, #80	@ 0x50
 800b824:	f000 821a 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2b60      	cmp	r3, #96	@ 0x60
 800b82e:	f000 8215 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	f000 8210 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b10      	cmp	r3, #16
 800b842:	f000 820b 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b30      	cmp	r3, #48	@ 0x30
 800b84c:	f000 8206 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b858:	f000 8200 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b864:	f000 81fa 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a1c      	ldr	r2, [pc, #112]	@ (800b8e0 <HAL_TIM_ConfigClockSource+0x9dc>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	f000 81f4 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a1a      	ldr	r2, [pc, #104]	@ (800b8e4 <HAL_TIM_ConfigClockSource+0x9e0>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	f000 81ee 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a18      	ldr	r2, [pc, #96]	@ (800b8e8 <HAL_TIM_ConfigClockSource+0x9e4>)
 800b886:	4293      	cmp	r3, r2
 800b888:	f000 81e8 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a16      	ldr	r2, [pc, #88]	@ (800b8ec <HAL_TIM_ConfigClockSource+0x9e8>)
 800b892:	4293      	cmp	r3, r2
 800b894:	f000 81e2 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a14      	ldr	r2, [pc, #80]	@ (800b8f0 <HAL_TIM_ConfigClockSource+0x9ec>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	f000 81dc 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a14      	ldr	r2, [pc, #80]	@ (800b8fc <HAL_TIM_ConfigClockSource+0x9f8>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d16b      	bne.n	800b986 <HAL_TIM_ConfigClockSource+0xa82>
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8b6:	f000 81d1 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2b70      	cmp	r3, #112	@ 0x70
 800b8c0:	f000 81cc 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b8cc:	f000 81c6 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b40      	cmp	r3, #64	@ 0x40
 800b8d6:	f000 81c1 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b8da:	e011      	b.n	800b900 <HAL_TIM_ConfigClockSource+0x9fc>
 800b8dc:	40012c00 	.word	0x40012c00
 800b8e0:	00100020 	.word	0x00100020
 800b8e4:	00100030 	.word	0x00100030
 800b8e8:	00100040 	.word	0x00100040
 800b8ec:	00100050 	.word	0x00100050
 800b8f0:	00100060 	.word	0x00100060
 800b8f4:	00100070 	.word	0x00100070
 800b8f8:	40000400 	.word	0x40000400
 800b8fc:	40000800 	.word	0x40000800
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b50      	cmp	r3, #80	@ 0x50
 800b906:	f000 81a9 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b60      	cmp	r3, #96	@ 0x60
 800b910:	f000 81a4 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f000 819f 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b10      	cmp	r3, #16
 800b924:	f000 819a 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b20      	cmp	r3, #32
 800b92e:	f000 8195 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b93a:	f000 818f 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b946:	f000 8189 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a98      	ldr	r2, [pc, #608]	@ (800bbb0 <HAL_TIM_ConfigClockSource+0xcac>)
 800b950:	4293      	cmp	r3, r2
 800b952:	f000 8183 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a96      	ldr	r2, [pc, #600]	@ (800bbb4 <HAL_TIM_ConfigClockSource+0xcb0>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	f000 817d 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a94      	ldr	r2, [pc, #592]	@ (800bbb8 <HAL_TIM_ConfigClockSource+0xcb4>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	f000 8177 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a92      	ldr	r2, [pc, #584]	@ (800bbbc <HAL_TIM_ConfigClockSource+0xcb8>)
 800b974:	4293      	cmp	r3, r2
 800b976:	f000 8171 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a90      	ldr	r2, [pc, #576]	@ (800bbc0 <HAL_TIM_ConfigClockSource+0xcbc>)
 800b980:	4293      	cmp	r3, r2
 800b982:	f000 816b 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a8e      	ldr	r2, [pc, #568]	@ (800bbc4 <HAL_TIM_ConfigClockSource+0xcc0>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d157      	bne.n	800ba40 <HAL_TIM_ConfigClockSource+0xb3c>
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b998:	f000 8160 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b70      	cmp	r3, #112	@ 0x70
 800b9a2:	f000 815b 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9ae:	f000 8155 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b40      	cmp	r3, #64	@ 0x40
 800b9b8:	f000 8150 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2b50      	cmp	r3, #80	@ 0x50
 800b9c2:	f000 814b 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2b60      	cmp	r3, #96	@ 0x60
 800b9cc:	f000 8146 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f000 8141 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2b10      	cmp	r3, #16
 800b9e0:	f000 813c 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2b20      	cmp	r3, #32
 800b9ea:	f000 8137 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b30      	cmp	r3, #48	@ 0x30
 800b9f4:	f000 8132 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ba00:	f000 812c 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a69      	ldr	r2, [pc, #420]	@ (800bbb0 <HAL_TIM_ConfigClockSource+0xcac>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	f000 8126 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a67      	ldr	r2, [pc, #412]	@ (800bbb4 <HAL_TIM_ConfigClockSource+0xcb0>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	f000 8120 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a65      	ldr	r2, [pc, #404]	@ (800bbb8 <HAL_TIM_ConfigClockSource+0xcb4>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	f000 811a 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a63      	ldr	r2, [pc, #396]	@ (800bbbc <HAL_TIM_ConfigClockSource+0xcb8>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	f000 8114 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a61      	ldr	r2, [pc, #388]	@ (800bbc0 <HAL_TIM_ConfigClockSource+0xcbc>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	f000 810e 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a60      	ldr	r2, [pc, #384]	@ (800bbc8 <HAL_TIM_ConfigClockSource+0xcc4>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d157      	bne.n	800bafa <HAL_TIM_ConfigClockSource+0xbf6>
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba52:	f000 8103 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b70      	cmp	r3, #112	@ 0x70
 800ba5c:	f000 80fe 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba68:	f000 80f8 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b40      	cmp	r3, #64	@ 0x40
 800ba72:	f000 80f3 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2b50      	cmp	r3, #80	@ 0x50
 800ba7c:	f000 80ee 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2b60      	cmp	r3, #96	@ 0x60
 800ba86:	f000 80e9 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f000 80e4 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b10      	cmp	r3, #16
 800ba9a:	f000 80df 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b20      	cmp	r3, #32
 800baa4:	f000 80da 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b30      	cmp	r3, #48	@ 0x30
 800baae:	f000 80d5 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800baba:	f000 80cf 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a3b      	ldr	r2, [pc, #236]	@ (800bbb0 <HAL_TIM_ConfigClockSource+0xcac>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	f000 80c9 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a39      	ldr	r2, [pc, #228]	@ (800bbb4 <HAL_TIM_ConfigClockSource+0xcb0>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	f000 80c3 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a37      	ldr	r2, [pc, #220]	@ (800bbb8 <HAL_TIM_ConfigClockSource+0xcb4>)
 800badc:	4293      	cmp	r3, r2
 800bade:	f000 80bd 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a35      	ldr	r2, [pc, #212]	@ (800bbbc <HAL_TIM_ConfigClockSource+0xcb8>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	f000 80b7 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a33      	ldr	r2, [pc, #204]	@ (800bbc0 <HAL_TIM_ConfigClockSource+0xcbc>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	f000 80b1 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a33      	ldr	r2, [pc, #204]	@ (800bbcc <HAL_TIM_ConfigClockSource+0xcc8>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d146      	bne.n	800bb92 <HAL_TIM_ConfigClockSource+0xc8e>
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb0c:	f000 80a6 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b40      	cmp	r3, #64	@ 0x40
 800bb16:	f000 80a1 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b50      	cmp	r3, #80	@ 0x50
 800bb20:	f000 809c 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b60      	cmp	r3, #96	@ 0x60
 800bb2a:	f000 8097 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f000 8092 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2b10      	cmp	r3, #16
 800bb3e:	f000 808d 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2b20      	cmp	r3, #32
 800bb48:	f000 8088 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2b30      	cmp	r3, #48	@ 0x30
 800bb52:	f000 8083 	beq.w	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb5e:	d07d      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bb68:	d078      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a11      	ldr	r2, [pc, #68]	@ (800bbb4 <HAL_TIM_ConfigClockSource+0xcb0>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d073      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a0f      	ldr	r2, [pc, #60]	@ (800bbb8 <HAL_TIM_ConfigClockSource+0xcb4>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d06e      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a0e      	ldr	r2, [pc, #56]	@ (800bbbc <HAL_TIM_ConfigClockSource+0xcb8>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d069      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a0c      	ldr	r2, [pc, #48]	@ (800bbc0 <HAL_TIM_ConfigClockSource+0xcbc>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d064      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a0e      	ldr	r2, [pc, #56]	@ (800bbd0 <HAL_TIM_ConfigClockSource+0xccc>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d15a      	bne.n	800bc52 <HAL_TIM_ConfigClockSource+0xd4e>
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bba4:	d05a      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2b70      	cmp	r3, #112	@ 0x70
 800bbac:	d056      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bbae:	e011      	b.n	800bbd4 <HAL_TIM_ConfigClockSource+0xcd0>
 800bbb0:	00100020 	.word	0x00100020
 800bbb4:	00100030 	.word	0x00100030
 800bbb8:	00100040 	.word	0x00100040
 800bbbc:	00100050 	.word	0x00100050
 800bbc0:	00100060 	.word	0x00100060
 800bbc4:	40000c00 	.word	0x40000c00
 800bbc8:	40013400 	.word	0x40013400
 800bbcc:	40014000 	.word	0x40014000
 800bbd0:	40015000 	.word	0x40015000
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbdc:	d03e      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b40      	cmp	r3, #64	@ 0x40
 800bbe4:	d03a      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b50      	cmp	r3, #80	@ 0x50
 800bbec:	d036      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2b60      	cmp	r3, #96	@ 0x60
 800bbf4:	d032      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d02e      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2b10      	cmp	r3, #16
 800bc04:	d02a      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	2b20      	cmp	r3, #32
 800bc0c:	d026      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2b30      	cmp	r3, #48	@ 0x30
 800bc14:	d022      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc1e:	d01d      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bc28:	d018      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a18      	ldr	r2, [pc, #96]	@ (800bc90 <HAL_TIM_ConfigClockSource+0xd8c>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d013      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a16      	ldr	r2, [pc, #88]	@ (800bc94 <HAL_TIM_ConfigClockSource+0xd90>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d00e      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a15      	ldr	r2, [pc, #84]	@ (800bc98 <HAL_TIM_ConfigClockSource+0xd94>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d009      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4a13      	ldr	r2, [pc, #76]	@ (800bc9c <HAL_TIM_ConfigClockSource+0xd98>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d004      	beq.n	800bc5c <HAL_TIM_ConfigClockSource+0xd58>
 800bc52:	f241 6145 	movw	r1, #5701	@ 0x1645
 800bc56:	4812      	ldr	r0, [pc, #72]	@ (800bca0 <HAL_TIM_ConfigClockSource+0xd9c>)
 800bc58:	f7f6 fb84 	bl	8002364 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4619      	mov	r1, r3
 800bc66:	4610      	mov	r0, r2
 800bc68:	f000 f957 	bl	800bf1a <TIM_ITRx_SetConfig>
      break;
 800bc6c:	e003      	b.n	800bc76 <HAL_TIM_ConfigClockSource+0xd72>
    }

    default:
      status = HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	73fb      	strb	r3, [r7, #15]
      break;
 800bc72:	e000      	b.n	800bc76 <HAL_TIM_ConfigClockSource+0xd72>
      break;
 800bc74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2201      	movs	r2, #1
 800bc7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bc86:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	00100020 	.word	0x00100020
 800bc94:	00100030 	.word	0x00100030
 800bc98:	00100040 	.word	0x00100040
 800bc9c:	00100060 	.word	0x00100060
 800bca0:	08011c60 	.word	0x08011c60

0800bca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bcac:	bf00      	nop
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bcd4:	bf00      	nop
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bce8:	bf00      	nop
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a4c      	ldr	r2, [pc, #304]	@ (800be38 <TIM_Base_SetConfig+0x144>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d017      	beq.n	800bd3c <TIM_Base_SetConfig+0x48>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd12:	d013      	beq.n	800bd3c <TIM_Base_SetConfig+0x48>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a49      	ldr	r2, [pc, #292]	@ (800be3c <TIM_Base_SetConfig+0x148>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d00f      	beq.n	800bd3c <TIM_Base_SetConfig+0x48>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a48      	ldr	r2, [pc, #288]	@ (800be40 <TIM_Base_SetConfig+0x14c>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d00b      	beq.n	800bd3c <TIM_Base_SetConfig+0x48>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4a47      	ldr	r2, [pc, #284]	@ (800be44 <TIM_Base_SetConfig+0x150>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d007      	beq.n	800bd3c <TIM_Base_SetConfig+0x48>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4a46      	ldr	r2, [pc, #280]	@ (800be48 <TIM_Base_SetConfig+0x154>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d003      	beq.n	800bd3c <TIM_Base_SetConfig+0x48>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4a45      	ldr	r2, [pc, #276]	@ (800be4c <TIM_Base_SetConfig+0x158>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d108      	bne.n	800bd4e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	68fa      	ldr	r2, [r7, #12]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4a39      	ldr	r2, [pc, #228]	@ (800be38 <TIM_Base_SetConfig+0x144>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d023      	beq.n	800bd9e <TIM_Base_SetConfig+0xaa>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd5c:	d01f      	beq.n	800bd9e <TIM_Base_SetConfig+0xaa>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a36      	ldr	r2, [pc, #216]	@ (800be3c <TIM_Base_SetConfig+0x148>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d01b      	beq.n	800bd9e <TIM_Base_SetConfig+0xaa>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a35      	ldr	r2, [pc, #212]	@ (800be40 <TIM_Base_SetConfig+0x14c>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d017      	beq.n	800bd9e <TIM_Base_SetConfig+0xaa>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a34      	ldr	r2, [pc, #208]	@ (800be44 <TIM_Base_SetConfig+0x150>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d013      	beq.n	800bd9e <TIM_Base_SetConfig+0xaa>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a33      	ldr	r2, [pc, #204]	@ (800be48 <TIM_Base_SetConfig+0x154>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d00f      	beq.n	800bd9e <TIM_Base_SetConfig+0xaa>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a33      	ldr	r2, [pc, #204]	@ (800be50 <TIM_Base_SetConfig+0x15c>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d00b      	beq.n	800bd9e <TIM_Base_SetConfig+0xaa>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4a32      	ldr	r2, [pc, #200]	@ (800be54 <TIM_Base_SetConfig+0x160>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d007      	beq.n	800bd9e <TIM_Base_SetConfig+0xaa>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	4a31      	ldr	r2, [pc, #196]	@ (800be58 <TIM_Base_SetConfig+0x164>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d003      	beq.n	800bd9e <TIM_Base_SetConfig+0xaa>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4a2c      	ldr	r2, [pc, #176]	@ (800be4c <TIM_Base_SetConfig+0x158>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d108      	bne.n	800bdb0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bda4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	4313      	orrs	r3, r2
 800bdae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	695b      	ldr	r3, [r3, #20]
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	689a      	ldr	r2, [r3, #8]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a18      	ldr	r2, [pc, #96]	@ (800be38 <TIM_Base_SetConfig+0x144>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d013      	beq.n	800be04 <TIM_Base_SetConfig+0x110>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a1a      	ldr	r2, [pc, #104]	@ (800be48 <TIM_Base_SetConfig+0x154>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d00f      	beq.n	800be04 <TIM_Base_SetConfig+0x110>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a1a      	ldr	r2, [pc, #104]	@ (800be50 <TIM_Base_SetConfig+0x15c>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d00b      	beq.n	800be04 <TIM_Base_SetConfig+0x110>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4a19      	ldr	r2, [pc, #100]	@ (800be54 <TIM_Base_SetConfig+0x160>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d007      	beq.n	800be04 <TIM_Base_SetConfig+0x110>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a18      	ldr	r2, [pc, #96]	@ (800be58 <TIM_Base_SetConfig+0x164>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d003      	beq.n	800be04 <TIM_Base_SetConfig+0x110>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4a13      	ldr	r2, [pc, #76]	@ (800be4c <TIM_Base_SetConfig+0x158>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d103      	bne.n	800be0c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	691a      	ldr	r2, [r3, #16]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2201      	movs	r2, #1
 800be10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	f003 0301 	and.w	r3, r3, #1
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d105      	bne.n	800be2a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	691b      	ldr	r3, [r3, #16]
 800be22:	f023 0201 	bic.w	r2, r3, #1
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	611a      	str	r2, [r3, #16]
  }
}
 800be2a:	bf00      	nop
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	40012c00 	.word	0x40012c00
 800be3c:	40000400 	.word	0x40000400
 800be40:	40000800 	.word	0x40000800
 800be44:	40000c00 	.word	0x40000c00
 800be48:	40013400 	.word	0x40013400
 800be4c:	40015000 	.word	0x40015000
 800be50:	40014000 	.word	0x40014000
 800be54:	40014400 	.word	0x40014400
 800be58:	40014800 	.word	0x40014800

0800be5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b087      	sub	sp, #28
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6a1b      	ldr	r3, [r3, #32]
 800be6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	6a1b      	ldr	r3, [r3, #32]
 800be72:	f023 0201 	bic.w	r2, r3, #1
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	699b      	ldr	r3, [r3, #24]
 800be7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800be86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	011b      	lsls	r3, r3, #4
 800be8c:	693a      	ldr	r2, [r7, #16]
 800be8e:	4313      	orrs	r3, r2
 800be90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	f023 030a 	bic.w	r3, r3, #10
 800be98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be9a:	697a      	ldr	r2, [r7, #20]
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	4313      	orrs	r3, r2
 800bea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	693a      	ldr	r2, [r7, #16]
 800bea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	697a      	ldr	r2, [r7, #20]
 800beac:	621a      	str	r2, [r3, #32]
}
 800beae:	bf00      	nop
 800beb0:	371c      	adds	r7, #28
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr

0800beba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800beba:	b480      	push	{r7}
 800bebc:	b087      	sub	sp, #28
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	60f8      	str	r0, [r7, #12]
 800bec2:	60b9      	str	r1, [r7, #8]
 800bec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6a1b      	ldr	r3, [r3, #32]
 800beca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	6a1b      	ldr	r3, [r3, #32]
 800bed0:	f023 0210 	bic.w	r2, r3, #16
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	699b      	ldr	r3, [r3, #24]
 800bedc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	031b      	lsls	r3, r3, #12
 800beea:	693a      	ldr	r2, [r7, #16]
 800beec:	4313      	orrs	r3, r2
 800beee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bef6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	011b      	lsls	r3, r3, #4
 800befc:	697a      	ldr	r2, [r7, #20]
 800befe:	4313      	orrs	r3, r2
 800bf00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	693a      	ldr	r2, [r7, #16]
 800bf06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	697a      	ldr	r2, [r7, #20]
 800bf0c:	621a      	str	r2, [r3, #32]
}
 800bf0e:	bf00      	nop
 800bf10:	371c      	adds	r7, #28
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr

0800bf1a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf1a:	b480      	push	{r7}
 800bf1c:	b085      	sub	sp, #20
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bf30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf36:	683a      	ldr	r2, [r7, #0]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	f043 0307 	orr.w	r3, r3, #7
 800bf40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	68fa      	ldr	r2, [r7, #12]
 800bf46:	609a      	str	r2, [r3, #8]
}
 800bf48:	bf00      	nop
 800bf4a:	3714      	adds	r7, #20
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b087      	sub	sp, #28
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
 800bf60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	689b      	ldr	r3, [r3, #8]
 800bf66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	021a      	lsls	r2, r3, #8
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	431a      	orrs	r2, r3
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	697a      	ldr	r2, [r7, #20]
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	697a      	ldr	r2, [r7, #20]
 800bf86:	609a      	str	r2, [r3, #8]
}
 800bf88:	bf00      	nop
 800bf8a:	371c      	adds	r7, #28
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4a39      	ldr	r2, [pc, #228]	@ (800c088 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d031      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfb0:	d02c      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a35      	ldr	r2, [pc, #212]	@ (800c08c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d027      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a33      	ldr	r2, [pc, #204]	@ (800c090 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d022      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a32      	ldr	r2, [pc, #200]	@ (800c094 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d01d      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a30      	ldr	r2, [pc, #192]	@ (800c098 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d018      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a2f      	ldr	r2, [pc, #188]	@ (800c09c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d013      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a2d      	ldr	r2, [pc, #180]	@ (800c0a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d00e      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4a2c      	ldr	r2, [pc, #176]	@ (800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d009      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a2a      	ldr	r2, [pc, #168]	@ (800c0a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d004      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800c002:	f640 018b 	movw	r1, #2187	@ 0x88b
 800c006:	4829      	ldr	r0, [pc, #164]	@ (800c0ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c008:	f7f6 f9ac 	bl	8002364 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d025      	beq.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b10      	cmp	r3, #16
 800c01a:	d021      	beq.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b20      	cmp	r3, #32
 800c022:	d01d      	beq.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2b30      	cmp	r3, #48	@ 0x30
 800c02a:	d019      	beq.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2b40      	cmp	r3, #64	@ 0x40
 800c032:	d015      	beq.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b50      	cmp	r3, #80	@ 0x50
 800c03a:	d011      	beq.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b60      	cmp	r3, #96	@ 0x60
 800c042:	d00d      	beq.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2b70      	cmp	r3, #112	@ 0x70
 800c04a:	d009      	beq.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c054:	d004      	beq.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c056:	f640 018c 	movw	r1, #2188	@ 0x88c
 800c05a:	4814      	ldr	r0, [pc, #80]	@ (800c0ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c05c:	f7f6 f982 	bl	8002364 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	2b80      	cmp	r3, #128	@ 0x80
 800c066:	d008      	beq.n	800c07a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d004      	beq.n	800c07a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
 800c070:	f640 018d 	movw	r1, #2189	@ 0x88d
 800c074:	480d      	ldr	r0, [pc, #52]	@ (800c0ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c076:	f7f6 f975 	bl	8002364 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c080:	2b01      	cmp	r3, #1
 800c082:	d115      	bne.n	800c0b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c084:	2302      	movs	r3, #2
 800c086:	e0e1      	b.n	800c24c <HAL_TIMEx_MasterConfigSynchronization+0x2b8>
 800c088:	40012c00 	.word	0x40012c00
 800c08c:	40000400 	.word	0x40000400
 800c090:	40000800 	.word	0x40000800
 800c094:	40000c00 	.word	0x40000c00
 800c098:	40001000 	.word	0x40001000
 800c09c:	40001400 	.word	0x40001400
 800c0a0:	40013400 	.word	0x40013400
 800c0a4:	40014000 	.word	0x40014000
 800c0a8:	40015000 	.word	0x40015000
 800c0ac:	08011cd0 	.word	0x08011cd0
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2202      	movs	r2, #2
 800c0bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a5f      	ldr	r2, [pc, #380]	@ (800c254 <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d009      	beq.n	800c0ee <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a5e      	ldr	r2, [pc, #376]	@ (800c258 <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d004      	beq.n	800c0ee <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a5c      	ldr	r2, [pc, #368]	@ (800c25c <HAL_TIMEx_MasterConfigSynchronization+0x2c8>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d161      	bne.n	800c1b2 <HAL_TIMEx_MasterConfigSynchronization+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d054      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c0fe:	d04f      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c108:	d04a      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c112:	d045      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c11c:	d040      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800c126:	d03b      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c130:	d036      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c13a:	d031      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800c144:	d02c      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c14e:	d027      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800c158:	d022      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c162:	d01d      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800c16c:	d018      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c176:	d013      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800c180:	d00e      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800c18a:	d009      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800c194:	d004      	beq.n	800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800c196:	f640 019f 	movw	r1, #2207	@ 0x89f
 800c19a:	4831      	ldr	r0, [pc, #196]	@ (800c260 <HAL_TIMEx_MasterConfigSynchronization+0x2cc>)
 800c19c:	f7f6 f8e2 	bl	8002364 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c1a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c1b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	68fa      	ldr	r2, [r7, #12]
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4a1f      	ldr	r2, [pc, #124]	@ (800c254 <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d022      	beq.n	800c220 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1e2:	d01d      	beq.n	800c220 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a1e      	ldr	r2, [pc, #120]	@ (800c264 <HAL_TIMEx_MasterConfigSynchronization+0x2d0>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d018      	beq.n	800c220 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a1d      	ldr	r2, [pc, #116]	@ (800c268 <HAL_TIMEx_MasterConfigSynchronization+0x2d4>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d013      	beq.n	800c220 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a1b      	ldr	r2, [pc, #108]	@ (800c26c <HAL_TIMEx_MasterConfigSynchronization+0x2d8>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d00e      	beq.n	800c220 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4a14      	ldr	r2, [pc, #80]	@ (800c258 <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d009      	beq.n	800c220 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a17      	ldr	r2, [pc, #92]	@ (800c270 <HAL_TIMEx_MasterConfigSynchronization+0x2dc>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d004      	beq.n	800c220 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a10      	ldr	r2, [pc, #64]	@ (800c25c <HAL_TIMEx_MasterConfigSynchronization+0x2c8>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d10c      	bne.n	800c23a <HAL_TIMEx_MasterConfigSynchronization+0x2a6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c226:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	68ba      	ldr	r2, [r7, #8]
 800c22e:	4313      	orrs	r3, r2
 800c230:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	68ba      	ldr	r2, [r7, #8]
 800c238:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2201      	movs	r2, #1
 800c23e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c24a:	2300      	movs	r3, #0
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3710      	adds	r7, #16
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	40012c00 	.word	0x40012c00
 800c258:	40013400 	.word	0x40013400
 800c25c:	40015000 	.word	0x40015000
 800c260:	08011cd0 	.word	0x08011cd0
 800c264:	40000400 	.word	0x40000400
 800c268:	40000800 	.word	0x40000800
 800c26c:	40000c00 	.word	0x40000c00
 800c270:	40014000 	.word	0x40014000

0800c274 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c27c:	bf00      	nop
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c2a4:	bf00      	nop
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c2b8:	bf00      	nop
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c2cc:	bf00      	nop
 800c2ce:	370c      	adds	r7, #12
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr

0800c2d8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c2e0:	bf00      	nop
 800c2e2:	370c      	adds	r7, #12
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr

0800c2ec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c2f4:	bf00      	nop
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2200      	movs	r2, #0
 800c30c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c310:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c314:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	b29a      	uxth	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c32e:	b480      	push	{r7}
 800c330:	b085      	sub	sp, #20
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c336:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c33a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c342:	b29a      	uxth	r2, r3
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	b29b      	uxth	r3, r3
 800c348:	43db      	mvns	r3, r3
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	4013      	ands	r3, r2
 800c34e:	b29a      	uxth	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3714      	adds	r7, #20
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	1d3b      	adds	r3, r7, #4
 800c36e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2201      	movs	r2, #1
 800c376:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2200      	movs	r2, #0
 800c37e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2200      	movs	r2, #0
 800c386:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2200      	movs	r2, #0
 800c38e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c392:	2300      	movs	r3, #0
}
 800c394:	4618      	mov	r0, r3
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b09d      	sub	sp, #116	@ 0x74
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	4413      	add	r3, r2
 800c3ba:	881b      	ldrh	r3, [r3, #0]
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800c3c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3c6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	78db      	ldrb	r3, [r3, #3]
 800c3ce:	2b03      	cmp	r3, #3
 800c3d0:	d81f      	bhi.n	800c412 <USB_ActivateEndpoint+0x72>
 800c3d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3d8 <USB_ActivateEndpoint+0x38>)
 800c3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d8:	0800c3e9 	.word	0x0800c3e9
 800c3dc:	0800c405 	.word	0x0800c405
 800c3e0:	0800c41b 	.word	0x0800c41b
 800c3e4:	0800c3f7 	.word	0x0800c3f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c3e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c3ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c3f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c3f4:	e012      	b.n	800c41c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c3f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c3fa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c3fe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c402:	e00b      	b.n	800c41c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c404:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c408:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c40c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c410:	e004      	b.n	800c41c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c412:	2301      	movs	r3, #1
 800c414:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800c418:	e000      	b.n	800c41c <USB_ActivateEndpoint+0x7c>
      break;
 800c41a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	441a      	add	r2, r3
 800c426:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c42a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c42e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	4413      	add	r3, r2
 800c448:	881b      	ldrh	r3, [r3, #0]
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	b21b      	sxth	r3, r3
 800c44e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c456:	b21a      	sxth	r2, r3
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	b21b      	sxth	r3, r3
 800c45e:	4313      	orrs	r3, r2
 800c460:	b21b      	sxth	r3, r3
 800c462:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	441a      	add	r2, r3
 800c470:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c474:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c478:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c47c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c484:	b29b      	uxth	r3, r3
 800c486:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	7b1b      	ldrb	r3, [r3, #12]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f040 8178 	bne.w	800c782 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	785b      	ldrb	r3, [r3, #1]
 800c496:	2b00      	cmp	r3, #0
 800c498:	f000 8084 	beq.w	800c5a4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	61bb      	str	r3, [r7, #24]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	61bb      	str	r3, [r7, #24]
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	00da      	lsls	r2, r3, #3
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c4be:	617b      	str	r3, [r7, #20]
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	88db      	ldrh	r3, [r3, #6]
 800c4c4:	085b      	lsrs	r3, r3, #1
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	005b      	lsls	r3, r3, #1
 800c4ca:	b29a      	uxth	r2, r3
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	4413      	add	r3, r2
 800c4da:	881b      	ldrh	r3, [r3, #0]
 800c4dc:	827b      	strh	r3, [r7, #18]
 800c4de:	8a7b      	ldrh	r3, [r7, #18]
 800c4e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d01b      	beq.n	800c520 <USB_ActivateEndpoint+0x180>
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	4413      	add	r3, r2
 800c4f2:	881b      	ldrh	r3, [r3, #0]
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4fe:	823b      	strh	r3, [r7, #16]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	441a      	add	r2, r3
 800c50a:	8a3b      	ldrh	r3, [r7, #16]
 800c50c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c510:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c514:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c518:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	78db      	ldrb	r3, [r3, #3]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d020      	beq.n	800c56a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	4413      	add	r3, r2
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	b29b      	uxth	r3, r3
 800c536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c53a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c53e:	81bb      	strh	r3, [r7, #12]
 800c540:	89bb      	ldrh	r3, [r7, #12]
 800c542:	f083 0320 	eor.w	r3, r3, #32
 800c546:	81bb      	strh	r3, [r7, #12]
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	441a      	add	r2, r3
 800c552:	89bb      	ldrh	r3, [r7, #12]
 800c554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c55c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c564:	b29b      	uxth	r3, r3
 800c566:	8013      	strh	r3, [r2, #0]
 800c568:	e2d5      	b.n	800cb16 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	4413      	add	r3, r2
 800c574:	881b      	ldrh	r3, [r3, #0]
 800c576:	b29b      	uxth	r3, r3
 800c578:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c57c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c580:	81fb      	strh	r3, [r7, #14]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	441a      	add	r2, r3
 800c58c:	89fb      	ldrh	r3, [r7, #14]
 800c58e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c59a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	8013      	strh	r3, [r2, #0]
 800c5a2:	e2b8      	b.n	800cb16 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b4:	4413      	add	r3, r2
 800c5b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	00da      	lsls	r2, r3, #3
 800c5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c0:	4413      	add	r3, r2
 800c5c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c5c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	88db      	ldrh	r3, [r3, #6]
 800c5cc:	085b      	lsrs	r3, r3, #1
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	005b      	lsls	r3, r3, #1
 800c5d2:	b29a      	uxth	r2, r3
 800c5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5d6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e8:	4413      	add	r3, r2
 800c5ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	00da      	lsls	r2, r3, #3
 800c5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f4:	4413      	add	r3, r2
 800c5f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c5fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5fe:	881b      	ldrh	r3, [r3, #0]
 800c600:	b29b      	uxth	r3, r3
 800c602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c606:	b29a      	uxth	r2, r3
 800c608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c60a:	801a      	strh	r2, [r3, #0]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	691b      	ldr	r3, [r3, #16]
 800c610:	2b3e      	cmp	r3, #62	@ 0x3e
 800c612:	d91d      	bls.n	800c650 <USB_ActivateEndpoint+0x2b0>
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	691b      	ldr	r3, [r3, #16]
 800c618:	095b      	lsrs	r3, r3, #5
 800c61a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	691b      	ldr	r3, [r3, #16]
 800c620:	f003 031f 	and.w	r3, r3, #31
 800c624:	2b00      	cmp	r3, #0
 800c626:	d102      	bne.n	800c62e <USB_ActivateEndpoint+0x28e>
 800c628:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c62a:	3b01      	subs	r3, #1
 800c62c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c630:	881b      	ldrh	r3, [r3, #0]
 800c632:	b29a      	uxth	r2, r3
 800c634:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c636:	b29b      	uxth	r3, r3
 800c638:	029b      	lsls	r3, r3, #10
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	4313      	orrs	r3, r2
 800c63e:	b29b      	uxth	r3, r3
 800c640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c648:	b29a      	uxth	r2, r3
 800c64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64c:	801a      	strh	r2, [r3, #0]
 800c64e:	e026      	b.n	800c69e <USB_ActivateEndpoint+0x2fe>
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	691b      	ldr	r3, [r3, #16]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d10a      	bne.n	800c66e <USB_ActivateEndpoint+0x2ce>
 800c658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65a:	881b      	ldrh	r3, [r3, #0]
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c666:	b29a      	uxth	r2, r3
 800c668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c66a:	801a      	strh	r2, [r3, #0]
 800c66c:	e017      	b.n	800c69e <USB_ActivateEndpoint+0x2fe>
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	691b      	ldr	r3, [r3, #16]
 800c672:	085b      	lsrs	r3, r3, #1
 800c674:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	691b      	ldr	r3, [r3, #16]
 800c67a:	f003 0301 	and.w	r3, r3, #1
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d002      	beq.n	800c688 <USB_ActivateEndpoint+0x2e8>
 800c682:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c684:	3301      	adds	r3, #1
 800c686:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68a:	881b      	ldrh	r3, [r3, #0]
 800c68c:	b29a      	uxth	r2, r3
 800c68e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c690:	b29b      	uxth	r3, r3
 800c692:	029b      	lsls	r3, r3, #10
 800c694:	b29b      	uxth	r3, r3
 800c696:	4313      	orrs	r3, r2
 800c698:	b29a      	uxth	r2, r3
 800c69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	4413      	add	r3, r2
 800c6a8:	881b      	ldrh	r3, [r3, #0]
 800c6aa:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c6ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c6ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d01b      	beq.n	800c6ee <USB_ActivateEndpoint+0x34e>
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	4413      	add	r3, r2
 800c6c0:	881b      	ldrh	r3, [r3, #0]
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6cc:	843b      	strh	r3, [r7, #32]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	441a      	add	r2, r3
 800c6d8:	8c3b      	ldrh	r3, [r7, #32]
 800c6da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c6e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d124      	bne.n	800c740 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	881b      	ldrh	r3, [r3, #0]
 800c702:	b29b      	uxth	r3, r3
 800c704:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c70c:	83bb      	strh	r3, [r7, #28]
 800c70e:	8bbb      	ldrh	r3, [r7, #28]
 800c710:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c714:	83bb      	strh	r3, [r7, #28]
 800c716:	8bbb      	ldrh	r3, [r7, #28]
 800c718:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c71c:	83bb      	strh	r3, [r7, #28]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	441a      	add	r2, r3
 800c728:	8bbb      	ldrh	r3, [r7, #28]
 800c72a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c72e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	8013      	strh	r3, [r2, #0]
 800c73e:	e1ea      	b.n	800cb16 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	4413      	add	r3, r2
 800c74a:	881b      	ldrh	r3, [r3, #0]
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c756:	83fb      	strh	r3, [r7, #30]
 800c758:	8bfb      	ldrh	r3, [r7, #30]
 800c75a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c75e:	83fb      	strh	r3, [r7, #30]
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	441a      	add	r2, r3
 800c76a:	8bfb      	ldrh	r3, [r7, #30]
 800c76c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c770:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	8013      	strh	r3, [r2, #0]
 800c780:	e1c9      	b.n	800cb16 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	78db      	ldrb	r3, [r3, #3]
 800c786:	2b02      	cmp	r3, #2
 800c788:	d11e      	bne.n	800c7c8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4413      	add	r3, r2
 800c794:	881b      	ldrh	r3, [r3, #0]
 800c796:	b29b      	uxth	r3, r3
 800c798:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c79c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7a0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	441a      	add	r2, r3
 800c7ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c7b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7ba:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c7be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	8013      	strh	r3, [r2, #0]
 800c7c6:	e01d      	b.n	800c804 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	4413      	add	r3, r2
 800c7d2:	881b      	ldrh	r3, [r3, #0]
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c7da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7de:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	441a      	add	r2, r3
 800c7ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c7f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c800:	b29b      	uxth	r3, r3
 800c802:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c80e:	b29b      	uxth	r3, r3
 800c810:	461a      	mov	r2, r3
 800c812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c814:	4413      	add	r3, r2
 800c816:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	00da      	lsls	r2, r3, #3
 800c81e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c820:	4413      	add	r3, r2
 800c822:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c826:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	891b      	ldrh	r3, [r3, #8]
 800c82c:	085b      	lsrs	r3, r3, #1
 800c82e:	b29b      	uxth	r3, r3
 800c830:	005b      	lsls	r3, r3, #1
 800c832:	b29a      	uxth	r2, r3
 800c834:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c836:	801a      	strh	r2, [r3, #0]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c842:	b29b      	uxth	r3, r3
 800c844:	461a      	mov	r2, r3
 800c846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c848:	4413      	add	r3, r2
 800c84a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	00da      	lsls	r2, r3, #3
 800c852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c854:	4413      	add	r3, r2
 800c856:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c85a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	895b      	ldrh	r3, [r3, #10]
 800c860:	085b      	lsrs	r3, r3, #1
 800c862:	b29b      	uxth	r3, r3
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	b29a      	uxth	r2, r3
 800c868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c86a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	785b      	ldrb	r3, [r3, #1]
 800c870:	2b00      	cmp	r3, #0
 800c872:	f040 8093 	bne.w	800c99c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	4413      	add	r3, r2
 800c880:	881b      	ldrh	r3, [r3, #0]
 800c882:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c886:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c88a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d01b      	beq.n	800c8ca <USB_ActivateEndpoint+0x52a>
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	4413      	add	r3, r2
 800c89c:	881b      	ldrh	r3, [r3, #0]
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	441a      	add	r2, r3
 800c8b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c8b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c8c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	4413      	add	r3, r2
 800c8d4:	881b      	ldrh	r3, [r3, #0]
 800c8d6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c8d8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c8da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d01b      	beq.n	800c91a <USB_ActivateEndpoint+0x57a>
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	4413      	add	r3, r2
 800c8ec:	881b      	ldrh	r3, [r3, #0]
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	441a      	add	r2, r3
 800c904:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c906:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c90a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c90e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c912:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c916:	b29b      	uxth	r3, r3
 800c918:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	009b      	lsls	r3, r3, #2
 800c922:	4413      	add	r3, r2
 800c924:	881b      	ldrh	r3, [r3, #0]
 800c926:	b29b      	uxth	r3, r3
 800c928:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c92c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c930:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c932:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c934:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c938:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c93a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c93c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c940:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	441a      	add	r2, r3
 800c94c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c94e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c95a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c95e:	b29b      	uxth	r3, r3
 800c960:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	4413      	add	r3, r2
 800c96c:	881b      	ldrh	r3, [r3, #0]
 800c96e:	b29b      	uxth	r3, r3
 800c970:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c978:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c97a:	687a      	ldr	r2, [r7, #4]
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	441a      	add	r2, r3
 800c984:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c986:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c98a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c98e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c996:	b29b      	uxth	r3, r3
 800c998:	8013      	strh	r3, [r2, #0]
 800c99a:	e0bc      	b.n	800cb16 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	4413      	add	r3, r2
 800c9a6:	881b      	ldrh	r3, [r3, #0]
 800c9a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c9ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c9b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d01d      	beq.n	800c9f4 <USB_ActivateEndpoint+0x654>
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	009b      	lsls	r3, r3, #2
 800c9c0:	4413      	add	r3, r2
 800c9c2:	881b      	ldrh	r3, [r3, #0]
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9ce:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	441a      	add	r2, r3
 800c9dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c9e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c9ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	4413      	add	r3, r2
 800c9fe:	881b      	ldrh	r3, [r3, #0]
 800ca00:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800ca04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800ca08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d01d      	beq.n	800ca4c <USB_ActivateEndpoint+0x6ac>
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	009b      	lsls	r3, r3, #2
 800ca18:	4413      	add	r3, r2
 800ca1a:	881b      	ldrh	r3, [r3, #0]
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca26:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	441a      	add	r2, r3
 800ca34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800ca38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	78db      	ldrb	r3, [r3, #3]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d024      	beq.n	800ca9e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	4413      	add	r3, r2
 800ca5e:	881b      	ldrh	r3, [r3, #0]
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca6a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800ca6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ca72:	f083 0320 	eor.w	r3, r3, #32
 800ca76:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	441a      	add	r2, r3
 800ca84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ca88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	8013      	strh	r3, [r2, #0]
 800ca9c:	e01d      	b.n	800cada <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	4413      	add	r3, r2
 800caa8:	881b      	ldrh	r3, [r3, #0]
 800caaa:	b29b      	uxth	r3, r3
 800caac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cab0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cab4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	441a      	add	r2, r3
 800cac2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800caca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4413      	add	r3, r2
 800cae4:	881b      	ldrh	r3, [r3, #0]
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800caec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caf0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	441a      	add	r2, r3
 800cafe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cb02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800cb16:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3774      	adds	r7, #116	@ 0x74
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop

0800cb28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b08d      	sub	sp, #52	@ 0x34
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	7b1b      	ldrb	r3, [r3, #12]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	f040 808e 	bne.w	800cc58 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	785b      	ldrb	r3, [r3, #1]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d044      	beq.n	800cbce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	4413      	add	r3, r2
 800cb4e:	881b      	ldrh	r3, [r3, #0]
 800cb50:	81bb      	strh	r3, [r7, #12]
 800cb52:	89bb      	ldrh	r3, [r7, #12]
 800cb54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d01b      	beq.n	800cb94 <USB_DeactivateEndpoint+0x6c>
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	4413      	add	r3, r2
 800cb66:	881b      	ldrh	r3, [r3, #0]
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb72:	817b      	strh	r3, [r7, #10]
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	441a      	add	r2, r3
 800cb7e:	897b      	ldrh	r3, [r7, #10]
 800cb80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb8c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	009b      	lsls	r3, r3, #2
 800cb9c:	4413      	add	r3, r2
 800cb9e:	881b      	ldrh	r3, [r3, #0]
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cba6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbaa:	813b      	strh	r3, [r7, #8]
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	441a      	add	r2, r3
 800cbb6:	893b      	ldrh	r3, [r7, #8]
 800cbb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	8013      	strh	r3, [r2, #0]
 800cbcc:	e192      	b.n	800cef4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	4413      	add	r3, r2
 800cbd8:	881b      	ldrh	r3, [r3, #0]
 800cbda:	827b      	strh	r3, [r7, #18]
 800cbdc:	8a7b      	ldrh	r3, [r7, #18]
 800cbde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d01b      	beq.n	800cc1e <USB_DeactivateEndpoint+0xf6>
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	4413      	add	r3, r2
 800cbf0:	881b      	ldrh	r3, [r3, #0]
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbfc:	823b      	strh	r3, [r7, #16]
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	441a      	add	r2, r3
 800cc08:	8a3b      	ldrh	r3, [r7, #16]
 800cc0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cc16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	4413      	add	r3, r2
 800cc28:	881b      	ldrh	r3, [r3, #0]
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cc30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc34:	81fb      	strh	r3, [r7, #14]
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	441a      	add	r2, r3
 800cc40:	89fb      	ldrh	r3, [r7, #14]
 800cc42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	8013      	strh	r3, [r2, #0]
 800cc56:	e14d      	b.n	800cef4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	785b      	ldrb	r3, [r3, #1]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	f040 80a5 	bne.w	800cdac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	4413      	add	r3, r2
 800cc6c:	881b      	ldrh	r3, [r3, #0]
 800cc6e:	843b      	strh	r3, [r7, #32]
 800cc70:	8c3b      	ldrh	r3, [r7, #32]
 800cc72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d01b      	beq.n	800ccb2 <USB_DeactivateEndpoint+0x18a>
 800cc7a:	687a      	ldr	r2, [r7, #4]
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	4413      	add	r3, r2
 800cc84:	881b      	ldrh	r3, [r3, #0]
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc90:	83fb      	strh	r3, [r7, #30]
 800cc92:	687a      	ldr	r2, [r7, #4]
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	441a      	add	r2, r3
 800cc9c:	8bfb      	ldrh	r3, [r7, #30]
 800cc9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cca2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cca6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ccaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	4413      	add	r3, r2
 800ccbc:	881b      	ldrh	r3, [r3, #0]
 800ccbe:	83bb      	strh	r3, [r7, #28]
 800ccc0:	8bbb      	ldrh	r3, [r7, #28]
 800ccc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d01b      	beq.n	800cd02 <USB_DeactivateEndpoint+0x1da>
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	4413      	add	r3, r2
 800ccd4:	881b      	ldrh	r3, [r3, #0]
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ccdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cce0:	837b      	strh	r3, [r7, #26]
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	441a      	add	r2, r3
 800ccec:	8b7b      	ldrh	r3, [r7, #26]
 800ccee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ccf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ccf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	4413      	add	r3, r2
 800cd0c:	881b      	ldrh	r3, [r3, #0]
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd18:	833b      	strh	r3, [r7, #24]
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	441a      	add	r2, r3
 800cd24:	8b3b      	ldrh	r3, [r7, #24]
 800cd26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	4413      	add	r3, r2
 800cd44:	881b      	ldrh	r3, [r3, #0]
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd50:	82fb      	strh	r3, [r7, #22]
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	441a      	add	r2, r3
 800cd5c:	8afb      	ldrh	r3, [r7, #22]
 800cd5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	4413      	add	r3, r2
 800cd7c:	881b      	ldrh	r3, [r3, #0]
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd88:	82bb      	strh	r3, [r7, #20]
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	441a      	add	r2, r3
 800cd94:	8abb      	ldrh	r3, [r7, #20]
 800cd96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cda2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	8013      	strh	r3, [r2, #0]
 800cdaa:	e0a3      	b.n	800cef4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	4413      	add	r3, r2
 800cdb6:	881b      	ldrh	r3, [r3, #0]
 800cdb8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800cdba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cdbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d01b      	beq.n	800cdfc <USB_DeactivateEndpoint+0x2d4>
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	4413      	add	r3, r2
 800cdce:	881b      	ldrh	r3, [r3, #0]
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdda:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	441a      	add	r2, r3
 800cde6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cde8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cdf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	4413      	add	r3, r2
 800ce06:	881b      	ldrh	r3, [r3, #0]
 800ce08:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800ce0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ce0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d01b      	beq.n	800ce4c <USB_DeactivateEndpoint+0x324>
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	4413      	add	r3, r2
 800ce1e:	881b      	ldrh	r3, [r3, #0]
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce2a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	441a      	add	r2, r3
 800ce36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ce38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	4413      	add	r3, r2
 800ce56:	881b      	ldrh	r3, [r3, #0]
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce62:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	441a      	add	r2, r3
 800ce6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ce70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ce7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	4413      	add	r3, r2
 800ce8e:	881b      	ldrh	r3, [r3, #0]
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	441a      	add	r2, r3
 800cea6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cea8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ceac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ceb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ceb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4413      	add	r3, r2
 800cec6:	881b      	ldrh	r3, [r3, #0]
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ced2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	441a      	add	r2, r3
 800cede:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cee0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cee4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cee8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ceec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cef4:	2300      	movs	r3, #0
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3734      	adds	r7, #52	@ 0x34
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr

0800cf02 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cf02:	b580      	push	{r7, lr}
 800cf04:	b0c2      	sub	sp, #264	@ 0x108
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf10:	6018      	str	r0, [r3, #0]
 800cf12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf1a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cf1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	785b      	ldrb	r3, [r3, #1]
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	f040 86b7 	bne.w	800dc9c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800cf2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	699a      	ldr	r2, [r3, #24]
 800cf3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	691b      	ldr	r3, [r3, #16]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d908      	bls.n	800cf5c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800cf4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	691b      	ldr	r3, [r3, #16]
 800cf56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800cf5a:	e007      	b.n	800cf6c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800cf5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	699b      	ldr	r3, [r3, #24]
 800cf68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800cf6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	7b1b      	ldrb	r3, [r3, #12]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d13a      	bne.n	800cff2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800cf7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	6959      	ldr	r1, [r3, #20]
 800cf88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	88da      	ldrh	r2, [r3, #6]
 800cf94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf98:	b29b      	uxth	r3, r3
 800cf9a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cf9e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cfa2:	6800      	ldr	r0, [r0, #0]
 800cfa4:	f001 fc98 	bl	800e8d8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cfa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	613b      	str	r3, [r7, #16]
 800cfb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	4413      	add	r3, r2
 800cfca:	613b      	str	r3, [r7, #16]
 800cfcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	00da      	lsls	r2, r3, #3
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	4413      	add	r3, r2
 800cfde:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cfe2:	60fb      	str	r3, [r7, #12]
 800cfe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfe8:	b29a      	uxth	r2, r3
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	801a      	strh	r2, [r3, #0]
 800cfee:	f000 be1f 	b.w	800dc30 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	78db      	ldrb	r3, [r3, #3]
 800cffe:	2b02      	cmp	r3, #2
 800d000:	f040 8462 	bne.w	800d8c8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	6a1a      	ldr	r2, [r3, #32]
 800d010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	691b      	ldr	r3, [r3, #16]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	f240 83df 	bls.w	800d7e0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d026:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	4413      	add	r3, r2
 800d03c:	881b      	ldrh	r3, [r3, #0]
 800d03e:	b29b      	uxth	r3, r3
 800d040:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d044:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d048:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800d04c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d050:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d05a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	441a      	add	r2, r3
 800d066:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d06a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d06e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d072:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d07e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	6a1a      	ldr	r2, [r3, #32]
 800d08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d08e:	1ad2      	subs	r2, r2, r3
 800d090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d09c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	4413      	add	r3, r2
 800d0b6:	881b      	ldrh	r3, [r3, #0]
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	f000 81c7 	beq.w	800d452 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d0c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800d0d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	785b      	ldrb	r3, [r3, #1]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d177      	bne.n	800d1d0 <USB_EPStartXfer+0x2ce>
 800d0e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d0ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d100:	4413      	add	r3, r2
 800d102:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	00da      	lsls	r2, r3, #3
 800d112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d114:	4413      	add	r3, r2
 800d116:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d11a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11e:	881b      	ldrh	r3, [r3, #0]
 800d120:	b29b      	uxth	r3, r3
 800d122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d126:	b29a      	uxth	r2, r3
 800d128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d12a:	801a      	strh	r2, [r3, #0]
 800d12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d130:	2b3e      	cmp	r3, #62	@ 0x3e
 800d132:	d921      	bls.n	800d178 <USB_EPStartXfer+0x276>
 800d134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d138:	095b      	lsrs	r3, r3, #5
 800d13a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d142:	f003 031f 	and.w	r3, r3, #31
 800d146:	2b00      	cmp	r3, #0
 800d148:	d104      	bne.n	800d154 <USB_EPStartXfer+0x252>
 800d14a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d14e:	3b01      	subs	r3, #1
 800d150:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d156:	881b      	ldrh	r3, [r3, #0]
 800d158:	b29a      	uxth	r2, r3
 800d15a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d15e:	b29b      	uxth	r3, r3
 800d160:	029b      	lsls	r3, r3, #10
 800d162:	b29b      	uxth	r3, r3
 800d164:	4313      	orrs	r3, r2
 800d166:	b29b      	uxth	r3, r3
 800d168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d16c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d170:	b29a      	uxth	r2, r3
 800d172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d174:	801a      	strh	r2, [r3, #0]
 800d176:	e050      	b.n	800d21a <USB_EPStartXfer+0x318>
 800d178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d10a      	bne.n	800d196 <USB_EPStartXfer+0x294>
 800d180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d182:	881b      	ldrh	r3, [r3, #0]
 800d184:	b29b      	uxth	r3, r3
 800d186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d18a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d18e:	b29a      	uxth	r2, r3
 800d190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d192:	801a      	strh	r2, [r3, #0]
 800d194:	e041      	b.n	800d21a <USB_EPStartXfer+0x318>
 800d196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d19a:	085b      	lsrs	r3, r3, #1
 800d19c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d1a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1a4:	f003 0301 	and.w	r3, r3, #1
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d004      	beq.n	800d1b6 <USB_EPStartXfer+0x2b4>
 800d1ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b8:	881b      	ldrh	r3, [r3, #0]
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	029b      	lsls	r3, r3, #10
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	b29a      	uxth	r2, r3
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1cc:	801a      	strh	r2, [r3, #0]
 800d1ce:	e024      	b.n	800d21a <USB_EPStartXfer+0x318>
 800d1d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	785b      	ldrb	r3, [r3, #1]
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d11c      	bne.n	800d21a <USB_EPStartXfer+0x318>
 800d1e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f4:	4413      	add	r3, r2
 800d1f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	00da      	lsls	r2, r3, #3
 800d206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d208:	4413      	add	r3, r2
 800d20a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d20e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d214:	b29a      	uxth	r2, r3
 800d216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d218:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d21a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d21e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	895b      	ldrh	r3, [r3, #10]
 800d226:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d22a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d22e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	6959      	ldr	r1, [r3, #20]
 800d236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d240:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d244:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d248:	6800      	ldr	r0, [r0, #0]
 800d24a:	f001 fb45 	bl	800e8d8 <USB_WritePMA>
            ep->xfer_buff += len;
 800d24e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	695a      	ldr	r2, [r3, #20]
 800d25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d25e:	441a      	add	r2, r3
 800d260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d26c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	6a1a      	ldr	r2, [r3, #32]
 800d278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d27c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	429a      	cmp	r2, r3
 800d286:	d90f      	bls.n	800d2a8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800d288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d28c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	6a1a      	ldr	r2, [r3, #32]
 800d294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d298:	1ad2      	subs	r2, r2, r3
 800d29a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d29e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	621a      	str	r2, [r3, #32]
 800d2a6:	e00e      	b.n	800d2c6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d2a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	6a1b      	ldr	r3, [r3, #32]
 800d2b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d2b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d2c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	785b      	ldrb	r3, [r3, #1]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d177      	bne.n	800d3c6 <USB_EPStartXfer+0x4c4>
 800d2d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	61bb      	str	r3, [r7, #24]
 800d2e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	4413      	add	r3, r2
 800d2f8:	61bb      	str	r3, [r7, #24]
 800d2fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	00da      	lsls	r2, r3, #3
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	4413      	add	r3, r2
 800d30c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d310:	617b      	str	r3, [r7, #20]
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	881b      	ldrh	r3, [r3, #0]
 800d316:	b29b      	uxth	r3, r3
 800d318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d31c:	b29a      	uxth	r2, r3
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	801a      	strh	r2, [r3, #0]
 800d322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d326:	2b3e      	cmp	r3, #62	@ 0x3e
 800d328:	d921      	bls.n	800d36e <USB_EPStartXfer+0x46c>
 800d32a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d32e:	095b      	lsrs	r3, r3, #5
 800d330:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d338:	f003 031f 	and.w	r3, r3, #31
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d104      	bne.n	800d34a <USB_EPStartXfer+0x448>
 800d340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d344:	3b01      	subs	r3, #1
 800d346:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	881b      	ldrh	r3, [r3, #0]
 800d34e:	b29a      	uxth	r2, r3
 800d350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d354:	b29b      	uxth	r3, r3
 800d356:	029b      	lsls	r3, r3, #10
 800d358:	b29b      	uxth	r3, r3
 800d35a:	4313      	orrs	r3, r2
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d366:	b29a      	uxth	r2, r3
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	801a      	strh	r2, [r3, #0]
 800d36c:	e056      	b.n	800d41c <USB_EPStartXfer+0x51a>
 800d36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d372:	2b00      	cmp	r3, #0
 800d374:	d10a      	bne.n	800d38c <USB_EPStartXfer+0x48a>
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	881b      	ldrh	r3, [r3, #0]
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d384:	b29a      	uxth	r2, r3
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	801a      	strh	r2, [r3, #0]
 800d38a:	e047      	b.n	800d41c <USB_EPStartXfer+0x51a>
 800d38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d390:	085b      	lsrs	r3, r3, #1
 800d392:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d39a:	f003 0301 	and.w	r3, r3, #1
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d004      	beq.n	800d3ac <USB_EPStartXfer+0x4aa>
 800d3a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	881b      	ldrh	r3, [r3, #0]
 800d3b0:	b29a      	uxth	r2, r3
 800d3b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	029b      	lsls	r3, r3, #10
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	801a      	strh	r2, [r3, #0]
 800d3c4:	e02a      	b.n	800d41c <USB_EPStartXfer+0x51a>
 800d3c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	785b      	ldrb	r3, [r3, #1]
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d122      	bne.n	800d41c <USB_EPStartXfer+0x51a>
 800d3d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	623b      	str	r3, [r7, #32]
 800d3e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	6a3b      	ldr	r3, [r7, #32]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	623b      	str	r3, [r7, #32]
 800d3fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	00da      	lsls	r2, r3, #3
 800d408:	6a3b      	ldr	r3, [r7, #32]
 800d40a:	4413      	add	r3, r2
 800d40c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d410:	61fb      	str	r3, [r7, #28]
 800d412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d416:	b29a      	uxth	r2, r3
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d41c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	891b      	ldrh	r3, [r3, #8]
 800d428:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d42c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	6959      	ldr	r1, [r3, #20]
 800d438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d442:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d446:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d44a:	6800      	ldr	r0, [r0, #0]
 800d44c:	f001 fa44 	bl	800e8d8 <USB_WritePMA>
 800d450:	e3ee      	b.n	800dc30 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	785b      	ldrb	r3, [r3, #1]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d177      	bne.n	800d552 <USB_EPStartXfer+0x650>
 800d462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d466:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d46e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	461a      	mov	r2, r3
 800d480:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d482:	4413      	add	r3, r2
 800d484:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d48a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	00da      	lsls	r2, r3, #3
 800d494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d496:	4413      	add	r3, r2
 800d498:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d49c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d49e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4a0:	881b      	ldrh	r3, [r3, #0]
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4ac:	801a      	strh	r2, [r3, #0]
 800d4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d4b4:	d921      	bls.n	800d4fa <USB_EPStartXfer+0x5f8>
 800d4b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4ba:	095b      	lsrs	r3, r3, #5
 800d4bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4c4:	f003 031f 	and.w	r3, r3, #31
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d104      	bne.n	800d4d6 <USB_EPStartXfer+0x5d4>
 800d4cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d4d0:	3b01      	subs	r3, #1
 800d4d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d4d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4d8:	881b      	ldrh	r3, [r3, #0]
 800d4da:	b29a      	uxth	r2, r3
 800d4dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	029b      	lsls	r3, r3, #10
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4f2:	b29a      	uxth	r2, r3
 800d4f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4f6:	801a      	strh	r2, [r3, #0]
 800d4f8:	e056      	b.n	800d5a8 <USB_EPStartXfer+0x6a6>
 800d4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10a      	bne.n	800d518 <USB_EPStartXfer+0x616>
 800d502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d504:	881b      	ldrh	r3, [r3, #0]
 800d506:	b29b      	uxth	r3, r3
 800d508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d50c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d510:	b29a      	uxth	r2, r3
 800d512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d514:	801a      	strh	r2, [r3, #0]
 800d516:	e047      	b.n	800d5a8 <USB_EPStartXfer+0x6a6>
 800d518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d51c:	085b      	lsrs	r3, r3, #1
 800d51e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d004      	beq.n	800d538 <USB_EPStartXfer+0x636>
 800d52e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d532:	3301      	adds	r3, #1
 800d534:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d53a:	881b      	ldrh	r3, [r3, #0]
 800d53c:	b29a      	uxth	r2, r3
 800d53e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d542:	b29b      	uxth	r3, r3
 800d544:	029b      	lsls	r3, r3, #10
 800d546:	b29b      	uxth	r3, r3
 800d548:	4313      	orrs	r3, r2
 800d54a:	b29a      	uxth	r2, r3
 800d54c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d54e:	801a      	strh	r2, [r3, #0]
 800d550:	e02a      	b.n	800d5a8 <USB_EPStartXfer+0x6a6>
 800d552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	785b      	ldrb	r3, [r3, #1]
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d122      	bne.n	800d5a8 <USB_EPStartXfer+0x6a6>
 800d562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d566:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d56e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d572:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	461a      	mov	r2, r3
 800d580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d582:	4413      	add	r3, r2
 800d584:	653b      	str	r3, [r7, #80]	@ 0x50
 800d586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d58a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	00da      	lsls	r2, r3, #3
 800d594:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d596:	4413      	add	r3, r2
 800d598:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d59c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d59e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d5a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	891b      	ldrh	r3, [r3, #8]
 800d5b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d5b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	6959      	ldr	r1, [r3, #20]
 800d5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d5ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d5d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d5d6:	6800      	ldr	r0, [r0, #0]
 800d5d8:	f001 f97e 	bl	800e8d8 <USB_WritePMA>
            ep->xfer_buff += len;
 800d5dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	695a      	ldr	r2, [r3, #20]
 800d5e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5ec:	441a      	add	r2, r3
 800d5ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d5fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	6a1a      	ldr	r2, [r3, #32]
 800d606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d60a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	691b      	ldr	r3, [r3, #16]
 800d612:	429a      	cmp	r2, r3
 800d614:	d90f      	bls.n	800d636 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d61a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	6a1a      	ldr	r2, [r3, #32]
 800d622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d626:	1ad2      	subs	r2, r2, r3
 800d628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d62c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	621a      	str	r2, [r3, #32]
 800d634:	e00e      	b.n	800d654 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d63a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	6a1b      	ldr	r3, [r3, #32]
 800d642:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d64a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2200      	movs	r2, #0
 800d652:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d658:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	785b      	ldrb	r3, [r3, #1]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d177      	bne.n	800d760 <USB_EPStartXfer+0x85e>
 800d670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d67c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d680:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	461a      	mov	r2, r3
 800d68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d690:	4413      	add	r3, r2
 800d692:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	00da      	lsls	r2, r3, #3
 800d6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a4:	4413      	add	r3, r2
 800d6a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d6aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6ae:	881b      	ldrh	r3, [r3, #0]
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6ba:	801a      	strh	r2, [r3, #0]
 800d6bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6c0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d6c2:	d921      	bls.n	800d708 <USB_EPStartXfer+0x806>
 800d6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6c8:	095b      	lsrs	r3, r3, #5
 800d6ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6d2:	f003 031f 	and.w	r3, r3, #31
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d104      	bne.n	800d6e4 <USB_EPStartXfer+0x7e2>
 800d6da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d6de:	3b01      	subs	r3, #1
 800d6e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d6e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6e6:	881b      	ldrh	r3, [r3, #0]
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	029b      	lsls	r3, r3, #10
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d700:	b29a      	uxth	r2, r3
 800d702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d704:	801a      	strh	r2, [r3, #0]
 800d706:	e050      	b.n	800d7aa <USB_EPStartXfer+0x8a8>
 800d708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d10a      	bne.n	800d726 <USB_EPStartXfer+0x824>
 800d710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d712:	881b      	ldrh	r3, [r3, #0]
 800d714:	b29b      	uxth	r3, r3
 800d716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d71a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d71e:	b29a      	uxth	r2, r3
 800d720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d722:	801a      	strh	r2, [r3, #0]
 800d724:	e041      	b.n	800d7aa <USB_EPStartXfer+0x8a8>
 800d726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d72a:	085b      	lsrs	r3, r3, #1
 800d72c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d734:	f003 0301 	and.w	r3, r3, #1
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d004      	beq.n	800d746 <USB_EPStartXfer+0x844>
 800d73c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d740:	3301      	adds	r3, #1
 800d742:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d748:	881b      	ldrh	r3, [r3, #0]
 800d74a:	b29a      	uxth	r2, r3
 800d74c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d750:	b29b      	uxth	r3, r3
 800d752:	029b      	lsls	r3, r3, #10
 800d754:	b29b      	uxth	r3, r3
 800d756:	4313      	orrs	r3, r2
 800d758:	b29a      	uxth	r2, r3
 800d75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d75c:	801a      	strh	r2, [r3, #0]
 800d75e:	e024      	b.n	800d7aa <USB_EPStartXfer+0x8a8>
 800d760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	785b      	ldrb	r3, [r3, #1]
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d11c      	bne.n	800d7aa <USB_EPStartXfer+0x8a8>
 800d770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d774:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d77e:	b29b      	uxth	r3, r3
 800d780:	461a      	mov	r2, r3
 800d782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d784:	4413      	add	r3, r2
 800d786:	643b      	str	r3, [r7, #64]	@ 0x40
 800d788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d78c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	00da      	lsls	r2, r3, #3
 800d796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d798:	4413      	add	r3, r2
 800d79a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7a4:	b29a      	uxth	r2, r3
 800d7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d7aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	895b      	ldrh	r3, [r3, #10]
 800d7b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d7ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	6959      	ldr	r1, [r3, #20]
 800d7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d7d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d7d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d7d8:	6800      	ldr	r0, [r0, #0]
 800d7da:	f001 f87d 	bl	800e8d8 <USB_WritePMA>
 800d7de:	e227      	b.n	800dc30 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d7e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	6a1b      	ldr	r3, [r3, #32]
 800d7ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d7f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	4413      	add	r3, r2
 800d80a:	881b      	ldrh	r3, [r3, #0]
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d816:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d81a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d81e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	009b      	lsls	r3, r3, #2
 800d832:	441a      	add	r2, r3
 800d834:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d838:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d83c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d840:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d848:	b29b      	uxth	r3, r3
 800d84a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d84c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d850:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d85c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d866:	b29b      	uxth	r3, r3
 800d868:	461a      	mov	r2, r3
 800d86a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d86c:	4413      	add	r3, r2
 800d86e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	00da      	lsls	r2, r3, #3
 800d87e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d880:	4413      	add	r3, r2
 800d882:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d886:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d890:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	891b      	ldrh	r3, [r3, #8]
 800d89e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d8a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	6959      	ldr	r1, [r3, #20]
 800d8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d8b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d8bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d8c0:	6800      	ldr	r0, [r0, #0]
 800d8c2:	f001 f809 	bl	800e8d8 <USB_WritePMA>
 800d8c6:	e1b3      	b.n	800dc30 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d8c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	6a1a      	ldr	r2, [r3, #32]
 800d8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8d8:	1ad2      	subs	r2, r2, r3
 800d8da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d8e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	4413      	add	r3, r2
 800d900:	881b      	ldrh	r3, [r3, #0]
 800d902:	b29b      	uxth	r3, r3
 800d904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d908:	2b00      	cmp	r3, #0
 800d90a:	f000 80c6 	beq.w	800da9a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d90e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d912:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	673b      	str	r3, [r7, #112]	@ 0x70
 800d91a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d91e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	785b      	ldrb	r3, [r3, #1]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d177      	bne.n	800da1a <USB_EPStartXfer+0xb18>
 800d92a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d92e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d93a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d944:	b29b      	uxth	r3, r3
 800d946:	461a      	mov	r2, r3
 800d948:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d94a:	4413      	add	r3, r2
 800d94c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d94e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	00da      	lsls	r2, r3, #3
 800d95c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d95e:	4413      	add	r3, r2
 800d960:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d964:	667b      	str	r3, [r7, #100]	@ 0x64
 800d966:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d968:	881b      	ldrh	r3, [r3, #0]
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d970:	b29a      	uxth	r2, r3
 800d972:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d974:	801a      	strh	r2, [r3, #0]
 800d976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d97a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d97c:	d921      	bls.n	800d9c2 <USB_EPStartXfer+0xac0>
 800d97e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d982:	095b      	lsrs	r3, r3, #5
 800d984:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d98c:	f003 031f 	and.w	r3, r3, #31
 800d990:	2b00      	cmp	r3, #0
 800d992:	d104      	bne.n	800d99e <USB_EPStartXfer+0xa9c>
 800d994:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d998:	3b01      	subs	r3, #1
 800d99a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d99e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d9a0:	881b      	ldrh	r3, [r3, #0]
 800d9a2:	b29a      	uxth	r2, r3
 800d9a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	029b      	lsls	r3, r3, #10
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9ba:	b29a      	uxth	r2, r3
 800d9bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d9be:	801a      	strh	r2, [r3, #0]
 800d9c0:	e050      	b.n	800da64 <USB_EPStartXfer+0xb62>
 800d9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d10a      	bne.n	800d9e0 <USB_EPStartXfer+0xade>
 800d9ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d9cc:	881b      	ldrh	r3, [r3, #0]
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9d8:	b29a      	uxth	r2, r3
 800d9da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d9dc:	801a      	strh	r2, [r3, #0]
 800d9de:	e041      	b.n	800da64 <USB_EPStartXfer+0xb62>
 800d9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9e4:	085b      	lsrs	r3, r3, #1
 800d9e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9ee:	f003 0301 	and.w	r3, r3, #1
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d004      	beq.n	800da00 <USB_EPStartXfer+0xafe>
 800d9f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800da00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da02:	881b      	ldrh	r3, [r3, #0]
 800da04:	b29a      	uxth	r2, r3
 800da06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	029b      	lsls	r3, r3, #10
 800da0e:	b29b      	uxth	r3, r3
 800da10:	4313      	orrs	r3, r2
 800da12:	b29a      	uxth	r2, r3
 800da14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da16:	801a      	strh	r2, [r3, #0]
 800da18:	e024      	b.n	800da64 <USB_EPStartXfer+0xb62>
 800da1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	785b      	ldrb	r3, [r3, #1]
 800da26:	2b01      	cmp	r3, #1
 800da28:	d11c      	bne.n	800da64 <USB_EPStartXfer+0xb62>
 800da2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da38:	b29b      	uxth	r3, r3
 800da3a:	461a      	mov	r2, r3
 800da3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da3e:	4413      	add	r3, r2
 800da40:	673b      	str	r3, [r7, #112]	@ 0x70
 800da42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	00da      	lsls	r2, r3, #3
 800da50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da52:	4413      	add	r3, r2
 800da54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800da58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800da5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da5e:	b29a      	uxth	r2, r3
 800da60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800da64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	895b      	ldrh	r3, [r3, #10]
 800da70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800da74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	6959      	ldr	r1, [r3, #20]
 800da80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da84:	b29b      	uxth	r3, r3
 800da86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800da8a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800da8e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800da92:	6800      	ldr	r0, [r0, #0]
 800da94:	f000 ff20 	bl	800e8d8 <USB_WritePMA>
 800da98:	e0ca      	b.n	800dc30 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800da9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	785b      	ldrb	r3, [r3, #1]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d177      	bne.n	800db9a <USB_EPStartXfer+0xc98>
 800daaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	461a      	mov	r2, r3
 800dac8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800daca:	4413      	add	r3, r2
 800dacc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	00da      	lsls	r2, r3, #3
 800dadc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dade:	4413      	add	r3, r2
 800dae0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dae4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dae6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dae8:	881b      	ldrh	r3, [r3, #0]
 800daea:	b29b      	uxth	r3, r3
 800daec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800daf4:	801a      	strh	r2, [r3, #0]
 800daf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dafa:	2b3e      	cmp	r3, #62	@ 0x3e
 800dafc:	d921      	bls.n	800db42 <USB_EPStartXfer+0xc40>
 800dafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db02:	095b      	lsrs	r3, r3, #5
 800db04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800db08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db0c:	f003 031f 	and.w	r3, r3, #31
 800db10:	2b00      	cmp	r3, #0
 800db12:	d104      	bne.n	800db1e <USB_EPStartXfer+0xc1c>
 800db14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800db18:	3b01      	subs	r3, #1
 800db1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800db1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800db20:	881b      	ldrh	r3, [r3, #0]
 800db22:	b29a      	uxth	r2, r3
 800db24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800db28:	b29b      	uxth	r3, r3
 800db2a:	029b      	lsls	r3, r3, #10
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	4313      	orrs	r3, r2
 800db30:	b29b      	uxth	r3, r3
 800db32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db3a:	b29a      	uxth	r2, r3
 800db3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800db3e:	801a      	strh	r2, [r3, #0]
 800db40:	e05c      	b.n	800dbfc <USB_EPStartXfer+0xcfa>
 800db42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db46:	2b00      	cmp	r3, #0
 800db48:	d10a      	bne.n	800db60 <USB_EPStartXfer+0xc5e>
 800db4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800db4c:	881b      	ldrh	r3, [r3, #0]
 800db4e:	b29b      	uxth	r3, r3
 800db50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db58:	b29a      	uxth	r2, r3
 800db5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800db5c:	801a      	strh	r2, [r3, #0]
 800db5e:	e04d      	b.n	800dbfc <USB_EPStartXfer+0xcfa>
 800db60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db64:	085b      	lsrs	r3, r3, #1
 800db66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800db6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db6e:	f003 0301 	and.w	r3, r3, #1
 800db72:	2b00      	cmp	r3, #0
 800db74:	d004      	beq.n	800db80 <USB_EPStartXfer+0xc7e>
 800db76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800db7a:	3301      	adds	r3, #1
 800db7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800db80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800db82:	881b      	ldrh	r3, [r3, #0]
 800db84:	b29a      	uxth	r2, r3
 800db86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	029b      	lsls	r3, r3, #10
 800db8e:	b29b      	uxth	r3, r3
 800db90:	4313      	orrs	r3, r2
 800db92:	b29a      	uxth	r2, r3
 800db94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800db96:	801a      	strh	r2, [r3, #0]
 800db98:	e030      	b.n	800dbfc <USB_EPStartXfer+0xcfa>
 800db9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	785b      	ldrb	r3, [r3, #1]
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	d128      	bne.n	800dbfc <USB_EPStartXfer+0xcfa>
 800dbaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dbb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	461a      	mov	r2, r3
 800dbca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dbce:	4413      	add	r3, r2
 800dbd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dbd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	00da      	lsls	r2, r3, #3
 800dbe2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dbe6:	4413      	add	r3, r2
 800dbe8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dbec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dbf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbf4:	b29a      	uxth	r2, r3
 800dbf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dbfa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800dbfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	891b      	ldrh	r3, [r3, #8]
 800dc08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dc0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	6959      	ldr	r1, [r3, #20]
 800dc18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dc22:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dc26:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dc2a:	6800      	ldr	r0, [r0, #0]
 800dc2c:	f000 fe54 	bl	800e8d8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800dc30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	4413      	add	r3, r2
 800dc4a:	881b      	ldrh	r3, [r3, #0]
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc56:	817b      	strh	r3, [r7, #10]
 800dc58:	897b      	ldrh	r3, [r7, #10]
 800dc5a:	f083 0310 	eor.w	r3, r3, #16
 800dc5e:	817b      	strh	r3, [r7, #10]
 800dc60:	897b      	ldrh	r3, [r7, #10]
 800dc62:	f083 0320 	eor.w	r3, r3, #32
 800dc66:	817b      	strh	r3, [r7, #10]
 800dc68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc70:	681a      	ldr	r2, [r3, #0]
 800dc72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	441a      	add	r2, r3
 800dc82:	897b      	ldrh	r3, [r7, #10]
 800dc84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	8013      	strh	r3, [r2, #0]
 800dc98:	f000 bcde 	b.w	800e658 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800dc9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	7b1b      	ldrb	r3, [r3, #12]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	f040 80bb 	bne.w	800de24 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800dcae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	699a      	ldr	r2, [r3, #24]
 800dcba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	691b      	ldr	r3, [r3, #16]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d917      	bls.n	800dcfa <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800dcca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	691b      	ldr	r3, [r3, #16]
 800dcd6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800dcda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	699a      	ldr	r2, [r3, #24]
 800dce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcea:	1ad2      	subs	r2, r2, r3
 800dcec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	619a      	str	r2, [r3, #24]
 800dcf8:	e00e      	b.n	800dd18 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800dcfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	699b      	ldr	r3, [r3, #24]
 800dd06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800dd0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	2200      	movs	r2, #0
 800dd16:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800dd18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dd26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	461a      	mov	r2, r3
 800dd38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dd3c:	4413      	add	r3, r2
 800dd3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dd42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	00da      	lsls	r2, r3, #3
 800dd50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dd54:	4413      	add	r3, r2
 800dd56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dd5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dd5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dd62:	881b      	ldrh	r3, [r3, #0]
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd6a:	b29a      	uxth	r2, r3
 800dd6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dd70:	801a      	strh	r2, [r3, #0]
 800dd72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd76:	2b3e      	cmp	r3, #62	@ 0x3e
 800dd78:	d924      	bls.n	800ddc4 <USB_EPStartXfer+0xec2>
 800dd7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd7e:	095b      	lsrs	r3, r3, #5
 800dd80:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dd84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd88:	f003 031f 	and.w	r3, r3, #31
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d104      	bne.n	800dd9a <USB_EPStartXfer+0xe98>
 800dd90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800dd94:	3b01      	subs	r3, #1
 800dd96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dd9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dd9e:	881b      	ldrh	r3, [r3, #0]
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	029b      	lsls	r3, r3, #10
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	4313      	orrs	r3, r2
 800ddae:	b29b      	uxth	r3, r3
 800ddb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddb8:	b29a      	uxth	r2, r3
 800ddba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ddbe:	801a      	strh	r2, [r3, #0]
 800ddc0:	f000 bc10 	b.w	800e5e4 <USB_EPStartXfer+0x16e2>
 800ddc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d10c      	bne.n	800dde6 <USB_EPStartXfer+0xee4>
 800ddcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ddd0:	881b      	ldrh	r3, [r3, #0]
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dde2:	801a      	strh	r2, [r3, #0]
 800dde4:	e3fe      	b.n	800e5e4 <USB_EPStartXfer+0x16e2>
 800dde6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddea:	085b      	lsrs	r3, r3, #1
 800ddec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ddf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddf4:	f003 0301 	and.w	r3, r3, #1
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d004      	beq.n	800de06 <USB_EPStartXfer+0xf04>
 800ddfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800de00:	3301      	adds	r3, #1
 800de02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800de06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de0a:	881b      	ldrh	r3, [r3, #0]
 800de0c:	b29a      	uxth	r2, r3
 800de0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800de12:	b29b      	uxth	r3, r3
 800de14:	029b      	lsls	r3, r3, #10
 800de16:	b29b      	uxth	r3, r3
 800de18:	4313      	orrs	r3, r2
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de20:	801a      	strh	r2, [r3, #0]
 800de22:	e3df      	b.n	800e5e4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800de24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	78db      	ldrb	r3, [r3, #3]
 800de30:	2b02      	cmp	r3, #2
 800de32:	f040 8218 	bne.w	800e266 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800de36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	785b      	ldrb	r3, [r3, #1]
 800de42:	2b00      	cmp	r3, #0
 800de44:	f040 809d 	bne.w	800df82 <USB_EPStartXfer+0x1080>
 800de48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800de56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de64:	b29b      	uxth	r3, r3
 800de66:	461a      	mov	r2, r3
 800de68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de6c:	4413      	add	r3, r2
 800de6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800de72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	00da      	lsls	r2, r3, #3
 800de80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de84:	4413      	add	r3, r2
 800de86:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800de8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800de8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800de92:	881b      	ldrh	r3, [r3, #0]
 800de94:	b29b      	uxth	r3, r3
 800de96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de9a:	b29a      	uxth	r2, r3
 800de9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dea0:	801a      	strh	r2, [r3, #0]
 800dea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	691b      	ldr	r3, [r3, #16]
 800deae:	2b3e      	cmp	r3, #62	@ 0x3e
 800deb0:	d92b      	bls.n	800df0a <USB_EPStartXfer+0x1008>
 800deb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	691b      	ldr	r3, [r3, #16]
 800debe:	095b      	lsrs	r3, r3, #5
 800dec0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	691b      	ldr	r3, [r3, #16]
 800ded0:	f003 031f 	and.w	r3, r3, #31
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d104      	bne.n	800dee2 <USB_EPStartXfer+0xfe0>
 800ded8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dedc:	3b01      	subs	r3, #1
 800dede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dee2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dee6:	881b      	ldrh	r3, [r3, #0]
 800dee8:	b29a      	uxth	r2, r3
 800deea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800deee:	b29b      	uxth	r3, r3
 800def0:	029b      	lsls	r3, r3, #10
 800def2:	b29b      	uxth	r3, r3
 800def4:	4313      	orrs	r3, r2
 800def6:	b29b      	uxth	r3, r3
 800def8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800defc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df00:	b29a      	uxth	r2, r3
 800df02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800df06:	801a      	strh	r2, [r3, #0]
 800df08:	e070      	b.n	800dfec <USB_EPStartXfer+0x10ea>
 800df0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	691b      	ldr	r3, [r3, #16]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d10c      	bne.n	800df34 <USB_EPStartXfer+0x1032>
 800df1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800df1e:	881b      	ldrh	r3, [r3, #0]
 800df20:	b29b      	uxth	r3, r3
 800df22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df2a:	b29a      	uxth	r2, r3
 800df2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800df30:	801a      	strh	r2, [r3, #0]
 800df32:	e05b      	b.n	800dfec <USB_EPStartXfer+0x10ea>
 800df34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	691b      	ldr	r3, [r3, #16]
 800df40:	085b      	lsrs	r3, r3, #1
 800df42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800df46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	691b      	ldr	r3, [r3, #16]
 800df52:	f003 0301 	and.w	r3, r3, #1
 800df56:	2b00      	cmp	r3, #0
 800df58:	d004      	beq.n	800df64 <USB_EPStartXfer+0x1062>
 800df5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df5e:	3301      	adds	r3, #1
 800df60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800df64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800df68:	881b      	ldrh	r3, [r3, #0]
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df70:	b29b      	uxth	r3, r3
 800df72:	029b      	lsls	r3, r3, #10
 800df74:	b29b      	uxth	r3, r3
 800df76:	4313      	orrs	r3, r2
 800df78:	b29a      	uxth	r2, r3
 800df7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800df7e:	801a      	strh	r2, [r3, #0]
 800df80:	e034      	b.n	800dfec <USB_EPStartXfer+0x10ea>
 800df82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	785b      	ldrb	r3, [r3, #1]
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d12c      	bne.n	800dfec <USB_EPStartXfer+0x10ea>
 800df92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dfa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dfb6:	4413      	add	r3, r2
 800dfb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dfbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	00da      	lsls	r2, r3, #3
 800dfca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dfce:	4413      	add	r3, r2
 800dfd0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dfd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dfd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	691b      	ldr	r3, [r3, #16]
 800dfe4:	b29a      	uxth	r2, r3
 800dfe6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800dfea:	801a      	strh	r2, [r3, #0]
 800dfec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	785b      	ldrb	r3, [r3, #1]
 800e006:	2b00      	cmp	r3, #0
 800e008:	f040 809d 	bne.w	800e146 <USB_EPStartXfer+0x1244>
 800e00c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e010:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e01a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e01e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e028:	b29b      	uxth	r3, r3
 800e02a:	461a      	mov	r2, r3
 800e02c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e030:	4413      	add	r3, r2
 800e032:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e03a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	00da      	lsls	r2, r3, #3
 800e044:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e048:	4413      	add	r3, r2
 800e04a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e04e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e052:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e056:	881b      	ldrh	r3, [r3, #0]
 800e058:	b29b      	uxth	r3, r3
 800e05a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e05e:	b29a      	uxth	r2, r3
 800e060:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e064:	801a      	strh	r2, [r3, #0]
 800e066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e06a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	691b      	ldr	r3, [r3, #16]
 800e072:	2b3e      	cmp	r3, #62	@ 0x3e
 800e074:	d92b      	bls.n	800e0ce <USB_EPStartXfer+0x11cc>
 800e076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e07a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	691b      	ldr	r3, [r3, #16]
 800e082:	095b      	lsrs	r3, r3, #5
 800e084:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e08c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	691b      	ldr	r3, [r3, #16]
 800e094:	f003 031f 	and.w	r3, r3, #31
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d104      	bne.n	800e0a6 <USB_EPStartXfer+0x11a4>
 800e09c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e0a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e0aa:	881b      	ldrh	r3, [r3, #0]
 800e0ac:	b29a      	uxth	r2, r3
 800e0ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	029b      	lsls	r3, r3, #10
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0c4:	b29a      	uxth	r2, r3
 800e0c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e0ca:	801a      	strh	r2, [r3, #0]
 800e0cc:	e069      	b.n	800e1a2 <USB_EPStartXfer+0x12a0>
 800e0ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	691b      	ldr	r3, [r3, #16]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d10c      	bne.n	800e0f8 <USB_EPStartXfer+0x11f6>
 800e0de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e0e2:	881b      	ldrh	r3, [r3, #0]
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0ee:	b29a      	uxth	r2, r3
 800e0f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e0f4:	801a      	strh	r2, [r3, #0]
 800e0f6:	e054      	b.n	800e1a2 <USB_EPStartXfer+0x12a0>
 800e0f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	691b      	ldr	r3, [r3, #16]
 800e104:	085b      	lsrs	r3, r3, #1
 800e106:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e10a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e10e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	691b      	ldr	r3, [r3, #16]
 800e116:	f003 0301 	and.w	r3, r3, #1
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d004      	beq.n	800e128 <USB_EPStartXfer+0x1226>
 800e11e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e122:	3301      	adds	r3, #1
 800e124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e128:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e12c:	881b      	ldrh	r3, [r3, #0]
 800e12e:	b29a      	uxth	r2, r3
 800e130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e134:	b29b      	uxth	r3, r3
 800e136:	029b      	lsls	r3, r3, #10
 800e138:	b29b      	uxth	r3, r3
 800e13a:	4313      	orrs	r3, r2
 800e13c:	b29a      	uxth	r2, r3
 800e13e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e142:	801a      	strh	r2, [r3, #0]
 800e144:	e02d      	b.n	800e1a2 <USB_EPStartXfer+0x12a0>
 800e146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e14a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	785b      	ldrb	r3, [r3, #1]
 800e152:	2b01      	cmp	r3, #1
 800e154:	d125      	bne.n	800e1a2 <USB_EPStartXfer+0x12a0>
 800e156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e15a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e164:	b29b      	uxth	r3, r3
 800e166:	461a      	mov	r2, r3
 800e168:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e16c:	4413      	add	r3, r2
 800e16e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	00da      	lsls	r2, r3, #3
 800e180:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e184:	4413      	add	r3, r2
 800e186:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e18a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e18e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	691b      	ldr	r3, [r3, #16]
 800e19a:	b29a      	uxth	r2, r3
 800e19c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e1a0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e1a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	69db      	ldr	r3, [r3, #28]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f000 8218 	beq.w	800e5e4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e1b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	4413      	add	r3, r2
 800e1ce:	881b      	ldrh	r3, [r3, #0]
 800e1d0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e1d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e1d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d005      	beq.n	800e1ec <USB_EPStartXfer+0x12ea>
 800e1e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e1e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10d      	bne.n	800e208 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e1ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e1f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f040 81f5 	bne.w	800e5e4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e1fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e1fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e202:	2b00      	cmp	r3, #0
 800e204:	f040 81ee 	bne.w	800e5e4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e20c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4413      	add	r3, r2
 800e222:	881b      	ldrh	r3, [r3, #0]
 800e224:	b29b      	uxth	r3, r3
 800e226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e22a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e22e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800e232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e236:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	441a      	add	r2, r3
 800e24c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e25c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e260:	b29b      	uxth	r3, r3
 800e262:	8013      	strh	r3, [r2, #0]
 800e264:	e1be      	b.n	800e5e4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e26a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	78db      	ldrb	r3, [r3, #3]
 800e272:	2b01      	cmp	r3, #1
 800e274:	f040 81b4 	bne.w	800e5e0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e27c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	699a      	ldr	r2, [r3, #24]
 800e284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	691b      	ldr	r3, [r3, #16]
 800e290:	429a      	cmp	r2, r3
 800e292:	d917      	bls.n	800e2c4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800e294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	691b      	ldr	r3, [r3, #16]
 800e2a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800e2a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	699a      	ldr	r2, [r3, #24]
 800e2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2b4:	1ad2      	subs	r2, r2, r3
 800e2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	619a      	str	r2, [r3, #24]
 800e2c2:	e00e      	b.n	800e2e2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800e2c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	699b      	ldr	r3, [r3, #24]
 800e2d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800e2d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e2e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	785b      	ldrb	r3, [r3, #1]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f040 8085 	bne.w	800e3fe <USB_EPStartXfer+0x14fc>
 800e2f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e310:	b29b      	uxth	r3, r3
 800e312:	461a      	mov	r2, r3
 800e314:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e318:	4413      	add	r3, r2
 800e31a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e31e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	00da      	lsls	r2, r3, #3
 800e32c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e330:	4413      	add	r3, r2
 800e332:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e336:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e33a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e33e:	881b      	ldrh	r3, [r3, #0]
 800e340:	b29b      	uxth	r3, r3
 800e342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e346:	b29a      	uxth	r2, r3
 800e348:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e34c:	801a      	strh	r2, [r3, #0]
 800e34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e352:	2b3e      	cmp	r3, #62	@ 0x3e
 800e354:	d923      	bls.n	800e39e <USB_EPStartXfer+0x149c>
 800e356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e35a:	095b      	lsrs	r3, r3, #5
 800e35c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e364:	f003 031f 	and.w	r3, r3, #31
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d104      	bne.n	800e376 <USB_EPStartXfer+0x1474>
 800e36c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e370:	3b01      	subs	r3, #1
 800e372:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e37a:	881b      	ldrh	r3, [r3, #0]
 800e37c:	b29a      	uxth	r2, r3
 800e37e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e382:	b29b      	uxth	r3, r3
 800e384:	029b      	lsls	r3, r3, #10
 800e386:	b29b      	uxth	r3, r3
 800e388:	4313      	orrs	r3, r2
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e394:	b29a      	uxth	r2, r3
 800e396:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e39a:	801a      	strh	r2, [r3, #0]
 800e39c:	e060      	b.n	800e460 <USB_EPStartXfer+0x155e>
 800e39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d10c      	bne.n	800e3c0 <USB_EPStartXfer+0x14be>
 800e3a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e3aa:	881b      	ldrh	r3, [r3, #0]
 800e3ac:	b29b      	uxth	r3, r3
 800e3ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3b6:	b29a      	uxth	r2, r3
 800e3b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e3bc:	801a      	strh	r2, [r3, #0]
 800e3be:	e04f      	b.n	800e460 <USB_EPStartXfer+0x155e>
 800e3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3c4:	085b      	lsrs	r3, r3, #1
 800e3c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3ce:	f003 0301 	and.w	r3, r3, #1
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d004      	beq.n	800e3e0 <USB_EPStartXfer+0x14de>
 800e3d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e3da:	3301      	adds	r3, #1
 800e3dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e3e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e3e4:	881b      	ldrh	r3, [r3, #0]
 800e3e6:	b29a      	uxth	r2, r3
 800e3e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	029b      	lsls	r3, r3, #10
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e3fa:	801a      	strh	r2, [r3, #0]
 800e3fc:	e030      	b.n	800e460 <USB_EPStartXfer+0x155e>
 800e3fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	785b      	ldrb	r3, [r3, #1]
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d128      	bne.n	800e460 <USB_EPStartXfer+0x155e>
 800e40e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e41c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e420:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	461a      	mov	r2, r3
 800e42e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e432:	4413      	add	r3, r2
 800e434:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e43c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	00da      	lsls	r2, r3, #3
 800e446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e44a:	4413      	add	r3, r2
 800e44c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e450:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e458:	b29a      	uxth	r2, r3
 800e45a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e45e:	801a      	strh	r2, [r3, #0]
 800e460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e464:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e46e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	785b      	ldrb	r3, [r3, #1]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	f040 8085 	bne.w	800e58a <USB_EPStartXfer+0x1688>
 800e480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e484:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e48e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e492:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	461a      	mov	r2, r3
 800e4a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e4a4:	4413      	add	r3, r2
 800e4a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e4aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	00da      	lsls	r2, r3, #3
 800e4b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e4bc:	4413      	add	r3, r2
 800e4be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e4c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e4c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e4ca:	881b      	ldrh	r3, [r3, #0]
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e4d2:	b29a      	uxth	r2, r3
 800e4d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e4d8:	801a      	strh	r2, [r3, #0]
 800e4da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4de:	2b3e      	cmp	r3, #62	@ 0x3e
 800e4e0:	d923      	bls.n	800e52a <USB_EPStartXfer+0x1628>
 800e4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4e6:	095b      	lsrs	r3, r3, #5
 800e4e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4f0:	f003 031f 	and.w	r3, r3, #31
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d104      	bne.n	800e502 <USB_EPStartXfer+0x1600>
 800e4f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e4fc:	3b01      	subs	r3, #1
 800e4fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e502:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e506:	881b      	ldrh	r3, [r3, #0]
 800e508:	b29a      	uxth	r2, r3
 800e50a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e50e:	b29b      	uxth	r3, r3
 800e510:	029b      	lsls	r3, r3, #10
 800e512:	b29b      	uxth	r3, r3
 800e514:	4313      	orrs	r3, r2
 800e516:	b29b      	uxth	r3, r3
 800e518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e51c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e520:	b29a      	uxth	r2, r3
 800e522:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e526:	801a      	strh	r2, [r3, #0]
 800e528:	e05c      	b.n	800e5e4 <USB_EPStartXfer+0x16e2>
 800e52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d10c      	bne.n	800e54c <USB_EPStartXfer+0x164a>
 800e532:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e536:	881b      	ldrh	r3, [r3, #0]
 800e538:	b29b      	uxth	r3, r3
 800e53a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e53e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e542:	b29a      	uxth	r2, r3
 800e544:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e548:	801a      	strh	r2, [r3, #0]
 800e54a:	e04b      	b.n	800e5e4 <USB_EPStartXfer+0x16e2>
 800e54c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e550:	085b      	lsrs	r3, r3, #1
 800e552:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e55a:	f003 0301 	and.w	r3, r3, #1
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d004      	beq.n	800e56c <USB_EPStartXfer+0x166a>
 800e562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e566:	3301      	adds	r3, #1
 800e568:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e56c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e570:	881b      	ldrh	r3, [r3, #0]
 800e572:	b29a      	uxth	r2, r3
 800e574:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e578:	b29b      	uxth	r3, r3
 800e57a:	029b      	lsls	r3, r3, #10
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	4313      	orrs	r3, r2
 800e580:	b29a      	uxth	r2, r3
 800e582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e586:	801a      	strh	r2, [r3, #0]
 800e588:	e02c      	b.n	800e5e4 <USB_EPStartXfer+0x16e2>
 800e58a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e58e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	785b      	ldrb	r3, [r3, #1]
 800e596:	2b01      	cmp	r3, #1
 800e598:	d124      	bne.n	800e5e4 <USB_EPStartXfer+0x16e2>
 800e59a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e59e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e5a8:	b29b      	uxth	r3, r3
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e5b0:	4413      	add	r3, r2
 800e5b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e5b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	00da      	lsls	r2, r3, #3
 800e5c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e5c8:	4413      	add	r3, r2
 800e5ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e5ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e5dc:	801a      	strh	r2, [r3, #0]
 800e5de:	e001      	b.n	800e5e4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	e03a      	b.n	800e65a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e5e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	009b      	lsls	r3, r3, #2
 800e5fc:	4413      	add	r3, r2
 800e5fe:	881b      	ldrh	r3, [r3, #0]
 800e600:	b29b      	uxth	r3, r3
 800e602:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e60a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e60e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e612:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e616:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e61a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e61e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e622:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e62a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e62e:	681a      	ldr	r2, [r3, #0]
 800e630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	441a      	add	r2, r3
 800e640:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e644:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e648:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e64c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e654:	b29b      	uxth	r3, r3
 800e656:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e658:	2300      	movs	r3, #0
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e664:	b480      	push	{r7}
 800e666:	b085      	sub	sp, #20
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	785b      	ldrb	r3, [r3, #1]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d020      	beq.n	800e6b8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e676:	687a      	ldr	r2, [r7, #4]
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	781b      	ldrb	r3, [r3, #0]
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	4413      	add	r3, r2
 800e680:	881b      	ldrh	r3, [r3, #0]
 800e682:	b29b      	uxth	r3, r3
 800e684:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e688:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e68c:	81bb      	strh	r3, [r7, #12]
 800e68e:	89bb      	ldrh	r3, [r7, #12]
 800e690:	f083 0310 	eor.w	r3, r3, #16
 800e694:	81bb      	strh	r3, [r7, #12]
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	009b      	lsls	r3, r3, #2
 800e69e:	441a      	add	r2, r3
 800e6a0:	89bb      	ldrh	r3, [r7, #12]
 800e6a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e6a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e6aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e6ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	8013      	strh	r3, [r2, #0]
 800e6b6:	e01f      	b.n	800e6f8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	4413      	add	r3, r2
 800e6c2:	881b      	ldrh	r3, [r3, #0]
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e6ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e6ce:	81fb      	strh	r3, [r7, #14]
 800e6d0:	89fb      	ldrh	r3, [r7, #14]
 800e6d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e6d6:	81fb      	strh	r3, [r7, #14]
 800e6d8:	687a      	ldr	r2, [r7, #4]
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	009b      	lsls	r3, r3, #2
 800e6e0:	441a      	add	r2, r3
 800e6e2:	89fb      	ldrh	r3, [r7, #14]
 800e6e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e6e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e6ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e6f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e6f8:	2300      	movs	r3, #0
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3714      	adds	r7, #20
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr

0800e706 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e706:	b480      	push	{r7}
 800e708:	b087      	sub	sp, #28
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	6078      	str	r0, [r7, #4]
 800e70e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	7b1b      	ldrb	r3, [r3, #12]
 800e714:	2b00      	cmp	r3, #0
 800e716:	f040 809d 	bne.w	800e854 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	785b      	ldrb	r3, [r3, #1]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d04c      	beq.n	800e7bc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	009b      	lsls	r3, r3, #2
 800e72a:	4413      	add	r3, r2
 800e72c:	881b      	ldrh	r3, [r3, #0]
 800e72e:	823b      	strh	r3, [r7, #16]
 800e730:	8a3b      	ldrh	r3, [r7, #16]
 800e732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e736:	2b00      	cmp	r3, #0
 800e738:	d01b      	beq.n	800e772 <USB_EPClearStall+0x6c>
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	009b      	lsls	r3, r3, #2
 800e742:	4413      	add	r3, r2
 800e744:	881b      	ldrh	r3, [r3, #0]
 800e746:	b29b      	uxth	r3, r3
 800e748:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e74c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e750:	81fb      	strh	r3, [r7, #14]
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	009b      	lsls	r3, r3, #2
 800e75a:	441a      	add	r2, r3
 800e75c:	89fb      	ldrh	r3, [r7, #14]
 800e75e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e76a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e76e:	b29b      	uxth	r3, r3
 800e770:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	78db      	ldrb	r3, [r3, #3]
 800e776:	2b01      	cmp	r3, #1
 800e778:	d06c      	beq.n	800e854 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	009b      	lsls	r3, r3, #2
 800e782:	4413      	add	r3, r2
 800e784:	881b      	ldrh	r3, [r3, #0]
 800e786:	b29b      	uxth	r3, r3
 800e788:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e78c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e790:	81bb      	strh	r3, [r7, #12]
 800e792:	89bb      	ldrh	r3, [r7, #12]
 800e794:	f083 0320 	eor.w	r3, r3, #32
 800e798:	81bb      	strh	r3, [r7, #12]
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	009b      	lsls	r3, r3, #2
 800e7a2:	441a      	add	r2, r3
 800e7a4:	89bb      	ldrh	r3, [r7, #12]
 800e7a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e7aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e7ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e7b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	8013      	strh	r3, [r2, #0]
 800e7ba:	e04b      	b.n	800e854 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	4413      	add	r3, r2
 800e7c6:	881b      	ldrh	r3, [r3, #0]
 800e7c8:	82fb      	strh	r3, [r7, #22]
 800e7ca:	8afb      	ldrh	r3, [r7, #22]
 800e7cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d01b      	beq.n	800e80c <USB_EPClearStall+0x106>
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	4413      	add	r3, r2
 800e7de:	881b      	ldrh	r3, [r3, #0]
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e7e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e7ea:	82bb      	strh	r3, [r7, #20]
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	441a      	add	r2, r3
 800e7f6:	8abb      	ldrh	r3, [r7, #20]
 800e7f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e7fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e800:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e808:	b29b      	uxth	r3, r3
 800e80a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	009b      	lsls	r3, r3, #2
 800e814:	4413      	add	r3, r2
 800e816:	881b      	ldrh	r3, [r3, #0]
 800e818:	b29b      	uxth	r3, r3
 800e81a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e81e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e822:	827b      	strh	r3, [r7, #18]
 800e824:	8a7b      	ldrh	r3, [r7, #18]
 800e826:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e82a:	827b      	strh	r3, [r7, #18]
 800e82c:	8a7b      	ldrh	r3, [r7, #18]
 800e82e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e832:	827b      	strh	r3, [r7, #18]
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	441a      	add	r2, r3
 800e83e:	8a7b      	ldrh	r3, [r7, #18]
 800e840:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e844:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e84c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e850:	b29b      	uxth	r3, r3
 800e852:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e854:	2300      	movs	r3, #0
}
 800e856:	4618      	mov	r0, r3
 800e858:	371c      	adds	r7, #28
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr

0800e862 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e862:	b480      	push	{r7}
 800e864:	b083      	sub	sp, #12
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
 800e86a:	460b      	mov	r3, r1
 800e86c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e86e:	78fb      	ldrb	r3, [r7, #3]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d103      	bne.n	800e87c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2280      	movs	r2, #128	@ 0x80
 800e878:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e87c:	2300      	movs	r3, #0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	370c      	adds	r7, #12
 800e882:	46bd      	mov	sp, r7
 800e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e888:	4770      	bx	lr

0800e88a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e88a:	b480      	push	{r7}
 800e88c:	b083      	sub	sp, #12
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e898:	b29b      	uxth	r3, r3
 800e89a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e89e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e8a2:	b29a      	uxth	r2, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e8aa:	2300      	movs	r3, #0
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	370c      	adds	r7, #12
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b085      	sub	sp, #20
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e8c6:	b29b      	uxth	r3, r3
 800e8c8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3714      	adds	r7, #20
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr

0800e8d8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b08b      	sub	sp, #44	@ 0x2c
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	4611      	mov	r1, r2
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	460b      	mov	r3, r1
 800e8e8:	80fb      	strh	r3, [r7, #6]
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e8ee:	88bb      	ldrh	r3, [r7, #4]
 800e8f0:	3301      	adds	r3, #1
 800e8f2:	085b      	lsrs	r3, r3, #1
 800e8f4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e8fe:	88fa      	ldrh	r2, [r7, #6]
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	4413      	add	r3, r2
 800e904:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e908:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e90a:	69bb      	ldr	r3, [r7, #24]
 800e90c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e90e:	e01b      	b.n	800e948 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	3301      	adds	r3, #1
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	021b      	lsls	r3, r3, #8
 800e91e:	b21a      	sxth	r2, r3
 800e920:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e924:	4313      	orrs	r3, r2
 800e926:	b21b      	sxth	r3, r3
 800e928:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e92a:	6a3b      	ldr	r3, [r7, #32]
 800e92c:	8a7a      	ldrh	r2, [r7, #18]
 800e92e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e930:	6a3b      	ldr	r3, [r7, #32]
 800e932:	3302      	adds	r3, #2
 800e934:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e936:	69fb      	ldr	r3, [r7, #28]
 800e938:	3301      	adds	r3, #1
 800e93a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e93c:	69fb      	ldr	r3, [r7, #28]
 800e93e:	3301      	adds	r3, #1
 800e940:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e944:	3b01      	subs	r3, #1
 800e946:	627b      	str	r3, [r7, #36]	@ 0x24
 800e948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d1e0      	bne.n	800e910 <USB_WritePMA+0x38>
  }
}
 800e94e:	bf00      	nop
 800e950:	bf00      	nop
 800e952:	372c      	adds	r7, #44	@ 0x2c
 800e954:	46bd      	mov	sp, r7
 800e956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95a:	4770      	bx	lr

0800e95c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e95c:	b480      	push	{r7}
 800e95e:	b08b      	sub	sp, #44	@ 0x2c
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	60b9      	str	r1, [r7, #8]
 800e966:	4611      	mov	r1, r2
 800e968:	461a      	mov	r2, r3
 800e96a:	460b      	mov	r3, r1
 800e96c:	80fb      	strh	r3, [r7, #6]
 800e96e:	4613      	mov	r3, r2
 800e970:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e972:	88bb      	ldrh	r3, [r7, #4]
 800e974:	085b      	lsrs	r3, r3, #1
 800e976:	b29b      	uxth	r3, r3
 800e978:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e982:	88fa      	ldrh	r2, [r7, #6]
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	4413      	add	r3, r2
 800e988:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e98c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e98e:	69bb      	ldr	r3, [r7, #24]
 800e990:	627b      	str	r3, [r7, #36]	@ 0x24
 800e992:	e018      	b.n	800e9c6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e994:	6a3b      	ldr	r3, [r7, #32]
 800e996:	881b      	ldrh	r3, [r3, #0]
 800e998:	b29b      	uxth	r3, r3
 800e99a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e99c:	6a3b      	ldr	r3, [r7, #32]
 800e99e:	3302      	adds	r3, #2
 800e9a0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	b2da      	uxtb	r2, r3
 800e9a6:	69fb      	ldr	r3, [r7, #28]
 800e9a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	0a1b      	lsrs	r3, r3, #8
 800e9b4:	b2da      	uxtb	r2, r3
 800e9b6:	69fb      	ldr	r3, [r7, #28]
 800e9b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e9ba:	69fb      	ldr	r3, [r7, #28]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c2:	3b01      	subs	r3, #1
 800e9c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d1e3      	bne.n	800e994 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e9cc:	88bb      	ldrh	r3, [r7, #4]
 800e9ce:	f003 0301 	and.w	r3, r3, #1
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d007      	beq.n	800e9e8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e9d8:	6a3b      	ldr	r3, [r7, #32]
 800e9da:	881b      	ldrh	r3, [r3, #0]
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	b2da      	uxtb	r2, r3
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	701a      	strb	r2, [r3, #0]
  }
}
 800e9e8:	bf00      	nop
 800e9ea:	372c      	adds	r7, #44	@ 0x2c
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ea00:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ea04:	f002 f8fa 	bl	8010bfc <USBD_static_malloc>
 800ea08:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d105      	bne.n	800ea1c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2200      	movs	r2, #0
 800ea14:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800ea18:	2302      	movs	r3, #2
 800ea1a:	e066      	b.n	800eaea <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	68fa      	ldr	r2, [r7, #12]
 800ea20:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	7c1b      	ldrb	r3, [r3, #16]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d119      	bne.n	800ea60 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ea2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ea30:	2202      	movs	r2, #2
 800ea32:	2181      	movs	r1, #129	@ 0x81
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f001 ff88 	bl	801094a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ea40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ea44:	2202      	movs	r2, #2
 800ea46:	2101      	movs	r1, #1
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f001 ff7e 	bl	801094a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2201      	movs	r2, #1
 800ea52:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2210      	movs	r2, #16
 800ea5a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800ea5e:	e016      	b.n	800ea8e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ea60:	2340      	movs	r3, #64	@ 0x40
 800ea62:	2202      	movs	r2, #2
 800ea64:	2181      	movs	r1, #129	@ 0x81
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f001 ff6f 	bl	801094a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ea72:	2340      	movs	r3, #64	@ 0x40
 800ea74:	2202      	movs	r2, #2
 800ea76:	2101      	movs	r1, #1
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f001 ff66 	bl	801094a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2201      	movs	r2, #1
 800ea82:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2210      	movs	r2, #16
 800ea8a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ea8e:	2308      	movs	r3, #8
 800ea90:	2203      	movs	r2, #3
 800ea92:	2182      	movs	r1, #130	@ 0x82
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f001 ff58 	bl	801094a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2200      	movs	r2, #0
 800eab0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2200      	movs	r2, #0
 800eab8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	7c1b      	ldrb	r3, [r3, #16]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d109      	bne.n	800ead8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eaca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eace:	2101      	movs	r1, #1
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f002 f829 	bl	8010b28 <USBD_LL_PrepareReceive>
 800ead6:	e007      	b.n	800eae8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eade:	2340      	movs	r3, #64	@ 0x40
 800eae0:	2101      	movs	r1, #1
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f002 f820 	bl	8010b28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eae8:	2300      	movs	r3, #0
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3710      	adds	r7, #16
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b082      	sub	sp, #8
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	6078      	str	r0, [r7, #4]
 800eafa:	460b      	mov	r3, r1
 800eafc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800eafe:	2181      	movs	r1, #129	@ 0x81
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f001 ff48 	bl	8010996 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800eb0c:	2101      	movs	r1, #1
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f001 ff41 	bl	8010996 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800eb1c:	2182      	movs	r1, #130	@ 0x82
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f001 ff39 	bl	8010996 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2200      	movs	r2, #0
 800eb28:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d00e      	beq.n	800eb5c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eb44:	685b      	ldr	r3, [r3, #4]
 800eb46:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f002 f862 	bl	8010c18 <USBD_static_free>
    pdev->pClassData = NULL;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2200      	movs	r2, #0
 800eb58:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800eb5c:	2300      	movs	r3, #0
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3708      	adds	r7, #8
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
	...

0800eb68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b086      	sub	sp, #24
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eb78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb82:	2300      	movs	r3, #0
 800eb84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d101      	bne.n	800eb90 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800eb8c:	2303      	movs	r3, #3
 800eb8e:	e0af      	b.n	800ecf0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d03f      	beq.n	800ec1c <USBD_CDC_Setup+0xb4>
 800eb9c:	2b20      	cmp	r3, #32
 800eb9e:	f040 809f 	bne.w	800ece0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	88db      	ldrh	r3, [r3, #6]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d02e      	beq.n	800ec08 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	b25b      	sxtb	r3, r3
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	da16      	bge.n	800ebe2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ebba:	689b      	ldr	r3, [r3, #8]
 800ebbc:	683a      	ldr	r2, [r7, #0]
 800ebbe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ebc0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ebc2:	683a      	ldr	r2, [r7, #0]
 800ebc4:	88d2      	ldrh	r2, [r2, #6]
 800ebc6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	88db      	ldrh	r3, [r3, #6]
 800ebcc:	2b07      	cmp	r3, #7
 800ebce:	bf28      	it	cs
 800ebd0:	2307      	movcs	r3, #7
 800ebd2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	89fa      	ldrh	r2, [r7, #14]
 800ebd8:	4619      	mov	r1, r3
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f001 facd 	bl	801017a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ebe0:	e085      	b.n	800ecee <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	785a      	ldrb	r2, [r3, #1]
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	88db      	ldrh	r3, [r3, #6]
 800ebf0:	b2da      	uxtb	r2, r3
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ebf8:	6939      	ldr	r1, [r7, #16]
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	88db      	ldrh	r3, [r3, #6]
 800ebfe:	461a      	mov	r2, r3
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f001 fae6 	bl	80101d2 <USBD_CtlPrepareRx>
      break;
 800ec06:	e072      	b.n	800ecee <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ec0e:	689b      	ldr	r3, [r3, #8]
 800ec10:	683a      	ldr	r2, [r7, #0]
 800ec12:	7850      	ldrb	r0, [r2, #1]
 800ec14:	2200      	movs	r2, #0
 800ec16:	6839      	ldr	r1, [r7, #0]
 800ec18:	4798      	blx	r3
      break;
 800ec1a:	e068      	b.n	800ecee <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	785b      	ldrb	r3, [r3, #1]
 800ec20:	2b0b      	cmp	r3, #11
 800ec22:	d852      	bhi.n	800ecca <USBD_CDC_Setup+0x162>
 800ec24:	a201      	add	r2, pc, #4	@ (adr r2, 800ec2c <USBD_CDC_Setup+0xc4>)
 800ec26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec2a:	bf00      	nop
 800ec2c:	0800ec5d 	.word	0x0800ec5d
 800ec30:	0800ecd9 	.word	0x0800ecd9
 800ec34:	0800eccb 	.word	0x0800eccb
 800ec38:	0800eccb 	.word	0x0800eccb
 800ec3c:	0800eccb 	.word	0x0800eccb
 800ec40:	0800eccb 	.word	0x0800eccb
 800ec44:	0800eccb 	.word	0x0800eccb
 800ec48:	0800eccb 	.word	0x0800eccb
 800ec4c:	0800eccb 	.word	0x0800eccb
 800ec50:	0800eccb 	.word	0x0800eccb
 800ec54:	0800ec87 	.word	0x0800ec87
 800ec58:	0800ecb1 	.word	0x0800ecb1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec62:	b2db      	uxtb	r3, r3
 800ec64:	2b03      	cmp	r3, #3
 800ec66:	d107      	bne.n	800ec78 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ec68:	f107 030a 	add.w	r3, r7, #10
 800ec6c:	2202      	movs	r2, #2
 800ec6e:	4619      	mov	r1, r3
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f001 fa82 	bl	801017a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ec76:	e032      	b.n	800ecde <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ec78:	6839      	ldr	r1, [r7, #0]
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f001 fa0c 	bl	8010098 <USBD_CtlError>
            ret = USBD_FAIL;
 800ec80:	2303      	movs	r3, #3
 800ec82:	75fb      	strb	r3, [r7, #23]
          break;
 800ec84:	e02b      	b.n	800ecde <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	2b03      	cmp	r3, #3
 800ec90:	d107      	bne.n	800eca2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ec92:	f107 030d 	add.w	r3, r7, #13
 800ec96:	2201      	movs	r2, #1
 800ec98:	4619      	mov	r1, r3
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f001 fa6d 	bl	801017a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eca0:	e01d      	b.n	800ecde <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800eca2:	6839      	ldr	r1, [r7, #0]
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f001 f9f7 	bl	8010098 <USBD_CtlError>
            ret = USBD_FAIL;
 800ecaa:	2303      	movs	r3, #3
 800ecac:	75fb      	strb	r3, [r7, #23]
          break;
 800ecae:	e016      	b.n	800ecde <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ecb6:	b2db      	uxtb	r3, r3
 800ecb8:	2b03      	cmp	r3, #3
 800ecba:	d00f      	beq.n	800ecdc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ecbc:	6839      	ldr	r1, [r7, #0]
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f001 f9ea 	bl	8010098 <USBD_CtlError>
            ret = USBD_FAIL;
 800ecc4:	2303      	movs	r3, #3
 800ecc6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ecc8:	e008      	b.n	800ecdc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ecca:	6839      	ldr	r1, [r7, #0]
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f001 f9e3 	bl	8010098 <USBD_CtlError>
          ret = USBD_FAIL;
 800ecd2:	2303      	movs	r3, #3
 800ecd4:	75fb      	strb	r3, [r7, #23]
          break;
 800ecd6:	e002      	b.n	800ecde <USBD_CDC_Setup+0x176>
          break;
 800ecd8:	bf00      	nop
 800ecda:	e008      	b.n	800ecee <USBD_CDC_Setup+0x186>
          break;
 800ecdc:	bf00      	nop
      }
      break;
 800ecde:	e006      	b.n	800ecee <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ece0:	6839      	ldr	r1, [r7, #0]
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f001 f9d8 	bl	8010098 <USBD_CtlError>
      ret = USBD_FAIL;
 800ece8:	2303      	movs	r3, #3
 800ecea:	75fb      	strb	r3, [r7, #23]
      break;
 800ecec:	bf00      	nop
  }

  return (uint8_t)ret;
 800ecee:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3718      	adds	r7, #24
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b084      	sub	sp, #16
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	460b      	mov	r3, r1
 800ed02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ed0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d101      	bne.n	800ed1a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ed16:	2303      	movs	r3, #3
 800ed18:	e04f      	b.n	800edba <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ed20:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ed22:	78fa      	ldrb	r2, [r7, #3]
 800ed24:	6879      	ldr	r1, [r7, #4]
 800ed26:	4613      	mov	r3, r2
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	4413      	add	r3, r2
 800ed2c:	009b      	lsls	r3, r3, #2
 800ed2e:	440b      	add	r3, r1
 800ed30:	3318      	adds	r3, #24
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d029      	beq.n	800ed8c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ed38:	78fa      	ldrb	r2, [r7, #3]
 800ed3a:	6879      	ldr	r1, [r7, #4]
 800ed3c:	4613      	mov	r3, r2
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	4413      	add	r3, r2
 800ed42:	009b      	lsls	r3, r3, #2
 800ed44:	440b      	add	r3, r1
 800ed46:	3318      	adds	r3, #24
 800ed48:	681a      	ldr	r2, [r3, #0]
 800ed4a:	78f9      	ldrb	r1, [r7, #3]
 800ed4c:	68f8      	ldr	r0, [r7, #12]
 800ed4e:	460b      	mov	r3, r1
 800ed50:	009b      	lsls	r3, r3, #2
 800ed52:	440b      	add	r3, r1
 800ed54:	00db      	lsls	r3, r3, #3
 800ed56:	4403      	add	r3, r0
 800ed58:	3320      	adds	r3, #32
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ed60:	fb01 f303 	mul.w	r3, r1, r3
 800ed64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d110      	bne.n	800ed8c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ed6a:	78fa      	ldrb	r2, [r7, #3]
 800ed6c:	6879      	ldr	r1, [r7, #4]
 800ed6e:	4613      	mov	r3, r2
 800ed70:	009b      	lsls	r3, r3, #2
 800ed72:	4413      	add	r3, r2
 800ed74:	009b      	lsls	r3, r3, #2
 800ed76:	440b      	add	r3, r1
 800ed78:	3318      	adds	r3, #24
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ed7e:	78f9      	ldrb	r1, [r7, #3]
 800ed80:	2300      	movs	r3, #0
 800ed82:	2200      	movs	r2, #0
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f001 feae 	bl	8010ae6 <USBD_LL_Transmit>
 800ed8a:	e015      	b.n	800edb8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ed9a:	691b      	ldr	r3, [r3, #16]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d00b      	beq.n	800edb8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eda6:	691b      	ldr	r3, [r3, #16]
 800eda8:	68ba      	ldr	r2, [r7, #8]
 800edaa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800edae:	68ba      	ldr	r2, [r7, #8]
 800edb0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800edb4:	78fa      	ldrb	r2, [r7, #3]
 800edb6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800edb8:	2300      	movs	r3, #0
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3710      	adds	r7, #16
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}

0800edc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800edc2:	b580      	push	{r7, lr}
 800edc4:	b084      	sub	sp, #16
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	6078      	str	r0, [r7, #4]
 800edca:	460b      	mov	r3, r1
 800edcc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800edd4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d101      	bne.n	800ede4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ede0:	2303      	movs	r3, #3
 800ede2:	e015      	b.n	800ee10 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ede4:	78fb      	ldrb	r3, [r7, #3]
 800ede6:	4619      	mov	r1, r3
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f001 febe 	bl	8010b6a <USBD_LL_GetRxDataSize>
 800edee:	4602      	mov	r2, r0
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	68fa      	ldr	r2, [r7, #12]
 800ee00:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ee04:	68fa      	ldr	r2, [r7, #12]
 800ee06:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ee0a:	4611      	mov	r1, r2
 800ee0c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ee0e:	2300      	movs	r3, #0
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3710      	adds	r7, #16
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee26:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d101      	bne.n	800ee32 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ee2e:	2303      	movs	r3, #3
 800ee30:	e01a      	b.n	800ee68 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d014      	beq.n	800ee66 <USBD_CDC_EP0_RxReady+0x4e>
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ee42:	2bff      	cmp	r3, #255	@ 0xff
 800ee44:	d00f      	beq.n	800ee66 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ee4c:	689b      	ldr	r3, [r3, #8]
 800ee4e:	68fa      	ldr	r2, [r7, #12]
 800ee50:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800ee54:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ee56:	68fa      	ldr	r2, [r7, #12]
 800ee58:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ee5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	22ff      	movs	r2, #255	@ 0xff
 800ee62:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ee66:	2300      	movs	r3, #0
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3710      	adds	r7, #16
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ee70:	b480      	push	{r7}
 800ee72:	b083      	sub	sp, #12
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2243      	movs	r2, #67	@ 0x43
 800ee7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ee7e:	4b03      	ldr	r3, [pc, #12]	@ (800ee8c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	370c      	adds	r7, #12
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr
 800ee8c:	200000b0 	.word	0x200000b0

0800ee90 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b083      	sub	sp, #12
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2243      	movs	r2, #67	@ 0x43
 800ee9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ee9e:	4b03      	ldr	r3, [pc, #12]	@ (800eeac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	370c      	adds	r7, #12
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr
 800eeac:	2000006c 	.word	0x2000006c

0800eeb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b083      	sub	sp, #12
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2243      	movs	r2, #67	@ 0x43
 800eebc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800eebe:	4b03      	ldr	r3, [pc, #12]	@ (800eecc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	370c      	adds	r7, #12
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr
 800eecc:	200000f4 	.word	0x200000f4

0800eed0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b083      	sub	sp, #12
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	220a      	movs	r2, #10
 800eedc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800eede:	4b03      	ldr	r3, [pc, #12]	@ (800eeec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	370c      	adds	r7, #12
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr
 800eeec:	20000028 	.word	0x20000028

0800eef0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800eef0:	b480      	push	{r7}
 800eef2:	b083      	sub	sp, #12
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d101      	bne.n	800ef04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ef00:	2303      	movs	r3, #3
 800ef02:	e004      	b.n	800ef0e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	683a      	ldr	r2, [r7, #0]
 800ef08:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800ef0c:	2300      	movs	r3, #0
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	370c      	adds	r7, #12
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr

0800ef1a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ef1a:	b480      	push	{r7}
 800ef1c:	b087      	sub	sp, #28
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	60f8      	str	r0, [r7, #12]
 800ef22:	60b9      	str	r1, [r7, #8]
 800ef24:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef2c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d101      	bne.n	800ef38 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ef34:	2303      	movs	r3, #3
 800ef36:	e008      	b.n	800ef4a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	68ba      	ldr	r2, [r7, #8]
 800ef3c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	371c      	adds	r7, #28
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef54:	4770      	bx	lr

0800ef56 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ef56:	b480      	push	{r7}
 800ef58:	b085      	sub	sp, #20
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
 800ef5e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef66:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d101      	bne.n	800ef72 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ef6e:	2303      	movs	r3, #3
 800ef70:	e004      	b.n	800ef7c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	683a      	ldr	r2, [r7, #0]
 800ef76:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3714      	adds	r7, #20
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef96:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ef98:	2301      	movs	r3, #1
 800ef9a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d101      	bne.n	800efaa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800efa6:	2303      	movs	r3, #3
 800efa8:	e01a      	b.n	800efe0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d114      	bne.n	800efde <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	2201      	movs	r2, #1
 800efb8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800efd2:	2181      	movs	r1, #129	@ 0x81
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f001 fd86 	bl	8010ae6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800efda:	2300      	movs	r3, #0
 800efdc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800efde:	7bfb      	ldrb	r3, [r7, #15]
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3710      	adds	r7, #16
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eff6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800effe:	2b00      	cmp	r3, #0
 800f000:	d101      	bne.n	800f006 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f002:	2303      	movs	r3, #3
 800f004:	e016      	b.n	800f034 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	7c1b      	ldrb	r3, [r3, #16]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d109      	bne.n	800f022 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f014:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f018:	2101      	movs	r1, #1
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f001 fd84 	bl	8010b28 <USBD_LL_PrepareReceive>
 800f020:	e007      	b.n	800f032 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f028:	2340      	movs	r3, #64	@ 0x40
 800f02a:	2101      	movs	r1, #1
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f001 fd7b 	bl	8010b28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f032:	2300      	movs	r3, #0
}
 800f034:	4618      	mov	r0, r3
 800f036:	3710      	adds	r7, #16
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b086      	sub	sp, #24
 800f040:	af00      	add	r7, sp, #0
 800f042:	60f8      	str	r0, [r7, #12]
 800f044:	60b9      	str	r1, [r7, #8]
 800f046:	4613      	mov	r3, r2
 800f048:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d101      	bne.n	800f054 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f050:	2303      	movs	r3, #3
 800f052:	e01f      	b.n	800f094 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2200      	movs	r2, #0
 800f058:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2200      	movs	r2, #0
 800f060:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2200      	movs	r2, #0
 800f068:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d003      	beq.n	800f07a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	68ba      	ldr	r2, [r7, #8]
 800f076:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	2201      	movs	r2, #1
 800f07e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	79fa      	ldrb	r2, [r7, #7]
 800f086:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f088:	68f8      	ldr	r0, [r7, #12]
 800f08a:	f001 fbe3 	bl	8010854 <USBD_LL_Init>
 800f08e:	4603      	mov	r3, r0
 800f090:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f092:	7dfb      	ldrb	r3, [r7, #23]
}
 800f094:	4618      	mov	r0, r3
 800f096:	3718      	adds	r7, #24
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}

0800f09c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d101      	bne.n	800f0b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f0b0:	2303      	movs	r3, #3
 800f0b2:	e016      	b.n	800f0e2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	683a      	ldr	r2, [r7, #0]
 800f0b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d00b      	beq.n	800f0e0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0d0:	f107 020e 	add.w	r2, r7, #14
 800f0d4:	4610      	mov	r0, r2
 800f0d6:	4798      	blx	r3
 800f0d8:	4602      	mov	r2, r0
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f0e0:	2300      	movs	r3, #0
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3710      	adds	r7, #16
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}

0800f0ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f0ea:	b580      	push	{r7, lr}
 800f0ec:	b082      	sub	sp, #8
 800f0ee:	af00      	add	r7, sp, #0
 800f0f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f001 fc0e 	bl	8010914 <USBD_LL_Start>
 800f0f8:	4603      	mov	r3, r0
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3708      	adds	r7, #8
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}

0800f102 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f102:	b480      	push	{r7}
 800f104:	b083      	sub	sp, #12
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f10a:	2300      	movs	r3, #0
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	370c      	adds	r7, #12
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr

0800f118 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b084      	sub	sp, #16
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	460b      	mov	r3, r1
 800f122:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f124:	2303      	movs	r3, #3
 800f126:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d009      	beq.n	800f146 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	78fa      	ldrb	r2, [r7, #3]
 800f13c:	4611      	mov	r1, r2
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	4798      	blx	r3
 800f142:	4603      	mov	r3, r0
 800f144:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f146:	7bfb      	ldrb	r3, [r7, #15]
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3710      	adds	r7, #16
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	460b      	mov	r3, r1
 800f15a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f162:	2b00      	cmp	r3, #0
 800f164:	d007      	beq.n	800f176 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	78fa      	ldrb	r2, [r7, #3]
 800f170:	4611      	mov	r1, r2
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	4798      	blx	r3
  }

  return USBD_OK;
 800f176:	2300      	movs	r3, #0
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3708      	adds	r7, #8
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f190:	6839      	ldr	r1, [r7, #0]
 800f192:	4618      	mov	r0, r3
 800f194:	f000 ff46 	bl	8010024 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2201      	movs	r2, #1
 800f19c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f1b4:	f003 031f 	and.w	r3, r3, #31
 800f1b8:	2b02      	cmp	r3, #2
 800f1ba:	d01a      	beq.n	800f1f2 <USBD_LL_SetupStage+0x72>
 800f1bc:	2b02      	cmp	r3, #2
 800f1be:	d822      	bhi.n	800f206 <USBD_LL_SetupStage+0x86>
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d002      	beq.n	800f1ca <USBD_LL_SetupStage+0x4a>
 800f1c4:	2b01      	cmp	r3, #1
 800f1c6:	d00a      	beq.n	800f1de <USBD_LL_SetupStage+0x5e>
 800f1c8:	e01d      	b.n	800f206 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f000 f9ee 	bl	800f5b4 <USBD_StdDevReq>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	73fb      	strb	r3, [r7, #15]
      break;
 800f1dc:	e020      	b.n	800f220 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 fa52 	bl	800f690 <USBD_StdItfReq>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	73fb      	strb	r3, [r7, #15]
      break;
 800f1f0:	e016      	b.n	800f220 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f000 fa91 	bl	800f722 <USBD_StdEPReq>
 800f200:	4603      	mov	r3, r0
 800f202:	73fb      	strb	r3, [r7, #15]
      break;
 800f204:	e00c      	b.n	800f220 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f20c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f210:	b2db      	uxtb	r3, r3
 800f212:	4619      	mov	r1, r3
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f001 fbdd 	bl	80109d4 <USBD_LL_StallEP>
 800f21a:	4603      	mov	r3, r0
 800f21c:	73fb      	strb	r3, [r7, #15]
      break;
 800f21e:	bf00      	nop
  }

  return ret;
 800f220:	7bfb      	ldrb	r3, [r7, #15]
}
 800f222:	4618      	mov	r0, r3
 800f224:	3710      	adds	r7, #16
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}

0800f22a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b086      	sub	sp, #24
 800f22e:	af00      	add	r7, sp, #0
 800f230:	60f8      	str	r0, [r7, #12]
 800f232:	460b      	mov	r3, r1
 800f234:	607a      	str	r2, [r7, #4]
 800f236:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f238:	7afb      	ldrb	r3, [r7, #11]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d138      	bne.n	800f2b0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f244:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f24c:	2b03      	cmp	r3, #3
 800f24e:	d14a      	bne.n	800f2e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	689a      	ldr	r2, [r3, #8]
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	68db      	ldr	r3, [r3, #12]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d913      	bls.n	800f284 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	689a      	ldr	r2, [r3, #8]
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	68db      	ldr	r3, [r3, #12]
 800f264:	1ad2      	subs	r2, r2, r3
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	68da      	ldr	r2, [r3, #12]
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	689b      	ldr	r3, [r3, #8]
 800f272:	4293      	cmp	r3, r2
 800f274:	bf28      	it	cs
 800f276:	4613      	movcs	r3, r2
 800f278:	461a      	mov	r2, r3
 800f27a:	6879      	ldr	r1, [r7, #4]
 800f27c:	68f8      	ldr	r0, [r7, #12]
 800f27e:	f000 ffc5 	bl	801020c <USBD_CtlContinueRx>
 800f282:	e030      	b.n	800f2e6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	2b03      	cmp	r3, #3
 800f28e:	d10b      	bne.n	800f2a8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f296:	691b      	ldr	r3, [r3, #16]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d005      	beq.n	800f2a8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2a2:	691b      	ldr	r3, [r3, #16]
 800f2a4:	68f8      	ldr	r0, [r7, #12]
 800f2a6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	f000 ffc0 	bl	801022e <USBD_CtlSendStatus>
 800f2ae:	e01a      	b.n	800f2e6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	2b03      	cmp	r3, #3
 800f2ba:	d114      	bne.n	800f2e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2c2:	699b      	ldr	r3, [r3, #24]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d00e      	beq.n	800f2e6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2ce:	699b      	ldr	r3, [r3, #24]
 800f2d0:	7afa      	ldrb	r2, [r7, #11]
 800f2d2:	4611      	mov	r1, r2
 800f2d4:	68f8      	ldr	r0, [r7, #12]
 800f2d6:	4798      	blx	r3
 800f2d8:	4603      	mov	r3, r0
 800f2da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f2dc:	7dfb      	ldrb	r3, [r7, #23]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d001      	beq.n	800f2e6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f2e2:	7dfb      	ldrb	r3, [r7, #23]
 800f2e4:	e000      	b.n	800f2e8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f2e6:	2300      	movs	r3, #0
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3718      	adds	r7, #24
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b086      	sub	sp, #24
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	460b      	mov	r3, r1
 800f2fa:	607a      	str	r2, [r7, #4]
 800f2fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f2fe:	7afb      	ldrb	r3, [r7, #11]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d16b      	bne.n	800f3dc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	3314      	adds	r3, #20
 800f308:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f310:	2b02      	cmp	r3, #2
 800f312:	d156      	bne.n	800f3c2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	689a      	ldr	r2, [r3, #8]
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d914      	bls.n	800f34a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	689a      	ldr	r2, [r3, #8]
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	68db      	ldr	r3, [r3, #12]
 800f328:	1ad2      	subs	r2, r2, r3
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	689b      	ldr	r3, [r3, #8]
 800f332:	461a      	mov	r2, r3
 800f334:	6879      	ldr	r1, [r7, #4]
 800f336:	68f8      	ldr	r0, [r7, #12]
 800f338:	f000 ff3a 	bl	80101b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f33c:	2300      	movs	r3, #0
 800f33e:	2200      	movs	r2, #0
 800f340:	2100      	movs	r1, #0
 800f342:	68f8      	ldr	r0, [r7, #12]
 800f344:	f001 fbf0 	bl	8010b28 <USBD_LL_PrepareReceive>
 800f348:	e03b      	b.n	800f3c2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	68da      	ldr	r2, [r3, #12]
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	689b      	ldr	r3, [r3, #8]
 800f352:	429a      	cmp	r2, r3
 800f354:	d11c      	bne.n	800f390 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	685a      	ldr	r2, [r3, #4]
 800f35a:	693b      	ldr	r3, [r7, #16]
 800f35c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f35e:	429a      	cmp	r2, r3
 800f360:	d316      	bcc.n	800f390 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	685a      	ldr	r2, [r3, #4]
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d20f      	bcs.n	800f390 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f370:	2200      	movs	r2, #0
 800f372:	2100      	movs	r1, #0
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	f000 ff1b 	bl	80101b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2200      	movs	r2, #0
 800f37e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f382:	2300      	movs	r3, #0
 800f384:	2200      	movs	r2, #0
 800f386:	2100      	movs	r1, #0
 800f388:	68f8      	ldr	r0, [r7, #12]
 800f38a:	f001 fbcd 	bl	8010b28 <USBD_LL_PrepareReceive>
 800f38e:	e018      	b.n	800f3c2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f396:	b2db      	uxtb	r3, r3
 800f398:	2b03      	cmp	r3, #3
 800f39a:	d10b      	bne.n	800f3b4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3a2:	68db      	ldr	r3, [r3, #12]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d005      	beq.n	800f3b4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3ae:	68db      	ldr	r3, [r3, #12]
 800f3b0:	68f8      	ldr	r0, [r7, #12]
 800f3b2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3b4:	2180      	movs	r1, #128	@ 0x80
 800f3b6:	68f8      	ldr	r0, [r7, #12]
 800f3b8:	f001 fb0c 	bl	80109d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f3bc:	68f8      	ldr	r0, [r7, #12]
 800f3be:	f000 ff49 	bl	8010254 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d122      	bne.n	800f412 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f3cc:	68f8      	ldr	r0, [r7, #12]
 800f3ce:	f7ff fe98 	bl	800f102 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f3da:	e01a      	b.n	800f412 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3e2:	b2db      	uxtb	r3, r3
 800f3e4:	2b03      	cmp	r3, #3
 800f3e6:	d114      	bne.n	800f412 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3ee:	695b      	ldr	r3, [r3, #20]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d00e      	beq.n	800f412 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3fa:	695b      	ldr	r3, [r3, #20]
 800f3fc:	7afa      	ldrb	r2, [r7, #11]
 800f3fe:	4611      	mov	r1, r2
 800f400:	68f8      	ldr	r0, [r7, #12]
 800f402:	4798      	blx	r3
 800f404:	4603      	mov	r3, r0
 800f406:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f408:	7dfb      	ldrb	r3, [r7, #23]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d001      	beq.n	800f412 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f40e:	7dfb      	ldrb	r3, [r7, #23]
 800f410:	e000      	b.n	800f414 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f412:	2300      	movs	r3, #0
}
 800f414:	4618      	mov	r0, r3
 800f416:	3718      	adds	r7, #24
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2201      	movs	r2, #1
 800f428:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2200      	movs	r2, #0
 800f430:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2200      	movs	r2, #0
 800f438:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2200      	movs	r2, #0
 800f43e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d101      	bne.n	800f450 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f44c:	2303      	movs	r3, #3
 800f44e:	e02f      	b.n	800f4b0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f456:	2b00      	cmp	r3, #0
 800f458:	d00f      	beq.n	800f47a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d009      	beq.n	800f47a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	6852      	ldr	r2, [r2, #4]
 800f472:	b2d2      	uxtb	r2, r2
 800f474:	4611      	mov	r1, r2
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f47a:	2340      	movs	r3, #64	@ 0x40
 800f47c:	2200      	movs	r2, #0
 800f47e:	2100      	movs	r1, #0
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f001 fa62 	bl	801094a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2201      	movs	r2, #1
 800f48a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2240      	movs	r2, #64	@ 0x40
 800f492:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f496:	2340      	movs	r3, #64	@ 0x40
 800f498:	2200      	movs	r2, #0
 800f49a:	2180      	movs	r1, #128	@ 0x80
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f001 fa54 	bl	801094a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2201      	movs	r2, #1
 800f4a6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2240      	movs	r2, #64	@ 0x40
 800f4ac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f4ae:	2300      	movs	r3, #0
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3708      	adds	r7, #8
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b083      	sub	sp, #12
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	78fa      	ldrb	r2, [r7, #3]
 800f4c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f4ca:	2300      	movs	r3, #0
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	370c      	adds	r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d6:	4770      	bx	lr

0800f4d8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4e6:	b2da      	uxtb	r2, r3
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2204      	movs	r2, #4
 800f4f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f4f6:	2300      	movs	r3, #0
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	370c      	adds	r7, #12
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f512:	b2db      	uxtb	r3, r3
 800f514:	2b04      	cmp	r3, #4
 800f516:	d106      	bne.n	800f526 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f51e:	b2da      	uxtb	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f526:	2300      	movs	r3, #0
}
 800f528:	4618      	mov	r0, r3
 800f52a:	370c      	adds	r7, #12
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr

0800f534 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f542:	2b00      	cmp	r3, #0
 800f544:	d101      	bne.n	800f54a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f546:	2303      	movs	r3, #3
 800f548:	e012      	b.n	800f570 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f550:	b2db      	uxtb	r3, r3
 800f552:	2b03      	cmp	r3, #3
 800f554:	d10b      	bne.n	800f56e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f55c:	69db      	ldr	r3, [r3, #28]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d005      	beq.n	800f56e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f568:	69db      	ldr	r3, [r3, #28]
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f56e:	2300      	movs	r3, #0
}
 800f570:	4618      	mov	r0, r3
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}

0800f578 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f578:	b480      	push	{r7}
 800f57a:	b087      	sub	sp, #28
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	781b      	ldrb	r3, [r3, #0]
 800f588:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	3301      	adds	r3, #1
 800f58e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f596:	8a3b      	ldrh	r3, [r7, #16]
 800f598:	021b      	lsls	r3, r3, #8
 800f59a:	b21a      	sxth	r2, r3
 800f59c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5a0:	4313      	orrs	r3, r2
 800f5a2:	b21b      	sxth	r3, r3
 800f5a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f5a6:	89fb      	ldrh	r3, [r7, #14]
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	371c      	adds	r7, #28
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr

0800f5b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b084      	sub	sp, #16
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	781b      	ldrb	r3, [r3, #0]
 800f5c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f5ca:	2b40      	cmp	r3, #64	@ 0x40
 800f5cc:	d005      	beq.n	800f5da <USBD_StdDevReq+0x26>
 800f5ce:	2b40      	cmp	r3, #64	@ 0x40
 800f5d0:	d853      	bhi.n	800f67a <USBD_StdDevReq+0xc6>
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00b      	beq.n	800f5ee <USBD_StdDevReq+0x3a>
 800f5d6:	2b20      	cmp	r3, #32
 800f5d8:	d14f      	bne.n	800f67a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5e0:	689b      	ldr	r3, [r3, #8]
 800f5e2:	6839      	ldr	r1, [r7, #0]
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	4798      	blx	r3
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	73fb      	strb	r3, [r7, #15]
      break;
 800f5ec:	e04a      	b.n	800f684 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	785b      	ldrb	r3, [r3, #1]
 800f5f2:	2b09      	cmp	r3, #9
 800f5f4:	d83b      	bhi.n	800f66e <USBD_StdDevReq+0xba>
 800f5f6:	a201      	add	r2, pc, #4	@ (adr r2, 800f5fc <USBD_StdDevReq+0x48>)
 800f5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5fc:	0800f651 	.word	0x0800f651
 800f600:	0800f665 	.word	0x0800f665
 800f604:	0800f66f 	.word	0x0800f66f
 800f608:	0800f65b 	.word	0x0800f65b
 800f60c:	0800f66f 	.word	0x0800f66f
 800f610:	0800f62f 	.word	0x0800f62f
 800f614:	0800f625 	.word	0x0800f625
 800f618:	0800f66f 	.word	0x0800f66f
 800f61c:	0800f647 	.word	0x0800f647
 800f620:	0800f639 	.word	0x0800f639
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f624:	6839      	ldr	r1, [r7, #0]
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f000 f9de 	bl	800f9e8 <USBD_GetDescriptor>
          break;
 800f62c:	e024      	b.n	800f678 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f62e:	6839      	ldr	r1, [r7, #0]
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f000 fb6d 	bl	800fd10 <USBD_SetAddress>
          break;
 800f636:	e01f      	b.n	800f678 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f638:	6839      	ldr	r1, [r7, #0]
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f000 fbac 	bl	800fd98 <USBD_SetConfig>
 800f640:	4603      	mov	r3, r0
 800f642:	73fb      	strb	r3, [r7, #15]
          break;
 800f644:	e018      	b.n	800f678 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f646:	6839      	ldr	r1, [r7, #0]
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f000 fc4b 	bl	800fee4 <USBD_GetConfig>
          break;
 800f64e:	e013      	b.n	800f678 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f650:	6839      	ldr	r1, [r7, #0]
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 fc7c 	bl	800ff50 <USBD_GetStatus>
          break;
 800f658:	e00e      	b.n	800f678 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f65a:	6839      	ldr	r1, [r7, #0]
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f000 fcab 	bl	800ffb8 <USBD_SetFeature>
          break;
 800f662:	e009      	b.n	800f678 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f664:	6839      	ldr	r1, [r7, #0]
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f000 fcba 	bl	800ffe0 <USBD_ClrFeature>
          break;
 800f66c:	e004      	b.n	800f678 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f66e:	6839      	ldr	r1, [r7, #0]
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f000 fd11 	bl	8010098 <USBD_CtlError>
          break;
 800f676:	bf00      	nop
      }
      break;
 800f678:	e004      	b.n	800f684 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f67a:	6839      	ldr	r1, [r7, #0]
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f000 fd0b 	bl	8010098 <USBD_CtlError>
      break;
 800f682:	bf00      	nop
  }

  return ret;
 800f684:	7bfb      	ldrb	r3, [r7, #15]
}
 800f686:	4618      	mov	r0, r3
 800f688:	3710      	adds	r7, #16
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	bf00      	nop

0800f690 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f69a:	2300      	movs	r3, #0
 800f69c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f6a6:	2b40      	cmp	r3, #64	@ 0x40
 800f6a8:	d005      	beq.n	800f6b6 <USBD_StdItfReq+0x26>
 800f6aa:	2b40      	cmp	r3, #64	@ 0x40
 800f6ac:	d82f      	bhi.n	800f70e <USBD_StdItfReq+0x7e>
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d001      	beq.n	800f6b6 <USBD_StdItfReq+0x26>
 800f6b2:	2b20      	cmp	r3, #32
 800f6b4:	d12b      	bne.n	800f70e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	3b01      	subs	r3, #1
 800f6c0:	2b02      	cmp	r3, #2
 800f6c2:	d81d      	bhi.n	800f700 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	889b      	ldrh	r3, [r3, #4]
 800f6c8:	b2db      	uxtb	r3, r3
 800f6ca:	2b01      	cmp	r3, #1
 800f6cc:	d813      	bhi.n	800f6f6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6d4:	689b      	ldr	r3, [r3, #8]
 800f6d6:	6839      	ldr	r1, [r7, #0]
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	4798      	blx	r3
 800f6dc:	4603      	mov	r3, r0
 800f6de:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	88db      	ldrh	r3, [r3, #6]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d110      	bne.n	800f70a <USBD_StdItfReq+0x7a>
 800f6e8:	7bfb      	ldrb	r3, [r7, #15]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d10d      	bne.n	800f70a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 fd9d 	bl	801022e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f6f4:	e009      	b.n	800f70a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f6f6:	6839      	ldr	r1, [r7, #0]
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f000 fccd 	bl	8010098 <USBD_CtlError>
          break;
 800f6fe:	e004      	b.n	800f70a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f700:	6839      	ldr	r1, [r7, #0]
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 fcc8 	bl	8010098 <USBD_CtlError>
          break;
 800f708:	e000      	b.n	800f70c <USBD_StdItfReq+0x7c>
          break;
 800f70a:	bf00      	nop
      }
      break;
 800f70c:	e004      	b.n	800f718 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f70e:	6839      	ldr	r1, [r7, #0]
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f000 fcc1 	bl	8010098 <USBD_CtlError>
      break;
 800f716:	bf00      	nop
  }

  return ret;
 800f718:	7bfb      	ldrb	r3, [r7, #15]
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3710      	adds	r7, #16
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}

0800f722 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f722:	b580      	push	{r7, lr}
 800f724:	b084      	sub	sp, #16
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
 800f72a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f72c:	2300      	movs	r3, #0
 800f72e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	889b      	ldrh	r3, [r3, #4]
 800f734:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f73e:	2b40      	cmp	r3, #64	@ 0x40
 800f740:	d007      	beq.n	800f752 <USBD_StdEPReq+0x30>
 800f742:	2b40      	cmp	r3, #64	@ 0x40
 800f744:	f200 8145 	bhi.w	800f9d2 <USBD_StdEPReq+0x2b0>
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d00c      	beq.n	800f766 <USBD_StdEPReq+0x44>
 800f74c:	2b20      	cmp	r3, #32
 800f74e:	f040 8140 	bne.w	800f9d2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f758:	689b      	ldr	r3, [r3, #8]
 800f75a:	6839      	ldr	r1, [r7, #0]
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	4798      	blx	r3
 800f760:	4603      	mov	r3, r0
 800f762:	73fb      	strb	r3, [r7, #15]
      break;
 800f764:	e13a      	b.n	800f9dc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	785b      	ldrb	r3, [r3, #1]
 800f76a:	2b03      	cmp	r3, #3
 800f76c:	d007      	beq.n	800f77e <USBD_StdEPReq+0x5c>
 800f76e:	2b03      	cmp	r3, #3
 800f770:	f300 8129 	bgt.w	800f9c6 <USBD_StdEPReq+0x2a4>
 800f774:	2b00      	cmp	r3, #0
 800f776:	d07f      	beq.n	800f878 <USBD_StdEPReq+0x156>
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d03c      	beq.n	800f7f6 <USBD_StdEPReq+0xd4>
 800f77c:	e123      	b.n	800f9c6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f784:	b2db      	uxtb	r3, r3
 800f786:	2b02      	cmp	r3, #2
 800f788:	d002      	beq.n	800f790 <USBD_StdEPReq+0x6e>
 800f78a:	2b03      	cmp	r3, #3
 800f78c:	d016      	beq.n	800f7bc <USBD_StdEPReq+0x9a>
 800f78e:	e02c      	b.n	800f7ea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f790:	7bbb      	ldrb	r3, [r7, #14]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d00d      	beq.n	800f7b2 <USBD_StdEPReq+0x90>
 800f796:	7bbb      	ldrb	r3, [r7, #14]
 800f798:	2b80      	cmp	r3, #128	@ 0x80
 800f79a:	d00a      	beq.n	800f7b2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f79c:	7bbb      	ldrb	r3, [r7, #14]
 800f79e:	4619      	mov	r1, r3
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f001 f917 	bl	80109d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f7a6:	2180      	movs	r1, #128	@ 0x80
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f001 f913 	bl	80109d4 <USBD_LL_StallEP>
 800f7ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f7b0:	e020      	b.n	800f7f4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f7b2:	6839      	ldr	r1, [r7, #0]
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 fc6f 	bl	8010098 <USBD_CtlError>
              break;
 800f7ba:	e01b      	b.n	800f7f4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	885b      	ldrh	r3, [r3, #2]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d10e      	bne.n	800f7e2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f7c4:	7bbb      	ldrb	r3, [r7, #14]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d00b      	beq.n	800f7e2 <USBD_StdEPReq+0xc0>
 800f7ca:	7bbb      	ldrb	r3, [r7, #14]
 800f7cc:	2b80      	cmp	r3, #128	@ 0x80
 800f7ce:	d008      	beq.n	800f7e2 <USBD_StdEPReq+0xc0>
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	88db      	ldrh	r3, [r3, #6]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d104      	bne.n	800f7e2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f7d8:	7bbb      	ldrb	r3, [r7, #14]
 800f7da:	4619      	mov	r1, r3
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f001 f8f9 	bl	80109d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f000 fd23 	bl	801022e <USBD_CtlSendStatus>

              break;
 800f7e8:	e004      	b.n	800f7f4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f7ea:	6839      	ldr	r1, [r7, #0]
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f000 fc53 	bl	8010098 <USBD_CtlError>
              break;
 800f7f2:	bf00      	nop
          }
          break;
 800f7f4:	e0ec      	b.n	800f9d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7fc:	b2db      	uxtb	r3, r3
 800f7fe:	2b02      	cmp	r3, #2
 800f800:	d002      	beq.n	800f808 <USBD_StdEPReq+0xe6>
 800f802:	2b03      	cmp	r3, #3
 800f804:	d016      	beq.n	800f834 <USBD_StdEPReq+0x112>
 800f806:	e030      	b.n	800f86a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f808:	7bbb      	ldrb	r3, [r7, #14]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d00d      	beq.n	800f82a <USBD_StdEPReq+0x108>
 800f80e:	7bbb      	ldrb	r3, [r7, #14]
 800f810:	2b80      	cmp	r3, #128	@ 0x80
 800f812:	d00a      	beq.n	800f82a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f814:	7bbb      	ldrb	r3, [r7, #14]
 800f816:	4619      	mov	r1, r3
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f001 f8db 	bl	80109d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f81e:	2180      	movs	r1, #128	@ 0x80
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f001 f8d7 	bl	80109d4 <USBD_LL_StallEP>
 800f826:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f828:	e025      	b.n	800f876 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f82a:	6839      	ldr	r1, [r7, #0]
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f000 fc33 	bl	8010098 <USBD_CtlError>
              break;
 800f832:	e020      	b.n	800f876 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	885b      	ldrh	r3, [r3, #2]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d11b      	bne.n	800f874 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f83c:	7bbb      	ldrb	r3, [r7, #14]
 800f83e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f842:	2b00      	cmp	r3, #0
 800f844:	d004      	beq.n	800f850 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f846:	7bbb      	ldrb	r3, [r7, #14]
 800f848:	4619      	mov	r1, r3
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f001 f8e1 	bl	8010a12 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f000 fcec 	bl	801022e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f85c:	689b      	ldr	r3, [r3, #8]
 800f85e:	6839      	ldr	r1, [r7, #0]
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	4798      	blx	r3
 800f864:	4603      	mov	r3, r0
 800f866:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f868:	e004      	b.n	800f874 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f86a:	6839      	ldr	r1, [r7, #0]
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f000 fc13 	bl	8010098 <USBD_CtlError>
              break;
 800f872:	e000      	b.n	800f876 <USBD_StdEPReq+0x154>
              break;
 800f874:	bf00      	nop
          }
          break;
 800f876:	e0ab      	b.n	800f9d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	2b02      	cmp	r3, #2
 800f882:	d002      	beq.n	800f88a <USBD_StdEPReq+0x168>
 800f884:	2b03      	cmp	r3, #3
 800f886:	d032      	beq.n	800f8ee <USBD_StdEPReq+0x1cc>
 800f888:	e097      	b.n	800f9ba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f88a:	7bbb      	ldrb	r3, [r7, #14]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d007      	beq.n	800f8a0 <USBD_StdEPReq+0x17e>
 800f890:	7bbb      	ldrb	r3, [r7, #14]
 800f892:	2b80      	cmp	r3, #128	@ 0x80
 800f894:	d004      	beq.n	800f8a0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f896:	6839      	ldr	r1, [r7, #0]
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f000 fbfd 	bl	8010098 <USBD_CtlError>
                break;
 800f89e:	e091      	b.n	800f9c4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	da0b      	bge.n	800f8c0 <USBD_StdEPReq+0x19e>
 800f8a8:	7bbb      	ldrb	r3, [r7, #14]
 800f8aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f8ae:	4613      	mov	r3, r2
 800f8b0:	009b      	lsls	r3, r3, #2
 800f8b2:	4413      	add	r3, r2
 800f8b4:	009b      	lsls	r3, r3, #2
 800f8b6:	3310      	adds	r3, #16
 800f8b8:	687a      	ldr	r2, [r7, #4]
 800f8ba:	4413      	add	r3, r2
 800f8bc:	3304      	adds	r3, #4
 800f8be:	e00b      	b.n	800f8d8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f8c0:	7bbb      	ldrb	r3, [r7, #14]
 800f8c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8c6:	4613      	mov	r3, r2
 800f8c8:	009b      	lsls	r3, r3, #2
 800f8ca:	4413      	add	r3, r2
 800f8cc:	009b      	lsls	r3, r3, #2
 800f8ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	4413      	add	r3, r2
 800f8d6:	3304      	adds	r3, #4
 800f8d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	2202      	movs	r2, #2
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f000 fc47 	bl	801017a <USBD_CtlSendData>
              break;
 800f8ec:	e06a      	b.n	800f9c4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f8ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	da11      	bge.n	800f91a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f8f6:	7bbb      	ldrb	r3, [r7, #14]
 800f8f8:	f003 020f 	and.w	r2, r3, #15
 800f8fc:	6879      	ldr	r1, [r7, #4]
 800f8fe:	4613      	mov	r3, r2
 800f900:	009b      	lsls	r3, r3, #2
 800f902:	4413      	add	r3, r2
 800f904:	009b      	lsls	r3, r3, #2
 800f906:	440b      	add	r3, r1
 800f908:	3324      	adds	r3, #36	@ 0x24
 800f90a:	881b      	ldrh	r3, [r3, #0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d117      	bne.n	800f940 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f910:	6839      	ldr	r1, [r7, #0]
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 fbc0 	bl	8010098 <USBD_CtlError>
                  break;
 800f918:	e054      	b.n	800f9c4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f91a:	7bbb      	ldrb	r3, [r7, #14]
 800f91c:	f003 020f 	and.w	r2, r3, #15
 800f920:	6879      	ldr	r1, [r7, #4]
 800f922:	4613      	mov	r3, r2
 800f924:	009b      	lsls	r3, r3, #2
 800f926:	4413      	add	r3, r2
 800f928:	009b      	lsls	r3, r3, #2
 800f92a:	440b      	add	r3, r1
 800f92c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f930:	881b      	ldrh	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d104      	bne.n	800f940 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f936:	6839      	ldr	r1, [r7, #0]
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 fbad 	bl	8010098 <USBD_CtlError>
                  break;
 800f93e:	e041      	b.n	800f9c4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f944:	2b00      	cmp	r3, #0
 800f946:	da0b      	bge.n	800f960 <USBD_StdEPReq+0x23e>
 800f948:	7bbb      	ldrb	r3, [r7, #14]
 800f94a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f94e:	4613      	mov	r3, r2
 800f950:	009b      	lsls	r3, r3, #2
 800f952:	4413      	add	r3, r2
 800f954:	009b      	lsls	r3, r3, #2
 800f956:	3310      	adds	r3, #16
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	4413      	add	r3, r2
 800f95c:	3304      	adds	r3, #4
 800f95e:	e00b      	b.n	800f978 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f960:	7bbb      	ldrb	r3, [r7, #14]
 800f962:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f966:	4613      	mov	r3, r2
 800f968:	009b      	lsls	r3, r3, #2
 800f96a:	4413      	add	r3, r2
 800f96c:	009b      	lsls	r3, r3, #2
 800f96e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f972:	687a      	ldr	r2, [r7, #4]
 800f974:	4413      	add	r3, r2
 800f976:	3304      	adds	r3, #4
 800f978:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f97a:	7bbb      	ldrb	r3, [r7, #14]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d002      	beq.n	800f986 <USBD_StdEPReq+0x264>
 800f980:	7bbb      	ldrb	r3, [r7, #14]
 800f982:	2b80      	cmp	r3, #128	@ 0x80
 800f984:	d103      	bne.n	800f98e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	2200      	movs	r2, #0
 800f98a:	601a      	str	r2, [r3, #0]
 800f98c:	e00e      	b.n	800f9ac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f98e:	7bbb      	ldrb	r3, [r7, #14]
 800f990:	4619      	mov	r1, r3
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f001 f85c 	bl	8010a50 <USBD_LL_IsStallEP>
 800f998:	4603      	mov	r3, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d003      	beq.n	800f9a6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	2201      	movs	r2, #1
 800f9a2:	601a      	str	r2, [r3, #0]
 800f9a4:	e002      	b.n	800f9ac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	2202      	movs	r2, #2
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f000 fbe1 	bl	801017a <USBD_CtlSendData>
              break;
 800f9b8:	e004      	b.n	800f9c4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f9ba:	6839      	ldr	r1, [r7, #0]
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f000 fb6b 	bl	8010098 <USBD_CtlError>
              break;
 800f9c2:	bf00      	nop
          }
          break;
 800f9c4:	e004      	b.n	800f9d0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f9c6:	6839      	ldr	r1, [r7, #0]
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f000 fb65 	bl	8010098 <USBD_CtlError>
          break;
 800f9ce:	bf00      	nop
      }
      break;
 800f9d0:	e004      	b.n	800f9dc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f9d2:	6839      	ldr	r1, [r7, #0]
 800f9d4:	6878      	ldr	r0, [r7, #4]
 800f9d6:	f000 fb5f 	bl	8010098 <USBD_CtlError>
      break;
 800f9da:	bf00      	nop
  }

  return ret;
 800f9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3710      	adds	r7, #16
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
	...

0800f9e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b084      	sub	sp, #16
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	885b      	ldrh	r3, [r3, #2]
 800fa02:	0a1b      	lsrs	r3, r3, #8
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	3b01      	subs	r3, #1
 800fa08:	2b0e      	cmp	r3, #14
 800fa0a:	f200 8152 	bhi.w	800fcb2 <USBD_GetDescriptor+0x2ca>
 800fa0e:	a201      	add	r2, pc, #4	@ (adr r2, 800fa14 <USBD_GetDescriptor+0x2c>)
 800fa10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa14:	0800fa85 	.word	0x0800fa85
 800fa18:	0800fa9d 	.word	0x0800fa9d
 800fa1c:	0800fadd 	.word	0x0800fadd
 800fa20:	0800fcb3 	.word	0x0800fcb3
 800fa24:	0800fcb3 	.word	0x0800fcb3
 800fa28:	0800fc53 	.word	0x0800fc53
 800fa2c:	0800fc7f 	.word	0x0800fc7f
 800fa30:	0800fcb3 	.word	0x0800fcb3
 800fa34:	0800fcb3 	.word	0x0800fcb3
 800fa38:	0800fcb3 	.word	0x0800fcb3
 800fa3c:	0800fcb3 	.word	0x0800fcb3
 800fa40:	0800fcb3 	.word	0x0800fcb3
 800fa44:	0800fcb3 	.word	0x0800fcb3
 800fa48:	0800fcb3 	.word	0x0800fcb3
 800fa4c:	0800fa51 	.word	0x0800fa51
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa56:	69db      	ldr	r3, [r3, #28]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d00b      	beq.n	800fa74 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa62:	69db      	ldr	r3, [r3, #28]
 800fa64:	687a      	ldr	r2, [r7, #4]
 800fa66:	7c12      	ldrb	r2, [r2, #16]
 800fa68:	f107 0108 	add.w	r1, r7, #8
 800fa6c:	4610      	mov	r0, r2
 800fa6e:	4798      	blx	r3
 800fa70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fa72:	e126      	b.n	800fcc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fa74:	6839      	ldr	r1, [r7, #0]
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f000 fb0e 	bl	8010098 <USBD_CtlError>
        err++;
 800fa7c:	7afb      	ldrb	r3, [r7, #11]
 800fa7e:	3301      	adds	r3, #1
 800fa80:	72fb      	strb	r3, [r7, #11]
      break;
 800fa82:	e11e      	b.n	800fcc2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	7c12      	ldrb	r2, [r2, #16]
 800fa90:	f107 0108 	add.w	r1, r7, #8
 800fa94:	4610      	mov	r0, r2
 800fa96:	4798      	blx	r3
 800fa98:	60f8      	str	r0, [r7, #12]
      break;
 800fa9a:	e112      	b.n	800fcc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	7c1b      	ldrb	r3, [r3, #16]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d10d      	bne.n	800fac0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800faaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faac:	f107 0208 	add.w	r2, r7, #8
 800fab0:	4610      	mov	r0, r2
 800fab2:	4798      	blx	r3
 800fab4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	3301      	adds	r3, #1
 800faba:	2202      	movs	r2, #2
 800fabc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fabe:	e100      	b.n	800fcc2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fac8:	f107 0208 	add.w	r2, r7, #8
 800facc:	4610      	mov	r0, r2
 800face:	4798      	blx	r3
 800fad0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	3301      	adds	r3, #1
 800fad6:	2202      	movs	r2, #2
 800fad8:	701a      	strb	r2, [r3, #0]
      break;
 800fada:	e0f2      	b.n	800fcc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	885b      	ldrh	r3, [r3, #2]
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	2b05      	cmp	r3, #5
 800fae4:	f200 80ac 	bhi.w	800fc40 <USBD_GetDescriptor+0x258>
 800fae8:	a201      	add	r2, pc, #4	@ (adr r2, 800faf0 <USBD_GetDescriptor+0x108>)
 800faea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faee:	bf00      	nop
 800faf0:	0800fb09 	.word	0x0800fb09
 800faf4:	0800fb3d 	.word	0x0800fb3d
 800faf8:	0800fb71 	.word	0x0800fb71
 800fafc:	0800fba5 	.word	0x0800fba5
 800fb00:	0800fbd9 	.word	0x0800fbd9
 800fb04:	0800fc0d 	.word	0x0800fc0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d00b      	beq.n	800fb2c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	687a      	ldr	r2, [r7, #4]
 800fb1e:	7c12      	ldrb	r2, [r2, #16]
 800fb20:	f107 0108 	add.w	r1, r7, #8
 800fb24:	4610      	mov	r0, r2
 800fb26:	4798      	blx	r3
 800fb28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb2a:	e091      	b.n	800fc50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fb2c:	6839      	ldr	r1, [r7, #0]
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f000 fab2 	bl	8010098 <USBD_CtlError>
            err++;
 800fb34:	7afb      	ldrb	r3, [r7, #11]
 800fb36:	3301      	adds	r3, #1
 800fb38:	72fb      	strb	r3, [r7, #11]
          break;
 800fb3a:	e089      	b.n	800fc50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb42:	689b      	ldr	r3, [r3, #8]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d00b      	beq.n	800fb60 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb4e:	689b      	ldr	r3, [r3, #8]
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	7c12      	ldrb	r2, [r2, #16]
 800fb54:	f107 0108 	add.w	r1, r7, #8
 800fb58:	4610      	mov	r0, r2
 800fb5a:	4798      	blx	r3
 800fb5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb5e:	e077      	b.n	800fc50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fb60:	6839      	ldr	r1, [r7, #0]
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 fa98 	bl	8010098 <USBD_CtlError>
            err++;
 800fb68:	7afb      	ldrb	r3, [r7, #11]
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	72fb      	strb	r3, [r7, #11]
          break;
 800fb6e:	e06f      	b.n	800fc50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d00b      	beq.n	800fb94 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	687a      	ldr	r2, [r7, #4]
 800fb86:	7c12      	ldrb	r2, [r2, #16]
 800fb88:	f107 0108 	add.w	r1, r7, #8
 800fb8c:	4610      	mov	r0, r2
 800fb8e:	4798      	blx	r3
 800fb90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb92:	e05d      	b.n	800fc50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fb94:	6839      	ldr	r1, [r7, #0]
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f000 fa7e 	bl	8010098 <USBD_CtlError>
            err++;
 800fb9c:	7afb      	ldrb	r3, [r7, #11]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	72fb      	strb	r3, [r7, #11]
          break;
 800fba2:	e055      	b.n	800fc50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbaa:	691b      	ldr	r3, [r3, #16]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d00b      	beq.n	800fbc8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbb6:	691b      	ldr	r3, [r3, #16]
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	7c12      	ldrb	r2, [r2, #16]
 800fbbc:	f107 0108 	add.w	r1, r7, #8
 800fbc0:	4610      	mov	r0, r2
 800fbc2:	4798      	blx	r3
 800fbc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbc6:	e043      	b.n	800fc50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fbc8:	6839      	ldr	r1, [r7, #0]
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 fa64 	bl	8010098 <USBD_CtlError>
            err++;
 800fbd0:	7afb      	ldrb	r3, [r7, #11]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	72fb      	strb	r3, [r7, #11]
          break;
 800fbd6:	e03b      	b.n	800fc50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbde:	695b      	ldr	r3, [r3, #20]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d00b      	beq.n	800fbfc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbea:	695b      	ldr	r3, [r3, #20]
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	7c12      	ldrb	r2, [r2, #16]
 800fbf0:	f107 0108 	add.w	r1, r7, #8
 800fbf4:	4610      	mov	r0, r2
 800fbf6:	4798      	blx	r3
 800fbf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbfa:	e029      	b.n	800fc50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fbfc:	6839      	ldr	r1, [r7, #0]
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f000 fa4a 	bl	8010098 <USBD_CtlError>
            err++;
 800fc04:	7afb      	ldrb	r3, [r7, #11]
 800fc06:	3301      	adds	r3, #1
 800fc08:	72fb      	strb	r3, [r7, #11]
          break;
 800fc0a:	e021      	b.n	800fc50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc12:	699b      	ldr	r3, [r3, #24]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d00b      	beq.n	800fc30 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc1e:	699b      	ldr	r3, [r3, #24]
 800fc20:	687a      	ldr	r2, [r7, #4]
 800fc22:	7c12      	ldrb	r2, [r2, #16]
 800fc24:	f107 0108 	add.w	r1, r7, #8
 800fc28:	4610      	mov	r0, r2
 800fc2a:	4798      	blx	r3
 800fc2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc2e:	e00f      	b.n	800fc50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc30:	6839      	ldr	r1, [r7, #0]
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f000 fa30 	bl	8010098 <USBD_CtlError>
            err++;
 800fc38:	7afb      	ldrb	r3, [r7, #11]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	72fb      	strb	r3, [r7, #11]
          break;
 800fc3e:	e007      	b.n	800fc50 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fc40:	6839      	ldr	r1, [r7, #0]
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f000 fa28 	bl	8010098 <USBD_CtlError>
          err++;
 800fc48:	7afb      	ldrb	r3, [r7, #11]
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800fc4e:	bf00      	nop
      }
      break;
 800fc50:	e037      	b.n	800fcc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	7c1b      	ldrb	r3, [r3, #16]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d109      	bne.n	800fc6e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc62:	f107 0208 	add.w	r2, r7, #8
 800fc66:	4610      	mov	r0, r2
 800fc68:	4798      	blx	r3
 800fc6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc6c:	e029      	b.n	800fcc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fc6e:	6839      	ldr	r1, [r7, #0]
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f000 fa11 	bl	8010098 <USBD_CtlError>
        err++;
 800fc76:	7afb      	ldrb	r3, [r7, #11]
 800fc78:	3301      	adds	r3, #1
 800fc7a:	72fb      	strb	r3, [r7, #11]
      break;
 800fc7c:	e021      	b.n	800fcc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	7c1b      	ldrb	r3, [r3, #16]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d10d      	bne.n	800fca2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc8e:	f107 0208 	add.w	r2, r7, #8
 800fc92:	4610      	mov	r0, r2
 800fc94:	4798      	blx	r3
 800fc96:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	2207      	movs	r2, #7
 800fc9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fca0:	e00f      	b.n	800fcc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fca2:	6839      	ldr	r1, [r7, #0]
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f000 f9f7 	bl	8010098 <USBD_CtlError>
        err++;
 800fcaa:	7afb      	ldrb	r3, [r7, #11]
 800fcac:	3301      	adds	r3, #1
 800fcae:	72fb      	strb	r3, [r7, #11]
      break;
 800fcb0:	e007      	b.n	800fcc2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fcb2:	6839      	ldr	r1, [r7, #0]
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f000 f9ef 	bl	8010098 <USBD_CtlError>
      err++;
 800fcba:	7afb      	ldrb	r3, [r7, #11]
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	72fb      	strb	r3, [r7, #11]
      break;
 800fcc0:	bf00      	nop
  }

  if (err != 0U)
 800fcc2:	7afb      	ldrb	r3, [r7, #11]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d11e      	bne.n	800fd06 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	88db      	ldrh	r3, [r3, #6]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d016      	beq.n	800fcfe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fcd0:	893b      	ldrh	r3, [r7, #8]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d00e      	beq.n	800fcf4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	88da      	ldrh	r2, [r3, #6]
 800fcda:	893b      	ldrh	r3, [r7, #8]
 800fcdc:	4293      	cmp	r3, r2
 800fcde:	bf28      	it	cs
 800fce0:	4613      	movcs	r3, r2
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fce6:	893b      	ldrh	r3, [r7, #8]
 800fce8:	461a      	mov	r2, r3
 800fcea:	68f9      	ldr	r1, [r7, #12]
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f000 fa44 	bl	801017a <USBD_CtlSendData>
 800fcf2:	e009      	b.n	800fd08 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fcf4:	6839      	ldr	r1, [r7, #0]
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f000 f9ce 	bl	8010098 <USBD_CtlError>
 800fcfc:	e004      	b.n	800fd08 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 fa95 	bl	801022e <USBD_CtlSendStatus>
 800fd04:	e000      	b.n	800fd08 <USBD_GetDescriptor+0x320>
    return;
 800fd06:	bf00      	nop
  }
}
 800fd08:	3710      	adds	r7, #16
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
 800fd0e:	bf00      	nop

0800fd10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	889b      	ldrh	r3, [r3, #4]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d131      	bne.n	800fd86 <USBD_SetAddress+0x76>
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	88db      	ldrh	r3, [r3, #6]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d12d      	bne.n	800fd86 <USBD_SetAddress+0x76>
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	885b      	ldrh	r3, [r3, #2]
 800fd2e:	2b7f      	cmp	r3, #127	@ 0x7f
 800fd30:	d829      	bhi.n	800fd86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	885b      	ldrh	r3, [r3, #2]
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fd3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd44:	b2db      	uxtb	r3, r3
 800fd46:	2b03      	cmp	r3, #3
 800fd48:	d104      	bne.n	800fd54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fd4a:	6839      	ldr	r1, [r7, #0]
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f000 f9a3 	bl	8010098 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd52:	e01d      	b.n	800fd90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	7bfa      	ldrb	r2, [r7, #15]
 800fd58:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fd5c:	7bfb      	ldrb	r3, [r7, #15]
 800fd5e:	4619      	mov	r1, r3
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 fea1 	bl	8010aa8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 fa61 	bl	801022e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fd6c:	7bfb      	ldrb	r3, [r7, #15]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d004      	beq.n	800fd7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2202      	movs	r2, #2
 800fd76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd7a:	e009      	b.n	800fd90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2201      	movs	r2, #1
 800fd80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd84:	e004      	b.n	800fd90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fd86:	6839      	ldr	r1, [r7, #0]
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f000 f985 	bl	8010098 <USBD_CtlError>
  }
}
 800fd8e:	bf00      	nop
 800fd90:	bf00      	nop
 800fd92:	3710      	adds	r7, #16
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b084      	sub	sp, #16
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fda2:	2300      	movs	r3, #0
 800fda4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	885b      	ldrh	r3, [r3, #2]
 800fdaa:	b2da      	uxtb	r2, r3
 800fdac:	4b4c      	ldr	r3, [pc, #304]	@ (800fee0 <USBD_SetConfig+0x148>)
 800fdae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fdb0:	4b4b      	ldr	r3, [pc, #300]	@ (800fee0 <USBD_SetConfig+0x148>)
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d905      	bls.n	800fdc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fdb8:	6839      	ldr	r1, [r7, #0]
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 f96c 	bl	8010098 <USBD_CtlError>
    return USBD_FAIL;
 800fdc0:	2303      	movs	r3, #3
 800fdc2:	e088      	b.n	800fed6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fdca:	b2db      	uxtb	r3, r3
 800fdcc:	2b02      	cmp	r3, #2
 800fdce:	d002      	beq.n	800fdd6 <USBD_SetConfig+0x3e>
 800fdd0:	2b03      	cmp	r3, #3
 800fdd2:	d025      	beq.n	800fe20 <USBD_SetConfig+0x88>
 800fdd4:	e071      	b.n	800feba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fdd6:	4b42      	ldr	r3, [pc, #264]	@ (800fee0 <USBD_SetConfig+0x148>)
 800fdd8:	781b      	ldrb	r3, [r3, #0]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d01c      	beq.n	800fe18 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800fdde:	4b40      	ldr	r3, [pc, #256]	@ (800fee0 <USBD_SetConfig+0x148>)
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	461a      	mov	r2, r3
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fde8:	4b3d      	ldr	r3, [pc, #244]	@ (800fee0 <USBD_SetConfig+0x148>)
 800fdea:	781b      	ldrb	r3, [r3, #0]
 800fdec:	4619      	mov	r1, r3
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f7ff f992 	bl	800f118 <USBD_SetClassConfig>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fdf8:	7bfb      	ldrb	r3, [r7, #15]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d004      	beq.n	800fe08 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800fdfe:	6839      	ldr	r1, [r7, #0]
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 f949 	bl	8010098 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fe06:	e065      	b.n	800fed4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f000 fa10 	bl	801022e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2203      	movs	r2, #3
 800fe12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fe16:	e05d      	b.n	800fed4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f000 fa08 	bl	801022e <USBD_CtlSendStatus>
      break;
 800fe1e:	e059      	b.n	800fed4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fe20:	4b2f      	ldr	r3, [pc, #188]	@ (800fee0 <USBD_SetConfig+0x148>)
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d112      	bne.n	800fe4e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2202      	movs	r2, #2
 800fe2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fe30:	4b2b      	ldr	r3, [pc, #172]	@ (800fee0 <USBD_SetConfig+0x148>)
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	461a      	mov	r2, r3
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fe3a:	4b29      	ldr	r3, [pc, #164]	@ (800fee0 <USBD_SetConfig+0x148>)
 800fe3c:	781b      	ldrb	r3, [r3, #0]
 800fe3e:	4619      	mov	r1, r3
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f7ff f985 	bl	800f150 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f000 f9f1 	bl	801022e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fe4c:	e042      	b.n	800fed4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800fe4e:	4b24      	ldr	r3, [pc, #144]	@ (800fee0 <USBD_SetConfig+0x148>)
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	461a      	mov	r2, r3
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d02a      	beq.n	800feb2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	685b      	ldr	r3, [r3, #4]
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	4619      	mov	r1, r3
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f7ff f973 	bl	800f150 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fe6a:	4b1d      	ldr	r3, [pc, #116]	@ (800fee0 <USBD_SetConfig+0x148>)
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	461a      	mov	r2, r3
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fe74:	4b1a      	ldr	r3, [pc, #104]	@ (800fee0 <USBD_SetConfig+0x148>)
 800fe76:	781b      	ldrb	r3, [r3, #0]
 800fe78:	4619      	mov	r1, r3
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f7ff f94c 	bl	800f118 <USBD_SetClassConfig>
 800fe80:	4603      	mov	r3, r0
 800fe82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fe84:	7bfb      	ldrb	r3, [r7, #15]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d00f      	beq.n	800feaa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800fe8a:	6839      	ldr	r1, [r7, #0]
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f000 f903 	bl	8010098 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	b2db      	uxtb	r3, r3
 800fe98:	4619      	mov	r1, r3
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f7ff f958 	bl	800f150 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2202      	movs	r2, #2
 800fea4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fea8:	e014      	b.n	800fed4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	f000 f9bf 	bl	801022e <USBD_CtlSendStatus>
      break;
 800feb0:	e010      	b.n	800fed4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f000 f9bb 	bl	801022e <USBD_CtlSendStatus>
      break;
 800feb8:	e00c      	b.n	800fed4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800feba:	6839      	ldr	r1, [r7, #0]
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f000 f8eb 	bl	8010098 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fec2:	4b07      	ldr	r3, [pc, #28]	@ (800fee0 <USBD_SetConfig+0x148>)
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	4619      	mov	r1, r3
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f7ff f941 	bl	800f150 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fece:	2303      	movs	r3, #3
 800fed0:	73fb      	strb	r3, [r7, #15]
      break;
 800fed2:	bf00      	nop
  }

  return ret;
 800fed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3710      	adds	r7, #16
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	bf00      	nop
 800fee0:	20000e34 	.word	0x20000e34

0800fee4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	88db      	ldrh	r3, [r3, #6]
 800fef2:	2b01      	cmp	r3, #1
 800fef4:	d004      	beq.n	800ff00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fef6:	6839      	ldr	r1, [r7, #0]
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f000 f8cd 	bl	8010098 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fefe:	e023      	b.n	800ff48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff06:	b2db      	uxtb	r3, r3
 800ff08:	2b02      	cmp	r3, #2
 800ff0a:	dc02      	bgt.n	800ff12 <USBD_GetConfig+0x2e>
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	dc03      	bgt.n	800ff18 <USBD_GetConfig+0x34>
 800ff10:	e015      	b.n	800ff3e <USBD_GetConfig+0x5a>
 800ff12:	2b03      	cmp	r3, #3
 800ff14:	d00b      	beq.n	800ff2e <USBD_GetConfig+0x4a>
 800ff16:	e012      	b.n	800ff3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	3308      	adds	r3, #8
 800ff22:	2201      	movs	r2, #1
 800ff24:	4619      	mov	r1, r3
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f000 f927 	bl	801017a <USBD_CtlSendData>
        break;
 800ff2c:	e00c      	b.n	800ff48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	3304      	adds	r3, #4
 800ff32:	2201      	movs	r2, #1
 800ff34:	4619      	mov	r1, r3
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f000 f91f 	bl	801017a <USBD_CtlSendData>
        break;
 800ff3c:	e004      	b.n	800ff48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ff3e:	6839      	ldr	r1, [r7, #0]
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f000 f8a9 	bl	8010098 <USBD_CtlError>
        break;
 800ff46:	bf00      	nop
}
 800ff48:	bf00      	nop
 800ff4a:	3708      	adds	r7, #8
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff60:	b2db      	uxtb	r3, r3
 800ff62:	3b01      	subs	r3, #1
 800ff64:	2b02      	cmp	r3, #2
 800ff66:	d81e      	bhi.n	800ffa6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	88db      	ldrh	r3, [r3, #6]
 800ff6c:	2b02      	cmp	r3, #2
 800ff6e:	d004      	beq.n	800ff7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ff70:	6839      	ldr	r1, [r7, #0]
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f000 f890 	bl	8010098 <USBD_CtlError>
        break;
 800ff78:	e01a      	b.n	800ffb0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d005      	beq.n	800ff96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	68db      	ldr	r3, [r3, #12]
 800ff8e:	f043 0202 	orr.w	r2, r3, #2
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	330c      	adds	r3, #12
 800ff9a:	2202      	movs	r2, #2
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f000 f8eb 	bl	801017a <USBD_CtlSendData>
      break;
 800ffa4:	e004      	b.n	800ffb0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ffa6:	6839      	ldr	r1, [r7, #0]
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f000 f875 	bl	8010098 <USBD_CtlError>
      break;
 800ffae:	bf00      	nop
  }
}
 800ffb0:	bf00      	nop
 800ffb2:	3708      	adds	r7, #8
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}

0800ffb8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b082      	sub	sp, #8
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
 800ffc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	885b      	ldrh	r3, [r3, #2]
 800ffc6:	2b01      	cmp	r3, #1
 800ffc8:	d106      	bne.n	800ffd8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2201      	movs	r2, #1
 800ffce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 f92b 	bl	801022e <USBD_CtlSendStatus>
  }
}
 800ffd8:	bf00      	nop
 800ffda:	3708      	adds	r7, #8
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fff0:	b2db      	uxtb	r3, r3
 800fff2:	3b01      	subs	r3, #1
 800fff4:	2b02      	cmp	r3, #2
 800fff6:	d80b      	bhi.n	8010010 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	885b      	ldrh	r3, [r3, #2]
 800fffc:	2b01      	cmp	r3, #1
 800fffe:	d10c      	bne.n	801001a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2200      	movs	r2, #0
 8010004:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f000 f910 	bl	801022e <USBD_CtlSendStatus>
      }
      break;
 801000e:	e004      	b.n	801001a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010010:	6839      	ldr	r1, [r7, #0]
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f000 f840 	bl	8010098 <USBD_CtlError>
      break;
 8010018:	e000      	b.n	801001c <USBD_ClrFeature+0x3c>
      break;
 801001a:	bf00      	nop
  }
}
 801001c:	bf00      	nop
 801001e:	3708      	adds	r7, #8
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}

08010024 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	781a      	ldrb	r2, [r3, #0]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	3301      	adds	r3, #1
 801003e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	781a      	ldrb	r2, [r3, #0]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	3301      	adds	r3, #1
 801004c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801004e:	68f8      	ldr	r0, [r7, #12]
 8010050:	f7ff fa92 	bl	800f578 <SWAPBYTE>
 8010054:	4603      	mov	r3, r0
 8010056:	461a      	mov	r2, r3
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	3301      	adds	r3, #1
 8010060:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	3301      	adds	r3, #1
 8010066:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010068:	68f8      	ldr	r0, [r7, #12]
 801006a:	f7ff fa85 	bl	800f578 <SWAPBYTE>
 801006e:	4603      	mov	r3, r0
 8010070:	461a      	mov	r2, r3
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	3301      	adds	r3, #1
 801007a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	3301      	adds	r3, #1
 8010080:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010082:	68f8      	ldr	r0, [r7, #12]
 8010084:	f7ff fa78 	bl	800f578 <SWAPBYTE>
 8010088:	4603      	mov	r3, r0
 801008a:	461a      	mov	r2, r3
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	80da      	strh	r2, [r3, #6]
}
 8010090:	bf00      	nop
 8010092:	3710      	adds	r7, #16
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}

08010098 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b082      	sub	sp, #8
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80100a2:	2180      	movs	r1, #128	@ 0x80
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 fc95 	bl	80109d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80100aa:	2100      	movs	r1, #0
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f000 fc91 	bl	80109d4 <USBD_LL_StallEP>
}
 80100b2:	bf00      	nop
 80100b4:	3708      	adds	r7, #8
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}

080100ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80100ba:	b580      	push	{r7, lr}
 80100bc:	b086      	sub	sp, #24
 80100be:	af00      	add	r7, sp, #0
 80100c0:	60f8      	str	r0, [r7, #12]
 80100c2:	60b9      	str	r1, [r7, #8]
 80100c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80100c6:	2300      	movs	r3, #0
 80100c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d036      	beq.n	801013e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80100d4:	6938      	ldr	r0, [r7, #16]
 80100d6:	f000 f836 	bl	8010146 <USBD_GetLen>
 80100da:	4603      	mov	r3, r0
 80100dc:	3301      	adds	r3, #1
 80100de:	b29b      	uxth	r3, r3
 80100e0:	005b      	lsls	r3, r3, #1
 80100e2:	b29a      	uxth	r2, r3
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80100e8:	7dfb      	ldrb	r3, [r7, #23]
 80100ea:	68ba      	ldr	r2, [r7, #8]
 80100ec:	4413      	add	r3, r2
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	7812      	ldrb	r2, [r2, #0]
 80100f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80100f4:	7dfb      	ldrb	r3, [r7, #23]
 80100f6:	3301      	adds	r3, #1
 80100f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80100fa:	7dfb      	ldrb	r3, [r7, #23]
 80100fc:	68ba      	ldr	r2, [r7, #8]
 80100fe:	4413      	add	r3, r2
 8010100:	2203      	movs	r2, #3
 8010102:	701a      	strb	r2, [r3, #0]
  idx++;
 8010104:	7dfb      	ldrb	r3, [r7, #23]
 8010106:	3301      	adds	r3, #1
 8010108:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801010a:	e013      	b.n	8010134 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801010c:	7dfb      	ldrb	r3, [r7, #23]
 801010e:	68ba      	ldr	r2, [r7, #8]
 8010110:	4413      	add	r3, r2
 8010112:	693a      	ldr	r2, [r7, #16]
 8010114:	7812      	ldrb	r2, [r2, #0]
 8010116:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	3301      	adds	r3, #1
 801011c:	613b      	str	r3, [r7, #16]
    idx++;
 801011e:	7dfb      	ldrb	r3, [r7, #23]
 8010120:	3301      	adds	r3, #1
 8010122:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010124:	7dfb      	ldrb	r3, [r7, #23]
 8010126:	68ba      	ldr	r2, [r7, #8]
 8010128:	4413      	add	r3, r2
 801012a:	2200      	movs	r2, #0
 801012c:	701a      	strb	r2, [r3, #0]
    idx++;
 801012e:	7dfb      	ldrb	r3, [r7, #23]
 8010130:	3301      	adds	r3, #1
 8010132:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	781b      	ldrb	r3, [r3, #0]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d1e7      	bne.n	801010c <USBD_GetString+0x52>
 801013c:	e000      	b.n	8010140 <USBD_GetString+0x86>
    return;
 801013e:	bf00      	nop
  }
}
 8010140:	3718      	adds	r7, #24
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}

08010146 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010146:	b480      	push	{r7}
 8010148:	b085      	sub	sp, #20
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801014e:	2300      	movs	r3, #0
 8010150:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010156:	e005      	b.n	8010164 <USBD_GetLen+0x1e>
  {
    len++;
 8010158:	7bfb      	ldrb	r3, [r7, #15]
 801015a:	3301      	adds	r3, #1
 801015c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	3301      	adds	r3, #1
 8010162:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d1f5      	bne.n	8010158 <USBD_GetLen+0x12>
  }

  return len;
 801016c:	7bfb      	ldrb	r3, [r7, #15]
}
 801016e:	4618      	mov	r0, r3
 8010170:	3714      	adds	r7, #20
 8010172:	46bd      	mov	sp, r7
 8010174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010178:	4770      	bx	lr

0801017a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801017a:	b580      	push	{r7, lr}
 801017c:	b084      	sub	sp, #16
 801017e:	af00      	add	r7, sp, #0
 8010180:	60f8      	str	r0, [r7, #12]
 8010182:	60b9      	str	r1, [r7, #8]
 8010184:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2202      	movs	r2, #2
 801018a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	687a      	ldr	r2, [r7, #4]
 8010192:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	687a      	ldr	r2, [r7, #4]
 8010198:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	68ba      	ldr	r2, [r7, #8]
 801019e:	2100      	movs	r1, #0
 80101a0:	68f8      	ldr	r0, [r7, #12]
 80101a2:	f000 fca0 	bl	8010ae6 <USBD_LL_Transmit>

  return USBD_OK;
 80101a6:	2300      	movs	r3, #0
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3710      	adds	r7, #16
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	60b9      	str	r1, [r7, #8]
 80101ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	68ba      	ldr	r2, [r7, #8]
 80101c0:	2100      	movs	r1, #0
 80101c2:	68f8      	ldr	r0, [r7, #12]
 80101c4:	f000 fc8f 	bl	8010ae6 <USBD_LL_Transmit>

  return USBD_OK;
 80101c8:	2300      	movs	r3, #0
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3710      	adds	r7, #16
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}

080101d2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80101d2:	b580      	push	{r7, lr}
 80101d4:	b084      	sub	sp, #16
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	60f8      	str	r0, [r7, #12]
 80101da:	60b9      	str	r1, [r7, #8]
 80101dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2203      	movs	r2, #3
 80101e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	687a      	ldr	r2, [r7, #4]
 80101ea:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	68ba      	ldr	r2, [r7, #8]
 80101fa:	2100      	movs	r1, #0
 80101fc:	68f8      	ldr	r0, [r7, #12]
 80101fe:	f000 fc93 	bl	8010b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010202:	2300      	movs	r3, #0
}
 8010204:	4618      	mov	r0, r3
 8010206:	3710      	adds	r7, #16
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}

0801020c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	af00      	add	r7, sp, #0
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	68ba      	ldr	r2, [r7, #8]
 801021c:	2100      	movs	r1, #0
 801021e:	68f8      	ldr	r0, [r7, #12]
 8010220:	f000 fc82 	bl	8010b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010224:	2300      	movs	r3, #0
}
 8010226:	4618      	mov	r0, r3
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801022e:	b580      	push	{r7, lr}
 8010230:	b082      	sub	sp, #8
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2204      	movs	r2, #4
 801023a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801023e:	2300      	movs	r3, #0
 8010240:	2200      	movs	r2, #0
 8010242:	2100      	movs	r1, #0
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f000 fc4e 	bl	8010ae6 <USBD_LL_Transmit>

  return USBD_OK;
 801024a:	2300      	movs	r3, #0
}
 801024c:	4618      	mov	r0, r3
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2205      	movs	r2, #5
 8010260:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010264:	2300      	movs	r3, #0
 8010266:	2200      	movs	r2, #0
 8010268:	2100      	movs	r1, #0
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f000 fc5c 	bl	8010b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010270:	2300      	movs	r3, #0
}
 8010272:	4618      	mov	r0, r3
 8010274:	3708      	adds	r7, #8
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}
	...

0801027c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010280:	2200      	movs	r2, #0
 8010282:	4912      	ldr	r1, [pc, #72]	@ (80102cc <MX_USB_Device_Init+0x50>)
 8010284:	4812      	ldr	r0, [pc, #72]	@ (80102d0 <MX_USB_Device_Init+0x54>)
 8010286:	f7fe fed9 	bl	800f03c <USBD_Init>
 801028a:	4603      	mov	r3, r0
 801028c:	2b00      	cmp	r3, #0
 801028e:	d001      	beq.n	8010294 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010290:	f7f2 f862 	bl	8002358 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010294:	490f      	ldr	r1, [pc, #60]	@ (80102d4 <MX_USB_Device_Init+0x58>)
 8010296:	480e      	ldr	r0, [pc, #56]	@ (80102d0 <MX_USB_Device_Init+0x54>)
 8010298:	f7fe ff00 	bl	800f09c <USBD_RegisterClass>
 801029c:	4603      	mov	r3, r0
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d001      	beq.n	80102a6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80102a2:	f7f2 f859 	bl	8002358 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80102a6:	490c      	ldr	r1, [pc, #48]	@ (80102d8 <MX_USB_Device_Init+0x5c>)
 80102a8:	4809      	ldr	r0, [pc, #36]	@ (80102d0 <MX_USB_Device_Init+0x54>)
 80102aa:	f7fe fe21 	bl	800eef0 <USBD_CDC_RegisterInterface>
 80102ae:	4603      	mov	r3, r0
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d001      	beq.n	80102b8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80102b4:	f7f2 f850 	bl	8002358 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80102b8:	4805      	ldr	r0, [pc, #20]	@ (80102d0 <MX_USB_Device_Init+0x54>)
 80102ba:	f7fe ff16 	bl	800f0ea <USBD_Start>
 80102be:	4603      	mov	r3, r0
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d001      	beq.n	80102c8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80102c4:	f7f2 f848 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80102c8:	bf00      	nop
 80102ca:	bd80      	pop	{r7, pc}
 80102cc:	2000014c 	.word	0x2000014c
 80102d0:	20000e38 	.word	0x20000e38
 80102d4:	20000034 	.word	0x20000034
 80102d8:	20000138 	.word	0x20000138

080102dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80102e0:	2200      	movs	r2, #0
 80102e2:	4905      	ldr	r1, [pc, #20]	@ (80102f8 <CDC_Init_FS+0x1c>)
 80102e4:	4805      	ldr	r0, [pc, #20]	@ (80102fc <CDC_Init_FS+0x20>)
 80102e6:	f7fe fe18 	bl	800ef1a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80102ea:	4905      	ldr	r1, [pc, #20]	@ (8010300 <CDC_Init_FS+0x24>)
 80102ec:	4803      	ldr	r0, [pc, #12]	@ (80102fc <CDC_Init_FS+0x20>)
 80102ee:	f7fe fe32 	bl	800ef56 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80102f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	bd80      	pop	{r7, pc}
 80102f8:	20001908 	.word	0x20001908
 80102fc:	20000e38 	.word	0x20000e38
 8010300:	20001108 	.word	0x20001108

08010304 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010304:	b480      	push	{r7}
 8010306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010308:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801030a:	4618      	mov	r0, r3
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr

08010314 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010314:	b480      	push	{r7}
 8010316:	b083      	sub	sp, #12
 8010318:	af00      	add	r7, sp, #0
 801031a:	4603      	mov	r3, r0
 801031c:	6039      	str	r1, [r7, #0]
 801031e:	71fb      	strb	r3, [r7, #7]
 8010320:	4613      	mov	r3, r2
 8010322:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010324:	79fb      	ldrb	r3, [r7, #7]
 8010326:	2b23      	cmp	r3, #35	@ 0x23
 8010328:	d84a      	bhi.n	80103c0 <CDC_Control_FS+0xac>
 801032a:	a201      	add	r2, pc, #4	@ (adr r2, 8010330 <CDC_Control_FS+0x1c>)
 801032c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010330:	080103c1 	.word	0x080103c1
 8010334:	080103c1 	.word	0x080103c1
 8010338:	080103c1 	.word	0x080103c1
 801033c:	080103c1 	.word	0x080103c1
 8010340:	080103c1 	.word	0x080103c1
 8010344:	080103c1 	.word	0x080103c1
 8010348:	080103c1 	.word	0x080103c1
 801034c:	080103c1 	.word	0x080103c1
 8010350:	080103c1 	.word	0x080103c1
 8010354:	080103c1 	.word	0x080103c1
 8010358:	080103c1 	.word	0x080103c1
 801035c:	080103c1 	.word	0x080103c1
 8010360:	080103c1 	.word	0x080103c1
 8010364:	080103c1 	.word	0x080103c1
 8010368:	080103c1 	.word	0x080103c1
 801036c:	080103c1 	.word	0x080103c1
 8010370:	080103c1 	.word	0x080103c1
 8010374:	080103c1 	.word	0x080103c1
 8010378:	080103c1 	.word	0x080103c1
 801037c:	080103c1 	.word	0x080103c1
 8010380:	080103c1 	.word	0x080103c1
 8010384:	080103c1 	.word	0x080103c1
 8010388:	080103c1 	.word	0x080103c1
 801038c:	080103c1 	.word	0x080103c1
 8010390:	080103c1 	.word	0x080103c1
 8010394:	080103c1 	.word	0x080103c1
 8010398:	080103c1 	.word	0x080103c1
 801039c:	080103c1 	.word	0x080103c1
 80103a0:	080103c1 	.word	0x080103c1
 80103a4:	080103c1 	.word	0x080103c1
 80103a8:	080103c1 	.word	0x080103c1
 80103ac:	080103c1 	.word	0x080103c1
 80103b0:	080103c1 	.word	0x080103c1
 80103b4:	080103c1 	.word	0x080103c1
 80103b8:	080103c1 	.word	0x080103c1
 80103bc:	080103c1 	.word	0x080103c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80103c0:	bf00      	nop
  }

  return (USBD_OK);
 80103c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	370c      	adds	r7, #12
 80103c8:	46bd      	mov	sp, r7
 80103ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ce:	4770      	bx	lr

080103d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b082      	sub	sp, #8
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80103da:	6879      	ldr	r1, [r7, #4]
 80103dc:	4805      	ldr	r0, [pc, #20]	@ (80103f4 <CDC_Receive_FS+0x24>)
 80103de:	f7fe fdba 	bl	800ef56 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80103e2:	4804      	ldr	r0, [pc, #16]	@ (80103f4 <CDC_Receive_FS+0x24>)
 80103e4:	f7fe fe00 	bl	800efe8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80103e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3708      	adds	r7, #8
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	20000e38 	.word	0x20000e38

080103f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b084      	sub	sp, #16
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	460b      	mov	r3, r1
 8010402:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010404:	2300      	movs	r3, #0
 8010406:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010408:	4b0d      	ldr	r3, [pc, #52]	@ (8010440 <CDC_Transmit_FS+0x48>)
 801040a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801040e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010416:	2b00      	cmp	r3, #0
 8010418:	d001      	beq.n	801041e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801041a:	2301      	movs	r3, #1
 801041c:	e00b      	b.n	8010436 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801041e:	887b      	ldrh	r3, [r7, #2]
 8010420:	461a      	mov	r2, r3
 8010422:	6879      	ldr	r1, [r7, #4]
 8010424:	4806      	ldr	r0, [pc, #24]	@ (8010440 <CDC_Transmit_FS+0x48>)
 8010426:	f7fe fd78 	bl	800ef1a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801042a:	4805      	ldr	r0, [pc, #20]	@ (8010440 <CDC_Transmit_FS+0x48>)
 801042c:	f7fe fdac 	bl	800ef88 <USBD_CDC_TransmitPacket>
 8010430:	4603      	mov	r3, r0
 8010432:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010434:	7bfb      	ldrb	r3, [r7, #15]
}
 8010436:	4618      	mov	r0, r3
 8010438:	3710      	adds	r7, #16
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}
 801043e:	bf00      	nop
 8010440:	20000e38 	.word	0x20000e38

08010444 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010444:	b480      	push	{r7}
 8010446:	b087      	sub	sp, #28
 8010448:	af00      	add	r7, sp, #0
 801044a:	60f8      	str	r0, [r7, #12]
 801044c:	60b9      	str	r1, [r7, #8]
 801044e:	4613      	mov	r3, r2
 8010450:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010452:	2300      	movs	r3, #0
 8010454:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010456:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801045a:	4618      	mov	r0, r3
 801045c:	371c      	adds	r7, #28
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr
	...

08010468 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010468:	b480      	push	{r7}
 801046a:	b083      	sub	sp, #12
 801046c:	af00      	add	r7, sp, #0
 801046e:	4603      	mov	r3, r0
 8010470:	6039      	str	r1, [r7, #0]
 8010472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	2212      	movs	r2, #18
 8010478:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801047a:	4b03      	ldr	r3, [pc, #12]	@ (8010488 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801047c:	4618      	mov	r0, r3
 801047e:	370c      	adds	r7, #12
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr
 8010488:	2000016c 	.word	0x2000016c

0801048c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
 8010492:	4603      	mov	r3, r0
 8010494:	6039      	str	r1, [r7, #0]
 8010496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	2204      	movs	r2, #4
 801049c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801049e:	4b03      	ldr	r3, [pc, #12]	@ (80104ac <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	370c      	adds	r7, #12
 80104a4:	46bd      	mov	sp, r7
 80104a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104aa:	4770      	bx	lr
 80104ac:	20000180 	.word	0x20000180

080104b0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b082      	sub	sp, #8
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	4603      	mov	r3, r0
 80104b8:	6039      	str	r1, [r7, #0]
 80104ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80104bc:	79fb      	ldrb	r3, [r7, #7]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d105      	bne.n	80104ce <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80104c2:	683a      	ldr	r2, [r7, #0]
 80104c4:	4907      	ldr	r1, [pc, #28]	@ (80104e4 <USBD_CDC_ProductStrDescriptor+0x34>)
 80104c6:	4808      	ldr	r0, [pc, #32]	@ (80104e8 <USBD_CDC_ProductStrDescriptor+0x38>)
 80104c8:	f7ff fdf7 	bl	80100ba <USBD_GetString>
 80104cc:	e004      	b.n	80104d8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80104ce:	683a      	ldr	r2, [r7, #0]
 80104d0:	4904      	ldr	r1, [pc, #16]	@ (80104e4 <USBD_CDC_ProductStrDescriptor+0x34>)
 80104d2:	4805      	ldr	r0, [pc, #20]	@ (80104e8 <USBD_CDC_ProductStrDescriptor+0x38>)
 80104d4:	f7ff fdf1 	bl	80100ba <USBD_GetString>
  }
  return USBD_StrDesc;
 80104d8:	4b02      	ldr	r3, [pc, #8]	@ (80104e4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3708      	adds	r7, #8
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	20002108 	.word	0x20002108
 80104e8:	08011d44 	.word	0x08011d44

080104ec <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	4603      	mov	r3, r0
 80104f4:	6039      	str	r1, [r7, #0]
 80104f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80104f8:	683a      	ldr	r2, [r7, #0]
 80104fa:	4904      	ldr	r1, [pc, #16]	@ (801050c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80104fc:	4804      	ldr	r0, [pc, #16]	@ (8010510 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80104fe:	f7ff fddc 	bl	80100ba <USBD_GetString>
  return USBD_StrDesc;
 8010502:	4b02      	ldr	r3, [pc, #8]	@ (801050c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8010504:	4618      	mov	r0, r3
 8010506:	3708      	adds	r7, #8
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}
 801050c:	20002108 	.word	0x20002108
 8010510:	08011d5c 	.word	0x08011d5c

08010514 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	4603      	mov	r3, r0
 801051c:	6039      	str	r1, [r7, #0]
 801051e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	221a      	movs	r2, #26
 8010524:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010526:	f000 f843 	bl	80105b0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801052a:	4b02      	ldr	r3, [pc, #8]	@ (8010534 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801052c:	4618      	mov	r0, r3
 801052e:	3708      	adds	r7, #8
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}
 8010534:	20000184 	.word	0x20000184

08010538 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	4603      	mov	r3, r0
 8010540:	6039      	str	r1, [r7, #0]
 8010542:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010544:	79fb      	ldrb	r3, [r7, #7]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d105      	bne.n	8010556 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801054a:	683a      	ldr	r2, [r7, #0]
 801054c:	4907      	ldr	r1, [pc, #28]	@ (801056c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801054e:	4808      	ldr	r0, [pc, #32]	@ (8010570 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010550:	f7ff fdb3 	bl	80100ba <USBD_GetString>
 8010554:	e004      	b.n	8010560 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010556:	683a      	ldr	r2, [r7, #0]
 8010558:	4904      	ldr	r1, [pc, #16]	@ (801056c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801055a:	4805      	ldr	r0, [pc, #20]	@ (8010570 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801055c:	f7ff fdad 	bl	80100ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8010560:	4b02      	ldr	r3, [pc, #8]	@ (801056c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8010562:	4618      	mov	r0, r3
 8010564:	3708      	adds	r7, #8
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
 801056a:	bf00      	nop
 801056c:	20002108 	.word	0x20002108
 8010570:	08011d70 	.word	0x08011d70

08010574 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	4603      	mov	r3, r0
 801057c:	6039      	str	r1, [r7, #0]
 801057e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010580:	79fb      	ldrb	r3, [r7, #7]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d105      	bne.n	8010592 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010586:	683a      	ldr	r2, [r7, #0]
 8010588:	4907      	ldr	r1, [pc, #28]	@ (80105a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801058a:	4808      	ldr	r0, [pc, #32]	@ (80105ac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801058c:	f7ff fd95 	bl	80100ba <USBD_GetString>
 8010590:	e004      	b.n	801059c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010592:	683a      	ldr	r2, [r7, #0]
 8010594:	4904      	ldr	r1, [pc, #16]	@ (80105a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010596:	4805      	ldr	r0, [pc, #20]	@ (80105ac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010598:	f7ff fd8f 	bl	80100ba <USBD_GetString>
  }
  return USBD_StrDesc;
 801059c:	4b02      	ldr	r3, [pc, #8]	@ (80105a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3708      	adds	r7, #8
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	20002108 	.word	0x20002108
 80105ac:	08011d7c 	.word	0x08011d7c

080105b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b084      	sub	sp, #16
 80105b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80105b6:	4b0f      	ldr	r3, [pc, #60]	@ (80105f4 <Get_SerialNum+0x44>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80105bc:	4b0e      	ldr	r3, [pc, #56]	@ (80105f8 <Get_SerialNum+0x48>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80105c2:	4b0e      	ldr	r3, [pc, #56]	@ (80105fc <Get_SerialNum+0x4c>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80105c8:	68fa      	ldr	r2, [r7, #12]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	4413      	add	r3, r2
 80105ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d009      	beq.n	80105ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80105d6:	2208      	movs	r2, #8
 80105d8:	4909      	ldr	r1, [pc, #36]	@ (8010600 <Get_SerialNum+0x50>)
 80105da:	68f8      	ldr	r0, [r7, #12]
 80105dc:	f000 f814 	bl	8010608 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80105e0:	2204      	movs	r2, #4
 80105e2:	4908      	ldr	r1, [pc, #32]	@ (8010604 <Get_SerialNum+0x54>)
 80105e4:	68b8      	ldr	r0, [r7, #8]
 80105e6:	f000 f80f 	bl	8010608 <IntToUnicode>
  }
}
 80105ea:	bf00      	nop
 80105ec:	3710      	adds	r7, #16
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}
 80105f2:	bf00      	nop
 80105f4:	1fff7590 	.word	0x1fff7590
 80105f8:	1fff7594 	.word	0x1fff7594
 80105fc:	1fff7598 	.word	0x1fff7598
 8010600:	20000186 	.word	0x20000186
 8010604:	20000196 	.word	0x20000196

08010608 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010608:	b480      	push	{r7}
 801060a:	b087      	sub	sp, #28
 801060c:	af00      	add	r7, sp, #0
 801060e:	60f8      	str	r0, [r7, #12]
 8010610:	60b9      	str	r1, [r7, #8]
 8010612:	4613      	mov	r3, r2
 8010614:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010616:	2300      	movs	r3, #0
 8010618:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801061a:	2300      	movs	r3, #0
 801061c:	75fb      	strb	r3, [r7, #23]
 801061e:	e027      	b.n	8010670 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	0f1b      	lsrs	r3, r3, #28
 8010624:	2b09      	cmp	r3, #9
 8010626:	d80b      	bhi.n	8010640 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	0f1b      	lsrs	r3, r3, #28
 801062c:	b2da      	uxtb	r2, r3
 801062e:	7dfb      	ldrb	r3, [r7, #23]
 8010630:	005b      	lsls	r3, r3, #1
 8010632:	4619      	mov	r1, r3
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	440b      	add	r3, r1
 8010638:	3230      	adds	r2, #48	@ 0x30
 801063a:	b2d2      	uxtb	r2, r2
 801063c:	701a      	strb	r2, [r3, #0]
 801063e:	e00a      	b.n	8010656 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	0f1b      	lsrs	r3, r3, #28
 8010644:	b2da      	uxtb	r2, r3
 8010646:	7dfb      	ldrb	r3, [r7, #23]
 8010648:	005b      	lsls	r3, r3, #1
 801064a:	4619      	mov	r1, r3
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	440b      	add	r3, r1
 8010650:	3237      	adds	r2, #55	@ 0x37
 8010652:	b2d2      	uxtb	r2, r2
 8010654:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	011b      	lsls	r3, r3, #4
 801065a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801065c:	7dfb      	ldrb	r3, [r7, #23]
 801065e:	005b      	lsls	r3, r3, #1
 8010660:	3301      	adds	r3, #1
 8010662:	68ba      	ldr	r2, [r7, #8]
 8010664:	4413      	add	r3, r2
 8010666:	2200      	movs	r2, #0
 8010668:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801066a:	7dfb      	ldrb	r3, [r7, #23]
 801066c:	3301      	adds	r3, #1
 801066e:	75fb      	strb	r3, [r7, #23]
 8010670:	7dfa      	ldrb	r2, [r7, #23]
 8010672:	79fb      	ldrb	r3, [r7, #7]
 8010674:	429a      	cmp	r2, r3
 8010676:	d3d3      	bcc.n	8010620 <IntToUnicode+0x18>
  }
}
 8010678:	bf00      	nop
 801067a:	bf00      	nop
 801067c:	371c      	adds	r7, #28
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr
	...

08010688 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b098      	sub	sp, #96	@ 0x60
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010690:	f107 030c 	add.w	r3, r7, #12
 8010694:	2254      	movs	r2, #84	@ 0x54
 8010696:	2100      	movs	r1, #0
 8010698:	4618      	mov	r0, r3
 801069a:	f001 f833 	bl	8011704 <memset>
  if(pcdHandle->Instance==USB)
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	4a15      	ldr	r2, [pc, #84]	@ (80106f8 <HAL_PCD_MspInit+0x70>)
 80106a4:	4293      	cmp	r3, r2
 80106a6:	d122      	bne.n	80106ee <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80106a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80106ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80106ae:	2300      	movs	r3, #0
 80106b0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80106b2:	f107 030c 	add.w	r3, r7, #12
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7f9 fc9c 	bl	8009ff4 <HAL_RCCEx_PeriphCLKConfig>
 80106bc:	4603      	mov	r3, r0
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d001      	beq.n	80106c6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80106c2:	f7f1 fe49 	bl	8002358 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80106c6:	4b0d      	ldr	r3, [pc, #52]	@ (80106fc <HAL_PCD_MspInit+0x74>)
 80106c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80106ca:	4a0c      	ldr	r2, [pc, #48]	@ (80106fc <HAL_PCD_MspInit+0x74>)
 80106cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80106d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80106d2:	4b0a      	ldr	r3, [pc, #40]	@ (80106fc <HAL_PCD_MspInit+0x74>)
 80106d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80106d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80106da:	60bb      	str	r3, [r7, #8]
 80106dc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80106de:	2200      	movs	r2, #0
 80106e0:	2100      	movs	r1, #0
 80106e2:	2014      	movs	r0, #20
 80106e4:	f7f4 fd38 	bl	8005158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80106e8:	2014      	movs	r0, #20
 80106ea:	f7f4 fd5f 	bl	80051ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80106ee:	bf00      	nop
 80106f0:	3760      	adds	r7, #96	@ 0x60
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
 80106f6:	bf00      	nop
 80106f8:	40005c00 	.word	0x40005c00
 80106fc:	40021000 	.word	0x40021000

08010700 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b082      	sub	sp, #8
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8010714:	4619      	mov	r1, r3
 8010716:	4610      	mov	r0, r2
 8010718:	f7fe fd32 	bl	800f180 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801071c:	bf00      	nop
 801071e:	3708      	adds	r7, #8
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b082      	sub	sp, #8
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	460b      	mov	r3, r1
 801072e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010736:	78fa      	ldrb	r2, [r7, #3]
 8010738:	6879      	ldr	r1, [r7, #4]
 801073a:	4613      	mov	r3, r2
 801073c:	009b      	lsls	r3, r3, #2
 801073e:	4413      	add	r3, r2
 8010740:	00db      	lsls	r3, r3, #3
 8010742:	440b      	add	r3, r1
 8010744:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	78fb      	ldrb	r3, [r7, #3]
 801074c:	4619      	mov	r1, r3
 801074e:	f7fe fd6c 	bl	800f22a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8010752:	bf00      	nop
 8010754:	3708      	adds	r7, #8
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}

0801075a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801075a:	b580      	push	{r7, lr}
 801075c:	b082      	sub	sp, #8
 801075e:	af00      	add	r7, sp, #0
 8010760:	6078      	str	r0, [r7, #4]
 8010762:	460b      	mov	r3, r1
 8010764:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 801076c:	78fa      	ldrb	r2, [r7, #3]
 801076e:	6879      	ldr	r1, [r7, #4]
 8010770:	4613      	mov	r3, r2
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	4413      	add	r3, r2
 8010776:	00db      	lsls	r3, r3, #3
 8010778:	440b      	add	r3, r1
 801077a:	3324      	adds	r3, #36	@ 0x24
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	78fb      	ldrb	r3, [r7, #3]
 8010780:	4619      	mov	r1, r3
 8010782:	f7fe fdb5 	bl	800f2f0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8010786:	bf00      	nop
 8010788:	3708      	adds	r7, #8
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}

0801078e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801078e:	b580      	push	{r7, lr}
 8010790:	b082      	sub	sp, #8
 8010792:	af00      	add	r7, sp, #0
 8010794:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801079c:	4618      	mov	r0, r3
 801079e:	f7fe fec9 	bl	800f534 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80107a2:	bf00      	nop
 80107a4:	3708      	adds	r7, #8
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}

080107aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107aa:	b580      	push	{r7, lr}
 80107ac:	b084      	sub	sp, #16
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80107b2:	2301      	movs	r3, #1
 80107b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	795b      	ldrb	r3, [r3, #5]
 80107ba:	2b02      	cmp	r3, #2
 80107bc:	d001      	beq.n	80107c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80107be:	f7f1 fdcb 	bl	8002358 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80107c8:	7bfa      	ldrb	r2, [r7, #15]
 80107ca:	4611      	mov	r1, r2
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7fe fe73 	bl	800f4b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80107d8:	4618      	mov	r0, r3
 80107da:	f7fe fe1f 	bl	800f41c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80107de:	bf00      	nop
 80107e0:	3710      	adds	r7, #16
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
	...

080107e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7fe fe6e 	bl	800f4d8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	7a5b      	ldrb	r3, [r3, #9]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d005      	beq.n	8010810 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010804:	4b04      	ldr	r3, [pc, #16]	@ (8010818 <HAL_PCD_SuspendCallback+0x30>)
 8010806:	691b      	ldr	r3, [r3, #16]
 8010808:	4a03      	ldr	r2, [pc, #12]	@ (8010818 <HAL_PCD_SuspendCallback+0x30>)
 801080a:	f043 0306 	orr.w	r3, r3, #6
 801080e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8010810:	bf00      	nop
 8010812:	3708      	adds	r7, #8
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}
 8010818:	e000ed00 	.word	0xe000ed00

0801081c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	7a5b      	ldrb	r3, [r3, #9]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d007      	beq.n	801083c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801082c:	4b08      	ldr	r3, [pc, #32]	@ (8010850 <HAL_PCD_ResumeCallback+0x34>)
 801082e:	691b      	ldr	r3, [r3, #16]
 8010830:	4a07      	ldr	r2, [pc, #28]	@ (8010850 <HAL_PCD_ResumeCallback+0x34>)
 8010832:	f023 0306 	bic.w	r3, r3, #6
 8010836:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010838:	f000 f9f8 	bl	8010c2c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010842:	4618      	mov	r0, r3
 8010844:	f7fe fe5e 	bl	800f504 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010848:	bf00      	nop
 801084a:	3708      	adds	r7, #8
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}
 8010850:	e000ed00 	.word	0xe000ed00

08010854 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 801085c:	4a2b      	ldr	r2, [pc, #172]	@ (801090c <USBD_LL_Init+0xb8>)
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	4a29      	ldr	r2, [pc, #164]	@ (801090c <USBD_LL_Init+0xb8>)
 8010868:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 801086c:	4b27      	ldr	r3, [pc, #156]	@ (801090c <USBD_LL_Init+0xb8>)
 801086e:	4a28      	ldr	r2, [pc, #160]	@ (8010910 <USBD_LL_Init+0xbc>)
 8010870:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010872:	4b26      	ldr	r3, [pc, #152]	@ (801090c <USBD_LL_Init+0xb8>)
 8010874:	2208      	movs	r2, #8
 8010876:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010878:	4b24      	ldr	r3, [pc, #144]	@ (801090c <USBD_LL_Init+0xb8>)
 801087a:	2202      	movs	r2, #2
 801087c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801087e:	4b23      	ldr	r3, [pc, #140]	@ (801090c <USBD_LL_Init+0xb8>)
 8010880:	2202      	movs	r2, #2
 8010882:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010884:	4b21      	ldr	r3, [pc, #132]	@ (801090c <USBD_LL_Init+0xb8>)
 8010886:	2200      	movs	r2, #0
 8010888:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801088a:	4b20      	ldr	r3, [pc, #128]	@ (801090c <USBD_LL_Init+0xb8>)
 801088c:	2200      	movs	r2, #0
 801088e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010890:	4b1e      	ldr	r3, [pc, #120]	@ (801090c <USBD_LL_Init+0xb8>)
 8010892:	2200      	movs	r2, #0
 8010894:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010896:	4b1d      	ldr	r3, [pc, #116]	@ (801090c <USBD_LL_Init+0xb8>)
 8010898:	2200      	movs	r2, #0
 801089a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801089c:	481b      	ldr	r0, [pc, #108]	@ (801090c <USBD_LL_Init+0xb8>)
 801089e:	f7f6 fe5d 	bl	800755c <HAL_PCD_Init>
 80108a2:	4603      	mov	r3, r0
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d001      	beq.n	80108ac <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80108a8:	f7f1 fd56 	bl	8002358 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80108b2:	2318      	movs	r3, #24
 80108b4:	2200      	movs	r2, #0
 80108b6:	2100      	movs	r1, #0
 80108b8:	f7f8 fb24 	bl	8008f04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80108c2:	2358      	movs	r3, #88	@ 0x58
 80108c4:	2200      	movs	r2, #0
 80108c6:	2180      	movs	r1, #128	@ 0x80
 80108c8:	f7f8 fb1c 	bl	8008f04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80108d2:	23c0      	movs	r3, #192	@ 0xc0
 80108d4:	2200      	movs	r2, #0
 80108d6:	2181      	movs	r1, #129	@ 0x81
 80108d8:	f7f8 fb14 	bl	8008f04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80108e2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80108e6:	2200      	movs	r2, #0
 80108e8:	2101      	movs	r1, #1
 80108ea:	f7f8 fb0b 	bl	8008f04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80108f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80108f8:	2200      	movs	r2, #0
 80108fa:	2182      	movs	r1, #130	@ 0x82
 80108fc:	f7f8 fb02 	bl	8008f04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010900:	2300      	movs	r3, #0
}
 8010902:	4618      	mov	r0, r3
 8010904:	3708      	adds	r7, #8
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	20002308 	.word	0x20002308
 8010910:	40005c00 	.word	0x40005c00

08010914 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801091c:	2300      	movs	r3, #0
 801091e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010920:	2300      	movs	r3, #0
 8010922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801092a:	4618      	mov	r0, r3
 801092c:	f7f6 fef2 	bl	8007714 <HAL_PCD_Start>
 8010930:	4603      	mov	r3, r0
 8010932:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010934:	7bfb      	ldrb	r3, [r7, #15]
 8010936:	4618      	mov	r0, r3
 8010938:	f000 f97e 	bl	8010c38 <USBD_Get_USB_Status>
 801093c:	4603      	mov	r3, r0
 801093e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010940:	7bbb      	ldrb	r3, [r7, #14]
}
 8010942:	4618      	mov	r0, r3
 8010944:	3710      	adds	r7, #16
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}

0801094a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801094a:	b580      	push	{r7, lr}
 801094c:	b084      	sub	sp, #16
 801094e:	af00      	add	r7, sp, #0
 8010950:	6078      	str	r0, [r7, #4]
 8010952:	4608      	mov	r0, r1
 8010954:	4611      	mov	r1, r2
 8010956:	461a      	mov	r2, r3
 8010958:	4603      	mov	r3, r0
 801095a:	70fb      	strb	r3, [r7, #3]
 801095c:	460b      	mov	r3, r1
 801095e:	70bb      	strb	r3, [r7, #2]
 8010960:	4613      	mov	r3, r2
 8010962:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010964:	2300      	movs	r3, #0
 8010966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010968:	2300      	movs	r3, #0
 801096a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010972:	78bb      	ldrb	r3, [r7, #2]
 8010974:	883a      	ldrh	r2, [r7, #0]
 8010976:	78f9      	ldrb	r1, [r7, #3]
 8010978:	f7f7 f839 	bl	80079ee <HAL_PCD_EP_Open>
 801097c:	4603      	mov	r3, r0
 801097e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010980:	7bfb      	ldrb	r3, [r7, #15]
 8010982:	4618      	mov	r0, r3
 8010984:	f000 f958 	bl	8010c38 <USBD_Get_USB_Status>
 8010988:	4603      	mov	r3, r0
 801098a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801098c:	7bbb      	ldrb	r3, [r7, #14]
}
 801098e:	4618      	mov	r0, r3
 8010990:	3710      	adds	r7, #16
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}

08010996 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010996:	b580      	push	{r7, lr}
 8010998:	b084      	sub	sp, #16
 801099a:	af00      	add	r7, sp, #0
 801099c:	6078      	str	r0, [r7, #4]
 801099e:	460b      	mov	r3, r1
 80109a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109a2:	2300      	movs	r3, #0
 80109a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109a6:	2300      	movs	r3, #0
 80109a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80109b0:	78fa      	ldrb	r2, [r7, #3]
 80109b2:	4611      	mov	r1, r2
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7f7 f877 	bl	8007aa8 <HAL_PCD_EP_Close>
 80109ba:	4603      	mov	r3, r0
 80109bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109be:	7bfb      	ldrb	r3, [r7, #15]
 80109c0:	4618      	mov	r0, r3
 80109c2:	f000 f939 	bl	8010c38 <USBD_Get_USB_Status>
 80109c6:	4603      	mov	r3, r0
 80109c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80109cc:	4618      	mov	r0, r3
 80109ce:	3710      	adds	r7, #16
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}

080109d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b084      	sub	sp, #16
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	460b      	mov	r3, r1
 80109de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109e0:	2300      	movs	r3, #0
 80109e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109e4:	2300      	movs	r3, #0
 80109e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80109ee:	78fa      	ldrb	r2, [r7, #3]
 80109f0:	4611      	mov	r1, r2
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7f7 f920 	bl	8007c38 <HAL_PCD_EP_SetStall>
 80109f8:	4603      	mov	r3, r0
 80109fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109fc:	7bfb      	ldrb	r3, [r7, #15]
 80109fe:	4618      	mov	r0, r3
 8010a00:	f000 f91a 	bl	8010c38 <USBD_Get_USB_Status>
 8010a04:	4603      	mov	r3, r0
 8010a06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a08:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3710      	adds	r7, #16
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}

08010a12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a12:	b580      	push	{r7, lr}
 8010a14:	b084      	sub	sp, #16
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
 8010a1a:	460b      	mov	r3, r1
 8010a1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a22:	2300      	movs	r3, #0
 8010a24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010a2c:	78fa      	ldrb	r2, [r7, #3]
 8010a2e:	4611      	mov	r1, r2
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7f7 f953 	bl	8007cdc <HAL_PCD_EP_ClrStall>
 8010a36:	4603      	mov	r3, r0
 8010a38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a3a:	7bfb      	ldrb	r3, [r7, #15]
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f000 f8fb 	bl	8010c38 <USBD_Get_USB_Status>
 8010a42:	4603      	mov	r3, r0
 8010a44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a46:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3710      	adds	r7, #16
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}

08010a50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a50:	b480      	push	{r7}
 8010a52:	b085      	sub	sp, #20
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
 8010a58:	460b      	mov	r3, r1
 8010a5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010a62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010a64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	da0b      	bge.n	8010a84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010a6c:	78fb      	ldrb	r3, [r7, #3]
 8010a6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010a72:	68f9      	ldr	r1, [r7, #12]
 8010a74:	4613      	mov	r3, r2
 8010a76:	009b      	lsls	r3, r3, #2
 8010a78:	4413      	add	r3, r2
 8010a7a:	00db      	lsls	r3, r3, #3
 8010a7c:	440b      	add	r3, r1
 8010a7e:	3312      	adds	r3, #18
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	e00b      	b.n	8010a9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010a84:	78fb      	ldrb	r3, [r7, #3]
 8010a86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010a8a:	68f9      	ldr	r1, [r7, #12]
 8010a8c:	4613      	mov	r3, r2
 8010a8e:	009b      	lsls	r3, r3, #2
 8010a90:	4413      	add	r3, r2
 8010a92:	00db      	lsls	r3, r3, #3
 8010a94:	440b      	add	r3, r1
 8010a96:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010a9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3714      	adds	r7, #20
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa6:	4770      	bx	lr

08010aa8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b084      	sub	sp, #16
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	460b      	mov	r3, r1
 8010ab2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010ac2:	78fa      	ldrb	r2, [r7, #3]
 8010ac4:	4611      	mov	r1, r2
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7f6 ff6d 	bl	80079a6 <HAL_PCD_SetAddress>
 8010acc:	4603      	mov	r3, r0
 8010ace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ad0:	7bfb      	ldrb	r3, [r7, #15]
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f000 f8b0 	bl	8010c38 <USBD_Get_USB_Status>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010adc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3710      	adds	r7, #16
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}

08010ae6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010ae6:	b580      	push	{r7, lr}
 8010ae8:	b086      	sub	sp, #24
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	60f8      	str	r0, [r7, #12]
 8010aee:	607a      	str	r2, [r7, #4]
 8010af0:	603b      	str	r3, [r7, #0]
 8010af2:	460b      	mov	r3, r1
 8010af4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010af6:	2300      	movs	r3, #0
 8010af8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010afa:	2300      	movs	r3, #0
 8010afc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010b04:	7af9      	ldrb	r1, [r7, #11]
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	687a      	ldr	r2, [r7, #4]
 8010b0a:	f7f7 f85e 	bl	8007bca <HAL_PCD_EP_Transmit>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b12:	7dfb      	ldrb	r3, [r7, #23]
 8010b14:	4618      	mov	r0, r3
 8010b16:	f000 f88f 	bl	8010c38 <USBD_Get_USB_Status>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010b1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3718      	adds	r7, #24
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}

08010b28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b086      	sub	sp, #24
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60f8      	str	r0, [r7, #12]
 8010b30:	607a      	str	r2, [r7, #4]
 8010b32:	603b      	str	r3, [r7, #0]
 8010b34:	460b      	mov	r3, r1
 8010b36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010b46:	7af9      	ldrb	r1, [r7, #11]
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	687a      	ldr	r2, [r7, #4]
 8010b4c:	f7f6 fff4 	bl	8007b38 <HAL_PCD_EP_Receive>
 8010b50:	4603      	mov	r3, r0
 8010b52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b54:	7dfb      	ldrb	r3, [r7, #23]
 8010b56:	4618      	mov	r0, r3
 8010b58:	f000 f86e 	bl	8010c38 <USBD_Get_USB_Status>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010b60:	7dbb      	ldrb	r3, [r7, #22]
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3718      	adds	r7, #24
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}

08010b6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b6a:	b580      	push	{r7, lr}
 8010b6c:	b082      	sub	sp, #8
 8010b6e:	af00      	add	r7, sp, #0
 8010b70:	6078      	str	r0, [r7, #4]
 8010b72:	460b      	mov	r3, r1
 8010b74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b7c:	78fa      	ldrb	r2, [r7, #3]
 8010b7e:	4611      	mov	r1, r2
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7f7 f80a 	bl	8007b9a <HAL_PCD_EP_GetRxCount>
 8010b86:	4603      	mov	r3, r0
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3708      	adds	r7, #8
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}

08010b90 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b082      	sub	sp, #8
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	460b      	mov	r3, r1
 8010b9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010b9c:	78fb      	ldrb	r3, [r7, #3]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d002      	beq.n	8010ba8 <HAL_PCDEx_LPM_Callback+0x18>
 8010ba2:	2b01      	cmp	r3, #1
 8010ba4:	d013      	beq.n	8010bce <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010ba6:	e023      	b.n	8010bf0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	7a5b      	ldrb	r3, [r3, #9]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d007      	beq.n	8010bc0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010bb0:	f000 f83c 	bl	8010c2c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010bb4:	4b10      	ldr	r3, [pc, #64]	@ (8010bf8 <HAL_PCDEx_LPM_Callback+0x68>)
 8010bb6:	691b      	ldr	r3, [r3, #16]
 8010bb8:	4a0f      	ldr	r2, [pc, #60]	@ (8010bf8 <HAL_PCDEx_LPM_Callback+0x68>)
 8010bba:	f023 0306 	bic.w	r3, r3, #6
 8010bbe:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7fe fc9c 	bl	800f504 <USBD_LL_Resume>
    break;
 8010bcc:	e010      	b.n	8010bf0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7fe fc7f 	bl	800f4d8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	7a5b      	ldrb	r3, [r3, #9]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d005      	beq.n	8010bee <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010be2:	4b05      	ldr	r3, [pc, #20]	@ (8010bf8 <HAL_PCDEx_LPM_Callback+0x68>)
 8010be4:	691b      	ldr	r3, [r3, #16]
 8010be6:	4a04      	ldr	r2, [pc, #16]	@ (8010bf8 <HAL_PCDEx_LPM_Callback+0x68>)
 8010be8:	f043 0306 	orr.w	r3, r3, #6
 8010bec:	6113      	str	r3, [r2, #16]
    break;
 8010bee:	bf00      	nop
}
 8010bf0:	bf00      	nop
 8010bf2:	3708      	adds	r7, #8
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}
 8010bf8:	e000ed00 	.word	0xe000ed00

08010bfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010bfc:	b480      	push	{r7}
 8010bfe:	b083      	sub	sp, #12
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010c04:	4b03      	ldr	r3, [pc, #12]	@ (8010c14 <USBD_static_malloc+0x18>)
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	370c      	adds	r7, #12
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c10:	4770      	bx	lr
 8010c12:	bf00      	nop
 8010c14:	200025e4 	.word	0x200025e4

08010c18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010c18:	b480      	push	{r7}
 8010c1a:	b083      	sub	sp, #12
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]

}
 8010c20:	bf00      	nop
 8010c22:	370c      	adds	r7, #12
 8010c24:	46bd      	mov	sp, r7
 8010c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2a:	4770      	bx	lr

08010c2c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010c30:	f7f1 f95c 	bl	8001eec <SystemClock_Config>
}
 8010c34:	bf00      	nop
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010c38:	b480      	push	{r7}
 8010c3a:	b085      	sub	sp, #20
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	4603      	mov	r3, r0
 8010c40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c42:	2300      	movs	r3, #0
 8010c44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010c46:	79fb      	ldrb	r3, [r7, #7]
 8010c48:	2b03      	cmp	r3, #3
 8010c4a:	d817      	bhi.n	8010c7c <USBD_Get_USB_Status+0x44>
 8010c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8010c54 <USBD_Get_USB_Status+0x1c>)
 8010c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c52:	bf00      	nop
 8010c54:	08010c65 	.word	0x08010c65
 8010c58:	08010c6b 	.word	0x08010c6b
 8010c5c:	08010c71 	.word	0x08010c71
 8010c60:	08010c77 	.word	0x08010c77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010c64:	2300      	movs	r3, #0
 8010c66:	73fb      	strb	r3, [r7, #15]
    break;
 8010c68:	e00b      	b.n	8010c82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010c6a:	2303      	movs	r3, #3
 8010c6c:	73fb      	strb	r3, [r7, #15]
    break;
 8010c6e:	e008      	b.n	8010c82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010c70:	2301      	movs	r3, #1
 8010c72:	73fb      	strb	r3, [r7, #15]
    break;
 8010c74:	e005      	b.n	8010c82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010c76:	2303      	movs	r3, #3
 8010c78:	73fb      	strb	r3, [r7, #15]
    break;
 8010c7a:	e002      	b.n	8010c82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010c7c:	2303      	movs	r3, #3
 8010c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8010c80:	bf00      	nop
  }
  return usb_status;
 8010c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3714      	adds	r7, #20
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8e:	4770      	bx	lr

08010c90 <sinf>:
 8010c90:	ee10 3a10 	vmov	r3, s0
 8010c94:	b507      	push	{r0, r1, r2, lr}
 8010c96:	4a1f      	ldr	r2, [pc, #124]	@ (8010d14 <sinf+0x84>)
 8010c98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d807      	bhi.n	8010cb0 <sinf+0x20>
 8010ca0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8010d18 <sinf+0x88>
 8010ca4:	2000      	movs	r0, #0
 8010ca6:	b003      	add	sp, #12
 8010ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cac:	f000 b88e 	b.w	8010dcc <__kernel_sinf>
 8010cb0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010cb4:	d304      	bcc.n	8010cc0 <sinf+0x30>
 8010cb6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010cba:	b003      	add	sp, #12
 8010cbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cc0:	4668      	mov	r0, sp
 8010cc2:	f000 f8cb 	bl	8010e5c <__ieee754_rem_pio2f>
 8010cc6:	f000 0003 	and.w	r0, r0, #3
 8010cca:	2801      	cmp	r0, #1
 8010ccc:	d00a      	beq.n	8010ce4 <sinf+0x54>
 8010cce:	2802      	cmp	r0, #2
 8010cd0:	d00f      	beq.n	8010cf2 <sinf+0x62>
 8010cd2:	b9c0      	cbnz	r0, 8010d06 <sinf+0x76>
 8010cd4:	eddd 0a01 	vldr	s1, [sp, #4]
 8010cd8:	ed9d 0a00 	vldr	s0, [sp]
 8010cdc:	2001      	movs	r0, #1
 8010cde:	f000 f875 	bl	8010dcc <__kernel_sinf>
 8010ce2:	e7ea      	b.n	8010cba <sinf+0x2a>
 8010ce4:	eddd 0a01 	vldr	s1, [sp, #4]
 8010ce8:	ed9d 0a00 	vldr	s0, [sp]
 8010cec:	f000 f816 	bl	8010d1c <__kernel_cosf>
 8010cf0:	e7e3      	b.n	8010cba <sinf+0x2a>
 8010cf2:	eddd 0a01 	vldr	s1, [sp, #4]
 8010cf6:	ed9d 0a00 	vldr	s0, [sp]
 8010cfa:	2001      	movs	r0, #1
 8010cfc:	f000 f866 	bl	8010dcc <__kernel_sinf>
 8010d00:	eeb1 0a40 	vneg.f32	s0, s0
 8010d04:	e7d9      	b.n	8010cba <sinf+0x2a>
 8010d06:	eddd 0a01 	vldr	s1, [sp, #4]
 8010d0a:	ed9d 0a00 	vldr	s0, [sp]
 8010d0e:	f000 f805 	bl	8010d1c <__kernel_cosf>
 8010d12:	e7f5      	b.n	8010d00 <sinf+0x70>
 8010d14:	3f490fd8 	.word	0x3f490fd8
 8010d18:	00000000 	.word	0x00000000

08010d1c <__kernel_cosf>:
 8010d1c:	ee10 3a10 	vmov	r3, s0
 8010d20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010d24:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010d28:	eef0 6a40 	vmov.f32	s13, s0
 8010d2c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010d30:	d204      	bcs.n	8010d3c <__kernel_cosf+0x20>
 8010d32:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8010d36:	ee17 2a90 	vmov	r2, s15
 8010d3a:	b342      	cbz	r2, 8010d8e <__kernel_cosf+0x72>
 8010d3c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8010d40:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8010dac <__kernel_cosf+0x90>
 8010d44:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8010db0 <__kernel_cosf+0x94>
 8010d48:	4a1a      	ldr	r2, [pc, #104]	@ (8010db4 <__kernel_cosf+0x98>)
 8010d4a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010db8 <__kernel_cosf+0x9c>
 8010d54:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010d58:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8010dbc <__kernel_cosf+0xa0>
 8010d5c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010d60:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8010dc0 <__kernel_cosf+0xa4>
 8010d64:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010d68:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8010dc4 <__kernel_cosf+0xa8>
 8010d6c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010d70:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8010d74:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010d78:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010d7c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8010d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d84:	d804      	bhi.n	8010d90 <__kernel_cosf+0x74>
 8010d86:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010d8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010d8e:	4770      	bx	lr
 8010d90:	4a0d      	ldr	r2, [pc, #52]	@ (8010dc8 <__kernel_cosf+0xac>)
 8010d92:	4293      	cmp	r3, r2
 8010d94:	bf9a      	itte	ls
 8010d96:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8010d9a:	ee07 3a10 	vmovls	s14, r3
 8010d9e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8010da2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010da6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010daa:	e7ec      	b.n	8010d86 <__kernel_cosf+0x6a>
 8010dac:	ad47d74e 	.word	0xad47d74e
 8010db0:	310f74f6 	.word	0x310f74f6
 8010db4:	3e999999 	.word	0x3e999999
 8010db8:	b493f27c 	.word	0xb493f27c
 8010dbc:	37d00d01 	.word	0x37d00d01
 8010dc0:	bab60b61 	.word	0xbab60b61
 8010dc4:	3d2aaaab 	.word	0x3d2aaaab
 8010dc8:	3f480000 	.word	0x3f480000

08010dcc <__kernel_sinf>:
 8010dcc:	ee10 3a10 	vmov	r3, s0
 8010dd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010dd4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010dd8:	d204      	bcs.n	8010de4 <__kernel_sinf+0x18>
 8010dda:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010dde:	ee17 3a90 	vmov	r3, s15
 8010de2:	b35b      	cbz	r3, 8010e3c <__kernel_sinf+0x70>
 8010de4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010de8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010e40 <__kernel_sinf+0x74>
 8010dec:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8010e44 <__kernel_sinf+0x78>
 8010df0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010df4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8010e48 <__kernel_sinf+0x7c>
 8010df8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010dfc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8010e4c <__kernel_sinf+0x80>
 8010e00:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010e04:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8010e50 <__kernel_sinf+0x84>
 8010e08:	ee60 6a07 	vmul.f32	s13, s0, s14
 8010e0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010e10:	b930      	cbnz	r0, 8010e20 <__kernel_sinf+0x54>
 8010e12:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8010e54 <__kernel_sinf+0x88>
 8010e16:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010e1a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8010e1e:	4770      	bx	lr
 8010e20:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010e24:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8010e28:	eee0 7a86 	vfma.f32	s15, s1, s12
 8010e2c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8010e30:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8010e58 <__kernel_sinf+0x8c>
 8010e34:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010e38:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010e3c:	4770      	bx	lr
 8010e3e:	bf00      	nop
 8010e40:	2f2ec9d3 	.word	0x2f2ec9d3
 8010e44:	b2d72f34 	.word	0xb2d72f34
 8010e48:	3638ef1b 	.word	0x3638ef1b
 8010e4c:	b9500d01 	.word	0xb9500d01
 8010e50:	3c088889 	.word	0x3c088889
 8010e54:	be2aaaab 	.word	0xbe2aaaab
 8010e58:	3e2aaaab 	.word	0x3e2aaaab

08010e5c <__ieee754_rem_pio2f>:
 8010e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e5e:	ee10 6a10 	vmov	r6, s0
 8010e62:	4b88      	ldr	r3, [pc, #544]	@ (8011084 <__ieee754_rem_pio2f+0x228>)
 8010e64:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8010e68:	429d      	cmp	r5, r3
 8010e6a:	b087      	sub	sp, #28
 8010e6c:	4604      	mov	r4, r0
 8010e6e:	d805      	bhi.n	8010e7c <__ieee754_rem_pio2f+0x20>
 8010e70:	2300      	movs	r3, #0
 8010e72:	ed80 0a00 	vstr	s0, [r0]
 8010e76:	6043      	str	r3, [r0, #4]
 8010e78:	2000      	movs	r0, #0
 8010e7a:	e022      	b.n	8010ec2 <__ieee754_rem_pio2f+0x66>
 8010e7c:	4b82      	ldr	r3, [pc, #520]	@ (8011088 <__ieee754_rem_pio2f+0x22c>)
 8010e7e:	429d      	cmp	r5, r3
 8010e80:	d83a      	bhi.n	8010ef8 <__ieee754_rem_pio2f+0x9c>
 8010e82:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010e86:	2e00      	cmp	r6, #0
 8010e88:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801108c <__ieee754_rem_pio2f+0x230>
 8010e8c:	4a80      	ldr	r2, [pc, #512]	@ (8011090 <__ieee754_rem_pio2f+0x234>)
 8010e8e:	f023 030f 	bic.w	r3, r3, #15
 8010e92:	dd18      	ble.n	8010ec6 <__ieee754_rem_pio2f+0x6a>
 8010e94:	4293      	cmp	r3, r2
 8010e96:	ee70 7a47 	vsub.f32	s15, s0, s14
 8010e9a:	bf09      	itett	eq
 8010e9c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8011094 <__ieee754_rem_pio2f+0x238>
 8010ea0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8011098 <__ieee754_rem_pio2f+0x23c>
 8010ea4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801109c <__ieee754_rem_pio2f+0x240>
 8010ea8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8010eac:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8010eb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010eb4:	ed80 7a00 	vstr	s14, [r0]
 8010eb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010ebc:	edc0 7a01 	vstr	s15, [r0, #4]
 8010ec0:	2001      	movs	r0, #1
 8010ec2:	b007      	add	sp, #28
 8010ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	ee70 7a07 	vadd.f32	s15, s0, s14
 8010ecc:	bf09      	itett	eq
 8010ece:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8011094 <__ieee754_rem_pio2f+0x238>
 8010ed2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8011098 <__ieee754_rem_pio2f+0x23c>
 8010ed6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801109c <__ieee754_rem_pio2f+0x240>
 8010eda:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8010ede:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010ee2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010ee6:	ed80 7a00 	vstr	s14, [r0]
 8010eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010eee:	edc0 7a01 	vstr	s15, [r0, #4]
 8010ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef6:	e7e4      	b.n	8010ec2 <__ieee754_rem_pio2f+0x66>
 8010ef8:	4b69      	ldr	r3, [pc, #420]	@ (80110a0 <__ieee754_rem_pio2f+0x244>)
 8010efa:	429d      	cmp	r5, r3
 8010efc:	d873      	bhi.n	8010fe6 <__ieee754_rem_pio2f+0x18a>
 8010efe:	f000 f8dd 	bl	80110bc <fabsf>
 8010f02:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80110a4 <__ieee754_rem_pio2f+0x248>
 8010f06:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010f0a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010f0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010f16:	ee17 0a90 	vmov	r0, s15
 8010f1a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801108c <__ieee754_rem_pio2f+0x230>
 8010f1e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8010f22:	281f      	cmp	r0, #31
 8010f24:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011098 <__ieee754_rem_pio2f+0x23c>
 8010f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f2c:	eeb1 6a47 	vneg.f32	s12, s14
 8010f30:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010f34:	ee16 1a90 	vmov	r1, s13
 8010f38:	dc09      	bgt.n	8010f4e <__ieee754_rem_pio2f+0xf2>
 8010f3a:	4a5b      	ldr	r2, [pc, #364]	@ (80110a8 <__ieee754_rem_pio2f+0x24c>)
 8010f3c:	1e47      	subs	r7, r0, #1
 8010f3e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010f42:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8010f46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8010f4a:	4293      	cmp	r3, r2
 8010f4c:	d107      	bne.n	8010f5e <__ieee754_rem_pio2f+0x102>
 8010f4e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8010f52:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8010f56:	2a08      	cmp	r2, #8
 8010f58:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8010f5c:	dc14      	bgt.n	8010f88 <__ieee754_rem_pio2f+0x12c>
 8010f5e:	6021      	str	r1, [r4, #0]
 8010f60:	ed94 7a00 	vldr	s14, [r4]
 8010f64:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010f68:	2e00      	cmp	r6, #0
 8010f6a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010f6e:	ed84 0a01 	vstr	s0, [r4, #4]
 8010f72:	daa6      	bge.n	8010ec2 <__ieee754_rem_pio2f+0x66>
 8010f74:	eeb1 7a47 	vneg.f32	s14, s14
 8010f78:	eeb1 0a40 	vneg.f32	s0, s0
 8010f7c:	ed84 7a00 	vstr	s14, [r4]
 8010f80:	ed84 0a01 	vstr	s0, [r4, #4]
 8010f84:	4240      	negs	r0, r0
 8010f86:	e79c      	b.n	8010ec2 <__ieee754_rem_pio2f+0x66>
 8010f88:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8011094 <__ieee754_rem_pio2f+0x238>
 8010f8c:	eef0 6a40 	vmov.f32	s13, s0
 8010f90:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010f94:	ee70 7a66 	vsub.f32	s15, s0, s13
 8010f98:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010f9c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801109c <__ieee754_rem_pio2f+0x240>
 8010fa0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8010fa4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010fa8:	ee15 2a90 	vmov	r2, s11
 8010fac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010fb0:	1a5b      	subs	r3, r3, r1
 8010fb2:	2b19      	cmp	r3, #25
 8010fb4:	dc04      	bgt.n	8010fc0 <__ieee754_rem_pio2f+0x164>
 8010fb6:	edc4 5a00 	vstr	s11, [r4]
 8010fba:	eeb0 0a66 	vmov.f32	s0, s13
 8010fbe:	e7cf      	b.n	8010f60 <__ieee754_rem_pio2f+0x104>
 8010fc0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80110ac <__ieee754_rem_pio2f+0x250>
 8010fc4:	eeb0 0a66 	vmov.f32	s0, s13
 8010fc8:	eea6 0a25 	vfma.f32	s0, s12, s11
 8010fcc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8010fd0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80110b0 <__ieee754_rem_pio2f+0x254>
 8010fd4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010fd8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8010fdc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010fe0:	ed84 7a00 	vstr	s14, [r4]
 8010fe4:	e7bc      	b.n	8010f60 <__ieee754_rem_pio2f+0x104>
 8010fe6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8010fea:	d306      	bcc.n	8010ffa <__ieee754_rem_pio2f+0x19e>
 8010fec:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010ff0:	edc0 7a01 	vstr	s15, [r0, #4]
 8010ff4:	edc0 7a00 	vstr	s15, [r0]
 8010ff8:	e73e      	b.n	8010e78 <__ieee754_rem_pio2f+0x1c>
 8010ffa:	15ea      	asrs	r2, r5, #23
 8010ffc:	3a86      	subs	r2, #134	@ 0x86
 8010ffe:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8011002:	ee07 3a90 	vmov	s15, r3
 8011006:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801100a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80110b4 <__ieee754_rem_pio2f+0x258>
 801100e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011012:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011016:	ed8d 7a03 	vstr	s14, [sp, #12]
 801101a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801101e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011022:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011026:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801102a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801102e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011032:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801103a:	edcd 7a05 	vstr	s15, [sp, #20]
 801103e:	d11e      	bne.n	801107e <__ieee754_rem_pio2f+0x222>
 8011040:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011048:	bf0c      	ite	eq
 801104a:	2301      	moveq	r3, #1
 801104c:	2302      	movne	r3, #2
 801104e:	491a      	ldr	r1, [pc, #104]	@ (80110b8 <__ieee754_rem_pio2f+0x25c>)
 8011050:	9101      	str	r1, [sp, #4]
 8011052:	2102      	movs	r1, #2
 8011054:	9100      	str	r1, [sp, #0]
 8011056:	a803      	add	r0, sp, #12
 8011058:	4621      	mov	r1, r4
 801105a:	f000 f89d 	bl	8011198 <__kernel_rem_pio2f>
 801105e:	2e00      	cmp	r6, #0
 8011060:	f6bf af2f 	bge.w	8010ec2 <__ieee754_rem_pio2f+0x66>
 8011064:	edd4 7a00 	vldr	s15, [r4]
 8011068:	eef1 7a67 	vneg.f32	s15, s15
 801106c:	edc4 7a00 	vstr	s15, [r4]
 8011070:	edd4 7a01 	vldr	s15, [r4, #4]
 8011074:	eef1 7a67 	vneg.f32	s15, s15
 8011078:	edc4 7a01 	vstr	s15, [r4, #4]
 801107c:	e782      	b.n	8010f84 <__ieee754_rem_pio2f+0x128>
 801107e:	2303      	movs	r3, #3
 8011080:	e7e5      	b.n	801104e <__ieee754_rem_pio2f+0x1f2>
 8011082:	bf00      	nop
 8011084:	3f490fd8 	.word	0x3f490fd8
 8011088:	4016cbe3 	.word	0x4016cbe3
 801108c:	3fc90f80 	.word	0x3fc90f80
 8011090:	3fc90fd0 	.word	0x3fc90fd0
 8011094:	37354400 	.word	0x37354400
 8011098:	37354443 	.word	0x37354443
 801109c:	2e85a308 	.word	0x2e85a308
 80110a0:	43490f80 	.word	0x43490f80
 80110a4:	3f22f984 	.word	0x3f22f984
 80110a8:	08011d9c 	.word	0x08011d9c
 80110ac:	2e85a300 	.word	0x2e85a300
 80110b0:	248d3132 	.word	0x248d3132
 80110b4:	43800000 	.word	0x43800000
 80110b8:	08011e1c 	.word	0x08011e1c

080110bc <fabsf>:
 80110bc:	ee10 3a10 	vmov	r3, s0
 80110c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80110c4:	ee00 3a10 	vmov	s0, r3
 80110c8:	4770      	bx	lr
	...

080110cc <scalbnf>:
 80110cc:	ee10 3a10 	vmov	r3, s0
 80110d0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80110d4:	d02b      	beq.n	801112e <scalbnf+0x62>
 80110d6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80110da:	d302      	bcc.n	80110e2 <scalbnf+0x16>
 80110dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80110e0:	4770      	bx	lr
 80110e2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80110e6:	d123      	bne.n	8011130 <scalbnf+0x64>
 80110e8:	4b24      	ldr	r3, [pc, #144]	@ (801117c <scalbnf+0xb0>)
 80110ea:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011180 <scalbnf+0xb4>
 80110ee:	4298      	cmp	r0, r3
 80110f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80110f4:	db17      	blt.n	8011126 <scalbnf+0x5a>
 80110f6:	ee10 3a10 	vmov	r3, s0
 80110fa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80110fe:	3a19      	subs	r2, #25
 8011100:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011104:	4288      	cmp	r0, r1
 8011106:	dd15      	ble.n	8011134 <scalbnf+0x68>
 8011108:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011184 <scalbnf+0xb8>
 801110c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011188 <scalbnf+0xbc>
 8011110:	ee10 3a10 	vmov	r3, s0
 8011114:	eeb0 7a67 	vmov.f32	s14, s15
 8011118:	2b00      	cmp	r3, #0
 801111a:	bfb8      	it	lt
 801111c:	eef0 7a66 	vmovlt.f32	s15, s13
 8011120:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011124:	4770      	bx	lr
 8011126:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801118c <scalbnf+0xc0>
 801112a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801112e:	4770      	bx	lr
 8011130:	0dd2      	lsrs	r2, r2, #23
 8011132:	e7e5      	b.n	8011100 <scalbnf+0x34>
 8011134:	4410      	add	r0, r2
 8011136:	28fe      	cmp	r0, #254	@ 0xfe
 8011138:	dce6      	bgt.n	8011108 <scalbnf+0x3c>
 801113a:	2800      	cmp	r0, #0
 801113c:	dd06      	ble.n	801114c <scalbnf+0x80>
 801113e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011142:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011146:	ee00 3a10 	vmov	s0, r3
 801114a:	4770      	bx	lr
 801114c:	f110 0f16 	cmn.w	r0, #22
 8011150:	da09      	bge.n	8011166 <scalbnf+0x9a>
 8011152:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801118c <scalbnf+0xc0>
 8011156:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011190 <scalbnf+0xc4>
 801115a:	ee10 3a10 	vmov	r3, s0
 801115e:	eeb0 7a67 	vmov.f32	s14, s15
 8011162:	2b00      	cmp	r3, #0
 8011164:	e7d9      	b.n	801111a <scalbnf+0x4e>
 8011166:	3019      	adds	r0, #25
 8011168:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801116c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011170:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011194 <scalbnf+0xc8>
 8011174:	ee07 3a90 	vmov	s15, r3
 8011178:	e7d7      	b.n	801112a <scalbnf+0x5e>
 801117a:	bf00      	nop
 801117c:	ffff3cb0 	.word	0xffff3cb0
 8011180:	4c000000 	.word	0x4c000000
 8011184:	7149f2ca 	.word	0x7149f2ca
 8011188:	f149f2ca 	.word	0xf149f2ca
 801118c:	0da24260 	.word	0x0da24260
 8011190:	8da24260 	.word	0x8da24260
 8011194:	33000000 	.word	0x33000000

08011198 <__kernel_rem_pio2f>:
 8011198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801119c:	ed2d 8b04 	vpush	{d8-d9}
 80111a0:	b0d9      	sub	sp, #356	@ 0x164
 80111a2:	4690      	mov	r8, r2
 80111a4:	9001      	str	r0, [sp, #4]
 80111a6:	4ab9      	ldr	r2, [pc, #740]	@ (801148c <__kernel_rem_pio2f+0x2f4>)
 80111a8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80111aa:	f118 0f04 	cmn.w	r8, #4
 80111ae:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80111b2:	460f      	mov	r7, r1
 80111b4:	f103 3bff 	add.w	fp, r3, #4294967295
 80111b8:	db27      	blt.n	801120a <__kernel_rem_pio2f+0x72>
 80111ba:	f1b8 0203 	subs.w	r2, r8, #3
 80111be:	bf48      	it	mi
 80111c0:	f108 0204 	addmi.w	r2, r8, #4
 80111c4:	10d2      	asrs	r2, r2, #3
 80111c6:	1c55      	adds	r5, r2, #1
 80111c8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80111ca:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801149c <__kernel_rem_pio2f+0x304>
 80111ce:	00e8      	lsls	r0, r5, #3
 80111d0:	eba2 060b 	sub.w	r6, r2, fp
 80111d4:	9002      	str	r0, [sp, #8]
 80111d6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80111da:	eb0a 0c0b 	add.w	ip, sl, fp
 80111de:	ac1c      	add	r4, sp, #112	@ 0x70
 80111e0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80111e4:	2000      	movs	r0, #0
 80111e6:	4560      	cmp	r0, ip
 80111e8:	dd11      	ble.n	801120e <__kernel_rem_pio2f+0x76>
 80111ea:	a91c      	add	r1, sp, #112	@ 0x70
 80111ec:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80111f0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80111f4:	f04f 0c00 	mov.w	ip, #0
 80111f8:	45d4      	cmp	ip, sl
 80111fa:	dc27      	bgt.n	801124c <__kernel_rem_pio2f+0xb4>
 80111fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011200:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801149c <__kernel_rem_pio2f+0x304>
 8011204:	4606      	mov	r6, r0
 8011206:	2400      	movs	r4, #0
 8011208:	e016      	b.n	8011238 <__kernel_rem_pio2f+0xa0>
 801120a:	2200      	movs	r2, #0
 801120c:	e7db      	b.n	80111c6 <__kernel_rem_pio2f+0x2e>
 801120e:	42c6      	cmn	r6, r0
 8011210:	bf5d      	ittte	pl
 8011212:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8011216:	ee07 1a90 	vmovpl	s15, r1
 801121a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801121e:	eef0 7a47 	vmovmi.f32	s15, s14
 8011222:	ece4 7a01 	vstmia	r4!, {s15}
 8011226:	3001      	adds	r0, #1
 8011228:	e7dd      	b.n	80111e6 <__kernel_rem_pio2f+0x4e>
 801122a:	ecfe 6a01 	vldmia	lr!, {s13}
 801122e:	ed96 7a00 	vldr	s14, [r6]
 8011232:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011236:	3401      	adds	r4, #1
 8011238:	455c      	cmp	r4, fp
 801123a:	f1a6 0604 	sub.w	r6, r6, #4
 801123e:	ddf4      	ble.n	801122a <__kernel_rem_pio2f+0x92>
 8011240:	ece9 7a01 	vstmia	r9!, {s15}
 8011244:	f10c 0c01 	add.w	ip, ip, #1
 8011248:	3004      	adds	r0, #4
 801124a:	e7d5      	b.n	80111f8 <__kernel_rem_pio2f+0x60>
 801124c:	a908      	add	r1, sp, #32
 801124e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011252:	9104      	str	r1, [sp, #16]
 8011254:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8011256:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8011498 <__kernel_rem_pio2f+0x300>
 801125a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8011494 <__kernel_rem_pio2f+0x2fc>
 801125e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011262:	9203      	str	r2, [sp, #12]
 8011264:	4654      	mov	r4, sl
 8011266:	00a2      	lsls	r2, r4, #2
 8011268:	9205      	str	r2, [sp, #20]
 801126a:	aa58      	add	r2, sp, #352	@ 0x160
 801126c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8011270:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8011274:	a944      	add	r1, sp, #272	@ 0x110
 8011276:	aa08      	add	r2, sp, #32
 8011278:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801127c:	4694      	mov	ip, r2
 801127e:	4626      	mov	r6, r4
 8011280:	2e00      	cmp	r6, #0
 8011282:	f1a0 0004 	sub.w	r0, r0, #4
 8011286:	dc4c      	bgt.n	8011322 <__kernel_rem_pio2f+0x18a>
 8011288:	4628      	mov	r0, r5
 801128a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801128e:	f7ff ff1d 	bl	80110cc <scalbnf>
 8011292:	eeb0 8a40 	vmov.f32	s16, s0
 8011296:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801129a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801129e:	f000 f9ed 	bl	801167c <floorf>
 80112a2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80112a6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80112aa:	2d00      	cmp	r5, #0
 80112ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80112b0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80112b4:	ee17 9a90 	vmov	r9, s15
 80112b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80112bc:	ee38 8a67 	vsub.f32	s16, s16, s15
 80112c0:	dd41      	ble.n	8011346 <__kernel_rem_pio2f+0x1ae>
 80112c2:	f104 3cff 	add.w	ip, r4, #4294967295
 80112c6:	a908      	add	r1, sp, #32
 80112c8:	f1c5 0e08 	rsb	lr, r5, #8
 80112cc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80112d0:	fa46 f00e 	asr.w	r0, r6, lr
 80112d4:	4481      	add	r9, r0
 80112d6:	fa00 f00e 	lsl.w	r0, r0, lr
 80112da:	1a36      	subs	r6, r6, r0
 80112dc:	f1c5 0007 	rsb	r0, r5, #7
 80112e0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80112e4:	4106      	asrs	r6, r0
 80112e6:	2e00      	cmp	r6, #0
 80112e8:	dd3c      	ble.n	8011364 <__kernel_rem_pio2f+0x1cc>
 80112ea:	f04f 0e00 	mov.w	lr, #0
 80112ee:	f109 0901 	add.w	r9, r9, #1
 80112f2:	4670      	mov	r0, lr
 80112f4:	4574      	cmp	r4, lr
 80112f6:	dc68      	bgt.n	80113ca <__kernel_rem_pio2f+0x232>
 80112f8:	2d00      	cmp	r5, #0
 80112fa:	dd03      	ble.n	8011304 <__kernel_rem_pio2f+0x16c>
 80112fc:	2d01      	cmp	r5, #1
 80112fe:	d074      	beq.n	80113ea <__kernel_rem_pio2f+0x252>
 8011300:	2d02      	cmp	r5, #2
 8011302:	d07d      	beq.n	8011400 <__kernel_rem_pio2f+0x268>
 8011304:	2e02      	cmp	r6, #2
 8011306:	d12d      	bne.n	8011364 <__kernel_rem_pio2f+0x1cc>
 8011308:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801130c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8011310:	b340      	cbz	r0, 8011364 <__kernel_rem_pio2f+0x1cc>
 8011312:	4628      	mov	r0, r5
 8011314:	9306      	str	r3, [sp, #24]
 8011316:	f7ff fed9 	bl	80110cc <scalbnf>
 801131a:	9b06      	ldr	r3, [sp, #24]
 801131c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011320:	e020      	b.n	8011364 <__kernel_rem_pio2f+0x1cc>
 8011322:	ee60 7a28 	vmul.f32	s15, s0, s17
 8011326:	3e01      	subs	r6, #1
 8011328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801132c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011330:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8011334:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011338:	ecac 0a01 	vstmia	ip!, {s0}
 801133c:	ed90 0a00 	vldr	s0, [r0]
 8011340:	ee37 0a80 	vadd.f32	s0, s15, s0
 8011344:	e79c      	b.n	8011280 <__kernel_rem_pio2f+0xe8>
 8011346:	d105      	bne.n	8011354 <__kernel_rem_pio2f+0x1bc>
 8011348:	1e60      	subs	r0, r4, #1
 801134a:	a908      	add	r1, sp, #32
 801134c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8011350:	11f6      	asrs	r6, r6, #7
 8011352:	e7c8      	b.n	80112e6 <__kernel_rem_pio2f+0x14e>
 8011354:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011358:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011360:	da31      	bge.n	80113c6 <__kernel_rem_pio2f+0x22e>
 8011362:	2600      	movs	r6, #0
 8011364:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801136c:	f040 8098 	bne.w	80114a0 <__kernel_rem_pio2f+0x308>
 8011370:	1e60      	subs	r0, r4, #1
 8011372:	2200      	movs	r2, #0
 8011374:	4550      	cmp	r0, sl
 8011376:	da4b      	bge.n	8011410 <__kernel_rem_pio2f+0x278>
 8011378:	2a00      	cmp	r2, #0
 801137a:	d065      	beq.n	8011448 <__kernel_rem_pio2f+0x2b0>
 801137c:	3c01      	subs	r4, #1
 801137e:	ab08      	add	r3, sp, #32
 8011380:	3d08      	subs	r5, #8
 8011382:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d0f8      	beq.n	801137c <__kernel_rem_pio2f+0x1e4>
 801138a:	4628      	mov	r0, r5
 801138c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011390:	f7ff fe9c 	bl	80110cc <scalbnf>
 8011394:	1c63      	adds	r3, r4, #1
 8011396:	aa44      	add	r2, sp, #272	@ 0x110
 8011398:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8011498 <__kernel_rem_pio2f+0x300>
 801139c:	0099      	lsls	r1, r3, #2
 801139e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80113a2:	4623      	mov	r3, r4
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	f280 80a9 	bge.w	80114fc <__kernel_rem_pio2f+0x364>
 80113aa:	4623      	mov	r3, r4
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	f2c0 80c7 	blt.w	8011540 <__kernel_rem_pio2f+0x3a8>
 80113b2:	aa44      	add	r2, sp, #272	@ 0x110
 80113b4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80113b8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8011490 <__kernel_rem_pio2f+0x2f8>
 80113bc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801149c <__kernel_rem_pio2f+0x304>
 80113c0:	2000      	movs	r0, #0
 80113c2:	1ae2      	subs	r2, r4, r3
 80113c4:	e0b1      	b.n	801152a <__kernel_rem_pio2f+0x392>
 80113c6:	2602      	movs	r6, #2
 80113c8:	e78f      	b.n	80112ea <__kernel_rem_pio2f+0x152>
 80113ca:	f852 1b04 	ldr.w	r1, [r2], #4
 80113ce:	b948      	cbnz	r0, 80113e4 <__kernel_rem_pio2f+0x24c>
 80113d0:	b121      	cbz	r1, 80113dc <__kernel_rem_pio2f+0x244>
 80113d2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80113d6:	f842 1c04 	str.w	r1, [r2, #-4]
 80113da:	2101      	movs	r1, #1
 80113dc:	f10e 0e01 	add.w	lr, lr, #1
 80113e0:	4608      	mov	r0, r1
 80113e2:	e787      	b.n	80112f4 <__kernel_rem_pio2f+0x15c>
 80113e4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80113e8:	e7f5      	b.n	80113d6 <__kernel_rem_pio2f+0x23e>
 80113ea:	f104 3cff 	add.w	ip, r4, #4294967295
 80113ee:	aa08      	add	r2, sp, #32
 80113f0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80113f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80113f8:	a908      	add	r1, sp, #32
 80113fa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80113fe:	e781      	b.n	8011304 <__kernel_rem_pio2f+0x16c>
 8011400:	f104 3cff 	add.w	ip, r4, #4294967295
 8011404:	aa08      	add	r2, sp, #32
 8011406:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801140a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801140e:	e7f3      	b.n	80113f8 <__kernel_rem_pio2f+0x260>
 8011410:	a908      	add	r1, sp, #32
 8011412:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8011416:	3801      	subs	r0, #1
 8011418:	430a      	orrs	r2, r1
 801141a:	e7ab      	b.n	8011374 <__kernel_rem_pio2f+0x1dc>
 801141c:	3201      	adds	r2, #1
 801141e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8011422:	2e00      	cmp	r6, #0
 8011424:	d0fa      	beq.n	801141c <__kernel_rem_pio2f+0x284>
 8011426:	9905      	ldr	r1, [sp, #20]
 8011428:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801142c:	eb0d 0001 	add.w	r0, sp, r1
 8011430:	18e6      	adds	r6, r4, r3
 8011432:	a91c      	add	r1, sp, #112	@ 0x70
 8011434:	f104 0c01 	add.w	ip, r4, #1
 8011438:	384c      	subs	r0, #76	@ 0x4c
 801143a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801143e:	4422      	add	r2, r4
 8011440:	4562      	cmp	r2, ip
 8011442:	da04      	bge.n	801144e <__kernel_rem_pio2f+0x2b6>
 8011444:	4614      	mov	r4, r2
 8011446:	e70e      	b.n	8011266 <__kernel_rem_pio2f+0xce>
 8011448:	9804      	ldr	r0, [sp, #16]
 801144a:	2201      	movs	r2, #1
 801144c:	e7e7      	b.n	801141e <__kernel_rem_pio2f+0x286>
 801144e:	9903      	ldr	r1, [sp, #12]
 8011450:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011454:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8011458:	9105      	str	r1, [sp, #20]
 801145a:	ee07 1a90 	vmov	s15, r1
 801145e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011462:	2400      	movs	r4, #0
 8011464:	ece6 7a01 	vstmia	r6!, {s15}
 8011468:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801149c <__kernel_rem_pio2f+0x304>
 801146c:	46b1      	mov	r9, r6
 801146e:	455c      	cmp	r4, fp
 8011470:	dd04      	ble.n	801147c <__kernel_rem_pio2f+0x2e4>
 8011472:	ece0 7a01 	vstmia	r0!, {s15}
 8011476:	f10c 0c01 	add.w	ip, ip, #1
 801147a:	e7e1      	b.n	8011440 <__kernel_rem_pio2f+0x2a8>
 801147c:	ecfe 6a01 	vldmia	lr!, {s13}
 8011480:	ed39 7a01 	vldmdb	r9!, {s14}
 8011484:	3401      	adds	r4, #1
 8011486:	eee6 7a87 	vfma.f32	s15, s13, s14
 801148a:	e7f0      	b.n	801146e <__kernel_rem_pio2f+0x2d6>
 801148c:	08012160 	.word	0x08012160
 8011490:	08012134 	.word	0x08012134
 8011494:	43800000 	.word	0x43800000
 8011498:	3b800000 	.word	0x3b800000
 801149c:	00000000 	.word	0x00000000
 80114a0:	9b02      	ldr	r3, [sp, #8]
 80114a2:	eeb0 0a48 	vmov.f32	s0, s16
 80114a6:	eba3 0008 	sub.w	r0, r3, r8
 80114aa:	f7ff fe0f 	bl	80110cc <scalbnf>
 80114ae:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8011494 <__kernel_rem_pio2f+0x2fc>
 80114b2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80114b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ba:	db19      	blt.n	80114f0 <__kernel_rem_pio2f+0x358>
 80114bc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8011498 <__kernel_rem_pio2f+0x300>
 80114c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80114c4:	aa08      	add	r2, sp, #32
 80114c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80114ca:	3508      	adds	r5, #8
 80114cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80114d0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80114d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80114d8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80114dc:	ee10 3a10 	vmov	r3, s0
 80114e0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80114e4:	ee17 3a90 	vmov	r3, s15
 80114e8:	3401      	adds	r4, #1
 80114ea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80114ee:	e74c      	b.n	801138a <__kernel_rem_pio2f+0x1f2>
 80114f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80114f4:	aa08      	add	r2, sp, #32
 80114f6:	ee10 3a10 	vmov	r3, s0
 80114fa:	e7f6      	b.n	80114ea <__kernel_rem_pio2f+0x352>
 80114fc:	a808      	add	r0, sp, #32
 80114fe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8011502:	9001      	str	r0, [sp, #4]
 8011504:	ee07 0a90 	vmov	s15, r0
 8011508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801150c:	3b01      	subs	r3, #1
 801150e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011512:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011516:	ed62 7a01 	vstmdb	r2!, {s15}
 801151a:	e743      	b.n	80113a4 <__kernel_rem_pio2f+0x20c>
 801151c:	ecfc 6a01 	vldmia	ip!, {s13}
 8011520:	ecb5 7a01 	vldmia	r5!, {s14}
 8011524:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011528:	3001      	adds	r0, #1
 801152a:	4550      	cmp	r0, sl
 801152c:	dc01      	bgt.n	8011532 <__kernel_rem_pio2f+0x39a>
 801152e:	4282      	cmp	r2, r0
 8011530:	daf4      	bge.n	801151c <__kernel_rem_pio2f+0x384>
 8011532:	a858      	add	r0, sp, #352	@ 0x160
 8011534:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011538:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801153c:	3b01      	subs	r3, #1
 801153e:	e735      	b.n	80113ac <__kernel_rem_pio2f+0x214>
 8011540:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8011542:	2b02      	cmp	r3, #2
 8011544:	dc09      	bgt.n	801155a <__kernel_rem_pio2f+0x3c2>
 8011546:	2b00      	cmp	r3, #0
 8011548:	dc2b      	bgt.n	80115a2 <__kernel_rem_pio2f+0x40a>
 801154a:	d044      	beq.n	80115d6 <__kernel_rem_pio2f+0x43e>
 801154c:	f009 0007 	and.w	r0, r9, #7
 8011550:	b059      	add	sp, #356	@ 0x164
 8011552:	ecbd 8b04 	vpop	{d8-d9}
 8011556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801155a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801155c:	2b03      	cmp	r3, #3
 801155e:	d1f5      	bne.n	801154c <__kernel_rem_pio2f+0x3b4>
 8011560:	aa30      	add	r2, sp, #192	@ 0xc0
 8011562:	1f0b      	subs	r3, r1, #4
 8011564:	4413      	add	r3, r2
 8011566:	461a      	mov	r2, r3
 8011568:	4620      	mov	r0, r4
 801156a:	2800      	cmp	r0, #0
 801156c:	f1a2 0204 	sub.w	r2, r2, #4
 8011570:	dc52      	bgt.n	8011618 <__kernel_rem_pio2f+0x480>
 8011572:	4622      	mov	r2, r4
 8011574:	2a01      	cmp	r2, #1
 8011576:	f1a3 0304 	sub.w	r3, r3, #4
 801157a:	dc5d      	bgt.n	8011638 <__kernel_rem_pio2f+0x4a0>
 801157c:	ab30      	add	r3, sp, #192	@ 0xc0
 801157e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801149c <__kernel_rem_pio2f+0x304>
 8011582:	440b      	add	r3, r1
 8011584:	2c01      	cmp	r4, #1
 8011586:	dc67      	bgt.n	8011658 <__kernel_rem_pio2f+0x4c0>
 8011588:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801158c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8011590:	2e00      	cmp	r6, #0
 8011592:	d167      	bne.n	8011664 <__kernel_rem_pio2f+0x4cc>
 8011594:	edc7 6a00 	vstr	s13, [r7]
 8011598:	ed87 7a01 	vstr	s14, [r7, #4]
 801159c:	edc7 7a02 	vstr	s15, [r7, #8]
 80115a0:	e7d4      	b.n	801154c <__kernel_rem_pio2f+0x3b4>
 80115a2:	ab30      	add	r3, sp, #192	@ 0xc0
 80115a4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801149c <__kernel_rem_pio2f+0x304>
 80115a8:	440b      	add	r3, r1
 80115aa:	4622      	mov	r2, r4
 80115ac:	2a00      	cmp	r2, #0
 80115ae:	da24      	bge.n	80115fa <__kernel_rem_pio2f+0x462>
 80115b0:	b34e      	cbz	r6, 8011606 <__kernel_rem_pio2f+0x46e>
 80115b2:	eef1 7a47 	vneg.f32	s15, s14
 80115b6:	edc7 7a00 	vstr	s15, [r7]
 80115ba:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80115be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80115c2:	aa31      	add	r2, sp, #196	@ 0xc4
 80115c4:	2301      	movs	r3, #1
 80115c6:	429c      	cmp	r4, r3
 80115c8:	da20      	bge.n	801160c <__kernel_rem_pio2f+0x474>
 80115ca:	b10e      	cbz	r6, 80115d0 <__kernel_rem_pio2f+0x438>
 80115cc:	eef1 7a67 	vneg.f32	s15, s15
 80115d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80115d4:	e7ba      	b.n	801154c <__kernel_rem_pio2f+0x3b4>
 80115d6:	ab30      	add	r3, sp, #192	@ 0xc0
 80115d8:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801149c <__kernel_rem_pio2f+0x304>
 80115dc:	440b      	add	r3, r1
 80115de:	2c00      	cmp	r4, #0
 80115e0:	da05      	bge.n	80115ee <__kernel_rem_pio2f+0x456>
 80115e2:	b10e      	cbz	r6, 80115e8 <__kernel_rem_pio2f+0x450>
 80115e4:	eef1 7a67 	vneg.f32	s15, s15
 80115e8:	edc7 7a00 	vstr	s15, [r7]
 80115ec:	e7ae      	b.n	801154c <__kernel_rem_pio2f+0x3b4>
 80115ee:	ed33 7a01 	vldmdb	r3!, {s14}
 80115f2:	3c01      	subs	r4, #1
 80115f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80115f8:	e7f1      	b.n	80115de <__kernel_rem_pio2f+0x446>
 80115fa:	ed73 7a01 	vldmdb	r3!, {s15}
 80115fe:	3a01      	subs	r2, #1
 8011600:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011604:	e7d2      	b.n	80115ac <__kernel_rem_pio2f+0x414>
 8011606:	eef0 7a47 	vmov.f32	s15, s14
 801160a:	e7d4      	b.n	80115b6 <__kernel_rem_pio2f+0x41e>
 801160c:	ecb2 7a01 	vldmia	r2!, {s14}
 8011610:	3301      	adds	r3, #1
 8011612:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011616:	e7d6      	b.n	80115c6 <__kernel_rem_pio2f+0x42e>
 8011618:	edd2 7a00 	vldr	s15, [r2]
 801161c:	edd2 6a01 	vldr	s13, [r2, #4]
 8011620:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011624:	3801      	subs	r0, #1
 8011626:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801162a:	ed82 7a00 	vstr	s14, [r2]
 801162e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011632:	edc2 7a01 	vstr	s15, [r2, #4]
 8011636:	e798      	b.n	801156a <__kernel_rem_pio2f+0x3d2>
 8011638:	edd3 7a00 	vldr	s15, [r3]
 801163c:	edd3 6a01 	vldr	s13, [r3, #4]
 8011640:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011644:	3a01      	subs	r2, #1
 8011646:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801164a:	ed83 7a00 	vstr	s14, [r3]
 801164e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011652:	edc3 7a01 	vstr	s15, [r3, #4]
 8011656:	e78d      	b.n	8011574 <__kernel_rem_pio2f+0x3dc>
 8011658:	ed33 7a01 	vldmdb	r3!, {s14}
 801165c:	3c01      	subs	r4, #1
 801165e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011662:	e78f      	b.n	8011584 <__kernel_rem_pio2f+0x3ec>
 8011664:	eef1 6a66 	vneg.f32	s13, s13
 8011668:	eeb1 7a47 	vneg.f32	s14, s14
 801166c:	edc7 6a00 	vstr	s13, [r7]
 8011670:	ed87 7a01 	vstr	s14, [r7, #4]
 8011674:	eef1 7a67 	vneg.f32	s15, s15
 8011678:	e790      	b.n	801159c <__kernel_rem_pio2f+0x404>
 801167a:	bf00      	nop

0801167c <floorf>:
 801167c:	ee10 3a10 	vmov	r3, s0
 8011680:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011684:	3a7f      	subs	r2, #127	@ 0x7f
 8011686:	2a16      	cmp	r2, #22
 8011688:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801168c:	dc2b      	bgt.n	80116e6 <floorf+0x6a>
 801168e:	2a00      	cmp	r2, #0
 8011690:	da12      	bge.n	80116b8 <floorf+0x3c>
 8011692:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80116f8 <floorf+0x7c>
 8011696:	ee30 0a27 	vadd.f32	s0, s0, s15
 801169a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116a2:	dd06      	ble.n	80116b2 <floorf+0x36>
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	da24      	bge.n	80116f2 <floorf+0x76>
 80116a8:	2900      	cmp	r1, #0
 80116aa:	4b14      	ldr	r3, [pc, #80]	@ (80116fc <floorf+0x80>)
 80116ac:	bf08      	it	eq
 80116ae:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80116b2:	ee00 3a10 	vmov	s0, r3
 80116b6:	4770      	bx	lr
 80116b8:	4911      	ldr	r1, [pc, #68]	@ (8011700 <floorf+0x84>)
 80116ba:	4111      	asrs	r1, r2
 80116bc:	420b      	tst	r3, r1
 80116be:	d0fa      	beq.n	80116b6 <floorf+0x3a>
 80116c0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80116f8 <floorf+0x7c>
 80116c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80116c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80116cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116d0:	ddef      	ble.n	80116b2 <floorf+0x36>
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	bfbe      	ittt	lt
 80116d6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80116da:	fa40 f202 	asrlt.w	r2, r0, r2
 80116de:	189b      	addlt	r3, r3, r2
 80116e0:	ea23 0301 	bic.w	r3, r3, r1
 80116e4:	e7e5      	b.n	80116b2 <floorf+0x36>
 80116e6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80116ea:	d3e4      	bcc.n	80116b6 <floorf+0x3a>
 80116ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 80116f0:	4770      	bx	lr
 80116f2:	2300      	movs	r3, #0
 80116f4:	e7dd      	b.n	80116b2 <floorf+0x36>
 80116f6:	bf00      	nop
 80116f8:	7149f2ca 	.word	0x7149f2ca
 80116fc:	bf800000 	.word	0xbf800000
 8011700:	007fffff 	.word	0x007fffff

08011704 <memset>:
 8011704:	4402      	add	r2, r0
 8011706:	4603      	mov	r3, r0
 8011708:	4293      	cmp	r3, r2
 801170a:	d100      	bne.n	801170e <memset+0xa>
 801170c:	4770      	bx	lr
 801170e:	f803 1b01 	strb.w	r1, [r3], #1
 8011712:	e7f9      	b.n	8011708 <memset+0x4>

08011714 <__libc_init_array>:
 8011714:	b570      	push	{r4, r5, r6, lr}
 8011716:	4d0d      	ldr	r5, [pc, #52]	@ (801174c <__libc_init_array+0x38>)
 8011718:	4c0d      	ldr	r4, [pc, #52]	@ (8011750 <__libc_init_array+0x3c>)
 801171a:	1b64      	subs	r4, r4, r5
 801171c:	10a4      	asrs	r4, r4, #2
 801171e:	2600      	movs	r6, #0
 8011720:	42a6      	cmp	r6, r4
 8011722:	d109      	bne.n	8011738 <__libc_init_array+0x24>
 8011724:	4d0b      	ldr	r5, [pc, #44]	@ (8011754 <__libc_init_array+0x40>)
 8011726:	4c0c      	ldr	r4, [pc, #48]	@ (8011758 <__libc_init_array+0x44>)
 8011728:	f000 f818 	bl	801175c <_init>
 801172c:	1b64      	subs	r4, r4, r5
 801172e:	10a4      	asrs	r4, r4, #2
 8011730:	2600      	movs	r6, #0
 8011732:	42a6      	cmp	r6, r4
 8011734:	d105      	bne.n	8011742 <__libc_init_array+0x2e>
 8011736:	bd70      	pop	{r4, r5, r6, pc}
 8011738:	f855 3b04 	ldr.w	r3, [r5], #4
 801173c:	4798      	blx	r3
 801173e:	3601      	adds	r6, #1
 8011740:	e7ee      	b.n	8011720 <__libc_init_array+0xc>
 8011742:	f855 3b04 	ldr.w	r3, [r5], #4
 8011746:	4798      	blx	r3
 8011748:	3601      	adds	r6, #1
 801174a:	e7f2      	b.n	8011732 <__libc_init_array+0x1e>
 801174c:	08012174 	.word	0x08012174
 8011750:	08012174 	.word	0x08012174
 8011754:	08012174 	.word	0x08012174
 8011758:	08012178 	.word	0x08012178

0801175c <_init>:
 801175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801175e:	bf00      	nop
 8011760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011762:	bc08      	pop	{r3}
 8011764:	469e      	mov	lr, r3
 8011766:	4770      	bx	lr

08011768 <_fini>:
 8011768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801176a:	bf00      	nop
 801176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801176e:	bc08      	pop	{r3}
 8011770:	469e      	mov	lr, r3
 8011772:	4770      	bx	lr
