
UCEIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105e4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  080107bc  080107bc  000117bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d00  08010d00  00012184  2**0
                  CONTENTS
  4 .ARM          00000008  08010d00  08010d00  00011d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d08  08010d08  00012184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d08  08010d08  00011d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010d0c  08010d0c  00011d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08010d10  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fa0  20000188  08010e94  00012188  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20002128  08010e94  00013128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021f77  00000000  00000000  000121b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000467e  00000000  00000000  0003412b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d40  00000000  00000000  000387b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016aa  00000000  00000000  0003a4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d739  00000000  00000000  0003bb9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d4b1  00000000  00000000  000692d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001317b5  00000000  00000000  00096784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c7f39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c64  00000000  00000000  001c7f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  001cfbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000188 	.word	0x20000188
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080107a4 	.word	0x080107a4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000018c 	.word	0x2000018c
 8000214:	080107a4 	.word	0x080107a4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
ADC_HandleTypeDef hadc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2220      	movs	r2, #32
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f010 f913 	bl	801074c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000526:	4b33      	ldr	r3, [pc, #204]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800052c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800052e:	4b31      	ldr	r3, [pc, #196]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000530:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000536:	4b2f      	ldr	r3, [pc, #188]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053c:	4b2d      	ldr	r3, [pc, #180]	@ (80005f4 <MX_ADC1_Init+0xec>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000542:	4b2c      	ldr	r3, [pc, #176]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000548:	4b2a      	ldr	r3, [pc, #168]	@ (80005f4 <MX_ADC1_Init+0xec>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b29      	ldr	r3, [pc, #164]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000550:	2204      	movs	r2, #4
 8000552:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000554:	4b27      	ldr	r3, [pc, #156]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800055a:	4b26      	ldr	r3, [pc, #152]	@ (80005f4 <MX_ADC1_Init+0xec>)
 800055c:	2200      	movs	r2, #0
 800055e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000560:	4b24      	ldr	r3, [pc, #144]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000562:	2201      	movs	r2, #1
 8000564:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b23      	ldr	r3, [pc, #140]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800056e:	4b21      	ldr	r3, [pc, #132]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000570:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000574:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000576:	4b1f      	ldr	r3, [pc, #124]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000578:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800057c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800057e:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000580:	2200      	movs	r2, #0
 8000582:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000586:	4b1b      	ldr	r3, [pc, #108]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000588:	2200      	movs	r2, #0
 800058a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800058c:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <MX_ADC1_Init+0xec>)
 800058e:	2200      	movs	r2, #0
 8000590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	4817      	ldr	r0, [pc, #92]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000596:	f001 fc01 	bl	8001d9c <HAL_ADC_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80005a0:	f000 ff34 	bl	800140c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a4:	2300      	movs	r3, #0
 80005a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ac:	4619      	mov	r1, r3
 80005ae:	4811      	ldr	r0, [pc, #68]	@ (80005f4 <MX_ADC1_Init+0xec>)
 80005b0:	f003 fb8c 	bl	8003ccc <HAL_ADCEx_MultiModeConfigChannel>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80005ba:	f000 ff27 	bl	800140c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005be:	4b0e      	ldr	r3, [pc, #56]	@ (80005f8 <MX_ADC1_Init+0xf0>)
 80005c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005c2:	2306      	movs	r3, #6
 80005c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ca:	237f      	movs	r3, #127	@ 0x7f
 80005cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ce:	2304      	movs	r3, #4
 80005d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	4619      	mov	r1, r3
 80005da:	4806      	ldr	r0, [pc, #24]	@ (80005f4 <MX_ADC1_Init+0xec>)
 80005dc:	f002 fb56 	bl	8002c8c <HAL_ADC_ConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80005e6:	f000 ff11 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	3730      	adds	r7, #48	@ 0x30
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200001a4 	.word	0x200001a4
 80005f8:	04300002 	.word	0x04300002

080005fc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2220      	movs	r2, #32
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f010 f89f 	bl	801074c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800060e:	4b2c      	ldr	r3, [pc, #176]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 8000610:	4a2c      	ldr	r2, [pc, #176]	@ (80006c4 <MX_ADC2_Init+0xc8>)
 8000612:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000614:	4b2a      	ldr	r3, [pc, #168]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 8000616:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800061a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000628:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062e:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000634:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 8000636:	2204      	movs	r2, #4
 8000638:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800063a:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 8000642:	2200      	movs	r2, #0
 8000644:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000646:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 8000648:	2201      	movs	r2, #1
 800064a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800064c:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 8000656:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800065c:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 800065e:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8000662:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000664:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800066c:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 800066e:	2200      	movs	r2, #0
 8000670:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000672:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800067a:	4811      	ldr	r0, [pc, #68]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 800067c:	f001 fb8e 	bl	8001d9c <HAL_ADC_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000686:	f000 fec1 	bl	800140c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800068a:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_ADC2_Init+0xcc>)
 800068c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068e:	2306      	movs	r3, #6
 8000690:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000696:	237f      	movs	r3, #127	@ 0x7f
 8000698:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800069a:	2304      	movs	r3, #4
 800069c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	@ (80006c0 <MX_ADC2_Init+0xc4>)
 80006a8:	f002 faf0 	bl	8002c8c <HAL_ADC_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80006b2:	f000 feab 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	3720      	adds	r7, #32
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000210 	.word	0x20000210
 80006c4:	50000100 	.word	0x50000100
 80006c8:	0c900008 	.word	0x0c900008

080006cc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08c      	sub	sp, #48	@ 0x30
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2220      	movs	r2, #32
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f010 f831 	bl	801074c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80006ea:	4b32      	ldr	r3, [pc, #200]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 80006ec:	4a32      	ldr	r2, [pc, #200]	@ (80007b8 <MX_ADC3_Init+0xec>)
 80006ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f0:	4b30      	ldr	r3, [pc, #192]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 80006f2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006f6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006f8:	4b2e      	ldr	r3, [pc, #184]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fe:	4b2d      	ldr	r3, [pc, #180]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000704:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000710:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 8000712:	2204      	movs	r2, #4
 8000714:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000716:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 8000718:	2200      	movs	r2, #0
 800071a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800071c:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 800071e:	2200      	movs	r2, #0
 8000720:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000722:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 8000724:	2201      	movs	r2, #1
 8000726:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000728:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000730:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 8000732:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000738:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 800073a:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800073e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000748:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 800074a:	2200      	movs	r2, #0
 800074c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000756:	4817      	ldr	r0, [pc, #92]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 8000758:	f001 fb20 	bl	8001d9c <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000762:	f000 fe53 	bl	800140c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800076a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076e:	4619      	mov	r1, r3
 8000770:	4810      	ldr	r0, [pc, #64]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 8000772:	f003 faab 	bl	8003ccc <HAL_ADCEx_MultiModeConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800077c:	f000 fe46 	bl	800140c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000780:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_ADC3_Init+0xf0>)
 8000782:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000784:	2306      	movs	r3, #6
 8000786:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800078c:	237f      	movs	r3, #127	@ 0x7f
 800078e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000790:	2304      	movs	r3, #4
 8000792:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_ADC3_Init+0xe8>)
 800079e:	f002 fa75 	bl	8002c8c <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 80007a8:	f000 fe30 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3730      	adds	r7, #48	@ 0x30
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000027c 	.word	0x2000027c
 80007b8:	50000400 	.word	0x50000400
 80007bc:	04300002 	.word	0x04300002

080007c0 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007c6:	463b      	mov	r3, r7
 80007c8:	2220      	movs	r2, #32
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f00f ffbd 	bl	801074c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80007d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000884 <MX_ADC4_Init+0xc4>)
 80007d4:	4a2c      	ldr	r2, [pc, #176]	@ (8000888 <MX_ADC4_Init+0xc8>)
 80007d6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <MX_ADC4_Init+0xc4>)
 80007da:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007de:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80007e0:	4b28      	ldr	r3, [pc, #160]	@ (8000884 <MX_ADC4_Init+0xc4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e6:	4b27      	ldr	r3, [pc, #156]	@ (8000884 <MX_ADC4_Init+0xc4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80007ec:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <MX_ADC4_Init+0xc4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f2:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <MX_ADC4_Init+0xc4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f8:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <MX_ADC4_Init+0xc4>)
 80007fa:	2204      	movs	r2, #4
 80007fc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <MX_ADC4_Init+0xc4>)
 8000800:	2200      	movs	r2, #0
 8000802:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000804:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <MX_ADC4_Init+0xc4>)
 8000806:	2200      	movs	r2, #0
 8000808:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800080a:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <MX_ADC4_Init+0xc4>)
 800080c:	2201      	movs	r2, #1
 800080e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000810:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <MX_ADC4_Init+0xc4>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000818:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_ADC4_Init+0xc4>)
 800081a:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800081e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000820:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <MX_ADC4_Init+0xc4>)
 8000822:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8000826:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000828:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <MX_ADC4_Init+0xc4>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_ADC4_Init+0xc4>)
 8000832:	2200      	movs	r2, #0
 8000834:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000836:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_ADC4_Init+0xc4>)
 8000838:	2200      	movs	r2, #0
 800083a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800083e:	4811      	ldr	r0, [pc, #68]	@ (8000884 <MX_ADC4_Init+0xc4>)
 8000840:	f001 faac 	bl	8001d9c <HAL_ADC_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC4_Init+0x8e>
  {
    Error_Handler();
 800084a:	f000 fddf 	bl	800140c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800084e:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_ADC4_Init+0xcc>)
 8000850:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000852:	2306      	movs	r3, #6
 8000854:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085a:	237f      	movs	r3, #127	@ 0x7f
 800085c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800085e:	2304      	movs	r3, #4
 8000860:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	@ (8000884 <MX_ADC4_Init+0xc4>)
 800086c:	f002 fa0e 	bl	8002c8c <HAL_ADC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC4_Init+0xba>
  {
    Error_Handler();
 8000876:	f000 fdc9 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3720      	adds	r7, #32
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200002e8 	.word	0x200002e8
 8000888:	50000500 	.word	0x50000500
 800088c:	04300002 	.word	0x04300002

08000890 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	2220      	movs	r2, #32
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f00f ff55 	bl	801074c <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80008a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000954 <MX_ADC5_Init+0xc4>)
 80008a4:	4a2c      	ldr	r2, [pc, #176]	@ (8000958 <MX_ADC5_Init+0xc8>)
 80008a6:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000954 <MX_ADC5_Init+0xc4>)
 80008aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008ae:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80008b0:	4b28      	ldr	r3, [pc, #160]	@ (8000954 <MX_ADC5_Init+0xc4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b6:	4b27      	ldr	r3, [pc, #156]	@ (8000954 <MX_ADC5_Init+0xc4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80008bc:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <MX_ADC5_Init+0xc4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008c2:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <MX_ADC5_Init+0xc4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c8:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <MX_ADC5_Init+0xc4>)
 80008ca:	2204      	movs	r2, #4
 80008cc:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80008ce:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <MX_ADC5_Init+0xc4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80008d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <MX_ADC5_Init+0xc4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80008da:	4b1e      	ldr	r3, [pc, #120]	@ (8000954 <MX_ADC5_Init+0xc4>)
 80008dc:	2201      	movs	r2, #1
 80008de:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80008e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000954 <MX_ADC5_Init+0xc4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80008e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <MX_ADC5_Init+0xc4>)
 80008ea:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 80008ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80008f0:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <MX_ADC5_Init+0xc4>)
 80008f2:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80008f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80008f8:	4b16      	ldr	r3, [pc, #88]	@ (8000954 <MX_ADC5_Init+0xc4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000900:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <MX_ADC5_Init+0xc4>)
 8000902:	2200      	movs	r2, #0
 8000904:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000906:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <MX_ADC5_Init+0xc4>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800090e:	4811      	ldr	r0, [pc, #68]	@ (8000954 <MX_ADC5_Init+0xc4>)
 8000910:	f001 fa44 	bl	8001d9c <HAL_ADC_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC5_Init+0x8e>
  {
    Error_Handler();
 800091a:	f000 fd77 	bl	800140c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_ADC5_Init+0xcc>)
 8000920:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000922:	2306      	movs	r3, #6
 8000924:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800092a:	237f      	movs	r3, #127	@ 0x7f
 800092c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092e:	2304      	movs	r3, #4
 8000930:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000936:	463b      	mov	r3, r7
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	@ (8000954 <MX_ADC5_Init+0xc4>)
 800093c:	f002 f9a6 	bl	8002c8c <HAL_ADC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC5_Init+0xba>
  {
    Error_Handler();
 8000946:	f000 fd61 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	3720      	adds	r7, #32
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000354 	.word	0x20000354
 8000958:	50000600 	.word	0x50000600
 800095c:	19200040 	.word	0x19200040

08000960 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b0a6      	sub	sp, #152	@ 0x98
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000978:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800097c:	2254      	movs	r2, #84	@ 0x54
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f00f fee3 	bl	801074c <memset>
  if(adcHandle->Instance==ADC1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800098e:	d149      	bne.n	8000a24 <HAL_ADC_MspInit+0xc4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000990:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000994:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000996:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800099a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800099c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009a0:	4618      	mov	r0, r3
 80009a2:	f008 f8d5 	bl	8008b50 <HAL_RCCEx_PeriphCLKConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009ac:	f000 fd2e 	bl	800140c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80009b0:	4b92      	ldr	r3, [pc, #584]	@ (8000bfc <HAL_ADC_MspInit+0x29c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	4a91      	ldr	r2, [pc, #580]	@ (8000bfc <HAL_ADC_MspInit+0x29c>)
 80009b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009ba:	4b90      	ldr	r3, [pc, #576]	@ (8000bfc <HAL_ADC_MspInit+0x29c>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d10b      	bne.n	80009da <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009c2:	4b8f      	ldr	r3, [pc, #572]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4a8e      	ldr	r2, [pc, #568]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 80009c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4b8c      	ldr	r3, [pc, #560]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b89      	ldr	r3, [pc, #548]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	4a88      	ldr	r2, [pc, #544]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e6:	4b86      	ldr	r3, [pc, #536]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f2:	2301      	movs	r3, #1
 80009f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f8:	2303      	movs	r3, #3
 80009fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a0e:	f003 fc39 	bl	8004284 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2012      	movs	r0, #18
 8000a18:	f003 fbe6 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a1c:	2012      	movs	r0, #18
 8000a1e:	f003 fc0d 	bl	800423c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000a22:	e149      	b.n	8000cb8 <HAL_ADC_MspInit+0x358>
  else if(adcHandle->Instance==ADC2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a76      	ldr	r2, [pc, #472]	@ (8000c04 <HAL_ADC_MspInit+0x2a4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d149      	bne.n	8000ac2 <HAL_ADC_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a32:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a34:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a38:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f008 f886 	bl	8008b50 <HAL_RCCEx_PeriphCLKConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_ADC_MspInit+0xee>
      Error_Handler();
 8000a4a:	f000 fcdf 	bl	800140c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a4e:	4b6b      	ldr	r3, [pc, #428]	@ (8000bfc <HAL_ADC_MspInit+0x29c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	4a69      	ldr	r2, [pc, #420]	@ (8000bfc <HAL_ADC_MspInit+0x29c>)
 8000a56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a58:	4b68      	ldr	r3, [pc, #416]	@ (8000bfc <HAL_ADC_MspInit+0x29c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d10b      	bne.n	8000a78 <HAL_ADC_MspInit+0x118>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a60:	4b67      	ldr	r3, [pc, #412]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a64:	4a66      	ldr	r2, [pc, #408]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000a66:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6c:	4b64      	ldr	r3, [pc, #400]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b61      	ldr	r3, [pc, #388]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7c:	4a60      	ldr	r2, [pc, #384]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a84:	4b5e      	ldr	r3, [pc, #376]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
 8000a8e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a90:	2340      	movs	r3, #64	@ 0x40
 8000a92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a96:	2303      	movs	r3, #3
 8000a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aac:	f003 fbea 	bl	8004284 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2012      	movs	r0, #18
 8000ab6:	f003 fb97 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000aba:	2012      	movs	r0, #18
 8000abc:	f003 fbbe 	bl	800423c <HAL_NVIC_EnableIRQ>
}
 8000ac0:	e0fa      	b.n	8000cb8 <HAL_ADC_MspInit+0x358>
  else if(adcHandle->Instance==ADC3)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a50      	ldr	r2, [pc, #320]	@ (8000c08 <HAL_ADC_MspInit+0x2a8>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d148      	bne.n	8000b5e <HAL_ADC_MspInit+0x1fe>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000acc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ad0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000ad2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000ad6:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000adc:	4618      	mov	r0, r3
 8000ade:	f008 f837 	bl	8008b50 <HAL_RCCEx_PeriphCLKConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <HAL_ADC_MspInit+0x18c>
      Error_Handler();
 8000ae8:	f000 fc90 	bl	800140c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000aec:	4b47      	ldr	r3, [pc, #284]	@ (8000c0c <HAL_ADC_MspInit+0x2ac>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	4a46      	ldr	r2, [pc, #280]	@ (8000c0c <HAL_ADC_MspInit+0x2ac>)
 8000af4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000af6:	4b45      	ldr	r3, [pc, #276]	@ (8000c0c <HAL_ADC_MspInit+0x2ac>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d10b      	bne.n	8000b16 <HAL_ADC_MspInit+0x1b6>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000afe:	4b40      	ldr	r3, [pc, #256]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	4a3f      	ldr	r2, [pc, #252]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b12:	61fb      	str	r3, [r7, #28]
 8000b14:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b3a      	ldr	r3, [pc, #232]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	4a39      	ldr	r2, [pc, #228]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b22:	4b37      	ldr	r3, [pc, #220]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b34:	2303      	movs	r3, #3
 8000b36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b44:	4619      	mov	r1, r3
 8000b46:	4832      	ldr	r0, [pc, #200]	@ (8000c10 <HAL_ADC_MspInit+0x2b0>)
 8000b48:	f003 fb9c 	bl	8004284 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	202f      	movs	r0, #47	@ 0x2f
 8000b52:	f003 fb49 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000b56:	202f      	movs	r0, #47	@ 0x2f
 8000b58:	f003 fb70 	bl	800423c <HAL_NVIC_EnableIRQ>
}
 8000b5c:	e0ac      	b.n	8000cb8 <HAL_ADC_MspInit+0x358>
  else if(adcHandle->Instance==ADC4)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a2c      	ldr	r2, [pc, #176]	@ (8000c14 <HAL_ADC_MspInit+0x2b4>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d159      	bne.n	8000c1c <HAL_ADC_MspInit+0x2bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000b68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b6c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000b6e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000b72:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b74:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f007 ffe9 	bl	8008b50 <HAL_RCCEx_PeriphCLKConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_ADC_MspInit+0x228>
      Error_Handler();
 8000b84:	f000 fc42 	bl	800140c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <HAL_ADC_MspInit+0x2ac>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8000c0c <HAL_ADC_MspInit+0x2ac>)
 8000b90:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000b92:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <HAL_ADC_MspInit+0x2ac>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d10b      	bne.n	8000bb2 <HAL_ADC_MspInit+0x252>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000b9a:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	4a18      	ldr	r2, [pc, #96]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba6:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb2:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb6:	4a12      	ldr	r2, [pc, #72]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000bb8:	f043 0310 	orr.w	r3, r3, #16
 8000bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <HAL_ADC_MspInit+0x2a0>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc2:	f003 0310 	and.w	r3, r3, #16
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000bca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bde:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000be2:	4619      	mov	r1, r3
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <HAL_ADC_MspInit+0x2b8>)
 8000be6:	f003 fb4d 	bl	8004284 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	203d      	movs	r0, #61	@ 0x3d
 8000bf0:	f003 fafa 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8000bf4:	203d      	movs	r0, #61	@ 0x3d
 8000bf6:	f003 fb21 	bl	800423c <HAL_NVIC_EnableIRQ>
}
 8000bfa:	e05d      	b.n	8000cb8 <HAL_ADC_MspInit+0x358>
 8000bfc:	200003c0 	.word	0x200003c0
 8000c00:	40021000 	.word	0x40021000
 8000c04:	50000100 	.word	0x50000100
 8000c08:	50000400 	.word	0x50000400
 8000c0c:	200003c4 	.word	0x200003c4
 8000c10:	48000400 	.word	0x48000400
 8000c14:	50000500 	.word	0x50000500
 8000c18:	48001000 	.word	0x48001000
  else if(adcHandle->Instance==ADC5)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a27      	ldr	r2, [pc, #156]	@ (8000cc0 <HAL_ADC_MspInit+0x360>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d148      	bne.n	8000cb8 <HAL_ADC_MspInit+0x358>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000c26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c2a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000c2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000c30:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c36:	4618      	mov	r0, r3
 8000c38:	f007 ff8a 	bl	8008b50 <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_ADC_MspInit+0x2e6>
      Error_Handler();
 8000c42:	f000 fbe3 	bl	800140c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000c46:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <HAL_ADC_MspInit+0x364>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc4 <HAL_ADC_MspInit+0x364>)
 8000c4e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000c50:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <HAL_ADC_MspInit+0x364>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d10b      	bne.n	8000c70 <HAL_ADC_MspInit+0x310>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000c58:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc8 <HAL_ADC_MspInit+0x368>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5c:	4a1a      	ldr	r2, [pc, #104]	@ (8000cc8 <HAL_ADC_MspInit+0x368>)
 8000c5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c64:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <HAL_ADC_MspInit+0x368>)
 8000c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c70:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <HAL_ADC_MspInit+0x368>)
 8000c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c74:	4a14      	ldr	r2, [pc, #80]	@ (8000cc8 <HAL_ADC_MspInit+0x368>)
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c7c:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <HAL_ADC_MspInit+0x368>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c80:	f003 0310 	and.w	r3, r3, #16
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c90:	2303      	movs	r3, #3
 8000c92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c9c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480a      	ldr	r0, [pc, #40]	@ (8000ccc <HAL_ADC_MspInit+0x36c>)
 8000ca4:	f003 faee 	bl	8004284 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC5_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	203e      	movs	r0, #62	@ 0x3e
 8000cae:	f003 fa9b 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
 8000cb2:	203e      	movs	r0, #62	@ 0x3e
 8000cb4:	f003 fac2 	bl	800423c <HAL_NVIC_EnableIRQ>
}
 8000cb8:	bf00      	nop
 8000cba:	3798      	adds	r7, #152	@ 0x98
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	50000600 	.word	0x50000600
 8000cc4:	200003c4 	.word	0x200003c4
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	48001000 	.word	0x48001000

08000cd0 <writeDbleBuf>:
    return buffer->data;
}

// Write to the Double Buffer
void writeDbleBuf (dbleBuf_t *buffer, int32_t entry)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
    buffer->data[buffer->windex] = entry;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	601a      	str	r2, [r3, #0]
    buffer->windex++;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	605a      	str	r2, [r3, #4]
    if (buffer->windex >= 2 * buffer->size) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	db02      	blt.n	8000d08 <writeDbleBuf+0x38>
       buffer->windex = 0;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
    }
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08c      	sub	sp, #48	@ 0x30
 8000d18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2a:	4b96      	ldr	r3, [pc, #600]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2e:	4a95      	ldr	r2, [pc, #596]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d36:	4b93      	ldr	r3, [pc, #588]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	4b90      	ldr	r3, [pc, #576]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d46:	4a8f      	ldr	r2, [pc, #572]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4e:	4b8d      	ldr	r3, [pc, #564]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d5a:	4b8a      	ldr	r3, [pc, #552]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5e:	4a89      	ldr	r2, [pc, #548]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000d60:	f043 0320 	orr.w	r3, r3, #32
 8000d64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d66:	4b87      	ldr	r3, [pc, #540]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6a:	f003 0320 	and.w	r3, r3, #32
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d72:	4b84      	ldr	r3, [pc, #528]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	4a83      	ldr	r2, [pc, #524]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7e:	4b81      	ldr	r3, [pc, #516]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b7e      	ldr	r3, [pc, #504]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	4a7d      	ldr	r2, [pc, #500]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d96:	4b7b      	ldr	r3, [pc, #492]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b78      	ldr	r3, [pc, #480]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	4a77      	ldr	r2, [pc, #476]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dae:	4b75      	ldr	r3, [pc, #468]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dba:	4b72      	ldr	r3, [pc, #456]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	4a71      	ldr	r2, [pc, #452]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc6:	4b6f      	ldr	r3, [pc, #444]	@ (8000f84 <MX_GPIO_Init+0x270>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f64b 413c 	movw	r1, #48188	@ 0xbc3c
 8000dd8:	486b      	ldr	r0, [pc, #428]	@ (8000f88 <MX_GPIO_Init+0x274>)
 8000dda:	f003 fca7 	bl	800472c <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000dde:	2200      	movs	r2, #0
 8000de0:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8000de4:	4869      	ldr	r0, [pc, #420]	@ (8000f8c <MX_GPIO_Init+0x278>)
 8000de6:	f003 fca1 	bl	800472c <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000df0:	4867      	ldr	r0, [pc, #412]	@ (8000f90 <MX_GPIO_Init+0x27c>)
 8000df2:	f003 fc9b 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000dfc:	4865      	ldr	r0, [pc, #404]	@ (8000f94 <MX_GPIO_Init+0x280>)
 8000dfe:	f003 fc95 	bl	800472c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	210f      	movs	r1, #15
 8000e06:	4863      	ldr	r0, [pc, #396]	@ (8000f94 <MX_GPIO_Init+0x280>)
 8000e08:	f003 fc90 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE10 PE11 PE12 PE13
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000e0c:	f64b 433c 	movw	r3, #48188	@ 0xbc3c
 8000e10:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	4858      	ldr	r0, [pc, #352]	@ (8000f88 <MX_GPIO_Init+0x274>)
 8000e26:	f003 fa2d 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE9 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_0
 8000e2a:	f240 23c3 	movw	r3, #707	@ 0x2c3
 8000e2e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e30:	2303      	movs	r3, #3
 8000e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4852      	ldr	r0, [pc, #328]	@ (8000f88 <MX_GPIO_Init+0x274>)
 8000e40:	f003 fa20 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	484b      	ldr	r0, [pc, #300]	@ (8000f8c <MX_GPIO_Init+0x278>)
 8000e5e:	f003 fa11 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e62:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4845      	ldr	r0, [pc, #276]	@ (8000f8c <MX_GPIO_Init+0x278>)
 8000e78:	f003 fa04 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF9 PF10 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_2;
 8000e7c:	f240 6304 	movw	r3, #1540	@ 0x604
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e82:	2303      	movs	r3, #3
 8000e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4841      	ldr	r0, [pc, #260]	@ (8000f98 <MX_GPIO_Init+0x284>)
 8000e92:	f003 f9f7 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	483c      	ldr	r0, [pc, #240]	@ (8000f9c <MX_GPIO_Init+0x288>)
 8000eac:	f003 f9ea 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000eb0:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000eb4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4830      	ldr	r0, [pc, #192]	@ (8000f8c <MX_GPIO_Init+0x278>)
 8000eca:	f003 f9db 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA7 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000ece:	f248 63be 	movw	r3, #34494	@ 0x86be
 8000ed2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee6:	f003 f9cd 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000eea:	f640 73fd 	movw	r3, #4093	@ 0xffd
 8000eee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	4824      	ldr	r0, [pc, #144]	@ (8000f90 <MX_GPIO_Init+0x27c>)
 8000f00:	f003 f9c0 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f04:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	481c      	ldr	r0, [pc, #112]	@ (8000f90 <MX_GPIO_Init+0x27c>)
 8000f1e:	f003 f9b1 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f22:	f64f 730f 	movw	r3, #65295	@ 0xff0f
 8000f26:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4816      	ldr	r0, [pc, #88]	@ (8000f94 <MX_GPIO_Init+0x280>)
 8000f3c:	f003 f9a2 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f60:	f003 f990 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f64:	23f0      	movs	r3, #240	@ 0xf0
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	4619      	mov	r1, r3
 8000f76:	4807      	ldr	r0, [pc, #28]	@ (8000f94 <MX_GPIO_Init+0x280>)
 8000f78:	f003 f984 	bl	8004284 <HAL_GPIO_Init>

}
 8000f7c:	bf00      	nop
 8000f7e:	3730      	adds	r7, #48	@ 0x30
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40021000 	.word	0x40021000
 8000f88:	48001000 	.word	0x48001000
 8000f8c:	48000800 	.word	0x48000800
 8000f90:	48000400 	.word	0x48000400
 8000f94:	48000c00 	.word	0x48000c00
 8000f98:	48001400 	.word	0x48001400
 8000f9c:	48001800 	.word	0x48001800

08000fa0 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b0a4      	sub	sp, #144	@ 0x90
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000fa6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8000fb4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2260      	movs	r2, #96	@ 0x60
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f00f fbbc 	bl	801074c <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8000fd4:	4b44      	ldr	r3, [pc, #272]	@ (80010e8 <MX_HRTIM1_Init+0x148>)
 8000fd6:	4a45      	ldr	r2, [pc, #276]	@ (80010ec <MX_HRTIM1_Init+0x14c>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000fda:	4b43      	ldr	r3, [pc, #268]	@ (80010e8 <MX_HRTIM1_Init+0x148>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000fe0:	4b41      	ldr	r3, [pc, #260]	@ (80010e8 <MX_HRTIM1_Init+0x148>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000fe6:	4840      	ldr	r0, [pc, #256]	@ (80010e8 <MX_HRTIM1_Init+0x148>)
 8000fe8:	f003 fbee 	bl	80047c8 <HAL_HRTIM_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_HRTIM1_Init+0x56>
  {
    Error_Handler();
 8000ff2:	f000 fa0b 	bl	800140c <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8000ff6:	210c      	movs	r1, #12
 8000ff8:	483b      	ldr	r0, [pc, #236]	@ (80010e8 <MX_HRTIM1_Init+0x148>)
 8000ffa:	f003 fd0d 	bl	8004a18 <HAL_HRTIM_DLLCalibrationStart>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_HRTIM1_Init+0x68>
  {
    Error_Handler();
 8001004:	f000 fa02 	bl	800140c <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8001008:	210a      	movs	r1, #10
 800100a:	4837      	ldr	r0, [pc, #220]	@ (80010e8 <MX_HRTIM1_Init+0x148>)
 800100c:	f003 fd72 	bl	8004af4 <HAL_HRTIM_PollForDLLCalibration>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_HRTIM1_Init+0x7a>
  {
    Error_Handler();
 8001016:	f000 f9f9 	bl	800140c <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 800101a:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 800101e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800102e:	2308      	movs	r3, #8
 8001030:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001034:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001038:	461a      	mov	r2, r3
 800103a:	2100      	movs	r1, #0
 800103c:	482a      	ldr	r0, [pc, #168]	@ (80010e8 <MX_HRTIM1_Init+0x148>)
 800103e:	f003 fd8d 	bl	8004b5c <HAL_HRTIM_TimeBaseConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 8001048:	f000 f9e0 	bl	800140c <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 800104c:	2300      	movs	r3, #0
 800104e:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8001050:	2300      	movs	r3, #0
 8001052:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8001054:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001058:	461a      	mov	r2, r3
 800105a:	2100      	movs	r1, #0
 800105c:	4822      	ldr	r0, [pc, #136]	@ (80010e8 <MX_HRTIM1_Init+0x148>)
 800105e:	f004 f839 	bl	80050d4 <HAL_HRTIM_WaveformTimerControl>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_HRTIM1_Init+0xcc>
  {
    Error_Handler();
 8001068:	f000 f9d0 	bl	800140c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  pTimerCfg.DMASrcAddress = 0x0000;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  pTimerCfg.DMADstAddress = 0x0000;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMASize = 0x1;
 800107c:	2301      	movs	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001090:	2300      	movs	r3, #0
 8001092:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001098:	2300      	movs	r3, #0
 800109a:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800109c:	2300      	movs	r3, #0
 800109e:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80010b0:	2300      	movs	r3, #0
 80010b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80010b4:	2300      	movs	r3, #0
 80010b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80010bc:	2300      	movs	r3, #0
 80010be:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80010c0:	2300      	movs	r3, #0
 80010c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	461a      	mov	r2, r3
 80010cc:	2100      	movs	r1, #0
 80010ce:	4806      	ldr	r0, [pc, #24]	@ (80010e8 <MX_HRTIM1_Init+0x148>)
 80010d0:	f003 fdbe 	bl	8004c50 <HAL_HRTIM_WaveformTimerConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_HRTIM1_Init+0x13e>
  {
    Error_Handler();
 80010da:	f000 f997 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3790      	adds	r7, #144	@ 0x90
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200003c8 	.word	0x200003c8
 80010ec:	40016800 	.word	0x40016800

080010f0 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <HAL_HRTIM_MspInit+0x44>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d113      	bne.n	800112a <HAL_HRTIM_MspInit+0x3a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001102:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <HAL_HRTIM_MspInit+0x48>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001106:	4a0c      	ldr	r2, [pc, #48]	@ (8001138 <HAL_HRTIM_MspInit+0x48>)
 8001108:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800110c:	6613      	str	r3, [r2, #96]	@ 0x60
 800110e:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <HAL_HRTIM_MspInit+0x48>)
 8001110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001112:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]

    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	2044      	movs	r0, #68	@ 0x44
 8001120:	f003 f862 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8001124:	2044      	movs	r0, #68	@ 0x44
 8001126:	f003 f889 	bl	800423c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40016800 	.word	0x40016800
 8001138:	40021000 	.word	0x40021000

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001140:	f000 fb73 	bl	800182a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001144:	f000 f820 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001148:	f7ff fde4 	bl	8000d14 <MX_GPIO_Init>
  MX_USB_Device_Init();
 800114c:	f00e fe1a 	bl	800fd84 <MX_USB_Device_Init>
  MX_ADC1_Init();
 8001150:	f7ff f9da 	bl	8000508 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001154:	f7ff fa52 	bl	80005fc <MX_ADC2_Init>
  MX_ADC3_Init();
 8001158:	f7ff fab8 	bl	80006cc <MX_ADC3_Init>
  MX_ADC4_Init();
 800115c:	f7ff fb30 	bl	80007c0 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001160:	f7ff fb96 	bl	8000890 <MX_ADC5_Init>
  MX_TIM1_Init();
 8001164:	f000 fa16 	bl	8001594 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001168:	f000 faa4 	bl	80016b4 <MX_TIM2_Init>
  MX_HRTIM1_Init();
 800116c:	f7ff ff18 	bl	8000fa0 <MX_HRTIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8001170:	2104      	movs	r1, #4
 8001172:	4804      	ldr	r0, [pc, #16]	@ (8001184 <main+0x48>)
 8001174:	f003 fb06 	bl	8004784 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001178:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800117c:	f000 fbc6 	bl	800190c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8001180:	bf00      	nop
 8001182:	e7f5      	b.n	8001170 <main+0x34>
 8001184:	48000c00 	.word	0x48000c00

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	@ 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	2238      	movs	r2, #56	@ 0x38
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f00f fad8 	bl	801074c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011ae:	f006 fc99 	bl	8007ae4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c0:	2303      	movs	r3, #3
 80011c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80011c4:	2303      	movs	r3, #3
 80011c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 80011c8:	2312      	movs	r3, #18
 80011ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80011d0:	2306      	movs	r3, #6
 80011d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d8:	f107 0318 	add.w	r3, r7, #24
 80011dc:	4618      	mov	r0, r3
 80011de:	f006 fd45 	bl	8007c6c <HAL_RCC_OscConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x64>
  {
    Error_Handler();
 80011e8:	f000 f910 	bl	800140c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ec:	230f      	movs	r3, #15
 80011ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f0:	2303      	movs	r3, #3
 80011f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2104      	movs	r1, #4
 8001204:	4618      	mov	r0, r3
 8001206:	f007 f93d 	bl	8008484 <HAL_RCC_ClockConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001210:	f000 f8fc 	bl	800140c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_8);
 8001214:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001218:	f04f 61a0 	mov.w	r1, #83886080	@ 0x5000000
 800121c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001220:	f007 fb2e 	bl	8008880 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001224:	f007 fc22 	bl	8008a6c <HAL_RCC_EnableCSS>
}
 8001228:	bf00      	nop
 800122a:	3750      	adds	r7, #80	@ 0x50
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_ADC_ConvCpltCallback>:
 * Args:
 * 		hadc: handle type for the adc, defines which
 * 			adc is being used
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
//	char buffer[USB_PAYLOAD + 1];
    if (hadc->Instance == ADC1) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001240:	d108      	bne.n	8001254 <HAL_ADC_ConvCpltCallback+0x24>
//    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0);
    	uint32_t adc1_val = HAL_ADC_GetValue(hadc);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f001 fa4a 	bl	80026dc <HAL_ADC_GetValue>
 8001248:	61f8      	str	r0, [r7, #28]

    	writeDbleBuf (&buffers.adc1, adc1_val);
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	4619      	mov	r1, r3
 800124e:	481f      	ldr	r0, [pc, #124]	@ (80012cc <HAL_ADC_ConvCpltCallback+0x9c>)
 8001250:	f7ff fd3e 	bl	8000cd0 <writeDbleBuf>
    }
    if (hadc->Instance == ADC2) {
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a1d      	ldr	r2, [pc, #116]	@ (80012d0 <HAL_ADC_ConvCpltCallback+0xa0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d108      	bne.n	8001270 <HAL_ADC_ConvCpltCallback+0x40>
    	uint32_t adc2_val = HAL_ADC_GetValue(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f001 fa3c 	bl	80026dc <HAL_ADC_GetValue>
 8001264:	61b8      	str	r0, [r7, #24]
    	writeDbleBuf (&buffers.adc2, adc2_val);
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4619      	mov	r1, r3
 800126a:	481a      	ldr	r0, [pc, #104]	@ (80012d4 <HAL_ADC_ConvCpltCallback+0xa4>)
 800126c:	f7ff fd30 	bl	8000cd0 <writeDbleBuf>
    }
    if (hadc->Instance == ADC3) {
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a18      	ldr	r2, [pc, #96]	@ (80012d8 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d108      	bne.n	800128c <HAL_ADC_ConvCpltCallback+0x5c>
    	uint32_t adc3_val = HAL_ADC_GetValue(hadc);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f001 fa2e 	bl	80026dc <HAL_ADC_GetValue>
 8001280:	6178      	str	r0, [r7, #20]
    	writeDbleBuf (&buffers.adc3, adc3_val);
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	4619      	mov	r1, r3
 8001286:	4815      	ldr	r0, [pc, #84]	@ (80012dc <HAL_ADC_ConvCpltCallback+0xac>)
 8001288:	f7ff fd22 	bl	8000cd0 <writeDbleBuf>
    }
    if (hadc->Instance == ADC4) {
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a13      	ldr	r2, [pc, #76]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d108      	bne.n	80012a8 <HAL_ADC_ConvCpltCallback+0x78>
    	uint32_t adc4_val = HAL_ADC_GetValue(hadc);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f001 fa20 	bl	80026dc <HAL_ADC_GetValue>
 800129c:	6138      	str	r0, [r7, #16]
    	writeDbleBuf (&buffers.adc4, adc4_val);
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <HAL_ADC_ConvCpltCallback+0xb4>)
 80012a4:	f7ff fd14 	bl	8000cd0 <writeDbleBuf>
    }
    if (hadc->Instance == ADC5) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0e      	ldr	r2, [pc, #56]	@ (80012e8 <HAL_ADC_ConvCpltCallback+0xb8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d108      	bne.n	80012c4 <HAL_ADC_ConvCpltCallback+0x94>
    	uint32_t adc5_val = HAL_ADC_GetValue(hadc);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f001 fa12 	bl	80026dc <HAL_ADC_GetValue>
 80012b8:	60f8      	str	r0, [r7, #12]
    	writeDbleBuf (&buffers.adc5, adc5_val);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4619      	mov	r1, r3
 80012be:	480b      	ldr	r0, [pc, #44]	@ (80012ec <HAL_ADC_ConvCpltCallback+0xbc>)
 80012c0:	f7ff fd06 	bl	8000cd0 <writeDbleBuf>
    }
}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2000065c 	.word	0x2000065c
 80012d0:	50000100 	.word	0x50000100
 80012d4:	2000066c 	.word	0x2000066c
 80012d8:	50000400 	.word	0x50000400
 80012dc:	2000067c 	.word	0x2000067c
 80012e0:	50000500 	.word	0x50000500
 80012e4:	2000068c 	.word	0x2000068c
 80012e8:	50000600 	.word	0x50000600
 80012ec:	2000069c 	.word	0x2000069c

080012f0 <HAL_TIM_PeriodElapsedCallback>:
 * Args:
 * 		htim: handle type for the timer to define
 * 			which timer has triggered the callback.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80012f0:	b5b0      	push	{r4, r5, r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001300:	d138      	bne.n	8001374 <HAL_TIM_PeriodElapsedCallback+0x84>
		gl_ticks++;
 8001302:	4b1e      	ldr	r3, [pc, #120]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	1c54      	adds	r4, r2, #1
 800130a:	f143 0500 	adc.w	r5, r3, #0
 800130e:	4b1b      	ldr	r3, [pc, #108]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001310:	e9c3 4500 	strd	r4, r5, [r3]
	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / MAIN_FREQ) == 1) {
 8001314:	4b19      	ldr	r3, [pc, #100]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001316:	e9d3 0100 	ldrd	r0, r1, [r3]
 800131a:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	f7fe ff79 	bl	8000218 <__aeabi_uldivmod>
 8001326:	1e51      	subs	r1, r2, #1
 8001328:	430b      	orrs	r3, r1
 800132a:	d102      	bne.n	8001332 <HAL_TIM_PeriodElapsedCallback+0x42>
			is_main = 1; //1Hz
 800132c:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
		}
	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / USB_FREQ) == 1) {
 8001332:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001338:	f04f 020a 	mov.w	r2, #10
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	f7fe ff6a 	bl	8000218 <__aeabi_uldivmod>
 8001344:	1e51      	subs	r1, r2, #1
 8001346:	430b      	orrs	r3, r1
 8001348:	d102      	bne.n	8001350 <HAL_TIM_PeriodElapsedCallback+0x60>
	    	is_usb = 1;
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800134c:	2201      	movs	r2, #1
 800134e:	701a      	strb	r2, [r3, #0]
	    }
	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / VOLTAGE_FREQ) == 1) {
 8001350:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001352:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001356:	f04f 0264 	mov.w	r2, #100	@ 0x64
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	f7fe ff5b 	bl	8000218 <__aeabi_uldivmod>
//	    	is_voltage_mux = 1;
	    }
	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / CURRENT_FREQ) == 1) {
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001368:	f04f 0264 	mov.w	r2, #100	@ 0x64
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	f7fe ff52 	bl	8000218 <__aeabi_uldivmod>
//        if (gl_ticks >= TIMER2_FREQ) {
//            gl_ticks = 0;
//        }
	}

}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bdb0      	pop	{r4, r5, r7, pc}
 800137c:	200006b0 	.word	0x200006b0
 8001380:	200006b8 	.word	0x200006b8
 8001384:	200006b9 	.word	0x200006b9

08001388 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
	if (hhrtim->Instance == HRTIM1) {
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a0e      	ldr	r2, [pc, #56]	@ (80013d0 <HAL_HRTIM_RepetitionEventCallback+0x48>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d114      	bne.n	80013c6 <HAL_HRTIM_RepetitionEventCallback+0x3e>
		write_dac(sinewave[sine_idx]);
 800139c:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <HAL_HRTIM_RepetitionEventCallback+0x4c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0d      	ldr	r2, [pc, #52]	@ (80013d8 <HAL_HRTIM_RepetitionEventCallback+0x50>)
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f817 	bl	80013dc <write_dac>
		sine_idx++;
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <HAL_HRTIM_RepetitionEventCallback+0x4c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a07      	ldr	r2, [pc, #28]	@ (80013d4 <HAL_HRTIM_RepetitionEventCallback+0x4c>)
 80013b6:	6013      	str	r3, [r2, #0]
		if (sine_idx > (LUT_SIZE-1)) {
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_HRTIM_RepetitionEventCallback+0x4c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b63      	cmp	r3, #99	@ 0x63
 80013be:	d902      	bls.n	80013c6 <HAL_HRTIM_RepetitionEventCallback+0x3e>
			sine_idx=0;
 80013c0:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <HAL_HRTIM_RepetitionEventCallback+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
		}
	}
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40016800 	.word	0x40016800
 80013d4:	20000654 	.word	0x20000654
 80013d8:	200004c4 	.word	0x200004c4

080013dc <write_dac>:
 *
 * Args:
 * 		value: The number that is being written
 * 			to the DAC
 */
void write_dac(uint16_t value){
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
	if (value >= 16383) {
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	f643 72fe 	movw	r2, #16382	@ 0x3ffe
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d902      	bls.n	80013f6 <write_dac+0x1a>
		value = 16383;
 80013f0:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80013f4:	80fb      	strh	r3, [r7, #6]
	}
	GPIOC->ODR = value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <write_dac+0x2c>)
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	6153      	str	r3, [r2, #20]

}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	48000800 	.word	0x48000800

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <Error_Handler+0x8>

08001418 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <HAL_MspInit+0x44>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143a:	4a0e      	ldr	r2, [pc, #56]	@ (8001474 <HAL_MspInit+0x44>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6613      	str	r3, [r2, #96]	@ 0x60
 8001442:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <HAL_MspInit+0x44>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <HAL_MspInit+0x44>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001452:	4a08      	ldr	r2, [pc, #32]	@ (8001474 <HAL_MspInit+0x44>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001458:	6593      	str	r3, [r2, #88]	@ 0x58
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_MspInit+0x44>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001466:	f006 fbf1 	bl	8007c4c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800147c:	f007 fb06 	bl	8008a8c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <NMI_Handler+0x8>

08001484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <MemManage_Handler+0x4>

08001494 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d2:	f000 f9fd 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014e0:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <ADC1_2_IRQHandler+0x14>)
 80014e2:	f001 f92f 	bl	8002744 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80014e6:	4803      	ldr	r0, [pc, #12]	@ (80014f4 <ADC1_2_IRQHandler+0x18>)
 80014e8:	f001 f92c 	bl	8002744 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200001a4 	.word	0x200001a4
 80014f4:	20000210 	.word	0x20000210

080014f8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80014fc:	4802      	ldr	r0, [pc, #8]	@ (8001508 <USB_LP_IRQHandler+0x10>)
 80014fe:	f004 fead 	bl	800625c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20001c2c 	.word	0x20001c2c

0800150c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001510:	4802      	ldr	r0, [pc, #8]	@ (800151c <TIM2_IRQHandler+0x10>)
 8001512:	f008 f9a7 	bl	8009864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000708 	.word	0x20000708

08001520 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <ADC3_IRQHandler+0x10>)
 8001526:	f001 f90d 	bl	8002744 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000027c 	.word	0x2000027c

08001534 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001538:	4802      	ldr	r0, [pc, #8]	@ (8001544 <ADC4_IRQHandler+0x10>)
 800153a:	f001 f903 	bl	8002744 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200002e8 	.word	0x200002e8

08001548 <ADC5_IRQHandler>:

/**
  * @brief This function handles ADC5 global interrupt.
  */
void ADC5_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC5_IRQn 0 */

  /* USER CODE END ADC5_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc5);
 800154c:	4802      	ldr	r0, [pc, #8]	@ (8001558 <ADC5_IRQHandler+0x10>)
 800154e:	f001 f8f9 	bl	8002744 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC5_IRQn 1 */

  /* USER CODE END ADC5_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000354 	.word	0x20000354

0800155c <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_TIMER_A);
 8001560:	2100      	movs	r1, #0
 8001562:	4802      	ldr	r0, [pc, #8]	@ (800156c <HRTIM1_TIMA_IRQHandler+0x10>)
 8001564:	f003 fe64 	bl	8005230 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200003c8 	.word	0x200003c8

08001570 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <SystemInit+0x20>)
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800157a:	4a05      	ldr	r2, [pc, #20]	@ (8001590 <SystemInit+0x20>)
 800157c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001580:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b098      	sub	sp, #96	@ 0x60
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2234      	movs	r2, #52	@ 0x34
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f00f f8c3 	bl	801074c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015c6:	4b39      	ldr	r3, [pc, #228]	@ (80016ac <MX_TIM1_Init+0x118>)
 80015c8:	4a39      	ldr	r2, [pc, #228]	@ (80016b0 <MX_TIM1_Init+0x11c>)
 80015ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015cc:	4b37      	ldr	r3, [pc, #220]	@ (80016ac <MX_TIM1_Init+0x118>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b36      	ldr	r3, [pc, #216]	@ (80016ac <MX_TIM1_Init+0x118>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9600;
 80015d8:	4b34      	ldr	r3, [pc, #208]	@ (80016ac <MX_TIM1_Init+0x118>)
 80015da:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e0:	4b32      	ldr	r3, [pc, #200]	@ (80016ac <MX_TIM1_Init+0x118>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015e6:	4b31      	ldr	r3, [pc, #196]	@ (80016ac <MX_TIM1_Init+0x118>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ec:	4b2f      	ldr	r3, [pc, #188]	@ (80016ac <MX_TIM1_Init+0x118>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015f2:	482e      	ldr	r0, [pc, #184]	@ (80016ac <MX_TIM1_Init+0x118>)
 80015f4:	f008 f824 	bl	8009640 <HAL_TIM_PWM_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80015fe:	f7ff ff05 	bl	800140c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001602:	2320      	movs	r3, #32
 8001604:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800160e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001612:	4619      	mov	r1, r3
 8001614:	4825      	ldr	r0, [pc, #148]	@ (80016ac <MX_TIM1_Init+0x118>)
 8001616:	f00a f8fb 	bl	800b810 <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001620:	f7ff fef4 	bl	800140c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001624:	2360      	movs	r3, #96	@ 0x60
 8001626:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162c:	2300      	movs	r3, #0
 800162e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001630:	2300      	movs	r3, #0
 8001632:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001640:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001644:	2200      	movs	r2, #0
 8001646:	4619      	mov	r1, r3
 8001648:	4818      	ldr	r0, [pc, #96]	@ (80016ac <MX_TIM1_Init+0x118>)
 800164a:	f008 fa5b 	bl	8009b04 <HAL_TIM_PWM_ConfigChannel>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001654:	f7ff feda 	bl	800140c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800166c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001670:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800167e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001682:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001688:	2300      	movs	r3, #0
 800168a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	@ (80016ac <MX_TIM1_Init+0x118>)
 8001696:	f00a fa2b 	bl	800baf0 <HAL_TIMEx_ConfigBreakDeadTime>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80016a0:	f7ff feb4 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	3760      	adds	r7, #96	@ 0x60
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200006bc 	.word	0x200006bc
 80016b0:	40012c00 	.word	0x40012c00

080016b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001748 <MX_TIM2_Init+0x94>)
 80016d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96;
 80016da:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <MX_TIM2_Init+0x94>)
 80016dc:	2260      	movs	r2, #96	@ 0x60
 80016de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e0:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <MX_TIM2_Init+0x94>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 80016e6:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <MX_TIM2_Init+0x94>)
 80016e8:	4a18      	ldr	r2, [pc, #96]	@ (800174c <MX_TIM2_Init+0x98>)
 80016ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ec:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <MX_TIM2_Init+0x94>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <MX_TIM2_Init+0x94>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f8:	4813      	ldr	r0, [pc, #76]	@ (8001748 <MX_TIM2_Init+0x94>)
 80016fa:	f007 fe8f 	bl	800941c <HAL_TIM_Base_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001704:	f7ff fe82 	bl	800140c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800170c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800170e:	f107 0310 	add.w	r3, r7, #16
 8001712:	4619      	mov	r1, r3
 8001714:	480c      	ldr	r0, [pc, #48]	@ (8001748 <MX_TIM2_Init+0x94>)
 8001716:	f008 fc65 	bl	8009fe4 <HAL_TIM_ConfigClockSource>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001720:	f7ff fe74 	bl	800140c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	4619      	mov	r1, r3
 8001730:	4805      	ldr	r0, [pc, #20]	@ (8001748 <MX_TIM2_Init+0x94>)
 8001732:	f00a f86d 	bl	800b810 <HAL_TIMEx_MasterConfigSynchronization>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800173c:	f7ff fe66 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000708 	.word	0x20000708
 800174c:	000186a0 	.word	0x000186a0

08001750 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0a      	ldr	r2, [pc, #40]	@ (8001788 <HAL_TIM_PWM_MspInit+0x38>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d10b      	bne.n	800177a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001762:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <HAL_TIM_PWM_MspInit+0x3c>)
 8001764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001766:	4a09      	ldr	r2, [pc, #36]	@ (800178c <HAL_TIM_PWM_MspInit+0x3c>)
 8001768:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800176c:	6613      	str	r3, [r2, #96]	@ 0x60
 800176e:	4b07      	ldr	r3, [pc, #28]	@ (800178c <HAL_TIM_PWM_MspInit+0x3c>)
 8001770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001772:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40012c00 	.word	0x40012c00
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017a0:	d113      	bne.n	80017ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a2:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <HAL_TIM_Base_MspInit+0x44>)
 80017a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a6:	4a0b      	ldr	r2, [pc, #44]	@ (80017d4 <HAL_TIM_Base_MspInit+0x44>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <HAL_TIM_Base_MspInit+0x44>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	201c      	movs	r0, #28
 80017c0:	f002 fd12 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017c4:	201c      	movs	r0, #28
 80017c6:	f002 fd39 	bl	800423c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000

080017d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017d8:	480d      	ldr	r0, [pc, #52]	@ (8001810 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017dc:	f7ff fec8 	bl	8001570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <LoopForever+0x6>)
  ldr r1, =_edata
 80017e2:	490d      	ldr	r1, [pc, #52]	@ (8001818 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <LoopForever+0xe>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001824 <LoopForever+0x16>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001806:	f00e ffa9 	bl	801075c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800180a:	f7ff fc97 	bl	800113c <main>

0800180e <LoopForever>:

LoopForever:
    b LoopForever
 800180e:	e7fe      	b.n	800180e <LoopForever>
  ldr   r0, =_estack
 8001810:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800181c:	08010d10 	.word	0x08010d10
  ldr r2, =_sbss
 8001820:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8001824:	20002128 	.word	0x20002128

08001828 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <COMP1_2_3_IRQHandler>

0800182a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f002 fcb7 	bl	80041a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800183a:	200f      	movs	r0, #15
 800183c:	f000 f80e 	bl	800185c <HAL_InitTick>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	e001      	b.n	8001850 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800184c:	f7ff fdf0 	bl	8001430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001850:	79fb      	ldrb	r3, [r7, #7]

}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001868:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <HAL_InitTick+0x68>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d022      	beq.n	80018b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001870:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <HAL_InitTick+0x6c>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <HAL_InitTick+0x68>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800187c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001880:	fbb2 f3f3 	udiv	r3, r2, r3
 8001884:	4618      	mov	r0, r3
 8001886:	f002 fcf1 	bl	800426c <HAL_SYSTICK_Config>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10f      	bne.n	80018b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b0f      	cmp	r3, #15
 8001894:	d809      	bhi.n	80018aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001896:	2200      	movs	r2, #0
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	f04f 30ff 	mov.w	r0, #4294967295
 800189e:	f002 fca3 	bl	80041e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <HAL_InitTick+0x70>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e007      	b.n	80018ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	73fb      	strb	r3, [r7, #15]
 80018ae:	e004      	b.n	80018ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	e001      	b.n	80018ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000008 	.word	0x20000008
 80018c8:	20000000 	.word	0x20000000
 80018cc:	20000004 	.word	0x20000004

080018d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <HAL_IncTick+0x1c>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_IncTick+0x20>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4413      	add	r3, r2
 80018de:	4a03      	ldr	r2, [pc, #12]	@ (80018ec <HAL_IncTick+0x1c>)
 80018e0:	6013      	str	r3, [r2, #0]
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	20000754 	.word	0x20000754
 80018f0:	20000008 	.word	0x20000008

080018f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return uwTick;
 80018f8:	4b03      	ldr	r3, [pc, #12]	@ (8001908 <HAL_GetTick+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000754 	.word	0x20000754

0800190c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff ffee 	bl	80018f4 <HAL_GetTick>
 8001918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d004      	beq.n	8001930 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <HAL_Delay+0x40>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4413      	add	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001930:	bf00      	nop
 8001932:	f7ff ffdf 	bl	80018f4 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	429a      	cmp	r2, r3
 8001940:	d8f7      	bhi.n	8001932 <HAL_Delay+0x26>
  {
  }
}
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000008 	.word	0x20000008

08001950 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	609a      	str	r2, [r3, #8]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(const ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0318 	and.w	r3, r3, #24
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3360      	adds	r3, #96	@ 0x60
 80019e6:	461a      	mov	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <LL_ADC_SetOffset+0x44>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	4313      	orrs	r3, r2
 8001a04:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a0c:	bf00      	nop
 8001a0e:	371c      	adds	r7, #28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	03fff000 	.word	0x03fff000

08001a1c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3360      	adds	r3, #96	@ 0x60
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3360      	adds	r3, #96	@ 0x60
 8001a58:	461a      	mov	r2, r3
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b087      	sub	sp, #28
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3360      	adds	r3, #96	@ 0x60
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001aa8:	bf00      	nop
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3360      	adds	r3, #96	@ 0x60
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ade:	bf00      	nop
 8001ae0:	371c      	adds	r7, #28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	615a      	str	r2, [r3, #20]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b087      	sub	sp, #28
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	3330      	adds	r3, #48	@ 0x30
 8001b46:	461a      	mov	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	0a1b      	lsrs	r3, r3, #8
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	4413      	add	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	211f      	movs	r1, #31
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	401a      	ands	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	0e9b      	lsrs	r3, r3, #26
 8001b6e:	f003 011f 	and.w	r1, r3, #31
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b82:	bf00      	nop
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3314      	adds	r3, #20
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	0e5b      	lsrs	r3, r3, #25
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	4413      	add	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	0d1b      	lsrs	r3, r3, #20
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	2107      	movs	r1, #7
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	401a      	ands	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	0d1b      	lsrs	r3, r3, #20
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bfe:	bf00      	nop
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c24:	43db      	mvns	r3, r3
 8001c26:	401a      	ands	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0318 	and.w	r3, r3, #24
 8001c2e:	4908      	ldr	r1, [pc, #32]	@ (8001c50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c30:	40d9      	lsrs	r1, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	400b      	ands	r3, r1
 8001c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	0007ffff 	.word	0x0007ffff

08001c54 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 031f 	and.w	r3, r3, #31
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6093      	str	r3, [r2, #8]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cc4:	d101      	bne.n	8001cca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ce8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d14:	d101      	bne.n	8001d1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <LL_ADC_IsEnabled+0x18>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <LL_ADC_IsEnabled+0x1a>
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d101      	bne.n	8001d66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d101      	bne.n	8001d8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b089      	sub	sp, #36	@ 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d102      	bne.n	8001db8 <HAL_ADC_Init+0x1c>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	f000 bc8c 	b.w	80026d0 <HAL_ADC_Init+0x934>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dc0:	d018      	beq.n	8001df4 <HAL_ADC_Init+0x58>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a63      	ldr	r2, [pc, #396]	@ (8001f54 <HAL_ADC_Init+0x1b8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d013      	beq.n	8001df4 <HAL_ADC_Init+0x58>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a61      	ldr	r2, [pc, #388]	@ (8001f58 <HAL_ADC_Init+0x1bc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00e      	beq.n	8001df4 <HAL_ADC_Init+0x58>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a60      	ldr	r2, [pc, #384]	@ (8001f5c <HAL_ADC_Init+0x1c0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d009      	beq.n	8001df4 <HAL_ADC_Init+0x58>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a5e      	ldr	r2, [pc, #376]	@ (8001f60 <HAL_ADC_Init+0x1c4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_ADC_Init+0x58>
 8001dea:	f240 119b 	movw	r1, #411	@ 0x19b
 8001dee:	485d      	ldr	r0, [pc, #372]	@ (8001f64 <HAL_ADC_Init+0x1c8>)
 8001df0:	f7ff fb12 	bl	8001418 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dfc:	d049      	beq.n	8001e92 <HAL_ADC_Init+0xf6>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e06:	d044      	beq.n	8001e92 <HAL_ADC_Init+0xf6>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001e10:	d03f      	beq.n	8001e92 <HAL_ADC_Init+0xf6>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d03b      	beq.n	8001e92 <HAL_ADC_Init+0xf6>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001e22:	d036      	beq.n	8001e92 <HAL_ADC_Init+0xf6>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001e2c:	d031      	beq.n	8001e92 <HAL_ADC_Init+0xf6>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001e36:	d02c      	beq.n	8001e92 <HAL_ADC_Init+0xf6>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e40:	d027      	beq.n	8001e92 <HAL_ADC_Init+0xf6>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001e4a:	d022      	beq.n	8001e92 <HAL_ADC_Init+0xf6>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001e54:	d01d      	beq.n	8001e92 <HAL_ADC_Init+0xf6>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001e5e:	d018      	beq.n	8001e92 <HAL_ADC_Init+0xf6>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e68:	d013      	beq.n	8001e92 <HAL_ADC_Init+0xf6>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001e72:	d00e      	beq.n	8001e92 <HAL_ADC_Init+0xf6>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001e7c:	d009      	beq.n	8001e92 <HAL_ADC_Init+0xf6>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001e86:	d004      	beq.n	8001e92 <HAL_ADC_Init+0xf6>
 8001e88:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8001e8c:	4835      	ldr	r0, [pc, #212]	@ (8001f64 <HAL_ADC_Init+0x1c8>)
 8001e8e:	f7ff fac3 	bl	8001418 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d010      	beq.n	8001ebc <HAL_ADC_Init+0x120>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d00c      	beq.n	8001ebc <HAL_ADC_Init+0x120>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b10      	cmp	r3, #16
 8001ea8:	d008      	beq.n	8001ebc <HAL_ADC_Init+0x120>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b18      	cmp	r3, #24
 8001eb0:	d004      	beq.n	8001ebc <HAL_ADC_Init+0x120>
 8001eb2:	f240 119d 	movw	r1, #413	@ 0x19d
 8001eb6:	482b      	ldr	r0, [pc, #172]	@ (8001f64 <HAL_ADC_Init+0x1c8>)
 8001eb8:	f7ff faae 	bl	8001418 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d009      	beq.n	8001ed8 <HAL_ADC_Init+0x13c>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ecc:	d004      	beq.n	8001ed8 <HAL_ADC_Init+0x13c>
 8001ece:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8001ed2:	4824      	ldr	r0, [pc, #144]	@ (8001f64 <HAL_ADC_Init+0x1c8>)
 8001ed4:	f7ff faa0 	bl	8001418 <assert_failed>
  assert_param(IS_ADC_GAIN_COMPENSATION(hadc->Init.GainCompensation));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f244 0209 	movw	r2, #16393	@ 0x4009
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d904      	bls.n	8001eee <HAL_ADC_Init+0x152>
 8001ee4:	f240 119f 	movw	r1, #415	@ 0x19f
 8001ee8:	481e      	ldr	r0, [pc, #120]	@ (8001f64 <HAL_ADC_Init+0x1c8>)
 8001eea:	f7ff fa95 	bl	8001418 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <HAL_ADC_Init+0x16c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d004      	beq.n	8001f08 <HAL_ADC_Init+0x16c>
 8001efe:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8001f02:	4818      	ldr	r0, [pc, #96]	@ (8001f64 <HAL_ADC_Init+0x1c8>)
 8001f04:	f7ff fa88 	bl	8001418 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7f5b      	ldrb	r3, [r3, #29]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_ADC_Init+0x186>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7f5b      	ldrb	r3, [r3, #29]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d004      	beq.n	8001f22 <HAL_ADC_Init+0x186>
 8001f18:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8001f1c:	4811      	ldr	r0, [pc, #68]	@ (8001f64 <HAL_ADC_Init+0x1c8>)
 8001f1e:	f7ff fa7b 	bl	8001418 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d01e      	beq.n	8001f68 <HAL_ADC_Init+0x1cc>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f32:	d019      	beq.n	8001f68 <HAL_ADC_Init+0x1cc>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f3c:	d014      	beq.n	8001f68 <HAL_ADC_Init+0x1cc>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001f46:	d00f      	beq.n	8001f68 <HAL_ADC_Init+0x1cc>
 8001f48:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8001f4c:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <HAL_ADC_Init+0x1c8>)
 8001f4e:	f7ff fa63 	bl	8001418 <assert_failed>
 8001f52:	e009      	b.n	8001f68 <HAL_ADC_Init+0x1cc>
 8001f54:	50000100 	.word	0x50000100
 8001f58:	50000400 	.word	0x50000400
 8001f5c:	50000500 	.word	0x50000500
 8001f60:	50000600 	.word	0x50000600
 8001f64:	080107bc 	.word	0x080107bc
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6c:	f5b3 6fa4 	cmp.w	r3, #1312	@ 0x520
 8001f70:	f000 80f3 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f78:	f5b3 6fa8 	cmp.w	r3, #1344	@ 0x540
 8001f7c:	f000 80ed 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f84:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 8001f88:	f000 80e7 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f90:	f5b3 6fac 	cmp.w	r3, #1376	@ 0x560
 8001f94:	f000 80e1 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9c:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8001fa0:	f000 80db 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa8:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8001fac:	f000 80d5 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb4:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8001fb8:	f000 80cf 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc0:	f5b3 6ff8 	cmp.w	r3, #1984	@ 0x7c0
 8001fc4:	f000 80c9 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fcc:	f5b3 6f9c 	cmp.w	r3, #1248	@ 0x4e0
 8001fd0:	f000 80c3 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001fdc:	f000 80bd 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe4:	f5b3 6fb8 	cmp.w	r3, #1472	@ 0x5c0
 8001fe8:	f000 80b7 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001ff4:	f000 80b1 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffc:	f5b3 6fc4 	cmp.w	r3, #1568	@ 0x620
 8002000:	f000 80ab 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002008:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800200c:	f000 80a5 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002014:	f5b3 6fd4 	cmp.w	r3, #1696	@ 0x6a0
 8002018:	f000 809f 	beq.w	800215a <HAL_ADC_Init+0x3be>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002020:	f5b3 6fd8 	cmp.w	r3, #1728	@ 0x6c0
 8002024:	f000 8099 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8002030:	f000 8093 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002038:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800203c:	f000 808d 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002044:	f5b3 6fe4 	cmp.w	r3, #1824	@ 0x720
 8002048:	f000 8087 	beq.w	800215a <HAL_ADC_Init+0x3be>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002050:	f5b3 6fe8 	cmp.w	r3, #1856	@ 0x740
 8002054:	f000 8081 	beq.w	800215a <HAL_ADC_Init+0x3be>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205c:	f5b3 6fec 	cmp.w	r3, #1888	@ 0x760
 8002060:	d07b      	beq.n	800215a <HAL_ADC_Init+0x3be>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002066:	f5b3 6ff0 	cmp.w	r3, #1920	@ 0x780
 800206a:	d076      	beq.n	800215a <HAL_ADC_Init+0x3be>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002070:	f5b3 6ff4 	cmp.w	r3, #1952	@ 0x7a0
 8002074:	d071      	beq.n	800215a <HAL_ADC_Init+0x3be>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800207e:	d004      	beq.n	800208a <HAL_ADC_Init+0x2ee>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a97      	ldr	r2, [pc, #604]	@ (80022e4 <HAL_ADC_Init+0x548>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d127      	bne.n	80020da <HAL_ADC_Init+0x33e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002092:	d062      	beq.n	800215a <HAL_ADC_Init+0x3be>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002098:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 800209c:	d05d      	beq.n	800215a <HAL_ADC_Init+0x3be>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 80020a6:	d058      	beq.n	800215a <HAL_ADC_Init+0x3be>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ac:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 80020b0:	d053      	beq.n	800215a <HAL_ADC_Init+0x3be>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b6:	f5b3 6f94 	cmp.w	r3, #1184	@ 0x4a0
 80020ba:	d04e      	beq.n	800215a <HAL_ADC_Init+0x3be>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c0:	f5b3 6fcc 	cmp.w	r3, #1632	@ 0x660
 80020c4:	d049      	beq.n	800215a <HAL_ADC_Init+0x3be>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80020ce:	d044      	beq.n	800215a <HAL_ADC_Init+0x3be>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d4:	f5b3 6f98 	cmp.w	r3, #1216	@ 0x4c0
 80020d8:	d03f      	beq.n	800215a <HAL_ADC_Init+0x3be>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a82      	ldr	r2, [pc, #520]	@ (80022e8 <HAL_ADC_Init+0x54c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d009      	beq.n	80020f8 <HAL_ADC_Init+0x35c>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a80      	ldr	r2, [pc, #512]	@ (80022ec <HAL_ADC_Init+0x550>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d004      	beq.n	80020f8 <HAL_ADC_Init+0x35c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a7f      	ldr	r2, [pc, #508]	@ (80022f0 <HAL_ADC_Init+0x554>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d127      	bne.n	8002148 <HAL_ADC_Init+0x3ac>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fc:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 8002100:	d02b      	beq.n	800215a <HAL_ADC_Init+0x3be>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002106:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 800210a:	d026      	beq.n	800215a <HAL_ADC_Init+0x3be>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002114:	d021      	beq.n	800215a <HAL_ADC_Init+0x3be>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211a:	f5b3 6f98 	cmp.w	r3, #1216	@ 0x4c0
 800211e:	d01c      	beq.n	800215a <HAL_ADC_Init+0x3be>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002124:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 8002128:	d017      	beq.n	800215a <HAL_ADC_Init+0x3be>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212e:	f5b3 6fcc 	cmp.w	r3, #1632	@ 0x660
 8002132:	d012      	beq.n	800215a <HAL_ADC_Init+0x3be>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 800213c:	d00d      	beq.n	800215a <HAL_ADC_Init+0x3be>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002142:	f5b3 6f94 	cmp.w	r3, #1184	@ 0x4a0
 8002146:	d008      	beq.n	800215a <HAL_ADC_Init+0x3be>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <HAL_ADC_Init+0x3be>
 8002150:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8002154:	4867      	ldr	r0, [pc, #412]	@ (80022f4 <HAL_ADC_Init+0x558>)
 8002156:	f7ff f95f 	bl	8001418 <assert_failed>
  assert_param(IS_ADC_SAMPLINGMODE(hadc->Init.SamplingMode));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00e      	beq.n	8002180 <HAL_ADC_Init+0x3e4>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002166:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800216a:	d009      	beq.n	8002180 <HAL_ADC_Init+0x3e4>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002170:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002174:	d004      	beq.n	8002180 <HAL_ADC_Init+0x3e4>
 8002176:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 800217a:	485e      	ldr	r0, [pc, #376]	@ (80022f4 <HAL_ADC_Init+0x558>)
 800217c:	f7ff f94c 	bl	8001418 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002186:	2b00      	cmp	r3, #0
 8002188:	d009      	beq.n	800219e <HAL_ADC_Init+0x402>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002190:	2b01      	cmp	r3, #1
 8002192:	d004      	beq.n	800219e <HAL_ADC_Init+0x402>
 8002194:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002198:	4856      	ldr	r0, [pc, #344]	@ (80022f4 <HAL_ADC_Init+0x558>)
 800219a:	f7ff f93d 	bl	8001418 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d008      	beq.n	80021b8 <HAL_ADC_Init+0x41c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d004      	beq.n	80021b8 <HAL_ADC_Init+0x41c>
 80021ae:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 80021b2:	4850      	ldr	r0, [pc, #320]	@ (80022f4 <HAL_ADC_Init+0x558>)
 80021b4:	f7ff f930 	bl	8001418 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d009      	beq.n	80021d4 <HAL_ADC_Init+0x438>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021c8:	d004      	beq.n	80021d4 <HAL_ADC_Init+0x438>
 80021ca:	f240 11a7 	movw	r1, #423	@ 0x1a7
 80021ce:	4849      	ldr	r0, [pc, #292]	@ (80022f4 <HAL_ADC_Init+0x558>)
 80021d0:	f7ff f922 	bl	8001418 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7f1b      	ldrb	r3, [r3, #28]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_ADC_Init+0x452>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7f1b      	ldrb	r3, [r3, #28]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d004      	beq.n	80021ee <HAL_ADC_Init+0x452>
 80021e4:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 80021e8:	4842      	ldr	r0, [pc, #264]	@ (80022f4 <HAL_ADC_Init+0x558>)
 80021ea:	f7ff f915 	bl	8001418 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d009      	beq.n	800220c <HAL_ADC_Init+0x470>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d004      	beq.n	800220c <HAL_ADC_Init+0x470>
 8002202:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8002206:	483b      	ldr	r0, [pc, #236]	@ (80022f4 <HAL_ADC_Init+0x558>)
 8002208:	f7ff f906 	bl	8001418 <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d02d      	beq.n	8002270 <HAL_ADC_Init+0x4d4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_ADC_Init+0x488>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	2b10      	cmp	r3, #16
 8002222:	d904      	bls.n	800222e <HAL_ADC_Init+0x492>
 8002224:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8002228:	4832      	ldr	r0, [pc, #200]	@ (80022f4 <HAL_ADC_Init+0x558>)
 800222a:	f7ff f8f5 	bl	8001418 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002234:	2b00      	cmp	r3, #0
 8002236:	d009      	beq.n	800224c <HAL_ADC_Init+0x4b0>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800223e:	2b01      	cmp	r3, #1
 8002240:	d004      	beq.n	800224c <HAL_ADC_Init+0x4b0>
 8002242:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8002246:	482b      	ldr	r0, [pc, #172]	@ (80022f4 <HAL_ADC_Init+0x558>)
 8002248:	f7ff f8e6 	bl	8001418 <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002252:	2b01      	cmp	r3, #1
 8002254:	d10c      	bne.n	8002270 <HAL_ADC_Init+0x4d4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_ADC_Init+0x4ca>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002262:	2b08      	cmp	r3, #8
 8002264:	d904      	bls.n	8002270 <HAL_ADC_Init+0x4d4>
 8002266:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 800226a:	4822      	ldr	r0, [pc, #136]	@ (80022f4 <HAL_ADC_Init+0x558>)
 800226c:	f7ff f8d4 	bl	8001418 <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002276:	2b01      	cmp	r3, #1
 8002278:	d108      	bne.n	800228c <HAL_ADC_Init+0x4f0>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7f5b      	ldrb	r3, [r3, #29]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d104      	bne.n	800228c <HAL_ADC_Init+0x4f0>
 8002282:	f240 11b7 	movw	r1, #439	@ 0x1b7
 8002286:	481b      	ldr	r0, [pc, #108]	@ (80022f4 <HAL_ADC_Init+0x558>)
 8002288:	f7ff f8c6 	bl	8001418 <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_ADC_Init+0x50c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7fe fb63 	bl	8000960 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fcff 	bl	8001cb0 <LL_ADC_IsDeepPowerDownEnabled>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <HAL_ADC_Init+0x526>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fce5 	bl	8001c8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fd1a 	bl	8001d00 <LL_ADC_IsInternalRegulatorEnabled>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d122      	bne.n	8002318 <HAL_ADC_Init+0x57c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fcfe 	bl	8001cd8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022dc:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <HAL_ADC_Init+0x55c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	099b      	lsrs	r3, r3, #6
 80022e2:	e00b      	b.n	80022fc <HAL_ADC_Init+0x560>
 80022e4:	50000100 	.word	0x50000100
 80022e8:	50000400 	.word	0x50000400
 80022ec:	50000500 	.word	0x50000500
 80022f0:	50000600 	.word	0x50000600
 80022f4:	080107bc 	.word	0x080107bc
 80022f8:	20000000 	.word	0x20000000
 80022fc:	4a83      	ldr	r2, [pc, #524]	@ (800250c <HAL_ADC_Init+0x770>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	099b      	lsrs	r3, r3, #6
 8002304:	3301      	adds	r3, #1
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800230a:	e002      	b.n	8002312 <HAL_ADC_Init+0x576>
    {
      wait_loop_index--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3b01      	subs	r3, #1
 8002310:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f9      	bne.n	800230c <HAL_ADC_Init+0x570>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fcef 	bl	8001d00 <LL_ADC_IsInternalRegulatorEnabled>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10d      	bne.n	8002344 <HAL_ADC_Init+0x5a8>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	f043 0210 	orr.w	r2, r3, #16
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002338:	f043 0201 	orr.w	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fd00 	bl	8001d4e <LL_ADC_REG_IsConversionOngoing>
 800234e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	2b00      	cmp	r3, #0
 800235a:	f040 81b0 	bne.w	80026be <HAL_ADC_Init+0x922>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b00      	cmp	r3, #0
 8002362:	f040 81ac 	bne.w	80026be <HAL_ADC_Init+0x922>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800236e:	f043 0202 	orr.w	r2, r3, #2
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fcd4 	bl	8001d28 <LL_ADC_IsEnabled>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d141      	bne.n	800240a <HAL_ADC_Init+0x66e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800238e:	d004      	beq.n	800239a <HAL_ADC_Init+0x5fe>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a5e      	ldr	r2, [pc, #376]	@ (8002510 <HAL_ADC_Init+0x774>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10f      	bne.n	80023ba <HAL_ADC_Init+0x61e>
 800239a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800239e:	f7ff fcc3 	bl	8001d28 <LL_ADC_IsEnabled>
 80023a2:	4604      	mov	r4, r0
 80023a4:	485a      	ldr	r0, [pc, #360]	@ (8002510 <HAL_ADC_Init+0x774>)
 80023a6:	f7ff fcbf 	bl	8001d28 <LL_ADC_IsEnabled>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4323      	orrs	r3, r4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf0c      	ite	eq
 80023b2:	2301      	moveq	r3, #1
 80023b4:	2300      	movne	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	e012      	b.n	80023e0 <HAL_ADC_Init+0x644>
 80023ba:	4856      	ldr	r0, [pc, #344]	@ (8002514 <HAL_ADC_Init+0x778>)
 80023bc:	f7ff fcb4 	bl	8001d28 <LL_ADC_IsEnabled>
 80023c0:	4604      	mov	r4, r0
 80023c2:	4855      	ldr	r0, [pc, #340]	@ (8002518 <HAL_ADC_Init+0x77c>)
 80023c4:	f7ff fcb0 	bl	8001d28 <LL_ADC_IsEnabled>
 80023c8:	4603      	mov	r3, r0
 80023ca:	431c      	orrs	r4, r3
 80023cc:	4853      	ldr	r0, [pc, #332]	@ (800251c <HAL_ADC_Init+0x780>)
 80023ce:	f7ff fcab 	bl	8001d28 <LL_ADC_IsEnabled>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4323      	orrs	r3, r4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	bf0c      	ite	eq
 80023da:	2301      	moveq	r3, #1
 80023dc:	2300      	movne	r3, #0
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d012      	beq.n	800240a <HAL_ADC_Init+0x66e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023ec:	d004      	beq.n	80023f8 <HAL_ADC_Init+0x65c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a47      	ldr	r2, [pc, #284]	@ (8002510 <HAL_ADC_Init+0x774>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d101      	bne.n	80023fc <HAL_ADC_Init+0x660>
 80023f8:	4a49      	ldr	r2, [pc, #292]	@ (8002520 <HAL_ADC_Init+0x784>)
 80023fa:	e000      	b.n	80023fe <HAL_ADC_Init+0x662>
 80023fc:	4a49      	ldr	r2, [pc, #292]	@ (8002524 <HAL_ADC_Init+0x788>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4619      	mov	r1, r3
 8002404:	4610      	mov	r0, r2
 8002406:	f7ff faa3 	bl	8001950 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7f5b      	ldrb	r3, [r3, #29]
 800240e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002414:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800241a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002420:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002428:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002434:	2b01      	cmp	r3, #1
 8002436:	d106      	bne.n	8002446 <HAL_ADC_Init+0x6aa>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243c:	3b01      	subs	r3, #1
 800243e:	045b      	lsls	r3, r3, #17
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <HAL_ADC_Init+0x6c6>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002452:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	4b2f      	ldr	r3, [pc, #188]	@ (8002528 <HAL_ADC_Init+0x78c>)
 800246a:	4013      	ands	r3, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	69b9      	ldr	r1, [r7, #24]
 8002472:	430b      	orrs	r3, r1
 8002474:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fc6f 	bl	8001d74 <LL_ADC_INJ_IsConversionOngoing>
 8002496:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 80ed 	bne.w	800267a <HAL_ADC_Init+0x8de>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f040 80e9 	bne.w	800267a <HAL_ADC_Init+0x8de>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024ac:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024b4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024c4:	f023 0302 	bic.w	r3, r3, #2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	69b9      	ldr	r1, [r7, #24]
 80024ce:	430b      	orrs	r3, r1
 80024d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d028      	beq.n	800252c <HAL_ADC_Init+0x790>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80024e8:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80024f2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024f6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6911      	ldr	r1, [r2, #16]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	430b      	orrs	r3, r1
 8002504:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002508:	e024      	b.n	8002554 <HAL_ADC_Init+0x7b8>
 800250a:	bf00      	nop
 800250c:	053e2d63 	.word	0x053e2d63
 8002510:	50000100 	.word	0x50000100
 8002514:	50000400 	.word	0x50000400
 8002518:	50000500 	.word	0x50000500
 800251c:	50000600 	.word	0x50000600
 8002520:	50000300 	.word	0x50000300
 8002524:	50000700 	.word	0x50000700
 8002528:	fff04007 	.word	0xfff04007
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800253a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800254c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002550:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800255a:	2b01      	cmp	r3, #1
 800255c:	f040 8085 	bne.w	800266a <HAL_ADC_Init+0x8ce>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_ADC_Init+0x80e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256c:	2b04      	cmp	r3, #4
 800256e:	d01c      	beq.n	80025aa <HAL_ADC_Init+0x80e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002574:	2b08      	cmp	r3, #8
 8002576:	d018      	beq.n	80025aa <HAL_ADC_Init+0x80e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257c:	2b0c      	cmp	r3, #12
 800257e:	d014      	beq.n	80025aa <HAL_ADC_Init+0x80e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002584:	2b10      	cmp	r3, #16
 8002586:	d010      	beq.n	80025aa <HAL_ADC_Init+0x80e>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258c:	2b14      	cmp	r3, #20
 800258e:	d00c      	beq.n	80025aa <HAL_ADC_Init+0x80e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002594:	2b18      	cmp	r3, #24
 8002596:	d008      	beq.n	80025aa <HAL_ADC_Init+0x80e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259c:	2b1c      	cmp	r3, #28
 800259e:	d004      	beq.n	80025aa <HAL_ADC_Init+0x80e>
 80025a0:	f240 2176 	movw	r1, #630	@ 0x276
 80025a4:	484c      	ldr	r0, [pc, #304]	@ (80026d8 <HAL_ADC_Init+0x93c>)
 80025a6:	f7fe ff37 	bl	8001418 <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d025      	beq.n	80025fe <HAL_ADC_Init+0x862>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	d021      	beq.n	80025fe <HAL_ADC_Init+0x862>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025be:	2b40      	cmp	r3, #64	@ 0x40
 80025c0:	d01d      	beq.n	80025fe <HAL_ADC_Init+0x862>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c6:	2b60      	cmp	r3, #96	@ 0x60
 80025c8:	d019      	beq.n	80025fe <HAL_ADC_Init+0x862>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ce:	2b80      	cmp	r3, #128	@ 0x80
 80025d0:	d015      	beq.n	80025fe <HAL_ADC_Init+0x862>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d6:	2ba0      	cmp	r3, #160	@ 0xa0
 80025d8:	d011      	beq.n	80025fe <HAL_ADC_Init+0x862>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025de:	2bc0      	cmp	r3, #192	@ 0xc0
 80025e0:	d00d      	beq.n	80025fe <HAL_ADC_Init+0x862>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e6:	2be0      	cmp	r3, #224	@ 0xe0
 80025e8:	d009      	beq.n	80025fe <HAL_ADC_Init+0x862>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025f2:	d004      	beq.n	80025fe <HAL_ADC_Init+0x862>
 80025f4:	f240 2177 	movw	r1, #631	@ 0x277
 80025f8:	4837      	ldr	r0, [pc, #220]	@ (80026d8 <HAL_ADC_Init+0x93c>)
 80025fa:	f7fe ff0d 	bl	8001418 <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <HAL_ADC_Init+0x87e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800260e:	d004      	beq.n	800261a <HAL_ADC_Init+0x87e>
 8002610:	f44f 711e 	mov.w	r1, #632	@ 0x278
 8002614:	4830      	ldr	r0, [pc, #192]	@ (80026d8 <HAL_ADC_Init+0x93c>)
 8002616:	f7fe feff 	bl	8001418 <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800261e:	2b01      	cmp	r3, #1
 8002620:	d00a      	beq.n	8002638 <HAL_ADC_Init+0x89c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002626:	f240 4201 	movw	r2, #1025	@ 0x401
 800262a:	4293      	cmp	r3, r2
 800262c:	d004      	beq.n	8002638 <HAL_ADC_Init+0x89c>
 800262e:	f240 2179 	movw	r1, #633	@ 0x279
 8002632:	4829      	ldr	r0, [pc, #164]	@ (80026d8 <HAL_ADC_Init+0x93c>)
 8002634:	f7fe fef0 	bl	8001418 <assert_failed>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002642:	f023 0304 	bic.w	r3, r3, #4
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800264e:	4311      	orrs	r1, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002654:	4311      	orrs	r1, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800265a:	430a      	orrs	r2, r1
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	611a      	str	r2, [r3, #16]
 8002668:	e007      	b.n	800267a <HAL_ADC_Init+0x8de>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d10c      	bne.n	800269c <HAL_ADC_Init+0x900>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002688:	f023 010f 	bic.w	r1, r3, #15
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	1e5a      	subs	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	631a      	str	r2, [r3, #48]	@ 0x30
 800269a:	e007      	b.n	80026ac <HAL_ADC_Init+0x910>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 020f 	bic.w	r2, r2, #15
 80026aa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b0:	f023 0303 	bic.w	r3, r3, #3
 80026b4:	f043 0201 	orr.w	r2, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026bc:	e007      	b.n	80026ce <HAL_ADC_Init+0x932>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c2:	f043 0210 	orr.w	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3724      	adds	r7, #36	@ 0x24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd90      	pop	{r4, r7, pc}
 80026d8:	080107bc 	.word	0x080107bc

080026dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026ec:	d018      	beq.n	8002720 <HAL_ADC_GetValue+0x44>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002730 <HAL_ADC_GetValue+0x54>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d013      	beq.n	8002720 <HAL_ADC_GetValue+0x44>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002734 <HAL_ADC_GetValue+0x58>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00e      	beq.n	8002720 <HAL_ADC_GetValue+0x44>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a0c      	ldr	r2, [pc, #48]	@ (8002738 <HAL_ADC_GetValue+0x5c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d009      	beq.n	8002720 <HAL_ADC_GetValue+0x44>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0a      	ldr	r2, [pc, #40]	@ (800273c <HAL_ADC_GetValue+0x60>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d004      	beq.n	8002720 <HAL_ADC_GetValue+0x44>
 8002716:	f640 01b9 	movw	r1, #2233	@ 0x8b9
 800271a:	4809      	ldr	r0, [pc, #36]	@ (8002740 <HAL_ADC_GetValue+0x64>)
 800271c:	f7fe fe7c 	bl	8001418 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	50000100 	.word	0x50000100
 8002734:	50000400 	.word	0x50000400
 8002738:	50000500 	.word	0x50000500
 800273c:	50000600 	.word	0x50000600
 8002740:	080107bc 	.word	0x080107bc

08002744 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	@ 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800274c:	2300      	movs	r3, #0
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002768:	d004      	beq.n	8002774 <HAL_ADC_IRQHandler+0x30>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a72      	ldr	r2, [pc, #456]	@ (8002938 <HAL_ADC_IRQHandler+0x1f4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d101      	bne.n	8002778 <HAL_ADC_IRQHandler+0x34>
 8002774:	4b71      	ldr	r3, [pc, #452]	@ (800293c <HAL_ADC_IRQHandler+0x1f8>)
 8002776:	e000      	b.n	800277a <HAL_ADC_IRQHandler+0x36>
 8002778:	4b71      	ldr	r3, [pc, #452]	@ (8002940 <HAL_ADC_IRQHandler+0x1fc>)
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fa6a 	bl	8001c54 <LL_ADC_GetMultimode>
 8002780:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800278a:	d018      	beq.n	80027be <HAL_ADC_IRQHandler+0x7a>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a69      	ldr	r2, [pc, #420]	@ (8002938 <HAL_ADC_IRQHandler+0x1f4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <HAL_ADC_IRQHandler+0x7a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a6a      	ldr	r2, [pc, #424]	@ (8002944 <HAL_ADC_IRQHandler+0x200>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00e      	beq.n	80027be <HAL_ADC_IRQHandler+0x7a>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a68      	ldr	r2, [pc, #416]	@ (8002948 <HAL_ADC_IRQHandler+0x204>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d009      	beq.n	80027be <HAL_ADC_IRQHandler+0x7a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a67      	ldr	r2, [pc, #412]	@ (800294c <HAL_ADC_IRQHandler+0x208>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d004      	beq.n	80027be <HAL_ADC_IRQHandler+0x7a>
 80027b4:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 80027b8:	4865      	ldr	r0, [pc, #404]	@ (8002950 <HAL_ADC_IRQHandler+0x20c>)
 80027ba:	f7fe fe2d 	bl	8001418 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d008      	beq.n	80027d8 <HAL_ADC_IRQHandler+0x94>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d004      	beq.n	80027d8 <HAL_ADC_IRQHandler+0x94>
 80027ce:	f640 1101 	movw	r1, #2305	@ 0x901
 80027d2:	485f      	ldr	r0, [pc, #380]	@ (8002950 <HAL_ADC_IRQHandler+0x20c>)
 80027d4:	f7fe fe20 	bl	8001418 <assert_failed>

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d017      	beq.n	8002812 <HAL_ADC_IRQHandler+0xce>
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d012      	beq.n	8002812 <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <HAL_ADC_IRQHandler+0xc0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f001 fa57 	bl	8003cb8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2202      	movs	r2, #2
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d004      	beq.n	8002826 <HAL_ADC_IRQHandler+0xe2>
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10b      	bne.n	800283e <HAL_ADC_IRQHandler+0xfa>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80a4 	beq.w	800297a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 809e 	beq.w	800297a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	2b00      	cmp	r3, #0
 8002848:	d105      	bne.n	8002856 <HAL_ADC_IRQHandler+0x112>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff f958 	bl	8001b10 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 8082 	beq.w	800296c <HAL_ADC_IRQHandler+0x228>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a32      	ldr	r2, [pc, #200]	@ (8002938 <HAL_ADC_IRQHandler+0x1f4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d009      	beq.n	8002886 <HAL_ADC_IRQHandler+0x142>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a34      	ldr	r2, [pc, #208]	@ (8002948 <HAL_ADC_IRQHandler+0x204>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d002      	beq.n	8002882 <HAL_ADC_IRQHandler+0x13e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	e003      	b.n	800288a <HAL_ADC_IRQHandler+0x146>
 8002882:	4b30      	ldr	r3, [pc, #192]	@ (8002944 <HAL_ADC_IRQHandler+0x200>)
 8002884:	e001      	b.n	800288a <HAL_ADC_IRQHandler+0x146>
 8002886:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	4293      	cmp	r3, r2
 8002890:	d008      	beq.n	80028a4 <HAL_ADC_IRQHandler+0x160>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_ADC_IRQHandler+0x160>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b05      	cmp	r3, #5
 800289c:	d002      	beq.n	80028a4 <HAL_ADC_IRQHandler+0x160>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b09      	cmp	r3, #9
 80028a2:	d104      	bne.n	80028ae <HAL_ADC_IRQHandler+0x16a>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	623b      	str	r3, [r7, #32]
 80028ac:	e014      	b.n	80028d8 <HAL_ADC_IRQHandler+0x194>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a21      	ldr	r2, [pc, #132]	@ (8002938 <HAL_ADC_IRQHandler+0x1f4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d009      	beq.n	80028cc <HAL_ADC_IRQHandler+0x188>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a22      	ldr	r2, [pc, #136]	@ (8002948 <HAL_ADC_IRQHandler+0x204>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d002      	beq.n	80028c8 <HAL_ADC_IRQHandler+0x184>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	e003      	b.n	80028d0 <HAL_ADC_IRQHandler+0x18c>
 80028c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002944 <HAL_ADC_IRQHandler+0x200>)
 80028ca:	e001      	b.n	80028d0 <HAL_ADC_IRQHandler+0x18c>
 80028cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80028d0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d144      	bne.n	800296c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d13d      	bne.n	800296c <HAL_ADC_IRQHandler+0x228>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fa2a 	bl	8001d4e <LL_ADC_REG_IsConversionOngoing>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d129      	bne.n	8002954 <HAL_ADC_IRQHandler+0x210>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 020c 	bic.w	r2, r2, #12
 800290e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002914:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002920:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d121      	bne.n	800296c <HAL_ADC_IRQHandler+0x228>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292c:	f043 0201 	orr.w	r2, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002934:	e01a      	b.n	800296c <HAL_ADC_IRQHandler+0x228>
 8002936:	bf00      	nop
 8002938:	50000100 	.word	0x50000100
 800293c:	50000300 	.word	0x50000300
 8002940:	50000700 	.word	0x50000700
 8002944:	50000400 	.word	0x50000400
 8002948:	50000500 	.word	0x50000500
 800294c:	50000600 	.word	0x50000600
 8002950:	080107bc 	.word	0x080107bc
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002958:	f043 0210 	orr.w	r2, r3, #16
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002964:	f043 0201 	orr.w	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7fe fc5f 	bl	8001230 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	220c      	movs	r2, #12
 8002978:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	2b00      	cmp	r3, #0
 8002982:	d004      	beq.n	800298e <HAL_ADC_IRQHandler+0x24a>
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10b      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x262>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80a8 	beq.w	8002aea <HAL_ADC_IRQHandler+0x3a6>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80a2 	beq.w	8002aea <HAL_ADC_IRQHandler+0x3a6>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d105      	bne.n	80029be <HAL_ADC_IRQHandler+0x27a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff f8e3 	bl	8001b8e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80029c8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff f89e 	bl	8001b10 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029d4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7c      	ldr	r2, [pc, #496]	@ (8002bcc <HAL_ADC_IRQHandler+0x488>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d009      	beq.n	80029f4 <HAL_ADC_IRQHandler+0x2b0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a7a      	ldr	r2, [pc, #488]	@ (8002bd0 <HAL_ADC_IRQHandler+0x48c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d002      	beq.n	80029f0 <HAL_ADC_IRQHandler+0x2ac>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	e003      	b.n	80029f8 <HAL_ADC_IRQHandler+0x2b4>
 80029f0:	4b78      	ldr	r3, [pc, #480]	@ (8002bd4 <HAL_ADC_IRQHandler+0x490>)
 80029f2:	e001      	b.n	80029f8 <HAL_ADC_IRQHandler+0x2b4>
 80029f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d008      	beq.n	8002a12 <HAL_ADC_IRQHandler+0x2ce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_ADC_IRQHandler+0x2ce>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b06      	cmp	r3, #6
 8002a0a:	d002      	beq.n	8002a12 <HAL_ADC_IRQHandler+0x2ce>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b07      	cmp	r3, #7
 8002a10:	d104      	bne.n	8002a1c <HAL_ADC_IRQHandler+0x2d8>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	623b      	str	r3, [r7, #32]
 8002a1a:	e014      	b.n	8002a46 <HAL_ADC_IRQHandler+0x302>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a6a      	ldr	r2, [pc, #424]	@ (8002bcc <HAL_ADC_IRQHandler+0x488>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d009      	beq.n	8002a3a <HAL_ADC_IRQHandler+0x2f6>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a69      	ldr	r2, [pc, #420]	@ (8002bd0 <HAL_ADC_IRQHandler+0x48c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d002      	beq.n	8002a36 <HAL_ADC_IRQHandler+0x2f2>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	e003      	b.n	8002a3e <HAL_ADC_IRQHandler+0x2fa>
 8002a36:	4b67      	ldr	r3, [pc, #412]	@ (8002bd4 <HAL_ADC_IRQHandler+0x490>)
 8002a38:	e001      	b.n	8002a3e <HAL_ADC_IRQHandler+0x2fa>
 8002a3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a3e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d047      	beq.n	8002adc <HAL_ADC_IRQHandler+0x398>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <HAL_ADC_IRQHandler+0x322>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d03f      	beq.n	8002adc <HAL_ADC_IRQHandler+0x398>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d13a      	bne.n	8002adc <HAL_ADC_IRQHandler+0x398>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a70:	2b40      	cmp	r3, #64	@ 0x40
 8002a72:	d133      	bne.n	8002adc <HAL_ADC_IRQHandler+0x398>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d12e      	bne.n	8002adc <HAL_ADC_IRQHandler+0x398>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff f976 	bl	8001d74 <LL_ADC_INJ_IsConversionOngoing>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d11a      	bne.n	8002ac4 <HAL_ADC_IRQHandler+0x380>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a9c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d112      	bne.n	8002adc <HAL_ADC_IRQHandler+0x398>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aba:	f043 0201 	orr.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ac2:	e00b      	b.n	8002adc <HAL_ADC_IRQHandler+0x398>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac8:	f043 0210 	orr.w	r2, r3, #16
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad4:	f043 0201 	orr.w	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f001 f8c3 	bl	8003c68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2260      	movs	r2, #96	@ 0x60
 8002ae8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d011      	beq.n	8002b18 <HAL_ADC_IRQHandler+0x3d4>
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00c      	beq.n	8002b18 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b02:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f8aa 	bl	8002c64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2280      	movs	r2, #128	@ 0x80
 8002b16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d012      	beq.n	8002b48 <HAL_ADC_IRQHandler+0x404>
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00d      	beq.n	8002b48 <HAL_ADC_IRQHandler+0x404>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b30:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f001 f8a9 	bl	8003c90 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d012      	beq.n	8002b78 <HAL_ADC_IRQHandler+0x434>
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00d      	beq.n	8002b78 <HAL_ADC_IRQHandler+0x434>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b60:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f001 f89b 	bl	8003ca4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d04d      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x4da>
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d048      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x4da>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <HAL_ADC_IRQHandler+0x456>
    {
      overrun_error = 1UL;
 8002b94:	2301      	movs	r3, #1
 8002b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b98:	e02b      	b.n	8002bf2 <HAL_ADC_IRQHandler+0x4ae>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01f      	beq.n	8002be0 <HAL_ADC_IRQHandler+0x49c>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ba8:	d004      	beq.n	8002bb4 <HAL_ADC_IRQHandler+0x470>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a07      	ldr	r2, [pc, #28]	@ (8002bcc <HAL_ADC_IRQHandler+0x488>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d101      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x474>
 8002bb4:	4b08      	ldr	r3, [pc, #32]	@ (8002bd8 <HAL_ADC_IRQHandler+0x494>)
 8002bb6:	e000      	b.n	8002bba <HAL_ADC_IRQHandler+0x476>
 8002bb8:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <HAL_ADC_IRQHandler+0x498>)
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff f858 	bl	8001c70 <LL_ADC_GetMultiDMATransfer>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d015      	beq.n	8002bf2 <HAL_ADC_IRQHandler+0x4ae>
        {
          overrun_error = 1UL;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bca:	e012      	b.n	8002bf2 <HAL_ADC_IRQHandler+0x4ae>
 8002bcc:	50000100 	.word	0x50000100
 8002bd0:	50000500 	.word	0x50000500
 8002bd4:	50000400 	.word	0x50000400
 8002bd8:	50000300 	.word	0x50000300
 8002bdc:	50000700 	.word	0x50000700
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_ADC_IRQHandler+0x4ae>
        {
          overrun_error = 1UL;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d10e      	bne.n	8002c16 <HAL_ADC_IRQHandler+0x4d2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c08:	f043 0202 	orr.w	r2, r3, #2
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f831 	bl	8002c78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2210      	movs	r2, #16
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d018      	beq.n	8002c5a <HAL_ADC_IRQHandler+0x516>
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d013      	beq.n	8002c5a <HAL_ADC_IRQHandler+0x516>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c36:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c42:	f043 0208 	orr.w	r2, r3, #8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c52:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f001 f811 	bl	8003c7c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002c5a:	bf00      	nop
 8002c5c:	3728      	adds	r7, #40	@ 0x28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop

08002c64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b0b7      	sub	sp, #220	@ 0xdc
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ca8:	d018      	beq.n	8002cdc <HAL_ADC_ConfigChannel+0x50>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a93      	ldr	r2, [pc, #588]	@ (8002efc <HAL_ADC_ConfigChannel+0x270>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d013      	beq.n	8002cdc <HAL_ADC_ConfigChannel+0x50>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a91      	ldr	r2, [pc, #580]	@ (8002f00 <HAL_ADC_ConfigChannel+0x274>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00e      	beq.n	8002cdc <HAL_ADC_ConfigChannel+0x50>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a90      	ldr	r2, [pc, #576]	@ (8002f04 <HAL_ADC_ConfigChannel+0x278>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d009      	beq.n	8002cdc <HAL_ADC_ConfigChannel+0x50>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a8e      	ldr	r2, [pc, #568]	@ (8002f08 <HAL_ADC_ConfigChannel+0x27c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d004      	beq.n	8002cdc <HAL_ADC_ConfigChannel+0x50>
 8002cd2:	f640 21d2 	movw	r1, #2770	@ 0xad2
 8002cd6:	488d      	ldr	r0, [pc, #564]	@ (8002f0c <HAL_ADC_ConfigChannel+0x280>)
 8002cd8:	f7fe fb9e 	bl	8001418 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b06      	cmp	r3, #6
 8002ce2:	d04f      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xf8>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	d04b      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xf8>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b12      	cmp	r3, #18
 8002cf2:	d047      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xf8>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b18      	cmp	r3, #24
 8002cfa:	d043      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xf8>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d04:	d03e      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xf8>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8002d0e:	d039      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xf8>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8002d18:	d034      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xf8>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8002d22:	d02f      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xf8>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8002d2c:	d02a      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xf8>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d36:	d025      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xf8>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f240 2206 	movw	r2, #518	@ 0x206
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d01f      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xf8>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 8002d4c:	d01a      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xf8>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f240 2212 	movw	r2, #530	@ 0x212
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d014      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xf8>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8002d62:	d00f      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xf8>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d6c:	d00a      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xf8>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f240 3206 	movw	r2, #774	@ 0x306
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d004      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0xf8>
 8002d7a:	f640 21d3 	movw	r1, #2771	@ 0xad3
 8002d7e:	4863      	ldr	r0, [pc, #396]	@ (8002f0c <HAL_ADC_ConfigChannel+0x280>)
 8002d80:	f7fe fb4a 	bl	8001418 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(pConfig->SamplingTime));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d025      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x14c>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d94:	d020      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x14c>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d01c      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x14c>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d018      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x14c>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d014      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x14c>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d010      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x14c>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b05      	cmp	r3, #5
 8002dbc:	d00c      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x14c>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d008      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x14c>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b07      	cmp	r3, #7
 8002dcc:	d004      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x14c>
 8002dce:	f640 21d4 	movw	r1, #2772	@ 0xad4
 8002dd2:	484e      	ldr	r0, [pc, #312]	@ (8002f0c <HAL_ADC_ConfigChannel+0x280>)
 8002dd4:	f7fe fb20 	bl	8001418 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(pConfig->SingleDiff));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dde:	d009      	beq.n	8002df4 <HAL_ADC_ConfigChannel+0x168>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a4a      	ldr	r2, [pc, #296]	@ (8002f10 <HAL_ADC_ConfigChannel+0x284>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d004      	beq.n	8002df4 <HAL_ADC_ConfigChannel+0x168>
 8002dea:	f640 21d5 	movw	r1, #2773	@ 0xad5
 8002dee:	4847      	ldr	r0, [pc, #284]	@ (8002f0c <HAL_ADC_ConfigChannel+0x280>)
 8002df0:	f7fe fb12 	bl	8001418 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(pConfig->OffsetNumber));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d014      	beq.n	8002e26 <HAL_ADC_ConfigChannel+0x19a>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <HAL_ADC_ConfigChannel+0x19a>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d00c      	beq.n	8002e26 <HAL_ADC_ConfigChannel+0x19a>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d008      	beq.n	8002e26 <HAL_ADC_ConfigChannel+0x19a>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d004      	beq.n	8002e26 <HAL_ADC_ConfigChannel+0x19a>
 8002e1c:	f640 21d6 	movw	r1, #2774	@ 0xad6
 8002e20:	483a      	ldr	r0, [pc, #232]	@ (8002f0c <HAL_ADC_ConfigChannel+0x280>)
 8002e22:	f7fe faf9 	bl	8001418 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pConfig->Offset));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	695c      	ldr	r4, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fdc2 	bl	80019b8 <LL_ADC_GetResolution>
 8002e34:	4603      	mov	r3, r0
 8002e36:	089b      	lsrs	r3, r3, #2
 8002e38:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e40:	429c      	cmp	r4, r3
 8002e42:	d904      	bls.n	8002e4e <HAL_ADC_ConfigChannel+0x1c2>
 8002e44:	f640 21d7 	movw	r1, #2775	@ 0xad7
 8002e48:	4830      	ldr	r0, [pc, #192]	@ (8002f0c <HAL_ADC_ConfigChannel+0x280>)
 8002e4a:	f7fe fae5 	bl	8001418 <assert_failed>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((pConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d009      	beq.n	8002e6a <HAL_ADC_ConfigChannel+0x1de>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d104      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x1de>
 8002e60:	f640 21db 	movw	r1, #2779	@ 0xadb
 8002e64:	4829      	ldr	r0, [pc, #164]	@ (8002f0c <HAL_ADC_ConfigChannel+0x280>)
 8002e66:	f7fe fad7 	bl	8001418 <assert_failed>

  /* Verification of channel number */
  if (pConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	4a28      	ldr	r2, [pc, #160]	@ (8002f10 <HAL_ADC_ConfigChannel+0x284>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	f000 8189 	beq.w	8003188 <HAL_ADC_ConfigChannel+0x4fc>
  {
    assert_param(IS_ADC_CHANNEL(hadc, pConfig->Channel));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	f000 8253 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a23      	ldr	r2, [pc, #140]	@ (8002f14 <HAL_ADC_ConfigChannel+0x288>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	f000 824d 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a21      	ldr	r2, [pc, #132]	@ (8002f18 <HAL_ADC_ConfigChannel+0x28c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	f000 8247 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002f1c <HAL_ADC_ConfigChannel+0x290>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	f000 8241 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f20 <HAL_ADC_ConfigChannel+0x294>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	f000 823b 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f24 <HAL_ADC_ConfigChannel+0x298>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	f000 8235 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a19      	ldr	r2, [pc, #100]	@ (8002f28 <HAL_ADC_ConfigChannel+0x29c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	f000 822f 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a17      	ldr	r2, [pc, #92]	@ (8002f2c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	f000 8229 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a15      	ldr	r2, [pc, #84]	@ (8002f30 <HAL_ADC_ConfigChannel+0x2a4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	f000 8223 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a13      	ldr	r2, [pc, #76]	@ (8002f34 <HAL_ADC_ConfigChannel+0x2a8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	f000 821d 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a11      	ldr	r2, [pc, #68]	@ (8002f38 <HAL_ADC_ConfigChannel+0x2ac>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	f000 8217 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002ef8:	e020      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x2b0>
 8002efa:	bf00      	nop
 8002efc:	50000100 	.word	0x50000100
 8002f00:	50000400 	.word	0x50000400
 8002f04:	50000500 	.word	0x50000500
 8002f08:	50000600 	.word	0x50000600
 8002f0c:	080107bc 	.word	0x080107bc
 8002f10:	407f0000 	.word	0x407f0000
 8002f14:	04300002 	.word	0x04300002
 8002f18:	08600004 	.word	0x08600004
 8002f1c:	19200040 	.word	0x19200040
 8002f20:	1d500080 	.word	0x1d500080
 8002f24:	21800100 	.word	0x21800100
 8002f28:	25b00200 	.word	0x25b00200
 8002f2c:	2a000400 	.word	0x2a000400
 8002f30:	2e300800 	.word	0x2e300800
 8002f34:	32601000 	.word	0x32601000
 8002f38:	3ac04000 	.word	0x3ac04000
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a7a      	ldr	r2, [pc, #488]	@ (800312c <HAL_ADC_ConfigChannel+0x4a0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	f000 81ef 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f50:	d129      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x31a>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a76      	ldr	r2, [pc, #472]	@ (8003130 <HAL_ADC_ConfigChannel+0x4a4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	f000 81e4 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a74      	ldr	r2, [pc, #464]	@ (8003134 <HAL_ADC_ConfigChannel+0x4a8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	f000 81de 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a72      	ldr	r2, [pc, #456]	@ (8003138 <HAL_ADC_ConfigChannel+0x4ac>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	f000 81d8 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a70      	ldr	r2, [pc, #448]	@ (800313c <HAL_ADC_ConfigChannel+0x4b0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	f000 81d2 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a6e      	ldr	r2, [pc, #440]	@ (8003140 <HAL_ADC_ConfigChannel+0x4b4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	f000 81cc 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a6c      	ldr	r2, [pc, #432]	@ (8003144 <HAL_ADC_ConfigChannel+0x4b8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	f000 81c6 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a6a      	ldr	r2, [pc, #424]	@ (8003148 <HAL_ADC_ConfigChannel+0x4bc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	f000 81c0 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a68      	ldr	r2, [pc, #416]	@ (800314c <HAL_ADC_ConfigChannel+0x4c0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d129      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x378>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a5e      	ldr	r2, [pc, #376]	@ (8003130 <HAL_ADC_ConfigChannel+0x4a4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	f000 81b5 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a5c      	ldr	r2, [pc, #368]	@ (8003134 <HAL_ADC_ConfigChannel+0x4a8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	f000 81af 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a5a      	ldr	r2, [pc, #360]	@ (8003138 <HAL_ADC_ConfigChannel+0x4ac>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	f000 81a9 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a5d      	ldr	r2, [pc, #372]	@ (8003150 <HAL_ADC_ConfigChannel+0x4c4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	f000 81a3 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a5b      	ldr	r2, [pc, #364]	@ (8003154 <HAL_ADC_ConfigChannel+0x4c8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	f000 819d 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a59      	ldr	r2, [pc, #356]	@ (8003158 <HAL_ADC_ConfigChannel+0x4cc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	f000 8197 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a57      	ldr	r2, [pc, #348]	@ (800315c <HAL_ADC_ConfigChannel+0x4d0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	f000 8191 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a55      	ldr	r2, [pc, #340]	@ (8003160 <HAL_ADC_ConfigChannel+0x4d4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d129      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x3d6>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a47      	ldr	r2, [pc, #284]	@ (8003130 <HAL_ADC_ConfigChannel+0x4a4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	f000 8186 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a45      	ldr	r2, [pc, #276]	@ (8003134 <HAL_ADC_ConfigChannel+0x4a8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	f000 8180 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a43      	ldr	r2, [pc, #268]	@ (8003138 <HAL_ADC_ConfigChannel+0x4ac>)
 800302c:	4293      	cmp	r3, r2
 800302e:	f000 817a 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a4b      	ldr	r2, [pc, #300]	@ (8003164 <HAL_ADC_ConfigChannel+0x4d8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	f000 8174 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a49      	ldr	r2, [pc, #292]	@ (8003168 <HAL_ADC_ConfigChannel+0x4dc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	f000 816e 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a3d      	ldr	r2, [pc, #244]	@ (8003144 <HAL_ADC_ConfigChannel+0x4b8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	f000 8168 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a3b      	ldr	r2, [pc, #236]	@ (8003148 <HAL_ADC_ConfigChannel+0x4bc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	f000 8162 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a41      	ldr	r2, [pc, #260]	@ (800316c <HAL_ADC_ConfigChannel+0x4e0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d129      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x434>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a2f      	ldr	r2, [pc, #188]	@ (8003130 <HAL_ADC_ConfigChannel+0x4a4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	f000 8157 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a2d      	ldr	r2, [pc, #180]	@ (8003134 <HAL_ADC_ConfigChannel+0x4a8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	f000 8151 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2b      	ldr	r2, [pc, #172]	@ (8003138 <HAL_ADC_ConfigChannel+0x4ac>)
 800308a:	4293      	cmp	r3, r2
 800308c:	f000 814b 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2e      	ldr	r2, [pc, #184]	@ (8003150 <HAL_ADC_ConfigChannel+0x4c4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	f000 8145 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a31      	ldr	r2, [pc, #196]	@ (8003168 <HAL_ADC_ConfigChannel+0x4dc>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	f000 813f 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a30      	ldr	r2, [pc, #192]	@ (8003170 <HAL_ADC_ConfigChannel+0x4e4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	f000 8139 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a23      	ldr	r2, [pc, #140]	@ (8003148 <HAL_ADC_ConfigChannel+0x4bc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	f000 8133 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003174 <HAL_ADC_ConfigChannel+0x4e8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d129      	bne.n	800311e <HAL_ADC_ConfigChannel+0x492>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003178 <HAL_ADC_ConfigChannel+0x4ec>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	f000 8128 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a28      	ldr	r2, [pc, #160]	@ (800317c <HAL_ADC_ConfigChannel+0x4f0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	f000 8122 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a26      	ldr	r2, [pc, #152]	@ (8003180 <HAL_ADC_ConfigChannel+0x4f4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	f000 811c 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a17      	ldr	r2, [pc, #92]	@ (8003150 <HAL_ADC_ConfigChannel+0x4c4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	f000 8116 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003168 <HAL_ADC_ConfigChannel+0x4dc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	f000 8110 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a0e      	ldr	r2, [pc, #56]	@ (8003144 <HAL_ADC_ConfigChannel+0x4b8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	f000 810a 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a0c      	ldr	r2, [pc, #48]	@ (8003148 <HAL_ADC_ConfigChannel+0x4bc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	f000 8104 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 800311e:	f44f 612e 	mov.w	r1, #2784	@ 0xae0
 8003122:	4818      	ldr	r0, [pc, #96]	@ (8003184 <HAL_ADC_ConfigChannel+0x4f8>)
 8003124:	f7fe f978 	bl	8001418 <assert_failed>
 8003128:	e0fd      	b.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 800312a:	bf00      	nop
 800312c:	3ef08000 	.word	0x3ef08000
 8003130:	0c900008 	.word	0x0c900008
 8003134:	10c00010 	.word	0x10c00010
 8003138:	14f00020 	.word	0x14f00020
 800313c:	b6902000 	.word	0xb6902000
 8003140:	c3210000 	.word	0xc3210000
 8003144:	c7520000 	.word	0xc7520000
 8003148:	cb840000 	.word	0xcb840000
 800314c:	50000100 	.word	0x50000100
 8003150:	36902000 	.word	0x36902000
 8003154:	c3290000 	.word	0xc3290000
 8003158:	47520000 	.word	0x47520000
 800315c:	cb8c0000 	.word	0xcb8c0000
 8003160:	50000400 	.word	0x50000400
 8003164:	b6982000 	.word	0xb6982000
 8003168:	43210000 	.word	0x43210000
 800316c:	50000500 	.word	0x50000500
 8003170:	c75a0000 	.word	0xc75a0000
 8003174:	50000600 	.word	0x50000600
 8003178:	8c900008 	.word	0x8c900008
 800317c:	90c00010 	.word	0x90c00010
 8003180:	94f00020 	.word	0x94f00020
 8003184:	080107bc 	.word	0x080107bc
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a8b      	ldr	r2, [pc, #556]	@ (80033bc <HAL_ADC_ConfigChannel+0x730>)
 800318e:	4293      	cmp	r3, r2
 8003190:	f000 80c9 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a89      	ldr	r2, [pc, #548]	@ (80033c0 <HAL_ADC_ConfigChannel+0x734>)
 800319a:	4293      	cmp	r3, r2
 800319c:	f000 80c3 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a87      	ldr	r2, [pc, #540]	@ (80033c4 <HAL_ADC_ConfigChannel+0x738>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	f000 80bd 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a85      	ldr	r2, [pc, #532]	@ (80033c8 <HAL_ADC_ConfigChannel+0x73c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	f000 80b7 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a83      	ldr	r2, [pc, #524]	@ (80033cc <HAL_ADC_ConfigChannel+0x740>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	f000 80b1 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a81      	ldr	r2, [pc, #516]	@ (80033d0 <HAL_ADC_ConfigChannel+0x744>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	f000 80ab 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a7f      	ldr	r2, [pc, #508]	@ (80033d4 <HAL_ADC_ConfigChannel+0x748>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	f000 80a5 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a7d      	ldr	r2, [pc, #500]	@ (80033d8 <HAL_ADC_ConfigChannel+0x74c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	f000 809f 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031f0:	d117      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x596>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a79      	ldr	r2, [pc, #484]	@ (80033dc <HAL_ADC_ConfigChannel+0x750>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	f000 8094 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a77      	ldr	r2, [pc, #476]	@ (80033e0 <HAL_ADC_ConfigChannel+0x754>)
 8003204:	4293      	cmp	r3, r2
 8003206:	f000 808e 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a75      	ldr	r2, [pc, #468]	@ (80033e4 <HAL_ADC_ConfigChannel+0x758>)
 8003210:	4293      	cmp	r3, r2
 8003212:	f000 8088 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a73      	ldr	r2, [pc, #460]	@ (80033e8 <HAL_ADC_ConfigChannel+0x75c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	f000 8082 	beq.w	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a71      	ldr	r2, [pc, #452]	@ (80033ec <HAL_ADC_ConfigChannel+0x760>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d11d      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x5dc>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a6a      	ldr	r2, [pc, #424]	@ (80033dc <HAL_ADC_ConfigChannel+0x750>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d077      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a69      	ldr	r2, [pc, #420]	@ (80033e0 <HAL_ADC_ConfigChannel+0x754>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d072      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a67      	ldr	r2, [pc, #412]	@ (80033e4 <HAL_ADC_ConfigChannel+0x758>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d06d      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a66      	ldr	r2, [pc, #408]	@ (80033e8 <HAL_ADC_ConfigChannel+0x75c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d068      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a65      	ldr	r2, [pc, #404]	@ (80033f0 <HAL_ADC_ConfigChannel+0x764>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d063      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a64      	ldr	r2, [pc, #400]	@ (80033f4 <HAL_ADC_ConfigChannel+0x768>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d05e      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a62      	ldr	r2, [pc, #392]	@ (80033f8 <HAL_ADC_ConfigChannel+0x76c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d118      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x618>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a59      	ldr	r2, [pc, #356]	@ (80033dc <HAL_ADC_ConfigChannel+0x750>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d054      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a57      	ldr	r2, [pc, #348]	@ (80033e0 <HAL_ADC_ConfigChannel+0x754>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d04f      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a56      	ldr	r2, [pc, #344]	@ (80033e4 <HAL_ADC_ConfigChannel+0x758>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d04a      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a54      	ldr	r2, [pc, #336]	@ (80033e8 <HAL_ADC_ConfigChannel+0x75c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d045      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a57      	ldr	r2, [pc, #348]	@ (80033fc <HAL_ADC_ConfigChannel+0x770>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d040      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a55      	ldr	r2, [pc, #340]	@ (8003400 <HAL_ADC_ConfigChannel+0x774>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d122      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x668>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a4a      	ldr	r2, [pc, #296]	@ (80033dc <HAL_ADC_ConfigChannel+0x750>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d036      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a48      	ldr	r2, [pc, #288]	@ (80033e0 <HAL_ADC_ConfigChannel+0x754>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d031      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a47      	ldr	r2, [pc, #284]	@ (80033e4 <HAL_ADC_ConfigChannel+0x758>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d02c      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a45      	ldr	r2, [pc, #276]	@ (80033e8 <HAL_ADC_ConfigChannel+0x75c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d027      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a45      	ldr	r2, [pc, #276]	@ (80033f0 <HAL_ADC_ConfigChannel+0x764>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d022      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a43      	ldr	r2, [pc, #268]	@ (80033f4 <HAL_ADC_ConfigChannel+0x768>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d01d      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a43      	ldr	r2, [pc, #268]	@ (80033fc <HAL_ADC_ConfigChannel+0x770>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d018      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a42      	ldr	r2, [pc, #264]	@ (8003404 <HAL_ADC_ConfigChannel+0x778>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d10e      	bne.n	800331c <HAL_ADC_ConfigChannel+0x690>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a3b      	ldr	r2, [pc, #236]	@ (80033f0 <HAL_ADC_ConfigChannel+0x764>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00e      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a39      	ldr	r2, [pc, #228]	@ (80033f4 <HAL_ADC_ConfigChannel+0x768>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d009      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a39      	ldr	r2, [pc, #228]	@ (80033fc <HAL_ADC_ConfigChannel+0x770>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d004      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x69a>
 800331c:	f640 21e4 	movw	r1, #2788	@ 0xae4
 8003320:	4839      	ldr	r0, [pc, #228]	@ (8003408 <HAL_ADC_ConfigChannel+0x77c>)
 8003322:	f7fe f879 	bl	8001418 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800332c:	2b01      	cmp	r3, #1
 800332e:	d102      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x6aa>
 8003330:	2302      	movs	r3, #2
 8003332:	f000 bc58 	b.w	8003be6 <HAL_ADC_ConfigChannel+0xf5a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe fd03 	bl	8001d4e <LL_ADC_REG_IsConversionOngoing>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	f040 8438 	bne.w	8003bc0 <HAL_ADC_ConfigChannel+0xf34>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	f7fe fbea 	bl	8001b36 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fcf1 	bl	8001d4e <LL_ADC_REG_IsConversionOngoing>
 800336c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe fcfd 	bl	8001d74 <LL_ADC_INJ_IsConversionOngoing>
 800337a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800337e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003382:	2b00      	cmp	r3, #0
 8003384:	f040 821f 	bne.w	80037c6 <HAL_ADC_ConfigChannel+0xb3a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003388:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800338c:	2b00      	cmp	r3, #0
 800338e:	f040 821a 	bne.w	80037c6 <HAL_ADC_ConfigChannel+0xb3a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800339a:	d137      	bne.n	800340c <HAL_ADC_ConfigChannel+0x780>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2200      	movs	r2, #0
 80033a6:	4619      	mov	r1, r3
 80033a8:	f7fe fc04 	bl	8001bb4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe fb98 	bl	8001aea <LL_ADC_SetSamplingTimeCommonConfig>
 80033ba:	e036      	b.n	800342a <HAL_ADC_ConfigChannel+0x79e>
 80033bc:	04300002 	.word	0x04300002
 80033c0:	19200040 	.word	0x19200040
 80033c4:	1d500080 	.word	0x1d500080
 80033c8:	21800100 	.word	0x21800100
 80033cc:	25b00200 	.word	0x25b00200
 80033d0:	2a000400 	.word	0x2a000400
 80033d4:	2e300800 	.word	0x2e300800
 80033d8:	3ac04000 	.word	0x3ac04000
 80033dc:	08600004 	.word	0x08600004
 80033e0:	0c900008 	.word	0x0c900008
 80033e4:	10c00010 	.word	0x10c00010
 80033e8:	14f00020 	.word	0x14f00020
 80033ec:	50000100 	.word	0x50000100
 80033f0:	32601000 	.word	0x32601000
 80033f4:	36902000 	.word	0x36902000
 80033f8:	50000400 	.word	0x50000400
 80033fc:	3ef08000 	.word	0x3ef08000
 8003400:	50000500 	.word	0x50000500
 8003404:	50000600 	.word	0x50000600
 8003408:	080107bc 	.word	0x080107bc
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	461a      	mov	r2, r3
 800341a:	f7fe fbcb 	bl	8001bb4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe fb60 	bl	8001aea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	08db      	lsrs	r3, r3, #3
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	2b04      	cmp	r3, #4
 800344a:	d03d      	beq.n	80034c8 <HAL_ADC_ConfigChannel+0x83c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	6919      	ldr	r1, [r3, #16]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800345c:	f7fe faba 	bl	80019d4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d009      	beq.n	800347c <HAL_ADC_ConfigChannel+0x7f0>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003470:	d004      	beq.n	800347c <HAL_ADC_ConfigChannel+0x7f0>
 8003472:	f640 311c 	movw	r1, #2844	@ 0xb1c
 8003476:	48b3      	ldr	r0, [pc, #716]	@ (8003744 <HAL_ADC_ConfigChannel+0xab8>)
 8003478:	f7fd ffce 	bl	8001418 <assert_failed>
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	7f1b      	ldrb	r3, [r3, #28]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_ADC_ConfigChannel+0x80a>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	7f1b      	ldrb	r3, [r3, #28]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d004      	beq.n	8003496 <HAL_ADC_ConfigChannel+0x80a>
 800348c:	f640 311d 	movw	r1, #2845	@ 0xb1d
 8003490:	48ac      	ldr	r0, [pc, #688]	@ (8003744 <HAL_ADC_ConfigChannel+0xab8>)
 8003492:	f7fd ffc1 	bl	8001418 <assert_failed>
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6919      	ldr	r1, [r3, #16]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	461a      	mov	r2, r3
 80034a4:	f7fe faeb 	bl	8001a7e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d102      	bne.n	80034be <HAL_ADC_ConfigChannel+0x832>
 80034b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034bc:	e000      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x834>
 80034be:	2300      	movs	r3, #0
 80034c0:	461a      	mov	r2, r3
 80034c2:	f7fe faf7 	bl	8001ab4 <LL_ADC_SetOffsetSaturation>
 80034c6:	e17e      	b.n	80037c6 <HAL_ADC_ConfigChannel+0xb3a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2100      	movs	r1, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe faa4 	bl	8001a1c <LL_ADC_GetOffsetChannel>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10a      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x868>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2100      	movs	r1, #0
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe fa99 	bl	8001a1c <LL_ADC_GetOffsetChannel>
 80034ea:	4603      	mov	r3, r0
 80034ec:	0e9b      	lsrs	r3, r3, #26
 80034ee:	f003 021f 	and.w	r2, r3, #31
 80034f2:	e01e      	b.n	8003532 <HAL_ADC_ConfigChannel+0x8a6>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2100      	movs	r1, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe fa8e 	bl	8001a1c <LL_ADC_GetOffsetChannel>
 8003500:	4603      	mov	r3, r0
 8003502:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003506:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003512:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003516:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800351a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x89a>
  {
    return 32U;
 8003522:	2320      	movs	r3, #32
 8003524:	e004      	b.n	8003530 <HAL_ADC_ConfigChannel+0x8a4>
  }
  return __builtin_clz(value);
 8003526:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353a:	2b00      	cmp	r3, #0
 800353c:	d105      	bne.n	800354a <HAL_ADC_ConfigChannel+0x8be>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	0e9b      	lsrs	r3, r3, #26
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	e018      	b.n	800357c <HAL_ADC_ConfigChannel+0x8f0>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800355e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003562:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003566:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x8e6>
    return 32U;
 800356e:	2320      	movs	r3, #32
 8003570:	e004      	b.n	800357c <HAL_ADC_ConfigChannel+0x8f0>
  return __builtin_clz(value);
 8003572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800357c:	429a      	cmp	r2, r3
 800357e:	d106      	bne.n	800358e <HAL_ADC_ConfigChannel+0x902>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2200      	movs	r2, #0
 8003586:	2100      	movs	r1, #0
 8003588:	4618      	mov	r0, r3
 800358a:	f7fe fa5d 	bl	8001a48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2101      	movs	r1, #1
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe fa41 	bl	8001a1c <LL_ADC_GetOffsetChannel>
 800359a:	4603      	mov	r3, r0
 800359c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <HAL_ADC_ConfigChannel+0x92e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2101      	movs	r1, #1
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe fa36 	bl	8001a1c <LL_ADC_GetOffsetChannel>
 80035b0:	4603      	mov	r3, r0
 80035b2:	0e9b      	lsrs	r3, r3, #26
 80035b4:	f003 021f 	and.w	r2, r3, #31
 80035b8:	e01e      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x96c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2101      	movs	r1, #1
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe fa2b 	bl	8001a1c <LL_ADC_GetOffsetChannel>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80035d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80035e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x960>
    return 32U;
 80035e8:	2320      	movs	r3, #32
 80035ea:	e004      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x96a>
  return __builtin_clz(value);
 80035ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035f0:	fab3 f383 	clz	r3, r3
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003600:	2b00      	cmp	r3, #0
 8003602:	d105      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x984>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	0e9b      	lsrs	r3, r3, #26
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	e018      	b.n	8003642 <HAL_ADC_ConfigChannel+0x9b6>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003618:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003624:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003628:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800362c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x9ac>
    return 32U;
 8003634:	2320      	movs	r3, #32
 8003636:	e004      	b.n	8003642 <HAL_ADC_ConfigChannel+0x9b6>
  return __builtin_clz(value);
 8003638:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800363c:	fab3 f383 	clz	r3, r3
 8003640:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003642:	429a      	cmp	r2, r3
 8003644:	d106      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x9c8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2200      	movs	r2, #0
 800364c:	2101      	movs	r1, #1
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe f9fa 	bl	8001a48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2102      	movs	r1, #2
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe f9de 	bl	8001a1c <LL_ADC_GetOffsetChannel>
 8003660:	4603      	mov	r3, r0
 8003662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x9f4>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2102      	movs	r1, #2
 8003670:	4618      	mov	r0, r3
 8003672:	f7fe f9d3 	bl	8001a1c <LL_ADC_GetOffsetChannel>
 8003676:	4603      	mov	r3, r0
 8003678:	0e9b      	lsrs	r3, r3, #26
 800367a:	f003 021f 	and.w	r2, r3, #31
 800367e:	e01e      	b.n	80036be <HAL_ADC_ConfigChannel+0xa32>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2102      	movs	r1, #2
 8003686:	4618      	mov	r0, r3
 8003688:	f7fe f9c8 	bl	8001a1c <LL_ADC_GetOffsetChannel>
 800368c:	4603      	mov	r3, r0
 800368e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003696:	fa93 f3a3 	rbit	r3, r3
 800369a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800369e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80036a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0xa26>
    return 32U;
 80036ae:	2320      	movs	r3, #32
 80036b0:	e004      	b.n	80036bc <HAL_ADC_ConfigChannel+0xa30>
  return __builtin_clz(value);
 80036b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d105      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0xa4a>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	0e9b      	lsrs	r3, r3, #26
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	e016      	b.n	8003704 <HAL_ADC_ConfigChannel+0xa78>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80036e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80036ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_ADC_ConfigChannel+0xa6e>
    return 32U;
 80036f6:	2320      	movs	r3, #32
 80036f8:	e004      	b.n	8003704 <HAL_ADC_ConfigChannel+0xa78>
  return __builtin_clz(value);
 80036fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003704:	429a      	cmp	r2, r3
 8003706:	d106      	bne.n	8003716 <HAL_ADC_ConfigChannel+0xa8a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2200      	movs	r2, #0
 800370e:	2102      	movs	r1, #2
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe f999 	bl	8001a48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2103      	movs	r1, #3
 800371c:	4618      	mov	r0, r3
 800371e:	f7fe f97d 	bl	8001a1c <LL_ADC_GetOffsetChannel>
 8003722:	4603      	mov	r3, r0
 8003724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10d      	bne.n	8003748 <HAL_ADC_ConfigChannel+0xabc>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2103      	movs	r1, #3
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe f972 	bl	8001a1c <LL_ADC_GetOffsetChannel>
 8003738:	4603      	mov	r3, r0
 800373a:	0e9b      	lsrs	r3, r3, #26
 800373c:	f003 021f 	and.w	r2, r3, #31
 8003740:	e01a      	b.n	8003778 <HAL_ADC_ConfigChannel+0xaec>
 8003742:	bf00      	nop
 8003744:	080107bc 	.word	0x080107bc
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2103      	movs	r1, #3
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe f964 	bl	8001a1c <LL_ADC_GetOffsetChannel>
 8003754:	4603      	mov	r3, r0
 8003756:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003760:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003762:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_ADC_ConfigChannel+0xae2>
    return 32U;
 800376a:	2320      	movs	r3, #32
 800376c:	e003      	b.n	8003776 <HAL_ADC_ConfigChannel+0xaea>
  return __builtin_clz(value);
 800376e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003770:	fab3 f383 	clz	r3, r3
 8003774:	b2db      	uxtb	r3, r3
 8003776:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003780:	2b00      	cmp	r3, #0
 8003782:	d105      	bne.n	8003790 <HAL_ADC_ConfigChannel+0xb04>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	0e9b      	lsrs	r3, r3, #26
 800378a:	f003 031f 	and.w	r3, r3, #31
 800378e:	e011      	b.n	80037b4 <HAL_ADC_ConfigChannel+0xb28>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003796:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800379e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80037a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_ADC_ConfigChannel+0xb20>
    return 32U;
 80037a8:	2320      	movs	r3, #32
 80037aa:	e003      	b.n	80037b4 <HAL_ADC_ConfigChannel+0xb28>
  return __builtin_clz(value);
 80037ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d106      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0xb3a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2200      	movs	r2, #0
 80037be:	2103      	movs	r1, #3
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe f941 	bl	8001a48 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe faac 	bl	8001d28 <LL_ADC_IsEnabled>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 813d 	bne.w	8003a52 <HAL_ADC_ConfigChannel+0xdc6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	6819      	ldr	r1, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	461a      	mov	r2, r3
 80037e6:	f7fe fa11 	bl	8001c0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	4aa2      	ldr	r2, [pc, #648]	@ (8003a78 <HAL_ADC_ConfigChannel+0xdec>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	f040 812e 	bne.w	8003a52 <HAL_ADC_ConfigChannel+0xdc6>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <HAL_ADC_ConfigChannel+0xb92>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	0e9b      	lsrs	r3, r3, #26
 800380c:	3301      	adds	r3, #1
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2b09      	cmp	r3, #9
 8003814:	bf94      	ite	ls
 8003816:	2301      	movls	r3, #1
 8003818:	2300      	movhi	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	e019      	b.n	8003852 <HAL_ADC_ConfigChannel+0xbc6>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800382c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800382e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003830:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_ADC_ConfigChannel+0xbae>
    return 32U;
 8003836:	2320      	movs	r3, #32
 8003838:	e003      	b.n	8003842 <HAL_ADC_ConfigChannel+0xbb6>
  return __builtin_clz(value);
 800383a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800383c:	fab3 f383 	clz	r3, r3
 8003840:	b2db      	uxtb	r3, r3
 8003842:	3301      	adds	r3, #1
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	2b09      	cmp	r3, #9
 800384a:	bf94      	ite	ls
 800384c:	2301      	movls	r3, #1
 800384e:	2300      	movhi	r3, #0
 8003850:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003852:	2b00      	cmp	r3, #0
 8003854:	d079      	beq.n	800394a <HAL_ADC_ConfigChannel+0xcbe>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385e:	2b00      	cmp	r3, #0
 8003860:	d107      	bne.n	8003872 <HAL_ADC_ConfigChannel+0xbe6>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	0e9b      	lsrs	r3, r3, #26
 8003868:	3301      	adds	r3, #1
 800386a:	069b      	lsls	r3, r3, #26
 800386c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003870:	e015      	b.n	800389e <HAL_ADC_ConfigChannel+0xc12>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003882:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003884:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_ADC_ConfigChannel+0xc02>
    return 32U;
 800388a:	2320      	movs	r3, #32
 800388c:	e003      	b.n	8003896 <HAL_ADC_ConfigChannel+0xc0a>
  return __builtin_clz(value);
 800388e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003890:	fab3 f383 	clz	r3, r3
 8003894:	b2db      	uxtb	r3, r3
 8003896:	3301      	adds	r3, #1
 8003898:	069b      	lsls	r3, r3, #26
 800389a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <HAL_ADC_ConfigChannel+0xc32>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	0e9b      	lsrs	r3, r3, #26
 80038b0:	3301      	adds	r3, #1
 80038b2:	f003 031f 	and.w	r3, r3, #31
 80038b6:	2101      	movs	r1, #1
 80038b8:	fa01 f303 	lsl.w	r3, r1, r3
 80038bc:	e017      	b.n	80038ee <HAL_ADC_ConfigChannel+0xc62>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80038cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80038d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_ADC_ConfigChannel+0xc4e>
    return 32U;
 80038d6:	2320      	movs	r3, #32
 80038d8:	e003      	b.n	80038e2 <HAL_ADC_ConfigChannel+0xc56>
  return __builtin_clz(value);
 80038da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038dc:	fab3 f383 	clz	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f003 031f 	and.w	r3, r3, #31
 80038e8:	2101      	movs	r1, #1
 80038ea:	fa01 f303 	lsl.w	r3, r1, r3
 80038ee:	ea42 0103 	orr.w	r1, r2, r3
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <HAL_ADC_ConfigChannel+0xc88>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	0e9b      	lsrs	r3, r3, #26
 8003904:	3301      	adds	r3, #1
 8003906:	f003 021f 	and.w	r2, r3, #31
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	051b      	lsls	r3, r3, #20
 8003912:	e018      	b.n	8003946 <HAL_ADC_ConfigChannel+0xcba>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003924:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_ADC_ConfigChannel+0xca4>
    return 32U;
 800392c:	2320      	movs	r3, #32
 800392e:	e003      	b.n	8003938 <HAL_ADC_ConfigChannel+0xcac>
  return __builtin_clz(value);
 8003930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	3301      	adds	r3, #1
 800393a:	f003 021f 	and.w	r2, r3, #31
 800393e:	4613      	mov	r3, r2
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	4413      	add	r3, r2
 8003944:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003946:	430b      	orrs	r3, r1
 8003948:	e07e      	b.n	8003a48 <HAL_ADC_ConfigChannel+0xdbc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003952:	2b00      	cmp	r3, #0
 8003954:	d107      	bne.n	8003966 <HAL_ADC_ConfigChannel+0xcda>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	0e9b      	lsrs	r3, r3, #26
 800395c:	3301      	adds	r3, #1
 800395e:	069b      	lsls	r3, r3, #26
 8003960:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003964:	e015      	b.n	8003992 <HAL_ADC_ConfigChannel+0xd06>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003976:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_ADC_ConfigChannel+0xcf6>
    return 32U;
 800397e:	2320      	movs	r3, #32
 8003980:	e003      	b.n	800398a <HAL_ADC_ConfigChannel+0xcfe>
  return __builtin_clz(value);
 8003982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003984:	fab3 f383 	clz	r3, r3
 8003988:	b2db      	uxtb	r3, r3
 800398a:	3301      	adds	r3, #1
 800398c:	069b      	lsls	r3, r3, #26
 800398e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0xd26>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	0e9b      	lsrs	r3, r3, #26
 80039a4:	3301      	adds	r3, #1
 80039a6:	f003 031f 	and.w	r3, r3, #31
 80039aa:	2101      	movs	r1, #1
 80039ac:	fa01 f303 	lsl.w	r3, r1, r3
 80039b0:	e017      	b.n	80039e2 <HAL_ADC_ConfigChannel+0xd56>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	61fb      	str	r3, [r7, #28]
  return result;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_ADC_ConfigChannel+0xd42>
    return 32U;
 80039ca:	2320      	movs	r3, #32
 80039cc:	e003      	b.n	80039d6 <HAL_ADC_ConfigChannel+0xd4a>
  return __builtin_clz(value);
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d0:	fab3 f383 	clz	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	2101      	movs	r1, #1
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	ea42 0103 	orr.w	r1, r2, r3
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10d      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0xd82>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	0e9b      	lsrs	r3, r3, #26
 80039f8:	3301      	adds	r3, #1
 80039fa:	f003 021f 	and.w	r2, r3, #31
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	3b1e      	subs	r3, #30
 8003a06:	051b      	lsls	r3, r3, #20
 8003a08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a0c:	e01b      	b.n	8003a46 <HAL_ADC_ConfigChannel+0xdba>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	fa93 f3a3 	rbit	r3, r3
 8003a1a:	613b      	str	r3, [r7, #16]
  return result;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0xd9e>
    return 32U;
 8003a26:	2320      	movs	r3, #32
 8003a28:	e003      	b.n	8003a32 <HAL_ADC_ConfigChannel+0xda6>
  return __builtin_clz(value);
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	fab3 f383 	clz	r3, r3
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	3301      	adds	r3, #1
 8003a34:	f003 021f 	and.w	r2, r3, #31
 8003a38:	4613      	mov	r3, r2
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3b1e      	subs	r3, #30
 8003a40:	051b      	lsls	r3, r3, #20
 8003a42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a46:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f7fe f8b1 	bl	8001bb4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <HAL_ADC_ConfigChannel+0xdf0>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 80bd 	beq.w	8003bda <HAL_ADC_ConfigChannel+0xf4e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a68:	d004      	beq.n	8003a74 <HAL_ADC_ConfigChannel+0xde8>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a04      	ldr	r2, [pc, #16]	@ (8003a80 <HAL_ADC_ConfigChannel+0xdf4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d109      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0xdfc>
 8003a74:	4b03      	ldr	r3, [pc, #12]	@ (8003a84 <HAL_ADC_ConfigChannel+0xdf8>)
 8003a76:	e008      	b.n	8003a8a <HAL_ADC_ConfigChannel+0xdfe>
 8003a78:	407f0000 	.word	0x407f0000
 8003a7c:	80080000 	.word	0x80080000
 8003a80:	50000100 	.word	0x50000100
 8003a84:	50000300 	.word	0x50000300
 8003a88:	4b59      	ldr	r3, [pc, #356]	@ (8003bf0 <HAL_ADC_ConfigChannel+0xf64>)
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fd ff86 	bl	800199c <LL_ADC_GetCommonPathInternalCh>
 8003a90:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a56      	ldr	r2, [pc, #344]	@ (8003bf4 <HAL_ADC_ConfigChannel+0xf68>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d004      	beq.n	8003aa8 <HAL_ADC_ConfigChannel+0xe1c>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a55      	ldr	r2, [pc, #340]	@ (8003bf8 <HAL_ADC_ConfigChannel+0xf6c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d13a      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0xe92>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003aa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003aac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d134      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0xe92>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003abc:	d005      	beq.n	8003aca <HAL_ADC_ConfigChannel+0xe3e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a4e      	ldr	r2, [pc, #312]	@ (8003bfc <HAL_ADC_ConfigChannel+0xf70>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	f040 8085 	bne.w	8003bd4 <HAL_ADC_ConfigChannel+0xf48>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ad2:	d004      	beq.n	8003ade <HAL_ADC_ConfigChannel+0xe52>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a49      	ldr	r2, [pc, #292]	@ (8003c00 <HAL_ADC_ConfigChannel+0xf74>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d101      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0xe56>
 8003ade:	4a49      	ldr	r2, [pc, #292]	@ (8003c04 <HAL_ADC_ConfigChannel+0xf78>)
 8003ae0:	e000      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0xe58>
 8003ae2:	4a43      	ldr	r2, [pc, #268]	@ (8003bf0 <HAL_ADC_ConfigChannel+0xf64>)
 8003ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ae8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	f7fd ff41 	bl	8001976 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003af4:	4b44      	ldr	r3, [pc, #272]	@ (8003c08 <HAL_ADC_ConfigChannel+0xf7c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	099b      	lsrs	r3, r3, #6
 8003afa:	4a44      	ldr	r2, [pc, #272]	@ (8003c0c <HAL_ADC_ConfigChannel+0xf80>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	4613      	mov	r3, r2
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b0e:	e002      	b.n	8003b16 <HAL_ADC_ConfigChannel+0xe8a>
          {
            wait_loop_index--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f9      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0xe84>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b1c:	e05a      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0xf48>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a3b      	ldr	r2, [pc, #236]	@ (8003c10 <HAL_ADC_ConfigChannel+0xf84>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d125      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0xee8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d11f      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0xee8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a31      	ldr	r2, [pc, #196]	@ (8003c00 <HAL_ADC_ConfigChannel+0xf74>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d104      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0xebc>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a34      	ldr	r2, [pc, #208]	@ (8003c14 <HAL_ADC_ConfigChannel+0xf88>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d047      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0xf4c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b50:	d004      	beq.n	8003b5c <HAL_ADC_ConfigChannel+0xed0>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a2a      	ldr	r2, [pc, #168]	@ (8003c00 <HAL_ADC_ConfigChannel+0xf74>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d101      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0xed4>
 8003b5c:	4a29      	ldr	r2, [pc, #164]	@ (8003c04 <HAL_ADC_ConfigChannel+0xf78>)
 8003b5e:	e000      	b.n	8003b62 <HAL_ADC_ConfigChannel+0xed6>
 8003b60:	4a23      	ldr	r2, [pc, #140]	@ (8003bf0 <HAL_ADC_ConfigChannel+0xf64>)
 8003b62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	f7fd ff02 	bl	8001976 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b72:	e031      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0xf4c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a27      	ldr	r2, [pc, #156]	@ (8003c18 <HAL_ADC_ConfigChannel+0xf8c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d12d      	bne.n	8003bda <HAL_ADC_ConfigChannel+0xf4e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d127      	bne.n	8003bda <HAL_ADC_ConfigChannel+0xf4e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003c00 <HAL_ADC_ConfigChannel+0xf74>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d022      	beq.n	8003bda <HAL_ADC_ConfigChannel+0xf4e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b9c:	d004      	beq.n	8003ba8 <HAL_ADC_ConfigChannel+0xf1c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a17      	ldr	r2, [pc, #92]	@ (8003c00 <HAL_ADC_ConfigChannel+0xf74>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d101      	bne.n	8003bac <HAL_ADC_ConfigChannel+0xf20>
 8003ba8:	4a16      	ldr	r2, [pc, #88]	@ (8003c04 <HAL_ADC_ConfigChannel+0xf78>)
 8003baa:	e000      	b.n	8003bae <HAL_ADC_ConfigChannel+0xf22>
 8003bac:	4a10      	ldr	r2, [pc, #64]	@ (8003bf0 <HAL_ADC_ConfigChannel+0xf64>)
 8003bae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	f7fd fedc 	bl	8001976 <LL_ADC_SetCommonPathInternalCh>
 8003bbe:	e00c      	b.n	8003bda <HAL_ADC_ConfigChannel+0xf4e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc4:	f043 0220 	orr.w	r2, r3, #32
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003bd2:	e002      	b.n	8003bda <HAL_ADC_ConfigChannel+0xf4e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bd4:	bf00      	nop
 8003bd6:	e000      	b.n	8003bda <HAL_ADC_ConfigChannel+0xf4e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003be2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	37dc      	adds	r7, #220	@ 0xdc
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd90      	pop	{r4, r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	50000700 	.word	0x50000700
 8003bf4:	c3210000 	.word	0xc3210000
 8003bf8:	90c00010 	.word	0x90c00010
 8003bfc:	50000600 	.word	0x50000600
 8003c00:	50000100 	.word	0x50000100
 8003c04:	50000300 	.word	0x50000300
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	053e2d63 	.word	0x053e2d63
 8003c10:	c7520000 	.word	0xc7520000
 8003c14:	50000500 	.word	0x50000500
 8003c18:	cb840000 	.word	0xcb840000

08003c1c <LL_ADC_IsEnabled>:
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <LL_ADC_IsEnabled+0x18>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <LL_ADC_IsEnabled+0x1a>
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <LL_ADC_REG_IsConversionOngoing>:
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d101      	bne.n	8003c5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003ccc:	b590      	push	{r4, r7, lr}
 8003cce:	b0a1      	sub	sp, #132	@ 0x84
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmp_hadc_slave;
  uint32_t tmp_hadc_slave_conversion_on_going;

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ce4:	d009      	beq.n	8003cfa <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a92      	ldr	r2, [pc, #584]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x268>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8003cf0:	f640 014c 	movw	r1, #2124	@ 0x84c
 8003cf4:	4890      	ldr	r0, [pc, #576]	@ (8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8003cf6:	f7fd fb8f 	bl	8001418 <assert_failed>
  assert_param(IS_ADC_MULTIMODE(pMultimode->Mode));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d020      	beq.n	8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d01c      	beq.n	8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d018      	beq.n	8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d014      	beq.n	8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b05      	cmp	r3, #5
 8003d20:	d010      	beq.n	8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b06      	cmp	r3, #6
 8003d28:	d00c      	beq.n	8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b07      	cmp	r3, #7
 8003d30:	d008      	beq.n	8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b09      	cmp	r3, #9
 8003d38:	d004      	beq.n	8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8003d3a:	f640 014d 	movw	r1, #2125	@ 0x84d
 8003d3e:	487e      	ldr	r0, [pc, #504]	@ (8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8003d40:	f7fd fb6a 	bl	8001418 <assert_failed>
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d052      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
  {
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00e      	beq.n	8003d72 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d5c:	d009      	beq.n	8003d72 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d66:	d004      	beq.n	8003d72 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003d68:	f44f 6105 	mov.w	r1, #2128	@ 0x850
 8003d6c:	4872      	ldr	r0, [pc, #456]	@ (8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8003d6e:	f7fd fb53 	bl	8001418 <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d03b      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d82:	d036      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d8c:	d031      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d96:	d02c      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da0:	d027      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003daa:	d022      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003db4:	d01d      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003dbe:	d018      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dc8:	d013      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8003dd2:	d00e      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003ddc:	d009      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8003de6:	d004      	beq.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003de8:	f640 0151 	movw	r1, #2129	@ 0x851
 8003dec:	4852      	ldr	r0, [pc, #328]	@ (8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8003dee:	f7fd fb13 	bl	8001418 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x134>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e0f6      	b.n	8003fee <HAL_ADCEx_MultiModeConfigChannel+0x322>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003e08:	2300      	movs	r3, #0
 8003e0a:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e18:	d102      	bne.n	8003e20 <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8003e1a:	4b48      	ldr	r3, [pc, #288]	@ (8003f3c <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	e009      	b.n	8003e34 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a43      	ldr	r2, [pc, #268]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x268>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d102      	bne.n	8003e30 <HAL_ADCEx_MultiModeConfigChannel+0x164>
 8003e2a:	4b45      	ldr	r3, [pc, #276]	@ (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x274>)
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	e001      	b.n	8003e34 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e30:	2300      	movs	r3, #0
 8003e32:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10b      	bne.n	8003e52 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3e:	f043 0220 	orr.w	r2, r3, #32
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e0cd      	b.n	8003fee <HAL_ADCEx_MultiModeConfigChannel+0x322>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fef4 	bl	8003c42 <LL_ADC_REG_IsConversionOngoing>
 8003e5a:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff feee 	bl	8003c42 <LL_ADC_REG_IsConversionOngoing>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f040 80af 	bne.w	8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x300>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003e6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f040 80ab 	bne.w	8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x300>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e7e:	d004      	beq.n	8003e8a <HAL_ADCEx_MultiModeConfigChannel+0x1be>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a2d      	ldr	r2, [pc, #180]	@ (8003f3c <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8003f44 <HAL_ADCEx_MultiModeConfigChannel+0x278>)
 8003e8c:	e000      	b.n	8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
 8003e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x27c>)
 8003e90:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d05a      	beq.n	8003f50 <HAL_ADCEx_MultiModeConfigChannel+0x284>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6859      	ldr	r1, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003eac:	035b      	lsls	r3, r3, #13
 8003eae:	430b      	orrs	r3, r1
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eb4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ebe:	d004      	beq.n	8003eca <HAL_ADCEx_MultiModeConfigChannel+0x1fe>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f3c <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d10f      	bne.n	8003eea <HAL_ADCEx_MultiModeConfigChannel+0x21e>
 8003eca:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003ece:	f7ff fea5 	bl	8003c1c <LL_ADC_IsEnabled>
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	4819      	ldr	r0, [pc, #100]	@ (8003f3c <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 8003ed6:	f7ff fea1 	bl	8003c1c <LL_ADC_IsEnabled>
 8003eda:	4603      	mov	r3, r0
 8003edc:	4323      	orrs	r3, r4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bf0c      	ite	eq
 8003ee2:	2301      	moveq	r3, #1
 8003ee4:	2300      	movne	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	e012      	b.n	8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x244>
 8003eea:	4812      	ldr	r0, [pc, #72]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x268>)
 8003eec:	f7ff fe96 	bl	8003c1c <LL_ADC_IsEnabled>
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	4813      	ldr	r0, [pc, #76]	@ (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x274>)
 8003ef4:	f7ff fe92 	bl	8003c1c <LL_ADC_IsEnabled>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	431c      	orrs	r4, r3
 8003efc:	4813      	ldr	r0, [pc, #76]	@ (8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x280>)
 8003efe:	f7ff fe8d 	bl	8003c1c <LL_ADC_IsEnabled>
 8003f02:	4603      	mov	r3, r0
 8003f04:	4323      	orrs	r3, r4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf0c      	ite	eq
 8003f0a:	2301      	moveq	r3, #1
 8003f0c:	2300      	movne	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d065      	beq.n	8003fe0 <HAL_ADCEx_MultiModeConfigChannel+0x314>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003f1c:	f023 030f 	bic.w	r3, r3, #15
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	6811      	ldr	r1, [r2, #0]
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	6892      	ldr	r2, [r2, #8]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f2e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f30:	e056      	b.n	8003fe0 <HAL_ADCEx_MultiModeConfigChannel+0x314>
 8003f32:	bf00      	nop
 8003f34:	50000400 	.word	0x50000400
 8003f38:	0801082c 	.word	0x0801082c
 8003f3c:	50000100 	.word	0x50000100
 8003f40:	50000500 	.word	0x50000500
 8003f44:	50000300 	.word	0x50000300
 8003f48:	50000700 	.word	0x50000700
 8003f4c:	50000600 	.word	0x50000600
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f5a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f64:	d004      	beq.n	8003f70 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a23      	ldr	r2, [pc, #140]	@ (8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x32c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d10f      	bne.n	8003f90 <HAL_ADCEx_MultiModeConfigChannel+0x2c4>
 8003f70:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003f74:	f7ff fe52 	bl	8003c1c <LL_ADC_IsEnabled>
 8003f78:	4604      	mov	r4, r0
 8003f7a:	481f      	ldr	r0, [pc, #124]	@ (8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x32c>)
 8003f7c:	f7ff fe4e 	bl	8003c1c <LL_ADC_IsEnabled>
 8003f80:	4603      	mov	r3, r0
 8003f82:	4323      	orrs	r3, r4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	e012      	b.n	8003fb6 <HAL_ADCEx_MultiModeConfigChannel+0x2ea>
 8003f90:	481a      	ldr	r0, [pc, #104]	@ (8003ffc <HAL_ADCEx_MultiModeConfigChannel+0x330>)
 8003f92:	f7ff fe43 	bl	8003c1c <LL_ADC_IsEnabled>
 8003f96:	4604      	mov	r4, r0
 8003f98:	4819      	ldr	r0, [pc, #100]	@ (8004000 <HAL_ADCEx_MultiModeConfigChannel+0x334>)
 8003f9a:	f7ff fe3f 	bl	8003c1c <LL_ADC_IsEnabled>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	431c      	orrs	r4, r3
 8003fa2:	4818      	ldr	r0, [pc, #96]	@ (8004004 <HAL_ADCEx_MultiModeConfigChannel+0x338>)
 8003fa4:	f7ff fe3a 	bl	8003c1c <LL_ADC_IsEnabled>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	4323      	orrs	r3, r4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d012      	beq.n	8003fe0 <HAL_ADCEx_MultiModeConfigChannel+0x314>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003fba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003fc2:	f023 030f 	bic.w	r3, r3, #15
 8003fc6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003fc8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003fca:	e009      	b.n	8003fe0 <HAL_ADCEx_MultiModeConfigChannel+0x314>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd0:	f043 0220 	orr.w	r2, r3, #32
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003fde:	e000      	b.n	8003fe2 <HAL_ADCEx_MultiModeConfigChannel+0x316>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003fe0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3784      	adds	r7, #132	@ 0x84
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd90      	pop	{r4, r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	50000100 	.word	0x50000100
 8003ffc:	50000400 	.word	0x50000400
 8004000:	50000500 	.word	0x50000500
 8004004:	50000600 	.word	0x50000600

08004008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004018:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <__NVIC_SetPriorityGrouping+0x44>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004024:	4013      	ands	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004030:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004034:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800403a:	4a04      	ldr	r2, [pc, #16]	@ (800404c <__NVIC_SetPriorityGrouping+0x44>)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	60d3      	str	r3, [r2, #12]
}
 8004040:	bf00      	nop
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	e000ed00 	.word	0xe000ed00

08004050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004054:	4b04      	ldr	r3, [pc, #16]	@ (8004068 <__NVIC_GetPriorityGrouping+0x18>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	0a1b      	lsrs	r3, r3, #8
 800405a:	f003 0307 	and.w	r3, r3, #7
}
 800405e:	4618      	mov	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	e000ed00 	.word	0xe000ed00

0800406c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	2b00      	cmp	r3, #0
 800407c:	db0b      	blt.n	8004096 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	f003 021f 	and.w	r2, r3, #31
 8004084:	4907      	ldr	r1, [pc, #28]	@ (80040a4 <__NVIC_EnableIRQ+0x38>)
 8004086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	2001      	movs	r0, #1
 800408e:	fa00 f202 	lsl.w	r2, r0, r2
 8004092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	e000e100 	.word	0xe000e100

080040a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	6039      	str	r1, [r7, #0]
 80040b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	db0a      	blt.n	80040d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	490c      	ldr	r1, [pc, #48]	@ (80040f4 <__NVIC_SetPriority+0x4c>)
 80040c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c6:	0112      	lsls	r2, r2, #4
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	440b      	add	r3, r1
 80040cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040d0:	e00a      	b.n	80040e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	4908      	ldr	r1, [pc, #32]	@ (80040f8 <__NVIC_SetPriority+0x50>)
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	3b04      	subs	r3, #4
 80040e0:	0112      	lsls	r2, r2, #4
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	440b      	add	r3, r1
 80040e6:	761a      	strb	r2, [r3, #24]
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	e000e100 	.word	0xe000e100
 80040f8:	e000ed00 	.word	0xe000ed00

080040fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b089      	sub	sp, #36	@ 0x24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f1c3 0307 	rsb	r3, r3, #7
 8004116:	2b04      	cmp	r3, #4
 8004118:	bf28      	it	cs
 800411a:	2304      	movcs	r3, #4
 800411c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	3304      	adds	r3, #4
 8004122:	2b06      	cmp	r3, #6
 8004124:	d902      	bls.n	800412c <NVIC_EncodePriority+0x30>
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	3b03      	subs	r3, #3
 800412a:	e000      	b.n	800412e <NVIC_EncodePriority+0x32>
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004130:	f04f 32ff 	mov.w	r2, #4294967295
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43da      	mvns	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	401a      	ands	r2, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004144:	f04f 31ff 	mov.w	r1, #4294967295
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	43d9      	mvns	r1, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004154:	4313      	orrs	r3, r2
         );
}
 8004156:	4618      	mov	r0, r3
 8004158:	3724      	adds	r7, #36	@ 0x24
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
	...

08004164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3b01      	subs	r3, #1
 8004170:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004174:	d301      	bcc.n	800417a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004176:	2301      	movs	r3, #1
 8004178:	e00f      	b.n	800419a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800417a:	4a0a      	ldr	r2, [pc, #40]	@ (80041a4 <SysTick_Config+0x40>)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3b01      	subs	r3, #1
 8004180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004182:	210f      	movs	r1, #15
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	f7ff ff8e 	bl	80040a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800418c:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <SysTick_Config+0x40>)
 800418e:	2200      	movs	r2, #0
 8004190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004192:	4b04      	ldr	r3, [pc, #16]	@ (80041a4 <SysTick_Config+0x40>)
 8004194:	2207      	movs	r2, #7
 8004196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	e000e010 	.word	0xe000e010

080041a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b07      	cmp	r3, #7
 80041b4:	d00f      	beq.n	80041d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b06      	cmp	r3, #6
 80041ba:	d00c      	beq.n	80041d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b05      	cmp	r3, #5
 80041c0:	d009      	beq.n	80041d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d006      	beq.n	80041d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d003      	beq.n	80041d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80041ce:	21a6      	movs	r1, #166	@ 0xa6
 80041d0:	4804      	ldr	r0, [pc, #16]	@ (80041e4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80041d2:	f7fd f921 	bl	8001418 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff ff16 	bl	8004008 <__NVIC_SetPriorityGrouping>
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	080108a0 	.word	0x080108a0

080041e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b0f      	cmp	r3, #15
 80041fa:	d903      	bls.n	8004204 <HAL_NVIC_SetPriority+0x1c>
 80041fc:	21be      	movs	r1, #190	@ 0xbe
 80041fe:	480e      	ldr	r0, [pc, #56]	@ (8004238 <HAL_NVIC_SetPriority+0x50>)
 8004200:	f7fd f90a 	bl	8001418 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b0f      	cmp	r3, #15
 8004208:	d903      	bls.n	8004212 <HAL_NVIC_SetPriority+0x2a>
 800420a:	21bf      	movs	r1, #191	@ 0xbf
 800420c:	480a      	ldr	r0, [pc, #40]	@ (8004238 <HAL_NVIC_SetPriority+0x50>)
 800420e:	f7fd f903 	bl	8001418 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8004212:	f7ff ff1d 	bl	8004050 <__NVIC_GetPriorityGrouping>
 8004216:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	6978      	ldr	r0, [r7, #20]
 800421e:	f7ff ff6d 	bl	80040fc <NVIC_EncodePriority>
 8004222:	4602      	mov	r2, r0
 8004224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004228:	4611      	mov	r1, r2
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff ff3c 	bl	80040a8 <__NVIC_SetPriority>
}
 8004230:	bf00      	nop
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	080108a0 	.word	0x080108a0

0800423c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424a:	2b00      	cmp	r3, #0
 800424c:	da03      	bge.n	8004256 <HAL_NVIC_EnableIRQ+0x1a>
 800424e:	21d2      	movs	r1, #210	@ 0xd2
 8004250:	4805      	ldr	r0, [pc, #20]	@ (8004268 <HAL_NVIC_EnableIRQ+0x2c>)
 8004252:	f7fd f8e1 	bl	8001418 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff ff06 	bl	800406c <__NVIC_EnableIRQ>
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	080108a0 	.word	0x080108a0

0800426c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff ff75 	bl	8004164 <SysTick_Config>
 800427a:	4603      	mov	r3, r0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004298:	d01b      	beq.n	80042d2 <HAL_GPIO_Init+0x4e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a37      	ldr	r2, [pc, #220]	@ (800437c <HAL_GPIO_Init+0xf8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d017      	beq.n	80042d2 <HAL_GPIO_Init+0x4e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a36      	ldr	r2, [pc, #216]	@ (8004380 <HAL_GPIO_Init+0xfc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <HAL_GPIO_Init+0x4e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a35      	ldr	r2, [pc, #212]	@ (8004384 <HAL_GPIO_Init+0x100>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00f      	beq.n	80042d2 <HAL_GPIO_Init+0x4e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a34      	ldr	r2, [pc, #208]	@ (8004388 <HAL_GPIO_Init+0x104>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00b      	beq.n	80042d2 <HAL_GPIO_Init+0x4e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a33      	ldr	r2, [pc, #204]	@ (800438c <HAL_GPIO_Init+0x108>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <HAL_GPIO_Init+0x4e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a32      	ldr	r2, [pc, #200]	@ (8004390 <HAL_GPIO_Init+0x10c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d003      	beq.n	80042d2 <HAL_GPIO_Init+0x4e>
 80042ca:	21a9      	movs	r1, #169	@ 0xa9
 80042cc:	4831      	ldr	r0, [pc, #196]	@ (8004394 <HAL_GPIO_Init+0x110>)
 80042ce:	f7fd f8a3 	bl	8001418 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d004      	beq.n	80042e6 <HAL_GPIO_Init+0x62>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042e4:	d303      	bcc.n	80042ee <HAL_GPIO_Init+0x6a>
 80042e6:	21aa      	movs	r1, #170	@ 0xaa
 80042e8:	482a      	ldr	r0, [pc, #168]	@ (8004394 <HAL_GPIO_Init+0x110>)
 80042ea:	f7fd f895 	bl	8001418 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 8209 	beq.w	800470a <HAL_GPIO_Init+0x486>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	f000 8204 	beq.w	800470a <HAL_GPIO_Init+0x486>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b11      	cmp	r3, #17
 8004308:	f000 81ff 	beq.w	800470a <HAL_GPIO_Init+0x486>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b02      	cmp	r3, #2
 8004312:	f000 81fa 	beq.w	800470a <HAL_GPIO_Init+0x486>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b12      	cmp	r3, #18
 800431c:	f000 81f5 	beq.w	800470a <HAL_GPIO_Init+0x486>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8004328:	f000 81ef 	beq.w	800470a <HAL_GPIO_Init+0x486>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004334:	f000 81e9 	beq.w	800470a <HAL_GPIO_Init+0x486>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8004340:	f000 81e3 	beq.w	800470a <HAL_GPIO_Init+0x486>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 800434c:	f000 81dd 	beq.w	800470a <HAL_GPIO_Init+0x486>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8004358:	f000 81d7 	beq.w	800470a <HAL_GPIO_Init+0x486>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8004364:	f000 81d1 	beq.w	800470a <HAL_GPIO_Init+0x486>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b03      	cmp	r3, #3
 800436e:	f000 81cc 	beq.w	800470a <HAL_GPIO_Init+0x486>
 8004372:	21ab      	movs	r1, #171	@ 0xab
 8004374:	4807      	ldr	r0, [pc, #28]	@ (8004394 <HAL_GPIO_Init+0x110>)
 8004376:	f7fd f84f 	bl	8001418 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800437a:	e1c6      	b.n	800470a <HAL_GPIO_Init+0x486>
 800437c:	48000400 	.word	0x48000400
 8004380:	48000800 	.word	0x48000800
 8004384:	48000c00 	.word	0x48000c00
 8004388:	48001000 	.word	0x48001000
 800438c:	48001400 	.word	0x48001400
 8004390:	48001800 	.word	0x48001800
 8004394:	08010914 	.word	0x08010914
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	2101      	movs	r1, #1
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	fa01 f303 	lsl.w	r3, r1, r3
 80043a4:	4013      	ands	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 81aa 	beq.w	8004704 <HAL_GPIO_Init+0x480>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d005      	beq.n	80043c8 <HAL_GPIO_Init+0x144>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d144      	bne.n	8004452 <HAL_GPIO_Init+0x1ce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00f      	beq.n	80043f0 <HAL_GPIO_Init+0x16c>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d00b      	beq.n	80043f0 <HAL_GPIO_Init+0x16c>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d007      	beq.n	80043f0 <HAL_GPIO_Init+0x16c>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d003      	beq.n	80043f0 <HAL_GPIO_Init+0x16c>
 80043e8:	21bb      	movs	r1, #187	@ 0xbb
 80043ea:	488b      	ldr	r0, [pc, #556]	@ (8004618 <HAL_GPIO_Init+0x394>)
 80043ec:	f7fd f814 	bl	8001418 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	2203      	movs	r2, #3
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	43db      	mvns	r3, r3
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4013      	ands	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004426:	2201      	movs	r2, #1
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43db      	mvns	r3, r3
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4013      	ands	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 0201 	and.w	r2, r3, #1
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	2b03      	cmp	r3, #3
 800445c:	d027      	beq.n	80044ae <HAL_GPIO_Init+0x22a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00b      	beq.n	800447e <HAL_GPIO_Init+0x1fa>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d007      	beq.n	800447e <HAL_GPIO_Init+0x1fa>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d003      	beq.n	800447e <HAL_GPIO_Init+0x1fa>
 8004476:	21cc      	movs	r1, #204	@ 0xcc
 8004478:	4867      	ldr	r0, [pc, #412]	@ (8004618 <HAL_GPIO_Init+0x394>)
 800447a:	f7fc ffcd 	bl	8001418 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	2203      	movs	r2, #3
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43db      	mvns	r3, r3
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4013      	ands	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d14b      	bne.n	8004552 <HAL_GPIO_Init+0x2ce>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044c0:	d01b      	beq.n	80044fa <HAL_GPIO_Init+0x276>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a55      	ldr	r2, [pc, #340]	@ (800461c <HAL_GPIO_Init+0x398>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d017      	beq.n	80044fa <HAL_GPIO_Init+0x276>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a54      	ldr	r2, [pc, #336]	@ (8004620 <HAL_GPIO_Init+0x39c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d013      	beq.n	80044fa <HAL_GPIO_Init+0x276>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a53      	ldr	r2, [pc, #332]	@ (8004624 <HAL_GPIO_Init+0x3a0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00f      	beq.n	80044fa <HAL_GPIO_Init+0x276>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a52      	ldr	r2, [pc, #328]	@ (8004628 <HAL_GPIO_Init+0x3a4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00b      	beq.n	80044fa <HAL_GPIO_Init+0x276>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a51      	ldr	r2, [pc, #324]	@ (800462c <HAL_GPIO_Init+0x3a8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d007      	beq.n	80044fa <HAL_GPIO_Init+0x276>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a50      	ldr	r2, [pc, #320]	@ (8004630 <HAL_GPIO_Init+0x3ac>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_Init+0x276>
 80044f2:	21d9      	movs	r1, #217	@ 0xd9
 80044f4:	4848      	ldr	r0, [pc, #288]	@ (8004618 <HAL_GPIO_Init+0x394>)
 80044f6:	f7fc ff8f 	bl	8001418 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b0f      	cmp	r3, #15
 8004500:	d903      	bls.n	800450a <HAL_GPIO_Init+0x286>
 8004502:	21da      	movs	r1, #218	@ 0xda
 8004504:	4844      	ldr	r0, [pc, #272]	@ (8004618 <HAL_GPIO_Init+0x394>)
 8004506:	f7fc ff87 	bl	8001418 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	08da      	lsrs	r2, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3208      	adds	r2, #8
 8004512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004516:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	220f      	movs	r2, #15
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4013      	ands	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	08da      	lsrs	r2, r3, #3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3208      	adds	r2, #8
 800454c:	6939      	ldr	r1, [r7, #16]
 800454e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	2203      	movs	r2, #3
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	43db      	mvns	r3, r3
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4013      	ands	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 0203 	and.w	r2, r3, #3
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80b8 	beq.w	8004704 <HAL_GPIO_Init+0x480>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004594:	4b27      	ldr	r3, [pc, #156]	@ (8004634 <HAL_GPIO_Init+0x3b0>)
 8004596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004598:	4a26      	ldr	r2, [pc, #152]	@ (8004634 <HAL_GPIO_Init+0x3b0>)
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	6613      	str	r3, [r2, #96]	@ 0x60
 80045a0:	4b24      	ldr	r3, [pc, #144]	@ (8004634 <HAL_GPIO_Init+0x3b0>)
 80045a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045ac:	4a22      	ldr	r2, [pc, #136]	@ (8004638 <HAL_GPIO_Init+0x3b4>)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	089b      	lsrs	r3, r3, #2
 80045b2:	3302      	adds	r3, #2
 80045b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	220f      	movs	r2, #15
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4013      	ands	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80045d6:	d031      	beq.n	800463c <HAL_GPIO_Init+0x3b8>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a10      	ldr	r2, [pc, #64]	@ (800461c <HAL_GPIO_Init+0x398>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d019      	beq.n	8004614 <HAL_GPIO_Init+0x390>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a0f      	ldr	r2, [pc, #60]	@ (8004620 <HAL_GPIO_Init+0x39c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d013      	beq.n	8004610 <HAL_GPIO_Init+0x38c>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004624 <HAL_GPIO_Init+0x3a0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00d      	beq.n	800460c <HAL_GPIO_Init+0x388>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a0d      	ldr	r2, [pc, #52]	@ (8004628 <HAL_GPIO_Init+0x3a4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d007      	beq.n	8004608 <HAL_GPIO_Init+0x384>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a0c      	ldr	r2, [pc, #48]	@ (800462c <HAL_GPIO_Init+0x3a8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d101      	bne.n	8004604 <HAL_GPIO_Init+0x380>
 8004600:	2305      	movs	r3, #5
 8004602:	e01c      	b.n	800463e <HAL_GPIO_Init+0x3ba>
 8004604:	2306      	movs	r3, #6
 8004606:	e01a      	b.n	800463e <HAL_GPIO_Init+0x3ba>
 8004608:	2304      	movs	r3, #4
 800460a:	e018      	b.n	800463e <HAL_GPIO_Init+0x3ba>
 800460c:	2303      	movs	r3, #3
 800460e:	e016      	b.n	800463e <HAL_GPIO_Init+0x3ba>
 8004610:	2302      	movs	r3, #2
 8004612:	e014      	b.n	800463e <HAL_GPIO_Init+0x3ba>
 8004614:	2301      	movs	r3, #1
 8004616:	e012      	b.n	800463e <HAL_GPIO_Init+0x3ba>
 8004618:	08010914 	.word	0x08010914
 800461c:	48000400 	.word	0x48000400
 8004620:	48000800 	.word	0x48000800
 8004624:	48000c00 	.word	0x48000c00
 8004628:	48001000 	.word	0x48001000
 800462c:	48001400 	.word	0x48001400
 8004630:	48001800 	.word	0x48001800
 8004634:	40021000 	.word	0x40021000
 8004638:	40010000 	.word	0x40010000
 800463c:	2300      	movs	r3, #0
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	f002 0203 	and.w	r2, r2, #3
 8004644:	0092      	lsls	r2, r2, #2
 8004646:	4093      	lsls	r3, r2
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800464e:	4935      	ldr	r1, [pc, #212]	@ (8004724 <HAL_GPIO_Init+0x4a0>)
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	089b      	lsrs	r3, r3, #2
 8004654:	3302      	adds	r3, #2
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800465c:	4b32      	ldr	r3, [pc, #200]	@ (8004728 <HAL_GPIO_Init+0x4a4>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	43db      	mvns	r3, r3
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4013      	ands	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_GPIO_Init+0x3fc>
        {
          temp |= iocurrent;
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004680:	4a29      	ldr	r2, [pc, #164]	@ (8004728 <HAL_GPIO_Init+0x4a4>)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004686:	4b28      	ldr	r3, [pc, #160]	@ (8004728 <HAL_GPIO_Init+0x4a4>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	43db      	mvns	r3, r3
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4013      	ands	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_GPIO_Init+0x426>
        {
          temp |= iocurrent;
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004728 <HAL_GPIO_Init+0x4a4>)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80046b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004728 <HAL_GPIO_Init+0x4a4>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	43db      	mvns	r3, r3
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4013      	ands	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <HAL_GPIO_Init+0x450>
        {
          temp |= iocurrent;
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046d4:	4a14      	ldr	r2, [pc, #80]	@ (8004728 <HAL_GPIO_Init+0x4a4>)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046da:	4b13      	ldr	r3, [pc, #76]	@ (8004728 <HAL_GPIO_Init+0x4a4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	43db      	mvns	r3, r3
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4013      	ands	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_GPIO_Init+0x47a>
        {
          temp |= iocurrent;
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004728 <HAL_GPIO_Init+0x4a4>)
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	3301      	adds	r3, #1
 8004708:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	fa22 f303 	lsr.w	r3, r2, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	f47f ae3f 	bne.w	8004398 <HAL_GPIO_Init+0x114>
  }
}
 800471a:	bf00      	nop
 800471c:	bf00      	nop
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40010000 	.word	0x40010000
 8004728:	40010400 	.word	0x40010400

0800472c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	807b      	strh	r3, [r7, #2]
 8004738:	4613      	mov	r3, r2
 800473a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800473c:	887b      	ldrh	r3, [r7, #2]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d104      	bne.n	800474c <HAL_GPIO_WritePin+0x20>
 8004742:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 8004746:	480e      	ldr	r0, [pc, #56]	@ (8004780 <HAL_GPIO_WritePin+0x54>)
 8004748:	f7fc fe66 	bl	8001418 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800474c:	787b      	ldrb	r3, [r7, #1]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <HAL_GPIO_WritePin+0x36>
 8004752:	787b      	ldrb	r3, [r7, #1]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d004      	beq.n	8004762 <HAL_GPIO_WritePin+0x36>
 8004758:	f240 119b 	movw	r1, #411	@ 0x19b
 800475c:	4808      	ldr	r0, [pc, #32]	@ (8004780 <HAL_GPIO_WritePin+0x54>)
 800475e:	f7fc fe5b 	bl	8001418 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8004762:	787b      	ldrb	r3, [r7, #1]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004768:	887a      	ldrh	r2, [r7, #2]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800476e:	e002      	b.n	8004776 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004770:	887a      	ldrh	r2, [r7, #2]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	08010914 	.word	0x08010914

08004784 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004790:	887b      	ldrh	r3, [r7, #2]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <HAL_GPIO_TogglePin+0x1c>
 8004796:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800479a:	480a      	ldr	r0, [pc, #40]	@ (80047c4 <HAL_GPIO_TogglePin+0x40>)
 800479c:	f7fc fe3c 	bl	8001418 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047a6:	887a      	ldrh	r2, [r7, #2]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4013      	ands	r3, r2
 80047ac:	041a      	lsls	r2, r3, #16
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	43d9      	mvns	r1, r3
 80047b2:	887b      	ldrh	r3, [r7, #2]
 80047b4:	400b      	ands	r3, r1
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	619a      	str	r2, [r3, #24]
}
 80047bc:	bf00      	nop
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	08010914 	.word	0x08010914

080047c8 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e113      	b.n	8004a02 <HAL_HRTIM_Init+0x23a>
  }

  /* Check the parameters */
  assert_param(IS_HRTIM_ALL_INSTANCE(hhrtim->Instance));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a8b      	ldr	r2, [pc, #556]	@ (8004a0c <HAL_HRTIM_Init+0x244>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_HRTIM_Init+0x26>
 80047e4:	f44f 710d 	mov.w	r1, #564	@ 0x234
 80047e8:	4889      	ldr	r0, [pc, #548]	@ (8004a10 <HAL_HRTIM_Init+0x248>)
 80047ea:	f7fc fe15 	bl	8001418 <assert_failed>
  assert_param(IS_HRTIM_IT(hhrtim->Init.HRTIMInterruptResquests));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80047f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d004      	beq.n	8004808 <HAL_HRTIM_Init+0x40>
 80047fe:	f240 2135 	movw	r1, #565	@ 0x235
 8004802:	4883      	ldr	r0, [pc, #524]	@ (8004a10 <HAL_HRTIM_Init+0x248>)
 8004804:	f7fc fe08 	bl	8001418 <assert_failed>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d059      	beq.n	8004908 <HAL_HRTIM_Init+0x140>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCOUTPUTSOURCE(hhrtim->Init.SyncOutputSource));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d013      	beq.n	8004884 <HAL_HRTIM_Init+0xbc>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004864:	d00e      	beq.n	8004884 <HAL_HRTIM_Init+0xbc>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800486e:	d009      	beq.n	8004884 <HAL_HRTIM_Init+0xbc>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004878:	d004      	beq.n	8004884 <HAL_HRTIM_Init+0xbc>
 800487a:	f240 216d 	movw	r1, #621	@ 0x26d
 800487e:	4864      	ldr	r0, [pc, #400]	@ (8004a10 <HAL_HRTIM_Init+0x248>)
 8004880:	f7fc fdca 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00e      	beq.n	80048aa <HAL_HRTIM_Init+0xe2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004894:	d009      	beq.n	80048aa <HAL_HRTIM_Init+0xe2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800489e:	d004      	beq.n	80048aa <HAL_HRTIM_Init+0xe2>
 80048a0:	f240 216e 	movw	r1, #622	@ 0x26e
 80048a4:	485a      	ldr	r0, [pc, #360]	@ (8004a10 <HAL_HRTIM_Init+0x248>)
 80048a6:	f7fc fdb7 	bl	8001418 <assert_failed>

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a57      	ldr	r2, [pc, #348]	@ (8004a0c <HAL_HRTIM_Init+0x244>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d10b      	bne.n	80048cc <HAL_HRTIM_Init+0x104>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80048b4:	4b57      	ldr	r3, [pc, #348]	@ (8004a14 <HAL_HRTIM_Init+0x24c>)
 80048b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048b8:	4a56      	ldr	r2, [pc, #344]	@ (8004a14 <HAL_HRTIM_Init+0x24c>)
 80048ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048be:	6613      	str	r3, [r2, #96]	@ 0x60
 80048c0:	4b54      	ldr	r3, [pc, #336]	@ (8004a14 <HAL_HRTIM_Init+0x24c>)
 80048c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80048da:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80048f0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7fc fbf1 	bl	80010f0 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d025      	beq.n	8004966 <HAL_HRTIM_Init+0x19e>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00e      	beq.n	8004940 <HAL_HRTIM_Init+0x178>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800492a:	d009      	beq.n	8004940 <HAL_HRTIM_Init+0x178>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004934:	d004      	beq.n	8004940 <HAL_HRTIM_Init+0x178>
 8004936:	f240 2192 	movw	r1, #658	@ 0x292
 800493a:	4835      	ldr	r0, [pc, #212]	@ (8004a10 <HAL_HRTIM_Init+0x248>)
 800493c:	f7fc fd6c 	bl	8001418 <assert_failed>

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800494e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004976:	2300      	movs	r3, #0
 8004978:	75fb      	strb	r3, [r7, #23]
 800497a:	e03e      	b.n	80049fa <HAL_HRTIM_Init+0x232>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800497c:	7dfa      	ldrb	r2, [r7, #23]
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	4613      	mov	r3, r2
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	1a9b      	subs	r3, r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	3318      	adds	r3, #24
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004990:	7dfa      	ldrb	r2, [r7, #23]
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	331c      	adds	r3, #28
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80049a4:	7dfa      	ldrb	r2, [r7, #23]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	3320      	adds	r3, #32
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80049b8:	7dfa      	ldrb	r2, [r7, #23]
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	3324      	adds	r3, #36	@ 0x24
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80049cc:	7dfa      	ldrb	r2, [r7, #23]
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	1a9b      	subs	r3, r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	3328      	adds	r3, #40	@ 0x28
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80049e0:	7dfa      	ldrb	r2, [r7, #23]
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	1a9b      	subs	r3, r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	3330      	adds	r3, #48	@ 0x30
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80049f4:	7dfb      	ldrb	r3, [r7, #23]
 80049f6:	3301      	adds	r3, #1
 80049f8:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80049fa:	7dfb      	ldrb	r3, [r7, #23]
 80049fc:	2b06      	cmp	r3, #6
 80049fe:	d9bd      	bls.n	800497c <HAL_HRTIM_Init+0x1b4>
  }

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40016800 	.word	0x40016800
 8004a10:	08010988 	.word	0x08010988
 8004a14:	40021000 	.word	0x40021000

08004a18 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d010      	beq.n	8004a4c <HAL_HRTIM_DLLCalibrationStart+0x34>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00d      	beq.n	8004a4c <HAL_HRTIM_DLLCalibrationStart+0x34>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d00a      	beq.n	8004a4c <HAL_HRTIM_DLLCalibrationStart+0x34>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d007      	beq.n	8004a4c <HAL_HRTIM_DLLCalibrationStart+0x34>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d004      	beq.n	8004a4c <HAL_HRTIM_DLLCalibrationStart+0x34>
 8004a42:	f240 3109 	movw	r1, #777	@ 0x309
 8004a46:	482a      	ldr	r0, [pc, #168]	@ (8004af0 <HAL_HRTIM_DLLCalibrationStart+0xd8>)
 8004a48:	f7fc fce6 	bl	8001418 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_HRTIM_DLLCalibrationStart+0x42>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e045      	b.n	8004ae6 <HAL_HRTIM_DLLCalibrationStart+0xce>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a70:	d114      	bne.n	8004a9c <HAL_HRTIM_DLLCalibrationStart+0x84>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0202 	bic.w	r2, r2, #2
 8004a82:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8004a9a:	e01f      	b.n	8004adc <HAL_HRTIM_DLLCalibrationStart+0xc4>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f042 0202 	orr.w	r2, r2, #2
 8004aac:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8004ab8:	f023 010c 	bic.w	r1, r3, #12
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0201 	orr.w	r2, r2, #1
 8004ad8:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	08010988 	.word	0x08010988

08004af4 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8004afe:	f7fc fef9 	bl	80018f4 <HAL_GetTick>
 8004b02:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8004b04:	e014      	b.n	8004b30 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d010      	beq.n	8004b30 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8004b0e:	f7fc fef1 	bl	80018f4 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d302      	bcc.n	8004b24 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d105      	bne.n	8004b30 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2207      	movs	r2, #7
 8004b28:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e011      	b.n	8004b54 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8004b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b40:	d1e1      	bne.n	8004b06 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b06      	cmp	r3, #6
 8004b6c:	d016      	beq.n	8004b9c <HAL_HRTIM_TimeBaseConfig+0x40>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d013      	beq.n	8004b9c <HAL_HRTIM_TimeBaseConfig+0x40>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d010      	beq.n	8004b9c <HAL_HRTIM_TimeBaseConfig+0x40>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d00d      	beq.n	8004b9c <HAL_HRTIM_TimeBaseConfig+0x40>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d00a      	beq.n	8004b9c <HAL_HRTIM_TimeBaseConfig+0x40>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d007      	beq.n	8004b9c <HAL_HRTIM_TimeBaseConfig+0x40>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b05      	cmp	r3, #5
 8004b90:	d004      	beq.n	8004b9c <HAL_HRTIM_TimeBaseConfig+0x40>
 8004b92:	f240 3197 	movw	r1, #919	@ 0x397
 8004b96:	482d      	ldr	r0, [pc, #180]	@ (8004c4c <HAL_HRTIM_TimeBaseConfig+0xf0>)
 8004b98:	f7fc fc3e 	bl	8001418 <assert_failed>
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d020      	beq.n	8004be6 <HAL_HRTIM_TimeBaseConfig+0x8a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d01c      	beq.n	8004be6 <HAL_HRTIM_TimeBaseConfig+0x8a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d018      	beq.n	8004be6 <HAL_HRTIM_TimeBaseConfig+0x8a>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d014      	beq.n	8004be6 <HAL_HRTIM_TimeBaseConfig+0x8a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d010      	beq.n	8004be6 <HAL_HRTIM_TimeBaseConfig+0x8a>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2b05      	cmp	r3, #5
 8004bca:	d00c      	beq.n	8004be6 <HAL_HRTIM_TimeBaseConfig+0x8a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b06      	cmp	r3, #6
 8004bd2:	d008      	beq.n	8004be6 <HAL_HRTIM_TimeBaseConfig+0x8a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b07      	cmp	r3, #7
 8004bda:	d004      	beq.n	8004be6 <HAL_HRTIM_TimeBaseConfig+0x8a>
 8004bdc:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8004be0:	481a      	ldr	r0, [pc, #104]	@ (8004c4c <HAL_HRTIM_TimeBaseConfig+0xf0>)
 8004be2:	f7fc fc19 	bl	8001418 <assert_failed>
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d00c      	beq.n	8004c08 <HAL_HRTIM_TimeBaseConfig+0xac>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d008      	beq.n	8004c08 <HAL_HRTIM_TimeBaseConfig+0xac>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b10      	cmp	r3, #16
 8004bfc:	d004      	beq.n	8004c08 <HAL_HRTIM_TimeBaseConfig+0xac>
 8004bfe:	f240 3199 	movw	r1, #921	@ 0x399
 8004c02:	4812      	ldr	r0, [pc, #72]	@ (8004c4c <HAL_HRTIM_TimeBaseConfig+0xf0>)
 8004c04:	f7fc fc08 	bl	8001418 <assert_failed>

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d101      	bne.n	8004c18 <HAL_HRTIM_TimeBaseConfig+0xbc>
  {
     return HAL_BUSY;
 8004c14:	2302      	movs	r3, #2
 8004c16:	e015      	b.n	8004c44 <HAL_HRTIM_TimeBaseConfig+0xe8>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b06      	cmp	r3, #6
 8004c24:	d104      	bne.n	8004c30 <HAL_HRTIM_TimeBaseConfig+0xd4>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fc0f 	bl	800544c <HRTIM_MasterBase_Config>
 8004c2e:	e004      	b.n	8004c3a <HAL_HRTIM_TimeBaseConfig+0xde>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fc38 	bl	80054aa <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	08010988 	.word	0x08010988

08004c50 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b06      	cmp	r3, #6
 8004c60:	d016      	beq.n	8004c90 <HAL_HRTIM_WaveformTimerConfig+0x40>
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d013      	beq.n	8004c90 <HAL_HRTIM_WaveformTimerConfig+0x40>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d010      	beq.n	8004c90 <HAL_HRTIM_WaveformTimerConfig+0x40>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d00d      	beq.n	8004c90 <HAL_HRTIM_WaveformTimerConfig+0x40>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d00a      	beq.n	8004c90 <HAL_HRTIM_WaveformTimerConfig+0x40>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d007      	beq.n	8004c90 <HAL_HRTIM_WaveformTimerConfig+0x40>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b05      	cmp	r3, #5
 8004c84:	d004      	beq.n	8004c90 <HAL_HRTIM_WaveformTimerConfig+0x40>
 8004c86:	f241 3164 	movw	r1, #4964	@ 0x1364
 8004c8a:	4868      	ldr	r0, [pc, #416]	@ (8004e2c <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8004c8c:	f7fc fbc4 	bl	8001418 <assert_failed>

  /* Relevant for all HRTIM timers, including the master */
  assert_param(IS_HRTIM_HALFMODE(pTimerCfg->HalfModeEnable));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d008      	beq.n	8004caa <HAL_HRTIM_WaveformTimerConfig+0x5a>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d004      	beq.n	8004caa <HAL_HRTIM_WaveformTimerConfig+0x5a>
 8004ca0:	f241 3167 	movw	r1, #4967	@ 0x1367
 8004ca4:	4861      	ldr	r0, [pc, #388]	@ (8004e2c <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8004ca6:	f7fc fbb7 	bl	8001418 <assert_failed>
  assert_param(IS_HRTIM_INTERLEAVEDMODE(pTimerCfg->InterleavedMode));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d018      	beq.n	8004ce4 <HAL_HRTIM_WaveformTimerConfig+0x94>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d014      	beq.n	8004ce4 <HAL_HRTIM_WaveformTimerConfig+0x94>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d010      	beq.n	8004ce4 <HAL_HRTIM_WaveformTimerConfig+0x94>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d00c      	beq.n	8004ce4 <HAL_HRTIM_WaveformTimerConfig+0x94>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <HAL_HRTIM_WaveformTimerConfig+0x94>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d004      	beq.n	8004ce4 <HAL_HRTIM_WaveformTimerConfig+0x94>
 8004cda:	f241 3168 	movw	r1, #4968	@ 0x1368
 8004cde:	4853      	ldr	r0, [pc, #332]	@ (8004e2c <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8004ce0:	f7fc fb9a 	bl	8001418 <assert_failed>
  assert_param(IS_HRTIM_SYNCSTART(pTimerCfg->StartOnSync));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d009      	beq.n	8004d00 <HAL_HRTIM_WaveformTimerConfig+0xb0>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cf4:	d004      	beq.n	8004d00 <HAL_HRTIM_WaveformTimerConfig+0xb0>
 8004cf6:	f241 3169 	movw	r1, #4969	@ 0x1369
 8004cfa:	484c      	ldr	r0, [pc, #304]	@ (8004e2c <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8004cfc:	f7fc fb8c 	bl	8001418 <assert_failed>
  assert_param(IS_HRTIM_SYNCRESET(pTimerCfg->ResetOnSync));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d009      	beq.n	8004d1c <HAL_HRTIM_WaveformTimerConfig+0xcc>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d10:	d004      	beq.n	8004d1c <HAL_HRTIM_WaveformTimerConfig+0xcc>
 8004d12:	f241 316a 	movw	r1, #4970	@ 0x136a
 8004d16:	4845      	ldr	r0, [pc, #276]	@ (8004e2c <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8004d18:	f7fc fb7e 	bl	8001418 <assert_failed>
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d013      	beq.n	8004d4c <HAL_HRTIM_WaveformTimerConfig+0xfc>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d2c:	d00e      	beq.n	8004d4c <HAL_HRTIM_WaveformTimerConfig+0xfc>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d36:	d009      	beq.n	8004d4c <HAL_HRTIM_WaveformTimerConfig+0xfc>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8004d40:	d004      	beq.n	8004d4c <HAL_HRTIM_WaveformTimerConfig+0xfc>
 8004d42:	f241 316b 	movw	r1, #4971	@ 0x136b
 8004d46:	4839      	ldr	r0, [pc, #228]	@ (8004e2c <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8004d48:	f7fc fb66 	bl	8001418 <assert_failed>
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d009      	beq.n	8004d68 <HAL_HRTIM_WaveformTimerConfig+0x118>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d5c:	d004      	beq.n	8004d68 <HAL_HRTIM_WaveformTimerConfig+0x118>
 8004d5e:	f241 316c 	movw	r1, #4972	@ 0x136c
 8004d62:	4832      	ldr	r0, [pc, #200]	@ (8004e2c <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8004d64:	f7fc fb58 	bl	8001418 <assert_failed>
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d009      	beq.n	8004d84 <HAL_HRTIM_WaveformTimerConfig+0x134>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d78:	d004      	beq.n	8004d84 <HAL_HRTIM_WaveformTimerConfig+0x134>
 8004d7a:	f241 316d 	movw	r1, #4973	@ 0x136d
 8004d7e:	482b      	ldr	r0, [pc, #172]	@ (8004e2c <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8004d80:	f7fc fb4a 	bl	8001418 <assert_failed>
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d009      	beq.n	8004da0 <HAL_HRTIM_WaveformTimerConfig+0x150>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d94:	d004      	beq.n	8004da0 <HAL_HRTIM_WaveformTimerConfig+0x150>
 8004d96:	f241 316e 	movw	r1, #4974	@ 0x136e
 8004d9a:	4824      	ldr	r0, [pc, #144]	@ (8004e2c <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8004d9c:	f7fc fb3c 	bl	8001418 <assert_failed>

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d101      	bne.n	8004db0 <HAL_HRTIM_WaveformTimerConfig+0x160>
  {
     return HAL_BUSY;
 8004dac:	2302      	movs	r3, #2
 8004dae:	e18b      	b.n	80050c8 <HAL_HRTIM_WaveformTimerConfig+0x478>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_HRTIM_WaveformTimerConfig+0x16e>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e184      	b.n	80050c8 <HAL_HRTIM_WaveformTimerConfig+0x478>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b06      	cmp	r3, #6
 8004dd2:	d12d      	bne.n	8004e30 <HAL_HRTIM_WaveformTimerConfig+0x1e0>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00e      	beq.n	8004dfa <HAL_HRTIM_WaveformTimerConfig+0x1aa>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004de4:	d009      	beq.n	8004dfa <HAL_HRTIM_WaveformTimerConfig+0x1aa>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dee:	d004      	beq.n	8004dfa <HAL_HRTIM_WaveformTimerConfig+0x1aa>
 8004df0:	f241 317d 	movw	r1, #4989	@ 0x137d
 8004df4:	480d      	ldr	r0, [pc, #52]	@ (8004e2c <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8004df6:	f7fc fb0f 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e00:	d904      	bls.n	8004e0c <HAL_HRTIM_WaveformTimerConfig+0x1bc>
 8004e02:	f241 317e 	movw	r1, #4990	@ 0x137e
 8004e06:	4809      	ldr	r0, [pc, #36]	@ (8004e2c <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8004e08:	f7fc fb06 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <HAL_HRTIM_WaveformTimerConfig+0x1d2>
 8004e18:	f241 317f 	movw	r1, #4991	@ 0x137f
 8004e1c:	4803      	ldr	r0, [pc, #12]	@ (8004e2c <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8004e1e:	f7fc fafb 	bl	8001418 <assert_failed>

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 fb80 	bl	800552a <HRTIM_MasterWaveform_Config>
 8004e2a:	e0ee      	b.n	800500a <HAL_HRTIM_WaveformTimerConfig+0x3ba>
 8004e2c:	08010988 	.word	0x08010988
  }
  else
  {
    /* Check parameters */
    assert_param(IS_HRTIM_UPDATEGATING_TIM(pTimerCfg->UpdateGating));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d02c      	beq.n	8004e92 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e40:	d027      	beq.n	8004e92 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e4a:	d022      	beq.n	8004e92 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e54:	d01d      	beq.n	8004e92 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e5e:	d018      	beq.n	8004e92 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e68:	d013      	beq.n	8004e92 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004e72:	d00e      	beq.n	8004e92 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e78:	f1b3 4fe0 	cmp.w	r3, #1879048192	@ 0x70000000
 8004e7c:	d009      	beq.n	8004e92 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e86:	d004      	beq.n	8004e92 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8004e88:	f241 3187 	movw	r1, #4999	@ 0x1387
 8004e8c:	4890      	ldr	r0, [pc, #576]	@ (80050d0 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8004e8e:	f7fc fac3 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_TIM_IT(pTimerCfg->InterruptRequests));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004e9a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d004      	beq.n	8004eac <HAL_HRTIM_WaveformTimerConfig+0x25c>
 8004ea2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004ea6:	488a      	ldr	r0, [pc, #552]	@ (80050d0 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8004ea8:	f7fc fab6 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_TIM_DMA(pTimerCfg->DMARequests));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004eb4:	f423 03be 	bic.w	r3, r3, #6225920	@ 0x5f0000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d004      	beq.n	8004ec6 <HAL_HRTIM_WaveformTimerConfig+0x276>
 8004ebc:	f241 3189 	movw	r1, #5001	@ 0x1389
 8004ec0:	4883      	ldr	r0, [pc, #524]	@ (80050d0 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8004ec2:	f7fc faa9 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_TIMPUSHPULLMODE(pTimerCfg->PushPull));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d008      	beq.n	8004ee0 <HAL_HRTIM_WaveformTimerConfig+0x290>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed2:	2b40      	cmp	r3, #64	@ 0x40
 8004ed4:	d004      	beq.n	8004ee0 <HAL_HRTIM_WaveformTimerConfig+0x290>
 8004ed6:	f241 318a 	movw	r1, #5002	@ 0x138a
 8004eda:	487d      	ldr	r0, [pc, #500]	@ (80050d0 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8004edc:	f7fc fa9c 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_TIMFAULTENABLE(pTimerCfg->FaultEnable));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee4:	2b3f      	cmp	r3, #63	@ 0x3f
 8004ee6:	d904      	bls.n	8004ef2 <HAL_HRTIM_WaveformTimerConfig+0x2a2>
 8004ee8:	f241 318b 	movw	r1, #5003	@ 0x138b
 8004eec:	4878      	ldr	r0, [pc, #480]	@ (80050d0 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8004eee:	f7fc fa93 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_TIMFAULTLOCK(pTimerCfg->FaultLock));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <HAL_HRTIM_WaveformTimerConfig+0x2be>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f02:	d004      	beq.n	8004f0e <HAL_HRTIM_WaveformTimerConfig+0x2be>
 8004f04:	f241 318c 	movw	r1, #5004	@ 0x138c
 8004f08:	4871      	ldr	r0, [pc, #452]	@ (80050d0 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8004f0a:	f7fc fa85 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_TIMDEADTIMEINSERTION(pTimerCfg->PushPull,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <HAL_HRTIM_WaveformTimerConfig+0x2da>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f1e:	d004      	beq.n	8004f2a <HAL_HRTIM_WaveformTimerConfig+0x2da>
 8004f20:	f241 318d 	movw	r1, #5005	@ 0x138d
 8004f24:	486a      	ldr	r0, [pc, #424]	@ (80050d0 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8004f26:	f7fc fa77 	bl	8001418 <assert_failed>
                                               pTimerCfg->DeadTimeInsertion));
    assert_param(IS_HRTIM_TIMDELAYEDPROTECTION(pTimerCfg->PushPull,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d030      	beq.n	8004f94 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f3a:	d02b      	beq.n	8004f94 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f40:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f44:	d026      	beq.n	8004f94 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f4a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004f4e:	d021      	beq.n	8004f94 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f54:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8004f58:	d01c      	beq.n	8004f94 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f5e:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
 8004f62:	d017      	beq.n	8004f94 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f68:	f5b3 5fd0 	cmp.w	r3, #6656	@ 0x1a00
 8004f6c:	d012      	beq.n	8004f94 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f72:	2b40      	cmp	r3, #64	@ 0x40
 8004f74:	d109      	bne.n	8004f8a <HAL_HRTIM_WaveformTimerConfig+0x33a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f7a:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004f7e:	d009      	beq.n	8004f94 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f84:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8004f88:	d004      	beq.n	8004f94 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8004f8a:	f241 318f 	movw	r1, #5007	@ 0x138f
 8004f8e:	4850      	ldr	r0, [pc, #320]	@ (80050d0 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8004f90:	f7fc fa42 	bl	8001418 <assert_failed>
                                               pTimerCfg->DelayedProtectionMode));
    assert_param(IS_HRTIM_OUTPUTBALANCEDIDLE(pTimerCfg->BalancedIdleAutomaticResume));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d009      	beq.n	8004fb0 <HAL_HRTIM_WaveformTimerConfig+0x360>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fa4:	d004      	beq.n	8004fb0 <HAL_HRTIM_WaveformTimerConfig+0x360>
 8004fa6:	f241 3191 	movw	r1, #5009	@ 0x1391
 8004faa:	4849      	ldr	r0, [pc, #292]	@ (80050d0 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8004fac:	f7fc fa34 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fb4:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8004fb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d004      	beq.n	8004fca <HAL_HRTIM_WaveformTimerConfig+0x37a>
 8004fc0:	f241 3192 	movw	r1, #5010	@ 0x1392
 8004fc4:	4842      	ldr	r0, [pc, #264]	@ (80050d0 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8004fc6:	f7fc fa27 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d009      	beq.n	8004fe6 <HAL_HRTIM_WaveformTimerConfig+0x396>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fda:	d004      	beq.n	8004fe6 <HAL_HRTIM_WaveformTimerConfig+0x396>
 8004fdc:	f241 3194 	movw	r1, #5012	@ 0x1394
 8004fe0:	483b      	ldr	r0, [pc, #236]	@ (80050d0 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8004fe2:	f7fc fa19 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d008      	beq.n	8005000 <HAL_HRTIM_WaveformTimerConfig+0x3b0>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d004      	beq.n	8005000 <HAL_HRTIM_WaveformTimerConfig+0x3b0>
 8004ff6:	f241 3195 	movw	r1, #5013	@ 0x1395
 8004ffa:	4835      	ldr	r0, [pc, #212]	@ (80050d0 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8004ffc:	f7fc fa0c 	bl	8001418 <assert_failed>

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 fb2d 	bl	8005664 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6819      	ldr	r1, [r3, #0]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	4613      	mov	r3, r2
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4403      	add	r3, r0
 800501c:	3320      	adds	r3, #32
 800501e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6859      	ldr	r1, [r3, #4]
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	4613      	mov	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	1a9b      	subs	r3, r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4403      	add	r3, r0
 8005032:	3324      	adds	r3, #36	@ 0x24
 8005034:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6899      	ldr	r1, [r3, #8]
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	4613      	mov	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4403      	add	r3, r0
 8005048:	3328      	adds	r3, #40	@ 0x28
 800504a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68d9      	ldr	r1, [r3, #12]
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	4613      	mov	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4403      	add	r3, r0
 800505e:	332c      	adds	r3, #44	@ 0x2c
 8005060:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6919      	ldr	r1, [r3, #16]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	4613      	mov	r3, r2
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4403      	add	r3, r0
 8005074:	3330      	adds	r3, #48	@ 0x30
 8005076:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 fcd8 	bl	8005a30 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b06      	cmp	r3, #6
 8005084:	d017      	beq.n	80050b6 <HAL_HRTIM_WaveformTimerConfig+0x466>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d113      	bne.n	80050b6 <HAL_HRTIM_WaveformTimerConfig+0x466>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	3301      	adds	r3, #1
 8005096:	01db      	lsls	r3, r3, #7
 8005098:	4413      	add	r3, r2
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a4:	025b      	lsls	r3, r3, #9
 80050a6:	68f9      	ldr	r1, [r7, #12]
 80050a8:	6809      	ldr	r1, [r1, #0]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	3301      	adds	r3, #1
 80050b0:	01db      	lsls	r3, r3, #7
 80050b2:	440b      	add	r3, r1
 80050b4:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	08010988 	.word	0x08010988

080050d4 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
    /* Check parameters */
    assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b06      	cmp	r3, #6
 80050e4:	d016      	beq.n	8005114 <HAL_HRTIM_WaveformTimerControl+0x40>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d013      	beq.n	8005114 <HAL_HRTIM_WaveformTimerControl+0x40>
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d010      	beq.n	8005114 <HAL_HRTIM_WaveformTimerControl+0x40>
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d00d      	beq.n	8005114 <HAL_HRTIM_WaveformTimerControl+0x40>
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d00a      	beq.n	8005114 <HAL_HRTIM_WaveformTimerControl+0x40>
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b04      	cmp	r3, #4
 8005102:	d007      	beq.n	8005114 <HAL_HRTIM_WaveformTimerControl+0x40>
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b05      	cmp	r3, #5
 8005108:	d004      	beq.n	8005114 <HAL_HRTIM_WaveformTimerControl+0x40>
 800510a:	f241 31cc 	movw	r1, #5068	@ 0x13cc
 800510e:	4847      	ldr	r0, [pc, #284]	@ (800522c <HAL_HRTIM_WaveformTimerControl+0x158>)
 8005110:	f7fc f982 	bl	8001418 <assert_failed>
    /* Relevant for all A..F HRTIM timers */
    assert_param(IS_HRTIM_TIMERUPDOWNMODE(pTimerCtl->UpDownMode));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d008      	beq.n	800512e <HAL_HRTIM_WaveformTimerControl+0x5a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d004      	beq.n	800512e <HAL_HRTIM_WaveformTimerControl+0x5a>
 8005124:	f241 31ce 	movw	r1, #5070	@ 0x13ce
 8005128:	4840      	ldr	r0, [pc, #256]	@ (800522c <HAL_HRTIM_WaveformTimerControl+0x158>)
 800512a:	f7fc f975 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_TIMERTRGHLFMODE(pTimerCtl->TrigHalf));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d009      	beq.n	800514a <HAL_HRTIM_WaveformTimerControl+0x76>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800513e:	d004      	beq.n	800514a <HAL_HRTIM_WaveformTimerControl+0x76>
 8005140:	f241 31cf 	movw	r1, #5071	@ 0x13cf
 8005144:	4839      	ldr	r0, [pc, #228]	@ (800522c <HAL_HRTIM_WaveformTimerControl+0x158>)
 8005146:	f7fc f967 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_TIMERGTCMP3(pTimerCtl->GreaterCMP3));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <HAL_HRTIM_WaveformTimerControl+0x92>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800515a:	d004      	beq.n	8005166 <HAL_HRTIM_WaveformTimerControl+0x92>
 800515c:	f241 31d0 	movw	r1, #5072	@ 0x13d0
 8005160:	4832      	ldr	r0, [pc, #200]	@ (800522c <HAL_HRTIM_WaveformTimerControl+0x158>)
 8005162:	f7fc f959 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <HAL_HRTIM_WaveformTimerControl+0xae>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005176:	d004      	beq.n	8005182 <HAL_HRTIM_WaveformTimerControl+0xae>
 8005178:	f241 31d1 	movw	r1, #5073	@ 0x13d1
 800517c:	482b      	ldr	r0, [pc, #172]	@ (800522c <HAL_HRTIM_WaveformTimerControl+0x158>)
 800517e:	f7fc f94b 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d008      	beq.n	800519c <HAL_HRTIM_WaveformTimerControl+0xc8>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b04      	cmp	r3, #4
 8005190:	d004      	beq.n	800519c <HAL_HRTIM_WaveformTimerControl+0xc8>
 8005192:	f241 31d2 	movw	r1, #5074	@ 0x13d2
 8005196:	4825      	ldr	r0, [pc, #148]	@ (800522c <HAL_HRTIM_WaveformTimerControl+0x158>)
 8005198:	f7fc f93e 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_HRTIM_WaveformTimerControl+0xe2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d004      	beq.n	80051b6 <HAL_HRTIM_WaveformTimerControl+0xe2>
 80051ac:	f241 31d3 	movw	r1, #5075	@ 0x13d3
 80051b0:	481e      	ldr	r0, [pc, #120]	@ (800522c <HAL_HRTIM_WaveformTimerControl+0x158>)
 80051b2:	f7fc f931 	bl	8001418 <assert_failed>
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d008      	beq.n	80051d0 <HAL_HRTIM_WaveformTimerControl+0xfc>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d004      	beq.n	80051d0 <HAL_HRTIM_WaveformTimerControl+0xfc>
 80051c6:	f241 31d4 	movw	r1, #5076	@ 0x13d4
 80051ca:	4818      	ldr	r0, [pc, #96]	@ (800522c <HAL_HRTIM_WaveformTimerControl+0x158>)
 80051cc:	f7fc f924 	bl	8001418 <assert_failed>

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d101      	bne.n	80051e0 <HAL_HRTIM_WaveformTimerControl+0x10c>
    {
       return HAL_BUSY;
 80051dc:	2302      	movs	r3, #2
 80051de:	e020      	b.n	8005222 <HAL_HRTIM_WaveformTimerControl+0x14e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <HAL_HRTIM_WaveformTimerControl+0x11a>
 80051ea:	2302      	movs	r3, #2
 80051ec:	e019      	b.n	8005222 <HAL_HRTIM_WaveformTimerControl+0x14e>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2202      	movs	r2, #2
 80051fa:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 fbb4 	bl	8005970 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 fc10 	bl	8005a30 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	08010988 	.word	0x08010988

08005230 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2bff      	cmp	r3, #255	@ 0xff
 800523e:	d103      	bne.n	8005248 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fc63 	bl	8005b0c <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8005246:	e00a      	b.n	800525e <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2b06      	cmp	r3, #6
 800524c:	d103      	bne.n	8005256 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fcec 	bl	8005c2c <HRTIM_Master_ISR>
}
 8005254:	e003      	b.n	800525e <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8005256:	6839      	ldr	r1, [r7, #0]
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fdac 	bl	8005db6 <HRTIM_Timer_ISR>
}
 800525e:	bf00      	nop
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f023 0307 	bic.w	r3, r3, #7
 8005464:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0318 	bic.w	r3, r3, #24
 8005476:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	6812      	ldr	r2, [r2, #0]
 8005492:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	6852      	ldr	r2, [r2, #4]
 800549c:	619a      	str	r2, [r3, #24]
}
 800549e:	bf00      	nop
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b087      	sub	sp, #28
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	60f8      	str	r0, [r7, #12]
 80054b2:	60b9      	str	r1, [r7, #8]
 80054b4:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	3301      	adds	r3, #1
 80054be:	01db      	lsls	r3, r3, #7
 80054c0:	4413      	add	r3, r2
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f023 0307 	bic.w	r3, r3, #7
 80054cc:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f023 0318 	bic.w	r3, r3, #24
 80054de:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	3301      	adds	r3, #1
 80054f2:	01db      	lsls	r3, r3, #7
 80054f4:	4413      	add	r3, r2
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6819      	ldr	r1, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	01db      	lsls	r3, r3, #7
 8005506:	440b      	add	r3, r1
 8005508:	3394      	adds	r3, #148	@ 0x94
 800550a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6819      	ldr	r1, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	01db      	lsls	r3, r3, #7
 8005518:	440b      	add	r3, r1
 800551a:	3398      	adds	r3, #152	@ 0x98
 800551c:	601a      	str	r2, [r3, #0]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800552a:	b480      	push	{r7}
 800552c:	b085      	sub	sp, #20
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8005544:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f023 0320 	bic.w	r3, r3, #32
 800554c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800555e:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	2b20      	cmp	r3, #32
 8005566:	d003      	beq.n	8005570 <HRTIM_MasterWaveform_Config+0x46>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	2b02      	cmp	r3, #2
 800556e:	d108      	bne.n	8005582 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005576:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f043 0320 	orr.w	r3, r3, #32
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	e021      	b.n	80055c6 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	2b03      	cmp	r3, #3
 8005588:	d108      	bne.n	800559c <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005590:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	e014      	b.n	80055c6 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d108      	bne.n	80055b6 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055aa:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e007      	b.n	80055c6 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f023 0320 	bic.w	r3, r3, #32
 80055bc:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80055c4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055cc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055de:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80055f0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8005602:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005614:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005628:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800563a:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	4313      	orrs	r3, r2
 8005644:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8005658:	bf00      	nop
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005664:	b480      	push	{r7}
 8005666:	b08b      	sub	sp, #44	@ 0x2c
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	3301      	adds	r3, #1
 8005678:	01db      	lsls	r3, r3, #7
 800567a:	4413      	add	r3, r2
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	6811      	ldr	r1, [r2, #0]
 8005682:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	3301      	adds	r3, #1
 800568a:	01db      	lsls	r3, r3, #7
 800568c:	440b      	add	r3, r1
 800568e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	3301      	adds	r3, #1
 8005698:	01db      	lsls	r3, r3, #7
 800569a:	4413      	add	r3, r2
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	01db      	lsls	r3, r3, #7
 80056a8:	4413      	add	r3, r2
 80056aa:	33e8      	adds	r3, #232	@ 0xe8
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	01db      	lsls	r3, r3, #7
 80056b8:	4413      	add	r3, r2
 80056ba:	33e4      	adds	r3, #228	@ 0xe4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80056c8:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	f023 0320 	bic.w	r3, r3, #32
 80056d0:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056d8:	4313      	orrs	r3, r2
 80056da:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d003      	beq.n	80056ec <HRTIM_TimingUnitWaveform_Config+0x88>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d108      	bne.n	80056fe <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80056ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ee:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 80056f2:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	f043 0320 	orr.w	r3, r3, #32
 80056fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80056fc:	e021      	b.n	8005742 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	2b03      	cmp	r3, #3
 8005704:	d108      	bne.n	8005718 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800570c:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 800570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005710:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005714:	627b      	str	r3, [r7, #36]	@ 0x24
 8005716:	e014      	b.n	8005742 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	2b04      	cmp	r3, #4
 800571e:	d108      	bne.n	8005732 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005726:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800572e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005730:	e007      	b.n	8005742 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	f023 0320 	bic.w	r3, r3, #32
 8005738:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8005740:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8005742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005744:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005748:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005750:	4313      	orrs	r3, r2
 8005752:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8005754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005756:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800575a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005762:	4313      	orrs	r3, r2
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005774:	4313      	orrs	r3, r2
 8005776:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8005778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800577e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005786:	4313      	orrs	r3, r2
 8005788:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800578a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005798:	4313      	orrs	r3, r2
 800579a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 800579c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80057a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057ac:	d103      	bne.n	80057b6 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057b4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057bc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057c4:	4313      	orrs	r3, r2
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057ce:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d6:	4313      	orrs	r3, r2
 80057d8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 80057e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057e4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ec:	4313      	orrs	r3, r2
 80057ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80057f6:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4313      	orrs	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800580c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4313      	orrs	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800581e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005824:	6a3a      	ldr	r2, [r7, #32]
 8005826:	4313      	orrs	r3, r2
 8005828:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800582e:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8005832:	d004      	beq.n	800583e <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005838:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 800583c:	d103      	bne.n	8005846 <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005842:	2b40      	cmp	r3, #64	@ 0x40
 8005844:	d108      	bne.n	8005858 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 800584c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005852:	6a3a      	ldr	r2, [r7, #32]
 8005854:	4313      	orrs	r3, r2
 8005856:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800585e:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005864:	6a3a      	ldr	r2, [r7, #32]
 8005866:	4313      	orrs	r3, r2
 8005868:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b05      	cmp	r3, #5
 8005874:	d850      	bhi.n	8005918 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8005876:	a201      	add	r2, pc, #4	@ (adr r2, 800587c <HRTIM_TimingUnitWaveform_Config+0x218>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	08005895 	.word	0x08005895
 8005880:	080058ab 	.word	0x080058ab
 8005884:	080058c1 	.word	0x080058c1
 8005888:	080058d7 	.word	0x080058d7
 800588c:	080058ed 	.word	0x080058ed
 8005890:	08005903 	.word	0x08005903
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800589a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	61fb      	str	r3, [r7, #28]
      break;
 80058a8:	e037      	b.n	800591a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058b0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	69fa      	ldr	r2, [r7, #28]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	61fb      	str	r3, [r7, #28]
      break;
 80058be:	e02c      	b.n	800591a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80058c6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	61fb      	str	r3, [r7, #28]
      break;
 80058d4:	e021      	b.n	800591a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80058dc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	61fb      	str	r3, [r7, #28]
      break;
 80058ea:	e016      	b.n	800591a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058f2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f8:	015b      	lsls	r3, r3, #5
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	61fb      	str	r3, [r7, #28]
      break;
 8005900:	e00b      	b.n	800591a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005908:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590e:	019b      	lsls	r3, r3, #6
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	4313      	orrs	r3, r2
 8005914:	61fb      	str	r3, [r7, #28]
      break;
 8005916:	e000      	b.n	800591a <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 8005918:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	3301      	adds	r3, #1
 8005922:	01db      	lsls	r3, r3, #7
 8005924:	4413      	add	r3, r2
 8005926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005928:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	01db      	lsls	r3, r3, #7
 8005932:	4413      	add	r3, r2
 8005934:	33e8      	adds	r3, #232	@ 0xe8
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	01db      	lsls	r3, r3, #7
 8005942:	4413      	add	r3, r2
 8005944:	33e4      	adds	r3, #228	@ 0xe4
 8005946:	6a3a      	ldr	r2, [r7, #32]
 8005948:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	01db      	lsls	r3, r3, #7
 8005952:	4413      	add	r3, r2
 8005954:	33d4      	adds	r3, #212	@ 0xd4
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69fa      	ldr	r2, [r7, #28]
 8005960:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8005964:	bf00      	nop
 8005966:	372c      	adds	r7, #44	@ 0x2c
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	01db      	lsls	r3, r3, #7
 8005984:	4413      	add	r3, r2
 8005986:	33ec      	adds	r3, #236	@ 0xec
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f023 0310 	bic.w	r3, r3, #16
 8005992:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80059a6:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059b8:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80059ca:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d11a      	bne.n	8005a14 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f023 0304 	bic.w	r3, r3, #4
 80059e4:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f023 0302 	bic.w	r3, r3, #2
 80059f6:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	01db      	lsls	r3, r3, #7
 8005a1c:	4413      	add	r3, r2
 8005a1e:	33ec      	adds	r3, #236	@ 0xec
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	601a      	str	r2, [r3, #0]

}
 8005a24:	bf00      	nop
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b06      	cmp	r3, #6
 8005a3e:	d85e      	bhi.n	8005afe <HRTIM_ForceRegistersUpdate+0xce>
 8005a40:	a201      	add	r2, pc, #4	@ (adr r2, 8005a48 <HRTIM_ForceRegistersUpdate+0x18>)
 8005a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a46:	bf00      	nop
 8005a48:	08005a7b 	.word	0x08005a7b
 8005a4c:	08005a91 	.word	0x08005a91
 8005a50:	08005aa7 	.word	0x08005aa7
 8005a54:	08005abd 	.word	0x08005abd
 8005a58:	08005ad3 	.word	0x08005ad3
 8005a5c:	08005ae9 	.word	0x08005ae9
 8005a60:	08005a65 	.word	0x08005a65
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005a78:	e042      	b.n	8005b00 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0202 	orr.w	r2, r2, #2
 8005a8a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005a8e:	e037      	b.n	8005b00 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f042 0204 	orr.w	r2, r2, #4
 8005aa0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005aa4:	e02c      	b.n	8005b00 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0208 	orr.w	r2, r2, #8
 8005ab6:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005aba:	e021      	b.n	8005b00 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0210 	orr.w	r2, r2, #16
 8005acc:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005ad0:	e016      	b.n	8005b00 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0220 	orr.w	r2, r2, #32
 8005ae2:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005ae6:	e00b      	b.n	8005b00 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005af8:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005afc:	e000      	b.n	8005b00 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8005afe:	bf00      	nop
  }
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8005b1c:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8005b26:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00c      	beq.n	8005b4c <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff fb8d 	bl	8005266 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00c      	beq.n	8005b70 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d007      	beq.n	8005b70 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2202      	movs	r2, #2
 8005b66:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7ff fb85 	bl	800527a <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00c      	beq.n	8005b94 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d007      	beq.n	8005b94 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2204      	movs	r2, #4
 8005b8a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7ff fb7d 	bl	800528e <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00c      	beq.n	8005bb8 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2208      	movs	r2, #8
 8005bae:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff fb75 	bl	80052a2 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f003 0310 	and.w	r3, r3, #16
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00c      	beq.n	8005bdc <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f003 0310 	and.w	r3, r3, #16
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d007      	beq.n	8005bdc <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2210      	movs	r2, #16
 8005bd2:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7ff fb6d 	bl	80052b6 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00c      	beq.n	8005c00 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d007      	beq.n	8005c00 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2240      	movs	r2, #64	@ 0x40
 8005bf6:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff fb65 	bl	80052ca <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f003 0320 	and.w	r3, r3, #32
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00c      	beq.n	8005c24 <HRTIM_HRTIM_ISR+0x118>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d007      	beq.n	8005c24 <HRTIM_HRTIM_ISR+0x118>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff fb5d 	bl	80052de <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c24:	bf00      	nop
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8005c3c:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8005c46:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	60bb      	str	r3, [r7, #8]

  /* DLL calibration ready event */
  if((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d015      	beq.n	8005c8e <HRTIM_Master_ISR+0x62>
  {
    if((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d010      	beq.n	8005c8e <HRTIM_Master_ISR+0x62>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005c74:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff fb32 	bl	80052f2 <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00d      	beq.n	8005cb4 <HRTIM_Master_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d008      	beq.n	8005cb4 <HRTIM_Master_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005caa:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff fb29 	bl	8005306 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00c      	beq.n	8005cd8 <HRTIM_Master_ISR+0xac>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d007      	beq.n	8005cd8 <HRTIM_Master_ISR+0xac>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005cd0:	2106      	movs	r1, #6
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff fb36 	bl	8005344 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00c      	beq.n	8005cfc <HRTIM_Master_ISR+0xd0>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d007      	beq.n	8005cfc <HRTIM_Master_ISR+0xd0>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005cf4:	2106      	movs	r1, #6
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff fb2f 	bl	800535a <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00c      	beq.n	8005d20 <HRTIM_Master_ISR+0xf4>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <HRTIM_Master_ISR+0xf4>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2204      	movs	r2, #4
 8005d16:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005d18:	2106      	movs	r1, #6
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff fb28 	bl	8005370 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00c      	beq.n	8005d44 <HRTIM_Master_ISR+0x118>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <HRTIM_Master_ISR+0x118>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2208      	movs	r2, #8
 8005d3a:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005d3c:	2106      	movs	r1, #6
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7ff fb21 	bl	8005386 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f003 0310 	and.w	r3, r3, #16
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00c      	beq.n	8005d68 <HRTIM_Master_ISR+0x13c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <HRTIM_Master_ISR+0x13c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2210      	movs	r2, #16
 8005d5e:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005d60:	2106      	movs	r1, #6
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fb fb10 	bl	8001388 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <HRTIM_Master_ISR+0x15e>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d006      	beq.n	8005d8a <HRTIM_Master_ISR+0x15e>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2220      	movs	r2, #32
 8005d82:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff fac8 	bl	800531a <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00c      	beq.n	8005dae <HRTIM_Master_ISR+0x182>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d007      	beq.n	8005dae <HRTIM_Master_ISR+0x182>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2240      	movs	r2, #64	@ 0x40
 8005da4:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005da6:	2106      	movs	r1, #6
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7ff fac0 	bl	800532e <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dae:	bf00      	nop
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	01db      	lsls	r3, r3, #7
 8005dca:	4413      	add	r3, r2
 8005dcc:	3304      	adds	r3, #4
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	01db      	lsls	r3, r3, #7
 8005dda:	4413      	add	r3, r2
 8005ddc:	338c      	adds	r3, #140	@ 0x8c
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d010      	beq.n	8005e0e <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00b      	beq.n	8005e0e <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	01db      	lsls	r3, r3, #7
 8005dfe:	4413      	add	r3, r2
 8005e00:	3388      	adds	r3, #136	@ 0x88
 8005e02:	2201      	movs	r2, #1
 8005e04:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff fa9b 	bl	8005344 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d010      	beq.n	8005e3a <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00b      	beq.n	8005e3a <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	01db      	lsls	r3, r3, #7
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3388      	adds	r3, #136	@ 0x88
 8005e2e:	2202      	movs	r2, #2
 8005e30:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff fa90 	bl	800535a <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d010      	beq.n	8005e66 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00b      	beq.n	8005e66 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	01db      	lsls	r3, r3, #7
 8005e56:	4413      	add	r3, r2
 8005e58:	3388      	adds	r3, #136	@ 0x88
 8005e5a:	2204      	movs	r2, #4
 8005e5c:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff fa85 	bl	8005370 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d010      	beq.n	8005e92 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00b      	beq.n	8005e92 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	01db      	lsls	r3, r3, #7
 8005e82:	4413      	add	r3, r2
 8005e84:	3388      	adds	r3, #136	@ 0x88
 8005e86:	2208      	movs	r2, #8
 8005e88:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff fa7a 	bl	8005386 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f003 0310 	and.w	r3, r3, #16
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d010      	beq.n	8005ebe <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f003 0310 	and.w	r3, r3, #16
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00b      	beq.n	8005ebe <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	01db      	lsls	r3, r3, #7
 8005eae:	4413      	add	r3, r2
 8005eb0:	3388      	adds	r3, #136	@ 0x88
 8005eb2:	2210      	movs	r2, #16
 8005eb4:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7fb fa65 	bl	8001388 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d010      	beq.n	8005eea <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00b      	beq.n	8005eea <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	01db      	lsls	r3, r3, #7
 8005eda:	4413      	add	r3, r2
 8005edc:	3388      	adds	r3, #136	@ 0x88
 8005ede:	2240      	movs	r2, #64	@ 0x40
 8005ee0:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff fa22 	bl	800532e <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d010      	beq.n	8005f16 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	01db      	lsls	r3, r3, #7
 8005f06:	4413      	add	r3, r2
 8005f08:	3388      	adds	r3, #136	@ 0x88
 8005f0a:	2280      	movs	r2, #128	@ 0x80
 8005f0c:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff fa43 	bl	800539c <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d011      	beq.n	8005f44 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00c      	beq.n	8005f44 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	01db      	lsls	r3, r3, #7
 8005f32:	4413      	add	r3, r2
 8005f34:	3388      	adds	r3, #136	@ 0x88
 8005f36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f3a:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff fa37 	bl	80053b2 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d011      	beq.n	8005f72 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00c      	beq.n	8005f72 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	01db      	lsls	r3, r3, #7
 8005f60:	4413      	add	r3, r2
 8005f62:	3388      	adds	r3, #136	@ 0x88
 8005f64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f68:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff fa41 	bl	80053f4 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d011      	beq.n	8005fa0 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00c      	beq.n	8005fa0 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	01db      	lsls	r3, r3, #7
 8005f8e:	4413      	add	r3, r2
 8005f90:	3388      	adds	r3, #136	@ 0x88
 8005f92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f96:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7ff fa35 	bl	800540a <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d011      	beq.n	8005fce <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00c      	beq.n	8005fce <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	01db      	lsls	r3, r3, #7
 8005fbc:	4413      	add	r3, r2
 8005fbe:	3388      	adds	r3, #136	@ 0x88
 8005fc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fc4:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff fa29 	bl	8005420 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d011      	beq.n	8005ffc <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00c      	beq.n	8005ffc <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	01db      	lsls	r3, r3, #7
 8005fea:	4413      	add	r3, r2
 8005fec:	3388      	adds	r3, #136	@ 0x88
 8005fee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005ff2:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff fa1d 	bl	8005436 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d011      	beq.n	800602a <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00c      	beq.n	800602a <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	01db      	lsls	r3, r3, #7
 8006018:	4413      	add	r3, r2
 800601a:	3388      	adds	r3, #136	@ 0x88
 800601c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006020:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff f9da 	bl	80053de <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d011      	beq.n	8006058 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00c      	beq.n	8006058 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	01db      	lsls	r3, r3, #7
 8006046:	4413      	add	r3, r2
 8006048:	3388      	adds	r3, #136	@ 0x88
 800604a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800604e:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff f9b8 	bl	80053c8 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006058:	bf00      	nop
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e0c9      	b.n	8006206 <HAL_PCD_Init+0x1a6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a66      	ldr	r2, [pc, #408]	@ (8006210 <HAL_PCD_Init+0x1b0>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d003      	beq.n	8006084 <HAL_PCD_Init+0x24>
 800607c:	2187      	movs	r1, #135	@ 0x87
 800607e:	4865      	ldr	r0, [pc, #404]	@ (8006214 <HAL_PCD_Init+0x1b4>)
 8006080:	f7fb f9ca 	bl	8001418 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d106      	bne.n	800609e <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f00a f853 	bl	8010144 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2203      	movs	r2, #3
 80060a2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f005 fef3 	bl	800be96 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060b0:	2300      	movs	r3, #0
 80060b2:	73fb      	strb	r3, [r7, #15]
 80060b4:	e03e      	b.n	8006134 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80060b6:	7bfa      	ldrb	r2, [r7, #15]
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	440b      	add	r3, r1
 80060c4:	3311      	adds	r3, #17
 80060c6:	2201      	movs	r2, #1
 80060c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80060ca:	7bfa      	ldrb	r2, [r7, #15]
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	440b      	add	r3, r1
 80060d8:	3310      	adds	r3, #16
 80060da:	7bfa      	ldrb	r2, [r7, #15]
 80060dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060de:	7bfa      	ldrb	r2, [r7, #15]
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	440b      	add	r3, r1
 80060ec:	3313      	adds	r3, #19
 80060ee:	2200      	movs	r2, #0
 80060f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060f2:	7bfa      	ldrb	r2, [r7, #15]
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	440b      	add	r3, r1
 8006100:	3320      	adds	r3, #32
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006106:	7bfa      	ldrb	r2, [r7, #15]
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	440b      	add	r3, r1
 8006114:	3324      	adds	r3, #36	@ 0x24
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	440b      	add	r3, r1
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800612e:	7bfb      	ldrb	r3, [r7, #15]
 8006130:	3301      	adds	r3, #1
 8006132:	73fb      	strb	r3, [r7, #15]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	791b      	ldrb	r3, [r3, #4]
 8006138:	7bfa      	ldrb	r2, [r7, #15]
 800613a:	429a      	cmp	r2, r3
 800613c:	d3bb      	bcc.n	80060b6 <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800613e:	2300      	movs	r3, #0
 8006140:	73fb      	strb	r3, [r7, #15]
 8006142:	e044      	b.n	80061ce <HAL_PCD_Init+0x16e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006144:	7bfa      	ldrb	r2, [r7, #15]
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	440b      	add	r3, r1
 8006152:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006156:	2200      	movs	r2, #0
 8006158:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800615a:	7bfa      	ldrb	r2, [r7, #15]
 800615c:	6879      	ldr	r1, [r7, #4]
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	440b      	add	r3, r1
 8006168:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800616c:	7bfa      	ldrb	r2, [r7, #15]
 800616e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006170:	7bfa      	ldrb	r2, [r7, #15]
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	440b      	add	r3, r1
 800617e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006182:	2200      	movs	r2, #0
 8006184:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006186:	7bfa      	ldrb	r2, [r7, #15]
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	440b      	add	r3, r1
 8006194:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800619c:	7bfa      	ldrb	r2, [r7, #15]
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	440b      	add	r3, r1
 80061aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80061ae:	2200      	movs	r2, #0
 80061b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80061b2:	7bfa      	ldrb	r2, [r7, #15]
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	440b      	add	r3, r1
 80061c0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
 80061ca:	3301      	adds	r3, #1
 80061cc:	73fb      	strb	r3, [r7, #15]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	791b      	ldrb	r3, [r3, #4]
 80061d2:	7bfa      	ldrb	r2, [r7, #15]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d3b5      	bcc.n	8006144 <HAL_PCD_Init+0xe4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3304      	adds	r3, #4
 80061e0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80061e4:	f005 fe72 	bl	800becc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	7a9b      	ldrb	r3, [r3, #10]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d102      	bne.n	8006204 <HAL_PCD_Init+0x1a4>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f001 fc45 	bl	8007a8e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	40005c00 	.word	0x40005c00
 8006214:	080109fc 	.word	0x080109fc

08006218 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_PCD_Start+0x16>
 800622a:	2302      	movs	r3, #2
 800622c:	e012      	b.n	8006254 <HAL_PCD_Start+0x3c>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f005 fe14 	bl	800be68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	f008 f8d4 	bl	800e3f2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4618      	mov	r0, r3
 800626a:	f008 f8d9 	bl	800e420 <USB_ReadInterrupts>
 800626e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fb04 	bl	8006888 <PCD_EP_ISR_Handler>

    return;
 8006280:	e110      	b.n	80064a4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006288:	2b00      	cmp	r3, #0
 800628a:	d013      	beq.n	80062b4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006294:	b29a      	uxth	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800629e:	b292      	uxth	r2, r2
 80062a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f009 ffde 	bl	8010266 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80062aa:	2100      	movs	r1, #0
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f8fc 	bl	80064aa <HAL_PCD_SetAddress>

    return;
 80062b2:	e0f7      	b.n	80064a4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00c      	beq.n	80062d8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062d0:	b292      	uxth	r2, r2
 80062d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80062d6:	e0e5      	b.n	80064a4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00c      	beq.n	80062fc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062f4:	b292      	uxth	r2, r2
 80062f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80062fa:	e0d3      	b.n	80064a4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d034      	beq.n	8006370 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800630e:	b29a      	uxth	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0204 	bic.w	r2, r2, #4
 8006318:	b292      	uxth	r2, r2
 800631a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006326:	b29a      	uxth	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0208 	bic.w	r2, r2, #8
 8006330:	b292      	uxth	r2, r2
 8006332:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800633c:	2b01      	cmp	r3, #1
 800633e:	d107      	bne.n	8006350 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006348:	2100      	movs	r1, #0
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f00a f97e 	bl	801064c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f009 ffc1 	bl	80102d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800635e:	b29a      	uxth	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006368:	b292      	uxth	r2, r2
 800636a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800636e:	e099      	b.n	80064a4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006376:	2b00      	cmp	r3, #0
 8006378:	d027      	beq.n	80063ca <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006382:	b29a      	uxth	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0208 	orr.w	r2, r2, #8
 800638c:	b292      	uxth	r2, r2
 800638e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800639a:	b29a      	uxth	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063a4:	b292      	uxth	r2, r2
 80063a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0204 	orr.w	r2, r2, #4
 80063bc:	b292      	uxth	r2, r2
 80063be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f009 ff6e 	bl	80102a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80063c8:	e06c      	b.n	80064a4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d040      	beq.n	8006456 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80063dc:	b29a      	uxth	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063e6:	b292      	uxth	r2, r2
 80063e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d12b      	bne.n	800644e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80063fe:	b29a      	uxth	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f042 0204 	orr.w	r2, r2, #4
 8006408:	b292      	uxth	r2, r2
 800640a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006416:	b29a      	uxth	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f042 0208 	orr.w	r2, r2, #8
 8006420:	b292      	uxth	r2, r2
 8006422:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006436:	b29b      	uxth	r3, r3
 8006438:	089b      	lsrs	r3, r3, #2
 800643a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006444:	2101      	movs	r1, #1
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f00a f900 	bl	801064c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800644c:	e02a      	b.n	80064a4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f009 ff28 	bl	80102a4 <HAL_PCD_SuspendCallback>
    return;
 8006454:	e026      	b.n	80064a4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00f      	beq.n	8006480 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006468:	b29a      	uxth	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006472:	b292      	uxth	r2, r2
 8006474:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f009 fee6 	bl	801024a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800647e:	e011      	b.n	80064a4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00c      	beq.n	80064a4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006492:	b29a      	uxth	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800649c:	b292      	uxth	r2, r2
 800649e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80064a2:	bf00      	nop
  }
}
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b082      	sub	sp, #8
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	460b      	mov	r3, r1
 80064b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_PCD_SetAddress+0x1a>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e012      	b.n	80064ea <HAL_PCD_SetAddress+0x40>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	78fa      	ldrb	r2, [r7, #3]
 80064d0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	78fa      	ldrb	r2, [r7, #3]
 80064d8:	4611      	mov	r1, r2
 80064da:	4618      	mov	r0, r3
 80064dc:	f007 ff75 	bl	800e3ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	4608      	mov	r0, r1
 80064fc:	4611      	mov	r1, r2
 80064fe:	461a      	mov	r2, r3
 8006500:	4603      	mov	r3, r0
 8006502:	70fb      	strb	r3, [r7, #3]
 8006504:	460b      	mov	r3, r1
 8006506:	803b      	strh	r3, [r7, #0]
 8006508:	4613      	mov	r3, r2
 800650a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006514:	2b00      	cmp	r3, #0
 8006516:	da0e      	bge.n	8006536 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	f003 0207 	and.w	r2, r3, #7
 800651e:	4613      	mov	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	3310      	adds	r3, #16
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	4413      	add	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	705a      	strb	r2, [r3, #1]
 8006534:	e00e      	b.n	8006554 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006536:	78fb      	ldrb	r3, [r7, #3]
 8006538:	f003 0207 	and.w	r2, r3, #7
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	4413      	add	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	b2da      	uxtb	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006560:	883a      	ldrh	r2, [r7, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	78ba      	ldrb	r2, [r7, #2]
 800656a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800656c:	78bb      	ldrb	r3, [r7, #2]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d102      	bne.n	8006578 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_PCD_EP_Open+0x94>
 8006582:	2302      	movs	r3, #2
 8006584:	e00e      	b.n	80065a4 <HAL_PCD_EP_Open+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	4618      	mov	r0, r3
 8006596:	f005 fcb7 	bl	800bf08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80065a2:	7afb      	ldrb	r3, [r7, #11]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	da0e      	bge.n	80065de <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065c0:	78fb      	ldrb	r3, [r7, #3]
 80065c2:	f003 0207 	and.w	r2, r3, #7
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	3310      	adds	r3, #16
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	4413      	add	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	705a      	strb	r2, [r3, #1]
 80065dc:	e00e      	b.n	80065fc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065de:	78fb      	ldrb	r3, [r7, #3]
 80065e0:	f003 0207 	and.w	r2, r3, #7
 80065e4:	4613      	mov	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	4413      	add	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	b2da      	uxtb	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800660e:	2b01      	cmp	r3, #1
 8006610:	d101      	bne.n	8006616 <HAL_PCD_EP_Close+0x6a>
 8006612:	2302      	movs	r3, #2
 8006614:	e00e      	b.n	8006634 <HAL_PCD_EP_Close+0x88>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68f9      	ldr	r1, [r7, #12]
 8006624:	4618      	mov	r0, r3
 8006626:	f006 f833 	bl	800c690 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	607a      	str	r2, [r7, #4]
 8006646:	603b      	str	r3, [r7, #0]
 8006648:	460b      	mov	r3, r1
 800664a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800664c:	7afb      	ldrb	r3, [r7, #11]
 800664e:	f003 0207 	and.w	r2, r3, #7
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2200      	movs	r2, #0
 8006674:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2200      	movs	r2, #0
 800667a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800667c:	7afb      	ldrb	r3, [r7, #11]
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	b2da      	uxtb	r2, r3
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6979      	ldr	r1, [r7, #20]
 800668e:	4618      	mov	r0, r3
 8006690:	f006 f9eb 	bl	800ca6a <USB_EPStartXfer>

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80066aa:	78fb      	ldrb	r3, [r7, #3]
 80066ac:	f003 0207 	and.w	r2, r3, #7
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	440b      	add	r3, r1
 80066bc:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80066c0:	681b      	ldr	r3, [r3, #0]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b086      	sub	sp, #24
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	603b      	str	r3, [r7, #0]
 80066da:	460b      	mov	r3, r1
 80066dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066de:	7afb      	ldrb	r3, [r7, #11]
 80066e0:	f003 0207 	and.w	r2, r3, #7
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	3310      	adds	r3, #16
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4413      	add	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2200      	movs	r2, #0
 8006712:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2201      	movs	r2, #1
 8006718:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800671a:	7afb      	ldrb	r3, [r7, #11]
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	b2da      	uxtb	r2, r3
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6979      	ldr	r1, [r7, #20]
 800672c:	4618      	mov	r0, r3
 800672e:	f006 f99c 	bl	800ca6a <USB_EPStartXfer>

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	f003 0307 	and.w	r3, r3, #7
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	7912      	ldrb	r2, [r2, #4]
 8006752:	4293      	cmp	r3, r2
 8006754:	d901      	bls.n	800675a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e03e      	b.n	80067d8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800675a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800675e:	2b00      	cmp	r3, #0
 8006760:	da0e      	bge.n	8006780 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006762:	78fb      	ldrb	r3, [r7, #3]
 8006764:	f003 0207 	and.w	r2, r3, #7
 8006768:	4613      	mov	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	3310      	adds	r3, #16
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	4413      	add	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	705a      	strb	r2, [r3, #1]
 800677e:	e00c      	b.n	800679a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006780:	78fa      	ldrb	r2, [r7, #3]
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	4413      	add	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <HAL_PCD_EP_SetStall+0x7e>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e00e      	b.n	80067d8 <HAL_PCD_EP_SetStall+0x9c>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68f9      	ldr	r1, [r7, #12]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f007 fcff 	bl	800e1cc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	7912      	ldrb	r2, [r2, #4]
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d901      	bls.n	80067fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e040      	b.n	8006880 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80067fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006802:	2b00      	cmp	r3, #0
 8006804:	da0e      	bge.n	8006824 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006806:	78fb      	ldrb	r3, [r7, #3]
 8006808:	f003 0207 	and.w	r2, r3, #7
 800680c:	4613      	mov	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	3310      	adds	r3, #16
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	4413      	add	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2201      	movs	r2, #1
 8006820:	705a      	strb	r2, [r3, #1]
 8006822:	e00e      	b.n	8006842 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006824:	78fb      	ldrb	r3, [r7, #3]
 8006826:	f003 0207 	and.w	r2, r3, #7
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	4413      	add	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	b2da      	uxtb	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800685a:	2b01      	cmp	r3, #1
 800685c:	d101      	bne.n	8006862 <HAL_PCD_EP_ClrStall+0x82>
 800685e:	2302      	movs	r3, #2
 8006860:	e00e      	b.n	8006880 <HAL_PCD_EP_ClrStall+0xa0>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68f9      	ldr	r1, [r7, #12]
 8006870:	4618      	mov	r0, r3
 8006872:	f007 fcfc 	bl	800e26e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b096      	sub	sp, #88	@ 0x58
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006890:	e3ad      	b.n	8006fee <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800689a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800689e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	f003 030f 	and.w	r3, r3, #15
 80068a8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80068ac:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f040 816f 	bne.w	8006b94 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80068b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80068ba:	f003 0310 	and.w	r3, r3, #16
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d14c      	bne.n	800695c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80068ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d2:	81fb      	strh	r3, [r7, #14]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	89fb      	ldrh	r3, [r7, #14]
 80068da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3310      	adds	r3, #16
 80068ea:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	4413      	add	r3, r2
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6812      	ldr	r2, [r2, #0]
 8006904:	4413      	add	r3, r2
 8006906:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006912:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006916:	695a      	ldr	r2, [r3, #20]
 8006918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	441a      	add	r2, r3
 800691e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006920:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006922:	2100      	movs	r1, #0
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f009 fc76 	bl	8010216 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	7b1b      	ldrb	r3, [r3, #12]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 835c 	beq.w	8006fee <PCD_EP_ISR_Handler+0x766>
 8006936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	2b00      	cmp	r3, #0
 800693c:	f040 8357 	bne.w	8006fee <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	7b1b      	ldrb	r3, [r3, #12]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800694a:	b2da      	uxtb	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	731a      	strb	r2, [r3, #12]
 800695a:	e348      	b.n	8006fee <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006962:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800696e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006976:	2b00      	cmp	r3, #0
 8006978:	d032      	beq.n	80069e0 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006982:	b29b      	uxth	r3, r3
 8006984:	461a      	mov	r2, r3
 8006986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	00db      	lsls	r3, r3, #3
 800698c:	4413      	add	r3, r2
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6812      	ldr	r2, [r2, #0]
 8006992:	4413      	add	r3, r2
 8006994:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800699e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069a0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80069ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069ae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80069b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069b2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f007 fd85 	bl	800e4c4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80069c6:	4013      	ands	r3, r2
 80069c8:	823b      	strh	r3, [r7, #16]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	8a3a      	ldrh	r2, [r7, #16]
 80069d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80069d4:	b292      	uxth	r2, r2
 80069d6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f009 fbef 	bl	80101bc <HAL_PCD_SetupStageCallback>
 80069de:	e306      	b.n	8006fee <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80069e0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f280 8302 	bge.w	8006fee <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80069f6:	4013      	ands	r3, r2
 80069f8:	83fb      	strh	r3, [r7, #30]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	8bfa      	ldrh	r2, [r7, #30]
 8006a00:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006a04:	b292      	uxth	r2, r2
 8006a06:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	461a      	mov	r2, r3
 8006a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	4413      	add	r3, r2
 8006a22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a2e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d019      	beq.n	8006a6c <PCD_EP_ISR_Handler+0x1e4>
 8006a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d015      	beq.n	8006a6c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6818      	ldr	r0, [r3, #0]
 8006a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a46:	6959      	ldr	r1, [r3, #20]
 8006a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a4a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a4e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f007 fd37 	bl	800e4c4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a58:	695a      	ldr	r2, [r3, #20]
 8006a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	441a      	add	r2, r3
 8006a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a62:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006a64:	2100      	movs	r1, #0
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f009 fbba 	bl	80101e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006a76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006a7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f040 82b5 	bne.w	8006fee <PCD_EP_ISR_Handler+0x766>
 8006a84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006a88:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006a8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a90:	f000 82ad 	beq.w	8006fee <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	61bb      	str	r3, [r7, #24]
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	801a      	strh	r2, [r3, #0]
 8006ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006aca:	d91d      	bls.n	8006b08 <PCD_EP_ISR_Handler+0x280>
 8006acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	095b      	lsrs	r3, r3, #5
 8006ad2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f003 031f 	and.w	r3, r3, #31
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d102      	bne.n	8006ae6 <PCD_EP_ISR_Handler+0x25e>
 8006ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	029b      	lsls	r3, r3, #10
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	4313      	orrs	r3, r2
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006afc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	801a      	strh	r2, [r3, #0]
 8006b06:	e026      	b.n	8006b56 <PCD_EP_ISR_Handler+0x2ce>
 8006b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10a      	bne.n	8006b26 <PCD_EP_ISR_Handler+0x29e>
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	801a      	strh	r2, [r3, #0]
 8006b24:	e017      	b.n	8006b56 <PCD_EP_ISR_Handler+0x2ce>
 8006b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <PCD_EP_ISR_Handler+0x2b8>
 8006b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	029b      	lsls	r3, r3, #10
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b66:	827b      	strh	r3, [r7, #18]
 8006b68:	8a7b      	ldrh	r3, [r7, #18]
 8006b6a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b6e:	827b      	strh	r3, [r7, #18]
 8006b70:	8a7b      	ldrh	r3, [r7, #18]
 8006b72:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b76:	827b      	strh	r3, [r7, #18]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	8a7b      	ldrh	r3, [r7, #18]
 8006b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	8013      	strh	r3, [r2, #0]
 8006b92:	e22c      	b.n	8006fee <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006ba8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f280 80f6 	bge.w	8006d9e <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006bc8:	4013      	ands	r3, r2
 8006bca:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8006be0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006be4:	b292      	uxth	r2, r2
 8006be6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006be8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006bec:	4613      	mov	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c00:	7b1b      	ldrb	r3, [r3, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d123      	bne.n	8006c4e <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	4413      	add	r3, r2
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	6812      	ldr	r2, [r2, #0]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c2a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8006c2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 808e 	beq.w	8006d54 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6818      	ldr	r0, [r3, #0]
 8006c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c3e:	6959      	ldr	r1, [r3, #20]
 8006c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c42:	88da      	ldrh	r2, [r3, #6]
 8006c44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006c48:	f007 fc3c 	bl	800e4c4 <USB_ReadPMA>
 8006c4c:	e082      	b.n	8006d54 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c50:	78db      	ldrb	r3, [r3, #3]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d10a      	bne.n	8006c6c <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006c56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f9d3 	bl	800700a <HAL_PCD_EP_DB_Receive>
 8006c64:	4603      	mov	r3, r0
 8006c66:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8006c6a:	e073      	b.n	8006d54 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	881b      	ldrh	r3, [r3, #0]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c86:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	441a      	add	r2, r3
 8006c98:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8006c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ca8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d022      	beq.n	8006d10 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	4413      	add	r3, r2
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6812      	ldr	r2, [r2, #0]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cee:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8006cf2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d02c      	beq.n	8006d54 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d00:	6959      	ldr	r1, [r3, #20]
 8006d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d04:	891a      	ldrh	r2, [r3, #8]
 8006d06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006d0a:	f007 fbdb 	bl	800e4c4 <USB_ReadPMA>
 8006d0e:	e021      	b.n	8006d54 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	4413      	add	r3, r2
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	6812      	ldr	r2, [r2, #0]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d34:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8006d38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d009      	beq.n	8006d54 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d46:	6959      	ldr	r1, [r3, #20]
 8006d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d4a:	895a      	ldrh	r2, [r3, #10]
 8006d4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006d50:	f007 fbb8 	bl	800e4c4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d56:	69da      	ldr	r2, [r3, #28]
 8006d58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006d5c:	441a      	add	r2, r3
 8006d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d64:	695a      	ldr	r2, [r3, #20]
 8006d66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006d6a:	441a      	add	r2, r3
 8006d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d6e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d005      	beq.n	8006d84 <PCD_EP_ISR_Handler+0x4fc>
 8006d78:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8006d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d206      	bcs.n	8006d92 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f009 fa28 	bl	80101e0 <HAL_PCD_DataOutStageCallback>
 8006d90:	e005      	b.n	8006d9e <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f005 fe66 	bl	800ca6a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006d9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 8121 	beq.w	8006fee <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8006dac:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006db0:	4613      	mov	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	3310      	adds	r3, #16
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dda:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	441a      	add	r2, r3
 8006dec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dfe:	78db      	ldrb	r3, [r3, #3]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	f040 80a2 	bne.w	8006f4a <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8006e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e08:	2200      	movs	r2, #0
 8006e0a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e0e:	7b1b      	ldrb	r3, [r3, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 8093 	beq.w	8006f3c <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006e16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d046      	beq.n	8006eb0 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e24:	785b      	ldrb	r3, [r3, #1]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d126      	bne.n	8006e78 <PCD_EP_ISR_Handler+0x5f0>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	4413      	add	r3, r2
 8006e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	00da      	lsls	r2, r3, #3
 8006e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e50:	623b      	str	r3, [r7, #32]
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	801a      	strh	r2, [r3, #0]
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	801a      	strh	r2, [r3, #0]
 8006e76:	e061      	b.n	8006f3c <PCD_EP_ISR_Handler+0x6b4>
 8006e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d15d      	bne.n	8006f3c <PCD_EP_ISR_Handler+0x6b4>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	461a      	mov	r2, r3
 8006e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e94:	4413      	add	r3, r2
 8006e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	00da      	lsls	r2, r3, #3
 8006e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eaa:	2200      	movs	r2, #0
 8006eac:	801a      	strh	r2, [r3, #0]
 8006eae:	e045      	b.n	8006f3c <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eb8:	785b      	ldrb	r3, [r3, #1]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d126      	bne.n	8006f0c <PCD_EP_ISR_Handler+0x684>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed2:	4413      	add	r3, r2
 8006ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	00da      	lsls	r2, r3, #3
 8006edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ede:	4413      	add	r3, r2
 8006ee0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ee4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef4:	801a      	strh	r2, [r3, #0]
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	801a      	strh	r2, [r3, #0]
 8006f0a:	e017      	b.n	8006f3c <PCD_EP_ISR_Handler+0x6b4>
 8006f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f0e:	785b      	ldrb	r3, [r3, #1]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d113      	bne.n	8006f3c <PCD_EP_ISR_Handler+0x6b4>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	461a      	mov	r2, r3
 8006f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f22:	4413      	add	r3, r2
 8006f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	00da      	lsls	r2, r3, #3
 8006f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2e:	4413      	add	r3, r2
 8006f30:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f38:	2200      	movs	r2, #0
 8006f3a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f009 f967 	bl	8010216 <HAL_PCD_DataInStageCallback>
 8006f48:	e051      	b.n	8006fee <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006f4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d144      	bne.n	8006fe0 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	4413      	add	r3, r2
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6812      	ldr	r2, [r2, #0]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f7a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8006f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f80:	699a      	ldr	r2, [r3, #24]
 8006f82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d907      	bls.n	8006f9a <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8006f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006f92:	1ad2      	subs	r2, r2, r3
 8006f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f96:	619a      	str	r2, [r3, #24]
 8006f98:	e002      	b.n	8006fa0 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8006f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d106      	bne.n	8006fb6 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f009 f931 	bl	8010216 <HAL_PCD_DataInStageCallback>
 8006fb4:	e01b      	b.n	8006fee <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fb8:	695a      	ldr	r2, [r3, #20]
 8006fba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006fbe:	441a      	add	r2, r3
 8006fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fc2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fc6:	69da      	ldr	r2, [r3, #28]
 8006fc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006fcc:	441a      	add	r2, r3
 8006fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fd0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f005 fd46 	bl	800ca6a <USB_EPStartXfer>
 8006fde:	e006      	b.n	8006fee <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006fe0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f917 	bl	800721c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	b21b      	sxth	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f6ff ac49 	blt.w	8006892 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3758      	adds	r7, #88	@ 0x58
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b088      	sub	sp, #32
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	4613      	mov	r3, r2
 8007016:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007018:	88fb      	ldrh	r3, [r7, #6]
 800701a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d07c      	beq.n	800711c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800702a:	b29b      	uxth	r3, r3
 800702c:	461a      	mov	r2, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	4413      	add	r3, r2
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	6812      	ldr	r2, [r2, #0]
 800703a:	4413      	add	r3, r2
 800703c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007046:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	699a      	ldr	r2, [r3, #24]
 800704c:	8b7b      	ldrh	r3, [r7, #26]
 800704e:	429a      	cmp	r2, r3
 8007050:	d306      	bcc.n	8007060 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	699a      	ldr	r2, [r3, #24]
 8007056:	8b7b      	ldrh	r3, [r7, #26]
 8007058:	1ad2      	subs	r2, r2, r3
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	619a      	str	r2, [r3, #24]
 800705e:	e002      	b.n	8007066 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2200      	movs	r2, #0
 8007064:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d123      	bne.n	80070b6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	b29b      	uxth	r3, r3
 8007080:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007088:	833b      	strh	r3, [r7, #24]
 800708a:	8b3b      	ldrh	r3, [r7, #24]
 800708c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007090:	833b      	strh	r3, [r7, #24]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	441a      	add	r2, r3
 80070a0:	8b3b      	ldrh	r3, [r7, #24]
 80070a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80070b6:	88fb      	ldrh	r3, [r7, #6]
 80070b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01f      	beq.n	8007100 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070da:	82fb      	strh	r3, [r7, #22]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	461a      	mov	r2, r3
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	441a      	add	r2, r3
 80070ea:	8afb      	ldrh	r3, [r7, #22]
 80070ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007100:	8b7b      	ldrh	r3, [r7, #26]
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 8085 	beq.w	8007212 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6818      	ldr	r0, [r3, #0]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	6959      	ldr	r1, [r3, #20]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	891a      	ldrh	r2, [r3, #8]
 8007114:	8b7b      	ldrh	r3, [r7, #26]
 8007116:	f007 f9d5 	bl	800e4c4 <USB_ReadPMA>
 800711a:	e07a      	b.n	8007212 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007124:	b29b      	uxth	r3, r3
 8007126:	461a      	mov	r2, r3
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	4413      	add	r3, r2
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	6812      	ldr	r2, [r2, #0]
 8007134:	4413      	add	r3, r2
 8007136:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007140:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	8b7b      	ldrh	r3, [r7, #26]
 8007148:	429a      	cmp	r2, r3
 800714a:	d306      	bcc.n	800715a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	699a      	ldr	r2, [r3, #24]
 8007150:	8b7b      	ldrh	r3, [r7, #26]
 8007152:	1ad2      	subs	r2, r2, r3
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	619a      	str	r2, [r3, #24]
 8007158:	e002      	b.n	8007160 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2200      	movs	r2, #0
 800715e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d123      	bne.n	80071b0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800717e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007182:	83fb      	strh	r3, [r7, #30]
 8007184:	8bfb      	ldrh	r3, [r7, #30]
 8007186:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800718a:	83fb      	strh	r3, [r7, #30]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	441a      	add	r2, r3
 800719a:	8bfb      	ldrh	r3, [r7, #30]
 800719c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d11f      	bne.n	80071fa <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071d4:	83bb      	strh	r3, [r7, #28]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	441a      	add	r2, r3
 80071e4:	8bbb      	ldrh	r3, [r7, #28]
 80071e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80071fa:	8b7b      	ldrh	r3, [r7, #26]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d008      	beq.n	8007212 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6818      	ldr	r0, [r3, #0]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	6959      	ldr	r1, [r3, #20]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	895a      	ldrh	r2, [r3, #10]
 800720c:	8b7b      	ldrh	r3, [r7, #26]
 800720e:	f007 f959 	bl	800e4c4 <USB_ReadPMA>
    }
  }

  return count;
 8007212:	8b7b      	ldrh	r3, [r7, #26]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3720      	adds	r7, #32
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b0a4      	sub	sp, #144	@ 0x90
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	4613      	mov	r3, r2
 8007228:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800722a:	88fb      	ldrh	r3, [r7, #6]
 800722c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 81db 	beq.w	80075ec <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800723e:	b29b      	uxth	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	4413      	add	r3, r2
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	6812      	ldr	r2, [r2, #0]
 800724e:	4413      	add	r3, r2
 8007250:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800725a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	699a      	ldr	r2, [r3, #24]
 8007262:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007266:	429a      	cmp	r2, r3
 8007268:	d907      	bls.n	800727a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	699a      	ldr	r2, [r3, #24]
 800726e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007272:	1ad2      	subs	r2, r2, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	619a      	str	r2, [r3, #24]
 8007278:	e002      	b.n	8007280 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2200      	movs	r2, #0
 800727e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	2b00      	cmp	r3, #0
 8007286:	f040 80b9 	bne.w	80073fc <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d126      	bne.n	80072e0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	461a      	mov	r2, r3
 80072a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a6:	4413      	add	r3, r2
 80072a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	00da      	lsls	r2, r3, #3
 80072b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b2:	4413      	add	r3, r2
 80072b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80072b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c8:	801a      	strh	r2, [r3, #0]
 80072ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d8:	b29a      	uxth	r2, r3
 80072da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072dc:	801a      	strh	r2, [r3, #0]
 80072de:	e01a      	b.n	8007316 <HAL_PCD_EP_DB_Transmit+0xfa>
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	785b      	ldrb	r3, [r3, #1]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d116      	bne.n	8007316 <HAL_PCD_EP_DB_Transmit+0xfa>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fc:	4413      	add	r3, r2
 80072fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	00da      	lsls	r2, r3, #3
 8007306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007308:	4413      	add	r3, r2
 800730a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800730e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007312:	2200      	movs	r2, #0
 8007314:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	627b      	str	r3, [r7, #36]	@ 0x24
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d126      	bne.n	8007372 <HAL_PCD_EP_DB_Transmit+0x156>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	61fb      	str	r3, [r7, #28]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007332:	b29b      	uxth	r3, r3
 8007334:	461a      	mov	r2, r3
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	4413      	add	r3, r2
 800733a:	61fb      	str	r3, [r7, #28]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	00da      	lsls	r2, r3, #3
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	4413      	add	r3, r2
 8007346:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800734a:	61bb      	str	r3, [r7, #24]
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007356:	b29a      	uxth	r2, r3
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	801a      	strh	r2, [r3, #0]
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	881b      	ldrh	r3, [r3, #0]
 8007360:	b29b      	uxth	r3, r3
 8007362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800736a:	b29a      	uxth	r2, r3
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	801a      	strh	r2, [r3, #0]
 8007370:	e017      	b.n	80073a2 <HAL_PCD_EP_DB_Transmit+0x186>
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	785b      	ldrb	r3, [r3, #1]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d113      	bne.n	80073a2 <HAL_PCD_EP_DB_Transmit+0x186>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007382:	b29b      	uxth	r3, r3
 8007384:	461a      	mov	r2, r3
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	4413      	add	r3, r2
 800738a:	627b      	str	r3, [r7, #36]	@ 0x24
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	00da      	lsls	r2, r3, #3
 8007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007394:	4413      	add	r3, r2
 8007396:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800739a:	623b      	str	r3, [r7, #32]
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	2200      	movs	r2, #0
 80073a0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	4619      	mov	r1, r3
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f008 ff34 	bl	8010216 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80073ae:	88fb      	ldrh	r3, [r7, #6]
 80073b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 82fa 	beq.w	80079ae <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073d4:	82fb      	strh	r3, [r7, #22]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	441a      	add	r2, r3
 80073e4:	8afb      	ldrh	r3, [r7, #22]
 80073e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	8013      	strh	r3, [r2, #0]
 80073fa:	e2d8      	b.n	80079ae <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80073fc:	88fb      	ldrh	r3, [r7, #6]
 80073fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d021      	beq.n	800744a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800741c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007420:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	441a      	add	r2, r3
 8007432:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007436:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800743a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800743e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007446:	b29b      	uxth	r3, r3
 8007448:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007450:	2b01      	cmp	r3, #1
 8007452:	f040 82ac 	bne.w	80079ae <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	695a      	ldr	r2, [r3, #20]
 800745a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800745e:	441a      	add	r2, r3
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	69da      	ldr	r2, [r3, #28]
 8007468:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800746c:	441a      	add	r2, r3
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	6a1a      	ldr	r2, [r3, #32]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	429a      	cmp	r2, r3
 800747c:	d30b      	bcc.n	8007496 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	6a1a      	ldr	r2, [r3, #32]
 800748a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800748e:	1ad2      	subs	r2, r2, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	621a      	str	r2, [r3, #32]
 8007494:	e017      	b.n	80074c6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d108      	bne.n	80074b0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800749e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80074a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80074ae:	e00a      	b.n	80074c6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2200      	movs	r2, #0
 80074c4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	785b      	ldrb	r3, [r3, #1]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d165      	bne.n	800759a <HAL_PCD_EP_DB_Transmit+0x37e>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074dc:	b29b      	uxth	r3, r3
 80074de:	461a      	mov	r2, r3
 80074e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074e2:	4413      	add	r3, r2
 80074e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	00da      	lsls	r2, r3, #3
 80074ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ee:	4413      	add	r3, r2
 80074f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007500:	b29a      	uxth	r2, r3
 8007502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007504:	801a      	strh	r2, [r3, #0]
 8007506:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800750a:	2b3e      	cmp	r3, #62	@ 0x3e
 800750c:	d91d      	bls.n	800754a <HAL_PCD_EP_DB_Transmit+0x32e>
 800750e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007512:	095b      	lsrs	r3, r3, #5
 8007514:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007516:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800751a:	f003 031f 	and.w	r3, r3, #31
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <HAL_PCD_EP_DB_Transmit+0x30c>
 8007522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007524:	3b01      	subs	r3, #1
 8007526:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	b29a      	uxth	r2, r3
 800752e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007530:	b29b      	uxth	r3, r3
 8007532:	029b      	lsls	r3, r3, #10
 8007534:	b29b      	uxth	r3, r3
 8007536:	4313      	orrs	r3, r2
 8007538:	b29b      	uxth	r3, r3
 800753a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007542:	b29a      	uxth	r2, r3
 8007544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007546:	801a      	strh	r2, [r3, #0]
 8007548:	e044      	b.n	80075d4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800754a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <HAL_PCD_EP_DB_Transmit+0x34c>
 8007552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800755c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007560:	b29a      	uxth	r2, r3
 8007562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007564:	801a      	strh	r2, [r3, #0]
 8007566:	e035      	b.n	80075d4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007568:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800756c:	085b      	lsrs	r3, r3, #1
 800756e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007570:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <HAL_PCD_EP_DB_Transmit+0x366>
 800757c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800757e:	3301      	adds	r3, #1
 8007580:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	b29a      	uxth	r2, r3
 8007588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800758a:	b29b      	uxth	r3, r3
 800758c:	029b      	lsls	r3, r3, #10
 800758e:	b29b      	uxth	r3, r3
 8007590:	4313      	orrs	r3, r2
 8007592:	b29a      	uxth	r2, r3
 8007594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007596:	801a      	strh	r2, [r3, #0]
 8007598:	e01c      	b.n	80075d4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	785b      	ldrb	r3, [r3, #1]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d118      	bne.n	80075d4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	461a      	mov	r2, r3
 80075b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075b6:	4413      	add	r3, r2
 80075b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	00da      	lsls	r2, r3, #3
 80075c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075c2:	4413      	add	r3, r2
 80075c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80075c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80075ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075d2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	6959      	ldr	r1, [r3, #20]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	891a      	ldrh	r2, [r3, #8]
 80075e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	f006 ff2b 	bl	800e440 <USB_WritePMA>
 80075ea:	e1e0      	b.n	80079ae <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	461a      	mov	r2, r3
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	00db      	lsls	r3, r3, #3
 80075fe:	4413      	add	r3, r2
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	6812      	ldr	r2, [r2, #0]
 8007604:	4413      	add	r3, r2
 8007606:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007610:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	699a      	ldr	r2, [r3, #24]
 8007618:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800761c:	429a      	cmp	r2, r3
 800761e:	d307      	bcc.n	8007630 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	699a      	ldr	r2, [r3, #24]
 8007624:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007628:	1ad2      	subs	r2, r2, r3
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	619a      	str	r2, [r3, #24]
 800762e:	e002      	b.n	8007636 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2200      	movs	r2, #0
 8007634:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	2b00      	cmp	r3, #0
 800763c:	f040 80c0 	bne.w	80077c0 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	785b      	ldrb	r3, [r3, #1]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d126      	bne.n	8007696 <HAL_PCD_EP_DB_Transmit+0x47a>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007656:	b29b      	uxth	r3, r3
 8007658:	461a      	mov	r2, r3
 800765a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800765c:	4413      	add	r3, r2
 800765e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	00da      	lsls	r2, r3, #3
 8007666:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007668:	4413      	add	r3, r2
 800766a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800766e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007670:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007672:	881b      	ldrh	r3, [r3, #0]
 8007674:	b29b      	uxth	r3, r3
 8007676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800767a:	b29a      	uxth	r2, r3
 800767c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800767e:	801a      	strh	r2, [r3, #0]
 8007680:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800768a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800768e:	b29a      	uxth	r2, r3
 8007690:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007692:	801a      	strh	r2, [r3, #0]
 8007694:	e01a      	b.n	80076cc <HAL_PCD_EP_DB_Transmit+0x4b0>
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	785b      	ldrb	r3, [r3, #1]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d116      	bne.n	80076cc <HAL_PCD_EP_DB_Transmit+0x4b0>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	461a      	mov	r2, r3
 80076b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076b2:	4413      	add	r3, r2
 80076b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	00da      	lsls	r2, r3, #3
 80076bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076be:	4413      	add	r3, r2
 80076c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80076c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076c8:	2200      	movs	r2, #0
 80076ca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	785b      	ldrb	r3, [r3, #1]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d12b      	bne.n	8007732 <HAL_PCD_EP_DB_Transmit+0x516>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	461a      	mov	r2, r3
 80076ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076ee:	4413      	add	r3, r2
 80076f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	00da      	lsls	r2, r3, #3
 80076f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076fa:	4413      	add	r3, r2
 80076fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007700:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007704:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	b29b      	uxth	r3, r3
 800770c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007710:	b29a      	uxth	r2, r3
 8007712:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007716:	801a      	strh	r2, [r3, #0]
 8007718:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	b29b      	uxth	r3, r3
 8007720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007728:	b29a      	uxth	r2, r3
 800772a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800772e:	801a      	strh	r2, [r3, #0]
 8007730:	e017      	b.n	8007762 <HAL_PCD_EP_DB_Transmit+0x546>
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	785b      	ldrb	r3, [r3, #1]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d113      	bne.n	8007762 <HAL_PCD_EP_DB_Transmit+0x546>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007742:	b29b      	uxth	r3, r3
 8007744:	461a      	mov	r2, r3
 8007746:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007748:	4413      	add	r3, r2
 800774a:	677b      	str	r3, [r7, #116]	@ 0x74
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	00da      	lsls	r2, r3, #3
 8007752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007754:	4413      	add	r3, r2
 8007756:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800775a:	673b      	str	r3, [r7, #112]	@ 0x70
 800775c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800775e:	2200      	movs	r2, #0
 8007760:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	4619      	mov	r1, r3
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f008 fd54 	bl	8010216 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800776e:	88fb      	ldrh	r3, [r7, #6]
 8007770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007774:	2b00      	cmp	r3, #0
 8007776:	f040 811a 	bne.w	80079ae <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007794:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	461a      	mov	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	441a      	add	r2, r3
 80077a6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80077aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	8013      	strh	r3, [r2, #0]
 80077be:	e0f6      	b.n	80079ae <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80077c0:	88fb      	ldrh	r3, [r7, #6]
 80077c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d121      	bne.n	800780e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	441a      	add	r2, r3
 80077f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80077fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007802:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800780a:	b29b      	uxth	r3, r3
 800780c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007814:	2b01      	cmp	r3, #1
 8007816:	f040 80ca 	bne.w	80079ae <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	695a      	ldr	r2, [r3, #20]
 800781e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007822:	441a      	add	r2, r3
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	69da      	ldr	r2, [r3, #28]
 800782c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007830:	441a      	add	r2, r3
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	6a1a      	ldr	r2, [r3, #32]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	429a      	cmp	r2, r3
 8007840:	d30b      	bcc.n	800785a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	6a1a      	ldr	r2, [r3, #32]
 800784e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007852:	1ad2      	subs	r2, r2, r3
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	621a      	str	r2, [r3, #32]
 8007858:	e017      	b.n	800788a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d108      	bne.n	8007874 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8007862:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007866:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007872:	e00a      	b.n	800788a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2200      	movs	r2, #0
 8007880:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	785b      	ldrb	r3, [r3, #1]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d165      	bne.n	8007964 <HAL_PCD_EP_DB_Transmit+0x748>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	461a      	mov	r2, r3
 80078aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078ac:	4413      	add	r3, r2
 80078ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	00da      	lsls	r2, r3, #3
 80078b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078b8:	4413      	add	r3, r2
 80078ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078ce:	801a      	strh	r2, [r3, #0]
 80078d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80078d6:	d91d      	bls.n	8007914 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80078d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078dc:	095b      	lsrs	r3, r3, #5
 80078de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078e4:	f003 031f 	and.w	r3, r3, #31
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80078ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80078ee:	3b01      	subs	r3, #1
 80078f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	029b      	lsls	r3, r3, #10
 80078fe:	b29b      	uxth	r3, r3
 8007900:	4313      	orrs	r3, r2
 8007902:	b29b      	uxth	r3, r3
 8007904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800790c:	b29a      	uxth	r2, r3
 800790e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007910:	801a      	strh	r2, [r3, #0]
 8007912:	e041      	b.n	8007998 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007914:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10a      	bne.n	8007932 <HAL_PCD_EP_DB_Transmit+0x716>
 800791c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	b29b      	uxth	r3, r3
 8007922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800792a:	b29a      	uxth	r2, r3
 800792c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800792e:	801a      	strh	r2, [r3, #0]
 8007930:	e032      	b.n	8007998 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007932:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007936:	085b      	lsrs	r3, r3, #1
 8007938:	66bb      	str	r3, [r7, #104]	@ 0x68
 800793a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <HAL_PCD_EP_DB_Transmit+0x730>
 8007946:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007948:	3301      	adds	r3, #1
 800794a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800794c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800794e:	881b      	ldrh	r3, [r3, #0]
 8007950:	b29a      	uxth	r2, r3
 8007952:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007954:	b29b      	uxth	r3, r3
 8007956:	029b      	lsls	r3, r3, #10
 8007958:	b29b      	uxth	r3, r3
 800795a:	4313      	orrs	r3, r2
 800795c:	b29a      	uxth	r2, r3
 800795e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007960:	801a      	strh	r2, [r3, #0]
 8007962:	e019      	b.n	8007998 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	785b      	ldrb	r3, [r3, #1]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d115      	bne.n	8007998 <HAL_PCD_EP_DB_Transmit+0x77c>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007974:	b29b      	uxth	r3, r3
 8007976:	461a      	mov	r2, r3
 8007978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800797a:	4413      	add	r3, r2
 800797c:	657b      	str	r3, [r7, #84]	@ 0x54
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	00da      	lsls	r2, r3, #3
 8007984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007986:	4413      	add	r3, r2
 8007988:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800798c:	653b      	str	r3, [r7, #80]	@ 0x50
 800798e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007992:	b29a      	uxth	r2, r3
 8007994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007996:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6818      	ldr	r0, [r3, #0]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	6959      	ldr	r1, [r3, #20]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	895a      	ldrh	r2, [r3, #10]
 80079a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	f006 fd49 	bl	800e440 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079c8:	82bb      	strh	r3, [r7, #20]
 80079ca:	8abb      	ldrh	r3, [r7, #20]
 80079cc:	f083 0310 	eor.w	r3, r3, #16
 80079d0:	82bb      	strh	r3, [r7, #20]
 80079d2:	8abb      	ldrh	r3, [r7, #20]
 80079d4:	f083 0320 	eor.w	r3, r3, #32
 80079d8:	82bb      	strh	r3, [r7, #20]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	441a      	add	r2, r3
 80079e8:	8abb      	ldrh	r3, [r7, #20]
 80079ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3790      	adds	r7, #144	@ 0x90
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	607b      	str	r3, [r7, #4]
 8007a12:	460b      	mov	r3, r1
 8007a14:	817b      	strh	r3, [r7, #10]
 8007a16:	4613      	mov	r3, r2
 8007a18:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007a1a:	897b      	ldrh	r3, [r7, #10]
 8007a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00b      	beq.n	8007a3e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a26:	897b      	ldrh	r3, [r7, #10]
 8007a28:	f003 0207 	and.w	r2, r3, #7
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	3310      	adds	r3, #16
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	4413      	add	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]
 8007a3c:	e009      	b.n	8007a52 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007a3e:	897a      	ldrh	r2, [r7, #10]
 8007a40:	4613      	mov	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4413      	add	r3, r2
 8007a46:	00db      	lsls	r3, r3, #3
 8007a48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007a52:	893b      	ldrh	r3, [r7, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d107      	bne.n	8007a68 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	80da      	strh	r2, [r3, #6]
 8007a66:	e00b      	b.n	8007a80 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	0c1b      	lsrs	r3, r3, #16
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	371c      	adds	r7, #28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b085      	sub	sp, #20
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f043 0301 	orr.w	r3, r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	f043 0302 	orr.w	r3, r3, #2
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
	...

08007ae4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00b      	beq.n	8007b0a <HAL_PWREx_ControlVoltageScaling+0x26>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007af8:	d007      	beq.n	8007b0a <HAL_PWREx_ControlVoltageScaling+0x26>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b00:	d003      	beq.n	8007b0a <HAL_PWREx_ControlVoltageScaling+0x26>
 8007b02:	219d      	movs	r1, #157	@ 0x9d
 8007b04:	484d      	ldr	r0, [pc, #308]	@ (8007c3c <HAL_PWREx_ControlVoltageScaling+0x158>)
 8007b06:	f7f9 fc87 	bl	8001418 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d141      	bne.n	8007b94 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007b10:	4b4b      	ldr	r3, [pc, #300]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b1c:	d131      	bne.n	8007b82 <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b1e:	4b48      	ldr	r3, [pc, #288]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b24:	4a46      	ldr	r2, [pc, #280]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007b26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b2a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b2e:	4b44      	ldr	r3, [pc, #272]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b36:	4a42      	ldr	r2, [pc, #264]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007b38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b3e:	4b41      	ldr	r3, [pc, #260]	@ (8007c44 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2232      	movs	r2, #50	@ 0x32
 8007b44:	fb02 f303 	mul.w	r3, r2, r3
 8007b48:	4a3f      	ldr	r2, [pc, #252]	@ (8007c48 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8007b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4e:	0c9b      	lsrs	r3, r3, #18
 8007b50:	3301      	adds	r3, #1
 8007b52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b54:	e002      	b.n	8007b5c <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b5c:	4b38      	ldr	r3, [pc, #224]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b68:	d102      	bne.n	8007b70 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1f2      	bne.n	8007b56 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b70:	4b33      	ldr	r3, [pc, #204]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b7c:	d158      	bne.n	8007c30 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e057      	b.n	8007c32 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b82:	4b2f      	ldr	r3, [pc, #188]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b88:	4a2d      	ldr	r2, [pc, #180]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007b8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b8e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007b92:	e04d      	b.n	8007c30 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b9a:	d141      	bne.n	8007c20 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007b9c:	4b28      	ldr	r3, [pc, #160]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ba8:	d131      	bne.n	8007c0e <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007baa:	4b25      	ldr	r3, [pc, #148]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bb0:	4a23      	ldr	r2, [pc, #140]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bb6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007bba:	4b21      	ldr	r3, [pc, #132]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007bc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007bc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007bca:	4b1e      	ldr	r3, [pc, #120]	@ (8007c44 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2232      	movs	r2, #50	@ 0x32
 8007bd0:	fb02 f303 	mul.w	r3, r2, r3
 8007bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8007c48 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8007bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bda:	0c9b      	lsrs	r3, r3, #18
 8007bdc:	3301      	adds	r3, #1
 8007bde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007be0:	e002      	b.n	8007be8 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3b01      	subs	r3, #1
 8007be6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007be8:	4b15      	ldr	r3, [pc, #84]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bf4:	d102      	bne.n	8007bfc <HAL_PWREx_ControlVoltageScaling+0x118>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1f2      	bne.n	8007be2 <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007bfc:	4b10      	ldr	r3, [pc, #64]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c08:	d112      	bne.n	8007c30 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e011      	b.n	8007c32 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c14:	4a0a      	ldr	r2, [pc, #40]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c1a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007c1e:	e007      	b.n	8007c30 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007c20:	4b07      	ldr	r3, [pc, #28]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c28:	4a05      	ldr	r2, [pc, #20]	@ (8007c40 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8007c2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007c2e:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	08010a6c 	.word	0x08010a6c
 8007c40:	40007000 	.word	0x40007000
 8007c44:	20000000 	.word	0x20000000
 8007c48:	431bde83 	.word	0x431bde83

08007c4c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007c50:	4b05      	ldr	r3, [pc, #20]	@ (8007c68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	4a04      	ldr	r2, [pc, #16]	@ (8007c68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007c56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c5a:	6093      	str	r3, [r2, #8]
}
 8007c5c:	bf00      	nop
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	40007000 	.word	0x40007000

08007c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b088      	sub	sp, #32
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e3fc      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d022      	beq.n	8007ccc <HAL_RCC_OscConfig+0x60>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d11c      	bne.n	8007ccc <HAL_RCC_OscConfig+0x60>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d116      	bne.n	8007ccc <HAL_RCC_OscConfig+0x60>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0320 	and.w	r3, r3, #32
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d110      	bne.n	8007ccc <HAL_RCC_OscConfig+0x60>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0308 	and.w	r3, r3, #8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10a      	bne.n	8007ccc <HAL_RCC_OscConfig+0x60>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0304 	and.w	r3, r3, #4
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d104      	bne.n	8007ccc <HAL_RCC_OscConfig+0x60>
 8007cc2:	f240 1145 	movw	r1, #325	@ 0x145
 8007cc6:	4893      	ldr	r0, [pc, #588]	@ (8007f14 <HAL_RCC_OscConfig+0x2a8>)
 8007cc8:	f7f9 fba6 	bl	8001418 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 8089 	beq.w	8007dec <HAL_RCC_OscConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00e      	beq.n	8007d00 <HAL_RCC_OscConfig+0x94>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cea:	d009      	beq.n	8007d00 <HAL_RCC_OscConfig+0x94>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007cf4:	d004      	beq.n	8007d00 <HAL_RCC_OscConfig+0x94>
 8007cf6:	f240 114b 	movw	r1, #331	@ 0x14b
 8007cfa:	4886      	ldr	r0, [pc, #536]	@ (8007f14 <HAL_RCC_OscConfig+0x2a8>)
 8007cfc:	f7f9 fb8c 	bl	8001418 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d00:	4b85      	ldr	r3, [pc, #532]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f003 030c 	and.w	r3, r3, #12
 8007d08:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d0a:	4b83      	ldr	r3, [pc, #524]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	f003 0303 	and.w	r3, r3, #3
 8007d12:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	2b0c      	cmp	r3, #12
 8007d18:	d102      	bne.n	8007d20 <HAL_RCC_OscConfig+0xb4>
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d002      	beq.n	8007d26 <HAL_RCC_OscConfig+0xba>
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	2b08      	cmp	r3, #8
 8007d24:	d10b      	bne.n	8007d3e <HAL_RCC_OscConfig+0xd2>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d26:	4b7c      	ldr	r3, [pc, #496]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d05b      	beq.n	8007dea <HAL_RCC_OscConfig+0x17e>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d157      	bne.n	8007dea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e39c      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d46:	d106      	bne.n	8007d56 <HAL_RCC_OscConfig+0xea>
 8007d48:	4b73      	ldr	r3, [pc, #460]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a72      	ldr	r2, [pc, #456]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d52:	6013      	str	r3, [r2, #0]
 8007d54:	e01d      	b.n	8007d92 <HAL_RCC_OscConfig+0x126>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d5e:	d10c      	bne.n	8007d7a <HAL_RCC_OscConfig+0x10e>
 8007d60:	4b6d      	ldr	r3, [pc, #436]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a6c      	ldr	r2, [pc, #432]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007d66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	4b6a      	ldr	r3, [pc, #424]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a69      	ldr	r2, [pc, #420]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007d72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	e00b      	b.n	8007d92 <HAL_RCC_OscConfig+0x126>
 8007d7a:	4b67      	ldr	r3, [pc, #412]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a66      	ldr	r2, [pc, #408]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007d80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	4b64      	ldr	r3, [pc, #400]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a63      	ldr	r2, [pc, #396]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007d8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d013      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d9a:	f7f9 fdab 	bl	80018f4 <HAL_GetTick>
 8007d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007da0:	e008      	b.n	8007db4 <HAL_RCC_OscConfig+0x148>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007da2:	f7f9 fda7 	bl	80018f4 <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	2b64      	cmp	r3, #100	@ 0x64
 8007dae:	d901      	bls.n	8007db4 <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e361      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007db4:	4b58      	ldr	r3, [pc, #352]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d0f0      	beq.n	8007da2 <HAL_RCC_OscConfig+0x136>
 8007dc0:	e014      	b.n	8007dec <HAL_RCC_OscConfig+0x180>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc2:	f7f9 fd97 	bl	80018f4 <HAL_GetTick>
 8007dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007dc8:	e008      	b.n	8007ddc <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dca:	f7f9 fd93 	bl	80018f4 <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	2b64      	cmp	r3, #100	@ 0x64
 8007dd6:	d901      	bls.n	8007ddc <HAL_RCC_OscConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e34d      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ddc:	4b4e      	ldr	r3, [pc, #312]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1f0      	bne.n	8007dca <HAL_RCC_OscConfig+0x15e>
 8007de8:	e000      	b.n	8007dec <HAL_RCC_OscConfig+0x180>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 8094 	beq.w	8007f22 <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d009      	beq.n	8007e16 <HAL_RCC_OscConfig+0x1aa>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e0a:	d004      	beq.n	8007e16 <HAL_RCC_OscConfig+0x1aa>
 8007e0c:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8007e10:	4840      	ldr	r0, [pc, #256]	@ (8007f14 <HAL_RCC_OscConfig+0x2a8>)
 8007e12:	f7f9 fb01 	bl	8001418 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e1c:	d904      	bls.n	8007e28 <HAL_RCC_OscConfig+0x1bc>
 8007e1e:	f240 1181 	movw	r1, #385	@ 0x181
 8007e22:	483c      	ldr	r0, [pc, #240]	@ (8007f14 <HAL_RCC_OscConfig+0x2a8>)
 8007e24:	f7f9 faf8 	bl	8001418 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e28:	4b3b      	ldr	r3, [pc, #236]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f003 030c 	and.w	r3, r3, #12
 8007e30:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e32:	4b39      	ldr	r3, [pc, #228]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	2b0c      	cmp	r3, #12
 8007e40:	d102      	bne.n	8007e48 <HAL_RCC_OscConfig+0x1dc>
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d002      	beq.n	8007e4e <HAL_RCC_OscConfig+0x1e2>
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	d11f      	bne.n	8007e8e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e4e:	4b32      	ldr	r3, [pc, #200]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d005      	beq.n	8007e66 <HAL_RCC_OscConfig+0x1fa>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_RCC_OscConfig+0x1fa>
      {
        return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e308      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e66:	4b2c      	ldr	r3, [pc, #176]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	061b      	lsls	r3, r3, #24
 8007e74:	4928      	ldr	r1, [pc, #160]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007e7a:	4b28      	ldr	r3, [pc, #160]	@ (8007f1c <HAL_RCC_OscConfig+0x2b0>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7f9 fcec 	bl	800185c <HAL_InitTick>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d04a      	beq.n	8007f20 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e2f4      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d023      	beq.n	8007ede <HAL_RCC_OscConfig+0x272>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e96:	4b20      	ldr	r3, [pc, #128]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea2:	f7f9 fd27 	bl	80018f4 <HAL_GetTick>
 8007ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ea8:	e008      	b.n	8007ebc <HAL_RCC_OscConfig+0x250>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007eaa:	f7f9 fd23 	bl	80018f4 <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d901      	bls.n	8007ebc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e2dd      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ebc:	4b16      	ldr	r3, [pc, #88]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0f0      	beq.n	8007eaa <HAL_RCC_OscConfig+0x23e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ec8:	4b13      	ldr	r3, [pc, #76]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	061b      	lsls	r3, r3, #24
 8007ed6:	4910      	ldr	r1, [pc, #64]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	604b      	str	r3, [r1, #4]
 8007edc:	e021      	b.n	8007f22 <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ede:	4b0e      	ldr	r3, [pc, #56]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eea:	f7f9 fd03 	bl	80018f4 <HAL_GetTick>
 8007eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ef0:	e008      	b.n	8007f04 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ef2:	f7f9 fcff 	bl	80018f4 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d901      	bls.n	8007f04 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e2b9      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f04:	4b04      	ldr	r3, [pc, #16]	@ (8007f18 <HAL_RCC_OscConfig+0x2ac>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1f0      	bne.n	8007ef2 <HAL_RCC_OscConfig+0x286>
 8007f10:	e007      	b.n	8007f22 <HAL_RCC_OscConfig+0x2b6>
 8007f12:	bf00      	nop
 8007f14:	08010ae0 	.word	0x08010ae0
 8007f18:	40021000 	.word	0x40021000
 8007f1c:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0308 	and.w	r3, r3, #8
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d049      	beq.n	8007fc2 <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d008      	beq.n	8007f48 <HAL_RCC_OscConfig+0x2dc>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d004      	beq.n	8007f48 <HAL_RCC_OscConfig+0x2dc>
 8007f3e:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 8007f42:	48a3      	ldr	r0, [pc, #652]	@ (80081d0 <HAL_RCC_OscConfig+0x564>)
 8007f44:	f7f9 fa68 	bl	8001418 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d01c      	beq.n	8007f8a <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f50:	4ba0      	ldr	r3, [pc, #640]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 8007f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f56:	4a9f      	ldr	r2, [pc, #636]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 8007f58:	f043 0301 	orr.w	r3, r3, #1
 8007f5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f60:	f7f9 fcc8 	bl	80018f4 <HAL_GetTick>
 8007f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f66:	e008      	b.n	8007f7a <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f68:	f7f9 fcc4 	bl	80018f4 <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d901      	bls.n	8007f7a <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e27e      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f7a:	4b96      	ldr	r3, [pc, #600]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 8007f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f80:	f003 0302 	and.w	r3, r3, #2
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d0ef      	beq.n	8007f68 <HAL_RCC_OscConfig+0x2fc>
 8007f88:	e01b      	b.n	8007fc2 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f8a:	4b92      	ldr	r3, [pc, #584]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 8007f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f90:	4a90      	ldr	r2, [pc, #576]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 8007f92:	f023 0301 	bic.w	r3, r3, #1
 8007f96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f9a:	f7f9 fcab 	bl	80018f4 <HAL_GetTick>
 8007f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007fa0:	e008      	b.n	8007fb4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fa2:	f7f9 fca7 	bl	80018f4 <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d901      	bls.n	8007fb4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e261      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007fb4:	4b87      	ldr	r3, [pc, #540]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 8007fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1ef      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0304 	and.w	r3, r3, #4
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 80b7 	beq.w	800813e <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00c      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x38a>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d008      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x38a>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2b05      	cmp	r3, #5
 8007fea:	d004      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x38a>
 8007fec:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8007ff0:	4877      	ldr	r0, [pc, #476]	@ (80081d0 <HAL_RCC_OscConfig+0x564>)
 8007ff2:	f7f9 fa11 	bl	8001418 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007ff6:	4b77      	ldr	r3, [pc, #476]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 8007ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <HAL_RCC_OscConfig+0x39a>
 8008002:	2301      	movs	r3, #1
 8008004:	e000      	b.n	8008008 <HAL_RCC_OscConfig+0x39c>
 8008006:	2300      	movs	r3, #0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00d      	beq.n	8008028 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800800c:	4b71      	ldr	r3, [pc, #452]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 800800e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008010:	4a70      	ldr	r2, [pc, #448]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 8008012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008016:	6593      	str	r3, [r2, #88]	@ 0x58
 8008018:	4b6e      	ldr	r3, [pc, #440]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 800801a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800801c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008020:	60fb      	str	r3, [r7, #12]
 8008022:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008024:	2301      	movs	r3, #1
 8008026:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008028:	4b6b      	ldr	r3, [pc, #428]	@ (80081d8 <HAL_RCC_OscConfig+0x56c>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008030:	2b00      	cmp	r3, #0
 8008032:	d118      	bne.n	8008066 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008034:	4b68      	ldr	r3, [pc, #416]	@ (80081d8 <HAL_RCC_OscConfig+0x56c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a67      	ldr	r2, [pc, #412]	@ (80081d8 <HAL_RCC_OscConfig+0x56c>)
 800803a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800803e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008040:	f7f9 fc58 	bl	80018f4 <HAL_GetTick>
 8008044:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008046:	e008      	b.n	800805a <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008048:	f7f9 fc54 	bl	80018f4 <HAL_GetTick>
 800804c:	4602      	mov	r2, r0
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	2b02      	cmp	r3, #2
 8008054:	d901      	bls.n	800805a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e20e      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800805a:	4b5f      	ldr	r3, [pc, #380]	@ (80081d8 <HAL_RCC_OscConfig+0x56c>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008062:	2b00      	cmp	r3, #0
 8008064:	d0f0      	beq.n	8008048 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d108      	bne.n	8008080 <HAL_RCC_OscConfig+0x414>
 800806e:	4b59      	ldr	r3, [pc, #356]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 8008070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008074:	4a57      	ldr	r2, [pc, #348]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 8008076:	f043 0301 	orr.w	r3, r3, #1
 800807a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800807e:	e024      	b.n	80080ca <HAL_RCC_OscConfig+0x45e>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	2b05      	cmp	r3, #5
 8008086:	d110      	bne.n	80080aa <HAL_RCC_OscConfig+0x43e>
 8008088:	4b52      	ldr	r3, [pc, #328]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 800808a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800808e:	4a51      	ldr	r2, [pc, #324]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 8008090:	f043 0304 	orr.w	r3, r3, #4
 8008094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008098:	4b4e      	ldr	r3, [pc, #312]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 800809a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800809e:	4a4d      	ldr	r2, [pc, #308]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 80080a0:	f043 0301 	orr.w	r3, r3, #1
 80080a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80080a8:	e00f      	b.n	80080ca <HAL_RCC_OscConfig+0x45e>
 80080aa:	4b4a      	ldr	r3, [pc, #296]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 80080ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080b0:	4a48      	ldr	r2, [pc, #288]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 80080b2:	f023 0301 	bic.w	r3, r3, #1
 80080b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80080ba:	4b46      	ldr	r3, [pc, #280]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 80080bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080c0:	4a44      	ldr	r2, [pc, #272]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 80080c2:	f023 0304 	bic.w	r3, r3, #4
 80080c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d016      	beq.n	8008100 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080d2:	f7f9 fc0f 	bl	80018f4 <HAL_GetTick>
 80080d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080d8:	e00a      	b.n	80080f0 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080da:	f7f9 fc0b 	bl	80018f4 <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d901      	bls.n	80080f0 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e1c3      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080f0:	4b38      	ldr	r3, [pc, #224]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 80080f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d0ed      	beq.n	80080da <HAL_RCC_OscConfig+0x46e>
 80080fe:	e015      	b.n	800812c <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008100:	f7f9 fbf8 	bl	80018f4 <HAL_GetTick>
 8008104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008106:	e00a      	b.n	800811e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008108:	f7f9 fbf4 	bl	80018f4 <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008116:	4293      	cmp	r3, r2
 8008118:	d901      	bls.n	800811e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e1ac      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800811e:	4b2d      	ldr	r3, [pc, #180]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 8008120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1ed      	bne.n	8008108 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800812c:	7ffb      	ldrb	r3, [r7, #31]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d105      	bne.n	800813e <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008132:	4b28      	ldr	r3, [pc, #160]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 8008134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008136:	4a27      	ldr	r2, [pc, #156]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 8008138:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800813c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0320 	and.w	r3, r3, #32
 8008146:	2b00      	cmp	r3, #0
 8008148:	d04f      	beq.n	80081ea <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d008      	beq.n	8008164 <HAL_RCC_OscConfig+0x4f8>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d004      	beq.n	8008164 <HAL_RCC_OscConfig+0x4f8>
 800815a:	f240 213b 	movw	r1, #571	@ 0x23b
 800815e:	481c      	ldr	r0, [pc, #112]	@ (80081d0 <HAL_RCC_OscConfig+0x564>)
 8008160:	f7f9 f95a 	bl	8001418 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d01c      	beq.n	80081a6 <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800816c:	4b19      	ldr	r3, [pc, #100]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 800816e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008172:	4a18      	ldr	r2, [pc, #96]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 8008174:	f043 0301 	orr.w	r3, r3, #1
 8008178:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800817c:	f7f9 fbba 	bl	80018f4 <HAL_GetTick>
 8008180:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008182:	e008      	b.n	8008196 <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008184:	f7f9 fbb6 	bl	80018f4 <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	2b02      	cmp	r3, #2
 8008190:	d901      	bls.n	8008196 <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e170      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008196:	4b0f      	ldr	r3, [pc, #60]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 8008198:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800819c:	f003 0302 	and.w	r3, r3, #2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0ef      	beq.n	8008184 <HAL_RCC_OscConfig+0x518>
 80081a4:	e021      	b.n	80081ea <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80081a6:	4b0b      	ldr	r3, [pc, #44]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 80081a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081ac:	4a09      	ldr	r2, [pc, #36]	@ (80081d4 <HAL_RCC_OscConfig+0x568>)
 80081ae:	f023 0301 	bic.w	r3, r3, #1
 80081b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081b6:	f7f9 fb9d 	bl	80018f4 <HAL_GetTick>
 80081ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80081bc:	e00e      	b.n	80081dc <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081be:	f7f9 fb99 	bl	80018f4 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d907      	bls.n	80081dc <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e153      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
 80081d0:	08010ae0 	.word	0x08010ae0
 80081d4:	40021000 	.word	0x40021000
 80081d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80081dc:	4b85      	ldr	r3, [pc, #532]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 80081de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081e2:	f003 0302 	and.w	r3, r3, #2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1e9      	bne.n	80081be <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00c      	beq.n	800820c <HAL_RCC_OscConfig+0x5a0>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d008      	beq.n	800820c <HAL_RCC_OscConfig+0x5a0>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d004      	beq.n	800820c <HAL_RCC_OscConfig+0x5a0>
 8008202:	f44f 7119 	mov.w	r1, #612	@ 0x264
 8008206:	487c      	ldr	r0, [pc, #496]	@ (80083f8 <HAL_RCC_OscConfig+0x78c>)
 8008208:	f7f9 f906 	bl	8001418 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 8130 	beq.w	8008476 <HAL_RCC_OscConfig+0x80a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008216:	4b77      	ldr	r3, [pc, #476]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f003 030c 	and.w	r3, r3, #12
 800821e:	2b0c      	cmp	r3, #12
 8008220:	f000 80e2 	beq.w	80083e8 <HAL_RCC_OscConfig+0x77c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	2b02      	cmp	r3, #2
 800822a:	f040 80bd 	bne.w	80083a8 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00c      	beq.n	8008250 <HAL_RCC_OscConfig+0x5e4>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	2b02      	cmp	r3, #2
 800823c:	d008      	beq.n	8008250 <HAL_RCC_OscConfig+0x5e4>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	2b03      	cmp	r3, #3
 8008244:	d004      	beq.n	8008250 <HAL_RCC_OscConfig+0x5e4>
 8008246:	f240 216e 	movw	r1, #622	@ 0x26e
 800824a:	486b      	ldr	r0, [pc, #428]	@ (80083f8 <HAL_RCC_OscConfig+0x78c>)
 800824c:	f7f9 f8e4 	bl	8001418 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008254:	2b00      	cmp	r3, #0
 8008256:	d003      	beq.n	8008260 <HAL_RCC_OscConfig+0x5f4>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825c:	2b10      	cmp	r3, #16
 800825e:	d904      	bls.n	800826a <HAL_RCC_OscConfig+0x5fe>
 8008260:	f240 216f 	movw	r1, #623	@ 0x26f
 8008264:	4864      	ldr	r0, [pc, #400]	@ (80083f8 <HAL_RCC_OscConfig+0x78c>)
 8008266:	f7f9 f8d7 	bl	8001418 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800826e:	2b07      	cmp	r3, #7
 8008270:	d903      	bls.n	800827a <HAL_RCC_OscConfig+0x60e>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008276:	2b7f      	cmp	r3, #127	@ 0x7f
 8008278:	d904      	bls.n	8008284 <HAL_RCC_OscConfig+0x618>
 800827a:	f44f 711c 	mov.w	r1, #624	@ 0x270
 800827e:	485e      	ldr	r0, [pc, #376]	@ (80083f8 <HAL_RCC_OscConfig+0x78c>)
 8008280:	f7f9 f8ca 	bl	8001418 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008288:	2b01      	cmp	r3, #1
 800828a:	d903      	bls.n	8008294 <HAL_RCC_OscConfig+0x628>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008290:	2b1f      	cmp	r3, #31
 8008292:	d904      	bls.n	800829e <HAL_RCC_OscConfig+0x632>
 8008294:	f240 2171 	movw	r1, #625	@ 0x271
 8008298:	4857      	ldr	r0, [pc, #348]	@ (80083f8 <HAL_RCC_OscConfig+0x78c>)
 800829a:	f7f9 f8bd 	bl	8001418 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d010      	beq.n	80082c8 <HAL_RCC_OscConfig+0x65c>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	d00c      	beq.n	80082c8 <HAL_RCC_OscConfig+0x65c>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082b2:	2b06      	cmp	r3, #6
 80082b4:	d008      	beq.n	80082c8 <HAL_RCC_OscConfig+0x65c>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ba:	2b08      	cmp	r3, #8
 80082bc:	d004      	beq.n	80082c8 <HAL_RCC_OscConfig+0x65c>
 80082be:	f240 2172 	movw	r1, #626	@ 0x272
 80082c2:	484d      	ldr	r0, [pc, #308]	@ (80083f8 <HAL_RCC_OscConfig+0x78c>)
 80082c4:	f7f9 f8a8 	bl	8001418 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d010      	beq.n	80082f2 <HAL_RCC_OscConfig+0x686>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	d00c      	beq.n	80082f2 <HAL_RCC_OscConfig+0x686>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082dc:	2b06      	cmp	r3, #6
 80082de:	d008      	beq.n	80082f2 <HAL_RCC_OscConfig+0x686>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	d004      	beq.n	80082f2 <HAL_RCC_OscConfig+0x686>
 80082e8:	f240 2173 	movw	r1, #627	@ 0x273
 80082ec:	4842      	ldr	r0, [pc, #264]	@ (80083f8 <HAL_RCC_OscConfig+0x78c>)
 80082ee:	f7f9 f893 	bl	8001418 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082f2:	4b40      	ldr	r3, [pc, #256]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a3f      	ldr	r2, [pc, #252]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 80082f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082fe:	f7f9 faf9 	bl	80018f4 <HAL_GetTick>
 8008302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008304:	e008      	b.n	8008318 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008306:	f7f9 faf5 	bl	80018f4 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d901      	bls.n	8008318 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e0af      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008318:	4b36      	ldr	r3, [pc, #216]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1f0      	bne.n	8008306 <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008324:	4b33      	ldr	r3, [pc, #204]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 8008326:	68da      	ldr	r2, [r3, #12]
 8008328:	4b34      	ldr	r3, [pc, #208]	@ (80083fc <HAL_RCC_OscConfig+0x790>)
 800832a:	4013      	ands	r3, r2
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6a11      	ldr	r1, [r2, #32]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008334:	3a01      	subs	r2, #1
 8008336:	0112      	lsls	r2, r2, #4
 8008338:	4311      	orrs	r1, r2
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800833e:	0212      	lsls	r2, r2, #8
 8008340:	4311      	orrs	r1, r2
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008346:	0852      	lsrs	r2, r2, #1
 8008348:	3a01      	subs	r2, #1
 800834a:	0552      	lsls	r2, r2, #21
 800834c:	4311      	orrs	r1, r2
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008352:	0852      	lsrs	r2, r2, #1
 8008354:	3a01      	subs	r2, #1
 8008356:	0652      	lsls	r2, r2, #25
 8008358:	4311      	orrs	r1, r2
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800835e:	06d2      	lsls	r2, r2, #27
 8008360:	430a      	orrs	r2, r1
 8008362:	4924      	ldr	r1, [pc, #144]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 8008364:	4313      	orrs	r3, r2
 8008366:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008368:	4b22      	ldr	r3, [pc, #136]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a21      	ldr	r2, [pc, #132]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 800836e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008372:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008374:	4b1f      	ldr	r3, [pc, #124]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	4a1e      	ldr	r2, [pc, #120]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 800837a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800837e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008380:	f7f9 fab8 	bl	80018f4 <HAL_GetTick>
 8008384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008386:	e008      	b.n	800839a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008388:	f7f9 fab4 	bl	80018f4 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b02      	cmp	r3, #2
 8008394:	d901      	bls.n	800839a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e06e      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800839a:	4b16      	ldr	r3, [pc, #88]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0f0      	beq.n	8008388 <HAL_RCC_OscConfig+0x71c>
 80083a6:	e066      	b.n	8008476 <HAL_RCC_OscConfig+0x80a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083a8:	4b12      	ldr	r3, [pc, #72]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a11      	ldr	r2, [pc, #68]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 80083ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083b4:	f7f9 fa9e 	bl	80018f4 <HAL_GetTick>
 80083b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083ba:	e008      	b.n	80083ce <HAL_RCC_OscConfig+0x762>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083bc:	f7f9 fa9a 	bl	80018f4 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d901      	bls.n	80083ce <HAL_RCC_OscConfig+0x762>
          {
            return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e054      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083ce:	4b09      	ldr	r3, [pc, #36]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1f0      	bne.n	80083bc <HAL_RCC_OscConfig+0x750>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80083da:	4b06      	ldr	r3, [pc, #24]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 80083dc:	68da      	ldr	r2, [r3, #12]
 80083de:	4905      	ldr	r1, [pc, #20]	@ (80083f4 <HAL_RCC_OscConfig+0x788>)
 80083e0:	4b07      	ldr	r3, [pc, #28]	@ (8008400 <HAL_RCC_OscConfig+0x794>)
 80083e2:	4013      	ands	r3, r2
 80083e4:	60cb      	str	r3, [r1, #12]
 80083e6:	e046      	b.n	8008476 <HAL_RCC_OscConfig+0x80a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d109      	bne.n	8008404 <HAL_RCC_OscConfig+0x798>
      {
        return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e041      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
 80083f4:	40021000 	.word	0x40021000
 80083f8:	08010ae0 	.word	0x08010ae0
 80083fc:	019f800c 	.word	0x019f800c
 8008400:	feeefffc 	.word	0xfeeefffc
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008404:	4b1e      	ldr	r3, [pc, #120]	@ (8008480 <HAL_RCC_OscConfig+0x814>)
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f003 0203 	and.w	r2, r3, #3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	429a      	cmp	r2, r3
 8008416:	d12c      	bne.n	8008472 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008422:	3b01      	subs	r3, #1
 8008424:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008426:	429a      	cmp	r2, r3
 8008428:	d123      	bne.n	8008472 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008434:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008436:	429a      	cmp	r2, r3
 8008438:	d11b      	bne.n	8008472 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008444:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008446:	429a      	cmp	r2, r3
 8008448:	d113      	bne.n	8008472 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008454:	085b      	lsrs	r3, r3, #1
 8008456:	3b01      	subs	r3, #1
 8008458:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800845a:	429a      	cmp	r2, r3
 800845c:	d109      	bne.n	8008472 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008468:	085b      	lsrs	r3, r3, #1
 800846a:	3b01      	subs	r3, #1
 800846c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800846e:	429a      	cmp	r2, r3
 8008470:	d001      	beq.n	8008476 <HAL_RCC_OscConfig+0x80a>
      {
        return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e000      	b.n	8008478 <HAL_RCC_OscConfig+0x80c>
      }
    }
  }
  }

  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3720      	adds	r7, #32
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	40021000 	.word	0x40021000

08008484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800848e:	2300      	movs	r3, #0
 8008490:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e1e0      	b.n	800885e <HAL_RCC_ClockConfig+0x3da>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 030f 	and.w	r3, r3, #15
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <HAL_RCC_ClockConfig+0x2c>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b0f      	cmp	r3, #15
 80084ae:	d904      	bls.n	80084ba <HAL_RCC_ClockConfig+0x36>
 80084b0:	f240 310b 	movw	r1, #779	@ 0x30b
 80084b4:	4869      	ldr	r0, [pc, #420]	@ (800865c <HAL_RCC_ClockConfig+0x1d8>)
 80084b6:	f7f8 ffaf 	bl	8001418 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d031      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d02e      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d02b      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d028      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b04      	cmp	r3, #4
 80084d6:	d025      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2b05      	cmp	r3, #5
 80084dc:	d022      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2b06      	cmp	r3, #6
 80084e2:	d01f      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	2b07      	cmp	r3, #7
 80084e8:	d01c      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b08      	cmp	r3, #8
 80084ee:	d019      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	2b09      	cmp	r3, #9
 80084f4:	d016      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	2b0a      	cmp	r3, #10
 80084fa:	d013      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	2b0b      	cmp	r3, #11
 8008500:	d010      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b0c      	cmp	r3, #12
 8008506:	d00d      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2b0d      	cmp	r3, #13
 800850c:	d00a      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b0e      	cmp	r3, #14
 8008512:	d007      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b0f      	cmp	r3, #15
 8008518:	d004      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
 800851a:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 800851e:	484f      	ldr	r0, [pc, #316]	@ (800865c <HAL_RCC_ClockConfig+0x1d8>)
 8008520:	f7f8 ff7a 	bl	8001418 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008524:	4b4e      	ldr	r3, [pc, #312]	@ (8008660 <HAL_RCC_ClockConfig+0x1dc>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 030f 	and.w	r3, r3, #15
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	429a      	cmp	r2, r3
 8008530:	d910      	bls.n	8008554 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008532:	4b4b      	ldr	r3, [pc, #300]	@ (8008660 <HAL_RCC_ClockConfig+0x1dc>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f023 020f 	bic.w	r2, r3, #15
 800853a:	4949      	ldr	r1, [pc, #292]	@ (8008660 <HAL_RCC_ClockConfig+0x1dc>)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	4313      	orrs	r3, r2
 8008540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008542:	4b47      	ldr	r3, [pc, #284]	@ (8008660 <HAL_RCC_ClockConfig+0x1dc>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 030f 	and.w	r3, r3, #15
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	429a      	cmp	r2, r3
 800854e:	d001      	beq.n	8008554 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e184      	b.n	800885e <HAL_RCC_ClockConfig+0x3da>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 808e 	beq.w	800867e <HAL_RCC_ClockConfig+0x1fa>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d00c      	beq.n	8008584 <HAL_RCC_ClockConfig+0x100>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2b02      	cmp	r3, #2
 8008570:	d008      	beq.n	8008584 <HAL_RCC_ClockConfig+0x100>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	2b03      	cmp	r3, #3
 8008578:	d004      	beq.n	8008584 <HAL_RCC_ClockConfig+0x100>
 800857a:	f240 3123 	movw	r1, #803	@ 0x323
 800857e:	4837      	ldr	r0, [pc, #220]	@ (800865c <HAL_RCC_ClockConfig+0x1d8>)
 8008580:	f7f8 ff4a 	bl	8001418 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	2b03      	cmp	r3, #3
 800858a:	d129      	bne.n	80085e0 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800858c:	4b35      	ldr	r3, [pc, #212]	@ (8008664 <HAL_RCC_ClockConfig+0x1e0>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <HAL_RCC_ClockConfig+0x118>
      {
        return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e160      	b.n	800885e <HAL_RCC_ClockConfig+0x3da>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800859c:	f000 fa92 	bl	8008ac4 <RCC_GetSysClockFreqFromPLLSource>
 80085a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	4a30      	ldr	r2, [pc, #192]	@ (8008668 <HAL_RCC_ClockConfig+0x1e4>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d93f      	bls.n	800862a <HAL_RCC_ClockConfig+0x1a6>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80085aa:	4b2e      	ldr	r3, [pc, #184]	@ (8008664 <HAL_RCC_ClockConfig+0x1e0>)
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d009      	beq.n	80085ca <HAL_RCC_ClockConfig+0x146>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d033      	beq.n	800862a <HAL_RCC_ClockConfig+0x1a6>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d12f      	bne.n	800862a <HAL_RCC_ClockConfig+0x1a6>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80085ca:	4b26      	ldr	r3, [pc, #152]	@ (8008664 <HAL_RCC_ClockConfig+0x1e0>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085d2:	4a24      	ldr	r2, [pc, #144]	@ (8008664 <HAL_RCC_ClockConfig+0x1e0>)
 80085d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80085da:	2380      	movs	r3, #128	@ 0x80
 80085dc:	617b      	str	r3, [r7, #20]
 80085de:	e024      	b.n	800862a <HAL_RCC_ClockConfig+0x1a6>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d107      	bne.n	80085f8 <HAL_RCC_ClockConfig+0x174>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085e8:	4b1e      	ldr	r3, [pc, #120]	@ (8008664 <HAL_RCC_ClockConfig+0x1e0>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d109      	bne.n	8008608 <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e132      	b.n	800885e <HAL_RCC_ClockConfig+0x3da>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80085f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008664 <HAL_RCC_ClockConfig+0x1e0>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008600:	2b00      	cmp	r3, #0
 8008602:	d101      	bne.n	8008608 <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e12a      	b.n	800885e <HAL_RCC_ClockConfig+0x3da>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008608:	f000 f9ce 	bl	80089a8 <HAL_RCC_GetSysClockFreq>
 800860c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	4a15      	ldr	r2, [pc, #84]	@ (8008668 <HAL_RCC_ClockConfig+0x1e4>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d909      	bls.n	800862a <HAL_RCC_ClockConfig+0x1a6>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008616:	4b13      	ldr	r3, [pc, #76]	@ (8008664 <HAL_RCC_ClockConfig+0x1e0>)
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800861e:	4a11      	ldr	r2, [pc, #68]	@ (8008664 <HAL_RCC_ClockConfig+0x1e0>)
 8008620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008624:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008626:	2380      	movs	r3, #128	@ 0x80
 8008628:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800862a:	4b0e      	ldr	r3, [pc, #56]	@ (8008664 <HAL_RCC_ClockConfig+0x1e0>)
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f023 0203 	bic.w	r2, r3, #3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	490b      	ldr	r1, [pc, #44]	@ (8008664 <HAL_RCC_ClockConfig+0x1e0>)
 8008638:	4313      	orrs	r3, r2
 800863a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800863c:	f7f9 f95a 	bl	80018f4 <HAL_GetTick>
 8008640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008642:	e013      	b.n	800866c <HAL_RCC_ClockConfig+0x1e8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008644:	f7f9 f956 	bl	80018f4 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008652:	4293      	cmp	r3, r2
 8008654:	d90a      	bls.n	800866c <HAL_RCC_ClockConfig+0x1e8>
      {
        return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e101      	b.n	800885e <HAL_RCC_ClockConfig+0x3da>
 800865a:	bf00      	nop
 800865c:	08010ae0 	.word	0x08010ae0
 8008660:	40022000 	.word	0x40022000
 8008664:	40021000 	.word	0x40021000
 8008668:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800866c:	4b7e      	ldr	r3, [pc, #504]	@ (8008868 <HAL_RCC_ClockConfig+0x3e4>)
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f003 020c 	and.w	r2, r3, #12
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	429a      	cmp	r2, r3
 800867c:	d1e2      	bne.n	8008644 <HAL_RCC_ClockConfig+0x1c0>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0302 	and.w	r3, r3, #2
 8008686:	2b00      	cmp	r3, #0
 8008688:	d04c      	beq.n	8008724 <HAL_RCC_ClockConfig+0x2a0>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0304 	and.w	r3, r3, #4
 8008692:	2b00      	cmp	r3, #0
 8008694:	d005      	beq.n	80086a2 <HAL_RCC_ClockConfig+0x21e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008696:	4b74      	ldr	r3, [pc, #464]	@ (8008868 <HAL_RCC_ClockConfig+0x3e4>)
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	4a73      	ldr	r2, [pc, #460]	@ (8008868 <HAL_RCC_ClockConfig+0x3e4>)
 800869c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80086a0:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0308 	and.w	r3, r3, #8
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d007      	beq.n	80086be <HAL_RCC_ClockConfig+0x23a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80086ae:	4b6e      	ldr	r3, [pc, #440]	@ (8008868 <HAL_RCC_ClockConfig+0x3e4>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80086b6:	4a6c      	ldr	r2, [pc, #432]	@ (8008868 <HAL_RCC_ClockConfig+0x3e4>)
 80086b8:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80086bc:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d024      	beq.n	8008710 <HAL_RCC_ClockConfig+0x28c>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	2b80      	cmp	r3, #128	@ 0x80
 80086cc:	d020      	beq.n	8008710 <HAL_RCC_ClockConfig+0x28c>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	2b90      	cmp	r3, #144	@ 0x90
 80086d4:	d01c      	beq.n	8008710 <HAL_RCC_ClockConfig+0x28c>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	2ba0      	cmp	r3, #160	@ 0xa0
 80086dc:	d018      	beq.n	8008710 <HAL_RCC_ClockConfig+0x28c>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	2bb0      	cmp	r3, #176	@ 0xb0
 80086e4:	d014      	beq.n	8008710 <HAL_RCC_ClockConfig+0x28c>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80086ec:	d010      	beq.n	8008710 <HAL_RCC_ClockConfig+0x28c>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	2bd0      	cmp	r3, #208	@ 0xd0
 80086f4:	d00c      	beq.n	8008710 <HAL_RCC_ClockConfig+0x28c>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	2be0      	cmp	r3, #224	@ 0xe0
 80086fc:	d008      	beq.n	8008710 <HAL_RCC_ClockConfig+0x28c>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	2bf0      	cmp	r3, #240	@ 0xf0
 8008704:	d004      	beq.n	8008710 <HAL_RCC_ClockConfig+0x28c>
 8008706:	f240 317a 	movw	r1, #890	@ 0x37a
 800870a:	4858      	ldr	r0, [pc, #352]	@ (800886c <HAL_RCC_ClockConfig+0x3e8>)
 800870c:	f7f8 fe84 	bl	8001418 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008710:	4b55      	ldr	r3, [pc, #340]	@ (8008868 <HAL_RCC_ClockConfig+0x3e4>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	4952      	ldr	r1, [pc, #328]	@ (8008868 <HAL_RCC_ClockConfig+0x3e4>)
 800871e:	4313      	orrs	r3, r2
 8008720:	608b      	str	r3, [r1, #8]
 8008722:	e008      	b.n	8008736 <HAL_RCC_ClockConfig+0x2b2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2b80      	cmp	r3, #128	@ 0x80
 8008728:	d105      	bne.n	8008736 <HAL_RCC_ClockConfig+0x2b2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800872a:	4b4f      	ldr	r3, [pc, #316]	@ (8008868 <HAL_RCC_ClockConfig+0x3e4>)
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	4a4e      	ldr	r2, [pc, #312]	@ (8008868 <HAL_RCC_ClockConfig+0x3e4>)
 8008730:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008734:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008736:	4b4e      	ldr	r3, [pc, #312]	@ (8008870 <HAL_RCC_ClockConfig+0x3ec>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 030f 	and.w	r3, r3, #15
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	429a      	cmp	r2, r3
 8008742:	d21d      	bcs.n	8008780 <HAL_RCC_ClockConfig+0x2fc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008744:	4b4a      	ldr	r3, [pc, #296]	@ (8008870 <HAL_RCC_ClockConfig+0x3ec>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f023 020f 	bic.w	r2, r3, #15
 800874c:	4948      	ldr	r1, [pc, #288]	@ (8008870 <HAL_RCC_ClockConfig+0x3ec>)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	4313      	orrs	r3, r2
 8008752:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008754:	f7f9 f8ce 	bl	80018f4 <HAL_GetTick>
 8008758:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800875a:	e00a      	b.n	8008772 <HAL_RCC_ClockConfig+0x2ee>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800875c:	f7f9 f8ca 	bl	80018f4 <HAL_GetTick>
 8008760:	4602      	mov	r2, r0
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800876a:	4293      	cmp	r3, r2
 800876c:	d901      	bls.n	8008772 <HAL_RCC_ClockConfig+0x2ee>
      {
        return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e075      	b.n	800885e <HAL_RCC_ClockConfig+0x3da>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008772:	4b3f      	ldr	r3, [pc, #252]	@ (8008870 <HAL_RCC_ClockConfig+0x3ec>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 030f 	and.w	r3, r3, #15
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	429a      	cmp	r2, r3
 800877e:	d1ed      	bne.n	800875c <HAL_RCC_ClockConfig+0x2d8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0304 	and.w	r3, r3, #4
 8008788:	2b00      	cmp	r3, #0
 800878a:	d025      	beq.n	80087d8 <HAL_RCC_ClockConfig+0x354>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d018      	beq.n	80087c6 <HAL_RCC_ClockConfig+0x342>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800879c:	d013      	beq.n	80087c6 <HAL_RCC_ClockConfig+0x342>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80087a6:	d00e      	beq.n	80087c6 <HAL_RCC_ClockConfig+0x342>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80087b0:	d009      	beq.n	80087c6 <HAL_RCC_ClockConfig+0x342>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80087ba:	d004      	beq.n	80087c6 <HAL_RCC_ClockConfig+0x342>
 80087bc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80087c0:	482a      	ldr	r0, [pc, #168]	@ (800886c <HAL_RCC_ClockConfig+0x3e8>)
 80087c2:	f7f8 fe29 	bl	8001418 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087c6:	4b28      	ldr	r3, [pc, #160]	@ (8008868 <HAL_RCC_ClockConfig+0x3e4>)
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	4925      	ldr	r1, [pc, #148]	@ (8008868 <HAL_RCC_ClockConfig+0x3e4>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0308 	and.w	r3, r3, #8
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d026      	beq.n	8008832 <HAL_RCC_ClockConfig+0x3ae>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d018      	beq.n	800881e <HAL_RCC_ClockConfig+0x39a>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087f4:	d013      	beq.n	800881e <HAL_RCC_ClockConfig+0x39a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80087fe:	d00e      	beq.n	800881e <HAL_RCC_ClockConfig+0x39a>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008808:	d009      	beq.n	800881e <HAL_RCC_ClockConfig+0x39a>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008812:	d004      	beq.n	800881e <HAL_RCC_ClockConfig+0x39a>
 8008814:	f240 31a3 	movw	r1, #931	@ 0x3a3
 8008818:	4814      	ldr	r0, [pc, #80]	@ (800886c <HAL_RCC_ClockConfig+0x3e8>)
 800881a:	f7f8 fdfd 	bl	8001418 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800881e:	4b12      	ldr	r3, [pc, #72]	@ (8008868 <HAL_RCC_ClockConfig+0x3e4>)
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	00db      	lsls	r3, r3, #3
 800882c:	490e      	ldr	r1, [pc, #56]	@ (8008868 <HAL_RCC_ClockConfig+0x3e4>)
 800882e:	4313      	orrs	r3, r2
 8008830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008832:	f000 f8b9 	bl	80089a8 <HAL_RCC_GetSysClockFreq>
 8008836:	4602      	mov	r2, r0
 8008838:	4b0b      	ldr	r3, [pc, #44]	@ (8008868 <HAL_RCC_ClockConfig+0x3e4>)
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	091b      	lsrs	r3, r3, #4
 800883e:	f003 030f 	and.w	r3, r3, #15
 8008842:	490c      	ldr	r1, [pc, #48]	@ (8008874 <HAL_RCC_ClockConfig+0x3f0>)
 8008844:	5ccb      	ldrb	r3, [r1, r3]
 8008846:	f003 031f 	and.w	r3, r3, #31
 800884a:	fa22 f303 	lsr.w	r3, r2, r3
 800884e:	4a0a      	ldr	r2, [pc, #40]	@ (8008878 <HAL_RCC_ClockConfig+0x3f4>)
 8008850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008852:	4b0a      	ldr	r3, [pc, #40]	@ (800887c <HAL_RCC_ClockConfig+0x3f8>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4618      	mov	r0, r3
 8008858:	f7f9 f800 	bl	800185c <HAL_InitTick>
 800885c:	4603      	mov	r3, r0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3718      	adds	r7, #24
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	40021000 	.word	0x40021000
 800886c:	08010ae0 	.word	0x08010ae0
 8008870:	40022000 	.word	0x40022000
 8008874:	08010cf0 	.word	0x08010cf0
 8008878:	20000000 	.word	0x20000000
 800887c:	20000004 	.word	0x20000004

08008880 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08c      	sub	sp, #48	@ 0x30
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
  uint32_t mcoindex;
  uint32_t mco_gpio_index;
  GPIO_TypeDef * mco_gpio_port;

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008892:	d008      	beq.n	80088a6 <HAL_RCC_MCOConfig+0x26>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	4a41      	ldr	r2, [pc, #260]	@ (800899c <HAL_RCC_MCOConfig+0x11c>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d004      	beq.n	80088a6 <HAL_RCC_MCOConfig+0x26>
 800889c:	f240 31ea 	movw	r1, #1002	@ 0x3ea
 80088a0:	483f      	ldr	r0, [pc, #252]	@ (80089a0 <HAL_RCC_MCOConfig+0x120>)
 80088a2:	f7f8 fdb9 	bl	8001418 <assert_failed>

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80088a6:	2302      	movs	r3, #2
 80088a8:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80088aa:	2303      	movs	r3, #3
 80088ac:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 80088ae:	2300      	movs	r3, #0
 80088b0:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	0c1b      	lsrs	r3, r3, #16
 80088be:	f003 030f 	and.w	r3, r3, #15
 80088c2:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 80088c6:	029b      	lsls	r3, r3, #10
 80088c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	0c1b      	lsrs	r3, r3, #16
 80088ce:	f003 030f 	and.w	r3, r3, #15
 80088d2:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 80088d4:	4b33      	ldr	r3, [pc, #204]	@ (80089a4 <HAL_RCC_MCOConfig+0x124>)
 80088d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80088d8:	2101      	movs	r1, #1
 80088da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088dc:	fa01 f303 	lsl.w	r3, r1, r3
 80088e0:	4930      	ldr	r1, [pc, #192]	@ (80089a4 <HAL_RCC_MCOConfig+0x124>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	0d1b      	lsrs	r3, r3, #20
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80088f4:	f107 0310 	add.w	r3, r7, #16
 80088f8:	4619      	mov	r1, r3
 80088fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088fc:	f7fb fcc2 	bl	8004284 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8008900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008902:	2b00      	cmp	r3, #0
 8008904:	d145      	bne.n	8008992 <HAL_RCC_MCOConfig+0x112>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d014      	beq.n	8008936 <HAL_RCC_MCOConfig+0xb6>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008912:	d010      	beq.n	8008936 <HAL_RCC_MCOConfig+0xb6>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800891a:	d00c      	beq.n	8008936 <HAL_RCC_MCOConfig+0xb6>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008922:	d008      	beq.n	8008936 <HAL_RCC_MCOConfig+0xb6>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800892a:	d004      	beq.n	8008936 <HAL_RCC_MCOConfig+0xb6>
 800892c:	f240 4102 	movw	r1, #1026	@ 0x402
 8008930:	481b      	ldr	r0, [pc, #108]	@ (80089a0 <HAL_RCC_MCOConfig+0x120>)
 8008932:	f7f8 fd71 	bl	8001418 <assert_failed>
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d020      	beq.n	800897e <HAL_RCC_MCOConfig+0xfe>
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008942:	d01c      	beq.n	800897e <HAL_RCC_MCOConfig+0xfe>
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800894a:	d018      	beq.n	800897e <HAL_RCC_MCOConfig+0xfe>
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008952:	d014      	beq.n	800897e <HAL_RCC_MCOConfig+0xfe>
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800895a:	d010      	beq.n	800897e <HAL_RCC_MCOConfig+0xfe>
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8008962:	d00c      	beq.n	800897e <HAL_RCC_MCOConfig+0xfe>
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 800896a:	d008      	beq.n	800897e <HAL_RCC_MCOConfig+0xfe>
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008972:	d004      	beq.n	800897e <HAL_RCC_MCOConfig+0xfe>
 8008974:	f240 4103 	movw	r1, #1027	@ 0x403
 8008978:	4809      	ldr	r0, [pc, #36]	@ (80089a0 <HAL_RCC_MCOConfig+0x120>)
 800897a:	f7f8 fd4d 	bl	8001418 <assert_failed>
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 800897e:	4b09      	ldr	r3, [pc, #36]	@ (80089a4 <HAL_RCC_MCOConfig+0x124>)
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008986:	68b9      	ldr	r1, [r7, #8]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	430b      	orrs	r3, r1
 800898c:	4905      	ldr	r1, [pc, #20]	@ (80089a4 <HAL_RCC_MCOConfig+0x124>)
 800898e:	4313      	orrs	r3, r2
 8008990:	608b      	str	r3, [r1, #8]
  }
}
 8008992:	bf00      	nop
 8008994:	3730      	adds	r7, #48	@ 0x30
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	00060400 	.word	0x00060400
 80089a0:	08010ae0 	.word	0x08010ae0
 80089a4:	40021000 	.word	0x40021000

080089a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b087      	sub	sp, #28
 80089ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80089ae:	4b2c      	ldr	r3, [pc, #176]	@ (8008a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f003 030c 	and.w	r3, r3, #12
 80089b6:	2b04      	cmp	r3, #4
 80089b8:	d102      	bne.n	80089c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80089ba:	4b2a      	ldr	r3, [pc, #168]	@ (8008a64 <HAL_RCC_GetSysClockFreq+0xbc>)
 80089bc:	613b      	str	r3, [r7, #16]
 80089be:	e047      	b.n	8008a50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80089c0:	4b27      	ldr	r3, [pc, #156]	@ (8008a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f003 030c 	and.w	r3, r3, #12
 80089c8:	2b08      	cmp	r3, #8
 80089ca:	d102      	bne.n	80089d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80089cc:	4b26      	ldr	r3, [pc, #152]	@ (8008a68 <HAL_RCC_GetSysClockFreq+0xc0>)
 80089ce:	613b      	str	r3, [r7, #16]
 80089d0:	e03e      	b.n	8008a50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80089d2:	4b23      	ldr	r3, [pc, #140]	@ (8008a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f003 030c 	and.w	r3, r3, #12
 80089da:	2b0c      	cmp	r3, #12
 80089dc:	d136      	bne.n	8008a4c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80089de:	4b20      	ldr	r3, [pc, #128]	@ (8008a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80089e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	091b      	lsrs	r3, r3, #4
 80089ee:	f003 030f 	and.w	r3, r3, #15
 80089f2:	3301      	adds	r3, #1
 80089f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2b03      	cmp	r3, #3
 80089fa:	d10c      	bne.n	8008a16 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80089fc:	4a1a      	ldr	r2, [pc, #104]	@ (8008a68 <HAL_RCC_GetSysClockFreq+0xc0>)
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a04:	4a16      	ldr	r2, [pc, #88]	@ (8008a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a06:	68d2      	ldr	r2, [r2, #12]
 8008a08:	0a12      	lsrs	r2, r2, #8
 8008a0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008a0e:	fb02 f303 	mul.w	r3, r2, r3
 8008a12:	617b      	str	r3, [r7, #20]
      break;
 8008a14:	e00c      	b.n	8008a30 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008a16:	4a13      	ldr	r2, [pc, #76]	@ (8008a64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a1e:	4a10      	ldr	r2, [pc, #64]	@ (8008a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a20:	68d2      	ldr	r2, [r2, #12]
 8008a22:	0a12      	lsrs	r2, r2, #8
 8008a24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008a28:	fb02 f303 	mul.w	r3, r2, r3
 8008a2c:	617b      	str	r3, [r7, #20]
      break;
 8008a2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008a30:	4b0b      	ldr	r3, [pc, #44]	@ (8008a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	0e5b      	lsrs	r3, r3, #25
 8008a36:	f003 0303 	and.w	r3, r3, #3
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	005b      	lsls	r3, r3, #1
 8008a3e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a48:	613b      	str	r3, [r7, #16]
 8008a4a:	e001      	b.n	8008a50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008a50:	693b      	ldr	r3, [r7, #16]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	371c      	adds	r7, #28
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	40021000 	.word	0x40021000
 8008a64:	00f42400 	.word	0x00f42400
 8008a68:	02dc6c00 	.word	0x02dc6c00

08008a6c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8008a70:	4b05      	ldr	r3, [pc, #20]	@ (8008a88 <HAL_RCC_EnableCSS+0x1c>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a04      	ldr	r2, [pc, #16]	@ (8008a88 <HAL_RCC_EnableCSS+0x1c>)
 8008a76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a7a:	6013      	str	r3, [r2, #0]
}
 8008a7c:	bf00      	nop
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	40021000 	.word	0x40021000

08008a8c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008a90:	4b07      	ldr	r3, [pc, #28]	@ (8008ab0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008a92:	69db      	ldr	r3, [r3, #28]
 8008a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a9c:	d105      	bne.n	8008aaa <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008a9e:	f000 f809 	bl	8008ab4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008aa2:	4b03      	ldr	r3, [pc, #12]	@ (8008ab0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008aa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008aa8:	621a      	str	r2, [r3, #32]
  }
}
 8008aaa:	bf00      	nop
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	40021000 	.word	0x40021000

08008ab4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8008ab8:	bf00      	nop
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
	...

08008ac4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008aca:	4b1e      	ldr	r3, [pc, #120]	@ (8008b44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	f003 0303 	and.w	r3, r3, #3
 8008ad2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8008b44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	091b      	lsrs	r3, r3, #4
 8008ada:	f003 030f 	and.w	r3, r3, #15
 8008ade:	3301      	adds	r3, #1
 8008ae0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d10c      	bne.n	8008b02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ae8:	4a17      	ldr	r2, [pc, #92]	@ (8008b48 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af0:	4a14      	ldr	r2, [pc, #80]	@ (8008b44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008af2:	68d2      	ldr	r2, [r2, #12]
 8008af4:	0a12      	lsrs	r2, r2, #8
 8008af6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008afa:	fb02 f303 	mul.w	r3, r2, r3
 8008afe:	617b      	str	r3, [r7, #20]
    break;
 8008b00:	e00c      	b.n	8008b1c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008b02:	4a12      	ldr	r2, [pc, #72]	@ (8008b4c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8008b44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b0c:	68d2      	ldr	r2, [r2, #12]
 8008b0e:	0a12      	lsrs	r2, r2, #8
 8008b10:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008b14:	fb02 f303 	mul.w	r3, r2, r3
 8008b18:	617b      	str	r3, [r7, #20]
    break;
 8008b1a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008b1c:	4b09      	ldr	r3, [pc, #36]	@ (8008b44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	0e5b      	lsrs	r3, r3, #25
 8008b22:	f003 0303 	and.w	r3, r3, #3
 8008b26:	3301      	adds	r3, #1
 8008b28:	005b      	lsls	r3, r3, #1
 8008b2a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b34:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008b36:	687b      	ldr	r3, [r7, #4]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	371c      	adds	r7, #28
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	40021000 	.word	0x40021000
 8008b48:	02dc6c00 	.word	0x02dc6c00
 8008b4c:	00f42400 	.word	0x00f42400

08008b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b58:	2300      	movs	r3, #0
 8008b5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d175      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 0302 	and.w	r3, r3, #2
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d16f      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d169      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0308 	and.w	r3, r3, #8
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d163      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0310 	and.w	r3, r3, #16
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d15d      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0320 	and.w	r3, r3, #32
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d157      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d151      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d14b      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d145      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d13f      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d139      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d133      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d12d      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d127      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d121      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d11b      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d115      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10f      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d109      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d103      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008c50:	2183      	movs	r1, #131	@ 0x83
 8008c52:	4855      	ldr	r0, [pc, #340]	@ (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008c54:	f7f8 fbe0 	bl	8001418 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 80b2 	beq.w	8008dca <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c66:	2300      	movs	r3, #0
 8008c68:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d012      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c7a:	d00d      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c84:	d008      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c8e:	d003      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8008c90:	218b      	movs	r1, #139	@ 0x8b
 8008c92:	4845      	ldr	r0, [pc, #276]	@ (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008c94:	f7f8 fbc0 	bl	8001418 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c98:	4b44      	ldr	r3, [pc, #272]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10d      	bne.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ca4:	4b41      	ldr	r3, [pc, #260]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ca8:	4a40      	ldr	r2, [pc, #256]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cae:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cb8:	60bb      	str	r3, [r7, #8]
 8008cba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a3a      	ldr	r2, [pc, #232]	@ (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ccc:	f7f8 fe12 	bl	80018f4 <HAL_GetTick>
 8008cd0:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cd2:	e009      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cd4:	f7f8 fe0e 	bl	80018f4 <HAL_GetTick>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d902      	bls.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        ret = HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	74fb      	strb	r3, [r7, #19]
        break;
 8008ce6:	e005      	b.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ce8:	4b31      	ldr	r3, [pc, #196]	@ (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d0ef      	beq.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x184>
      }
    }

    if(ret == HAL_OK)
 8008cf4:	7cfb      	ldrb	r3, [r7, #19]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d15c      	bne.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x264>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d04:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d01e      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d019      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d16:	4b25      	ldr	r3, [pc, #148]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d20:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d22:	4b22      	ldr	r3, [pc, #136]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d28:	4a20      	ldr	r2, [pc, #128]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d32:	4b1e      	ldr	r3, [pc, #120]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d38:	4a1c      	ldr	r2, [pc, #112]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008d42:	4a1a      	ldr	r2, [pc, #104]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	f003 0301 	and.w	r3, r3, #1
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d016      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d54:	f7f8 fdce 	bl	80018f4 <HAL_GetTick>
 8008d58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d5a:	e00b      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d5c:	f7f8 fdca 	bl	80018f4 <HAL_GetTick>
 8008d60:	4602      	mov	r2, r0
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d902      	bls.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	74fb      	strb	r3, [r7, #19]
            break;
 8008d72:	e006      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d74:	4b0d      	ldr	r3, [pc, #52]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d7a:	f003 0302 	and.w	r3, r3, #2
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d0ec      	beq.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008d82:	7cfb      	ldrb	r3, [r7, #19]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10b      	bne.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d88:	4b08      	ldr	r3, [pc, #32]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d96:	4905      	ldr	r1, [pc, #20]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008d9e:	e00b      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x268>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008da0:	7cfb      	ldrb	r3, [r7, #19]
 8008da2:	74bb      	strb	r3, [r7, #18]
 8008da4:	e008      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8008da6:	bf00      	nop
 8008da8:	08010b50 	.word	0x08010b50
 8008dac:	40021000 	.word	0x40021000
 8008db0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db4:	7cfb      	ldrb	r3, [r7, #19]
 8008db6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008db8:	7c7b      	ldrb	r3, [r7, #17]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d105      	bne.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dbe:	4b9a      	ldr	r3, [pc, #616]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8008dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dc2:	4a99      	ldr	r2, [pc, #612]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8008dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008dc8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d01e      	beq.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00f      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d00b      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d007      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d003      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8008df6:	21e0      	movs	r1, #224	@ 0xe0
 8008df8:	488c      	ldr	r0, [pc, #560]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8008dfa:	f7f8 fb0d 	bl	8001418 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008dfe:	4b8a      	ldr	r3, [pc, #552]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8008e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e04:	f023 0203 	bic.w	r2, r3, #3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	4986      	ldr	r1, [pc, #536]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d01e      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00f      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	2b04      	cmp	r3, #4
 8008e2e:	d00b      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	2b0c      	cmp	r3, #12
 8008e36:	d007      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	2b08      	cmp	r3, #8
 8008e3e:	d003      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8008e40:	21ea      	movs	r1, #234	@ 0xea
 8008e42:	487a      	ldr	r0, [pc, #488]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8008e44:	f7f8 fae8 	bl	8001418 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e48:	4b77      	ldr	r3, [pc, #476]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8008e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e4e:	f023 020c 	bic.w	r2, r3, #12
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	4974      	ldr	r1, [pc, #464]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0304 	and.w	r3, r3, #4
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d01e      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00f      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	2b10      	cmp	r3, #16
 8008e78:	d00b      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	2b30      	cmp	r3, #48	@ 0x30
 8008e80:	d007      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	2b20      	cmp	r3, #32
 8008e88:	d003      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008e8a:	21f4      	movs	r1, #244	@ 0xf4
 8008e8c:	4867      	ldr	r0, [pc, #412]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8008e8e:	f7f8 fac3 	bl	8001418 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008e92:	4b65      	ldr	r3, [pc, #404]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8008e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	4961      	ldr	r1, [pc, #388]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0308 	and.w	r3, r3, #8
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d01e      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00f      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	2b40      	cmp	r3, #64	@ 0x40
 8008ec2:	d00b      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	2bc0      	cmp	r3, #192	@ 0xc0
 8008eca:	d007      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	2b80      	cmp	r3, #128	@ 0x80
 8008ed2:	d003      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8008ed4:	21ff      	movs	r1, #255	@ 0xff
 8008ed6:	4855      	ldr	r0, [pc, #340]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8008ed8:	f7f8 fa9e 	bl	8001418 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008edc:	4b52      	ldr	r3, [pc, #328]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8008ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ee2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	494f      	ldr	r1, [pc, #316]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0310 	and.w	r3, r3, #16
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d022      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d013      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f0e:	d00e      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	695b      	ldr	r3, [r3, #20]
 8008f14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f18:	d009      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f22:	d004      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008f24:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8008f28:	4840      	ldr	r0, [pc, #256]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8008f2a:	f7f8 fa75 	bl	8001418 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8008f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	493a      	ldr	r1, [pc, #232]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0320 	and.w	r3, r3, #32
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d022      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d013      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f60:	d00e      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	699b      	ldr	r3, [r3, #24]
 8008f66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f6a:	d009      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f74:	d004      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8008f76:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8008f7a:	482c      	ldr	r0, [pc, #176]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8008f7c:	f7f8 fa4c 	bl	8001418 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f80:	4b29      	ldr	r3, [pc, #164]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8008f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	4926      	ldr	r1, [pc, #152]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d01d      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00e      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fb2:	d009      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	69db      	ldr	r3, [r3, #28]
 8008fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fbc:	d004      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008fbe:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8008fc2:	481a      	ldr	r0, [pc, #104]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8008fc4:	f7f8 fa28 	bl	8001418 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008fc8:	4b17      	ldr	r3, [pc, #92]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8008fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	4914      	ldr	r1, [pc, #80]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d022      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00e      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ffa:	d009      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a1b      	ldr	r3, [r3, #32]
 8009000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009004:	d004      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 8009006:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800900a:	4808      	ldr	r0, [pc, #32]	@ (800902c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800900c:	f7f8 fa04 	bl	8001418 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009010:	4b05      	ldr	r3, [pc, #20]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8009012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009016:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	4902      	ldr	r1, [pc, #8]	@ (8009028 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8009020:	4313      	orrs	r3, r2
 8009022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009026:	e003      	b.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009028:	40021000 	.word	0x40021000
 800902c:	08010b50 	.word	0x08010b50
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009038:	2b00      	cmp	r3, #0
 800903a:	d01d      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00e      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x512>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800904c:	d009      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x512>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009052:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009056:	d004      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x512>
 8009058:	f44f 719b 	mov.w	r1, #310	@ 0x136
 800905c:	489e      	ldr	r0, [pc, #632]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800905e:	f7f8 f9db 	bl	8001418 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009062:	4b9e      	ldr	r3, [pc, #632]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009068:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009070:	499a      	ldr	r1, [pc, #616]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009072:	4313      	orrs	r3, r2
 8009074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d01b      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x56c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00c      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009090:	2b01      	cmp	r3, #1
 8009092:	d008      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x556>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009098:	2b02      	cmp	r3, #2
 800909a:	d004      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800909c:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 80090a0:	488d      	ldr	r0, [pc, #564]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 80090a2:	f7f8 f9b9 	bl	8001418 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80090a6:	4b8d      	ldr	r3, [pc, #564]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80090a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80090ac:	f023 0203 	bic.w	r2, r3, #3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b4:	4989      	ldr	r1, [pc, #548]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d022      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d013      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090d8:	d00e      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090de:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80090e2:	d009      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80090ec:	d004      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 80090ee:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 80090f2:	4879      	ldr	r0, [pc, #484]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 80090f4:	f7f8 f990 	bl	8001418 <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80090f8:	4b78      	ldr	r3, [pc, #480]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80090fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090fe:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009106:	4975      	ldr	r1, [pc, #468]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009108:	4313      	orrs	r3, r2
 800910a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009116:	2b00      	cmp	r3, #0
 8009118:	d02d      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911e:	2b00      	cmp	r3, #0
 8009120:	d013      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800912a:	d00e      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009130:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009134:	d009      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800913a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800913e:	d004      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 8009140:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 8009144:	4864      	ldr	r0, [pc, #400]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009146:	f7f8 f967 	bl	8001418 <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800914a:	4b64      	ldr	r3, [pc, #400]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800914c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009150:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009158:	4960      	ldr	r1, [pc, #384]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800915a:	4313      	orrs	r3, r2
 800915c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009164:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009168:	d105      	bne.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x626>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800916a:	4b5c      	ldr	r3, [pc, #368]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	4a5b      	ldr	r2, [pc, #364]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009170:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009174:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800917e:	2b00      	cmp	r3, #0
 8009180:	d02d      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x68e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009186:	2b00      	cmp	r3, #0
 8009188:	d013      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800918e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009192:	d00e      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009198:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800919c:	d009      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091a2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80091a6:	d004      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80091a8:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80091ac:	484a      	ldr	r0, [pc, #296]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 80091ae:	f7f8 f933 	bl	8001418 <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80091b2:	4b4a      	ldr	r3, [pc, #296]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80091b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091b8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091c0:	4946      	ldr	r1, [pc, #280]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091d0:	d105      	bne.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80091d2:	4b42      	ldr	r3, [pc, #264]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	4a41      	ldr	r2, [pc, #260]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80091d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80091dc:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d028      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00e      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091fa:	d009      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009200:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009204:	d004      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8009206:	f240 1179 	movw	r1, #377	@ 0x179
 800920a:	4833      	ldr	r0, [pc, #204]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800920c:	f7f8 f904 	bl	8001418 <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009210:	4b32      	ldr	r3, [pc, #200]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009216:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800921e:	492f      	ldr	r1, [pc, #188]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009220:	4313      	orrs	r3, r2
 8009222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800922a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800922e:	d105      	bne.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009230:	4b2a      	ldr	r3, [pc, #168]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	4a29      	ldr	r2, [pc, #164]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800923a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d023      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x740>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800924c:	2b00      	cmp	r3, #0
 800924e:	d009      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009254:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009258:	d004      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800925a:	f240 118b 	movw	r1, #395	@ 0x18b
 800925e:	481e      	ldr	r0, [pc, #120]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8009260:	f7f8 f8da 	bl	8001418 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009264:	4b1d      	ldr	r3, [pc, #116]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800926a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009272:	491a      	ldr	r1, [pc, #104]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009274:	4313      	orrs	r3, r2
 8009276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800927e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009282:	d105      	bne.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009284:	4b15      	ldr	r3, [pc, #84]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	4a14      	ldr	r2, [pc, #80]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800928a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800928e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d028      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d009      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x768>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092ac:	d004      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x768>
 80092ae:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 80092b2:	4809      	ldr	r0, [pc, #36]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 80092b4:	f7f8 f8b0 	bl	8001418 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80092b8:	4b08      	ldr	r3, [pc, #32]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80092ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092c6:	4905      	ldr	r1, [pc, #20]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80092c8:	4313      	orrs	r3, r2
 80092ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092d6:	e003      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x790>
 80092d8:	08010b50 	.word	0x08010b50
 80092dc:	40021000 	.word	0x40021000
 80092e0:	d105      	bne.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092e2:	4b4c      	ldr	r3, [pc, #304]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	4a4b      	ldr	r2, [pc, #300]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80092e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092ec:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d028      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00e      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009306:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800930a:	d009      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009314:	d004      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8009316:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 800931a:	483f      	ldr	r0, [pc, #252]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800931c:	f7f8 f87c 	bl	8001418 <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009320:	4b3c      	ldr	r3, [pc, #240]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8009322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009326:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800932e:	4939      	ldr	r1, [pc, #228]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8009330:	4313      	orrs	r3, r2
 8009332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800933a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800933e:	d105      	bne.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009340:	4b34      	ldr	r3, [pc, #208]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	4a33      	ldr	r2, [pc, #204]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8009346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800934a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009354:	2b00      	cmp	r3, #0
 8009356:	d028      	beq.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x85a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00e      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009368:	d009      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800936e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009372:	d004      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8009374:	f240 11b9 	movw	r1, #441	@ 0x1b9
 8009378:	4827      	ldr	r0, [pc, #156]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800937a:	f7f8 f84d 	bl	8001418 <assert_failed>

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800937e:	4b25      	ldr	r3, [pc, #148]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8009380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009384:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800938c:	4921      	ldr	r1, [pc, #132]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800938e:	4313      	orrs	r3, r2
 8009390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800939c:	d105      	bne.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800939e:	4b1d      	ldr	r3, [pc, #116]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	4a1c      	ldr	r2, [pc, #112]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80093a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093a8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d028      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093be:	d00d      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x88c>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d009      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x88c>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80093d0:	d004      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x88c>
 80093d2:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 80093d6:	4810      	ldr	r0, [pc, #64]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 80093d8:	f7f8 f81e 	bl	8001418 <assert_failed>

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80093dc:	4b0d      	ldr	r3, [pc, #52]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80093de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80093e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093ea:	490a      	ldr	r1, [pc, #40]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80093ec:	4313      	orrs	r3, r2
 80093ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80093fa:	d105      	bne.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093fc:	4b05      	ldr	r3, [pc, #20]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	4a04      	ldr	r2, [pc, #16]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8009402:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009406:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009408:	7cbb      	ldrb	r3, [r7, #18]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3718      	adds	r7, #24
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	40021000 	.word	0x40021000
 8009418:	08010b50 	.word	0x08010b50

0800941c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d101      	bne.n	800942e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e0eb      	b.n	8009606 <HAL_TIM_Base_Init+0x1ea>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a77      	ldr	r2, [pc, #476]	@ (8009610 <HAL_TIM_Base_Init+0x1f4>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d03b      	beq.n	80094b0 <HAL_TIM_Base_Init+0x94>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009440:	d036      	beq.n	80094b0 <HAL_TIM_Base_Init+0x94>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a73      	ldr	r2, [pc, #460]	@ (8009614 <HAL_TIM_Base_Init+0x1f8>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d031      	beq.n	80094b0 <HAL_TIM_Base_Init+0x94>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a71      	ldr	r2, [pc, #452]	@ (8009618 <HAL_TIM_Base_Init+0x1fc>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d02c      	beq.n	80094b0 <HAL_TIM_Base_Init+0x94>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a70      	ldr	r2, [pc, #448]	@ (800961c <HAL_TIM_Base_Init+0x200>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d027      	beq.n	80094b0 <HAL_TIM_Base_Init+0x94>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a6e      	ldr	r2, [pc, #440]	@ (8009620 <HAL_TIM_Base_Init+0x204>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d022      	beq.n	80094b0 <HAL_TIM_Base_Init+0x94>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a6d      	ldr	r2, [pc, #436]	@ (8009624 <HAL_TIM_Base_Init+0x208>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d01d      	beq.n	80094b0 <HAL_TIM_Base_Init+0x94>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a6b      	ldr	r2, [pc, #428]	@ (8009628 <HAL_TIM_Base_Init+0x20c>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d018      	beq.n	80094b0 <HAL_TIM_Base_Init+0x94>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a6a      	ldr	r2, [pc, #424]	@ (800962c <HAL_TIM_Base_Init+0x210>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d013      	beq.n	80094b0 <HAL_TIM_Base_Init+0x94>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a68      	ldr	r2, [pc, #416]	@ (8009630 <HAL_TIM_Base_Init+0x214>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d00e      	beq.n	80094b0 <HAL_TIM_Base_Init+0x94>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a67      	ldr	r2, [pc, #412]	@ (8009634 <HAL_TIM_Base_Init+0x218>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d009      	beq.n	80094b0 <HAL_TIM_Base_Init+0x94>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a65      	ldr	r2, [pc, #404]	@ (8009638 <HAL_TIM_Base_Init+0x21c>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d004      	beq.n	80094b0 <HAL_TIM_Base_Init+0x94>
 80094a6:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80094aa:	4864      	ldr	r0, [pc, #400]	@ (800963c <HAL_TIM_Base_Init+0x220>)
 80094ac:	f7f7 ffb4 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d014      	beq.n	80094e2 <HAL_TIM_Base_Init+0xc6>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	2b10      	cmp	r3, #16
 80094be:	d010      	beq.n	80094e2 <HAL_TIM_Base_Init+0xc6>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	2b20      	cmp	r3, #32
 80094c6:	d00c      	beq.n	80094e2 <HAL_TIM_Base_Init+0xc6>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	2b40      	cmp	r3, #64	@ 0x40
 80094ce:	d008      	beq.n	80094e2 <HAL_TIM_Base_Init+0xc6>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	2b60      	cmp	r3, #96	@ 0x60
 80094d6:	d004      	beq.n	80094e2 <HAL_TIM_Base_Init+0xc6>
 80094d8:	f240 1123 	movw	r1, #291	@ 0x123
 80094dc:	4857      	ldr	r0, [pc, #348]	@ (800963c <HAL_TIM_Base_Init+0x220>)
 80094de:	f7f7 ff9b 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00e      	beq.n	8009508 <HAL_TIM_Base_Init+0xec>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094f2:	d009      	beq.n	8009508 <HAL_TIM_Base_Init+0xec>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094fc:	d004      	beq.n	8009508 <HAL_TIM_Base_Init+0xec>
 80094fe:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8009502:	484e      	ldr	r0, [pc, #312]	@ (800963c <HAL_TIM_Base_Init+0x220>)
 8009504:	f7f7 ff88 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009510:	d004      	beq.n	800951c <HAL_TIM_Base_Init+0x100>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a41      	ldr	r2, [pc, #260]	@ (800961c <HAL_TIM_Base_Init+0x200>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d107      	bne.n	800952c <HAL_TIM_Base_Init+0x110>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	bf14      	ite	ne
 8009524:	2301      	movne	r3, #1
 8009526:	2300      	moveq	r3, #0
 8009528:	b2db      	uxtb	r3, r3
 800952a:	e00e      	b.n	800954a <HAL_TIM_Base_Init+0x12e>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d006      	beq.n	8009542 <HAL_TIM_Base_Init+0x126>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800953c:	d201      	bcs.n	8009542 <HAL_TIM_Base_Init+0x126>
 800953e:	2301      	movs	r3, #1
 8009540:	e000      	b.n	8009544 <HAL_TIM_Base_Init+0x128>
 8009542:	2300      	movs	r3, #0
 8009544:	f003 0301 	and.w	r3, r3, #1
 8009548:	b2db      	uxtb	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d104      	bne.n	8009558 <HAL_TIM_Base_Init+0x13c>
 800954e:	f240 1125 	movw	r1, #293	@ 0x125
 8009552:	483a      	ldr	r0, [pc, #232]	@ (800963c <HAL_TIM_Base_Init+0x220>)
 8009554:	f7f7 ff60 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d008      	beq.n	8009572 <HAL_TIM_Base_Init+0x156>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	2b80      	cmp	r3, #128	@ 0x80
 8009566:	d004      	beq.n	8009572 <HAL_TIM_Base_Init+0x156>
 8009568:	f44f 7193 	mov.w	r1, #294	@ 0x126
 800956c:	4833      	ldr	r0, [pc, #204]	@ (800963c <HAL_TIM_Base_Init+0x220>)
 800956e:	f7f7 ff53 	bl	8001418 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d106      	bne.n	800958c <HAL_TIM_Base_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7f8 f902 	bl	8001790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2202      	movs	r2, #2
 8009590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3304      	adds	r3, #4
 800959c:	4619      	mov	r1, r3
 800959e:	4610      	mov	r0, r2
 80095a0:	f001 fc18 	bl	800add4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	40012c00 	.word	0x40012c00
 8009614:	40000400 	.word	0x40000400
 8009618:	40000800 	.word	0x40000800
 800961c:	40000c00 	.word	0x40000c00
 8009620:	40001000 	.word	0x40001000
 8009624:	40001400 	.word	0x40001400
 8009628:	40013400 	.word	0x40013400
 800962c:	40014000 	.word	0x40014000
 8009630:	40014400 	.word	0x40014400
 8009634:	40014800 	.word	0x40014800
 8009638:	40015000 	.word	0x40015000
 800963c:	08010bc4 	.word	0x08010bc4

08009640 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d101      	bne.n	8009652 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e0eb      	b.n	800982a <HAL_TIM_PWM_Init+0x1ea>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a77      	ldr	r2, [pc, #476]	@ (8009834 <HAL_TIM_PWM_Init+0x1f4>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d03b      	beq.n	80096d4 <HAL_TIM_PWM_Init+0x94>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009664:	d036      	beq.n	80096d4 <HAL_TIM_PWM_Init+0x94>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a73      	ldr	r2, [pc, #460]	@ (8009838 <HAL_TIM_PWM_Init+0x1f8>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d031      	beq.n	80096d4 <HAL_TIM_PWM_Init+0x94>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a71      	ldr	r2, [pc, #452]	@ (800983c <HAL_TIM_PWM_Init+0x1fc>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d02c      	beq.n	80096d4 <HAL_TIM_PWM_Init+0x94>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a70      	ldr	r2, [pc, #448]	@ (8009840 <HAL_TIM_PWM_Init+0x200>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d027      	beq.n	80096d4 <HAL_TIM_PWM_Init+0x94>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a6e      	ldr	r2, [pc, #440]	@ (8009844 <HAL_TIM_PWM_Init+0x204>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d022      	beq.n	80096d4 <HAL_TIM_PWM_Init+0x94>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a6d      	ldr	r2, [pc, #436]	@ (8009848 <HAL_TIM_PWM_Init+0x208>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d01d      	beq.n	80096d4 <HAL_TIM_PWM_Init+0x94>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a6b      	ldr	r2, [pc, #428]	@ (800984c <HAL_TIM_PWM_Init+0x20c>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d018      	beq.n	80096d4 <HAL_TIM_PWM_Init+0x94>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a6a      	ldr	r2, [pc, #424]	@ (8009850 <HAL_TIM_PWM_Init+0x210>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d013      	beq.n	80096d4 <HAL_TIM_PWM_Init+0x94>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a68      	ldr	r2, [pc, #416]	@ (8009854 <HAL_TIM_PWM_Init+0x214>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d00e      	beq.n	80096d4 <HAL_TIM_PWM_Init+0x94>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a67      	ldr	r2, [pc, #412]	@ (8009858 <HAL_TIM_PWM_Init+0x218>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d009      	beq.n	80096d4 <HAL_TIM_PWM_Init+0x94>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a65      	ldr	r2, [pc, #404]	@ (800985c <HAL_TIM_PWM_Init+0x21c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d004      	beq.n	80096d4 <HAL_TIM_PWM_Init+0x94>
 80096ca:	f240 513f 	movw	r1, #1343	@ 0x53f
 80096ce:	4864      	ldr	r0, [pc, #400]	@ (8009860 <HAL_TIM_PWM_Init+0x220>)
 80096d0:	f7f7 fea2 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d014      	beq.n	8009706 <HAL_TIM_PWM_Init+0xc6>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	2b10      	cmp	r3, #16
 80096e2:	d010      	beq.n	8009706 <HAL_TIM_PWM_Init+0xc6>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	2b20      	cmp	r3, #32
 80096ea:	d00c      	beq.n	8009706 <HAL_TIM_PWM_Init+0xc6>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	2b40      	cmp	r3, #64	@ 0x40
 80096f2:	d008      	beq.n	8009706 <HAL_TIM_PWM_Init+0xc6>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	2b60      	cmp	r3, #96	@ 0x60
 80096fa:	d004      	beq.n	8009706 <HAL_TIM_PWM_Init+0xc6>
 80096fc:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 8009700:	4857      	ldr	r0, [pc, #348]	@ (8009860 <HAL_TIM_PWM_Init+0x220>)
 8009702:	f7f7 fe89 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00e      	beq.n	800972c <HAL_TIM_PWM_Init+0xec>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009716:	d009      	beq.n	800972c <HAL_TIM_PWM_Init+0xec>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009720:	d004      	beq.n	800972c <HAL_TIM_PWM_Init+0xec>
 8009722:	f240 5141 	movw	r1, #1345	@ 0x541
 8009726:	484e      	ldr	r0, [pc, #312]	@ (8009860 <HAL_TIM_PWM_Init+0x220>)
 8009728:	f7f7 fe76 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009734:	d004      	beq.n	8009740 <HAL_TIM_PWM_Init+0x100>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a41      	ldr	r2, [pc, #260]	@ (8009840 <HAL_TIM_PWM_Init+0x200>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d107      	bne.n	8009750 <HAL_TIM_PWM_Init+0x110>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	bf14      	ite	ne
 8009748:	2301      	movne	r3, #1
 800974a:	2300      	moveq	r3, #0
 800974c:	b2db      	uxtb	r3, r3
 800974e:	e00e      	b.n	800976e <HAL_TIM_PWM_Init+0x12e>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d006      	beq.n	8009766 <HAL_TIM_PWM_Init+0x126>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009760:	d201      	bcs.n	8009766 <HAL_TIM_PWM_Init+0x126>
 8009762:	2301      	movs	r3, #1
 8009764:	e000      	b.n	8009768 <HAL_TIM_PWM_Init+0x128>
 8009766:	2300      	movs	r3, #0
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b00      	cmp	r3, #0
 8009770:	d104      	bne.n	800977c <HAL_TIM_PWM_Init+0x13c>
 8009772:	f240 5142 	movw	r1, #1346	@ 0x542
 8009776:	483a      	ldr	r0, [pc, #232]	@ (8009860 <HAL_TIM_PWM_Init+0x220>)
 8009778:	f7f7 fe4e 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d008      	beq.n	8009796 <HAL_TIM_PWM_Init+0x156>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	2b80      	cmp	r3, #128	@ 0x80
 800978a:	d004      	beq.n	8009796 <HAL_TIM_PWM_Init+0x156>
 800978c:	f240 5143 	movw	r1, #1347	@ 0x543
 8009790:	4833      	ldr	r0, [pc, #204]	@ (8009860 <HAL_TIM_PWM_Init+0x220>)
 8009792:	f7f7 fe41 	bl	8001418 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d106      	bne.n	80097b0 <HAL_TIM_PWM_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7f7 ffd0 	bl	8001750 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2202      	movs	r2, #2
 80097b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	3304      	adds	r3, #4
 80097c0:	4619      	mov	r1, r3
 80097c2:	4610      	mov	r0, r2
 80097c4:	f001 fb06 	bl	800add4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	40012c00 	.word	0x40012c00
 8009838:	40000400 	.word	0x40000400
 800983c:	40000800 	.word	0x40000800
 8009840:	40000c00 	.word	0x40000c00
 8009844:	40001000 	.word	0x40001000
 8009848:	40001400 	.word	0x40001400
 800984c:	40013400 	.word	0x40013400
 8009850:	40014000 	.word	0x40014000
 8009854:	40014400 	.word	0x40014400
 8009858:	40014800 	.word	0x40014800
 800985c:	40015000 	.word	0x40015000
 8009860:	08010bc4 	.word	0x08010bc4

08009864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f003 0302 	and.w	r3, r3, #2
 8009882:	2b00      	cmp	r3, #0
 8009884:	d020      	beq.n	80098c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f003 0302 	and.w	r3, r3, #2
 800988c:	2b00      	cmp	r3, #0
 800988e:	d01b      	beq.n	80098c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f06f 0202 	mvn.w	r2, #2
 8009898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	f003 0303 	and.w	r3, r3, #3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d003      	beq.n	80098b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f001 fa72 	bl	800ad98 <HAL_TIM_IC_CaptureCallback>
 80098b4:	e005      	b.n	80098c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f001 fa64 	bl	800ad84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f001 fa75 	bl	800adac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	f003 0304 	and.w	r3, r3, #4
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d020      	beq.n	8009914 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f003 0304 	and.w	r3, r3, #4
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d01b      	beq.n	8009914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f06f 0204 	mvn.w	r2, #4
 80098e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2202      	movs	r2, #2
 80098ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d003      	beq.n	8009902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f001 fa4c 	bl	800ad98 <HAL_TIM_IC_CaptureCallback>
 8009900:	e005      	b.n	800990e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f001 fa3e 	bl	800ad84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f001 fa4f 	bl	800adac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	f003 0308 	and.w	r3, r3, #8
 800991a:	2b00      	cmp	r3, #0
 800991c:	d020      	beq.n	8009960 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f003 0308 	and.w	r3, r3, #8
 8009924:	2b00      	cmp	r3, #0
 8009926:	d01b      	beq.n	8009960 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f06f 0208 	mvn.w	r2, #8
 8009930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2204      	movs	r2, #4
 8009936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	f003 0303 	and.w	r3, r3, #3
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f001 fa26 	bl	800ad98 <HAL_TIM_IC_CaptureCallback>
 800994c:	e005      	b.n	800995a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f001 fa18 	bl	800ad84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f001 fa29 	bl	800adac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	f003 0310 	and.w	r3, r3, #16
 8009966:	2b00      	cmp	r3, #0
 8009968:	d020      	beq.n	80099ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f003 0310 	and.w	r3, r3, #16
 8009970:	2b00      	cmp	r3, #0
 8009972:	d01b      	beq.n	80099ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f06f 0210 	mvn.w	r2, #16
 800997c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2208      	movs	r2, #8
 8009982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	69db      	ldr	r3, [r3, #28]
 800998a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f001 fa00 	bl	800ad98 <HAL_TIM_IC_CaptureCallback>
 8009998:	e005      	b.n	80099a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f001 f9f2 	bl	800ad84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f001 fa03 	bl	800adac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	f003 0301 	and.w	r3, r3, #1
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00c      	beq.n	80099d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f003 0301 	and.w	r3, r3, #1
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d007      	beq.n	80099d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f06f 0201 	mvn.w	r2, #1
 80099c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7f7 fc90 	bl	80012f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d104      	bne.n	80099e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00c      	beq.n	80099fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d007      	beq.n	80099fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80099f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f002 f9f9 	bl	800bdf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00c      	beq.n	8009a22 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d007      	beq.n	8009a22 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f002 f9f1 	bl	800be04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00c      	beq.n	8009a46 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d007      	beq.n	8009a46 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f001 f9bd 	bl	800adc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	f003 0320 	and.w	r3, r3, #32
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00c      	beq.n	8009a6a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f003 0320 	and.w	r3, r3, #32
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d007      	beq.n	8009a6a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f06f 0220 	mvn.w	r2, #32
 8009a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f002 f9b9 	bl	800bddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00c      	beq.n	8009a8e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d007      	beq.n	8009a8e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f002 f9c5 	bl	800be18 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00c      	beq.n	8009ab2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d007      	beq.n	8009ab2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f002 f9bd 	bl	800be2c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00c      	beq.n	8009ad6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d007      	beq.n	8009ad6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f002 f9b5 	bl	800be40 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00c      	beq.n	8009afa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d007      	beq.n	8009afa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f002 f9ad 	bl	800be54 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009afa:	bf00      	nop
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
	...

08009b04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d016      	beq.n	8009b48 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2b04      	cmp	r3, #4
 8009b1e:	d013      	beq.n	8009b48 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b08      	cmp	r3, #8
 8009b24:	d010      	beq.n	8009b48 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b0c      	cmp	r3, #12
 8009b2a:	d00d      	beq.n	8009b48 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b10      	cmp	r3, #16
 8009b30:	d00a      	beq.n	8009b48 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2b14      	cmp	r3, #20
 8009b36:	d007      	beq.n	8009b48 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b3c      	cmp	r3, #60	@ 0x3c
 8009b3c:	d004      	beq.n	8009b48 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009b3e:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 8009b42:	4890      	ldr	r0, [pc, #576]	@ (8009d84 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8009b44:	f7f7 fc68 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b60      	cmp	r3, #96	@ 0x60
 8009b4e:	d01c      	beq.n	8009b8a <HAL_TIM_PWM_ConfigChannel+0x86>
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b70      	cmp	r3, #112	@ 0x70
 8009b56:	d018      	beq.n	8009b8a <HAL_TIM_PWM_ConfigChannel+0x86>
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a8a      	ldr	r2, [pc, #552]	@ (8009d88 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d013      	beq.n	8009b8a <HAL_TIM_PWM_ConfigChannel+0x86>
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a89      	ldr	r2, [pc, #548]	@ (8009d8c <HAL_TIM_PWM_ConfigChannel+0x288>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d00e      	beq.n	8009b8a <HAL_TIM_PWM_ConfigChannel+0x86>
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a87      	ldr	r2, [pc, #540]	@ (8009d90 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d009      	beq.n	8009b8a <HAL_TIM_PWM_ConfigChannel+0x86>
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a86      	ldr	r2, [pc, #536]	@ (8009d94 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d004      	beq.n	8009b8a <HAL_TIM_PWM_ConfigChannel+0x86>
 8009b80:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 8009b84:	487f      	ldr	r0, [pc, #508]	@ (8009d84 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8009b86:	f7f7 fc47 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d008      	beq.n	8009ba4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d004      	beq.n	8009ba4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8009b9a:	f241 01f5 	movw	r1, #4341	@ 0x10f5
 8009b9e:	4879      	ldr	r0, [pc, #484]	@ (8009d84 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8009ba0:	f7f7 fc3a 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d008      	beq.n	8009bbe <HAL_TIM_PWM_ConfigChannel+0xba>
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	2b04      	cmp	r3, #4
 8009bb2:	d004      	beq.n	8009bbe <HAL_TIM_PWM_ConfigChannel+0xba>
 8009bb4:	f241 01f6 	movw	r1, #4342	@ 0x10f6
 8009bb8:	4872      	ldr	r0, [pc, #456]	@ (8009d84 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8009bba:	f7f7 fc2d 	bl	8001418 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d101      	bne.n	8009bcc <HAL_TIM_PWM_ConfigChannel+0xc8>
 8009bc8:	2302      	movs	r3, #2
 8009bca:	e1f9      	b.n	8009fc0 <HAL_TIM_PWM_ConfigChannel+0x4bc>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b14      	cmp	r3, #20
 8009bd8:	f200 81ea 	bhi.w	8009fb0 <HAL_TIM_PWM_ConfigChannel+0x4ac>
 8009bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8009be4 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8009bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be2:	bf00      	nop
 8009be4:	08009c39 	.word	0x08009c39
 8009be8:	08009fb1 	.word	0x08009fb1
 8009bec:	08009fb1 	.word	0x08009fb1
 8009bf0:	08009fb1 	.word	0x08009fb1
 8009bf4:	08009ce7 	.word	0x08009ce7
 8009bf8:	08009fb1 	.word	0x08009fb1
 8009bfc:	08009fb1 	.word	0x08009fb1
 8009c00:	08009fb1 	.word	0x08009fb1
 8009c04:	08009dbd 	.word	0x08009dbd
 8009c08:	08009fb1 	.word	0x08009fb1
 8009c0c:	08009fb1 	.word	0x08009fb1
 8009c10:	08009fb1 	.word	0x08009fb1
 8009c14:	08009e4d 	.word	0x08009e4d
 8009c18:	08009fb1 	.word	0x08009fb1
 8009c1c:	08009fb1 	.word	0x08009fb1
 8009c20:	08009fb1 	.word	0x08009fb1
 8009c24:	08009edf 	.word	0x08009edf
 8009c28:	08009fb1 	.word	0x08009fb1
 8009c2c:	08009fb1 	.word	0x08009fb1
 8009c30:	08009fb1 	.word	0x08009fb1
 8009c34:	08009f47 	.word	0x08009f47
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a56      	ldr	r2, [pc, #344]	@ (8009d98 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d031      	beq.n	8009ca6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c4a:	d02c      	beq.n	8009ca6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a52      	ldr	r2, [pc, #328]	@ (8009d9c <HAL_TIM_PWM_ConfigChannel+0x298>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d027      	beq.n	8009ca6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a51      	ldr	r2, [pc, #324]	@ (8009da0 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d022      	beq.n	8009ca6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a4f      	ldr	r2, [pc, #316]	@ (8009da4 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d01d      	beq.n	8009ca6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a4e      	ldr	r2, [pc, #312]	@ (8009da8 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d018      	beq.n	8009ca6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a4c      	ldr	r2, [pc, #304]	@ (8009dac <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d013      	beq.n	8009ca6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a4b      	ldr	r2, [pc, #300]	@ (8009db0 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d00e      	beq.n	8009ca6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a49      	ldr	r2, [pc, #292]	@ (8009db4 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d009      	beq.n	8009ca6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a48      	ldr	r2, [pc, #288]	@ (8009db8 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d004      	beq.n	8009ca6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 8009c9c:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 8009ca0:	4838      	ldr	r0, [pc, #224]	@ (8009d84 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8009ca2:	f7f7 fbb9 	bl	8001418 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	68b9      	ldr	r1, [r7, #8]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f001 f945 	bl	800af3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	699a      	ldr	r2, [r3, #24]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f042 0208 	orr.w	r2, r2, #8
 8009cc0:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	699a      	ldr	r2, [r3, #24]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f022 0204 	bic.w	r2, r2, #4
 8009cd0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6999      	ldr	r1, [r3, #24]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	691a      	ldr	r2, [r3, #16]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	430a      	orrs	r2, r1
 8009ce2:	619a      	str	r2, [r3, #24]
      break;
 8009ce4:	e167      	b.n	8009fb6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a2b      	ldr	r2, [pc, #172]	@ (8009d98 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d027      	beq.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x23c>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cf8:	d022      	beq.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x23c>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a27      	ldr	r2, [pc, #156]	@ (8009d9c <HAL_TIM_PWM_ConfigChannel+0x298>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d01d      	beq.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x23c>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a25      	ldr	r2, [pc, #148]	@ (8009da0 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d018      	beq.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x23c>
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a24      	ldr	r2, [pc, #144]	@ (8009da4 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d013      	beq.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x23c>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a22      	ldr	r2, [pc, #136]	@ (8009da8 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d00e      	beq.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x23c>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a21      	ldr	r2, [pc, #132]	@ (8009dac <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d009      	beq.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x23c>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a21      	ldr	r2, [pc, #132]	@ (8009db8 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d004      	beq.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x23c>
 8009d36:	f241 1111 	movw	r1, #4369	@ 0x1111
 8009d3a:	4812      	ldr	r0, [pc, #72]	@ (8009d84 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8009d3c:	f7f7 fb6c 	bl	8001418 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68b9      	ldr	r1, [r7, #8]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f001 f9bc 	bl	800b0c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	699a      	ldr	r2, [r3, #24]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	699a      	ldr	r2, [r3, #24]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6999      	ldr	r1, [r3, #24]
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	021a      	lsls	r2, r3, #8
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	430a      	orrs	r2, r1
 8009d7e:	619a      	str	r2, [r3, #24]
      break;
 8009d80:	e119      	b.n	8009fb6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
 8009d82:	bf00      	nop
 8009d84:	08010bc4 	.word	0x08010bc4
 8009d88:	00010040 	.word	0x00010040
 8009d8c:	00010050 	.word	0x00010050
 8009d90:	00010060 	.word	0x00010060
 8009d94:	00010070 	.word	0x00010070
 8009d98:	40012c00 	.word	0x40012c00
 8009d9c:	40000400 	.word	0x40000400
 8009da0:	40000800 	.word	0x40000800
 8009da4:	40000c00 	.word	0x40000c00
 8009da8:	40013400 	.word	0x40013400
 8009dac:	40014000 	.word	0x40014000
 8009db0:	40014400 	.word	0x40014400
 8009db4:	40014800 	.word	0x40014800
 8009db8:	40015000 	.word	0x40015000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a81      	ldr	r2, [pc, #516]	@ (8009fc8 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d022      	beq.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x308>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dce:	d01d      	beq.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x308>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a7d      	ldr	r2, [pc, #500]	@ (8009fcc <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d018      	beq.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x308>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a7c      	ldr	r2, [pc, #496]	@ (8009fd0 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d013      	beq.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x308>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a7a      	ldr	r2, [pc, #488]	@ (8009fd4 <HAL_TIM_PWM_ConfigChannel+0x4d0>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d00e      	beq.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x308>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a79      	ldr	r2, [pc, #484]	@ (8009fd8 <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d009      	beq.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x308>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a77      	ldr	r2, [pc, #476]	@ (8009fdc <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d004      	beq.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x308>
 8009e02:	f241 1122 	movw	r1, #4386	@ 0x1122
 8009e06:	4876      	ldr	r0, [pc, #472]	@ (8009fe0 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 8009e08:	f7f7 fb06 	bl	8001418 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68b9      	ldr	r1, [r7, #8]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f001 fa12 	bl	800b23c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	69da      	ldr	r2, [r3, #28]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f042 0208 	orr.w	r2, r2, #8
 8009e26:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	69da      	ldr	r2, [r3, #28]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f022 0204 	bic.w	r2, r2, #4
 8009e36:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	69d9      	ldr	r1, [r3, #28]
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	691a      	ldr	r2, [r3, #16]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	430a      	orrs	r2, r1
 8009e48:	61da      	str	r2, [r3, #28]
      break;
 8009e4a:	e0b4      	b.n	8009fb6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a5d      	ldr	r2, [pc, #372]	@ (8009fc8 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d022      	beq.n	8009e9c <HAL_TIM_PWM_ConfigChannel+0x398>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e5e:	d01d      	beq.n	8009e9c <HAL_TIM_PWM_ConfigChannel+0x398>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a59      	ldr	r2, [pc, #356]	@ (8009fcc <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d018      	beq.n	8009e9c <HAL_TIM_PWM_ConfigChannel+0x398>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a58      	ldr	r2, [pc, #352]	@ (8009fd0 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d013      	beq.n	8009e9c <HAL_TIM_PWM_ConfigChannel+0x398>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a56      	ldr	r2, [pc, #344]	@ (8009fd4 <HAL_TIM_PWM_ConfigChannel+0x4d0>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d00e      	beq.n	8009e9c <HAL_TIM_PWM_ConfigChannel+0x398>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a55      	ldr	r2, [pc, #340]	@ (8009fd8 <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d009      	beq.n	8009e9c <HAL_TIM_PWM_ConfigChannel+0x398>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a53      	ldr	r2, [pc, #332]	@ (8009fdc <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d004      	beq.n	8009e9c <HAL_TIM_PWM_ConfigChannel+0x398>
 8009e92:	f241 1133 	movw	r1, #4403	@ 0x1133
 8009e96:	4852      	ldr	r0, [pc, #328]	@ (8009fe0 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 8009e98:	f7f7 fabe 	bl	8001418 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68b9      	ldr	r1, [r7, #8]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f001 fa86 	bl	800b3b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	69da      	ldr	r2, [r3, #28]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009eb6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	69da      	ldr	r2, [r3, #28]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ec6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	69d9      	ldr	r1, [r3, #28]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	021a      	lsls	r2, r3, #8
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	430a      	orrs	r2, r1
 8009eda:	61da      	str	r2, [r3, #28]
      break;
 8009edc:	e06b      	b.n	8009fb6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a39      	ldr	r2, [pc, #228]	@ (8009fc8 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d00e      	beq.n	8009f06 <HAL_TIM_PWM_ConfigChannel+0x402>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a3a      	ldr	r2, [pc, #232]	@ (8009fd8 <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d009      	beq.n	8009f06 <HAL_TIM_PWM_ConfigChannel+0x402>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a39      	ldr	r2, [pc, #228]	@ (8009fdc <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d004      	beq.n	8009f06 <HAL_TIM_PWM_ConfigChannel+0x402>
 8009efc:	f241 1144 	movw	r1, #4420	@ 0x1144
 8009f00:	4837      	ldr	r0, [pc, #220]	@ (8009fe0 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 8009f02:	f7f7 fa89 	bl	8001418 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68b9      	ldr	r1, [r7, #8]
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f001 fb0d 	bl	800b52c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f042 0208 	orr.w	r2, r2, #8
 8009f20:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f022 0204 	bic.w	r2, r2, #4
 8009f30:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	691a      	ldr	r2, [r3, #16]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	430a      	orrs	r2, r1
 8009f42:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009f44:	e037      	b.n	8009fb6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8009fc8 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d00e      	beq.n	8009f6e <HAL_TIM_PWM_ConfigChannel+0x46a>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a20      	ldr	r2, [pc, #128]	@ (8009fd8 <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d009      	beq.n	8009f6e <HAL_TIM_PWM_ConfigChannel+0x46a>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8009fdc <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d004      	beq.n	8009f6e <HAL_TIM_PWM_ConfigChannel+0x46a>
 8009f64:	f241 1155 	movw	r1, #4437	@ 0x1155
 8009f68:	481d      	ldr	r0, [pc, #116]	@ (8009fe0 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 8009f6a:	f7f7 fa55 	bl	8001418 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68b9      	ldr	r1, [r7, #8]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f001 fb43 	bl	800b600 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f88:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f98:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	021a      	lsls	r2, r3, #8
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	430a      	orrs	r2, r1
 8009fac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009fae:	e002      	b.n	8009fb6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    default:
      status = HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8009fb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3718      	adds	r7, #24
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	40012c00 	.word	0x40012c00
 8009fcc:	40000400 	.word	0x40000400
 8009fd0:	40000800 	.word	0x40000800
 8009fd4:	40000c00 	.word	0x40000c00
 8009fd8:	40013400 	.word	0x40013400
 8009fdc:	40015000 	.word	0x40015000
 8009fe0:	08010bc4 	.word	0x08010bc4

08009fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d102      	bne.n	800a002 <HAL_TIM_ConfigClockSource+0x1e>
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	f000 beb3 	b.w	800ad68 <HAL_TIM_ConfigClockSource+0xd84>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2202      	movs	r2, #2
 800a00e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a01a:	d051      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b70      	cmp	r3, #112	@ 0x70
 800a022:	d04d      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a02c:	d048      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b40      	cmp	r3, #64	@ 0x40
 800a034:	d044      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2b50      	cmp	r3, #80	@ 0x50
 800a03c:	d040      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2b60      	cmp	r3, #96	@ 0x60
 800a044:	d03c      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d038      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2b10      	cmp	r3, #16
 800a054:	d034      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b20      	cmp	r3, #32
 800a05c:	d030      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2b30      	cmp	r3, #48	@ 0x30
 800a064:	d02c      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a06e:	d027      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a078:	d022      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a7f      	ldr	r2, [pc, #508]	@ (800a27c <HAL_TIM_ConfigClockSource+0x298>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d01d      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a7d      	ldr	r2, [pc, #500]	@ (800a280 <HAL_TIM_ConfigClockSource+0x29c>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d018      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a7c      	ldr	r2, [pc, #496]	@ (800a284 <HAL_TIM_ConfigClockSource+0x2a0>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d013      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a7a      	ldr	r2, [pc, #488]	@ (800a288 <HAL_TIM_ConfigClockSource+0x2a4>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d00e      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a79      	ldr	r2, [pc, #484]	@ (800a28c <HAL_TIM_ConfigClockSource+0x2a8>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d009      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a77      	ldr	r2, [pc, #476]	@ (800a290 <HAL_TIM_ConfigClockSource+0x2ac>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d004      	beq.n	800a0c0 <HAL_TIM_ConfigClockSource+0xdc>
 800a0b6:	f241 51c5 	movw	r1, #5573	@ 0x15c5
 800a0ba:	4876      	ldr	r0, [pc, #472]	@ (800a294 <HAL_TIM_ConfigClockSource+0x2b0>)
 800a0bc:	f7f7 f9ac 	bl	8001418 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a0ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a0d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68ba      	ldr	r2, [r7, #8]
 800a0e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a69      	ldr	r2, [pc, #420]	@ (800a290 <HAL_TIM_ConfigClockSource+0x2ac>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	f000 832a 	beq.w	800a744 <HAL_TIM_ConfigClockSource+0x760>
 800a0f0:	4a67      	ldr	r2, [pc, #412]	@ (800a290 <HAL_TIM_ConfigClockSource+0x2ac>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	f200 862b 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
 800a0f8:	4a64      	ldr	r2, [pc, #400]	@ (800a28c <HAL_TIM_ConfigClockSource+0x2a8>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	f000 8322 	beq.w	800a744 <HAL_TIM_ConfigClockSource+0x760>
 800a100:	4a62      	ldr	r2, [pc, #392]	@ (800a28c <HAL_TIM_ConfigClockSource+0x2a8>)
 800a102:	4293      	cmp	r3, r2
 800a104:	f200 8623 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
 800a108:	4a5f      	ldr	r2, [pc, #380]	@ (800a288 <HAL_TIM_ConfigClockSource+0x2a4>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	f000 831a 	beq.w	800a744 <HAL_TIM_ConfigClockSource+0x760>
 800a110:	4a5d      	ldr	r2, [pc, #372]	@ (800a288 <HAL_TIM_ConfigClockSource+0x2a4>)
 800a112:	4293      	cmp	r3, r2
 800a114:	f200 861b 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
 800a118:	4a5a      	ldr	r2, [pc, #360]	@ (800a284 <HAL_TIM_ConfigClockSource+0x2a0>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	f000 8312 	beq.w	800a744 <HAL_TIM_ConfigClockSource+0x760>
 800a120:	4a58      	ldr	r2, [pc, #352]	@ (800a284 <HAL_TIM_ConfigClockSource+0x2a0>)
 800a122:	4293      	cmp	r3, r2
 800a124:	f200 8613 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
 800a128:	4a55      	ldr	r2, [pc, #340]	@ (800a280 <HAL_TIM_ConfigClockSource+0x29c>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	f000 830a 	beq.w	800a744 <HAL_TIM_ConfigClockSource+0x760>
 800a130:	4a53      	ldr	r2, [pc, #332]	@ (800a280 <HAL_TIM_ConfigClockSource+0x29c>)
 800a132:	4293      	cmp	r3, r2
 800a134:	f200 860b 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
 800a138:	4a50      	ldr	r2, [pc, #320]	@ (800a27c <HAL_TIM_ConfigClockSource+0x298>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	f000 8302 	beq.w	800a744 <HAL_TIM_ConfigClockSource+0x760>
 800a140:	4a4e      	ldr	r2, [pc, #312]	@ (800a27c <HAL_TIM_ConfigClockSource+0x298>)
 800a142:	4293      	cmp	r3, r2
 800a144:	f200 8603 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
 800a148:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a14c:	f000 82fa 	beq.w	800a744 <HAL_TIM_ConfigClockSource+0x760>
 800a150:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a154:	f200 85fb 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
 800a158:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a15c:	f000 82f2 	beq.w	800a744 <HAL_TIM_ConfigClockSource+0x760>
 800a160:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a164:	f200 85f3 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
 800a168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a16c:	f000 8125 	beq.w	800a3ba <HAL_TIM_ConfigClockSource+0x3d6>
 800a170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a174:	f200 85eb 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
 800a178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a17c:	d02f      	beq.n	800a1de <HAL_TIM_ConfigClockSource+0x1fa>
 800a17e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a182:	f200 85e4 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
 800a186:	2b70      	cmp	r3, #112	@ 0x70
 800a188:	f000 809c 	beq.w	800a2c4 <HAL_TIM_ConfigClockSource+0x2e0>
 800a18c:	2b70      	cmp	r3, #112	@ 0x70
 800a18e:	f200 85de 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
 800a192:	2b60      	cmp	r3, #96	@ 0x60
 800a194:	f000 81f6 	beq.w	800a584 <HAL_TIM_ConfigClockSource+0x5a0>
 800a198:	2b60      	cmp	r3, #96	@ 0x60
 800a19a:	f200 85d8 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
 800a19e:	2b50      	cmp	r3, #80	@ 0x50
 800a1a0:	f000 8190 	beq.w	800a4c4 <HAL_TIM_ConfigClockSource+0x4e0>
 800a1a4:	2b50      	cmp	r3, #80	@ 0x50
 800a1a6:	f200 85d2 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
 800a1aa:	2b40      	cmp	r3, #64	@ 0x40
 800a1ac:	f000 825a 	beq.w	800a664 <HAL_TIM_ConfigClockSource+0x680>
 800a1b0:	2b40      	cmp	r3, #64	@ 0x40
 800a1b2:	f200 85cc 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
 800a1b6:	2b30      	cmp	r3, #48	@ 0x30
 800a1b8:	f000 82c4 	beq.w	800a744 <HAL_TIM_ConfigClockSource+0x760>
 800a1bc:	2b30      	cmp	r3, #48	@ 0x30
 800a1be:	f200 85c6 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
 800a1c2:	2b20      	cmp	r3, #32
 800a1c4:	f000 82be 	beq.w	800a744 <HAL_TIM_ConfigClockSource+0x760>
 800a1c8:	2b20      	cmp	r3, #32
 800a1ca:	f200 85c0 	bhi.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f000 82b8 	beq.w	800a744 <HAL_TIM_ConfigClockSource+0x760>
 800a1d4:	2b10      	cmp	r3, #16
 800a1d6:	f000 82b5 	beq.w	800a744 <HAL_TIM_ConfigClockSource+0x760>
 800a1da:	f000 bdb8 	b.w	800ad4e <HAL_TIM_ConfigClockSource+0xd6a>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a2d      	ldr	r2, [pc, #180]	@ (800a298 <HAL_TIM_ConfigClockSource+0x2b4>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	f000 85b5 	beq.w	800ad54 <HAL_TIM_ConfigClockSource+0xd70>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1f2:	f000 85af 	beq.w	800ad54 <HAL_TIM_ConfigClockSource+0xd70>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a28      	ldr	r2, [pc, #160]	@ (800a29c <HAL_TIM_ConfigClockSource+0x2b8>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	f000 85a9 	beq.w	800ad54 <HAL_TIM_ConfigClockSource+0xd70>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a26      	ldr	r2, [pc, #152]	@ (800a2a0 <HAL_TIM_ConfigClockSource+0x2bc>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	f000 85a3 	beq.w	800ad54 <HAL_TIM_ConfigClockSource+0xd70>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a24      	ldr	r2, [pc, #144]	@ (800a2a4 <HAL_TIM_ConfigClockSource+0x2c0>)
 800a214:	4293      	cmp	r3, r2
 800a216:	f000 859d 	beq.w	800ad54 <HAL_TIM_ConfigClockSource+0xd70>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a22      	ldr	r2, [pc, #136]	@ (800a2a8 <HAL_TIM_ConfigClockSource+0x2c4>)
 800a220:	4293      	cmp	r3, r2
 800a222:	f000 8597 	beq.w	800ad54 <HAL_TIM_ConfigClockSource+0xd70>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a20      	ldr	r2, [pc, #128]	@ (800a2ac <HAL_TIM_ConfigClockSource+0x2c8>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	f000 8591 	beq.w	800ad54 <HAL_TIM_ConfigClockSource+0xd70>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a1e      	ldr	r2, [pc, #120]	@ (800a2b0 <HAL_TIM_ConfigClockSource+0x2cc>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	f000 858b 	beq.w	800ad54 <HAL_TIM_ConfigClockSource+0xd70>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a1c      	ldr	r2, [pc, #112]	@ (800a2b4 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a244:	4293      	cmp	r3, r2
 800a246:	f000 8585 	beq.w	800ad54 <HAL_TIM_ConfigClockSource+0xd70>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a1a      	ldr	r2, [pc, #104]	@ (800a2b8 <HAL_TIM_ConfigClockSource+0x2d4>)
 800a250:	4293      	cmp	r3, r2
 800a252:	f000 857f 	beq.w	800ad54 <HAL_TIM_ConfigClockSource+0xd70>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a18      	ldr	r2, [pc, #96]	@ (800a2bc <HAL_TIM_ConfigClockSource+0x2d8>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	f000 8579 	beq.w	800ad54 <HAL_TIM_ConfigClockSource+0xd70>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a16      	ldr	r2, [pc, #88]	@ (800a2c0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	f000 8573 	beq.w	800ad54 <HAL_TIM_ConfigClockSource+0xd70>
 800a26e:	f241 51d1 	movw	r1, #5585	@ 0x15d1
 800a272:	4808      	ldr	r0, [pc, #32]	@ (800a294 <HAL_TIM_ConfigClockSource+0x2b0>)
 800a274:	f7f7 f8d0 	bl	8001418 <assert_failed>
      break;
 800a278:	f000 bd6c 	b.w	800ad54 <HAL_TIM_ConfigClockSource+0xd70>
 800a27c:	00100020 	.word	0x00100020
 800a280:	00100030 	.word	0x00100030
 800a284:	00100040 	.word	0x00100040
 800a288:	00100050 	.word	0x00100050
 800a28c:	00100060 	.word	0x00100060
 800a290:	00100070 	.word	0x00100070
 800a294:	08010bc4 	.word	0x08010bc4
 800a298:	40012c00 	.word	0x40012c00
 800a29c:	40000400 	.word	0x40000400
 800a2a0:	40000800 	.word	0x40000800
 800a2a4:	40000c00 	.word	0x40000c00
 800a2a8:	40001000 	.word	0x40001000
 800a2ac:	40001400 	.word	0x40001400
 800a2b0:	40013400 	.word	0x40013400
 800a2b4:	40014000 	.word	0x40014000
 800a2b8:	40014400 	.word	0x40014400
 800a2bc:	40014800 	.word	0x40014800
 800a2c0:	40015000 	.word	0x40015000
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a77      	ldr	r2, [pc, #476]	@ (800a4a8 <HAL_TIM_ConfigClockSource+0x4c4>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d022      	beq.n	800a314 <HAL_TIM_ConfigClockSource+0x330>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2d6:	d01d      	beq.n	800a314 <HAL_TIM_ConfigClockSource+0x330>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a73      	ldr	r2, [pc, #460]	@ (800a4ac <HAL_TIM_ConfigClockSource+0x4c8>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d018      	beq.n	800a314 <HAL_TIM_ConfigClockSource+0x330>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a72      	ldr	r2, [pc, #456]	@ (800a4b0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d013      	beq.n	800a314 <HAL_TIM_ConfigClockSource+0x330>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a70      	ldr	r2, [pc, #448]	@ (800a4b4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d00e      	beq.n	800a314 <HAL_TIM_ConfigClockSource+0x330>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a6f      	ldr	r2, [pc, #444]	@ (800a4b8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d009      	beq.n	800a314 <HAL_TIM_ConfigClockSource+0x330>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a6d      	ldr	r2, [pc, #436]	@ (800a4bc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d004      	beq.n	800a314 <HAL_TIM_ConfigClockSource+0x330>
 800a30a:	f241 51d8 	movw	r1, #5592	@ 0x15d8
 800a30e:	486c      	ldr	r0, [pc, #432]	@ (800a4c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800a310:	f7f7 f882 	bl	8001418 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d013      	beq.n	800a344 <HAL_TIM_ConfigClockSource+0x360>
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a324:	d00e      	beq.n	800a344 <HAL_TIM_ConfigClockSource+0x360>
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a32e:	d009      	beq.n	800a344 <HAL_TIM_ConfigClockSource+0x360>
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a338:	d004      	beq.n	800a344 <HAL_TIM_ConfigClockSource+0x360>
 800a33a:	f241 51db 	movw	r1, #5595	@ 0x15db
 800a33e:	4860      	ldr	r0, [pc, #384]	@ (800a4c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800a340:	f7f7 f86a 	bl	8001418 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a34c:	d014      	beq.n	800a378 <HAL_TIM_ConfigClockSource+0x394>
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d010      	beq.n	800a378 <HAL_TIM_ConfigClockSource+0x394>
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00c      	beq.n	800a378 <HAL_TIM_ConfigClockSource+0x394>
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	2b02      	cmp	r3, #2
 800a364:	d008      	beq.n	800a378 <HAL_TIM_ConfigClockSource+0x394>
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	2b0a      	cmp	r3, #10
 800a36c:	d004      	beq.n	800a378 <HAL_TIM_ConfigClockSource+0x394>
 800a36e:	f241 51dc 	movw	r1, #5596	@ 0x15dc
 800a372:	4853      	ldr	r0, [pc, #332]	@ (800a4c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800a374:	f7f7 f850 	bl	8001418 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	2b0f      	cmp	r3, #15
 800a37e:	d904      	bls.n	800a38a <HAL_TIM_ConfigClockSource+0x3a6>
 800a380:	f241 51dd 	movw	r1, #5597	@ 0x15dd
 800a384:	484e      	ldr	r0, [pc, #312]	@ (800a4c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800a386:	f7f7 f847 	bl	8001418 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a39a:	f001 fa19 	bl	800b7d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a3ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	609a      	str	r2, [r3, #8]
      break;
 800a3b6:	f000 bcce 	b.w	800ad56 <HAL_TIM_ConfigClockSource+0xd72>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a3a      	ldr	r2, [pc, #232]	@ (800a4a8 <HAL_TIM_ConfigClockSource+0x4c4>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d022      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0x426>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3cc:	d01d      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0x426>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a36      	ldr	r2, [pc, #216]	@ (800a4ac <HAL_TIM_ConfigClockSource+0x4c8>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d018      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0x426>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a34      	ldr	r2, [pc, #208]	@ (800a4b0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d013      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0x426>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a33      	ldr	r2, [pc, #204]	@ (800a4b4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d00e      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0x426>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a31      	ldr	r2, [pc, #196]	@ (800a4b8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d009      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0x426>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a30      	ldr	r2, [pc, #192]	@ (800a4bc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d004      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0x426>
 800a400:	f241 51f0 	movw	r1, #5616	@ 0x15f0
 800a404:	482e      	ldr	r0, [pc, #184]	@ (800a4c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800a406:	f7f7 f807 	bl	8001418 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d013      	beq.n	800a43a <HAL_TIM_ConfigClockSource+0x456>
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a41a:	d00e      	beq.n	800a43a <HAL_TIM_ConfigClockSource+0x456>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a424:	d009      	beq.n	800a43a <HAL_TIM_ConfigClockSource+0x456>
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a42e:	d004      	beq.n	800a43a <HAL_TIM_ConfigClockSource+0x456>
 800a430:	f241 51f3 	movw	r1, #5619	@ 0x15f3
 800a434:	4822      	ldr	r0, [pc, #136]	@ (800a4c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800a436:	f7f6 ffef 	bl	8001418 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a442:	d014      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x48a>
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d010      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x48a>
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00c      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x48a>
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d008      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x48a>
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	2b0a      	cmp	r3, #10
 800a462:	d004      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x48a>
 800a464:	f241 51f4 	movw	r1, #5620	@ 0x15f4
 800a468:	4815      	ldr	r0, [pc, #84]	@ (800a4c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800a46a:	f7f6 ffd5 	bl	8001418 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	2b0f      	cmp	r3, #15
 800a474:	d904      	bls.n	800a480 <HAL_TIM_ConfigClockSource+0x49c>
 800a476:	f241 51f5 	movw	r1, #5621	@ 0x15f5
 800a47a:	4811      	ldr	r0, [pc, #68]	@ (800a4c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800a47c:	f7f6 ffcc 	bl	8001418 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a490:	f001 f99e 	bl	800b7d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	689a      	ldr	r2, [r3, #8]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a4a2:	609a      	str	r2, [r3, #8]
      break;
 800a4a4:	f000 bc57 	b.w	800ad56 <HAL_TIM_ConfigClockSource+0xd72>
 800a4a8:	40012c00 	.word	0x40012c00
 800a4ac:	40000400 	.word	0x40000400
 800a4b0:	40000800 	.word	0x40000800
 800a4b4:	40000c00 	.word	0x40000c00
 800a4b8:	40013400 	.word	0x40013400
 800a4bc:	40015000 	.word	0x40015000
 800a4c0:	08010bc4 	.word	0x08010bc4
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a5e      	ldr	r2, [pc, #376]	@ (800a644 <HAL_TIM_ConfigClockSource+0x660>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d027      	beq.n	800a51e <HAL_TIM_ConfigClockSource+0x53a>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4d6:	d022      	beq.n	800a51e <HAL_TIM_ConfigClockSource+0x53a>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a5a      	ldr	r2, [pc, #360]	@ (800a648 <HAL_TIM_ConfigClockSource+0x664>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d01d      	beq.n	800a51e <HAL_TIM_ConfigClockSource+0x53a>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a59      	ldr	r2, [pc, #356]	@ (800a64c <HAL_TIM_ConfigClockSource+0x668>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d018      	beq.n	800a51e <HAL_TIM_ConfigClockSource+0x53a>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a57      	ldr	r2, [pc, #348]	@ (800a650 <HAL_TIM_ConfigClockSource+0x66c>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d013      	beq.n	800a51e <HAL_TIM_ConfigClockSource+0x53a>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a56      	ldr	r2, [pc, #344]	@ (800a654 <HAL_TIM_ConfigClockSource+0x670>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d00e      	beq.n	800a51e <HAL_TIM_ConfigClockSource+0x53a>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a54      	ldr	r2, [pc, #336]	@ (800a658 <HAL_TIM_ConfigClockSource+0x674>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d009      	beq.n	800a51e <HAL_TIM_ConfigClockSource+0x53a>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a53      	ldr	r2, [pc, #332]	@ (800a65c <HAL_TIM_ConfigClockSource+0x678>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d004      	beq.n	800a51e <HAL_TIM_ConfigClockSource+0x53a>
 800a514:	f241 6104 	movw	r1, #5636	@ 0x1604
 800a518:	4851      	ldr	r0, [pc, #324]	@ (800a660 <HAL_TIM_ConfigClockSource+0x67c>)
 800a51a:	f7f6 ff7d 	bl	8001418 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a526:	d014      	beq.n	800a552 <HAL_TIM_ConfigClockSource+0x56e>
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d010      	beq.n	800a552 <HAL_TIM_ConfigClockSource+0x56e>
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00c      	beq.n	800a552 <HAL_TIM_ConfigClockSource+0x56e>
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d008      	beq.n	800a552 <HAL_TIM_ConfigClockSource+0x56e>
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	2b0a      	cmp	r3, #10
 800a546:	d004      	beq.n	800a552 <HAL_TIM_ConfigClockSource+0x56e>
 800a548:	f241 6107 	movw	r1, #5639	@ 0x1607
 800a54c:	4844      	ldr	r0, [pc, #272]	@ (800a660 <HAL_TIM_ConfigClockSource+0x67c>)
 800a54e:	f7f6 ff63 	bl	8001418 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	2b0f      	cmp	r3, #15
 800a558:	d904      	bls.n	800a564 <HAL_TIM_ConfigClockSource+0x580>
 800a55a:	f241 6108 	movw	r1, #5640	@ 0x1608
 800a55e:	4840      	ldr	r0, [pc, #256]	@ (800a660 <HAL_TIM_ConfigClockSource+0x67c>)
 800a560:	f7f6 ff5a 	bl	8001418 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a570:	461a      	mov	r2, r3
 800a572:	f001 f8b1 	bl	800b6d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2150      	movs	r1, #80	@ 0x50
 800a57c:	4618      	mov	r0, r3
 800a57e:	f001 f90a 	bl	800b796 <TIM_ITRx_SetConfig>
      break;
 800a582:	e3e8      	b.n	800ad56 <HAL_TIM_ConfigClockSource+0xd72>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a2e      	ldr	r2, [pc, #184]	@ (800a644 <HAL_TIM_ConfigClockSource+0x660>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d027      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x5fa>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a596:	d022      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x5fa>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a2a      	ldr	r2, [pc, #168]	@ (800a648 <HAL_TIM_ConfigClockSource+0x664>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d01d      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x5fa>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a29      	ldr	r2, [pc, #164]	@ (800a64c <HAL_TIM_ConfigClockSource+0x668>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d018      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x5fa>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a27      	ldr	r2, [pc, #156]	@ (800a650 <HAL_TIM_ConfigClockSource+0x66c>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d013      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x5fa>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a26      	ldr	r2, [pc, #152]	@ (800a654 <HAL_TIM_ConfigClockSource+0x670>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d00e      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x5fa>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a24      	ldr	r2, [pc, #144]	@ (800a658 <HAL_TIM_ConfigClockSource+0x674>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d009      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x5fa>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a23      	ldr	r2, [pc, #140]	@ (800a65c <HAL_TIM_ConfigClockSource+0x678>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d004      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0x5fa>
 800a5d4:	f241 6114 	movw	r1, #5652	@ 0x1614
 800a5d8:	4821      	ldr	r0, [pc, #132]	@ (800a660 <HAL_TIM_ConfigClockSource+0x67c>)
 800a5da:	f7f6 ff1d 	bl	8001418 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5e6:	d014      	beq.n	800a612 <HAL_TIM_ConfigClockSource+0x62e>
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d010      	beq.n	800a612 <HAL_TIM_ConfigClockSource+0x62e>
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00c      	beq.n	800a612 <HAL_TIM_ConfigClockSource+0x62e>
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d008      	beq.n	800a612 <HAL_TIM_ConfigClockSource+0x62e>
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	2b0a      	cmp	r3, #10
 800a606:	d004      	beq.n	800a612 <HAL_TIM_ConfigClockSource+0x62e>
 800a608:	f241 6117 	movw	r1, #5655	@ 0x1617
 800a60c:	4814      	ldr	r0, [pc, #80]	@ (800a660 <HAL_TIM_ConfigClockSource+0x67c>)
 800a60e:	f7f6 ff03 	bl	8001418 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	2b0f      	cmp	r3, #15
 800a618:	d904      	bls.n	800a624 <HAL_TIM_ConfigClockSource+0x640>
 800a61a:	f241 6118 	movw	r1, #5656	@ 0x1618
 800a61e:	4810      	ldr	r0, [pc, #64]	@ (800a660 <HAL_TIM_ConfigClockSource+0x67c>)
 800a620:	f7f6 fefa 	bl	8001418 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a630:	461a      	mov	r2, r3
 800a632:	f001 f880 	bl	800b736 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2160      	movs	r1, #96	@ 0x60
 800a63c:	4618      	mov	r0, r3
 800a63e:	f001 f8aa 	bl	800b796 <TIM_ITRx_SetConfig>
      break;
 800a642:	e388      	b.n	800ad56 <HAL_TIM_ConfigClockSource+0xd72>
 800a644:	40012c00 	.word	0x40012c00
 800a648:	40000400 	.word	0x40000400
 800a64c:	40000800 	.word	0x40000800
 800a650:	40000c00 	.word	0x40000c00
 800a654:	40013400 	.word	0x40013400
 800a658:	40014000 	.word	0x40014000
 800a65c:	40015000 	.word	0x40015000
 800a660:	08010bc4 	.word	0x08010bc4
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a2e      	ldr	r2, [pc, #184]	@ (800a724 <HAL_TIM_ConfigClockSource+0x740>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d027      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x6da>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a676:	d022      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x6da>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a2a      	ldr	r2, [pc, #168]	@ (800a728 <HAL_TIM_ConfigClockSource+0x744>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d01d      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x6da>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a29      	ldr	r2, [pc, #164]	@ (800a72c <HAL_TIM_ConfigClockSource+0x748>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d018      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x6da>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a27      	ldr	r2, [pc, #156]	@ (800a730 <HAL_TIM_ConfigClockSource+0x74c>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d013      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x6da>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a26      	ldr	r2, [pc, #152]	@ (800a734 <HAL_TIM_ConfigClockSource+0x750>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d00e      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x6da>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a24      	ldr	r2, [pc, #144]	@ (800a738 <HAL_TIM_ConfigClockSource+0x754>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d009      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x6da>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a23      	ldr	r2, [pc, #140]	@ (800a73c <HAL_TIM_ConfigClockSource+0x758>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d004      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0x6da>
 800a6b4:	f241 6124 	movw	r1, #5668	@ 0x1624
 800a6b8:	4821      	ldr	r0, [pc, #132]	@ (800a740 <HAL_TIM_ConfigClockSource+0x75c>)
 800a6ba:	f7f6 fead 	bl	8001418 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6c6:	d014      	beq.n	800a6f2 <HAL_TIM_ConfigClockSource+0x70e>
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d010      	beq.n	800a6f2 <HAL_TIM_ConfigClockSource+0x70e>
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00c      	beq.n	800a6f2 <HAL_TIM_ConfigClockSource+0x70e>
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d008      	beq.n	800a6f2 <HAL_TIM_ConfigClockSource+0x70e>
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	2b0a      	cmp	r3, #10
 800a6e6:	d004      	beq.n	800a6f2 <HAL_TIM_ConfigClockSource+0x70e>
 800a6e8:	f241 6127 	movw	r1, #5671	@ 0x1627
 800a6ec:	4814      	ldr	r0, [pc, #80]	@ (800a740 <HAL_TIM_ConfigClockSource+0x75c>)
 800a6ee:	f7f6 fe93 	bl	8001418 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	2b0f      	cmp	r3, #15
 800a6f8:	d904      	bls.n	800a704 <HAL_TIM_ConfigClockSource+0x720>
 800a6fa:	f241 6128 	movw	r1, #5672	@ 0x1628
 800a6fe:	4810      	ldr	r0, [pc, #64]	@ (800a740 <HAL_TIM_ConfigClockSource+0x75c>)
 800a700:	f7f6 fe8a 	bl	8001418 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a710:	461a      	mov	r2, r3
 800a712:	f000 ffe1 	bl	800b6d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2140      	movs	r1, #64	@ 0x40
 800a71c:	4618      	mov	r0, r3
 800a71e:	f001 f83a 	bl	800b796 <TIM_ITRx_SetConfig>
      break;
 800a722:	e318      	b.n	800ad56 <HAL_TIM_ConfigClockSource+0xd72>
 800a724:	40012c00 	.word	0x40012c00
 800a728:	40000400 	.word	0x40000400
 800a72c:	40000800 	.word	0x40000800
 800a730:	40000c00 	.word	0x40000c00
 800a734:	40013400 	.word	0x40013400
 800a738:	40014000 	.word	0x40014000
 800a73c:	40015000 	.word	0x40015000
 800a740:	08010bc4 	.word	0x08010bc4
    case TIM_CLOCKSOURCE_ITR10:
#endif /* HRTIM1 */
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a9c      	ldr	r2, [pc, #624]	@ (800a9bc <HAL_TIM_ConfigClockSource+0x9d8>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d158      	bne.n	800a800 <HAL_TIM_ConfigClockSource+0x81c>
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a756:	f000 82f1 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2b70      	cmp	r3, #112	@ 0x70
 800a760:	f000 82ec 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a76c:	f000 82e6 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b40      	cmp	r3, #64	@ 0x40
 800a776:	f000 82e1 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b50      	cmp	r3, #80	@ 0x50
 800a780:	f000 82dc 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b60      	cmp	r3, #96	@ 0x60
 800a78a:	f000 82d7 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2b10      	cmp	r3, #16
 800a794:	f000 82d2 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2b20      	cmp	r3, #32
 800a79e:	f000 82cd 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2b30      	cmp	r3, #48	@ 0x30
 800a7a8:	f000 82c8 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7b4:	f000 82c2 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a7c0:	f000 82bc 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a7d      	ldr	r2, [pc, #500]	@ (800a9c0 <HAL_TIM_ConfigClockSource+0x9dc>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	f000 82b6 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a7b      	ldr	r2, [pc, #492]	@ (800a9c4 <HAL_TIM_ConfigClockSource+0x9e0>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	f000 82b0 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a79      	ldr	r2, [pc, #484]	@ (800a9c8 <HAL_TIM_ConfigClockSource+0x9e4>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	f000 82aa 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a77      	ldr	r2, [pc, #476]	@ (800a9cc <HAL_TIM_ConfigClockSource+0x9e8>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	f000 82a4 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a75      	ldr	r2, [pc, #468]	@ (800a9d0 <HAL_TIM_ConfigClockSource+0x9ec>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	f000 829e 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a808:	d15e      	bne.n	800a8c8 <HAL_TIM_ConfigClockSource+0x8e4>
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a812:	f000 8293 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2b70      	cmp	r3, #112	@ 0x70
 800a81c:	f000 828e 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a828:	f000 8288 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b40      	cmp	r3, #64	@ 0x40
 800a832:	f000 8283 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2b50      	cmp	r3, #80	@ 0x50
 800a83c:	f000 827e 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b60      	cmp	r3, #96	@ 0x60
 800a846:	f000 8279 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 8274 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2b20      	cmp	r3, #32
 800a85a:	f000 826f 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b30      	cmp	r3, #48	@ 0x30
 800a864:	f000 826a 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a870:	f000 8264 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a87c:	f000 825e 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a4e      	ldr	r2, [pc, #312]	@ (800a9c0 <HAL_TIM_ConfigClockSource+0x9dc>)
 800a886:	4293      	cmp	r3, r2
 800a888:	f000 8258 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a4c      	ldr	r2, [pc, #304]	@ (800a9c4 <HAL_TIM_ConfigClockSource+0x9e0>)
 800a892:	4293      	cmp	r3, r2
 800a894:	f000 8252 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a4a      	ldr	r2, [pc, #296]	@ (800a9c8 <HAL_TIM_ConfigClockSource+0x9e4>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	f000 824c 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a48      	ldr	r2, [pc, #288]	@ (800a9cc <HAL_TIM_ConfigClockSource+0x9e8>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	f000 8246 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a46      	ldr	r2, [pc, #280]	@ (800a9d0 <HAL_TIM_ConfigClockSource+0x9ec>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	f000 8240 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a44      	ldr	r2, [pc, #272]	@ (800a9d4 <HAL_TIM_ConfigClockSource+0x9f0>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	f000 823a 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a42      	ldr	r2, [pc, #264]	@ (800a9d8 <HAL_TIM_ConfigClockSource+0x9f4>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d158      	bne.n	800a984 <HAL_TIM_ConfigClockSource+0x9a0>
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8da:	f000 822f 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b70      	cmp	r3, #112	@ 0x70
 800a8e4:	f000 822a 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8f0:	f000 8224 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b40      	cmp	r3, #64	@ 0x40
 800a8fa:	f000 821f 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b50      	cmp	r3, #80	@ 0x50
 800a904:	f000 821a 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b60      	cmp	r3, #96	@ 0x60
 800a90e:	f000 8215 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 8210 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b10      	cmp	r3, #16
 800a922:	f000 820b 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b30      	cmp	r3, #48	@ 0x30
 800a92c:	f000 8206 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a938:	f000 8200 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a944:	f000 81fa 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a1c      	ldr	r2, [pc, #112]	@ (800a9c0 <HAL_TIM_ConfigClockSource+0x9dc>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	f000 81f4 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a1a      	ldr	r2, [pc, #104]	@ (800a9c4 <HAL_TIM_ConfigClockSource+0x9e0>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	f000 81ee 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a18      	ldr	r2, [pc, #96]	@ (800a9c8 <HAL_TIM_ConfigClockSource+0x9e4>)
 800a966:	4293      	cmp	r3, r2
 800a968:	f000 81e8 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a16      	ldr	r2, [pc, #88]	@ (800a9cc <HAL_TIM_ConfigClockSource+0x9e8>)
 800a972:	4293      	cmp	r3, r2
 800a974:	f000 81e2 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a14      	ldr	r2, [pc, #80]	@ (800a9d0 <HAL_TIM_ConfigClockSource+0x9ec>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	f000 81dc 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a14      	ldr	r2, [pc, #80]	@ (800a9dc <HAL_TIM_ConfigClockSource+0x9f8>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d16b      	bne.n	800aa66 <HAL_TIM_ConfigClockSource+0xa82>
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a996:	f000 81d1 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b70      	cmp	r3, #112	@ 0x70
 800a9a0:	f000 81cc 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9ac:	f000 81c6 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b40      	cmp	r3, #64	@ 0x40
 800a9b6:	f000 81c1 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a9ba:	e011      	b.n	800a9e0 <HAL_TIM_ConfigClockSource+0x9fc>
 800a9bc:	40012c00 	.word	0x40012c00
 800a9c0:	00100020 	.word	0x00100020
 800a9c4:	00100030 	.word	0x00100030
 800a9c8:	00100040 	.word	0x00100040
 800a9cc:	00100050 	.word	0x00100050
 800a9d0:	00100060 	.word	0x00100060
 800a9d4:	00100070 	.word	0x00100070
 800a9d8:	40000400 	.word	0x40000400
 800a9dc:	40000800 	.word	0x40000800
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b50      	cmp	r3, #80	@ 0x50
 800a9e6:	f000 81a9 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2b60      	cmp	r3, #96	@ 0x60
 800a9f0:	f000 81a4 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f000 819f 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b10      	cmp	r3, #16
 800aa04:	f000 819a 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2b20      	cmp	r3, #32
 800aa0e:	f000 8195 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa1a:	f000 818f 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa26:	f000 8189 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a98      	ldr	r2, [pc, #608]	@ (800ac90 <HAL_TIM_ConfigClockSource+0xcac>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	f000 8183 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a96      	ldr	r2, [pc, #600]	@ (800ac94 <HAL_TIM_ConfigClockSource+0xcb0>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	f000 817d 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a94      	ldr	r2, [pc, #592]	@ (800ac98 <HAL_TIM_ConfigClockSource+0xcb4>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	f000 8177 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a92      	ldr	r2, [pc, #584]	@ (800ac9c <HAL_TIM_ConfigClockSource+0xcb8>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	f000 8171 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a90      	ldr	r2, [pc, #576]	@ (800aca0 <HAL_TIM_ConfigClockSource+0xcbc>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	f000 816b 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a8e      	ldr	r2, [pc, #568]	@ (800aca4 <HAL_TIM_ConfigClockSource+0xcc0>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d157      	bne.n	800ab20 <HAL_TIM_ConfigClockSource+0xb3c>
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa78:	f000 8160 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b70      	cmp	r3, #112	@ 0x70
 800aa82:	f000 815b 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa8e:	f000 8155 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b40      	cmp	r3, #64	@ 0x40
 800aa98:	f000 8150 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2b50      	cmp	r3, #80	@ 0x50
 800aaa2:	f000 814b 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2b60      	cmp	r3, #96	@ 0x60
 800aaac:	f000 8146 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f000 8141 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b10      	cmp	r3, #16
 800aac0:	f000 813c 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2b20      	cmp	r3, #32
 800aaca:	f000 8137 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	2b30      	cmp	r3, #48	@ 0x30
 800aad4:	f000 8132 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aae0:	f000 812c 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a69      	ldr	r2, [pc, #420]	@ (800ac90 <HAL_TIM_ConfigClockSource+0xcac>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	f000 8126 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a67      	ldr	r2, [pc, #412]	@ (800ac94 <HAL_TIM_ConfigClockSource+0xcb0>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	f000 8120 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a65      	ldr	r2, [pc, #404]	@ (800ac98 <HAL_TIM_ConfigClockSource+0xcb4>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	f000 811a 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a63      	ldr	r2, [pc, #396]	@ (800ac9c <HAL_TIM_ConfigClockSource+0xcb8>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	f000 8114 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a61      	ldr	r2, [pc, #388]	@ (800aca0 <HAL_TIM_ConfigClockSource+0xcbc>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	f000 810e 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a60      	ldr	r2, [pc, #384]	@ (800aca8 <HAL_TIM_ConfigClockSource+0xcc4>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d157      	bne.n	800abda <HAL_TIM_ConfigClockSource+0xbf6>
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab32:	f000 8103 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2b70      	cmp	r3, #112	@ 0x70
 800ab3c:	f000 80fe 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab48:	f000 80f8 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b40      	cmp	r3, #64	@ 0x40
 800ab52:	f000 80f3 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b50      	cmp	r3, #80	@ 0x50
 800ab5c:	f000 80ee 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b60      	cmp	r3, #96	@ 0x60
 800ab66:	f000 80e9 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f000 80e4 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b10      	cmp	r3, #16
 800ab7a:	f000 80df 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2b20      	cmp	r3, #32
 800ab84:	f000 80da 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b30      	cmp	r3, #48	@ 0x30
 800ab8e:	f000 80d5 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab9a:	f000 80cf 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a3b      	ldr	r2, [pc, #236]	@ (800ac90 <HAL_TIM_ConfigClockSource+0xcac>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	f000 80c9 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a39      	ldr	r2, [pc, #228]	@ (800ac94 <HAL_TIM_ConfigClockSource+0xcb0>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	f000 80c3 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a37      	ldr	r2, [pc, #220]	@ (800ac98 <HAL_TIM_ConfigClockSource+0xcb4>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	f000 80bd 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a35      	ldr	r2, [pc, #212]	@ (800ac9c <HAL_TIM_ConfigClockSource+0xcb8>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	f000 80b7 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a33      	ldr	r2, [pc, #204]	@ (800aca0 <HAL_TIM_ConfigClockSource+0xcbc>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	f000 80b1 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a33      	ldr	r2, [pc, #204]	@ (800acac <HAL_TIM_ConfigClockSource+0xcc8>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d146      	bne.n	800ac72 <HAL_TIM_ConfigClockSource+0xc8e>
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abec:	f000 80a6 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b40      	cmp	r3, #64	@ 0x40
 800abf6:	f000 80a1 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b50      	cmp	r3, #80	@ 0x50
 800ac00:	f000 809c 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b60      	cmp	r3, #96	@ 0x60
 800ac0a:	f000 8097 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f000 8092 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b10      	cmp	r3, #16
 800ac1e:	f000 808d 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b20      	cmp	r3, #32
 800ac28:	f000 8088 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b30      	cmp	r3, #48	@ 0x30
 800ac32:	f000 8083 	beq.w	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac3e:	d07d      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ac48:	d078      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a11      	ldr	r2, [pc, #68]	@ (800ac94 <HAL_TIM_ConfigClockSource+0xcb0>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d073      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a0f      	ldr	r2, [pc, #60]	@ (800ac98 <HAL_TIM_ConfigClockSource+0xcb4>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d06e      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a0e      	ldr	r2, [pc, #56]	@ (800ac9c <HAL_TIM_ConfigClockSource+0xcb8>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d069      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a0c      	ldr	r2, [pc, #48]	@ (800aca0 <HAL_TIM_ConfigClockSource+0xcbc>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d064      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a0e      	ldr	r2, [pc, #56]	@ (800acb0 <HAL_TIM_ConfigClockSource+0xccc>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d15a      	bne.n	800ad32 <HAL_TIM_ConfigClockSource+0xd4e>
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac84:	d05a      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b70      	cmp	r3, #112	@ 0x70
 800ac8c:	d056      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ac8e:	e011      	b.n	800acb4 <HAL_TIM_ConfigClockSource+0xcd0>
 800ac90:	00100020 	.word	0x00100020
 800ac94:	00100030 	.word	0x00100030
 800ac98:	00100040 	.word	0x00100040
 800ac9c:	00100050 	.word	0x00100050
 800aca0:	00100060 	.word	0x00100060
 800aca4:	40000c00 	.word	0x40000c00
 800aca8:	40013400 	.word	0x40013400
 800acac:	40014000 	.word	0x40014000
 800acb0:	40015000 	.word	0x40015000
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acbc:	d03e      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b40      	cmp	r3, #64	@ 0x40
 800acc4:	d03a      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b50      	cmp	r3, #80	@ 0x50
 800accc:	d036      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b60      	cmp	r3, #96	@ 0x60
 800acd4:	d032      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d02e      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b10      	cmp	r3, #16
 800ace4:	d02a      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b20      	cmp	r3, #32
 800acec:	d026      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2b30      	cmp	r3, #48	@ 0x30
 800acf4:	d022      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acfe:	d01d      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ad08:	d018      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a18      	ldr	r2, [pc, #96]	@ (800ad70 <HAL_TIM_ConfigClockSource+0xd8c>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d013      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a16      	ldr	r2, [pc, #88]	@ (800ad74 <HAL_TIM_ConfigClockSource+0xd90>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d00e      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a15      	ldr	r2, [pc, #84]	@ (800ad78 <HAL_TIM_ConfigClockSource+0xd94>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d009      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a13      	ldr	r2, [pc, #76]	@ (800ad7c <HAL_TIM_ConfigClockSource+0xd98>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d004      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd58>
 800ad32:	f241 6145 	movw	r1, #5701	@ 0x1645
 800ad36:	4812      	ldr	r0, [pc, #72]	@ (800ad80 <HAL_TIM_ConfigClockSource+0xd9c>)
 800ad38:	f7f6 fb6e 	bl	8001418 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4619      	mov	r1, r3
 800ad46:	4610      	mov	r0, r2
 800ad48:	f000 fd25 	bl	800b796 <TIM_ITRx_SetConfig>
      break;
 800ad4c:	e003      	b.n	800ad56 <HAL_TIM_ConfigClockSource+0xd72>
    }

    default:
      status = HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	73fb      	strb	r3, [r7, #15]
      break;
 800ad52:	e000      	b.n	800ad56 <HAL_TIM_ConfigClockSource+0xd72>
      break;
 800ad54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	00100020 	.word	0x00100020
 800ad74:	00100030 	.word	0x00100030
 800ad78:	00100040 	.word	0x00100040
 800ad7c:	00100060 	.word	0x00100060
 800ad80:	08010bc4 	.word	0x08010bc4

0800ad84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adb4:	bf00      	nop
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adc8:	bf00      	nop
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a4c      	ldr	r2, [pc, #304]	@ (800af18 <TIM_Base_SetConfig+0x144>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d017      	beq.n	800ae1c <TIM_Base_SetConfig+0x48>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adf2:	d013      	beq.n	800ae1c <TIM_Base_SetConfig+0x48>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a49      	ldr	r2, [pc, #292]	@ (800af1c <TIM_Base_SetConfig+0x148>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d00f      	beq.n	800ae1c <TIM_Base_SetConfig+0x48>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a48      	ldr	r2, [pc, #288]	@ (800af20 <TIM_Base_SetConfig+0x14c>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d00b      	beq.n	800ae1c <TIM_Base_SetConfig+0x48>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a47      	ldr	r2, [pc, #284]	@ (800af24 <TIM_Base_SetConfig+0x150>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d007      	beq.n	800ae1c <TIM_Base_SetConfig+0x48>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a46      	ldr	r2, [pc, #280]	@ (800af28 <TIM_Base_SetConfig+0x154>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d003      	beq.n	800ae1c <TIM_Base_SetConfig+0x48>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4a45      	ldr	r2, [pc, #276]	@ (800af2c <TIM_Base_SetConfig+0x158>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d108      	bne.n	800ae2e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a39      	ldr	r2, [pc, #228]	@ (800af18 <TIM_Base_SetConfig+0x144>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d023      	beq.n	800ae7e <TIM_Base_SetConfig+0xaa>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae3c:	d01f      	beq.n	800ae7e <TIM_Base_SetConfig+0xaa>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a36      	ldr	r2, [pc, #216]	@ (800af1c <TIM_Base_SetConfig+0x148>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d01b      	beq.n	800ae7e <TIM_Base_SetConfig+0xaa>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a35      	ldr	r2, [pc, #212]	@ (800af20 <TIM_Base_SetConfig+0x14c>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d017      	beq.n	800ae7e <TIM_Base_SetConfig+0xaa>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a34      	ldr	r2, [pc, #208]	@ (800af24 <TIM_Base_SetConfig+0x150>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d013      	beq.n	800ae7e <TIM_Base_SetConfig+0xaa>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a33      	ldr	r2, [pc, #204]	@ (800af28 <TIM_Base_SetConfig+0x154>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d00f      	beq.n	800ae7e <TIM_Base_SetConfig+0xaa>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a33      	ldr	r2, [pc, #204]	@ (800af30 <TIM_Base_SetConfig+0x15c>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d00b      	beq.n	800ae7e <TIM_Base_SetConfig+0xaa>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a32      	ldr	r2, [pc, #200]	@ (800af34 <TIM_Base_SetConfig+0x160>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d007      	beq.n	800ae7e <TIM_Base_SetConfig+0xaa>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a31      	ldr	r2, [pc, #196]	@ (800af38 <TIM_Base_SetConfig+0x164>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d003      	beq.n	800ae7e <TIM_Base_SetConfig+0xaa>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a2c      	ldr	r2, [pc, #176]	@ (800af2c <TIM_Base_SetConfig+0x158>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d108      	bne.n	800ae90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	695b      	ldr	r3, [r3, #20]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4a18      	ldr	r2, [pc, #96]	@ (800af18 <TIM_Base_SetConfig+0x144>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d013      	beq.n	800aee4 <TIM_Base_SetConfig+0x110>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a1a      	ldr	r2, [pc, #104]	@ (800af28 <TIM_Base_SetConfig+0x154>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d00f      	beq.n	800aee4 <TIM_Base_SetConfig+0x110>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a1a      	ldr	r2, [pc, #104]	@ (800af30 <TIM_Base_SetConfig+0x15c>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d00b      	beq.n	800aee4 <TIM_Base_SetConfig+0x110>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a19      	ldr	r2, [pc, #100]	@ (800af34 <TIM_Base_SetConfig+0x160>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d007      	beq.n	800aee4 <TIM_Base_SetConfig+0x110>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a18      	ldr	r2, [pc, #96]	@ (800af38 <TIM_Base_SetConfig+0x164>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d003      	beq.n	800aee4 <TIM_Base_SetConfig+0x110>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a13      	ldr	r2, [pc, #76]	@ (800af2c <TIM_Base_SetConfig+0x158>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d103      	bne.n	800aeec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	691a      	ldr	r2, [r3, #16]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	f003 0301 	and.w	r3, r3, #1
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d105      	bne.n	800af0a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	f023 0201 	bic.w	r2, r3, #1
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	611a      	str	r2, [r3, #16]
  }
}
 800af0a:	bf00      	nop
 800af0c:	3714      	adds	r7, #20
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	40012c00 	.word	0x40012c00
 800af1c:	40000400 	.word	0x40000400
 800af20:	40000800 	.word	0x40000800
 800af24:	40000c00 	.word	0x40000c00
 800af28:	40013400 	.word	0x40013400
 800af2c:	40015000 	.word	0x40015000
 800af30:	40014000 	.word	0x40014000
 800af34:	40014400 	.word	0x40014400
 800af38:	40014800 	.word	0x40014800

0800af3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6a1b      	ldr	r3, [r3, #32]
 800af50:	f023 0201 	bic.w	r2, r3, #1
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f023 0303 	bic.w	r3, r3, #3
 800af76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	4313      	orrs	r3, r2
 800af80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	f023 0302 	bic.w	r3, r3, #2
 800af88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	697a      	ldr	r2, [r7, #20]
 800af90:	4313      	orrs	r3, r2
 800af92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a44      	ldr	r2, [pc, #272]	@ (800b0a8 <TIM_OC1_SetConfig+0x16c>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d013      	beq.n	800afc4 <TIM_OC1_SetConfig+0x88>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a43      	ldr	r2, [pc, #268]	@ (800b0ac <TIM_OC1_SetConfig+0x170>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d00f      	beq.n	800afc4 <TIM_OC1_SetConfig+0x88>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4a42      	ldr	r2, [pc, #264]	@ (800b0b0 <TIM_OC1_SetConfig+0x174>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d00b      	beq.n	800afc4 <TIM_OC1_SetConfig+0x88>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a41      	ldr	r2, [pc, #260]	@ (800b0b4 <TIM_OC1_SetConfig+0x178>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d007      	beq.n	800afc4 <TIM_OC1_SetConfig+0x88>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4a40      	ldr	r2, [pc, #256]	@ (800b0b8 <TIM_OC1_SetConfig+0x17c>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d003      	beq.n	800afc4 <TIM_OC1_SetConfig+0x88>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4a3f      	ldr	r2, [pc, #252]	@ (800b0bc <TIM_OC1_SetConfig+0x180>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d119      	bne.n	800aff8 <TIM_OC1_SetConfig+0xbc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d008      	beq.n	800afde <TIM_OC1_SetConfig+0xa2>
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	2b08      	cmp	r3, #8
 800afd2:	d004      	beq.n	800afde <TIM_OC1_SetConfig+0xa2>
 800afd4:	f641 411b 	movw	r1, #7195	@ 0x1c1b
 800afd8:	4839      	ldr	r0, [pc, #228]	@ (800b0c0 <TIM_OC1_SetConfig+0x184>)
 800afda:	f7f6 fa1d 	bl	8001418 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	f023 0308 	bic.w	r3, r3, #8
 800afe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	697a      	ldr	r2, [r7, #20]
 800afec:	4313      	orrs	r3, r2
 800afee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	f023 0304 	bic.w	r3, r3, #4
 800aff6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a2b      	ldr	r2, [pc, #172]	@ (800b0a8 <TIM_OC1_SetConfig+0x16c>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d013      	beq.n	800b028 <TIM_OC1_SetConfig+0xec>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a2a      	ldr	r2, [pc, #168]	@ (800b0ac <TIM_OC1_SetConfig+0x170>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d00f      	beq.n	800b028 <TIM_OC1_SetConfig+0xec>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a29      	ldr	r2, [pc, #164]	@ (800b0b0 <TIM_OC1_SetConfig+0x174>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d00b      	beq.n	800b028 <TIM_OC1_SetConfig+0xec>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a28      	ldr	r2, [pc, #160]	@ (800b0b4 <TIM_OC1_SetConfig+0x178>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d007      	beq.n	800b028 <TIM_OC1_SetConfig+0xec>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a27      	ldr	r2, [pc, #156]	@ (800b0b8 <TIM_OC1_SetConfig+0x17c>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d003      	beq.n	800b028 <TIM_OC1_SetConfig+0xec>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a26      	ldr	r2, [pc, #152]	@ (800b0bc <TIM_OC1_SetConfig+0x180>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d12d      	bne.n	800b084 <TIM_OC1_SetConfig+0x148>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b030:	d008      	beq.n	800b044 <TIM_OC1_SetConfig+0x108>
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	699b      	ldr	r3, [r3, #24]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d004      	beq.n	800b044 <TIM_OC1_SetConfig+0x108>
 800b03a:	f641 4128 	movw	r1, #7208	@ 0x1c28
 800b03e:	4820      	ldr	r0, [pc, #128]	@ (800b0c0 <TIM_OC1_SetConfig+0x184>)
 800b040:	f7f6 f9ea 	bl	8001418 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	695b      	ldr	r3, [r3, #20]
 800b048:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b04c:	d008      	beq.n	800b060 <TIM_OC1_SetConfig+0x124>
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	695b      	ldr	r3, [r3, #20]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d004      	beq.n	800b060 <TIM_OC1_SetConfig+0x124>
 800b056:	f641 4129 	movw	r1, #7209	@ 0x1c29
 800b05a:	4819      	ldr	r0, [pc, #100]	@ (800b0c0 <TIM_OC1_SetConfig+0x184>)
 800b05c:	f7f6 f9dc 	bl	8001418 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b066:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b06e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	4313      	orrs	r3, r2
 800b078:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	699b      	ldr	r3, [r3, #24]
 800b07e:	693a      	ldr	r2, [r7, #16]
 800b080:	4313      	orrs	r3, r2
 800b082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	693a      	ldr	r2, [r7, #16]
 800b088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	685a      	ldr	r2, [r3, #4]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	621a      	str	r2, [r3, #32]
}
 800b09e:	bf00      	nop
 800b0a0:	3718      	adds	r7, #24
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	40012c00 	.word	0x40012c00
 800b0ac:	40013400 	.word	0x40013400
 800b0b0:	40014000 	.word	0x40014000
 800b0b4:	40014400 	.word	0x40014400
 800b0b8:	40014800 	.word	0x40014800
 800b0bc:	40015000 	.word	0x40015000
 800b0c0:	08010bc4 	.word	0x08010bc4

0800b0c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a1b      	ldr	r3, [r3, #32]
 800b0d8:	f023 0210 	bic.w	r2, r3, #16
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	699b      	ldr	r3, [r3, #24]
 800b0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	021b      	lsls	r3, r3, #8
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	4313      	orrs	r3, r2
 800b10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	f023 0320 	bic.w	r3, r3, #32
 800b112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	011b      	lsls	r3, r3, #4
 800b11a:	697a      	ldr	r2, [r7, #20]
 800b11c:	4313      	orrs	r3, r2
 800b11e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4a3f      	ldr	r2, [pc, #252]	@ (800b220 <TIM_OC2_SetConfig+0x15c>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d007      	beq.n	800b138 <TIM_OC2_SetConfig+0x74>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a3e      	ldr	r2, [pc, #248]	@ (800b224 <TIM_OC2_SetConfig+0x160>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d003      	beq.n	800b138 <TIM_OC2_SetConfig+0x74>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a3d      	ldr	r2, [pc, #244]	@ (800b228 <TIM_OC2_SetConfig+0x164>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d11a      	bne.n	800b16e <TIM_OC2_SetConfig+0xaa>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d008      	beq.n	800b152 <TIM_OC2_SetConfig+0x8e>
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	2b08      	cmp	r3, #8
 800b146:	d004      	beq.n	800b152 <TIM_OC2_SetConfig+0x8e>
 800b148:	f641 4167 	movw	r1, #7271	@ 0x1c67
 800b14c:	4837      	ldr	r0, [pc, #220]	@ (800b22c <TIM_OC2_SetConfig+0x168>)
 800b14e:	f7f6 f963 	bl	8001418 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	011b      	lsls	r3, r3, #4
 800b160:	697a      	ldr	r2, [r7, #20]
 800b162:	4313      	orrs	r3, r2
 800b164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b16c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4a2b      	ldr	r2, [pc, #172]	@ (800b220 <TIM_OC2_SetConfig+0x15c>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d013      	beq.n	800b19e <TIM_OC2_SetConfig+0xda>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a2a      	ldr	r2, [pc, #168]	@ (800b224 <TIM_OC2_SetConfig+0x160>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d00f      	beq.n	800b19e <TIM_OC2_SetConfig+0xda>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a2b      	ldr	r2, [pc, #172]	@ (800b230 <TIM_OC2_SetConfig+0x16c>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d00b      	beq.n	800b19e <TIM_OC2_SetConfig+0xda>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a2a      	ldr	r2, [pc, #168]	@ (800b234 <TIM_OC2_SetConfig+0x170>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d007      	beq.n	800b19e <TIM_OC2_SetConfig+0xda>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a29      	ldr	r2, [pc, #164]	@ (800b238 <TIM_OC2_SetConfig+0x174>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d003      	beq.n	800b19e <TIM_OC2_SetConfig+0xda>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a23      	ldr	r2, [pc, #140]	@ (800b228 <TIM_OC2_SetConfig+0x164>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d12f      	bne.n	800b1fe <TIM_OC2_SetConfig+0x13a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1a6:	d008      	beq.n	800b1ba <TIM_OC2_SetConfig+0xf6>
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d004      	beq.n	800b1ba <TIM_OC2_SetConfig+0xf6>
 800b1b0:	f641 4174 	movw	r1, #7284	@ 0x1c74
 800b1b4:	481d      	ldr	r0, [pc, #116]	@ (800b22c <TIM_OC2_SetConfig+0x168>)
 800b1b6:	f7f6 f92f 	bl	8001418 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	695b      	ldr	r3, [r3, #20]
 800b1be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1c2:	d008      	beq.n	800b1d6 <TIM_OC2_SetConfig+0x112>
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	695b      	ldr	r3, [r3, #20]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d004      	beq.n	800b1d6 <TIM_OC2_SetConfig+0x112>
 800b1cc:	f641 4175 	movw	r1, #7285	@ 0x1c75
 800b1d0:	4816      	ldr	r0, [pc, #88]	@ (800b22c <TIM_OC2_SetConfig+0x168>)
 800b1d2:	f7f6 f921 	bl	8001418 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b1dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b1e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	695b      	ldr	r3, [r3, #20]
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	693a      	ldr	r2, [r7, #16]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	693a      	ldr	r2, [r7, #16]
 800b202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	697a      	ldr	r2, [r7, #20]
 800b216:	621a      	str	r2, [r3, #32]
}
 800b218:	bf00      	nop
 800b21a:	3718      	adds	r7, #24
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	40012c00 	.word	0x40012c00
 800b224:	40013400 	.word	0x40013400
 800b228:	40015000 	.word	0x40015000
 800b22c:	08010bc4 	.word	0x08010bc4
 800b230:	40014000 	.word	0x40014000
 800b234:	40014400 	.word	0x40014400
 800b238:	40014800 	.word	0x40014800

0800b23c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a1b      	ldr	r3, [r3, #32]
 800b250:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	69db      	ldr	r3, [r3, #28]
 800b262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b26a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b26e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f023 0303 	bic.w	r3, r3, #3
 800b276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	4313      	orrs	r3, r2
 800b280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	021b      	lsls	r3, r3, #8
 800b290:	697a      	ldr	r2, [r7, #20]
 800b292:	4313      	orrs	r3, r2
 800b294:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a3f      	ldr	r2, [pc, #252]	@ (800b398 <TIM_OC3_SetConfig+0x15c>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d007      	beq.n	800b2ae <TIM_OC3_SetConfig+0x72>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a3e      	ldr	r2, [pc, #248]	@ (800b39c <TIM_OC3_SetConfig+0x160>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d003      	beq.n	800b2ae <TIM_OC3_SetConfig+0x72>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a3d      	ldr	r2, [pc, #244]	@ (800b3a0 <TIM_OC3_SetConfig+0x164>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d11a      	bne.n	800b2e4 <TIM_OC3_SetConfig+0xa8>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d008      	beq.n	800b2c8 <TIM_OC3_SetConfig+0x8c>
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	2b08      	cmp	r3, #8
 800b2bc:	d004      	beq.n	800b2c8 <TIM_OC3_SetConfig+0x8c>
 800b2be:	f641 41b2 	movw	r1, #7346	@ 0x1cb2
 800b2c2:	4838      	ldr	r0, [pc, #224]	@ (800b3a4 <TIM_OC3_SetConfig+0x168>)
 800b2c4:	f7f6 f8a8 	bl	8001418 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b2ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	021b      	lsls	r3, r3, #8
 800b2d6:	697a      	ldr	r2, [r7, #20]
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b2e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a2c      	ldr	r2, [pc, #176]	@ (800b398 <TIM_OC3_SetConfig+0x15c>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d013      	beq.n	800b314 <TIM_OC3_SetConfig+0xd8>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a2b      	ldr	r2, [pc, #172]	@ (800b39c <TIM_OC3_SetConfig+0x160>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d00f      	beq.n	800b314 <TIM_OC3_SetConfig+0xd8>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a2c      	ldr	r2, [pc, #176]	@ (800b3a8 <TIM_OC3_SetConfig+0x16c>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d00b      	beq.n	800b314 <TIM_OC3_SetConfig+0xd8>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a2b      	ldr	r2, [pc, #172]	@ (800b3ac <TIM_OC3_SetConfig+0x170>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d007      	beq.n	800b314 <TIM_OC3_SetConfig+0xd8>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4a2a      	ldr	r2, [pc, #168]	@ (800b3b0 <TIM_OC3_SetConfig+0x174>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d003      	beq.n	800b314 <TIM_OC3_SetConfig+0xd8>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a24      	ldr	r2, [pc, #144]	@ (800b3a0 <TIM_OC3_SetConfig+0x164>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d12f      	bne.n	800b374 <TIM_OC3_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	699b      	ldr	r3, [r3, #24]
 800b318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b31c:	d008      	beq.n	800b330 <TIM_OC3_SetConfig+0xf4>
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	699b      	ldr	r3, [r3, #24]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d004      	beq.n	800b330 <TIM_OC3_SetConfig+0xf4>
 800b326:	f641 41bf 	movw	r1, #7359	@ 0x1cbf
 800b32a:	481e      	ldr	r0, [pc, #120]	@ (800b3a4 <TIM_OC3_SetConfig+0x168>)
 800b32c:	f7f6 f874 	bl	8001418 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	695b      	ldr	r3, [r3, #20]
 800b334:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b338:	d008      	beq.n	800b34c <TIM_OC3_SetConfig+0x110>
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d004      	beq.n	800b34c <TIM_OC3_SetConfig+0x110>
 800b342:	f44f 51e6 	mov.w	r1, #7360	@ 0x1cc0
 800b346:	4817      	ldr	r0, [pc, #92]	@ (800b3a4 <TIM_OC3_SetConfig+0x168>)
 800b348:	f7f6 f866 	bl	8001418 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b35a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	695b      	ldr	r3, [r3, #20]
 800b360:	011b      	lsls	r3, r3, #4
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	4313      	orrs	r3, r2
 800b366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	011b      	lsls	r3, r3, #4
 800b36e:	693a      	ldr	r2, [r7, #16]
 800b370:	4313      	orrs	r3, r2
 800b372:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	693a      	ldr	r2, [r7, #16]
 800b378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	685a      	ldr	r2, [r3, #4]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	621a      	str	r2, [r3, #32]
}
 800b38e:	bf00      	nop
 800b390:	3718      	adds	r7, #24
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	40012c00 	.word	0x40012c00
 800b39c:	40013400 	.word	0x40013400
 800b3a0:	40015000 	.word	0x40015000
 800b3a4:	08010bc4 	.word	0x08010bc4
 800b3a8:	40014000 	.word	0x40014000
 800b3ac:	40014400 	.word	0x40014400
 800b3b0:	40014800 	.word	0x40014800

0800b3b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b086      	sub	sp, #24
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a1b      	ldr	r3, [r3, #32]
 800b3c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	69db      	ldr	r3, [r3, #28]
 800b3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b3e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	021b      	lsls	r3, r3, #8
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	031b      	lsls	r3, r3, #12
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4a3f      	ldr	r2, [pc, #252]	@ (800b510 <TIM_OC4_SetConfig+0x15c>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d007      	beq.n	800b428 <TIM_OC4_SetConfig+0x74>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4a3e      	ldr	r2, [pc, #248]	@ (800b514 <TIM_OC4_SetConfig+0x160>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d003      	beq.n	800b428 <TIM_OC4_SetConfig+0x74>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4a3d      	ldr	r2, [pc, #244]	@ (800b518 <TIM_OC4_SetConfig+0x164>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d11a      	bne.n	800b45e <TIM_OC4_SetConfig+0xaa>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d008      	beq.n	800b442 <TIM_OC4_SetConfig+0x8e>
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	2b08      	cmp	r3, #8
 800b436:	d004      	beq.n	800b442 <TIM_OC4_SetConfig+0x8e>
 800b438:	f641 41fe 	movw	r1, #7422	@ 0x1cfe
 800b43c:	4837      	ldr	r0, [pc, #220]	@ (800b51c <TIM_OC4_SetConfig+0x168>)
 800b43e:	f7f5 ffeb 	bl	8001418 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	031b      	lsls	r3, r3, #12
 800b450:	697a      	ldr	r2, [r7, #20]
 800b452:	4313      	orrs	r3, r2
 800b454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b45c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a2b      	ldr	r2, [pc, #172]	@ (800b510 <TIM_OC4_SetConfig+0x15c>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d013      	beq.n	800b48e <TIM_OC4_SetConfig+0xda>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a2a      	ldr	r2, [pc, #168]	@ (800b514 <TIM_OC4_SetConfig+0x160>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d00f      	beq.n	800b48e <TIM_OC4_SetConfig+0xda>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a2b      	ldr	r2, [pc, #172]	@ (800b520 <TIM_OC4_SetConfig+0x16c>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d00b      	beq.n	800b48e <TIM_OC4_SetConfig+0xda>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a2a      	ldr	r2, [pc, #168]	@ (800b524 <TIM_OC4_SetConfig+0x170>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d007      	beq.n	800b48e <TIM_OC4_SetConfig+0xda>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4a29      	ldr	r2, [pc, #164]	@ (800b528 <TIM_OC4_SetConfig+0x174>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d003      	beq.n	800b48e <TIM_OC4_SetConfig+0xda>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a23      	ldr	r2, [pc, #140]	@ (800b518 <TIM_OC4_SetConfig+0x164>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d12f      	bne.n	800b4ee <TIM_OC4_SetConfig+0x13a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b496:	d008      	beq.n	800b4aa <TIM_OC4_SetConfig+0xf6>
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	699b      	ldr	r3, [r3, #24]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d004      	beq.n	800b4aa <TIM_OC4_SetConfig+0xf6>
 800b4a0:	f641 510b 	movw	r1, #7435	@ 0x1d0b
 800b4a4:	481d      	ldr	r0, [pc, #116]	@ (800b51c <TIM_OC4_SetConfig+0x168>)
 800b4a6:	f7f5 ffb7 	bl	8001418 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4b2:	d008      	beq.n	800b4c6 <TIM_OC4_SetConfig+0x112>
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	695b      	ldr	r3, [r3, #20]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d004      	beq.n	800b4c6 <TIM_OC4_SetConfig+0x112>
 800b4bc:	f641 510c 	movw	r1, #7436	@ 0x1d0c
 800b4c0:	4816      	ldr	r0, [pc, #88]	@ (800b51c <TIM_OC4_SetConfig+0x168>)
 800b4c2:	f7f5 ffa9 	bl	8001418 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b4cc:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b4d4:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	019b      	lsls	r3, r3, #6
 800b4dc:	693a      	ldr	r2, [r7, #16]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	019b      	lsls	r3, r3, #6
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	693a      	ldr	r2, [r7, #16]
 800b4f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	685a      	ldr	r2, [r3, #4]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	621a      	str	r2, [r3, #32]
}
 800b508:	bf00      	nop
 800b50a:	3718      	adds	r7, #24
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	40012c00 	.word	0x40012c00
 800b514:	40013400 	.word	0x40013400
 800b518:	40015000 	.word	0x40015000
 800b51c:	08010bc4 	.word	0x08010bc4
 800b520:	40014000 	.word	0x40014000
 800b524:	40014400 	.word	0x40014400
 800b528:	40014800 	.word	0x40014800

0800b52c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b087      	sub	sp, #28
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a1b      	ldr	r3, [r3, #32]
 800b53a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a1b      	ldr	r3, [r3, #32]
 800b540:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b55a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b55e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	4313      	orrs	r3, r2
 800b568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b570:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	041b      	lsls	r3, r3, #16
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4a19      	ldr	r2, [pc, #100]	@ (800b5e8 <TIM_OC5_SetConfig+0xbc>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d013      	beq.n	800b5ae <TIM_OC5_SetConfig+0x82>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4a18      	ldr	r2, [pc, #96]	@ (800b5ec <TIM_OC5_SetConfig+0xc0>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d00f      	beq.n	800b5ae <TIM_OC5_SetConfig+0x82>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a17      	ldr	r2, [pc, #92]	@ (800b5f0 <TIM_OC5_SetConfig+0xc4>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d00b      	beq.n	800b5ae <TIM_OC5_SetConfig+0x82>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4a16      	ldr	r2, [pc, #88]	@ (800b5f4 <TIM_OC5_SetConfig+0xc8>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d007      	beq.n	800b5ae <TIM_OC5_SetConfig+0x82>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4a15      	ldr	r2, [pc, #84]	@ (800b5f8 <TIM_OC5_SetConfig+0xcc>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d003      	beq.n	800b5ae <TIM_OC5_SetConfig+0x82>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4a14      	ldr	r2, [pc, #80]	@ (800b5fc <TIM_OC5_SetConfig+0xd0>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d109      	bne.n	800b5c2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b5b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	695b      	ldr	r3, [r3, #20]
 800b5ba:	021b      	lsls	r3, r3, #8
 800b5bc:	697a      	ldr	r2, [r7, #20]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	697a      	ldr	r2, [r7, #20]
 800b5c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	68fa      	ldr	r2, [r7, #12]
 800b5cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	685a      	ldr	r2, [r3, #4]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	693a      	ldr	r2, [r7, #16]
 800b5da:	621a      	str	r2, [r3, #32]
}
 800b5dc:	bf00      	nop
 800b5de:	371c      	adds	r7, #28
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr
 800b5e8:	40012c00 	.word	0x40012c00
 800b5ec:	40013400 	.word	0x40013400
 800b5f0:	40014000 	.word	0x40014000
 800b5f4:	40014400 	.word	0x40014400
 800b5f8:	40014800 	.word	0x40014800
 800b5fc:	40015000 	.word	0x40015000

0800b600 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b600:	b480      	push	{r7}
 800b602:	b087      	sub	sp, #28
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a1b      	ldr	r3, [r3, #32]
 800b60e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a1b      	ldr	r3, [r3, #32]
 800b614:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b62e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	021b      	lsls	r3, r3, #8
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	4313      	orrs	r3, r2
 800b63e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	051b      	lsls	r3, r3, #20
 800b64e:	693a      	ldr	r2, [r7, #16]
 800b650:	4313      	orrs	r3, r2
 800b652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4a1a      	ldr	r2, [pc, #104]	@ (800b6c0 <TIM_OC6_SetConfig+0xc0>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d013      	beq.n	800b684 <TIM_OC6_SetConfig+0x84>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a19      	ldr	r2, [pc, #100]	@ (800b6c4 <TIM_OC6_SetConfig+0xc4>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d00f      	beq.n	800b684 <TIM_OC6_SetConfig+0x84>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a18      	ldr	r2, [pc, #96]	@ (800b6c8 <TIM_OC6_SetConfig+0xc8>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d00b      	beq.n	800b684 <TIM_OC6_SetConfig+0x84>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a17      	ldr	r2, [pc, #92]	@ (800b6cc <TIM_OC6_SetConfig+0xcc>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d007      	beq.n	800b684 <TIM_OC6_SetConfig+0x84>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a16      	ldr	r2, [pc, #88]	@ (800b6d0 <TIM_OC6_SetConfig+0xd0>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d003      	beq.n	800b684 <TIM_OC6_SetConfig+0x84>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a15      	ldr	r2, [pc, #84]	@ (800b6d4 <TIM_OC6_SetConfig+0xd4>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d109      	bne.n	800b698 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b68a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	695b      	ldr	r3, [r3, #20]
 800b690:	029b      	lsls	r3, r3, #10
 800b692:	697a      	ldr	r2, [r7, #20]
 800b694:	4313      	orrs	r3, r2
 800b696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	685a      	ldr	r2, [r3, #4]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	693a      	ldr	r2, [r7, #16]
 800b6b0:	621a      	str	r2, [r3, #32]
}
 800b6b2:	bf00      	nop
 800b6b4:	371c      	adds	r7, #28
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	40012c00 	.word	0x40012c00
 800b6c4:	40013400 	.word	0x40013400
 800b6c8:	40014000 	.word	0x40014000
 800b6cc:	40014400 	.word	0x40014400
 800b6d0:	40014800 	.word	0x40014800
 800b6d4:	40015000 	.word	0x40015000

0800b6d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b087      	sub	sp, #28
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	6a1b      	ldr	r3, [r3, #32]
 800b6e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6a1b      	ldr	r3, [r3, #32]
 800b6ee:	f023 0201 	bic.w	r2, r3, #1
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	699b      	ldr	r3, [r3, #24]
 800b6fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	011b      	lsls	r3, r3, #4
 800b708:	693a      	ldr	r2, [r7, #16]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	f023 030a 	bic.w	r3, r3, #10
 800b714:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	693a      	ldr	r2, [r7, #16]
 800b722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	621a      	str	r2, [r3, #32]
}
 800b72a:	bf00      	nop
 800b72c:	371c      	adds	r7, #28
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b736:	b480      	push	{r7}
 800b738:	b087      	sub	sp, #28
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	60f8      	str	r0, [r7, #12]
 800b73e:	60b9      	str	r1, [r7, #8]
 800b740:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6a1b      	ldr	r3, [r3, #32]
 800b746:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6a1b      	ldr	r3, [r3, #32]
 800b74c:	f023 0210 	bic.w	r2, r3, #16
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	699b      	ldr	r3, [r3, #24]
 800b758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b760:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	031b      	lsls	r3, r3, #12
 800b766:	693a      	ldr	r2, [r7, #16]
 800b768:	4313      	orrs	r3, r2
 800b76a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b772:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	011b      	lsls	r3, r3, #4
 800b778:	697a      	ldr	r2, [r7, #20]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	693a      	ldr	r2, [r7, #16]
 800b782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	621a      	str	r2, [r3, #32]
}
 800b78a:	bf00      	nop
 800b78c:	371c      	adds	r7, #28
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b796:	b480      	push	{r7}
 800b798:	b085      	sub	sp, #20
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
 800b79e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b7ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	f043 0307 	orr.w	r3, r3, #7
 800b7bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	609a      	str	r2, [r3, #8]
}
 800b7c4:	bf00      	nop
 800b7c6:	3714      	adds	r7, #20
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b087      	sub	sp, #28
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
 800b7dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b7ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	021a      	lsls	r2, r3, #8
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	431a      	orrs	r2, r3
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	697a      	ldr	r2, [r7, #20]
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	697a      	ldr	r2, [r7, #20]
 800b802:	609a      	str	r2, [r3, #8]
}
 800b804:	bf00      	nop
 800b806:	371c      	adds	r7, #28
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a39      	ldr	r2, [pc, #228]	@ (800b904 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d031      	beq.n	800b888 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b82c:	d02c      	beq.n	800b888 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a35      	ldr	r2, [pc, #212]	@ (800b908 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d027      	beq.n	800b888 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a33      	ldr	r2, [pc, #204]	@ (800b90c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d022      	beq.n	800b888 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a32      	ldr	r2, [pc, #200]	@ (800b910 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d01d      	beq.n	800b888 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a30      	ldr	r2, [pc, #192]	@ (800b914 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d018      	beq.n	800b888 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a2f      	ldr	r2, [pc, #188]	@ (800b918 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d013      	beq.n	800b888 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a2d      	ldr	r2, [pc, #180]	@ (800b91c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d00e      	beq.n	800b888 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a2c      	ldr	r2, [pc, #176]	@ (800b920 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d009      	beq.n	800b888 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a2a      	ldr	r2, [pc, #168]	@ (800b924 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d004      	beq.n	800b888 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800b87e:	f640 018b 	movw	r1, #2187	@ 0x88b
 800b882:	4829      	ldr	r0, [pc, #164]	@ (800b928 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b884:	f7f5 fdc8 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d025      	beq.n	800b8dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2b10      	cmp	r3, #16
 800b896:	d021      	beq.n	800b8dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b20      	cmp	r3, #32
 800b89e:	d01d      	beq.n	800b8dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b30      	cmp	r3, #48	@ 0x30
 800b8a6:	d019      	beq.n	800b8dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b40      	cmp	r3, #64	@ 0x40
 800b8ae:	d015      	beq.n	800b8dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2b50      	cmp	r3, #80	@ 0x50
 800b8b6:	d011      	beq.n	800b8dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b60      	cmp	r3, #96	@ 0x60
 800b8be:	d00d      	beq.n	800b8dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b70      	cmp	r3, #112	@ 0x70
 800b8c6:	d009      	beq.n	800b8dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b8d0:	d004      	beq.n	800b8dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b8d2:	f640 018c 	movw	r1, #2188	@ 0x88c
 800b8d6:	4814      	ldr	r0, [pc, #80]	@ (800b928 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b8d8:	f7f5 fd9e 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	2b80      	cmp	r3, #128	@ 0x80
 800b8e2:	d008      	beq.n	800b8f6 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d004      	beq.n	800b8f6 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
 800b8ec:	f640 018d 	movw	r1, #2189	@ 0x88d
 800b8f0:	480d      	ldr	r0, [pc, #52]	@ (800b928 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b8f2:	f7f5 fd91 	bl	8001418 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d115      	bne.n	800b92c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b900:	2302      	movs	r3, #2
 800b902:	e0e1      	b.n	800bac8 <HAL_TIMEx_MasterConfigSynchronization+0x2b8>
 800b904:	40012c00 	.word	0x40012c00
 800b908:	40000400 	.word	0x40000400
 800b90c:	40000800 	.word	0x40000800
 800b910:	40000c00 	.word	0x40000c00
 800b914:	40001000 	.word	0x40001000
 800b918:	40001400 	.word	0x40001400
 800b91c:	40013400 	.word	0x40013400
 800b920:	40014000 	.word	0x40014000
 800b924:	40015000 	.word	0x40015000
 800b928:	08010c34 	.word	0x08010c34
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2202      	movs	r2, #2
 800b938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a5f      	ldr	r2, [pc, #380]	@ (800bad0 <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d009      	beq.n	800b96a <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a5e      	ldr	r2, [pc, #376]	@ (800bad4 <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d004      	beq.n	800b96a <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a5c      	ldr	r2, [pc, #368]	@ (800bad8 <HAL_TIMEx_MasterConfigSynchronization+0x2c8>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d161      	bne.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d054      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b97a:	d04f      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b984:	d04a      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b98e:	d045      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b998:	d040      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b9a2:	d03b      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b9ac:	d036      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b9b6:	d031      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800b9c0:	d02c      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b9ca:	d027      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800b9d4:	d022      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b9de:	d01d      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800b9e8:	d018      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b9f2:	d013      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800b9fc:	d00e      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800ba06:	d009      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800ba10:	d004      	beq.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800ba12:	f640 019f 	movw	r1, #2207	@ 0x89f
 800ba16:	4831      	ldr	r0, [pc, #196]	@ (800badc <HAL_TIMEx_MasterConfigSynchronization+0x2cc>)
 800ba18:	f7f5 fcfe 	bl	8001418 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ba22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ba34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a1f      	ldr	r2, [pc, #124]	@ (800bad0 <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d022      	beq.n	800ba9c <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba5e:	d01d      	beq.n	800ba9c <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a1e      	ldr	r2, [pc, #120]	@ (800bae0 <HAL_TIMEx_MasterConfigSynchronization+0x2d0>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d018      	beq.n	800ba9c <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a1d      	ldr	r2, [pc, #116]	@ (800bae4 <HAL_TIMEx_MasterConfigSynchronization+0x2d4>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d013      	beq.n	800ba9c <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a1b      	ldr	r2, [pc, #108]	@ (800bae8 <HAL_TIMEx_MasterConfigSynchronization+0x2d8>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d00e      	beq.n	800ba9c <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a14      	ldr	r2, [pc, #80]	@ (800bad4 <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d009      	beq.n	800ba9c <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a17      	ldr	r2, [pc, #92]	@ (800baec <HAL_TIMEx_MasterConfigSynchronization+0x2dc>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d004      	beq.n	800ba9c <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a10      	ldr	r2, [pc, #64]	@ (800bad8 <HAL_TIMEx_MasterConfigSynchronization+0x2c8>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d10c      	bne.n	800bab6 <HAL_TIMEx_MasterConfigSynchronization+0x2a6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800baa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	4313      	orrs	r3, r2
 800baac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	68ba      	ldr	r2, [r7, #8]
 800bab4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2201      	movs	r2, #1
 800baba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	40012c00 	.word	0x40012c00
 800bad4:	40013400 	.word	0x40013400
 800bad8:	40015000 	.word	0x40015000
 800badc:	08010c34 	.word	0x08010c34
 800bae0:	40000400 	.word	0x40000400
 800bae4:	40000800 	.word	0x40000800
 800bae8:	40000c00 	.word	0x40000c00
 800baec:	40014000 	.word	0x40014000

0800baf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bafa:	2300      	movs	r3, #0
 800bafc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a53      	ldr	r2, [pc, #332]	@ (800bc50 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d01d      	beq.n	800bb44 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a51      	ldr	r2, [pc, #324]	@ (800bc54 <HAL_TIMEx_ConfigBreakDeadTime+0x164>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d018      	beq.n	800bb44 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a50      	ldr	r2, [pc, #320]	@ (800bc58 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d013      	beq.n	800bb44 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a4e      	ldr	r2, [pc, #312]	@ (800bc5c <HAL_TIMEx_ConfigBreakDeadTime+0x16c>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d00e      	beq.n	800bb44 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a4d      	ldr	r2, [pc, #308]	@ (800bc60 <HAL_TIMEx_ConfigBreakDeadTime+0x170>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d009      	beq.n	800bb44 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a4b      	ldr	r2, [pc, #300]	@ (800bc64 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d004      	beq.n	800bb44 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800bb3a:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 800bb3e:	484a      	ldr	r0, [pc, #296]	@ (800bc68 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800bb40:	f7f5 fc6a 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb4c:	d008      	beq.n	800bb60 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d004      	beq.n	800bb60 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 800bb56:	f640 01d5 	movw	r1, #2261	@ 0x8d5
 800bb5a:	4843      	ldr	r0, [pc, #268]	@ (800bc68 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800bb5c:	f7f5 fc5c 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb68:	d008      	beq.n	800bb7c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d004      	beq.n	800bb7c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 800bb72:	f640 01d6 	movw	r1, #2262	@ 0x8d6
 800bb76:	483c      	ldr	r0, [pc, #240]	@ (800bc68 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800bb78:	f7f5 fc4e 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d013      	beq.n	800bbac <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	689b      	ldr	r3, [r3, #8]
 800bb88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb8c:	d00e      	beq.n	800bbac <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb96:	d009      	beq.n	800bbac <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bba0:	d004      	beq.n	800bbac <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 800bba2:	f640 01d7 	movw	r1, #2263	@ 0x8d7
 800bba6:	4830      	ldr	r0, [pc, #192]	@ (800bc68 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800bba8:	f7f5 fc36 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	2bff      	cmp	r3, #255	@ 0xff
 800bbb2:	d904      	bls.n	800bbbe <HAL_TIMEx_ConfigBreakDeadTime+0xce>
 800bbb4:	f640 01d8 	movw	r1, #2264	@ 0x8d8
 800bbb8:	482b      	ldr	r0, [pc, #172]	@ (800bc68 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800bbba:	f7f5 fc2d 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbc6:	d008      	beq.n	800bbda <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	691b      	ldr	r3, [r3, #16]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d004      	beq.n	800bbda <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 800bbd0:	f640 01d9 	movw	r1, #2265	@ 0x8d9
 800bbd4:	4824      	ldr	r0, [pc, #144]	@ (800bc68 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800bbd6:	f7f5 fc1f 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	695b      	ldr	r3, [r3, #20]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d009      	beq.n	800bbf6 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbea:	d004      	beq.n	800bbf6 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 800bbec:	f640 01da 	movw	r1, #2266	@ 0x8da
 800bbf0:	481d      	ldr	r0, [pc, #116]	@ (800bc68 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800bbf2:	f7f5 fc11 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	2b0f      	cmp	r3, #15
 800bbfc:	d904      	bls.n	800bc08 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800bbfe:	f640 01db 	movw	r1, #2267	@ 0x8db
 800bc02:	4819      	ldr	r0, [pc, #100]	@ (800bc68 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800bc04:	f7f5 fc08 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bc10:	d008      	beq.n	800bc24 <HAL_TIMEx_ConfigBreakDeadTime+0x134>
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d004      	beq.n	800bc24 <HAL_TIMEx_ConfigBreakDeadTime+0x134>
 800bc1a:	f640 01dc 	movw	r1, #2268	@ 0x8dc
 800bc1e:	4812      	ldr	r0, [pc, #72]	@ (800bc68 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800bc20:	f7f5 fbfa 	bl	8001418 <assert_failed>
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	69db      	ldr	r3, [r3, #28]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d009      	beq.n	800bc40 <HAL_TIMEx_ConfigBreakDeadTime+0x150>
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	69db      	ldr	r3, [r3, #28]
 800bc30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc34:	d004      	beq.n	800bc40 <HAL_TIMEx_ConfigBreakDeadTime+0x150>
 800bc36:	f640 01dd 	movw	r1, #2269	@ 0x8dd
 800bc3a:	480b      	ldr	r0, [pc, #44]	@ (800bc68 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800bc3c:	f7f5 fbec 	bl	8001418 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d110      	bne.n	800bc6c <HAL_TIMEx_ConfigBreakDeadTime+0x17c>
 800bc4a:	2302      	movs	r3, #2
 800bc4c:	e0ba      	b.n	800bdc4 <HAL_TIMEx_ConfigBreakDeadTime+0x2d4>
 800bc4e:	bf00      	nop
 800bc50:	40012c00 	.word	0x40012c00
 800bc54:	40013400 	.word	0x40013400
 800bc58:	40014000 	.word	0x40014000
 800bc5c:	40014400 	.word	0x40014400
 800bc60:	40014800 	.word	0x40014800
 800bc64:	40015000 	.word	0x40015000
 800bc68:	08010c34 	.word	0x08010c34
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	695b      	ldr	r3, [r3, #20]
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	699b      	ldr	r3, [r3, #24]
 800bce0:	041b      	lsls	r3, r3, #16
 800bce2:	4313      	orrs	r3, r2
 800bce4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	69db      	ldr	r3, [r3, #28]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a34      	ldr	r2, [pc, #208]	@ (800bdcc <HAL_TIMEx_ConfigBreakDeadTime+0x2dc>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d009      	beq.n	800bd12 <HAL_TIMEx_ConfigBreakDeadTime+0x222>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a33      	ldr	r2, [pc, #204]	@ (800bdd0 <HAL_TIMEx_ConfigBreakDeadTime+0x2e0>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d004      	beq.n	800bd12 <HAL_TIMEx_ConfigBreakDeadTime+0x222>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a31      	ldr	r2, [pc, #196]	@ (800bdd4 <HAL_TIMEx_ConfigBreakDeadTime+0x2e4>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d14f      	bne.n	800bdb2 <HAL_TIMEx_ConfigBreakDeadTime+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	6a1b      	ldr	r3, [r3, #32]
 800bd16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd1a:	d008      	beq.n	800bd2e <HAL_TIMEx_ConfigBreakDeadTime+0x23e>
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	6a1b      	ldr	r3, [r3, #32]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d004      	beq.n	800bd2e <HAL_TIMEx_ConfigBreakDeadTime+0x23e>
 800bd24:	f640 01f3 	movw	r1, #2291	@ 0x8f3
 800bd28:	482b      	ldr	r0, [pc, #172]	@ (800bdd8 <HAL_TIMEx_ConfigBreakDeadTime+0x2e8>)
 800bd2a:	f7f5 fb75 	bl	8001418 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d009      	beq.n	800bd4a <HAL_TIMEx_ConfigBreakDeadTime+0x25a>
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd3e:	d004      	beq.n	800bd4a <HAL_TIMEx_ConfigBreakDeadTime+0x25a>
 800bd40:	f640 01f4 	movw	r1, #2292	@ 0x8f4
 800bd44:	4824      	ldr	r0, [pc, #144]	@ (800bdd8 <HAL_TIMEx_ConfigBreakDeadTime+0x2e8>)
 800bd46:	f7f5 fb67 	bl	8001418 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd4e:	2b0f      	cmp	r3, #15
 800bd50:	d904      	bls.n	800bd5c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>
 800bd52:	f640 01f5 	movw	r1, #2293	@ 0x8f5
 800bd56:	4820      	ldr	r0, [pc, #128]	@ (800bdd8 <HAL_TIMEx_ConfigBreakDeadTime+0x2e8>)
 800bd58:	f7f5 fb5e 	bl	8001418 <assert_failed>
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d009      	beq.n	800bd78 <HAL_TIMEx_ConfigBreakDeadTime+0x288>
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd6c:	d004      	beq.n	800bd78 <HAL_TIMEx_ConfigBreakDeadTime+0x288>
 800bd6e:	f640 01f6 	movw	r1, #2294	@ 0x8f6
 800bd72:	4819      	ldr	r0, [pc, #100]	@ (800bdd8 <HAL_TIMEx_ConfigBreakDeadTime+0x2e8>)
 800bd74:	f7f5 fb50 	bl	8001418 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd82:	051b      	lsls	r3, r3, #20
 800bd84:	4313      	orrs	r3, r2
 800bd86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	6a1b      	ldr	r3, [r3, #32]
 800bd92:	4313      	orrs	r3, r2
 800bd94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bda0:	4313      	orrs	r3, r2
 800bda2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	40012c00 	.word	0x40012c00
 800bdd0:	40013400 	.word	0x40013400
 800bdd4:	40015000 	.word	0x40015000
 800bdd8:	08010c34 	.word	0x08010c34

0800bddc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bde4:	bf00      	nop
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bdf8:	bf00      	nop
 800bdfa:	370c      	adds	r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be0c:	bf00      	nop
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800be78:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800be7c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	b29a      	uxth	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3714      	adds	r7, #20
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr

0800be96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800be96:	b480      	push	{r7}
 800be98:	b085      	sub	sp, #20
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800be9e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bea2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800beaa:	b29a      	uxth	r2, r3
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	b29b      	uxth	r3, r3
 800beb0:	43db      	mvns	r3, r3
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	4013      	ands	r3, r2
 800beb6:	b29a      	uxth	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3714      	adds	r7, #20
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800becc:	b480      	push	{r7}
 800bece:	b085      	sub	sp, #20
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	1d3b      	adds	r3, r7, #4
 800bed6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2201      	movs	r2, #1
 800bede:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2200      	movs	r2, #0
 800beee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2200      	movs	r2, #0
 800bef6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3714      	adds	r7, #20
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b09d      	sub	sp, #116	@ 0x74
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bf12:	2300      	movs	r3, #0
 800bf14:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	4413      	add	r3, r2
 800bf22:	881b      	ldrh	r3, [r3, #0]
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800bf2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf2e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	78db      	ldrb	r3, [r3, #3]
 800bf36:	2b03      	cmp	r3, #3
 800bf38:	d81f      	bhi.n	800bf7a <USB_ActivateEndpoint+0x72>
 800bf3a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf40 <USB_ActivateEndpoint+0x38>)
 800bf3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf40:	0800bf51 	.word	0x0800bf51
 800bf44:	0800bf6d 	.word	0x0800bf6d
 800bf48:	0800bf83 	.word	0x0800bf83
 800bf4c:	0800bf5f 	.word	0x0800bf5f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bf50:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bf54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bf58:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bf5c:	e012      	b.n	800bf84 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bf5e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bf62:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bf66:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bf6a:	e00b      	b.n	800bf84 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bf6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bf70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bf74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bf78:	e004      	b.n	800bf84 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800bf80:	e000      	b.n	800bf84 <USB_ActivateEndpoint+0x7c>
      break;
 800bf82:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	441a      	add	r2, r3
 800bf8e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bf92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	4413      	add	r3, r2
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	b21b      	sxth	r3, r3
 800bfb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bfba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfbe:	b21a      	sxth	r2, r3
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	b21b      	sxth	r3, r3
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	b21b      	sxth	r3, r3
 800bfca:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	441a      	add	r2, r3
 800bfd8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800bfdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfe0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfe4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	7b1b      	ldrb	r3, [r3, #12]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f040 8178 	bne.w	800c2ea <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	785b      	ldrb	r3, [r3, #1]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	f000 8084 	beq.w	800c10c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	61bb      	str	r3, [r7, #24]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c00e:	b29b      	uxth	r3, r3
 800c010:	461a      	mov	r2, r3
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	4413      	add	r3, r2
 800c016:	61bb      	str	r3, [r7, #24]
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	00da      	lsls	r2, r3, #3
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	4413      	add	r3, r2
 800c022:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c026:	617b      	str	r3, [r7, #20]
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	88db      	ldrh	r3, [r3, #6]
 800c02c:	085b      	lsrs	r3, r3, #1
 800c02e:	b29b      	uxth	r3, r3
 800c030:	005b      	lsls	r3, r3, #1
 800c032:	b29a      	uxth	r2, r3
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4413      	add	r3, r2
 800c042:	881b      	ldrh	r3, [r3, #0]
 800c044:	827b      	strh	r3, [r7, #18]
 800c046:	8a7b      	ldrh	r3, [r7, #18]
 800c048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d01b      	beq.n	800c088 <USB_ActivateEndpoint+0x180>
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4413      	add	r3, r2
 800c05a:	881b      	ldrh	r3, [r3, #0]
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c066:	823b      	strh	r3, [r7, #16]
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	441a      	add	r2, r3
 800c072:	8a3b      	ldrh	r3, [r7, #16]
 800c074:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c078:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c07c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c080:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c084:	b29b      	uxth	r3, r3
 800c086:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	78db      	ldrb	r3, [r3, #3]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d020      	beq.n	800c0d2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	4413      	add	r3, r2
 800c09a:	881b      	ldrh	r3, [r3, #0]
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0a6:	81bb      	strh	r3, [r7, #12]
 800c0a8:	89bb      	ldrh	r3, [r7, #12]
 800c0aa:	f083 0320 	eor.w	r3, r3, #32
 800c0ae:	81bb      	strh	r3, [r7, #12]
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	441a      	add	r2, r3
 800c0ba:	89bb      	ldrh	r3, [r7, #12]
 800c0bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	8013      	strh	r3, [r2, #0]
 800c0d0:	e2d5      	b.n	800c67e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	4413      	add	r3, r2
 800c0dc:	881b      	ldrh	r3, [r3, #0]
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0e8:	81fb      	strh	r3, [r7, #14]
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	441a      	add	r2, r3
 800c0f4:	89fb      	ldrh	r3, [r7, #14]
 800c0f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c106:	b29b      	uxth	r3, r3
 800c108:	8013      	strh	r3, [r2, #0]
 800c10a:	e2b8      	b.n	800c67e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c116:	b29b      	uxth	r3, r3
 800c118:	461a      	mov	r2, r3
 800c11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c11c:	4413      	add	r3, r2
 800c11e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	00da      	lsls	r2, r3, #3
 800c126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c128:	4413      	add	r3, r2
 800c12a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c12e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	88db      	ldrh	r3, [r3, #6]
 800c134:	085b      	lsrs	r3, r3, #1
 800c136:	b29b      	uxth	r3, r3
 800c138:	005b      	lsls	r3, r3, #1
 800c13a:	b29a      	uxth	r2, r3
 800c13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c13e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	461a      	mov	r2, r3
 800c14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c150:	4413      	add	r3, r2
 800c152:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	00da      	lsls	r2, r3, #3
 800c15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15c:	4413      	add	r3, r2
 800c15e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c162:	627b      	str	r3, [r7, #36]	@ 0x24
 800c164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c166:	881b      	ldrh	r3, [r3, #0]
 800c168:	b29b      	uxth	r3, r3
 800c16a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c16e:	b29a      	uxth	r2, r3
 800c170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c172:	801a      	strh	r2, [r3, #0]
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	691b      	ldr	r3, [r3, #16]
 800c178:	2b3e      	cmp	r3, #62	@ 0x3e
 800c17a:	d91d      	bls.n	800c1b8 <USB_ActivateEndpoint+0x2b0>
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	095b      	lsrs	r3, r3, #5
 800c182:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	691b      	ldr	r3, [r3, #16]
 800c188:	f003 031f 	and.w	r3, r3, #31
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d102      	bne.n	800c196 <USB_ActivateEndpoint+0x28e>
 800c190:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c192:	3b01      	subs	r3, #1
 800c194:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c198:	881b      	ldrh	r3, [r3, #0]
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	029b      	lsls	r3, r3, #10
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b4:	801a      	strh	r2, [r3, #0]
 800c1b6:	e026      	b.n	800c206 <USB_ActivateEndpoint+0x2fe>
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	691b      	ldr	r3, [r3, #16]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10a      	bne.n	800c1d6 <USB_ActivateEndpoint+0x2ce>
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c2:	881b      	ldrh	r3, [r3, #0]
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d2:	801a      	strh	r2, [r3, #0]
 800c1d4:	e017      	b.n	800c206 <USB_ActivateEndpoint+0x2fe>
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	691b      	ldr	r3, [r3, #16]
 800c1da:	085b      	lsrs	r3, r3, #1
 800c1dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	691b      	ldr	r3, [r3, #16]
 800c1e2:	f003 0301 	and.w	r3, r3, #1
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d002      	beq.n	800c1f0 <USB_ActivateEndpoint+0x2e8>
 800c1ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f2:	881b      	ldrh	r3, [r3, #0]
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	029b      	lsls	r3, r3, #10
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	4313      	orrs	r3, r2
 800c200:	b29a      	uxth	r2, r3
 800c202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c204:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	4413      	add	r3, r2
 800c210:	881b      	ldrh	r3, [r3, #0]
 800c212:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c214:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d01b      	beq.n	800c256 <USB_ActivateEndpoint+0x34e>
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	4413      	add	r3, r2
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c230:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c234:	843b      	strh	r3, [r7, #32]
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	441a      	add	r2, r3
 800c240:	8c3b      	ldrh	r3, [r7, #32]
 800c242:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c246:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c24a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c24e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c252:	b29b      	uxth	r3, r3
 800c254:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d124      	bne.n	800c2a8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	4413      	add	r3, r2
 800c268:	881b      	ldrh	r3, [r3, #0]
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c270:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c274:	83bb      	strh	r3, [r7, #28]
 800c276:	8bbb      	ldrh	r3, [r7, #28]
 800c278:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c27c:	83bb      	strh	r3, [r7, #28]
 800c27e:	8bbb      	ldrh	r3, [r7, #28]
 800c280:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c284:	83bb      	strh	r3, [r7, #28]
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	441a      	add	r2, r3
 800c290:	8bbb      	ldrh	r3, [r7, #28]
 800c292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c29a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c29e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	8013      	strh	r3, [r2, #0]
 800c2a6:	e1ea      	b.n	800c67e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2be:	83fb      	strh	r3, [r7, #30]
 800c2c0:	8bfb      	ldrh	r3, [r7, #30]
 800c2c2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c2c6:	83fb      	strh	r3, [r7, #30]
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	441a      	add	r2, r3
 800c2d2:	8bfb      	ldrh	r3, [r7, #30]
 800c2d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	8013      	strh	r3, [r2, #0]
 800c2e8:	e1c9      	b.n	800c67e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	78db      	ldrb	r3, [r3, #3]
 800c2ee:	2b02      	cmp	r3, #2
 800c2f0:	d11e      	bne.n	800c330 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	4413      	add	r3, r2
 800c2fc:	881b      	ldrh	r3, [r3, #0]
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c308:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	441a      	add	r2, r3
 800c316:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c31a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c31e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c322:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	8013      	strh	r3, [r2, #0]
 800c32e:	e01d      	b.n	800c36c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4413      	add	r3, r2
 800c33a:	881b      	ldrh	r3, [r3, #0]
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c346:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	441a      	add	r2, r3
 800c354:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c358:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c35c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c368:	b29b      	uxth	r3, r3
 800c36a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c376:	b29b      	uxth	r3, r3
 800c378:	461a      	mov	r2, r3
 800c37a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c37c:	4413      	add	r3, r2
 800c37e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	00da      	lsls	r2, r3, #3
 800c386:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c388:	4413      	add	r3, r2
 800c38a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c38e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	891b      	ldrh	r3, [r3, #8]
 800c394:	085b      	lsrs	r3, r3, #1
 800c396:	b29b      	uxth	r3, r3
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	b29a      	uxth	r2, r3
 800c39c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c39e:	801a      	strh	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3b0:	4413      	add	r3, r2
 800c3b2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	00da      	lsls	r2, r3, #3
 800c3ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3bc:	4413      	add	r3, r2
 800c3be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c3c2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	895b      	ldrh	r3, [r3, #10]
 800c3c8:	085b      	lsrs	r3, r3, #1
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	005b      	lsls	r3, r3, #1
 800c3ce:	b29a      	uxth	r2, r3
 800c3d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3d2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	785b      	ldrb	r3, [r3, #1]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f040 8093 	bne.w	800c504 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	4413      	add	r3, r2
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c3ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c3f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d01b      	beq.n	800c432 <USB_ActivateEndpoint+0x52a>
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	4413      	add	r3, r2
 800c404:	881b      	ldrh	r3, [r3, #0]
 800c406:	b29b      	uxth	r3, r3
 800c408:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c40c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c410:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	441a      	add	r2, r3
 800c41c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c41e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c426:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c42a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c42e:	b29b      	uxth	r3, r3
 800c430:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	4413      	add	r3, r2
 800c43c:	881b      	ldrh	r3, [r3, #0]
 800c43e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c440:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c446:	2b00      	cmp	r3, #0
 800c448:	d01b      	beq.n	800c482 <USB_ActivateEndpoint+0x57a>
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	4413      	add	r3, r2
 800c454:	881b      	ldrh	r3, [r3, #0]
 800c456:	b29b      	uxth	r3, r3
 800c458:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c45c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c460:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	441a      	add	r2, r3
 800c46c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c46e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c472:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c47a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c47e:	b29b      	uxth	r3, r3
 800c480:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	4413      	add	r3, r2
 800c48c:	881b      	ldrh	r3, [r3, #0]
 800c48e:	b29b      	uxth	r3, r3
 800c490:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c498:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c49a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c49c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c4a0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c4a2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c4a4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c4a8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	441a      	add	r2, r3
 800c4b4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c4b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	4413      	add	r3, r2
 800c4d4:	881b      	ldrh	r3, [r3, #0]
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	441a      	add	r2, r3
 800c4ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c4ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	8013      	strh	r3, [r2, #0]
 800c502:	e0bc      	b.n	800c67e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4413      	add	r3, r2
 800c50e:	881b      	ldrh	r3, [r3, #0]
 800c510:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c514:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c518:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d01d      	beq.n	800c55c <USB_ActivateEndpoint+0x654>
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	4413      	add	r3, r2
 800c52a:	881b      	ldrh	r3, [r3, #0]
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c536:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	441a      	add	r2, r3
 800c544:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c54c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c550:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c558:	b29b      	uxth	r3, r3
 800c55a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4413      	add	r3, r2
 800c566:	881b      	ldrh	r3, [r3, #0]
 800c568:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c56c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c574:	2b00      	cmp	r3, #0
 800c576:	d01d      	beq.n	800c5b4 <USB_ActivateEndpoint+0x6ac>
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	4413      	add	r3, r2
 800c582:	881b      	ldrh	r3, [r3, #0]
 800c584:	b29b      	uxth	r3, r3
 800c586:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c58a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c58e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	441a      	add	r2, r3
 800c59c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c5a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	78db      	ldrb	r3, [r3, #3]
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d024      	beq.n	800c606 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	4413      	add	r3, r2
 800c5c6:	881b      	ldrh	r3, [r3, #0]
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5d2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c5d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c5da:	f083 0320 	eor.w	r3, r3, #32
 800c5de:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	441a      	add	r2, r3
 800c5ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c5f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c600:	b29b      	uxth	r3, r3
 800c602:	8013      	strh	r3, [r2, #0]
 800c604:	e01d      	b.n	800c642 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4413      	add	r3, r2
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	b29b      	uxth	r3, r3
 800c614:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c61c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	441a      	add	r2, r3
 800c62a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c62e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c632:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c63a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c63e:	b29b      	uxth	r3, r3
 800c640:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	4413      	add	r3, r2
 800c64c:	881b      	ldrh	r3, [r3, #0]
 800c64e:	b29b      	uxth	r3, r3
 800c650:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c658:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	441a      	add	r2, r3
 800c666:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c66a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c66e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c67e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800c682:	4618      	mov	r0, r3
 800c684:	3774      	adds	r7, #116	@ 0x74
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop

0800c690 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c690:	b480      	push	{r7}
 800c692:	b08d      	sub	sp, #52	@ 0x34
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	7b1b      	ldrb	r3, [r3, #12]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f040 808e 	bne.w	800c7c0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	785b      	ldrb	r3, [r3, #1]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d044      	beq.n	800c736 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	4413      	add	r3, r2
 800c6b6:	881b      	ldrh	r3, [r3, #0]
 800c6b8:	81bb      	strh	r3, [r7, #12]
 800c6ba:	89bb      	ldrh	r3, [r7, #12]
 800c6bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d01b      	beq.n	800c6fc <USB_DeactivateEndpoint+0x6c>
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4413      	add	r3, r2
 800c6ce:	881b      	ldrh	r3, [r3, #0]
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6da:	817b      	strh	r3, [r7, #10]
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	441a      	add	r2, r3
 800c6e6:	897b      	ldrh	r3, [r7, #10]
 800c6e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	4413      	add	r3, r2
 800c706:	881b      	ldrh	r3, [r3, #0]
 800c708:	b29b      	uxth	r3, r3
 800c70a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c70e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c712:	813b      	strh	r3, [r7, #8]
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	441a      	add	r2, r3
 800c71e:	893b      	ldrh	r3, [r7, #8]
 800c720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c728:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c72c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c730:	b29b      	uxth	r3, r3
 800c732:	8013      	strh	r3, [r2, #0]
 800c734:	e192      	b.n	800ca5c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	4413      	add	r3, r2
 800c740:	881b      	ldrh	r3, [r3, #0]
 800c742:	827b      	strh	r3, [r7, #18]
 800c744:	8a7b      	ldrh	r3, [r7, #18]
 800c746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d01b      	beq.n	800c786 <USB_DeactivateEndpoint+0xf6>
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	4413      	add	r3, r2
 800c758:	881b      	ldrh	r3, [r3, #0]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c764:	823b      	strh	r3, [r7, #16]
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	441a      	add	r2, r3
 800c770:	8a3b      	ldrh	r3, [r7, #16]
 800c772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c77a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c77e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c782:	b29b      	uxth	r3, r3
 800c784:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	4413      	add	r3, r2
 800c790:	881b      	ldrh	r3, [r3, #0]
 800c792:	b29b      	uxth	r3, r3
 800c794:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c79c:	81fb      	strh	r3, [r7, #14]
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	441a      	add	r2, r3
 800c7a8:	89fb      	ldrh	r3, [r7, #14]
 800c7aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	8013      	strh	r3, [r2, #0]
 800c7be:	e14d      	b.n	800ca5c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	785b      	ldrb	r3, [r3, #1]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f040 80a5 	bne.w	800c914 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	4413      	add	r3, r2
 800c7d4:	881b      	ldrh	r3, [r3, #0]
 800c7d6:	843b      	strh	r3, [r7, #32]
 800c7d8:	8c3b      	ldrh	r3, [r7, #32]
 800c7da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d01b      	beq.n	800c81a <USB_DeactivateEndpoint+0x18a>
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	4413      	add	r3, r2
 800c7ec:	881b      	ldrh	r3, [r3, #0]
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7f8:	83fb      	strh	r3, [r7, #30]
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	009b      	lsls	r3, r3, #2
 800c802:	441a      	add	r2, r3
 800c804:	8bfb      	ldrh	r3, [r7, #30]
 800c806:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c80a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c80e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c816:	b29b      	uxth	r3, r3
 800c818:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	4413      	add	r3, r2
 800c824:	881b      	ldrh	r3, [r3, #0]
 800c826:	83bb      	strh	r3, [r7, #28]
 800c828:	8bbb      	ldrh	r3, [r7, #28]
 800c82a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d01b      	beq.n	800c86a <USB_DeactivateEndpoint+0x1da>
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	4413      	add	r3, r2
 800c83c:	881b      	ldrh	r3, [r3, #0]
 800c83e:	b29b      	uxth	r3, r3
 800c840:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c844:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c848:	837b      	strh	r3, [r7, #26]
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	441a      	add	r2, r3
 800c854:	8b7b      	ldrh	r3, [r7, #26]
 800c856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c85a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c85e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c862:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c866:	b29b      	uxth	r3, r3
 800c868:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	4413      	add	r3, r2
 800c874:	881b      	ldrh	r3, [r3, #0]
 800c876:	b29b      	uxth	r3, r3
 800c878:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c87c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c880:	833b      	strh	r3, [r7, #24]
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	441a      	add	r2, r3
 800c88c:	8b3b      	ldrh	r3, [r7, #24]
 800c88e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c89a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	4413      	add	r3, r2
 800c8ac:	881b      	ldrh	r3, [r3, #0]
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c8b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8b8:	82fb      	strh	r3, [r7, #22]
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	441a      	add	r2, r3
 800c8c4:	8afb      	ldrh	r3, [r7, #22]
 800c8c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	4413      	add	r3, r2
 800c8e4:	881b      	ldrh	r3, [r3, #0]
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8f0:	82bb      	strh	r3, [r7, #20]
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	441a      	add	r2, r3
 800c8fc:	8abb      	ldrh	r3, [r7, #20]
 800c8fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c902:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c90a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c90e:	b29b      	uxth	r3, r3
 800c910:	8013      	strh	r3, [r2, #0]
 800c912:	e0a3      	b.n	800ca5c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	009b      	lsls	r3, r3, #2
 800c91c:	4413      	add	r3, r2
 800c91e:	881b      	ldrh	r3, [r3, #0]
 800c920:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c922:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c924:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d01b      	beq.n	800c964 <USB_DeactivateEndpoint+0x2d4>
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	4413      	add	r3, r2
 800c936:	881b      	ldrh	r3, [r3, #0]
 800c938:	b29b      	uxth	r3, r3
 800c93a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c93e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c942:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	441a      	add	r2, r3
 800c94e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c958:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c95c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c960:	b29b      	uxth	r3, r3
 800c962:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	009b      	lsls	r3, r3, #2
 800c96c:	4413      	add	r3, r2
 800c96e:	881b      	ldrh	r3, [r3, #0]
 800c970:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c972:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d01b      	beq.n	800c9b4 <USB_DeactivateEndpoint+0x324>
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	4413      	add	r3, r2
 800c986:	881b      	ldrh	r3, [r3, #0]
 800c988:	b29b      	uxth	r3, r3
 800c98a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c98e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c992:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	441a      	add	r2, r3
 800c99e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c9a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	4413      	add	r3, r2
 800c9be:	881b      	ldrh	r3, [r3, #0]
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	441a      	add	r2, r3
 800c9d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c9d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c9e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	4413      	add	r3, r2
 800c9f6:	881b      	ldrh	r3, [r3, #0]
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca02:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	441a      	add	r2, r3
 800ca0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	4413      	add	r3, r2
 800ca2e:	881b      	ldrh	r3, [r3, #0]
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ca36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca3a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	441a      	add	r2, r3
 800ca46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ca48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ca5c:	2300      	movs	r3, #0
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3734      	adds	r7, #52	@ 0x34
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr

0800ca6a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b0c2      	sub	sp, #264	@ 0x108
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca78:	6018      	str	r0, [r3, #0]
 800ca7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca82:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ca84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	785b      	ldrb	r3, [r3, #1]
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	f040 86b7 	bne.w	800d804 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ca96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	699a      	ldr	r2, [r3, #24]
 800caa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d908      	bls.n	800cac4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800cab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	691b      	ldr	r3, [r3, #16]
 800cabe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800cac2:	e007      	b.n	800cad4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800cac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800cad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	7b1b      	ldrb	r3, [r3, #12]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d13a      	bne.n	800cb5a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800cae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	6959      	ldr	r1, [r3, #20]
 800caf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	88da      	ldrh	r2, [r3, #6]
 800cafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cb06:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cb0a:	6800      	ldr	r0, [r0, #0]
 800cb0c:	f001 fc98 	bl	800e440 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cb10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	613b      	str	r3, [r7, #16]
 800cb1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	4413      	add	r3, r2
 800cb32:	613b      	str	r3, [r7, #16]
 800cb34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	00da      	lsls	r2, r3, #3
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	4413      	add	r3, r2
 800cb46:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cb4a:	60fb      	str	r3, [r7, #12]
 800cb4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb50:	b29a      	uxth	r2, r3
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	801a      	strh	r2, [r3, #0]
 800cb56:	f000 be1f 	b.w	800d798 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cb5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	78db      	ldrb	r3, [r3, #3]
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	f040 8462 	bne.w	800d430 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cb6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	6a1a      	ldr	r2, [r3, #32]
 800cb78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	691b      	ldr	r3, [r3, #16]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	f240 83df 	bls.w	800d348 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cb8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	4413      	add	r3, r2
 800cba4:	881b      	ldrh	r3, [r3, #0]
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbb0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800cbb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	441a      	add	r2, r3
 800cbce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800cbd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbda:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cbde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cbe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	6a1a      	ldr	r2, [r3, #32]
 800cbf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbf6:	1ad2      	subs	r2, r2, r3
 800cbf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cc04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4413      	add	r3, r2
 800cc1e:	881b      	ldrh	r3, [r3, #0]
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f000 81c7 	beq.w	800cfba <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cc2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	785b      	ldrb	r3, [r3, #1]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d177      	bne.n	800cd38 <USB_EPStartXfer+0x2ce>
 800cc48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc62:	b29b      	uxth	r3, r3
 800cc64:	461a      	mov	r2, r3
 800cc66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc68:	4413      	add	r3, r2
 800cc6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	00da      	lsls	r2, r3, #3
 800cc7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc7c:	4413      	add	r3, r2
 800cc7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cc82:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc86:	881b      	ldrh	r3, [r3, #0]
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc92:	801a      	strh	r2, [r3, #0]
 800cc94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc98:	2b3e      	cmp	r3, #62	@ 0x3e
 800cc9a:	d921      	bls.n	800cce0 <USB_EPStartXfer+0x276>
 800cc9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cca0:	095b      	lsrs	r3, r3, #5
 800cca2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccaa:	f003 031f 	and.w	r3, r3, #31
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d104      	bne.n	800ccbc <USB_EPStartXfer+0x252>
 800ccb2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccbe:	881b      	ldrh	r3, [r3, #0]
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	029b      	lsls	r3, r3, #10
 800ccca:	b29b      	uxth	r3, r3
 800cccc:	4313      	orrs	r3, r2
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccdc:	801a      	strh	r2, [r3, #0]
 800ccde:	e050      	b.n	800cd82 <USB_EPStartXfer+0x318>
 800cce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d10a      	bne.n	800ccfe <USB_EPStartXfer+0x294>
 800cce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccea:	881b      	ldrh	r3, [r3, #0]
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfa:	801a      	strh	r2, [r3, #0]
 800ccfc:	e041      	b.n	800cd82 <USB_EPStartXfer+0x318>
 800ccfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd02:	085b      	lsrs	r3, r3, #1
 800cd04:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cd08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd0c:	f003 0301 	and.w	r3, r3, #1
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d004      	beq.n	800cd1e <USB_EPStartXfer+0x2b4>
 800cd14:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cd18:	3301      	adds	r3, #1
 800cd1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd20:	881b      	ldrh	r3, [r3, #0]
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	029b      	lsls	r3, r3, #10
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd34:	801a      	strh	r2, [r3, #0]
 800cd36:	e024      	b.n	800cd82 <USB_EPStartXfer+0x318>
 800cd38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	785b      	ldrb	r3, [r3, #1]
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d11c      	bne.n	800cd82 <USB_EPStartXfer+0x318>
 800cd48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	461a      	mov	r2, r3
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd5c:	4413      	add	r3, r2
 800cd5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	00da      	lsls	r2, r3, #3
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd70:	4413      	add	r3, r2
 800cd72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cd76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cd82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	895b      	ldrh	r3, [r3, #10]
 800cd8e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	6959      	ldr	r1, [r3, #20]
 800cd9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cda8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cdac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cdb0:	6800      	ldr	r0, [r0, #0]
 800cdb2:	f001 fb45 	bl	800e440 <USB_WritePMA>
            ep->xfer_buff += len;
 800cdb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	695a      	ldr	r2, [r3, #20]
 800cdc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdc6:	441a      	add	r2, r3
 800cdc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cdd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	6a1a      	ldr	r2, [r3, #32]
 800cde0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cde4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	691b      	ldr	r3, [r3, #16]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d90f      	bls.n	800ce10 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800cdf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	6a1a      	ldr	r2, [r3, #32]
 800cdfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce00:	1ad2      	subs	r2, r2, r3
 800ce02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	621a      	str	r2, [r3, #32]
 800ce0e:	e00e      	b.n	800ce2e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800ce10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	6a1b      	ldr	r3, [r3, #32]
 800ce1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800ce20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ce2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	785b      	ldrb	r3, [r3, #1]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d177      	bne.n	800cf2e <USB_EPStartXfer+0x4c4>
 800ce3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	61bb      	str	r3, [r7, #24]
 800ce4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	4413      	add	r3, r2
 800ce60:	61bb      	str	r3, [r7, #24]
 800ce62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	00da      	lsls	r2, r3, #3
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	4413      	add	r3, r2
 800ce74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce78:	617b      	str	r3, [r7, #20]
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	881b      	ldrh	r3, [r3, #0]
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce84:	b29a      	uxth	r2, r3
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	801a      	strh	r2, [r3, #0]
 800ce8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce8e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce90:	d921      	bls.n	800ced6 <USB_EPStartXfer+0x46c>
 800ce92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce96:	095b      	lsrs	r3, r3, #5
 800ce98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ce9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cea0:	f003 031f 	and.w	r3, r3, #31
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d104      	bne.n	800ceb2 <USB_EPStartXfer+0x448>
 800cea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ceac:	3b01      	subs	r3, #1
 800ceae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	881b      	ldrh	r3, [r3, #0]
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	029b      	lsls	r3, r3, #10
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	4313      	orrs	r3, r2
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ceca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cece:	b29a      	uxth	r2, r3
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	801a      	strh	r2, [r3, #0]
 800ced4:	e056      	b.n	800cf84 <USB_EPStartXfer+0x51a>
 800ced6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d10a      	bne.n	800cef4 <USB_EPStartXfer+0x48a>
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	881b      	ldrh	r3, [r3, #0]
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	801a      	strh	r2, [r3, #0]
 800cef2:	e047      	b.n	800cf84 <USB_EPStartXfer+0x51a>
 800cef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cef8:	085b      	lsrs	r3, r3, #1
 800cefa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cefe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf02:	f003 0301 	and.w	r3, r3, #1
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d004      	beq.n	800cf14 <USB_EPStartXfer+0x4aa>
 800cf0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf0e:	3301      	adds	r3, #1
 800cf10:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	881b      	ldrh	r3, [r3, #0]
 800cf18:	b29a      	uxth	r2, r3
 800cf1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	029b      	lsls	r3, r3, #10
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	4313      	orrs	r3, r2
 800cf26:	b29a      	uxth	r2, r3
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	801a      	strh	r2, [r3, #0]
 800cf2c:	e02a      	b.n	800cf84 <USB_EPStartXfer+0x51a>
 800cf2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	785b      	ldrb	r3, [r3, #1]
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d122      	bne.n	800cf84 <USB_EPStartXfer+0x51a>
 800cf3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	623b      	str	r3, [r7, #32]
 800cf4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	6a3b      	ldr	r3, [r7, #32]
 800cf5e:	4413      	add	r3, r2
 800cf60:	623b      	str	r3, [r7, #32]
 800cf62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	00da      	lsls	r2, r3, #3
 800cf70:	6a3b      	ldr	r3, [r7, #32]
 800cf72:	4413      	add	r3, r2
 800cf74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cf78:	61fb      	str	r3, [r7, #28]
 800cf7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf7e:	b29a      	uxth	r2, r3
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cf84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	891b      	ldrh	r3, [r3, #8]
 800cf90:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	6959      	ldr	r1, [r3, #20]
 800cfa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cfaa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cfae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cfb2:	6800      	ldr	r0, [r0, #0]
 800cfb4:	f001 fa44 	bl	800e440 <USB_WritePMA>
 800cfb8:	e3ee      	b.n	800d798 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cfba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	785b      	ldrb	r3, [r3, #1]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d177      	bne.n	800d0ba <USB_EPStartXfer+0x650>
 800cfca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfea:	4413      	add	r3, r2
 800cfec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	00da      	lsls	r2, r3, #3
 800cffc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cffe:	4413      	add	r3, r2
 800d000:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d004:	647b      	str	r3, [r7, #68]	@ 0x44
 800d006:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d008:	881b      	ldrh	r3, [r3, #0]
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d010:	b29a      	uxth	r2, r3
 800d012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d014:	801a      	strh	r2, [r3, #0]
 800d016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d01a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d01c:	d921      	bls.n	800d062 <USB_EPStartXfer+0x5f8>
 800d01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d022:	095b      	lsrs	r3, r3, #5
 800d024:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d02c:	f003 031f 	and.w	r3, r3, #31
 800d030:	2b00      	cmp	r3, #0
 800d032:	d104      	bne.n	800d03e <USB_EPStartXfer+0x5d4>
 800d034:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d038:	3b01      	subs	r3, #1
 800d03a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d03e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d040:	881b      	ldrh	r3, [r3, #0]
 800d042:	b29a      	uxth	r2, r3
 800d044:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d048:	b29b      	uxth	r3, r3
 800d04a:	029b      	lsls	r3, r3, #10
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	4313      	orrs	r3, r2
 800d050:	b29b      	uxth	r3, r3
 800d052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d05e:	801a      	strh	r2, [r3, #0]
 800d060:	e056      	b.n	800d110 <USB_EPStartXfer+0x6a6>
 800d062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d066:	2b00      	cmp	r3, #0
 800d068:	d10a      	bne.n	800d080 <USB_EPStartXfer+0x616>
 800d06a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d06c:	881b      	ldrh	r3, [r3, #0]
 800d06e:	b29b      	uxth	r3, r3
 800d070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d078:	b29a      	uxth	r2, r3
 800d07a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d07c:	801a      	strh	r2, [r3, #0]
 800d07e:	e047      	b.n	800d110 <USB_EPStartXfer+0x6a6>
 800d080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d084:	085b      	lsrs	r3, r3, #1
 800d086:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d08e:	f003 0301 	and.w	r3, r3, #1
 800d092:	2b00      	cmp	r3, #0
 800d094:	d004      	beq.n	800d0a0 <USB_EPStartXfer+0x636>
 800d096:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d09a:	3301      	adds	r3, #1
 800d09c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d0a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0a2:	881b      	ldrh	r3, [r3, #0]
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	029b      	lsls	r3, r3, #10
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0b6:	801a      	strh	r2, [r3, #0]
 800d0b8:	e02a      	b.n	800d110 <USB_EPStartXfer+0x6a6>
 800d0ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	785b      	ldrb	r3, [r3, #1]
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d122      	bne.n	800d110 <USB_EPStartXfer+0x6a6>
 800d0ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	653b      	str	r3, [r7, #80]	@ 0x50
 800d0d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0ea:	4413      	add	r3, r2
 800d0ec:	653b      	str	r3, [r7, #80]	@ 0x50
 800d0ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	00da      	lsls	r2, r3, #3
 800d0fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0fe:	4413      	add	r3, r2
 800d100:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d104:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d10e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	891b      	ldrh	r3, [r3, #8]
 800d11c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	6959      	ldr	r1, [r3, #20]
 800d12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d130:	b29b      	uxth	r3, r3
 800d132:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d136:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d13a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d13e:	6800      	ldr	r0, [r0, #0]
 800d140:	f001 f97e 	bl	800e440 <USB_WritePMA>
            ep->xfer_buff += len;
 800d144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	695a      	ldr	r2, [r3, #20]
 800d150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d154:	441a      	add	r2, r3
 800d156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d15a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	6a1a      	ldr	r2, [r3, #32]
 800d16e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d90f      	bls.n	800d19e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d17e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	6a1a      	ldr	r2, [r3, #32]
 800d18a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d18e:	1ad2      	subs	r2, r2, r3
 800d190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	621a      	str	r2, [r3, #32]
 800d19c:	e00e      	b.n	800d1bc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d19e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	6a1b      	ldr	r3, [r3, #32]
 800d1aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d1ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d1bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	785b      	ldrb	r3, [r3, #1]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d177      	bne.n	800d2c8 <USB_EPStartXfer+0x85e>
 800d1d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d1e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f8:	4413      	add	r3, r2
 800d1fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d1fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	00da      	lsls	r2, r3, #3
 800d20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d20c:	4413      	add	r3, r2
 800d20e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d212:	637b      	str	r3, [r7, #52]	@ 0x34
 800d214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d216:	881b      	ldrh	r3, [r3, #0]
 800d218:	b29b      	uxth	r3, r3
 800d21a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d21e:	b29a      	uxth	r2, r3
 800d220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d222:	801a      	strh	r2, [r3, #0]
 800d224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d228:	2b3e      	cmp	r3, #62	@ 0x3e
 800d22a:	d921      	bls.n	800d270 <USB_EPStartXfer+0x806>
 800d22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d230:	095b      	lsrs	r3, r3, #5
 800d232:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d23a:	f003 031f 	and.w	r3, r3, #31
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d104      	bne.n	800d24c <USB_EPStartXfer+0x7e2>
 800d242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d246:	3b01      	subs	r3, #1
 800d248:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d24e:	881b      	ldrh	r3, [r3, #0]
 800d250:	b29a      	uxth	r2, r3
 800d252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d256:	b29b      	uxth	r3, r3
 800d258:	029b      	lsls	r3, r3, #10
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	4313      	orrs	r3, r2
 800d25e:	b29b      	uxth	r3, r3
 800d260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d268:	b29a      	uxth	r2, r3
 800d26a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d26c:	801a      	strh	r2, [r3, #0]
 800d26e:	e050      	b.n	800d312 <USB_EPStartXfer+0x8a8>
 800d270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d274:	2b00      	cmp	r3, #0
 800d276:	d10a      	bne.n	800d28e <USB_EPStartXfer+0x824>
 800d278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d27a:	881b      	ldrh	r3, [r3, #0]
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d286:	b29a      	uxth	r2, r3
 800d288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d28a:	801a      	strh	r2, [r3, #0]
 800d28c:	e041      	b.n	800d312 <USB_EPStartXfer+0x8a8>
 800d28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d292:	085b      	lsrs	r3, r3, #1
 800d294:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d29c:	f003 0301 	and.w	r3, r3, #1
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d004      	beq.n	800d2ae <USB_EPStartXfer+0x844>
 800d2a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d2ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2b0:	881b      	ldrh	r3, [r3, #0]
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	029b      	lsls	r3, r3, #10
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	b29a      	uxth	r2, r3
 800d2c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2c4:	801a      	strh	r2, [r3, #0]
 800d2c6:	e024      	b.n	800d312 <USB_EPStartXfer+0x8a8>
 800d2c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	785b      	ldrb	r3, [r3, #1]
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d11c      	bne.n	800d312 <USB_EPStartXfer+0x8a8>
 800d2d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2ec:	4413      	add	r3, r2
 800d2ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800d2f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	00da      	lsls	r2, r3, #3
 800d2fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d300:	4413      	add	r3, r2
 800d302:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d306:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d30c:	b29a      	uxth	r2, r3
 800d30e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d310:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	895b      	ldrh	r3, [r3, #10]
 800d31e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	6959      	ldr	r1, [r3, #20]
 800d32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d332:	b29b      	uxth	r3, r3
 800d334:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d338:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d33c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d340:	6800      	ldr	r0, [r0, #0]
 800d342:	f001 f87d 	bl	800e440 <USB_WritePMA>
 800d346:	e227      	b.n	800d798 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d34c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	6a1b      	ldr	r3, [r3, #32]
 800d354:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d35c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	4413      	add	r3, r2
 800d372:	881b      	ldrh	r3, [r3, #0]
 800d374:	b29b      	uxth	r3, r3
 800d376:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d37a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d37e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d386:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	441a      	add	r2, r3
 800d39c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d3a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d3a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d3a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d3b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d3c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d3d4:	4413      	add	r3, r2
 800d3d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d3d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	00da      	lsls	r2, r3, #3
 800d3e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d3e8:	4413      	add	r3, r2
 800d3ea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d3ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d3f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d3f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d3fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	891b      	ldrh	r3, [r3, #8]
 800d406:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d40a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d40e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	6959      	ldr	r1, [r3, #20]
 800d416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d420:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d424:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d428:	6800      	ldr	r0, [r0, #0]
 800d42a:	f001 f809 	bl	800e440 <USB_WritePMA>
 800d42e:	e1b3      	b.n	800d798 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	6a1a      	ldr	r2, [r3, #32]
 800d43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d440:	1ad2      	subs	r2, r2, r3
 800d442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d44e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d452:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d45c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	4413      	add	r3, r2
 800d468:	881b      	ldrh	r3, [r3, #0]
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d470:	2b00      	cmp	r3, #0
 800d472:	f000 80c6 	beq.w	800d602 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d47a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	673b      	str	r3, [r7, #112]	@ 0x70
 800d482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	785b      	ldrb	r3, [r3, #1]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d177      	bne.n	800d582 <USB_EPStartXfer+0xb18>
 800d492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d496:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d49e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d4b2:	4413      	add	r3, r2
 800d4b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d4b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	00da      	lsls	r2, r3, #3
 800d4c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d4c6:	4413      	add	r3, r2
 800d4c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d4cc:	667b      	str	r3, [r7, #100]	@ 0x64
 800d4ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d4d0:	881b      	ldrh	r3, [r3, #0]
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d4d8:	b29a      	uxth	r2, r3
 800d4da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d4dc:	801a      	strh	r2, [r3, #0]
 800d4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4e2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d4e4:	d921      	bls.n	800d52a <USB_EPStartXfer+0xac0>
 800d4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4ea:	095b      	lsrs	r3, r3, #5
 800d4ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4f4:	f003 031f 	and.w	r3, r3, #31
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d104      	bne.n	800d506 <USB_EPStartXfer+0xa9c>
 800d4fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d500:	3b01      	subs	r3, #1
 800d502:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d506:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d508:	881b      	ldrh	r3, [r3, #0]
 800d50a:	b29a      	uxth	r2, r3
 800d50c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d510:	b29b      	uxth	r3, r3
 800d512:	029b      	lsls	r3, r3, #10
 800d514:	b29b      	uxth	r3, r3
 800d516:	4313      	orrs	r3, r2
 800d518:	b29b      	uxth	r3, r3
 800d51a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d51e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d522:	b29a      	uxth	r2, r3
 800d524:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d526:	801a      	strh	r2, [r3, #0]
 800d528:	e050      	b.n	800d5cc <USB_EPStartXfer+0xb62>
 800d52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d10a      	bne.n	800d548 <USB_EPStartXfer+0xade>
 800d532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d534:	881b      	ldrh	r3, [r3, #0]
 800d536:	b29b      	uxth	r3, r3
 800d538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d53c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d540:	b29a      	uxth	r2, r3
 800d542:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d544:	801a      	strh	r2, [r3, #0]
 800d546:	e041      	b.n	800d5cc <USB_EPStartXfer+0xb62>
 800d548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d54c:	085b      	lsrs	r3, r3, #1
 800d54e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d556:	f003 0301 	and.w	r3, r3, #1
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d004      	beq.n	800d568 <USB_EPStartXfer+0xafe>
 800d55e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d562:	3301      	adds	r3, #1
 800d564:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d568:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d56a:	881b      	ldrh	r3, [r3, #0]
 800d56c:	b29a      	uxth	r2, r3
 800d56e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d572:	b29b      	uxth	r3, r3
 800d574:	029b      	lsls	r3, r3, #10
 800d576:	b29b      	uxth	r3, r3
 800d578:	4313      	orrs	r3, r2
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d57e:	801a      	strh	r2, [r3, #0]
 800d580:	e024      	b.n	800d5cc <USB_EPStartXfer+0xb62>
 800d582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d586:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	785b      	ldrb	r3, [r3, #1]
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d11c      	bne.n	800d5cc <USB_EPStartXfer+0xb62>
 800d592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d596:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d5a6:	4413      	add	r3, r2
 800d5a8:	673b      	str	r3, [r7, #112]	@ 0x70
 800d5aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	00da      	lsls	r2, r3, #3
 800d5b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d5ba:	4413      	add	r3, r2
 800d5bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d5c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d5c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5c6:	b29a      	uxth	r2, r3
 800d5c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d5cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	895b      	ldrh	r3, [r3, #10]
 800d5d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d5dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	6959      	ldr	r1, [r3, #20]
 800d5e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5ec:	b29b      	uxth	r3, r3
 800d5ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d5f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d5f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d5fa:	6800      	ldr	r0, [r0, #0]
 800d5fc:	f000 ff20 	bl	800e440 <USB_WritePMA>
 800d600:	e0ca      	b.n	800d798 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	785b      	ldrb	r3, [r3, #1]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d177      	bne.n	800d702 <USB_EPStartXfer+0xc98>
 800d612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d616:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d61e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d622:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	461a      	mov	r2, r3
 800d630:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d632:	4413      	add	r3, r2
 800d634:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d63a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	00da      	lsls	r2, r3, #3
 800d644:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d646:	4413      	add	r3, r2
 800d648:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d64c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d64e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d650:	881b      	ldrh	r3, [r3, #0]
 800d652:	b29b      	uxth	r3, r3
 800d654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d658:	b29a      	uxth	r2, r3
 800d65a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d65c:	801a      	strh	r2, [r3, #0]
 800d65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d662:	2b3e      	cmp	r3, #62	@ 0x3e
 800d664:	d921      	bls.n	800d6aa <USB_EPStartXfer+0xc40>
 800d666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d66a:	095b      	lsrs	r3, r3, #5
 800d66c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d674:	f003 031f 	and.w	r3, r3, #31
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d104      	bne.n	800d686 <USB_EPStartXfer+0xc1c>
 800d67c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d680:	3b01      	subs	r3, #1
 800d682:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d686:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d690:	b29b      	uxth	r3, r3
 800d692:	029b      	lsls	r3, r3, #10
 800d694:	b29b      	uxth	r3, r3
 800d696:	4313      	orrs	r3, r2
 800d698:	b29b      	uxth	r3, r3
 800d69a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d69e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d6a6:	801a      	strh	r2, [r3, #0]
 800d6a8:	e05c      	b.n	800d764 <USB_EPStartXfer+0xcfa>
 800d6aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d10a      	bne.n	800d6c8 <USB_EPStartXfer+0xc5e>
 800d6b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d6b4:	881b      	ldrh	r3, [r3, #0]
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d6c4:	801a      	strh	r2, [r3, #0]
 800d6c6:	e04d      	b.n	800d764 <USB_EPStartXfer+0xcfa>
 800d6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6cc:	085b      	lsrs	r3, r3, #1
 800d6ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6d6:	f003 0301 	and.w	r3, r3, #1
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d004      	beq.n	800d6e8 <USB_EPStartXfer+0xc7e>
 800d6de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d6e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d6ea:	881b      	ldrh	r3, [r3, #0]
 800d6ec:	b29a      	uxth	r2, r3
 800d6ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	029b      	lsls	r3, r3, #10
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	b29a      	uxth	r2, r3
 800d6fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d6fe:	801a      	strh	r2, [r3, #0]
 800d700:	e030      	b.n	800d764 <USB_EPStartXfer+0xcfa>
 800d702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	785b      	ldrb	r3, [r3, #1]
 800d70e:	2b01      	cmp	r3, #1
 800d710:	d128      	bne.n	800d764 <USB_EPStartXfer+0xcfa>
 800d712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d716:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d724:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d72e:	b29b      	uxth	r3, r3
 800d730:	461a      	mov	r2, r3
 800d732:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d736:	4413      	add	r3, r2
 800d738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d73c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	00da      	lsls	r2, r3, #3
 800d74a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d74e:	4413      	add	r3, r2
 800d750:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d754:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d75c:	b29a      	uxth	r2, r3
 800d75e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d762:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	891b      	ldrh	r3, [r3, #8]
 800d770:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	6959      	ldr	r1, [r3, #20]
 800d780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d784:	b29b      	uxth	r3, r3
 800d786:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d78a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d78e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d792:	6800      	ldr	r0, [r0, #0]
 800d794:	f000 fe54 	bl	800e440 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d79c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	4413      	add	r3, r2
 800d7b2:	881b      	ldrh	r3, [r3, #0]
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7be:	817b      	strh	r3, [r7, #10]
 800d7c0:	897b      	ldrh	r3, [r7, #10]
 800d7c2:	f083 0310 	eor.w	r3, r3, #16
 800d7c6:	817b      	strh	r3, [r7, #10]
 800d7c8:	897b      	ldrh	r3, [r7, #10]
 800d7ca:	f083 0320 	eor.w	r3, r3, #32
 800d7ce:	817b      	strh	r3, [r7, #10]
 800d7d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	441a      	add	r2, r3
 800d7ea:	897b      	ldrh	r3, [r7, #10]
 800d7ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	8013      	strh	r3, [r2, #0]
 800d800:	f000 bcde 	b.w	800e1c0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	7b1b      	ldrb	r3, [r3, #12]
 800d810:	2b00      	cmp	r3, #0
 800d812:	f040 80bb 	bne.w	800d98c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d81a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	699a      	ldr	r2, [r3, #24]
 800d822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	691b      	ldr	r3, [r3, #16]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d917      	bls.n	800d862 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800d832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	691b      	ldr	r3, [r3, #16]
 800d83e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800d842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d846:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	699a      	ldr	r2, [r3, #24]
 800d84e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d852:	1ad2      	subs	r2, r2, r3
 800d854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	619a      	str	r2, [r3, #24]
 800d860:	e00e      	b.n	800d880 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800d862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	699b      	ldr	r3, [r3, #24]
 800d86e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800d872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2200      	movs	r2, #0
 800d87e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d884:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d88e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d89c:	b29b      	uxth	r3, r3
 800d89e:	461a      	mov	r2, r3
 800d8a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d8a4:	4413      	add	r3, r2
 800d8a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d8aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	00da      	lsls	r2, r3, #3
 800d8b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d8bc:	4413      	add	r3, r2
 800d8be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d8c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d8c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d8ca:	881b      	ldrh	r3, [r3, #0]
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d8d8:	801a      	strh	r2, [r3, #0]
 800d8da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8de:	2b3e      	cmp	r3, #62	@ 0x3e
 800d8e0:	d924      	bls.n	800d92c <USB_EPStartXfer+0xec2>
 800d8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8e6:	095b      	lsrs	r3, r3, #5
 800d8e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8f0:	f003 031f 	and.w	r3, r3, #31
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d104      	bne.n	800d902 <USB_EPStartXfer+0xe98>
 800d8f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d8fc:	3b01      	subs	r3, #1
 800d8fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d906:	881b      	ldrh	r3, [r3, #0]
 800d908:	b29a      	uxth	r2, r3
 800d90a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d90e:	b29b      	uxth	r3, r3
 800d910:	029b      	lsls	r3, r3, #10
 800d912:	b29b      	uxth	r3, r3
 800d914:	4313      	orrs	r3, r2
 800d916:	b29b      	uxth	r3, r3
 800d918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d91c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d920:	b29a      	uxth	r2, r3
 800d922:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d926:	801a      	strh	r2, [r3, #0]
 800d928:	f000 bc10 	b.w	800e14c <USB_EPStartXfer+0x16e2>
 800d92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d930:	2b00      	cmp	r3, #0
 800d932:	d10c      	bne.n	800d94e <USB_EPStartXfer+0xee4>
 800d934:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d938:	881b      	ldrh	r3, [r3, #0]
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d944:	b29a      	uxth	r2, r3
 800d946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d94a:	801a      	strh	r2, [r3, #0]
 800d94c:	e3fe      	b.n	800e14c <USB_EPStartXfer+0x16e2>
 800d94e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d952:	085b      	lsrs	r3, r3, #1
 800d954:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d95c:	f003 0301 	and.w	r3, r3, #1
 800d960:	2b00      	cmp	r3, #0
 800d962:	d004      	beq.n	800d96e <USB_EPStartXfer+0xf04>
 800d964:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d968:	3301      	adds	r3, #1
 800d96a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d96e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d972:	881b      	ldrh	r3, [r3, #0]
 800d974:	b29a      	uxth	r2, r3
 800d976:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	029b      	lsls	r3, r3, #10
 800d97e:	b29b      	uxth	r3, r3
 800d980:	4313      	orrs	r3, r2
 800d982:	b29a      	uxth	r2, r3
 800d984:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d988:	801a      	strh	r2, [r3, #0]
 800d98a:	e3df      	b.n	800e14c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d98c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	78db      	ldrb	r3, [r3, #3]
 800d998:	2b02      	cmp	r3, #2
 800d99a:	f040 8218 	bne.w	800ddce <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d99e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	785b      	ldrb	r3, [r3, #1]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	f040 809d 	bne.w	800daea <USB_EPStartXfer+0x1080>
 800d9b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d9be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9d4:	4413      	add	r3, r2
 800d9d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d9da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	00da      	lsls	r2, r3, #3
 800d9e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9ec:	4413      	add	r3, r2
 800d9ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d9f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d9f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9fa:	881b      	ldrh	r3, [r3, #0]
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da02:	b29a      	uxth	r2, r3
 800da04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da08:	801a      	strh	r2, [r3, #0]
 800da0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	691b      	ldr	r3, [r3, #16]
 800da16:	2b3e      	cmp	r3, #62	@ 0x3e
 800da18:	d92b      	bls.n	800da72 <USB_EPStartXfer+0x1008>
 800da1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	691b      	ldr	r3, [r3, #16]
 800da26:	095b      	lsrs	r3, r3, #5
 800da28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800da2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	691b      	ldr	r3, [r3, #16]
 800da38:	f003 031f 	and.w	r3, r3, #31
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d104      	bne.n	800da4a <USB_EPStartXfer+0xfe0>
 800da40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da44:	3b01      	subs	r3, #1
 800da46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800da4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da4e:	881b      	ldrh	r3, [r3, #0]
 800da50:	b29a      	uxth	r2, r3
 800da52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da56:	b29b      	uxth	r3, r3
 800da58:	029b      	lsls	r3, r3, #10
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	4313      	orrs	r3, r2
 800da5e:	b29b      	uxth	r3, r3
 800da60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da68:	b29a      	uxth	r2, r3
 800da6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da6e:	801a      	strh	r2, [r3, #0]
 800da70:	e070      	b.n	800db54 <USB_EPStartXfer+0x10ea>
 800da72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	691b      	ldr	r3, [r3, #16]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d10c      	bne.n	800da9c <USB_EPStartXfer+0x1032>
 800da82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da86:	881b      	ldrh	r3, [r3, #0]
 800da88:	b29b      	uxth	r3, r3
 800da8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da92:	b29a      	uxth	r2, r3
 800da94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da98:	801a      	strh	r2, [r3, #0]
 800da9a:	e05b      	b.n	800db54 <USB_EPStartXfer+0x10ea>
 800da9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	691b      	ldr	r3, [r3, #16]
 800daa8:	085b      	lsrs	r3, r3, #1
 800daaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800daae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	691b      	ldr	r3, [r3, #16]
 800daba:	f003 0301 	and.w	r3, r3, #1
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d004      	beq.n	800dacc <USB_EPStartXfer+0x1062>
 800dac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dac6:	3301      	adds	r3, #1
 800dac8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dacc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dad0:	881b      	ldrh	r3, [r3, #0]
 800dad2:	b29a      	uxth	r2, r3
 800dad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dad8:	b29b      	uxth	r3, r3
 800dada:	029b      	lsls	r3, r3, #10
 800dadc:	b29b      	uxth	r3, r3
 800dade:	4313      	orrs	r3, r2
 800dae0:	b29a      	uxth	r2, r3
 800dae2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dae6:	801a      	strh	r2, [r3, #0]
 800dae8:	e034      	b.n	800db54 <USB_EPStartXfer+0x10ea>
 800daea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	785b      	ldrb	r3, [r3, #1]
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d12c      	bne.n	800db54 <USB_EPStartXfer+0x10ea>
 800dafa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dafe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800db08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db16:	b29b      	uxth	r3, r3
 800db18:	461a      	mov	r2, r3
 800db1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800db1e:	4413      	add	r3, r2
 800db20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800db24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	00da      	lsls	r2, r3, #3
 800db32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800db36:	4413      	add	r3, r2
 800db38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800db3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800db40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	691b      	ldr	r3, [r3, #16]
 800db4c:	b29a      	uxth	r2, r3
 800db4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800db52:	801a      	strh	r2, [r3, #0]
 800db54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800db62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	785b      	ldrb	r3, [r3, #1]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	f040 809d 	bne.w	800dcae <USB_EPStartXfer+0x1244>
 800db74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800db82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db90:	b29b      	uxth	r3, r3
 800db92:	461a      	mov	r2, r3
 800db94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800db98:	4413      	add	r3, r2
 800db9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800db9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dba2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	00da      	lsls	r2, r3, #3
 800dbac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dbb0:	4413      	add	r3, r2
 800dbb2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dbb6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dbba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dbbe:	881b      	ldrh	r3, [r3, #0]
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dbc6:	b29a      	uxth	r2, r3
 800dbc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dbcc:	801a      	strh	r2, [r3, #0]
 800dbce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	691b      	ldr	r3, [r3, #16]
 800dbda:	2b3e      	cmp	r3, #62	@ 0x3e
 800dbdc:	d92b      	bls.n	800dc36 <USB_EPStartXfer+0x11cc>
 800dbde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	691b      	ldr	r3, [r3, #16]
 800dbea:	095b      	lsrs	r3, r3, #5
 800dbec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dbf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	691b      	ldr	r3, [r3, #16]
 800dbfc:	f003 031f 	and.w	r3, r3, #31
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d104      	bne.n	800dc0e <USB_EPStartXfer+0x11a4>
 800dc04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc08:	3b01      	subs	r3, #1
 800dc0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dc0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dc12:	881b      	ldrh	r3, [r3, #0]
 800dc14:	b29a      	uxth	r2, r3
 800dc16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	029b      	lsls	r3, r3, #10
 800dc1e:	b29b      	uxth	r3, r3
 800dc20:	4313      	orrs	r3, r2
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dc32:	801a      	strh	r2, [r3, #0]
 800dc34:	e069      	b.n	800dd0a <USB_EPStartXfer+0x12a0>
 800dc36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	691b      	ldr	r3, [r3, #16]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d10c      	bne.n	800dc60 <USB_EPStartXfer+0x11f6>
 800dc46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dc4a:	881b      	ldrh	r3, [r3, #0]
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dc5c:	801a      	strh	r2, [r3, #0]
 800dc5e:	e054      	b.n	800dd0a <USB_EPStartXfer+0x12a0>
 800dc60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	691b      	ldr	r3, [r3, #16]
 800dc6c:	085b      	lsrs	r3, r3, #1
 800dc6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dc72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	691b      	ldr	r3, [r3, #16]
 800dc7e:	f003 0301 	and.w	r3, r3, #1
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d004      	beq.n	800dc90 <USB_EPStartXfer+0x1226>
 800dc86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dc90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dc94:	881b      	ldrh	r3, [r3, #0]
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc9c:	b29b      	uxth	r3, r3
 800dc9e:	029b      	lsls	r3, r3, #10
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	4313      	orrs	r3, r2
 800dca4:	b29a      	uxth	r2, r3
 800dca6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dcaa:	801a      	strh	r2, [r3, #0]
 800dcac:	e02d      	b.n	800dd0a <USB_EPStartXfer+0x12a0>
 800dcae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	785b      	ldrb	r3, [r3, #1]
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d125      	bne.n	800dd0a <USB_EPStartXfer+0x12a0>
 800dcbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	461a      	mov	r2, r3
 800dcd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dcd4:	4413      	add	r3, r2
 800dcd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dcda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	00da      	lsls	r2, r3, #3
 800dce8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dcec:	4413      	add	r3, r2
 800dcee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dcf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dcf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	691b      	ldr	r3, [r3, #16]
 800dd02:	b29a      	uxth	r2, r3
 800dd04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dd08:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800dd0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	69db      	ldr	r3, [r3, #28]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	f000 8218 	beq.w	800e14c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800dd1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	4413      	add	r3, r2
 800dd36:	881b      	ldrh	r3, [r3, #0]
 800dd38:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dd3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dd40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d005      	beq.n	800dd54 <USB_EPStartXfer+0x12ea>
 800dd48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dd4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10d      	bne.n	800dd70 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dd54:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dd58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	f040 81f5 	bne.w	800e14c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dd62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dd66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f040 81ee 	bne.w	800e14c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800dd70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	4413      	add	r3, r2
 800dd8a:	881b      	ldrh	r3, [r3, #0]
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd96:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800dd9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dda8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	441a      	add	r2, r3
 800ddb4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ddb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ddbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ddc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddc4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	8013      	strh	r3, [r2, #0]
 800ddcc:	e1be      	b.n	800e14c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ddce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	78db      	ldrb	r3, [r3, #3]
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	f040 81b4 	bne.w	800e148 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800dde0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dde4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	699a      	ldr	r2, [r3, #24]
 800ddec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	691b      	ldr	r3, [r3, #16]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d917      	bls.n	800de2c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800ddfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	691b      	ldr	r3, [r3, #16]
 800de08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800de0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	699a      	ldr	r2, [r3, #24]
 800de18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de1c:	1ad2      	subs	r2, r2, r3
 800de1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	619a      	str	r2, [r3, #24]
 800de2a:	e00e      	b.n	800de4a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800de2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	699b      	ldr	r3, [r3, #24]
 800de38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800de3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2200      	movs	r2, #0
 800de48:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800de4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	785b      	ldrb	r3, [r3, #1]
 800de56:	2b00      	cmp	r3, #0
 800de58:	f040 8085 	bne.w	800df66 <USB_EPStartXfer+0x14fc>
 800de5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800de6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de78:	b29b      	uxth	r3, r3
 800de7a:	461a      	mov	r2, r3
 800de7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800de80:	4413      	add	r3, r2
 800de82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800de86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	00da      	lsls	r2, r3, #3
 800de94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800de98:	4413      	add	r3, r2
 800de9a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800de9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dea2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dea6:	881b      	ldrh	r3, [r3, #0]
 800dea8:	b29b      	uxth	r3, r3
 800deaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800deae:	b29a      	uxth	r2, r3
 800deb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800deb4:	801a      	strh	r2, [r3, #0]
 800deb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800deba:	2b3e      	cmp	r3, #62	@ 0x3e
 800debc:	d923      	bls.n	800df06 <USB_EPStartXfer+0x149c>
 800debe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dec2:	095b      	lsrs	r3, r3, #5
 800dec4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800decc:	f003 031f 	and.w	r3, r3, #31
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d104      	bne.n	800dede <USB_EPStartXfer+0x1474>
 800ded4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ded8:	3b01      	subs	r3, #1
 800deda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dede:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dee2:	881b      	ldrh	r3, [r3, #0]
 800dee4:	b29a      	uxth	r2, r3
 800dee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800deea:	b29b      	uxth	r3, r3
 800deec:	029b      	lsls	r3, r3, #10
 800deee:	b29b      	uxth	r3, r3
 800def0:	4313      	orrs	r3, r2
 800def2:	b29b      	uxth	r3, r3
 800def4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800def8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800defc:	b29a      	uxth	r2, r3
 800defe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800df02:	801a      	strh	r2, [r3, #0]
 800df04:	e060      	b.n	800dfc8 <USB_EPStartXfer+0x155e>
 800df06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d10c      	bne.n	800df28 <USB_EPStartXfer+0x14be>
 800df0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800df12:	881b      	ldrh	r3, [r3, #0]
 800df14:	b29b      	uxth	r3, r3
 800df16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df1e:	b29a      	uxth	r2, r3
 800df20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800df24:	801a      	strh	r2, [r3, #0]
 800df26:	e04f      	b.n	800dfc8 <USB_EPStartXfer+0x155e>
 800df28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df2c:	085b      	lsrs	r3, r3, #1
 800df2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800df32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df36:	f003 0301 	and.w	r3, r3, #1
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d004      	beq.n	800df48 <USB_EPStartXfer+0x14de>
 800df3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800df42:	3301      	adds	r3, #1
 800df44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800df48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800df4c:	881b      	ldrh	r3, [r3, #0]
 800df4e:	b29a      	uxth	r2, r3
 800df50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800df54:	b29b      	uxth	r3, r3
 800df56:	029b      	lsls	r3, r3, #10
 800df58:	b29b      	uxth	r3, r3
 800df5a:	4313      	orrs	r3, r2
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800df62:	801a      	strh	r2, [r3, #0]
 800df64:	e030      	b.n	800dfc8 <USB_EPStartXfer+0x155e>
 800df66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	785b      	ldrb	r3, [r3, #1]
 800df72:	2b01      	cmp	r3, #1
 800df74:	d128      	bne.n	800dfc8 <USB_EPStartXfer+0x155e>
 800df76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800df84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df92:	b29b      	uxth	r3, r3
 800df94:	461a      	mov	r2, r3
 800df96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df9a:	4413      	add	r3, r2
 800df9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800dfa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	00da      	lsls	r2, r3, #3
 800dfae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dfb2:	4413      	add	r3, r2
 800dfb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dfb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dfbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfc0:	b29a      	uxth	r2, r3
 800dfc2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800dfc6:	801a      	strh	r2, [r3, #0]
 800dfc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dfd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	785b      	ldrb	r3, [r3, #1]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	f040 8085 	bne.w	800e0f2 <USB_EPStartXfer+0x1688>
 800dfe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800dff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dffa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e004:	b29b      	uxth	r3, r3
 800e006:	461a      	mov	r2, r3
 800e008:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e00c:	4413      	add	r3, r2
 800e00e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	00da      	lsls	r2, r3, #3
 800e020:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e024:	4413      	add	r3, r2
 800e026:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e02a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e02e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e032:	881b      	ldrh	r3, [r3, #0]
 800e034:	b29b      	uxth	r3, r3
 800e036:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e03a:	b29a      	uxth	r2, r3
 800e03c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e040:	801a      	strh	r2, [r3, #0]
 800e042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e046:	2b3e      	cmp	r3, #62	@ 0x3e
 800e048:	d923      	bls.n	800e092 <USB_EPStartXfer+0x1628>
 800e04a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e04e:	095b      	lsrs	r3, r3, #5
 800e050:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e058:	f003 031f 	and.w	r3, r3, #31
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d104      	bne.n	800e06a <USB_EPStartXfer+0x1600>
 800e060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e064:	3b01      	subs	r3, #1
 800e066:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e06a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e06e:	881b      	ldrh	r3, [r3, #0]
 800e070:	b29a      	uxth	r2, r3
 800e072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e076:	b29b      	uxth	r3, r3
 800e078:	029b      	lsls	r3, r3, #10
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	4313      	orrs	r3, r2
 800e07e:	b29b      	uxth	r3, r3
 800e080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e088:	b29a      	uxth	r2, r3
 800e08a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e08e:	801a      	strh	r2, [r3, #0]
 800e090:	e05c      	b.n	800e14c <USB_EPStartXfer+0x16e2>
 800e092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e096:	2b00      	cmp	r3, #0
 800e098:	d10c      	bne.n	800e0b4 <USB_EPStartXfer+0x164a>
 800e09a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e09e:	881b      	ldrh	r3, [r3, #0]
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0aa:	b29a      	uxth	r2, r3
 800e0ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e0b0:	801a      	strh	r2, [r3, #0]
 800e0b2:	e04b      	b.n	800e14c <USB_EPStartXfer+0x16e2>
 800e0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0b8:	085b      	lsrs	r3, r3, #1
 800e0ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0c2:	f003 0301 	and.w	r3, r3, #1
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d004      	beq.n	800e0d4 <USB_EPStartXfer+0x166a>
 800e0ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e0d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e0d8:	881b      	ldrh	r3, [r3, #0]
 800e0da:	b29a      	uxth	r2, r3
 800e0dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	029b      	lsls	r3, r3, #10
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	4313      	orrs	r3, r2
 800e0e8:	b29a      	uxth	r2, r3
 800e0ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e0ee:	801a      	strh	r2, [r3, #0]
 800e0f0:	e02c      	b.n	800e14c <USB_EPStartXfer+0x16e2>
 800e0f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	785b      	ldrb	r3, [r3, #1]
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d124      	bne.n	800e14c <USB_EPStartXfer+0x16e2>
 800e102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e110:	b29b      	uxth	r3, r3
 800e112:	461a      	mov	r2, r3
 800e114:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e118:	4413      	add	r3, r2
 800e11a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e11e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	00da      	lsls	r2, r3, #3
 800e12c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e130:	4413      	add	r3, r2
 800e132:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e136:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e13e:	b29a      	uxth	r2, r3
 800e140:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e144:	801a      	strh	r2, [r3, #0]
 800e146:	e001      	b.n	800e14c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800e148:	2301      	movs	r3, #1
 800e14a:	e03a      	b.n	800e1c2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e14c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e150:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e15a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	4413      	add	r3, r2
 800e166:	881b      	ldrh	r3, [r3, #0]
 800e168:	b29b      	uxth	r3, r3
 800e16a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e16e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e172:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e176:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e17a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e17e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e182:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e186:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e18a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e18e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e192:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e19c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	441a      	add	r2, r3
 800e1a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e1ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e1c0:	2300      	movs	r3, #0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b085      	sub	sp, #20
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	785b      	ldrb	r3, [r3, #1]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d020      	beq.n	800e220 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	009b      	lsls	r3, r3, #2
 800e1e6:	4413      	add	r3, r2
 800e1e8:	881b      	ldrh	r3, [r3, #0]
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e1f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e1f4:	81bb      	strh	r3, [r7, #12]
 800e1f6:	89bb      	ldrh	r3, [r7, #12]
 800e1f8:	f083 0310 	eor.w	r3, r3, #16
 800e1fc:	81bb      	strh	r3, [r7, #12]
 800e1fe:	687a      	ldr	r2, [r7, #4]
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	781b      	ldrb	r3, [r3, #0]
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	441a      	add	r2, r3
 800e208:	89bb      	ldrh	r3, [r7, #12]
 800e20a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e20e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	8013      	strh	r3, [r2, #0]
 800e21e:	e01f      	b.n	800e260 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	4413      	add	r3, r2
 800e22a:	881b      	ldrh	r3, [r3, #0]
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e236:	81fb      	strh	r3, [r7, #14]
 800e238:	89fb      	ldrh	r3, [r7, #14]
 800e23a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e23e:	81fb      	strh	r3, [r7, #14]
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	441a      	add	r2, r3
 800e24a:	89fb      	ldrh	r3, [r7, #14]
 800e24c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e250:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e254:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e260:	2300      	movs	r3, #0
}
 800e262:	4618      	mov	r0, r3
 800e264:	3714      	adds	r7, #20
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr

0800e26e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e26e:	b480      	push	{r7}
 800e270:	b087      	sub	sp, #28
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
 800e276:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	7b1b      	ldrb	r3, [r3, #12]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	f040 809d 	bne.w	800e3bc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	785b      	ldrb	r3, [r3, #1]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d04c      	beq.n	800e324 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	4413      	add	r3, r2
 800e294:	881b      	ldrh	r3, [r3, #0]
 800e296:	823b      	strh	r3, [r7, #16]
 800e298:	8a3b      	ldrh	r3, [r7, #16]
 800e29a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d01b      	beq.n	800e2da <USB_EPClearStall+0x6c>
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	009b      	lsls	r3, r3, #2
 800e2aa:	4413      	add	r3, r2
 800e2ac:	881b      	ldrh	r3, [r3, #0]
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e2b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2b8:	81fb      	strh	r3, [r7, #14]
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	441a      	add	r2, r3
 800e2c4:	89fb      	ldrh	r3, [r7, #14]
 800e2c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e2ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e2ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	78db      	ldrb	r3, [r3, #3]
 800e2de:	2b01      	cmp	r3, #1
 800e2e0:	d06c      	beq.n	800e3bc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e2e2:	687a      	ldr	r2, [r7, #4]
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	4413      	add	r3, r2
 800e2ec:	881b      	ldrh	r3, [r3, #0]
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e2f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e2f8:	81bb      	strh	r3, [r7, #12]
 800e2fa:	89bb      	ldrh	r3, [r7, #12]
 800e2fc:	f083 0320 	eor.w	r3, r3, #32
 800e300:	81bb      	strh	r3, [r7, #12]
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	441a      	add	r2, r3
 800e30c:	89bb      	ldrh	r3, [r7, #12]
 800e30e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e312:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e316:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e31a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e31e:	b29b      	uxth	r3, r3
 800e320:	8013      	strh	r3, [r2, #0]
 800e322:	e04b      	b.n	800e3bc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	009b      	lsls	r3, r3, #2
 800e32c:	4413      	add	r3, r2
 800e32e:	881b      	ldrh	r3, [r3, #0]
 800e330:	82fb      	strh	r3, [r7, #22]
 800e332:	8afb      	ldrh	r3, [r7, #22]
 800e334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d01b      	beq.n	800e374 <USB_EPClearStall+0x106>
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	4413      	add	r3, r2
 800e346:	881b      	ldrh	r3, [r3, #0]
 800e348:	b29b      	uxth	r3, r3
 800e34a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e34e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e352:	82bb      	strh	r3, [r7, #20]
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	441a      	add	r2, r3
 800e35e:	8abb      	ldrh	r3, [r7, #20]
 800e360:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e364:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e368:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e36c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e370:	b29b      	uxth	r3, r3
 800e372:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	4413      	add	r3, r2
 800e37e:	881b      	ldrh	r3, [r3, #0]
 800e380:	b29b      	uxth	r3, r3
 800e382:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e38a:	827b      	strh	r3, [r7, #18]
 800e38c:	8a7b      	ldrh	r3, [r7, #18]
 800e38e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e392:	827b      	strh	r3, [r7, #18]
 800e394:	8a7b      	ldrh	r3, [r7, #18]
 800e396:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e39a:	827b      	strh	r3, [r7, #18]
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	441a      	add	r2, r3
 800e3a6:	8a7b      	ldrh	r3, [r7, #18]
 800e3a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e3bc:	2300      	movs	r3, #0
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	371c      	adds	r7, #28
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c8:	4770      	bx	lr

0800e3ca <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e3ca:	b480      	push	{r7}
 800e3cc:	b083      	sub	sp, #12
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e3d6:	78fb      	ldrb	r3, [r7, #3]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d103      	bne.n	800e3e4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2280      	movs	r2, #128	@ 0x80
 800e3e0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	370c      	adds	r7, #12
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr

0800e3f2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e3f2:	b480      	push	{r7}
 800e3f4:	b083      	sub	sp, #12
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e400:	b29b      	uxth	r3, r3
 800e402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e40a:	b29a      	uxth	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e412:	2300      	movs	r3, #0
}
 800e414:	4618      	mov	r0, r3
 800e416:	370c      	adds	r7, #12
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr

0800e420 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e420:	b480      	push	{r7}
 800e422:	b085      	sub	sp, #20
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e42e:	b29b      	uxth	r3, r3
 800e430:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e432:	68fb      	ldr	r3, [r7, #12]
}
 800e434:	4618      	mov	r0, r3
 800e436:	3714      	adds	r7, #20
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr

0800e440 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e440:	b480      	push	{r7}
 800e442:	b08b      	sub	sp, #44	@ 0x2c
 800e444:	af00      	add	r7, sp, #0
 800e446:	60f8      	str	r0, [r7, #12]
 800e448:	60b9      	str	r1, [r7, #8]
 800e44a:	4611      	mov	r1, r2
 800e44c:	461a      	mov	r2, r3
 800e44e:	460b      	mov	r3, r1
 800e450:	80fb      	strh	r3, [r7, #6]
 800e452:	4613      	mov	r3, r2
 800e454:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e456:	88bb      	ldrh	r3, [r7, #4]
 800e458:	3301      	adds	r3, #1
 800e45a:	085b      	lsrs	r3, r3, #1
 800e45c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e466:	88fa      	ldrh	r2, [r7, #6]
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	4413      	add	r3, r2
 800e46c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e470:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e472:	69bb      	ldr	r3, [r7, #24]
 800e474:	627b      	str	r3, [r7, #36]	@ 0x24
 800e476:	e01b      	b.n	800e4b0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e47e:	69fb      	ldr	r3, [r7, #28]
 800e480:	3301      	adds	r3, #1
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	021b      	lsls	r3, r3, #8
 800e486:	b21a      	sxth	r2, r3
 800e488:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e48c:	4313      	orrs	r3, r2
 800e48e:	b21b      	sxth	r3, r3
 800e490:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e492:	6a3b      	ldr	r3, [r7, #32]
 800e494:	8a7a      	ldrh	r2, [r7, #18]
 800e496:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e498:	6a3b      	ldr	r3, [r7, #32]
 800e49a:	3302      	adds	r3, #2
 800e49c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ac:	3b01      	subs	r3, #1
 800e4ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d1e0      	bne.n	800e478 <USB_WritePMA+0x38>
  }
}
 800e4b6:	bf00      	nop
 800e4b8:	bf00      	nop
 800e4ba:	372c      	adds	r7, #44	@ 0x2c
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b08b      	sub	sp, #44	@ 0x2c
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	60f8      	str	r0, [r7, #12]
 800e4cc:	60b9      	str	r1, [r7, #8]
 800e4ce:	4611      	mov	r1, r2
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	80fb      	strh	r3, [r7, #6]
 800e4d6:	4613      	mov	r3, r2
 800e4d8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e4da:	88bb      	ldrh	r3, [r7, #4]
 800e4dc:	085b      	lsrs	r3, r3, #1
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e4ea:	88fa      	ldrh	r2, [r7, #6]
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e4f4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e4f6:	69bb      	ldr	r3, [r7, #24]
 800e4f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4fa:	e018      	b.n	800e52e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e4fc:	6a3b      	ldr	r3, [r7, #32]
 800e4fe:	881b      	ldrh	r3, [r3, #0]
 800e500:	b29b      	uxth	r3, r3
 800e502:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e504:	6a3b      	ldr	r3, [r7, #32]
 800e506:	3302      	adds	r3, #2
 800e508:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	b2da      	uxtb	r2, r3
 800e50e:	69fb      	ldr	r3, [r7, #28]
 800e510:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	3301      	adds	r3, #1
 800e516:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	0a1b      	lsrs	r3, r3, #8
 800e51c:	b2da      	uxtb	r2, r3
 800e51e:	69fb      	ldr	r3, [r7, #28]
 800e520:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	3301      	adds	r3, #1
 800e526:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52a:	3b01      	subs	r3, #1
 800e52c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e530:	2b00      	cmp	r3, #0
 800e532:	d1e3      	bne.n	800e4fc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e534:	88bb      	ldrh	r3, [r7, #4]
 800e536:	f003 0301 	and.w	r3, r3, #1
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d007      	beq.n	800e550 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e540:	6a3b      	ldr	r3, [r7, #32]
 800e542:	881b      	ldrh	r3, [r3, #0]
 800e544:	b29b      	uxth	r3, r3
 800e546:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	b2da      	uxtb	r2, r3
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	701a      	strb	r2, [r3, #0]
  }
}
 800e550:	bf00      	nop
 800e552:	372c      	adds	r7, #44	@ 0x2c
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr

0800e55c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b084      	sub	sp, #16
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	460b      	mov	r3, r1
 800e566:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e568:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e56c:	f002 f8a4 	bl	80106b8 <USBD_static_malloc>
 800e570:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d105      	bne.n	800e584 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2200      	movs	r2, #0
 800e57c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800e580:	2302      	movs	r3, #2
 800e582:	e066      	b.n	800e652 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	68fa      	ldr	r2, [r7, #12]
 800e588:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	7c1b      	ldrb	r3, [r3, #16]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d119      	bne.n	800e5c8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e594:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e598:	2202      	movs	r2, #2
 800e59a:	2181      	movs	r1, #129	@ 0x81
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f001 ff32 	bl	8010406 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e5a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e5ac:	2202      	movs	r2, #2
 800e5ae:	2101      	movs	r1, #1
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f001 ff28 	bl	8010406 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2210      	movs	r2, #16
 800e5c2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800e5c6:	e016      	b.n	800e5f6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e5c8:	2340      	movs	r3, #64	@ 0x40
 800e5ca:	2202      	movs	r2, #2
 800e5cc:	2181      	movs	r1, #129	@ 0x81
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f001 ff19 	bl	8010406 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e5da:	2340      	movs	r3, #64	@ 0x40
 800e5dc:	2202      	movs	r2, #2
 800e5de:	2101      	movs	r1, #1
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f001 ff10 	bl	8010406 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2210      	movs	r2, #16
 800e5f2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e5f6:	2308      	movs	r3, #8
 800e5f8:	2203      	movs	r2, #3
 800e5fa:	2182      	movs	r1, #130	@ 0x82
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f001 ff02 	bl	8010406 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2201      	movs	r2, #1
 800e606:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2200      	movs	r2, #0
 800e618:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2200      	movs	r2, #0
 800e620:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	7c1b      	ldrb	r3, [r3, #16]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d109      	bne.n	800e640 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e636:	2101      	movs	r1, #1
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f001 ffd3 	bl	80105e4 <USBD_LL_PrepareReceive>
 800e63e:	e007      	b.n	800e650 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e646:	2340      	movs	r3, #64	@ 0x40
 800e648:	2101      	movs	r1, #1
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f001 ffca 	bl	80105e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e650:	2300      	movs	r3, #0
}
 800e652:	4618      	mov	r0, r3
 800e654:	3710      	adds	r7, #16
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}

0800e65a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e65a:	b580      	push	{r7, lr}
 800e65c:	b082      	sub	sp, #8
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
 800e662:	460b      	mov	r3, r1
 800e664:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e666:	2181      	movs	r1, #129	@ 0x81
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f001 fef2 	bl	8010452 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2200      	movs	r2, #0
 800e672:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e674:	2101      	movs	r1, #1
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f001 feeb 	bl	8010452 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2200      	movs	r2, #0
 800e680:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e684:	2182      	movs	r1, #130	@ 0x82
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f001 fee3 	bl	8010452 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2200      	movs	r2, #0
 800e690:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2200      	movs	r2, #0
 800e698:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d00e      	beq.n	800e6c4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f002 f80c 	bl	80106d4 <USBD_static_free>
    pdev->pClassData = NULL;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e6c4:	2300      	movs	r3, #0
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3708      	adds	r7, #8
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
	...

0800e6d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b086      	sub	sp, #24
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e6e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d101      	bne.n	800e6f8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e6f4:	2303      	movs	r3, #3
 800e6f6:	e0af      	b.n	800e858 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e700:	2b00      	cmp	r3, #0
 800e702:	d03f      	beq.n	800e784 <USBD_CDC_Setup+0xb4>
 800e704:	2b20      	cmp	r3, #32
 800e706:	f040 809f 	bne.w	800e848 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	88db      	ldrh	r3, [r3, #6]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d02e      	beq.n	800e770 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	b25b      	sxtb	r3, r3
 800e718:	2b00      	cmp	r3, #0
 800e71a:	da16      	bge.n	800e74a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e722:	689b      	ldr	r3, [r3, #8]
 800e724:	683a      	ldr	r2, [r7, #0]
 800e726:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e728:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e72a:	683a      	ldr	r2, [r7, #0]
 800e72c:	88d2      	ldrh	r2, [r2, #6]
 800e72e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	88db      	ldrh	r3, [r3, #6]
 800e734:	2b07      	cmp	r3, #7
 800e736:	bf28      	it	cs
 800e738:	2307      	movcs	r3, #7
 800e73a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	89fa      	ldrh	r2, [r7, #14]
 800e740:	4619      	mov	r1, r3
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f001 fa9d 	bl	800fc82 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e748:	e085      	b.n	800e856 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	785a      	ldrb	r2, [r3, #1]
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	88db      	ldrh	r3, [r3, #6]
 800e758:	b2da      	uxtb	r2, r3
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e760:	6939      	ldr	r1, [r7, #16]
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	88db      	ldrh	r3, [r3, #6]
 800e766:	461a      	mov	r2, r3
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f001 fab6 	bl	800fcda <USBD_CtlPrepareRx>
      break;
 800e76e:	e072      	b.n	800e856 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e776:	689b      	ldr	r3, [r3, #8]
 800e778:	683a      	ldr	r2, [r7, #0]
 800e77a:	7850      	ldrb	r0, [r2, #1]
 800e77c:	2200      	movs	r2, #0
 800e77e:	6839      	ldr	r1, [r7, #0]
 800e780:	4798      	blx	r3
      break;
 800e782:	e068      	b.n	800e856 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	785b      	ldrb	r3, [r3, #1]
 800e788:	2b0b      	cmp	r3, #11
 800e78a:	d852      	bhi.n	800e832 <USBD_CDC_Setup+0x162>
 800e78c:	a201      	add	r2, pc, #4	@ (adr r2, 800e794 <USBD_CDC_Setup+0xc4>)
 800e78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e792:	bf00      	nop
 800e794:	0800e7c5 	.word	0x0800e7c5
 800e798:	0800e841 	.word	0x0800e841
 800e79c:	0800e833 	.word	0x0800e833
 800e7a0:	0800e833 	.word	0x0800e833
 800e7a4:	0800e833 	.word	0x0800e833
 800e7a8:	0800e833 	.word	0x0800e833
 800e7ac:	0800e833 	.word	0x0800e833
 800e7b0:	0800e833 	.word	0x0800e833
 800e7b4:	0800e833 	.word	0x0800e833
 800e7b8:	0800e833 	.word	0x0800e833
 800e7bc:	0800e7ef 	.word	0x0800e7ef
 800e7c0:	0800e819 	.word	0x0800e819
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	2b03      	cmp	r3, #3
 800e7ce:	d107      	bne.n	800e7e0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e7d0:	f107 030a 	add.w	r3, r7, #10
 800e7d4:	2202      	movs	r2, #2
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f001 fa52 	bl	800fc82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e7de:	e032      	b.n	800e846 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e7e0:	6839      	ldr	r1, [r7, #0]
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f001 f9dc 	bl	800fba0 <USBD_CtlError>
            ret = USBD_FAIL;
 800e7e8:	2303      	movs	r3, #3
 800e7ea:	75fb      	strb	r3, [r7, #23]
          break;
 800e7ec:	e02b      	b.n	800e846 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	2b03      	cmp	r3, #3
 800e7f8:	d107      	bne.n	800e80a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e7fa:	f107 030d 	add.w	r3, r7, #13
 800e7fe:	2201      	movs	r2, #1
 800e800:	4619      	mov	r1, r3
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f001 fa3d 	bl	800fc82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e808:	e01d      	b.n	800e846 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e80a:	6839      	ldr	r1, [r7, #0]
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f001 f9c7 	bl	800fba0 <USBD_CtlError>
            ret = USBD_FAIL;
 800e812:	2303      	movs	r3, #3
 800e814:	75fb      	strb	r3, [r7, #23]
          break;
 800e816:	e016      	b.n	800e846 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	2b03      	cmp	r3, #3
 800e822:	d00f      	beq.n	800e844 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e824:	6839      	ldr	r1, [r7, #0]
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f001 f9ba 	bl	800fba0 <USBD_CtlError>
            ret = USBD_FAIL;
 800e82c:	2303      	movs	r3, #3
 800e82e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e830:	e008      	b.n	800e844 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e832:	6839      	ldr	r1, [r7, #0]
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f001 f9b3 	bl	800fba0 <USBD_CtlError>
          ret = USBD_FAIL;
 800e83a:	2303      	movs	r3, #3
 800e83c:	75fb      	strb	r3, [r7, #23]
          break;
 800e83e:	e002      	b.n	800e846 <USBD_CDC_Setup+0x176>
          break;
 800e840:	bf00      	nop
 800e842:	e008      	b.n	800e856 <USBD_CDC_Setup+0x186>
          break;
 800e844:	bf00      	nop
      }
      break;
 800e846:	e006      	b.n	800e856 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e848:	6839      	ldr	r1, [r7, #0]
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f001 f9a8 	bl	800fba0 <USBD_CtlError>
      ret = USBD_FAIL;
 800e850:	2303      	movs	r3, #3
 800e852:	75fb      	strb	r3, [r7, #23]
      break;
 800e854:	bf00      	nop
  }

  return (uint8_t)ret;
 800e856:	7dfb      	ldrb	r3, [r7, #23]
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3718      	adds	r7, #24
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b084      	sub	sp, #16
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	460b      	mov	r3, r1
 800e86a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e872:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d101      	bne.n	800e882 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e87e:	2303      	movs	r3, #3
 800e880:	e04f      	b.n	800e922 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e888:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e88a:	78fa      	ldrb	r2, [r7, #3]
 800e88c:	6879      	ldr	r1, [r7, #4]
 800e88e:	4613      	mov	r3, r2
 800e890:	009b      	lsls	r3, r3, #2
 800e892:	4413      	add	r3, r2
 800e894:	009b      	lsls	r3, r3, #2
 800e896:	440b      	add	r3, r1
 800e898:	3318      	adds	r3, #24
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d029      	beq.n	800e8f4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e8a0:	78fa      	ldrb	r2, [r7, #3]
 800e8a2:	6879      	ldr	r1, [r7, #4]
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	009b      	lsls	r3, r3, #2
 800e8a8:	4413      	add	r3, r2
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	440b      	add	r3, r1
 800e8ae:	3318      	adds	r3, #24
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	78f9      	ldrb	r1, [r7, #3]
 800e8b4:	68f8      	ldr	r0, [r7, #12]
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	440b      	add	r3, r1
 800e8bc:	00db      	lsls	r3, r3, #3
 800e8be:	4403      	add	r3, r0
 800e8c0:	3320      	adds	r3, #32
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	fbb2 f1f3 	udiv	r1, r2, r3
 800e8c8:	fb01 f303 	mul.w	r3, r1, r3
 800e8cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d110      	bne.n	800e8f4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e8d2:	78fa      	ldrb	r2, [r7, #3]
 800e8d4:	6879      	ldr	r1, [r7, #4]
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	4413      	add	r3, r2
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	440b      	add	r3, r1
 800e8e0:	3318      	adds	r3, #24
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e8e6:	78f9      	ldrb	r1, [r7, #3]
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f001 fe58 	bl	80105a2 <USBD_LL_Transmit>
 800e8f2:	e015      	b.n	800e920 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e902:	691b      	ldr	r3, [r3, #16]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d00b      	beq.n	800e920 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e90e:	691b      	ldr	r3, [r3, #16]
 800e910:	68ba      	ldr	r2, [r7, #8]
 800e912:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e916:	68ba      	ldr	r2, [r7, #8]
 800e918:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e91c:	78fa      	ldrb	r2, [r7, #3]
 800e91e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e920:	2300      	movs	r3, #0
}
 800e922:	4618      	mov	r0, r3
 800e924:	3710      	adds	r7, #16
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b084      	sub	sp, #16
 800e92e:	af00      	add	r7, sp, #0
 800e930:	6078      	str	r0, [r7, #4]
 800e932:	460b      	mov	r3, r1
 800e934:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e93c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e944:	2b00      	cmp	r3, #0
 800e946:	d101      	bne.n	800e94c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e948:	2303      	movs	r3, #3
 800e94a:	e015      	b.n	800e978 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e94c:	78fb      	ldrb	r3, [r7, #3]
 800e94e:	4619      	mov	r1, r3
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f001 fe68 	bl	8010626 <USBD_LL_GetRxDataSize>
 800e956:	4602      	mov	r2, r0
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	68fa      	ldr	r2, [r7, #12]
 800e968:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e972:	4611      	mov	r1, r2
 800e974:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e976:	2300      	movs	r3, #0
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3710      	adds	r7, #16
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}

0800e980 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b084      	sub	sp, #16
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e98e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d101      	bne.n	800e99a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e996:	2303      	movs	r3, #3
 800e998:	e01a      	b.n	800e9d0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d014      	beq.n	800e9ce <USBD_CDC_EP0_RxReady+0x4e>
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e9aa:	2bff      	cmp	r3, #255	@ 0xff
 800e9ac:	d00f      	beq.n	800e9ce <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e9b4:	689b      	ldr	r3, [r3, #8]
 800e9b6:	68fa      	ldr	r2, [r7, #12]
 800e9b8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800e9bc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e9be:	68fa      	ldr	r2, [r7, #12]
 800e9c0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e9c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	22ff      	movs	r2, #255	@ 0xff
 800e9ca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e9ce:	2300      	movs	r3, #0
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3710      	adds	r7, #16
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b083      	sub	sp, #12
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2243      	movs	r2, #67	@ 0x43
 800e9e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e9e6:	4b03      	ldr	r3, [pc, #12]	@ (800e9f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr
 800e9f4:	20000094 	.word	0x20000094

0800e9f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2243      	movs	r2, #67	@ 0x43
 800ea04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ea06:	4b03      	ldr	r3, [pc, #12]	@ (800ea14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	370c      	adds	r7, #12
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr
 800ea14:	20000050 	.word	0x20000050

0800ea18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b083      	sub	sp, #12
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2243      	movs	r2, #67	@ 0x43
 800ea24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ea26:	4b03      	ldr	r3, [pc, #12]	@ (800ea34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	370c      	adds	r7, #12
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr
 800ea34:	200000d8 	.word	0x200000d8

0800ea38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b083      	sub	sp, #12
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	220a      	movs	r2, #10
 800ea44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ea46:	4b03      	ldr	r3, [pc, #12]	@ (800ea54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	370c      	adds	r7, #12
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr
 800ea54:	2000000c 	.word	0x2000000c

0800ea58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d101      	bne.n	800ea6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ea68:	2303      	movs	r3, #3
 800ea6a:	e004      	b.n	800ea76 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	683a      	ldr	r2, [r7, #0]
 800ea70:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	370c      	adds	r7, #12
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr

0800ea82 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ea82:	b480      	push	{r7}
 800ea84:	b087      	sub	sp, #28
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	60f8      	str	r0, [r7, #12]
 800ea8a:	60b9      	str	r1, [r7, #8]
 800ea8c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ea94:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d101      	bne.n	800eaa0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ea9c:	2303      	movs	r3, #3
 800ea9e:	e008      	b.n	800eab2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	68ba      	ldr	r2, [r7, #8]
 800eaa4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800eab0:	2300      	movs	r3, #0
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	371c      	adds	r7, #28
 800eab6:	46bd      	mov	sp, r7
 800eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabc:	4770      	bx	lr

0800eabe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800eabe:	b480      	push	{r7}
 800eac0:	b085      	sub	sp, #20
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
 800eac6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eace:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d101      	bne.n	800eada <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ead6:	2303      	movs	r3, #3
 800ead8:	e004      	b.n	800eae4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	683a      	ldr	r2, [r7, #0]
 800eade:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800eae2:	2300      	movs	r3, #0
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3714      	adds	r7, #20
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eafe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d101      	bne.n	800eb0e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800eb0a:	2303      	movs	r3, #3
 800eb0c:	e016      	b.n	800eb3c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	7c1b      	ldrb	r3, [r3, #16]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d109      	bne.n	800eb2a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eb1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eb20:	2101      	movs	r1, #1
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f001 fd5e 	bl	80105e4 <USBD_LL_PrepareReceive>
 800eb28:	e007      	b.n	800eb3a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eb30:	2340      	movs	r3, #64	@ 0x40
 800eb32:	2101      	movs	r1, #1
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f001 fd55 	bl	80105e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eb3a:	2300      	movs	r3, #0
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3710      	adds	r7, #16
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b086      	sub	sp, #24
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	60f8      	str	r0, [r7, #12]
 800eb4c:	60b9      	str	r1, [r7, #8]
 800eb4e:	4613      	mov	r3, r2
 800eb50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d101      	bne.n	800eb5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800eb58:	2303      	movs	r3, #3
 800eb5a:	e01f      	b.n	800eb9c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d003      	beq.n	800eb82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	68ba      	ldr	r2, [r7, #8]
 800eb7e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2201      	movs	r2, #1
 800eb86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	79fa      	ldrb	r2, [r7, #7]
 800eb8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f001 fbbd 	bl	8010310 <USBD_LL_Init>
 800eb96:	4603      	mov	r3, r0
 800eb98:	75fb      	strb	r3, [r7, #23]

  return ret;
 800eb9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3718      	adds	r7, #24
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b084      	sub	sp, #16
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d101      	bne.n	800ebbc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ebb8:	2303      	movs	r3, #3
 800ebba:	e016      	b.n	800ebea <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	683a      	ldr	r2, [r7, #0]
 800ebc0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d00b      	beq.n	800ebe8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebd8:	f107 020e 	add.w	r2, r7, #14
 800ebdc:	4610      	mov	r0, r2
 800ebde:	4798      	blx	r3
 800ebe0:	4602      	mov	r2, r0
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ebe8:	2300      	movs	r3, #0
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3710      	adds	r7, #16
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}

0800ebf2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ebf2:	b580      	push	{r7, lr}
 800ebf4:	b082      	sub	sp, #8
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f001 fbe8 	bl	80103d0 <USBD_LL_Start>
 800ec00:	4603      	mov	r3, r0
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3708      	adds	r7, #8
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}

0800ec0a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ec0a:	b480      	push	{r7}
 800ec0c:	b083      	sub	sp, #12
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ec12:	2300      	movs	r3, #0
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b084      	sub	sp, #16
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	460b      	mov	r3, r1
 800ec2a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ec2c:	2303      	movs	r3, #3
 800ec2e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d009      	beq.n	800ec4e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	78fa      	ldrb	r2, [r7, #3]
 800ec44:	4611      	mov	r1, r2
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	4798      	blx	r3
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ec4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3710      	adds	r7, #16
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}

0800ec58 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b082      	sub	sp, #8
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	460b      	mov	r3, r1
 800ec62:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d007      	beq.n	800ec7e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	78fa      	ldrb	r2, [r7, #3]
 800ec78:	4611      	mov	r1, r2
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	4798      	blx	r3
  }

  return USBD_OK;
 800ec7e:	2300      	movs	r3, #0
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3708      	adds	r7, #8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ec98:	6839      	ldr	r1, [r7, #0]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f000 ff46 	bl	800fb2c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2201      	movs	r2, #1
 800eca4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ecae:	461a      	mov	r2, r3
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ecbc:	f003 031f 	and.w	r3, r3, #31
 800ecc0:	2b02      	cmp	r3, #2
 800ecc2:	d01a      	beq.n	800ecfa <USBD_LL_SetupStage+0x72>
 800ecc4:	2b02      	cmp	r3, #2
 800ecc6:	d822      	bhi.n	800ed0e <USBD_LL_SetupStage+0x86>
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d002      	beq.n	800ecd2 <USBD_LL_SetupStage+0x4a>
 800eccc:	2b01      	cmp	r3, #1
 800ecce:	d00a      	beq.n	800ece6 <USBD_LL_SetupStage+0x5e>
 800ecd0:	e01d      	b.n	800ed0e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ecd8:	4619      	mov	r1, r3
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f000 f9ee 	bl	800f0bc <USBD_StdDevReq>
 800ece0:	4603      	mov	r3, r0
 800ece2:	73fb      	strb	r3, [r7, #15]
      break;
 800ece4:	e020      	b.n	800ed28 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ecec:	4619      	mov	r1, r3
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 fa52 	bl	800f198 <USBD_StdItfReq>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	73fb      	strb	r3, [r7, #15]
      break;
 800ecf8:	e016      	b.n	800ed28 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ed00:	4619      	mov	r1, r3
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 fa91 	bl	800f22a <USBD_StdEPReq>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ed0c:	e00c      	b.n	800ed28 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ed14:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ed18:	b2db      	uxtb	r3, r3
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f001 fbb7 	bl	8010490 <USBD_LL_StallEP>
 800ed22:	4603      	mov	r3, r0
 800ed24:	73fb      	strb	r3, [r7, #15]
      break;
 800ed26:	bf00      	nop
  }

  return ret;
 800ed28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3710      	adds	r7, #16
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}

0800ed32 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ed32:	b580      	push	{r7, lr}
 800ed34:	b086      	sub	sp, #24
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	60f8      	str	r0, [r7, #12]
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	607a      	str	r2, [r7, #4]
 800ed3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ed40:	7afb      	ldrb	r3, [r7, #11]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d138      	bne.n	800edb8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ed4c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ed54:	2b03      	cmp	r3, #3
 800ed56:	d14a      	bne.n	800edee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	689a      	ldr	r2, [r3, #8]
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d913      	bls.n	800ed8c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	689a      	ldr	r2, [r3, #8]
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	68db      	ldr	r3, [r3, #12]
 800ed6c:	1ad2      	subs	r2, r2, r3
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	68da      	ldr	r2, [r3, #12]
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	bf28      	it	cs
 800ed7e:	4613      	movcs	r3, r2
 800ed80:	461a      	mov	r2, r3
 800ed82:	6879      	ldr	r1, [r7, #4]
 800ed84:	68f8      	ldr	r0, [r7, #12]
 800ed86:	f000 ffc5 	bl	800fd14 <USBD_CtlContinueRx>
 800ed8a:	e030      	b.n	800edee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	2b03      	cmp	r3, #3
 800ed96:	d10b      	bne.n	800edb0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed9e:	691b      	ldr	r3, [r3, #16]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d005      	beq.n	800edb0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edaa:	691b      	ldr	r3, [r3, #16]
 800edac:	68f8      	ldr	r0, [r7, #12]
 800edae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800edb0:	68f8      	ldr	r0, [r7, #12]
 800edb2:	f000 ffc0 	bl	800fd36 <USBD_CtlSendStatus>
 800edb6:	e01a      	b.n	800edee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	2b03      	cmp	r3, #3
 800edc2:	d114      	bne.n	800edee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edca:	699b      	ldr	r3, [r3, #24]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d00e      	beq.n	800edee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edd6:	699b      	ldr	r3, [r3, #24]
 800edd8:	7afa      	ldrb	r2, [r7, #11]
 800edda:	4611      	mov	r1, r2
 800eddc:	68f8      	ldr	r0, [r7, #12]
 800edde:	4798      	blx	r3
 800ede0:	4603      	mov	r3, r0
 800ede2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ede4:	7dfb      	ldrb	r3, [r7, #23]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d001      	beq.n	800edee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800edea:	7dfb      	ldrb	r3, [r7, #23]
 800edec:	e000      	b.n	800edf0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800edee:	2300      	movs	r3, #0
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3718      	adds	r7, #24
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	460b      	mov	r3, r1
 800ee02:	607a      	str	r2, [r7, #4]
 800ee04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ee06:	7afb      	ldrb	r3, [r7, #11]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d16b      	bne.n	800eee4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	3314      	adds	r3, #20
 800ee10:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ee18:	2b02      	cmp	r3, #2
 800ee1a:	d156      	bne.n	800eeca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	689a      	ldr	r2, [r3, #8]
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d914      	bls.n	800ee52 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	689a      	ldr	r2, [r3, #8]
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	68db      	ldr	r3, [r3, #12]
 800ee30:	1ad2      	subs	r2, r2, r3
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	689b      	ldr	r3, [r3, #8]
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	6879      	ldr	r1, [r7, #4]
 800ee3e:	68f8      	ldr	r0, [r7, #12]
 800ee40:	f000 ff3a 	bl	800fcb8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee44:	2300      	movs	r3, #0
 800ee46:	2200      	movs	r2, #0
 800ee48:	2100      	movs	r1, #0
 800ee4a:	68f8      	ldr	r0, [r7, #12]
 800ee4c:	f001 fbca 	bl	80105e4 <USBD_LL_PrepareReceive>
 800ee50:	e03b      	b.n	800eeca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	68da      	ldr	r2, [r3, #12]
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	689b      	ldr	r3, [r3, #8]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d11c      	bne.n	800ee98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	685a      	ldr	r2, [r3, #4]
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d316      	bcc.n	800ee98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	685a      	ldr	r2, [r3, #4]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d20f      	bcs.n	800ee98 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ee78:	2200      	movs	r2, #0
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	68f8      	ldr	r0, [r7, #12]
 800ee7e:	f000 ff1b 	bl	800fcb8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2200      	movs	r2, #0
 800ee86:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	2100      	movs	r1, #0
 800ee90:	68f8      	ldr	r0, [r7, #12]
 800ee92:	f001 fba7 	bl	80105e4 <USBD_LL_PrepareReceive>
 800ee96:	e018      	b.n	800eeca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee9e:	b2db      	uxtb	r3, r3
 800eea0:	2b03      	cmp	r3, #3
 800eea2:	d10b      	bne.n	800eebc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d005      	beq.n	800eebc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eeb6:	68db      	ldr	r3, [r3, #12]
 800eeb8:	68f8      	ldr	r0, [r7, #12]
 800eeba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eebc:	2180      	movs	r1, #128	@ 0x80
 800eebe:	68f8      	ldr	r0, [r7, #12]
 800eec0:	f001 fae6 	bl	8010490 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800eec4:	68f8      	ldr	r0, [r7, #12]
 800eec6:	f000 ff49 	bl	800fd5c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800eed0:	2b01      	cmp	r3, #1
 800eed2:	d122      	bne.n	800ef1a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800eed4:	68f8      	ldr	r0, [r7, #12]
 800eed6:	f7ff fe98 	bl	800ec0a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2200      	movs	r2, #0
 800eede:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800eee2:	e01a      	b.n	800ef1a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eeea:	b2db      	uxtb	r3, r3
 800eeec:	2b03      	cmp	r3, #3
 800eeee:	d114      	bne.n	800ef1a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eef6:	695b      	ldr	r3, [r3, #20]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d00e      	beq.n	800ef1a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef02:	695b      	ldr	r3, [r3, #20]
 800ef04:	7afa      	ldrb	r2, [r7, #11]
 800ef06:	4611      	mov	r1, r2
 800ef08:	68f8      	ldr	r0, [r7, #12]
 800ef0a:	4798      	blx	r3
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ef10:	7dfb      	ldrb	r3, [r7, #23]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d001      	beq.n	800ef1a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ef16:	7dfb      	ldrb	r3, [r7, #23]
 800ef18:	e000      	b.n	800ef1c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ef1a:	2300      	movs	r3, #0
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3718      	adds	r7, #24
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2200      	movs	r2, #0
 800ef38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2200      	movs	r2, #0
 800ef46:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d101      	bne.n	800ef58 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ef54:	2303      	movs	r3, #3
 800ef56:	e02f      	b.n	800efb8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d00f      	beq.n	800ef82 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d009      	beq.n	800ef82 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	687a      	ldr	r2, [r7, #4]
 800ef78:	6852      	ldr	r2, [r2, #4]
 800ef7a:	b2d2      	uxtb	r2, r2
 800ef7c:	4611      	mov	r1, r2
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef82:	2340      	movs	r3, #64	@ 0x40
 800ef84:	2200      	movs	r2, #0
 800ef86:	2100      	movs	r1, #0
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f001 fa3c 	bl	8010406 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2201      	movs	r2, #1
 800ef92:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2240      	movs	r2, #64	@ 0x40
 800ef9a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef9e:	2340      	movs	r3, #64	@ 0x40
 800efa0:	2200      	movs	r2, #0
 800efa2:	2180      	movs	r1, #128	@ 0x80
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f001 fa2e 	bl	8010406 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2201      	movs	r2, #1
 800efae:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2240      	movs	r2, #64	@ 0x40
 800efb4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800efb6:	2300      	movs	r3, #0
}
 800efb8:	4618      	mov	r0, r3
 800efba:	3708      	adds	r7, #8
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800efc0:	b480      	push	{r7}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	460b      	mov	r3, r1
 800efca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	78fa      	ldrb	r2, [r7, #3]
 800efd0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800efd2:	2300      	movs	r3, #0
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	370c      	adds	r7, #12
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr

0800efe0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b083      	sub	sp, #12
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800efee:	b2da      	uxtb	r2, r3
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2204      	movs	r2, #4
 800effa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800effe:	2300      	movs	r3, #0
}
 800f000:	4618      	mov	r0, r3
 800f002:	370c      	adds	r7, #12
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr

0800f00c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f00c:	b480      	push	{r7}
 800f00e:	b083      	sub	sp, #12
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	2b04      	cmp	r3, #4
 800f01e:	d106      	bne.n	800f02e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f026:	b2da      	uxtb	r2, r3
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f02e:	2300      	movs	r3, #0
}
 800f030:	4618      	mov	r0, r3
 800f032:	370c      	adds	r7, #12
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b082      	sub	sp, #8
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d101      	bne.n	800f052 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f04e:	2303      	movs	r3, #3
 800f050:	e012      	b.n	800f078 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f058:	b2db      	uxtb	r3, r3
 800f05a:	2b03      	cmp	r3, #3
 800f05c:	d10b      	bne.n	800f076 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f064:	69db      	ldr	r3, [r3, #28]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d005      	beq.n	800f076 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f070:	69db      	ldr	r3, [r3, #28]
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f076:	2300      	movs	r3, #0
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3708      	adds	r7, #8
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f080:	b480      	push	{r7}
 800f082:	b087      	sub	sp, #28
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	3301      	adds	r3, #1
 800f096:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f09e:	8a3b      	ldrh	r3, [r7, #16]
 800f0a0:	021b      	lsls	r3, r3, #8
 800f0a2:	b21a      	sxth	r2, r3
 800f0a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f0a8:	4313      	orrs	r3, r2
 800f0aa:	b21b      	sxth	r3, r3
 800f0ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f0ae:	89fb      	ldrh	r3, [r7, #14]
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	371c      	adds	r7, #28
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr

0800f0bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b084      	sub	sp, #16
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f0d2:	2b40      	cmp	r3, #64	@ 0x40
 800f0d4:	d005      	beq.n	800f0e2 <USBD_StdDevReq+0x26>
 800f0d6:	2b40      	cmp	r3, #64	@ 0x40
 800f0d8:	d853      	bhi.n	800f182 <USBD_StdDevReq+0xc6>
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00b      	beq.n	800f0f6 <USBD_StdDevReq+0x3a>
 800f0de:	2b20      	cmp	r3, #32
 800f0e0:	d14f      	bne.n	800f182 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0e8:	689b      	ldr	r3, [r3, #8]
 800f0ea:	6839      	ldr	r1, [r7, #0]
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	4798      	blx	r3
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	73fb      	strb	r3, [r7, #15]
      break;
 800f0f4:	e04a      	b.n	800f18c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	785b      	ldrb	r3, [r3, #1]
 800f0fa:	2b09      	cmp	r3, #9
 800f0fc:	d83b      	bhi.n	800f176 <USBD_StdDevReq+0xba>
 800f0fe:	a201      	add	r2, pc, #4	@ (adr r2, 800f104 <USBD_StdDevReq+0x48>)
 800f100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f104:	0800f159 	.word	0x0800f159
 800f108:	0800f16d 	.word	0x0800f16d
 800f10c:	0800f177 	.word	0x0800f177
 800f110:	0800f163 	.word	0x0800f163
 800f114:	0800f177 	.word	0x0800f177
 800f118:	0800f137 	.word	0x0800f137
 800f11c:	0800f12d 	.word	0x0800f12d
 800f120:	0800f177 	.word	0x0800f177
 800f124:	0800f14f 	.word	0x0800f14f
 800f128:	0800f141 	.word	0x0800f141
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f12c:	6839      	ldr	r1, [r7, #0]
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f000 f9de 	bl	800f4f0 <USBD_GetDescriptor>
          break;
 800f134:	e024      	b.n	800f180 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f136:	6839      	ldr	r1, [r7, #0]
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 fb6d 	bl	800f818 <USBD_SetAddress>
          break;
 800f13e:	e01f      	b.n	800f180 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f140:	6839      	ldr	r1, [r7, #0]
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 fbac 	bl	800f8a0 <USBD_SetConfig>
 800f148:	4603      	mov	r3, r0
 800f14a:	73fb      	strb	r3, [r7, #15]
          break;
 800f14c:	e018      	b.n	800f180 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f14e:	6839      	ldr	r1, [r7, #0]
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 fc4b 	bl	800f9ec <USBD_GetConfig>
          break;
 800f156:	e013      	b.n	800f180 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f158:	6839      	ldr	r1, [r7, #0]
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 fc7c 	bl	800fa58 <USBD_GetStatus>
          break;
 800f160:	e00e      	b.n	800f180 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f162:	6839      	ldr	r1, [r7, #0]
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 fcab 	bl	800fac0 <USBD_SetFeature>
          break;
 800f16a:	e009      	b.n	800f180 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f16c:	6839      	ldr	r1, [r7, #0]
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f000 fcba 	bl	800fae8 <USBD_ClrFeature>
          break;
 800f174:	e004      	b.n	800f180 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f176:	6839      	ldr	r1, [r7, #0]
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f000 fd11 	bl	800fba0 <USBD_CtlError>
          break;
 800f17e:	bf00      	nop
      }
      break;
 800f180:	e004      	b.n	800f18c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f182:	6839      	ldr	r1, [r7, #0]
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f000 fd0b 	bl	800fba0 <USBD_CtlError>
      break;
 800f18a:	bf00      	nop
  }

  return ret;
 800f18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3710      	adds	r7, #16
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
 800f196:	bf00      	nop

0800f198 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f1ae:	2b40      	cmp	r3, #64	@ 0x40
 800f1b0:	d005      	beq.n	800f1be <USBD_StdItfReq+0x26>
 800f1b2:	2b40      	cmp	r3, #64	@ 0x40
 800f1b4:	d82f      	bhi.n	800f216 <USBD_StdItfReq+0x7e>
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d001      	beq.n	800f1be <USBD_StdItfReq+0x26>
 800f1ba:	2b20      	cmp	r3, #32
 800f1bc:	d12b      	bne.n	800f216 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	3b01      	subs	r3, #1
 800f1c8:	2b02      	cmp	r3, #2
 800f1ca:	d81d      	bhi.n	800f208 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	889b      	ldrh	r3, [r3, #4]
 800f1d0:	b2db      	uxtb	r3, r3
 800f1d2:	2b01      	cmp	r3, #1
 800f1d4:	d813      	bhi.n	800f1fe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1dc:	689b      	ldr	r3, [r3, #8]
 800f1de:	6839      	ldr	r1, [r7, #0]
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	4798      	blx	r3
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	88db      	ldrh	r3, [r3, #6]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d110      	bne.n	800f212 <USBD_StdItfReq+0x7a>
 800f1f0:	7bfb      	ldrb	r3, [r7, #15]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d10d      	bne.n	800f212 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 fd9d 	bl	800fd36 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f1fc:	e009      	b.n	800f212 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f1fe:	6839      	ldr	r1, [r7, #0]
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f000 fccd 	bl	800fba0 <USBD_CtlError>
          break;
 800f206:	e004      	b.n	800f212 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f208:	6839      	ldr	r1, [r7, #0]
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f000 fcc8 	bl	800fba0 <USBD_CtlError>
          break;
 800f210:	e000      	b.n	800f214 <USBD_StdItfReq+0x7c>
          break;
 800f212:	bf00      	nop
      }
      break;
 800f214:	e004      	b.n	800f220 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f216:	6839      	ldr	r1, [r7, #0]
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f000 fcc1 	bl	800fba0 <USBD_CtlError>
      break;
 800f21e:	bf00      	nop
  }

  return ret;
 800f220:	7bfb      	ldrb	r3, [r7, #15]
}
 800f222:	4618      	mov	r0, r3
 800f224:	3710      	adds	r7, #16
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}

0800f22a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b084      	sub	sp, #16
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
 800f232:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f234:	2300      	movs	r3, #0
 800f236:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	889b      	ldrh	r3, [r3, #4]
 800f23c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f246:	2b40      	cmp	r3, #64	@ 0x40
 800f248:	d007      	beq.n	800f25a <USBD_StdEPReq+0x30>
 800f24a:	2b40      	cmp	r3, #64	@ 0x40
 800f24c:	f200 8145 	bhi.w	800f4da <USBD_StdEPReq+0x2b0>
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00c      	beq.n	800f26e <USBD_StdEPReq+0x44>
 800f254:	2b20      	cmp	r3, #32
 800f256:	f040 8140 	bne.w	800f4da <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f260:	689b      	ldr	r3, [r3, #8]
 800f262:	6839      	ldr	r1, [r7, #0]
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	4798      	blx	r3
 800f268:	4603      	mov	r3, r0
 800f26a:	73fb      	strb	r3, [r7, #15]
      break;
 800f26c:	e13a      	b.n	800f4e4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	785b      	ldrb	r3, [r3, #1]
 800f272:	2b03      	cmp	r3, #3
 800f274:	d007      	beq.n	800f286 <USBD_StdEPReq+0x5c>
 800f276:	2b03      	cmp	r3, #3
 800f278:	f300 8129 	bgt.w	800f4ce <USBD_StdEPReq+0x2a4>
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d07f      	beq.n	800f380 <USBD_StdEPReq+0x156>
 800f280:	2b01      	cmp	r3, #1
 800f282:	d03c      	beq.n	800f2fe <USBD_StdEPReq+0xd4>
 800f284:	e123      	b.n	800f4ce <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	2b02      	cmp	r3, #2
 800f290:	d002      	beq.n	800f298 <USBD_StdEPReq+0x6e>
 800f292:	2b03      	cmp	r3, #3
 800f294:	d016      	beq.n	800f2c4 <USBD_StdEPReq+0x9a>
 800f296:	e02c      	b.n	800f2f2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f298:	7bbb      	ldrb	r3, [r7, #14]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d00d      	beq.n	800f2ba <USBD_StdEPReq+0x90>
 800f29e:	7bbb      	ldrb	r3, [r7, #14]
 800f2a0:	2b80      	cmp	r3, #128	@ 0x80
 800f2a2:	d00a      	beq.n	800f2ba <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f2a4:	7bbb      	ldrb	r3, [r7, #14]
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f001 f8f1 	bl	8010490 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f2ae:	2180      	movs	r1, #128	@ 0x80
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f001 f8ed 	bl	8010490 <USBD_LL_StallEP>
 800f2b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f2b8:	e020      	b.n	800f2fc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f2ba:	6839      	ldr	r1, [r7, #0]
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 fc6f 	bl	800fba0 <USBD_CtlError>
              break;
 800f2c2:	e01b      	b.n	800f2fc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	885b      	ldrh	r3, [r3, #2]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d10e      	bne.n	800f2ea <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f2cc:	7bbb      	ldrb	r3, [r7, #14]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d00b      	beq.n	800f2ea <USBD_StdEPReq+0xc0>
 800f2d2:	7bbb      	ldrb	r3, [r7, #14]
 800f2d4:	2b80      	cmp	r3, #128	@ 0x80
 800f2d6:	d008      	beq.n	800f2ea <USBD_StdEPReq+0xc0>
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	88db      	ldrh	r3, [r3, #6]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d104      	bne.n	800f2ea <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f2e0:	7bbb      	ldrb	r3, [r7, #14]
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f001 f8d3 	bl	8010490 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 fd23 	bl	800fd36 <USBD_CtlSendStatus>

              break;
 800f2f0:	e004      	b.n	800f2fc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f2f2:	6839      	ldr	r1, [r7, #0]
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f000 fc53 	bl	800fba0 <USBD_CtlError>
              break;
 800f2fa:	bf00      	nop
          }
          break;
 800f2fc:	e0ec      	b.n	800f4d8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f304:	b2db      	uxtb	r3, r3
 800f306:	2b02      	cmp	r3, #2
 800f308:	d002      	beq.n	800f310 <USBD_StdEPReq+0xe6>
 800f30a:	2b03      	cmp	r3, #3
 800f30c:	d016      	beq.n	800f33c <USBD_StdEPReq+0x112>
 800f30e:	e030      	b.n	800f372 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f310:	7bbb      	ldrb	r3, [r7, #14]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d00d      	beq.n	800f332 <USBD_StdEPReq+0x108>
 800f316:	7bbb      	ldrb	r3, [r7, #14]
 800f318:	2b80      	cmp	r3, #128	@ 0x80
 800f31a:	d00a      	beq.n	800f332 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f31c:	7bbb      	ldrb	r3, [r7, #14]
 800f31e:	4619      	mov	r1, r3
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f001 f8b5 	bl	8010490 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f326:	2180      	movs	r1, #128	@ 0x80
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f001 f8b1 	bl	8010490 <USBD_LL_StallEP>
 800f32e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f330:	e025      	b.n	800f37e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f332:	6839      	ldr	r1, [r7, #0]
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f000 fc33 	bl	800fba0 <USBD_CtlError>
              break;
 800f33a:	e020      	b.n	800f37e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	885b      	ldrh	r3, [r3, #2]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d11b      	bne.n	800f37c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f344:	7bbb      	ldrb	r3, [r7, #14]
 800f346:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d004      	beq.n	800f358 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f34e:	7bbb      	ldrb	r3, [r7, #14]
 800f350:	4619      	mov	r1, r3
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f001 f8bb 	bl	80104ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f000 fcec 	bl	800fd36 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	6839      	ldr	r1, [r7, #0]
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	4798      	blx	r3
 800f36c:	4603      	mov	r3, r0
 800f36e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f370:	e004      	b.n	800f37c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f372:	6839      	ldr	r1, [r7, #0]
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f000 fc13 	bl	800fba0 <USBD_CtlError>
              break;
 800f37a:	e000      	b.n	800f37e <USBD_StdEPReq+0x154>
              break;
 800f37c:	bf00      	nop
          }
          break;
 800f37e:	e0ab      	b.n	800f4d8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f386:	b2db      	uxtb	r3, r3
 800f388:	2b02      	cmp	r3, #2
 800f38a:	d002      	beq.n	800f392 <USBD_StdEPReq+0x168>
 800f38c:	2b03      	cmp	r3, #3
 800f38e:	d032      	beq.n	800f3f6 <USBD_StdEPReq+0x1cc>
 800f390:	e097      	b.n	800f4c2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f392:	7bbb      	ldrb	r3, [r7, #14]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d007      	beq.n	800f3a8 <USBD_StdEPReq+0x17e>
 800f398:	7bbb      	ldrb	r3, [r7, #14]
 800f39a:	2b80      	cmp	r3, #128	@ 0x80
 800f39c:	d004      	beq.n	800f3a8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f39e:	6839      	ldr	r1, [r7, #0]
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f000 fbfd 	bl	800fba0 <USBD_CtlError>
                break;
 800f3a6:	e091      	b.n	800f4cc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	da0b      	bge.n	800f3c8 <USBD_StdEPReq+0x19e>
 800f3b0:	7bbb      	ldrb	r3, [r7, #14]
 800f3b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f3b6:	4613      	mov	r3, r2
 800f3b8:	009b      	lsls	r3, r3, #2
 800f3ba:	4413      	add	r3, r2
 800f3bc:	009b      	lsls	r3, r3, #2
 800f3be:	3310      	adds	r3, #16
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	3304      	adds	r3, #4
 800f3c6:	e00b      	b.n	800f3e0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f3c8:	7bbb      	ldrb	r3, [r7, #14]
 800f3ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3ce:	4613      	mov	r3, r2
 800f3d0:	009b      	lsls	r3, r3, #2
 800f3d2:	4413      	add	r3, r2
 800f3d4:	009b      	lsls	r3, r3, #2
 800f3d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f3da:	687a      	ldr	r2, [r7, #4]
 800f3dc:	4413      	add	r3, r2
 800f3de:	3304      	adds	r3, #4
 800f3e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	2202      	movs	r2, #2
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f000 fc47 	bl	800fc82 <USBD_CtlSendData>
              break;
 800f3f4:	e06a      	b.n	800f4cc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f3f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	da11      	bge.n	800f422 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f3fe:	7bbb      	ldrb	r3, [r7, #14]
 800f400:	f003 020f 	and.w	r2, r3, #15
 800f404:	6879      	ldr	r1, [r7, #4]
 800f406:	4613      	mov	r3, r2
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	4413      	add	r3, r2
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	440b      	add	r3, r1
 800f410:	3324      	adds	r3, #36	@ 0x24
 800f412:	881b      	ldrh	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d117      	bne.n	800f448 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f418:	6839      	ldr	r1, [r7, #0]
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f000 fbc0 	bl	800fba0 <USBD_CtlError>
                  break;
 800f420:	e054      	b.n	800f4cc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f422:	7bbb      	ldrb	r3, [r7, #14]
 800f424:	f003 020f 	and.w	r2, r3, #15
 800f428:	6879      	ldr	r1, [r7, #4]
 800f42a:	4613      	mov	r3, r2
 800f42c:	009b      	lsls	r3, r3, #2
 800f42e:	4413      	add	r3, r2
 800f430:	009b      	lsls	r3, r3, #2
 800f432:	440b      	add	r3, r1
 800f434:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f438:	881b      	ldrh	r3, [r3, #0]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d104      	bne.n	800f448 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f43e:	6839      	ldr	r1, [r7, #0]
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f000 fbad 	bl	800fba0 <USBD_CtlError>
                  break;
 800f446:	e041      	b.n	800f4cc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	da0b      	bge.n	800f468 <USBD_StdEPReq+0x23e>
 800f450:	7bbb      	ldrb	r3, [r7, #14]
 800f452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f456:	4613      	mov	r3, r2
 800f458:	009b      	lsls	r3, r3, #2
 800f45a:	4413      	add	r3, r2
 800f45c:	009b      	lsls	r3, r3, #2
 800f45e:	3310      	adds	r3, #16
 800f460:	687a      	ldr	r2, [r7, #4]
 800f462:	4413      	add	r3, r2
 800f464:	3304      	adds	r3, #4
 800f466:	e00b      	b.n	800f480 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f468:	7bbb      	ldrb	r3, [r7, #14]
 800f46a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f46e:	4613      	mov	r3, r2
 800f470:	009b      	lsls	r3, r3, #2
 800f472:	4413      	add	r3, r2
 800f474:	009b      	lsls	r3, r3, #2
 800f476:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	4413      	add	r3, r2
 800f47e:	3304      	adds	r3, #4
 800f480:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f482:	7bbb      	ldrb	r3, [r7, #14]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d002      	beq.n	800f48e <USBD_StdEPReq+0x264>
 800f488:	7bbb      	ldrb	r3, [r7, #14]
 800f48a:	2b80      	cmp	r3, #128	@ 0x80
 800f48c:	d103      	bne.n	800f496 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	2200      	movs	r2, #0
 800f492:	601a      	str	r2, [r3, #0]
 800f494:	e00e      	b.n	800f4b4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f496:	7bbb      	ldrb	r3, [r7, #14]
 800f498:	4619      	mov	r1, r3
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f001 f836 	bl	801050c <USBD_LL_IsStallEP>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d003      	beq.n	800f4ae <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	2201      	movs	r2, #1
 800f4aa:	601a      	str	r2, [r3, #0]
 800f4ac:	e002      	b.n	800f4b4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	2202      	movs	r2, #2
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f000 fbe1 	bl	800fc82 <USBD_CtlSendData>
              break;
 800f4c0:	e004      	b.n	800f4cc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f4c2:	6839      	ldr	r1, [r7, #0]
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 fb6b 	bl	800fba0 <USBD_CtlError>
              break;
 800f4ca:	bf00      	nop
          }
          break;
 800f4cc:	e004      	b.n	800f4d8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f4ce:	6839      	ldr	r1, [r7, #0]
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f000 fb65 	bl	800fba0 <USBD_CtlError>
          break;
 800f4d6:	bf00      	nop
      }
      break;
 800f4d8:	e004      	b.n	800f4e4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f4da:	6839      	ldr	r1, [r7, #0]
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f000 fb5f 	bl	800fba0 <USBD_CtlError>
      break;
 800f4e2:	bf00      	nop
  }

  return ret;
 800f4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
	...

0800f4f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f4fe:	2300      	movs	r3, #0
 800f500:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f502:	2300      	movs	r3, #0
 800f504:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	885b      	ldrh	r3, [r3, #2]
 800f50a:	0a1b      	lsrs	r3, r3, #8
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	3b01      	subs	r3, #1
 800f510:	2b0e      	cmp	r3, #14
 800f512:	f200 8152 	bhi.w	800f7ba <USBD_GetDescriptor+0x2ca>
 800f516:	a201      	add	r2, pc, #4	@ (adr r2, 800f51c <USBD_GetDescriptor+0x2c>)
 800f518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f51c:	0800f58d 	.word	0x0800f58d
 800f520:	0800f5a5 	.word	0x0800f5a5
 800f524:	0800f5e5 	.word	0x0800f5e5
 800f528:	0800f7bb 	.word	0x0800f7bb
 800f52c:	0800f7bb 	.word	0x0800f7bb
 800f530:	0800f75b 	.word	0x0800f75b
 800f534:	0800f787 	.word	0x0800f787
 800f538:	0800f7bb 	.word	0x0800f7bb
 800f53c:	0800f7bb 	.word	0x0800f7bb
 800f540:	0800f7bb 	.word	0x0800f7bb
 800f544:	0800f7bb 	.word	0x0800f7bb
 800f548:	0800f7bb 	.word	0x0800f7bb
 800f54c:	0800f7bb 	.word	0x0800f7bb
 800f550:	0800f7bb 	.word	0x0800f7bb
 800f554:	0800f559 	.word	0x0800f559
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f55e:	69db      	ldr	r3, [r3, #28]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d00b      	beq.n	800f57c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f56a:	69db      	ldr	r3, [r3, #28]
 800f56c:	687a      	ldr	r2, [r7, #4]
 800f56e:	7c12      	ldrb	r2, [r2, #16]
 800f570:	f107 0108 	add.w	r1, r7, #8
 800f574:	4610      	mov	r0, r2
 800f576:	4798      	blx	r3
 800f578:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f57a:	e126      	b.n	800f7ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f57c:	6839      	ldr	r1, [r7, #0]
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f000 fb0e 	bl	800fba0 <USBD_CtlError>
        err++;
 800f584:	7afb      	ldrb	r3, [r7, #11]
 800f586:	3301      	adds	r3, #1
 800f588:	72fb      	strb	r3, [r7, #11]
      break;
 800f58a:	e11e      	b.n	800f7ca <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	7c12      	ldrb	r2, [r2, #16]
 800f598:	f107 0108 	add.w	r1, r7, #8
 800f59c:	4610      	mov	r0, r2
 800f59e:	4798      	blx	r3
 800f5a0:	60f8      	str	r0, [r7, #12]
      break;
 800f5a2:	e112      	b.n	800f7ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	7c1b      	ldrb	r3, [r3, #16]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d10d      	bne.n	800f5c8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5b4:	f107 0208 	add.w	r2, r7, #8
 800f5b8:	4610      	mov	r0, r2
 800f5ba:	4798      	blx	r3
 800f5bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	2202      	movs	r2, #2
 800f5c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f5c6:	e100      	b.n	800f7ca <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5d0:	f107 0208 	add.w	r2, r7, #8
 800f5d4:	4610      	mov	r0, r2
 800f5d6:	4798      	blx	r3
 800f5d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	3301      	adds	r3, #1
 800f5de:	2202      	movs	r2, #2
 800f5e0:	701a      	strb	r2, [r3, #0]
      break;
 800f5e2:	e0f2      	b.n	800f7ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	885b      	ldrh	r3, [r3, #2]
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	2b05      	cmp	r3, #5
 800f5ec:	f200 80ac 	bhi.w	800f748 <USBD_GetDescriptor+0x258>
 800f5f0:	a201      	add	r2, pc, #4	@ (adr r2, 800f5f8 <USBD_GetDescriptor+0x108>)
 800f5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f6:	bf00      	nop
 800f5f8:	0800f611 	.word	0x0800f611
 800f5fc:	0800f645 	.word	0x0800f645
 800f600:	0800f679 	.word	0x0800f679
 800f604:	0800f6ad 	.word	0x0800f6ad
 800f608:	0800f6e1 	.word	0x0800f6e1
 800f60c:	0800f715 	.word	0x0800f715
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f616:	685b      	ldr	r3, [r3, #4]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d00b      	beq.n	800f634 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	687a      	ldr	r2, [r7, #4]
 800f626:	7c12      	ldrb	r2, [r2, #16]
 800f628:	f107 0108 	add.w	r1, r7, #8
 800f62c:	4610      	mov	r0, r2
 800f62e:	4798      	blx	r3
 800f630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f632:	e091      	b.n	800f758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f634:	6839      	ldr	r1, [r7, #0]
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f000 fab2 	bl	800fba0 <USBD_CtlError>
            err++;
 800f63c:	7afb      	ldrb	r3, [r7, #11]
 800f63e:	3301      	adds	r3, #1
 800f640:	72fb      	strb	r3, [r7, #11]
          break;
 800f642:	e089      	b.n	800f758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f64a:	689b      	ldr	r3, [r3, #8]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d00b      	beq.n	800f668 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	7c12      	ldrb	r2, [r2, #16]
 800f65c:	f107 0108 	add.w	r1, r7, #8
 800f660:	4610      	mov	r0, r2
 800f662:	4798      	blx	r3
 800f664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f666:	e077      	b.n	800f758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f668:	6839      	ldr	r1, [r7, #0]
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f000 fa98 	bl	800fba0 <USBD_CtlError>
            err++;
 800f670:	7afb      	ldrb	r3, [r7, #11]
 800f672:	3301      	adds	r3, #1
 800f674:	72fb      	strb	r3, [r7, #11]
          break;
 800f676:	e06f      	b.n	800f758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d00b      	beq.n	800f69c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	687a      	ldr	r2, [r7, #4]
 800f68e:	7c12      	ldrb	r2, [r2, #16]
 800f690:	f107 0108 	add.w	r1, r7, #8
 800f694:	4610      	mov	r0, r2
 800f696:	4798      	blx	r3
 800f698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f69a:	e05d      	b.n	800f758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f69c:	6839      	ldr	r1, [r7, #0]
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f000 fa7e 	bl	800fba0 <USBD_CtlError>
            err++;
 800f6a4:	7afb      	ldrb	r3, [r7, #11]
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	72fb      	strb	r3, [r7, #11]
          break;
 800f6aa:	e055      	b.n	800f758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6b2:	691b      	ldr	r3, [r3, #16]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00b      	beq.n	800f6d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6be:	691b      	ldr	r3, [r3, #16]
 800f6c0:	687a      	ldr	r2, [r7, #4]
 800f6c2:	7c12      	ldrb	r2, [r2, #16]
 800f6c4:	f107 0108 	add.w	r1, r7, #8
 800f6c8:	4610      	mov	r0, r2
 800f6ca:	4798      	blx	r3
 800f6cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6ce:	e043      	b.n	800f758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f6d0:	6839      	ldr	r1, [r7, #0]
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f000 fa64 	bl	800fba0 <USBD_CtlError>
            err++;
 800f6d8:	7afb      	ldrb	r3, [r7, #11]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	72fb      	strb	r3, [r7, #11]
          break;
 800f6de:	e03b      	b.n	800f758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6e6:	695b      	ldr	r3, [r3, #20]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d00b      	beq.n	800f704 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6f2:	695b      	ldr	r3, [r3, #20]
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	7c12      	ldrb	r2, [r2, #16]
 800f6f8:	f107 0108 	add.w	r1, r7, #8
 800f6fc:	4610      	mov	r0, r2
 800f6fe:	4798      	blx	r3
 800f700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f702:	e029      	b.n	800f758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f704:	6839      	ldr	r1, [r7, #0]
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f000 fa4a 	bl	800fba0 <USBD_CtlError>
            err++;
 800f70c:	7afb      	ldrb	r3, [r7, #11]
 800f70e:	3301      	adds	r3, #1
 800f710:	72fb      	strb	r3, [r7, #11]
          break;
 800f712:	e021      	b.n	800f758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f71a:	699b      	ldr	r3, [r3, #24]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d00b      	beq.n	800f738 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f726:	699b      	ldr	r3, [r3, #24]
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	7c12      	ldrb	r2, [r2, #16]
 800f72c:	f107 0108 	add.w	r1, r7, #8
 800f730:	4610      	mov	r0, r2
 800f732:	4798      	blx	r3
 800f734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f736:	e00f      	b.n	800f758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f738:	6839      	ldr	r1, [r7, #0]
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 fa30 	bl	800fba0 <USBD_CtlError>
            err++;
 800f740:	7afb      	ldrb	r3, [r7, #11]
 800f742:	3301      	adds	r3, #1
 800f744:	72fb      	strb	r3, [r7, #11]
          break;
 800f746:	e007      	b.n	800f758 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f748:	6839      	ldr	r1, [r7, #0]
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 fa28 	bl	800fba0 <USBD_CtlError>
          err++;
 800f750:	7afb      	ldrb	r3, [r7, #11]
 800f752:	3301      	adds	r3, #1
 800f754:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f756:	bf00      	nop
      }
      break;
 800f758:	e037      	b.n	800f7ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	7c1b      	ldrb	r3, [r3, #16]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d109      	bne.n	800f776 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f76a:	f107 0208 	add.w	r2, r7, #8
 800f76e:	4610      	mov	r0, r2
 800f770:	4798      	blx	r3
 800f772:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f774:	e029      	b.n	800f7ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f776:	6839      	ldr	r1, [r7, #0]
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f000 fa11 	bl	800fba0 <USBD_CtlError>
        err++;
 800f77e:	7afb      	ldrb	r3, [r7, #11]
 800f780:	3301      	adds	r3, #1
 800f782:	72fb      	strb	r3, [r7, #11]
      break;
 800f784:	e021      	b.n	800f7ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	7c1b      	ldrb	r3, [r3, #16]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d10d      	bne.n	800f7aa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f796:	f107 0208 	add.w	r2, r7, #8
 800f79a:	4610      	mov	r0, r2
 800f79c:	4798      	blx	r3
 800f79e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	2207      	movs	r2, #7
 800f7a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7a8:	e00f      	b.n	800f7ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f7aa:	6839      	ldr	r1, [r7, #0]
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f000 f9f7 	bl	800fba0 <USBD_CtlError>
        err++;
 800f7b2:	7afb      	ldrb	r3, [r7, #11]
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	72fb      	strb	r3, [r7, #11]
      break;
 800f7b8:	e007      	b.n	800f7ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f7ba:	6839      	ldr	r1, [r7, #0]
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f000 f9ef 	bl	800fba0 <USBD_CtlError>
      err++;
 800f7c2:	7afb      	ldrb	r3, [r7, #11]
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	72fb      	strb	r3, [r7, #11]
      break;
 800f7c8:	bf00      	nop
  }

  if (err != 0U)
 800f7ca:	7afb      	ldrb	r3, [r7, #11]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d11e      	bne.n	800f80e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	88db      	ldrh	r3, [r3, #6]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d016      	beq.n	800f806 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f7d8:	893b      	ldrh	r3, [r7, #8]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d00e      	beq.n	800f7fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	88da      	ldrh	r2, [r3, #6]
 800f7e2:	893b      	ldrh	r3, [r7, #8]
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	bf28      	it	cs
 800f7e8:	4613      	movcs	r3, r2
 800f7ea:	b29b      	uxth	r3, r3
 800f7ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f7ee:	893b      	ldrh	r3, [r7, #8]
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	68f9      	ldr	r1, [r7, #12]
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f000 fa44 	bl	800fc82 <USBD_CtlSendData>
 800f7fa:	e009      	b.n	800f810 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f7fc:	6839      	ldr	r1, [r7, #0]
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f000 f9ce 	bl	800fba0 <USBD_CtlError>
 800f804:	e004      	b.n	800f810 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f000 fa95 	bl	800fd36 <USBD_CtlSendStatus>
 800f80c:	e000      	b.n	800f810 <USBD_GetDescriptor+0x320>
    return;
 800f80e:	bf00      	nop
  }
}
 800f810:	3710      	adds	r7, #16
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
 800f816:	bf00      	nop

0800f818 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b084      	sub	sp, #16
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	889b      	ldrh	r3, [r3, #4]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d131      	bne.n	800f88e <USBD_SetAddress+0x76>
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	88db      	ldrh	r3, [r3, #6]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d12d      	bne.n	800f88e <USBD_SetAddress+0x76>
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	885b      	ldrh	r3, [r3, #2]
 800f836:	2b7f      	cmp	r3, #127	@ 0x7f
 800f838:	d829      	bhi.n	800f88e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	885b      	ldrh	r3, [r3, #2]
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f844:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f84c:	b2db      	uxtb	r3, r3
 800f84e:	2b03      	cmp	r3, #3
 800f850:	d104      	bne.n	800f85c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f852:	6839      	ldr	r1, [r7, #0]
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 f9a3 	bl	800fba0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f85a:	e01d      	b.n	800f898 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	7bfa      	ldrb	r2, [r7, #15]
 800f860:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f864:	7bfb      	ldrb	r3, [r7, #15]
 800f866:	4619      	mov	r1, r3
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f000 fe7b 	bl	8010564 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f000 fa61 	bl	800fd36 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f874:	7bfb      	ldrb	r3, [r7, #15]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d004      	beq.n	800f884 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2202      	movs	r2, #2
 800f87e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f882:	e009      	b.n	800f898 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2201      	movs	r2, #1
 800f888:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f88c:	e004      	b.n	800f898 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f88e:	6839      	ldr	r1, [r7, #0]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 f985 	bl	800fba0 <USBD_CtlError>
  }
}
 800f896:	bf00      	nop
 800f898:	bf00      	nop
 800f89a:	3710      	adds	r7, #16
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	885b      	ldrh	r3, [r3, #2]
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	4b4c      	ldr	r3, [pc, #304]	@ (800f9e8 <USBD_SetConfig+0x148>)
 800f8b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f8b8:	4b4b      	ldr	r3, [pc, #300]	@ (800f9e8 <USBD_SetConfig+0x148>)
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	d905      	bls.n	800f8cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f8c0:	6839      	ldr	r1, [r7, #0]
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f000 f96c 	bl	800fba0 <USBD_CtlError>
    return USBD_FAIL;
 800f8c8:	2303      	movs	r3, #3
 800f8ca:	e088      	b.n	800f9de <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8d2:	b2db      	uxtb	r3, r3
 800f8d4:	2b02      	cmp	r3, #2
 800f8d6:	d002      	beq.n	800f8de <USBD_SetConfig+0x3e>
 800f8d8:	2b03      	cmp	r3, #3
 800f8da:	d025      	beq.n	800f928 <USBD_SetConfig+0x88>
 800f8dc:	e071      	b.n	800f9c2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f8de:	4b42      	ldr	r3, [pc, #264]	@ (800f9e8 <USBD_SetConfig+0x148>)
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d01c      	beq.n	800f920 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f8e6:	4b40      	ldr	r3, [pc, #256]	@ (800f9e8 <USBD_SetConfig+0x148>)
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f8f0:	4b3d      	ldr	r3, [pc, #244]	@ (800f9e8 <USBD_SetConfig+0x148>)
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f7ff f992 	bl	800ec20 <USBD_SetClassConfig>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f900:	7bfb      	ldrb	r3, [r7, #15]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d004      	beq.n	800f910 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f906:	6839      	ldr	r1, [r7, #0]
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 f949 	bl	800fba0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f90e:	e065      	b.n	800f9dc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f000 fa10 	bl	800fd36 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2203      	movs	r2, #3
 800f91a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f91e:	e05d      	b.n	800f9dc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f000 fa08 	bl	800fd36 <USBD_CtlSendStatus>
      break;
 800f926:	e059      	b.n	800f9dc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f928:	4b2f      	ldr	r3, [pc, #188]	@ (800f9e8 <USBD_SetConfig+0x148>)
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d112      	bne.n	800f956 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2202      	movs	r2, #2
 800f934:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f938:	4b2b      	ldr	r3, [pc, #172]	@ (800f9e8 <USBD_SetConfig+0x148>)
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	461a      	mov	r2, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f942:	4b29      	ldr	r3, [pc, #164]	@ (800f9e8 <USBD_SetConfig+0x148>)
 800f944:	781b      	ldrb	r3, [r3, #0]
 800f946:	4619      	mov	r1, r3
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f7ff f985 	bl	800ec58 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f000 f9f1 	bl	800fd36 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f954:	e042      	b.n	800f9dc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f956:	4b24      	ldr	r3, [pc, #144]	@ (800f9e8 <USBD_SetConfig+0x148>)
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	461a      	mov	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	685b      	ldr	r3, [r3, #4]
 800f960:	429a      	cmp	r2, r3
 800f962:	d02a      	beq.n	800f9ba <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	b2db      	uxtb	r3, r3
 800f96a:	4619      	mov	r1, r3
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f7ff f973 	bl	800ec58 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f972:	4b1d      	ldr	r3, [pc, #116]	@ (800f9e8 <USBD_SetConfig+0x148>)
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	461a      	mov	r2, r3
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f97c:	4b1a      	ldr	r3, [pc, #104]	@ (800f9e8 <USBD_SetConfig+0x148>)
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	4619      	mov	r1, r3
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f7ff f94c 	bl	800ec20 <USBD_SetClassConfig>
 800f988:	4603      	mov	r3, r0
 800f98a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f98c:	7bfb      	ldrb	r3, [r7, #15]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d00f      	beq.n	800f9b2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f992:	6839      	ldr	r1, [r7, #0]
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f000 f903 	bl	800fba0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	685b      	ldr	r3, [r3, #4]
 800f99e:	b2db      	uxtb	r3, r3
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f7ff f958 	bl	800ec58 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2202      	movs	r2, #2
 800f9ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f9b0:	e014      	b.n	800f9dc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f000 f9bf 	bl	800fd36 <USBD_CtlSendStatus>
      break;
 800f9b8:	e010      	b.n	800f9dc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f000 f9bb 	bl	800fd36 <USBD_CtlSendStatus>
      break;
 800f9c0:	e00c      	b.n	800f9dc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f9c2:	6839      	ldr	r1, [r7, #0]
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f000 f8eb 	bl	800fba0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f9ca:	4b07      	ldr	r3, [pc, #28]	@ (800f9e8 <USBD_SetConfig+0x148>)
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f7ff f941 	bl	800ec58 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f9d6:	2303      	movs	r3, #3
 800f9d8:	73fb      	strb	r3, [r7, #15]
      break;
 800f9da:	bf00      	nop
  }

  return ret;
 800f9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3710      	adds	r7, #16
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	20000758 	.word	0x20000758

0800f9ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	88db      	ldrh	r3, [r3, #6]
 800f9fa:	2b01      	cmp	r3, #1
 800f9fc:	d004      	beq.n	800fa08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f9fe:	6839      	ldr	r1, [r7, #0]
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f000 f8cd 	bl	800fba0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fa06:	e023      	b.n	800fa50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa0e:	b2db      	uxtb	r3, r3
 800fa10:	2b02      	cmp	r3, #2
 800fa12:	dc02      	bgt.n	800fa1a <USBD_GetConfig+0x2e>
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	dc03      	bgt.n	800fa20 <USBD_GetConfig+0x34>
 800fa18:	e015      	b.n	800fa46 <USBD_GetConfig+0x5a>
 800fa1a:	2b03      	cmp	r3, #3
 800fa1c:	d00b      	beq.n	800fa36 <USBD_GetConfig+0x4a>
 800fa1e:	e012      	b.n	800fa46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2200      	movs	r2, #0
 800fa24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	3308      	adds	r3, #8
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f000 f927 	bl	800fc82 <USBD_CtlSendData>
        break;
 800fa34:	e00c      	b.n	800fa50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	3304      	adds	r3, #4
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f000 f91f 	bl	800fc82 <USBD_CtlSendData>
        break;
 800fa44:	e004      	b.n	800fa50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fa46:	6839      	ldr	r1, [r7, #0]
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f000 f8a9 	bl	800fba0 <USBD_CtlError>
        break;
 800fa4e:	bf00      	nop
}
 800fa50:	bf00      	nop
 800fa52:	3708      	adds	r7, #8
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa68:	b2db      	uxtb	r3, r3
 800fa6a:	3b01      	subs	r3, #1
 800fa6c:	2b02      	cmp	r3, #2
 800fa6e:	d81e      	bhi.n	800faae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	88db      	ldrh	r3, [r3, #6]
 800fa74:	2b02      	cmp	r3, #2
 800fa76:	d004      	beq.n	800fa82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fa78:	6839      	ldr	r1, [r7, #0]
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f000 f890 	bl	800fba0 <USBD_CtlError>
        break;
 800fa80:	e01a      	b.n	800fab8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2201      	movs	r2, #1
 800fa86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d005      	beq.n	800fa9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	68db      	ldr	r3, [r3, #12]
 800fa96:	f043 0202 	orr.w	r2, r3, #2
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	330c      	adds	r3, #12
 800faa2:	2202      	movs	r2, #2
 800faa4:	4619      	mov	r1, r3
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f000 f8eb 	bl	800fc82 <USBD_CtlSendData>
      break;
 800faac:	e004      	b.n	800fab8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800faae:	6839      	ldr	r1, [r7, #0]
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f000 f875 	bl	800fba0 <USBD_CtlError>
      break;
 800fab6:	bf00      	nop
  }
}
 800fab8:	bf00      	nop
 800faba:	3708      	adds	r7, #8
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	885b      	ldrh	r3, [r3, #2]
 800face:	2b01      	cmp	r3, #1
 800fad0:	d106      	bne.n	800fae0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2201      	movs	r2, #1
 800fad6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f000 f92b 	bl	800fd36 <USBD_CtlSendStatus>
  }
}
 800fae0:	bf00      	nop
 800fae2:	3708      	adds	r7, #8
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800faf8:	b2db      	uxtb	r3, r3
 800fafa:	3b01      	subs	r3, #1
 800fafc:	2b02      	cmp	r3, #2
 800fafe:	d80b      	bhi.n	800fb18 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	885b      	ldrh	r3, [r3, #2]
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	d10c      	bne.n	800fb22 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f000 f910 	bl	800fd36 <USBD_CtlSendStatus>
      }
      break;
 800fb16:	e004      	b.n	800fb22 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fb18:	6839      	ldr	r1, [r7, #0]
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f000 f840 	bl	800fba0 <USBD_CtlError>
      break;
 800fb20:	e000      	b.n	800fb24 <USBD_ClrFeature+0x3c>
      break;
 800fb22:	bf00      	nop
  }
}
 800fb24:	bf00      	nop
 800fb26:	3708      	adds	r7, #8
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	781a      	ldrb	r2, [r3, #0]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	3301      	adds	r3, #1
 800fb46:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	781a      	ldrb	r2, [r3, #0]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	3301      	adds	r3, #1
 800fb54:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fb56:	68f8      	ldr	r0, [r7, #12]
 800fb58:	f7ff fa92 	bl	800f080 <SWAPBYTE>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	461a      	mov	r2, r3
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	3301      	adds	r3, #1
 800fb68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	3301      	adds	r3, #1
 800fb6e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fb70:	68f8      	ldr	r0, [r7, #12]
 800fb72:	f7ff fa85 	bl	800f080 <SWAPBYTE>
 800fb76:	4603      	mov	r3, r0
 800fb78:	461a      	mov	r2, r3
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	3301      	adds	r3, #1
 800fb82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	3301      	adds	r3, #1
 800fb88:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fb8a:	68f8      	ldr	r0, [r7, #12]
 800fb8c:	f7ff fa78 	bl	800f080 <SWAPBYTE>
 800fb90:	4603      	mov	r3, r0
 800fb92:	461a      	mov	r2, r3
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	80da      	strh	r2, [r3, #6]
}
 800fb98:	bf00      	nop
 800fb9a:	3710      	adds	r7, #16
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fbaa:	2180      	movs	r1, #128	@ 0x80
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f000 fc6f 	bl	8010490 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fbb2:	2100      	movs	r1, #0
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f000 fc6b 	bl	8010490 <USBD_LL_StallEP>
}
 800fbba:	bf00      	nop
 800fbbc:	3708      	adds	r7, #8
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}

0800fbc2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fbc2:	b580      	push	{r7, lr}
 800fbc4:	b086      	sub	sp, #24
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	60f8      	str	r0, [r7, #12]
 800fbca:	60b9      	str	r1, [r7, #8]
 800fbcc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d036      	beq.n	800fc46 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fbdc:	6938      	ldr	r0, [r7, #16]
 800fbde:	f000 f836 	bl	800fc4e <USBD_GetLen>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	3301      	adds	r3, #1
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	005b      	lsls	r3, r3, #1
 800fbea:	b29a      	uxth	r2, r3
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fbf0:	7dfb      	ldrb	r3, [r7, #23]
 800fbf2:	68ba      	ldr	r2, [r7, #8]
 800fbf4:	4413      	add	r3, r2
 800fbf6:	687a      	ldr	r2, [r7, #4]
 800fbf8:	7812      	ldrb	r2, [r2, #0]
 800fbfa:	701a      	strb	r2, [r3, #0]
  idx++;
 800fbfc:	7dfb      	ldrb	r3, [r7, #23]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fc02:	7dfb      	ldrb	r3, [r7, #23]
 800fc04:	68ba      	ldr	r2, [r7, #8]
 800fc06:	4413      	add	r3, r2
 800fc08:	2203      	movs	r2, #3
 800fc0a:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc0c:	7dfb      	ldrb	r3, [r7, #23]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fc12:	e013      	b.n	800fc3c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fc14:	7dfb      	ldrb	r3, [r7, #23]
 800fc16:	68ba      	ldr	r2, [r7, #8]
 800fc18:	4413      	add	r3, r2
 800fc1a:	693a      	ldr	r2, [r7, #16]
 800fc1c:	7812      	ldrb	r2, [r2, #0]
 800fc1e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	3301      	adds	r3, #1
 800fc24:	613b      	str	r3, [r7, #16]
    idx++;
 800fc26:	7dfb      	ldrb	r3, [r7, #23]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fc2c:	7dfb      	ldrb	r3, [r7, #23]
 800fc2e:	68ba      	ldr	r2, [r7, #8]
 800fc30:	4413      	add	r3, r2
 800fc32:	2200      	movs	r2, #0
 800fc34:	701a      	strb	r2, [r3, #0]
    idx++;
 800fc36:	7dfb      	ldrb	r3, [r7, #23]
 800fc38:	3301      	adds	r3, #1
 800fc3a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fc3c:	693b      	ldr	r3, [r7, #16]
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d1e7      	bne.n	800fc14 <USBD_GetString+0x52>
 800fc44:	e000      	b.n	800fc48 <USBD_GetString+0x86>
    return;
 800fc46:	bf00      	nop
  }
}
 800fc48:	3718      	adds	r7, #24
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}

0800fc4e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fc4e:	b480      	push	{r7}
 800fc50:	b085      	sub	sp, #20
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fc56:	2300      	movs	r3, #0
 800fc58:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fc5e:	e005      	b.n	800fc6c <USBD_GetLen+0x1e>
  {
    len++;
 800fc60:	7bfb      	ldrb	r3, [r7, #15]
 800fc62:	3301      	adds	r3, #1
 800fc64:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d1f5      	bne.n	800fc60 <USBD_GetLen+0x12>
  }

  return len;
 800fc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3714      	adds	r7, #20
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc80:	4770      	bx	lr

0800fc82 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fc82:	b580      	push	{r7, lr}
 800fc84:	b084      	sub	sp, #16
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	60f8      	str	r0, [r7, #12]
 800fc8a:	60b9      	str	r1, [r7, #8]
 800fc8c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	2202      	movs	r2, #2
 800fc92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	687a      	ldr	r2, [r7, #4]
 800fca0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	68ba      	ldr	r2, [r7, #8]
 800fca6:	2100      	movs	r1, #0
 800fca8:	68f8      	ldr	r0, [r7, #12]
 800fcaa:	f000 fc7a 	bl	80105a2 <USBD_LL_Transmit>

  return USBD_OK;
 800fcae:	2300      	movs	r3, #0
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3710      	adds	r7, #16
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b084      	sub	sp, #16
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	60f8      	str	r0, [r7, #12]
 800fcc0:	60b9      	str	r1, [r7, #8]
 800fcc2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	68ba      	ldr	r2, [r7, #8]
 800fcc8:	2100      	movs	r1, #0
 800fcca:	68f8      	ldr	r0, [r7, #12]
 800fccc:	f000 fc69 	bl	80105a2 <USBD_LL_Transmit>

  return USBD_OK;
 800fcd0:	2300      	movs	r3, #0
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3710      	adds	r7, #16
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b084      	sub	sp, #16
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	60f8      	str	r0, [r7, #12]
 800fce2:	60b9      	str	r1, [r7, #8]
 800fce4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2203      	movs	r2, #3
 800fcea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	687a      	ldr	r2, [r7, #4]
 800fcf2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	687a      	ldr	r2, [r7, #4]
 800fcfa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	68ba      	ldr	r2, [r7, #8]
 800fd02:	2100      	movs	r1, #0
 800fd04:	68f8      	ldr	r0, [r7, #12]
 800fd06:	f000 fc6d 	bl	80105e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd0a:	2300      	movs	r3, #0
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3710      	adds	r7, #16
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	60f8      	str	r0, [r7, #12]
 800fd1c:	60b9      	str	r1, [r7, #8]
 800fd1e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	68ba      	ldr	r2, [r7, #8]
 800fd24:	2100      	movs	r1, #0
 800fd26:	68f8      	ldr	r0, [r7, #12]
 800fd28:	f000 fc5c 	bl	80105e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd2c:	2300      	movs	r3, #0
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3710      	adds	r7, #16
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}

0800fd36 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fd36:	b580      	push	{r7, lr}
 800fd38:	b082      	sub	sp, #8
 800fd3a:	af00      	add	r7, sp, #0
 800fd3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2204      	movs	r2, #4
 800fd42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fd46:	2300      	movs	r3, #0
 800fd48:	2200      	movs	r2, #0
 800fd4a:	2100      	movs	r1, #0
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f000 fc28 	bl	80105a2 <USBD_LL_Transmit>

  return USBD_OK;
 800fd52:	2300      	movs	r3, #0
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3708      	adds	r7, #8
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}

0800fd5c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b082      	sub	sp, #8
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2205      	movs	r2, #5
 800fd68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	2200      	movs	r2, #0
 800fd70:	2100      	movs	r1, #0
 800fd72:	6878      	ldr	r0, [r7, #4]
 800fd74:	f000 fc36 	bl	80105e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd78:	2300      	movs	r3, #0
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3708      	adds	r7, #8
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
	...

0800fd84 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800fd88:	2200      	movs	r2, #0
 800fd8a:	4912      	ldr	r1, [pc, #72]	@ (800fdd4 <MX_USB_Device_Init+0x50>)
 800fd8c:	4812      	ldr	r0, [pc, #72]	@ (800fdd8 <MX_USB_Device_Init+0x54>)
 800fd8e:	f7fe fed9 	bl	800eb44 <USBD_Init>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d001      	beq.n	800fd9c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800fd98:	f7f1 fb38 	bl	800140c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800fd9c:	490f      	ldr	r1, [pc, #60]	@ (800fddc <MX_USB_Device_Init+0x58>)
 800fd9e:	480e      	ldr	r0, [pc, #56]	@ (800fdd8 <MX_USB_Device_Init+0x54>)
 800fda0:	f7fe ff00 	bl	800eba4 <USBD_RegisterClass>
 800fda4:	4603      	mov	r3, r0
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d001      	beq.n	800fdae <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800fdaa:	f7f1 fb2f 	bl	800140c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800fdae:	490c      	ldr	r1, [pc, #48]	@ (800fde0 <MX_USB_Device_Init+0x5c>)
 800fdb0:	4809      	ldr	r0, [pc, #36]	@ (800fdd8 <MX_USB_Device_Init+0x54>)
 800fdb2:	f7fe fe51 	bl	800ea58 <USBD_CDC_RegisterInterface>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d001      	beq.n	800fdc0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800fdbc:	f7f1 fb26 	bl	800140c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800fdc0:	4805      	ldr	r0, [pc, #20]	@ (800fdd8 <MX_USB_Device_Init+0x54>)
 800fdc2:	f7fe ff16 	bl	800ebf2 <USBD_Start>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d001      	beq.n	800fdd0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800fdcc:	f7f1 fb1e 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800fdd0:	bf00      	nop
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	20000130 	.word	0x20000130
 800fdd8:	2000075c 	.word	0x2000075c
 800fddc:	20000018 	.word	0x20000018
 800fde0:	2000011c 	.word	0x2000011c

0800fde4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fde8:	2200      	movs	r2, #0
 800fdea:	4905      	ldr	r1, [pc, #20]	@ (800fe00 <CDC_Init_FS+0x1c>)
 800fdec:	4805      	ldr	r0, [pc, #20]	@ (800fe04 <CDC_Init_FS+0x20>)
 800fdee:	f7fe fe48 	bl	800ea82 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fdf2:	4905      	ldr	r1, [pc, #20]	@ (800fe08 <CDC_Init_FS+0x24>)
 800fdf4:	4803      	ldr	r0, [pc, #12]	@ (800fe04 <CDC_Init_FS+0x20>)
 800fdf6:	f7fe fe62 	bl	800eabe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fdfa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	2000122c 	.word	0x2000122c
 800fe04:	2000075c 	.word	0x2000075c
 800fe08:	20000a2c 	.word	0x20000a2c

0800fe0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fe10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	46bd      	mov	sp, r7
 800fe16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1a:	4770      	bx	lr

0800fe1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b083      	sub	sp, #12
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	4603      	mov	r3, r0
 800fe24:	6039      	str	r1, [r7, #0]
 800fe26:	71fb      	strb	r3, [r7, #7]
 800fe28:	4613      	mov	r3, r2
 800fe2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fe2c:	79fb      	ldrb	r3, [r7, #7]
 800fe2e:	2b23      	cmp	r3, #35	@ 0x23
 800fe30:	d84a      	bhi.n	800fec8 <CDC_Control_FS+0xac>
 800fe32:	a201      	add	r2, pc, #4	@ (adr r2, 800fe38 <CDC_Control_FS+0x1c>)
 800fe34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe38:	0800fec9 	.word	0x0800fec9
 800fe3c:	0800fec9 	.word	0x0800fec9
 800fe40:	0800fec9 	.word	0x0800fec9
 800fe44:	0800fec9 	.word	0x0800fec9
 800fe48:	0800fec9 	.word	0x0800fec9
 800fe4c:	0800fec9 	.word	0x0800fec9
 800fe50:	0800fec9 	.word	0x0800fec9
 800fe54:	0800fec9 	.word	0x0800fec9
 800fe58:	0800fec9 	.word	0x0800fec9
 800fe5c:	0800fec9 	.word	0x0800fec9
 800fe60:	0800fec9 	.word	0x0800fec9
 800fe64:	0800fec9 	.word	0x0800fec9
 800fe68:	0800fec9 	.word	0x0800fec9
 800fe6c:	0800fec9 	.word	0x0800fec9
 800fe70:	0800fec9 	.word	0x0800fec9
 800fe74:	0800fec9 	.word	0x0800fec9
 800fe78:	0800fec9 	.word	0x0800fec9
 800fe7c:	0800fec9 	.word	0x0800fec9
 800fe80:	0800fec9 	.word	0x0800fec9
 800fe84:	0800fec9 	.word	0x0800fec9
 800fe88:	0800fec9 	.word	0x0800fec9
 800fe8c:	0800fec9 	.word	0x0800fec9
 800fe90:	0800fec9 	.word	0x0800fec9
 800fe94:	0800fec9 	.word	0x0800fec9
 800fe98:	0800fec9 	.word	0x0800fec9
 800fe9c:	0800fec9 	.word	0x0800fec9
 800fea0:	0800fec9 	.word	0x0800fec9
 800fea4:	0800fec9 	.word	0x0800fec9
 800fea8:	0800fec9 	.word	0x0800fec9
 800feac:	0800fec9 	.word	0x0800fec9
 800feb0:	0800fec9 	.word	0x0800fec9
 800feb4:	0800fec9 	.word	0x0800fec9
 800feb8:	0800fec9 	.word	0x0800fec9
 800febc:	0800fec9 	.word	0x0800fec9
 800fec0:	0800fec9 	.word	0x0800fec9
 800fec4:	0800fec9 	.word	0x0800fec9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fec8:	bf00      	nop
  }

  return (USBD_OK);
 800feca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fecc:	4618      	mov	r0, r3
 800fece:	370c      	adds	r7, #12
 800fed0:	46bd      	mov	sp, r7
 800fed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed6:	4770      	bx	lr

0800fed8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fee2:	6879      	ldr	r1, [r7, #4]
 800fee4:	4805      	ldr	r0, [pc, #20]	@ (800fefc <CDC_Receive_FS+0x24>)
 800fee6:	f7fe fdea 	bl	800eabe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800feea:	4804      	ldr	r0, [pc, #16]	@ (800fefc <CDC_Receive_FS+0x24>)
 800feec:	f7fe fe00 	bl	800eaf0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fef0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
 800fefa:	bf00      	nop
 800fefc:	2000075c 	.word	0x2000075c

0800ff00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b087      	sub	sp, #28
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	60f8      	str	r0, [r7, #12]
 800ff08:	60b9      	str	r1, [r7, #8]
 800ff0a:	4613      	mov	r3, r2
 800ff0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ff12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	371c      	adds	r7, #28
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr
	...

0800ff24 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff24:	b480      	push	{r7}
 800ff26:	b083      	sub	sp, #12
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	6039      	str	r1, [r7, #0]
 800ff2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	2212      	movs	r2, #18
 800ff34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ff36:	4b03      	ldr	r3, [pc, #12]	@ (800ff44 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	370c      	adds	r7, #12
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr
 800ff44:	20000150 	.word	0x20000150

0800ff48 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff48:	b480      	push	{r7}
 800ff4a:	b083      	sub	sp, #12
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	4603      	mov	r3, r0
 800ff50:	6039      	str	r1, [r7, #0]
 800ff52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	2204      	movs	r2, #4
 800ff58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ff5a:	4b03      	ldr	r3, [pc, #12]	@ (800ff68 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	370c      	adds	r7, #12
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr
 800ff68:	20000164 	.word	0x20000164

0800ff6c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	4603      	mov	r3, r0
 800ff74:	6039      	str	r1, [r7, #0]
 800ff76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff78:	79fb      	ldrb	r3, [r7, #7]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d105      	bne.n	800ff8a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ff7e:	683a      	ldr	r2, [r7, #0]
 800ff80:	4907      	ldr	r1, [pc, #28]	@ (800ffa0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ff82:	4808      	ldr	r0, [pc, #32]	@ (800ffa4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ff84:	f7ff fe1d 	bl	800fbc2 <USBD_GetString>
 800ff88:	e004      	b.n	800ff94 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ff8a:	683a      	ldr	r2, [r7, #0]
 800ff8c:	4904      	ldr	r1, [pc, #16]	@ (800ffa0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ff8e:	4805      	ldr	r0, [pc, #20]	@ (800ffa4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ff90:	f7ff fe17 	bl	800fbc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff94:	4b02      	ldr	r3, [pc, #8]	@ (800ffa0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3708      	adds	r7, #8
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	bf00      	nop
 800ffa0:	20001a2c 	.word	0x20001a2c
 800ffa4:	08010ca8 	.word	0x08010ca8

0800ffa8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	4603      	mov	r3, r0
 800ffb0:	6039      	str	r1, [r7, #0]
 800ffb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ffb4:	683a      	ldr	r2, [r7, #0]
 800ffb6:	4904      	ldr	r1, [pc, #16]	@ (800ffc8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ffb8:	4804      	ldr	r0, [pc, #16]	@ (800ffcc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ffba:	f7ff fe02 	bl	800fbc2 <USBD_GetString>
  return USBD_StrDesc;
 800ffbe:	4b02      	ldr	r3, [pc, #8]	@ (800ffc8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	20001a2c 	.word	0x20001a2c
 800ffcc:	08010cc0 	.word	0x08010cc0

0800ffd0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b082      	sub	sp, #8
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	6039      	str	r1, [r7, #0]
 800ffda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	221a      	movs	r2, #26
 800ffe0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ffe2:	f000 f843 	bl	801006c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ffe6:	4b02      	ldr	r3, [pc, #8]	@ (800fff0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3708      	adds	r7, #8
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	20000168 	.word	0x20000168

0800fff4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	4603      	mov	r3, r0
 800fffc:	6039      	str	r1, [r7, #0]
 800fffe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010000:	79fb      	ldrb	r3, [r7, #7]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d105      	bne.n	8010012 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010006:	683a      	ldr	r2, [r7, #0]
 8010008:	4907      	ldr	r1, [pc, #28]	@ (8010028 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801000a:	4808      	ldr	r0, [pc, #32]	@ (801002c <USBD_CDC_ConfigStrDescriptor+0x38>)
 801000c:	f7ff fdd9 	bl	800fbc2 <USBD_GetString>
 8010010:	e004      	b.n	801001c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010012:	683a      	ldr	r2, [r7, #0]
 8010014:	4904      	ldr	r1, [pc, #16]	@ (8010028 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010016:	4805      	ldr	r0, [pc, #20]	@ (801002c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010018:	f7ff fdd3 	bl	800fbc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 801001c:	4b02      	ldr	r3, [pc, #8]	@ (8010028 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801001e:	4618      	mov	r0, r3
 8010020:	3708      	adds	r7, #8
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	20001a2c 	.word	0x20001a2c
 801002c:	08010cd4 	.word	0x08010cd4

08010030 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	4603      	mov	r3, r0
 8010038:	6039      	str	r1, [r7, #0]
 801003a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801003c:	79fb      	ldrb	r3, [r7, #7]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d105      	bne.n	801004e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010042:	683a      	ldr	r2, [r7, #0]
 8010044:	4907      	ldr	r1, [pc, #28]	@ (8010064 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010046:	4808      	ldr	r0, [pc, #32]	@ (8010068 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010048:	f7ff fdbb 	bl	800fbc2 <USBD_GetString>
 801004c:	e004      	b.n	8010058 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801004e:	683a      	ldr	r2, [r7, #0]
 8010050:	4904      	ldr	r1, [pc, #16]	@ (8010064 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010052:	4805      	ldr	r0, [pc, #20]	@ (8010068 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010054:	f7ff fdb5 	bl	800fbc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010058:	4b02      	ldr	r3, [pc, #8]	@ (8010064 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801005a:	4618      	mov	r0, r3
 801005c:	3708      	adds	r7, #8
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}
 8010062:	bf00      	nop
 8010064:	20001a2c 	.word	0x20001a2c
 8010068:	08010ce0 	.word	0x08010ce0

0801006c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b084      	sub	sp, #16
 8010070:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010072:	4b0f      	ldr	r3, [pc, #60]	@ (80100b0 <Get_SerialNum+0x44>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010078:	4b0e      	ldr	r3, [pc, #56]	@ (80100b4 <Get_SerialNum+0x48>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801007e:	4b0e      	ldr	r3, [pc, #56]	@ (80100b8 <Get_SerialNum+0x4c>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010084:	68fa      	ldr	r2, [r7, #12]
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	4413      	add	r3, r2
 801008a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d009      	beq.n	80100a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010092:	2208      	movs	r2, #8
 8010094:	4909      	ldr	r1, [pc, #36]	@ (80100bc <Get_SerialNum+0x50>)
 8010096:	68f8      	ldr	r0, [r7, #12]
 8010098:	f000 f814 	bl	80100c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801009c:	2204      	movs	r2, #4
 801009e:	4908      	ldr	r1, [pc, #32]	@ (80100c0 <Get_SerialNum+0x54>)
 80100a0:	68b8      	ldr	r0, [r7, #8]
 80100a2:	f000 f80f 	bl	80100c4 <IntToUnicode>
  }
}
 80100a6:	bf00      	nop
 80100a8:	3710      	adds	r7, #16
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	1fff7590 	.word	0x1fff7590
 80100b4:	1fff7594 	.word	0x1fff7594
 80100b8:	1fff7598 	.word	0x1fff7598
 80100bc:	2000016a 	.word	0x2000016a
 80100c0:	2000017a 	.word	0x2000017a

080100c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b087      	sub	sp, #28
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	60b9      	str	r1, [r7, #8]
 80100ce:	4613      	mov	r3, r2
 80100d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80100d2:	2300      	movs	r3, #0
 80100d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80100d6:	2300      	movs	r3, #0
 80100d8:	75fb      	strb	r3, [r7, #23]
 80100da:	e027      	b.n	801012c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	0f1b      	lsrs	r3, r3, #28
 80100e0:	2b09      	cmp	r3, #9
 80100e2:	d80b      	bhi.n	80100fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	0f1b      	lsrs	r3, r3, #28
 80100e8:	b2da      	uxtb	r2, r3
 80100ea:	7dfb      	ldrb	r3, [r7, #23]
 80100ec:	005b      	lsls	r3, r3, #1
 80100ee:	4619      	mov	r1, r3
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	440b      	add	r3, r1
 80100f4:	3230      	adds	r2, #48	@ 0x30
 80100f6:	b2d2      	uxtb	r2, r2
 80100f8:	701a      	strb	r2, [r3, #0]
 80100fa:	e00a      	b.n	8010112 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	0f1b      	lsrs	r3, r3, #28
 8010100:	b2da      	uxtb	r2, r3
 8010102:	7dfb      	ldrb	r3, [r7, #23]
 8010104:	005b      	lsls	r3, r3, #1
 8010106:	4619      	mov	r1, r3
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	440b      	add	r3, r1
 801010c:	3237      	adds	r2, #55	@ 0x37
 801010e:	b2d2      	uxtb	r2, r2
 8010110:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	011b      	lsls	r3, r3, #4
 8010116:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010118:	7dfb      	ldrb	r3, [r7, #23]
 801011a:	005b      	lsls	r3, r3, #1
 801011c:	3301      	adds	r3, #1
 801011e:	68ba      	ldr	r2, [r7, #8]
 8010120:	4413      	add	r3, r2
 8010122:	2200      	movs	r2, #0
 8010124:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010126:	7dfb      	ldrb	r3, [r7, #23]
 8010128:	3301      	adds	r3, #1
 801012a:	75fb      	strb	r3, [r7, #23]
 801012c:	7dfa      	ldrb	r2, [r7, #23]
 801012e:	79fb      	ldrb	r3, [r7, #7]
 8010130:	429a      	cmp	r2, r3
 8010132:	d3d3      	bcc.n	80100dc <IntToUnicode+0x18>
  }
}
 8010134:	bf00      	nop
 8010136:	bf00      	nop
 8010138:	371c      	adds	r7, #28
 801013a:	46bd      	mov	sp, r7
 801013c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010140:	4770      	bx	lr
	...

08010144 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b098      	sub	sp, #96	@ 0x60
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801014c:	f107 030c 	add.w	r3, r7, #12
 8010150:	2254      	movs	r2, #84	@ 0x54
 8010152:	2100      	movs	r1, #0
 8010154:	4618      	mov	r0, r3
 8010156:	f000 faf9 	bl	801074c <memset>
  if(pcdHandle->Instance==USB)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	4a15      	ldr	r2, [pc, #84]	@ (80101b4 <HAL_PCD_MspInit+0x70>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d123      	bne.n	80101ac <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010164:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010168:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801016a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801016e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010170:	f107 030c 	add.w	r3, r7, #12
 8010174:	4618      	mov	r0, r3
 8010176:	f7f8 fceb 	bl	8008b50 <HAL_RCCEx_PeriphCLKConfig>
 801017a:	4603      	mov	r3, r0
 801017c:	2b00      	cmp	r3, #0
 801017e:	d001      	beq.n	8010184 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8010180:	f7f1 f944 	bl	800140c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010184:	4b0c      	ldr	r3, [pc, #48]	@ (80101b8 <HAL_PCD_MspInit+0x74>)
 8010186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010188:	4a0b      	ldr	r2, [pc, #44]	@ (80101b8 <HAL_PCD_MspInit+0x74>)
 801018a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801018e:	6593      	str	r3, [r2, #88]	@ 0x58
 8010190:	4b09      	ldr	r3, [pc, #36]	@ (80101b8 <HAL_PCD_MspInit+0x74>)
 8010192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010194:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010198:	60bb      	str	r3, [r7, #8]
 801019a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801019c:	2200      	movs	r2, #0
 801019e:	2100      	movs	r1, #0
 80101a0:	2014      	movs	r0, #20
 80101a2:	f7f4 f821 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80101a6:	2014      	movs	r0, #20
 80101a8:	f7f4 f848 	bl	800423c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80101ac:	bf00      	nop
 80101ae:	3760      	adds	r7, #96	@ 0x60
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}
 80101b4:	40005c00 	.word	0x40005c00
 80101b8:	40021000 	.word	0x40021000

080101bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b082      	sub	sp, #8
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80101d0:	4619      	mov	r1, r3
 80101d2:	4610      	mov	r0, r2
 80101d4:	f7fe fd58 	bl	800ec88 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80101d8:	bf00      	nop
 80101da:	3708      	adds	r7, #8
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	460b      	mov	r3, r1
 80101ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80101f2:	78fa      	ldrb	r2, [r7, #3]
 80101f4:	6879      	ldr	r1, [r7, #4]
 80101f6:	4613      	mov	r3, r2
 80101f8:	009b      	lsls	r3, r3, #2
 80101fa:	4413      	add	r3, r2
 80101fc:	00db      	lsls	r3, r3, #3
 80101fe:	440b      	add	r3, r1
 8010200:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	78fb      	ldrb	r3, [r7, #3]
 8010208:	4619      	mov	r1, r3
 801020a:	f7fe fd92 	bl	800ed32 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801020e:	bf00      	nop
 8010210:	3708      	adds	r7, #8
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}

08010216 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010216:	b580      	push	{r7, lr}
 8010218:	b082      	sub	sp, #8
 801021a:	af00      	add	r7, sp, #0
 801021c:	6078      	str	r0, [r7, #4]
 801021e:	460b      	mov	r3, r1
 8010220:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010228:	78fa      	ldrb	r2, [r7, #3]
 801022a:	6879      	ldr	r1, [r7, #4]
 801022c:	4613      	mov	r3, r2
 801022e:	009b      	lsls	r3, r3, #2
 8010230:	4413      	add	r3, r2
 8010232:	00db      	lsls	r3, r3, #3
 8010234:	440b      	add	r3, r1
 8010236:	3324      	adds	r3, #36	@ 0x24
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	78fb      	ldrb	r3, [r7, #3]
 801023c:	4619      	mov	r1, r3
 801023e:	f7fe fddb 	bl	800edf8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8010242:	bf00      	nop
 8010244:	3708      	adds	r7, #8
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}

0801024a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801024a:	b580      	push	{r7, lr}
 801024c:	b082      	sub	sp, #8
 801024e:	af00      	add	r7, sp, #0
 8010250:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010258:	4618      	mov	r0, r3
 801025a:	f7fe feef 	bl	800f03c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801025e:	bf00      	nop
 8010260:	3708      	adds	r7, #8
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}

08010266 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010266:	b580      	push	{r7, lr}
 8010268:	b084      	sub	sp, #16
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801026e:	2301      	movs	r3, #1
 8010270:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	795b      	ldrb	r3, [r3, #5]
 8010276:	2b02      	cmp	r3, #2
 8010278:	d001      	beq.n	801027e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801027a:	f7f1 f8c7 	bl	800140c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010284:	7bfa      	ldrb	r2, [r7, #15]
 8010286:	4611      	mov	r1, r2
 8010288:	4618      	mov	r0, r3
 801028a:	f7fe fe99 	bl	800efc0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010294:	4618      	mov	r0, r3
 8010296:	f7fe fe45 	bl	800ef24 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801029a:	bf00      	nop
 801029c:	3710      	adds	r7, #16
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
	...

080102a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7fe fe94 	bl	800efe0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	7a5b      	ldrb	r3, [r3, #9]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d005      	beq.n	80102cc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80102c0:	4b04      	ldr	r3, [pc, #16]	@ (80102d4 <HAL_PCD_SuspendCallback+0x30>)
 80102c2:	691b      	ldr	r3, [r3, #16]
 80102c4:	4a03      	ldr	r2, [pc, #12]	@ (80102d4 <HAL_PCD_SuspendCallback+0x30>)
 80102c6:	f043 0306 	orr.w	r3, r3, #6
 80102ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80102cc:	bf00      	nop
 80102ce:	3708      	adds	r7, #8
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}
 80102d4:	e000ed00 	.word	0xe000ed00

080102d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	7a5b      	ldrb	r3, [r3, #9]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d007      	beq.n	80102f8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80102e8:	4b08      	ldr	r3, [pc, #32]	@ (801030c <HAL_PCD_ResumeCallback+0x34>)
 80102ea:	691b      	ldr	r3, [r3, #16]
 80102ec:	4a07      	ldr	r2, [pc, #28]	@ (801030c <HAL_PCD_ResumeCallback+0x34>)
 80102ee:	f023 0306 	bic.w	r3, r3, #6
 80102f2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80102f4:	f000 f9f8 	bl	80106e8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fe fe84 	bl	800f00c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010304:	bf00      	nop
 8010306:	3708      	adds	r7, #8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}
 801030c:	e000ed00 	.word	0xe000ed00

08010310 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b082      	sub	sp, #8
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010318:	4a2b      	ldr	r2, [pc, #172]	@ (80103c8 <USBD_LL_Init+0xb8>)
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	4a29      	ldr	r2, [pc, #164]	@ (80103c8 <USBD_LL_Init+0xb8>)
 8010324:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010328:	4b27      	ldr	r3, [pc, #156]	@ (80103c8 <USBD_LL_Init+0xb8>)
 801032a:	4a28      	ldr	r2, [pc, #160]	@ (80103cc <USBD_LL_Init+0xbc>)
 801032c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801032e:	4b26      	ldr	r3, [pc, #152]	@ (80103c8 <USBD_LL_Init+0xb8>)
 8010330:	2208      	movs	r2, #8
 8010332:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010334:	4b24      	ldr	r3, [pc, #144]	@ (80103c8 <USBD_LL_Init+0xb8>)
 8010336:	2202      	movs	r2, #2
 8010338:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801033a:	4b23      	ldr	r3, [pc, #140]	@ (80103c8 <USBD_LL_Init+0xb8>)
 801033c:	2202      	movs	r2, #2
 801033e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010340:	4b21      	ldr	r3, [pc, #132]	@ (80103c8 <USBD_LL_Init+0xb8>)
 8010342:	2200      	movs	r2, #0
 8010344:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010346:	4b20      	ldr	r3, [pc, #128]	@ (80103c8 <USBD_LL_Init+0xb8>)
 8010348:	2200      	movs	r2, #0
 801034a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801034c:	4b1e      	ldr	r3, [pc, #120]	@ (80103c8 <USBD_LL_Init+0xb8>)
 801034e:	2200      	movs	r2, #0
 8010350:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010352:	4b1d      	ldr	r3, [pc, #116]	@ (80103c8 <USBD_LL_Init+0xb8>)
 8010354:	2200      	movs	r2, #0
 8010356:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010358:	481b      	ldr	r0, [pc, #108]	@ (80103c8 <USBD_LL_Init+0xb8>)
 801035a:	f7f5 fe81 	bl	8006060 <HAL_PCD_Init>
 801035e:	4603      	mov	r3, r0
 8010360:	2b00      	cmp	r3, #0
 8010362:	d001      	beq.n	8010368 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8010364:	f7f1 f852 	bl	800140c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801036e:	2318      	movs	r3, #24
 8010370:	2200      	movs	r2, #0
 8010372:	2100      	movs	r1, #0
 8010374:	f7f7 fb48 	bl	8007a08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801037e:	2358      	movs	r3, #88	@ 0x58
 8010380:	2200      	movs	r2, #0
 8010382:	2180      	movs	r1, #128	@ 0x80
 8010384:	f7f7 fb40 	bl	8007a08 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801038e:	23c0      	movs	r3, #192	@ 0xc0
 8010390:	2200      	movs	r2, #0
 8010392:	2181      	movs	r1, #129	@ 0x81
 8010394:	f7f7 fb38 	bl	8007a08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801039e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80103a2:	2200      	movs	r2, #0
 80103a4:	2101      	movs	r1, #1
 80103a6:	f7f7 fb2f 	bl	8007a08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80103b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80103b4:	2200      	movs	r2, #0
 80103b6:	2182      	movs	r1, #130	@ 0x82
 80103b8:	f7f7 fb26 	bl	8007a08 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80103bc:	2300      	movs	r3, #0
}
 80103be:	4618      	mov	r0, r3
 80103c0:	3708      	adds	r7, #8
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
 80103c6:	bf00      	nop
 80103c8:	20001c2c 	.word	0x20001c2c
 80103cc:	40005c00 	.word	0x40005c00

080103d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b084      	sub	sp, #16
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103d8:	2300      	movs	r3, #0
 80103da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103dc:	2300      	movs	r3, #0
 80103de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7f5 ff16 	bl	8006218 <HAL_PCD_Start>
 80103ec:	4603      	mov	r3, r0
 80103ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103f0:	7bfb      	ldrb	r3, [r7, #15]
 80103f2:	4618      	mov	r0, r3
 80103f4:	f000 f97e 	bl	80106f4 <USBD_Get_USB_Status>
 80103f8:	4603      	mov	r3, r0
 80103fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3710      	adds	r7, #16
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}

08010406 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010406:	b580      	push	{r7, lr}
 8010408:	b084      	sub	sp, #16
 801040a:	af00      	add	r7, sp, #0
 801040c:	6078      	str	r0, [r7, #4]
 801040e:	4608      	mov	r0, r1
 8010410:	4611      	mov	r1, r2
 8010412:	461a      	mov	r2, r3
 8010414:	4603      	mov	r3, r0
 8010416:	70fb      	strb	r3, [r7, #3]
 8010418:	460b      	mov	r3, r1
 801041a:	70bb      	strb	r3, [r7, #2]
 801041c:	4613      	mov	r3, r2
 801041e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010420:	2300      	movs	r3, #0
 8010422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010424:	2300      	movs	r3, #0
 8010426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801042e:	78bb      	ldrb	r3, [r7, #2]
 8010430:	883a      	ldrh	r2, [r7, #0]
 8010432:	78f9      	ldrb	r1, [r7, #3]
 8010434:	f7f6 f85d 	bl	80064f2 <HAL_PCD_EP_Open>
 8010438:	4603      	mov	r3, r0
 801043a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801043c:	7bfb      	ldrb	r3, [r7, #15]
 801043e:	4618      	mov	r0, r3
 8010440:	f000 f958 	bl	80106f4 <USBD_Get_USB_Status>
 8010444:	4603      	mov	r3, r0
 8010446:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010448:	7bbb      	ldrb	r3, [r7, #14]
}
 801044a:	4618      	mov	r0, r3
 801044c:	3710      	adds	r7, #16
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}

08010452 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010452:	b580      	push	{r7, lr}
 8010454:	b084      	sub	sp, #16
 8010456:	af00      	add	r7, sp, #0
 8010458:	6078      	str	r0, [r7, #4]
 801045a:	460b      	mov	r3, r1
 801045c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801045e:	2300      	movs	r3, #0
 8010460:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010462:	2300      	movs	r3, #0
 8010464:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801046c:	78fa      	ldrb	r2, [r7, #3]
 801046e:	4611      	mov	r1, r2
 8010470:	4618      	mov	r0, r3
 8010472:	f7f6 f89b 	bl	80065ac <HAL_PCD_EP_Close>
 8010476:	4603      	mov	r3, r0
 8010478:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801047a:	7bfb      	ldrb	r3, [r7, #15]
 801047c:	4618      	mov	r0, r3
 801047e:	f000 f939 	bl	80106f4 <USBD_Get_USB_Status>
 8010482:	4603      	mov	r3, r0
 8010484:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010486:	7bbb      	ldrb	r3, [r7, #14]
}
 8010488:	4618      	mov	r0, r3
 801048a:	3710      	adds	r7, #16
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}

08010490 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b084      	sub	sp, #16
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	460b      	mov	r3, r1
 801049a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801049c:	2300      	movs	r3, #0
 801049e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104a0:	2300      	movs	r3, #0
 80104a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80104aa:	78fa      	ldrb	r2, [r7, #3]
 80104ac:	4611      	mov	r1, r2
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7f6 f944 	bl	800673c <HAL_PCD_EP_SetStall>
 80104b4:	4603      	mov	r3, r0
 80104b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104b8:	7bfb      	ldrb	r3, [r7, #15]
 80104ba:	4618      	mov	r0, r3
 80104bc:	f000 f91a 	bl	80106f4 <USBD_Get_USB_Status>
 80104c0:	4603      	mov	r3, r0
 80104c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3710      	adds	r7, #16
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}

080104ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b084      	sub	sp, #16
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	6078      	str	r0, [r7, #4]
 80104d6:	460b      	mov	r3, r1
 80104d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104da:	2300      	movs	r3, #0
 80104dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104de:	2300      	movs	r3, #0
 80104e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80104e8:	78fa      	ldrb	r2, [r7, #3]
 80104ea:	4611      	mov	r1, r2
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7f6 f977 	bl	80067e0 <HAL_PCD_EP_ClrStall>
 80104f2:	4603      	mov	r3, r0
 80104f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104f6:	7bfb      	ldrb	r3, [r7, #15]
 80104f8:	4618      	mov	r0, r3
 80104fa:	f000 f8fb 	bl	80106f4 <USBD_Get_USB_Status>
 80104fe:	4603      	mov	r3, r0
 8010500:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010502:	7bbb      	ldrb	r3, [r7, #14]
}
 8010504:	4618      	mov	r0, r3
 8010506:	3710      	adds	r7, #16
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801050c:	b480      	push	{r7}
 801050e:	b085      	sub	sp, #20
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	460b      	mov	r3, r1
 8010516:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801051e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010520:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010524:	2b00      	cmp	r3, #0
 8010526:	da0b      	bge.n	8010540 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010528:	78fb      	ldrb	r3, [r7, #3]
 801052a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801052e:	68f9      	ldr	r1, [r7, #12]
 8010530:	4613      	mov	r3, r2
 8010532:	009b      	lsls	r3, r3, #2
 8010534:	4413      	add	r3, r2
 8010536:	00db      	lsls	r3, r3, #3
 8010538:	440b      	add	r3, r1
 801053a:	3312      	adds	r3, #18
 801053c:	781b      	ldrb	r3, [r3, #0]
 801053e:	e00b      	b.n	8010558 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010540:	78fb      	ldrb	r3, [r7, #3]
 8010542:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010546:	68f9      	ldr	r1, [r7, #12]
 8010548:	4613      	mov	r3, r2
 801054a:	009b      	lsls	r3, r3, #2
 801054c:	4413      	add	r3, r2
 801054e:	00db      	lsls	r3, r3, #3
 8010550:	440b      	add	r3, r1
 8010552:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010556:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010558:	4618      	mov	r0, r3
 801055a:	3714      	adds	r7, #20
 801055c:	46bd      	mov	sp, r7
 801055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010562:	4770      	bx	lr

08010564 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b084      	sub	sp, #16
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	460b      	mov	r3, r1
 801056e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010570:	2300      	movs	r3, #0
 8010572:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010574:	2300      	movs	r3, #0
 8010576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801057e:	78fa      	ldrb	r2, [r7, #3]
 8010580:	4611      	mov	r1, r2
 8010582:	4618      	mov	r0, r3
 8010584:	f7f5 ff91 	bl	80064aa <HAL_PCD_SetAddress>
 8010588:	4603      	mov	r3, r0
 801058a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801058c:	7bfb      	ldrb	r3, [r7, #15]
 801058e:	4618      	mov	r0, r3
 8010590:	f000 f8b0 	bl	80106f4 <USBD_Get_USB_Status>
 8010594:	4603      	mov	r3, r0
 8010596:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010598:	7bbb      	ldrb	r3, [r7, #14]
}
 801059a:	4618      	mov	r0, r3
 801059c:	3710      	adds	r7, #16
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b086      	sub	sp, #24
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	60f8      	str	r0, [r7, #12]
 80105aa:	607a      	str	r2, [r7, #4]
 80105ac:	603b      	str	r3, [r7, #0]
 80105ae:	460b      	mov	r3, r1
 80105b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105b2:	2300      	movs	r3, #0
 80105b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105b6:	2300      	movs	r3, #0
 80105b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80105c0:	7af9      	ldrb	r1, [r7, #11]
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	687a      	ldr	r2, [r7, #4]
 80105c6:	f7f6 f882 	bl	80066ce <HAL_PCD_EP_Transmit>
 80105ca:	4603      	mov	r3, r0
 80105cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105ce:	7dfb      	ldrb	r3, [r7, #23]
 80105d0:	4618      	mov	r0, r3
 80105d2:	f000 f88f 	bl	80106f4 <USBD_Get_USB_Status>
 80105d6:	4603      	mov	r3, r0
 80105d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80105da:	7dbb      	ldrb	r3, [r7, #22]
}
 80105dc:	4618      	mov	r0, r3
 80105de:	3718      	adds	r7, #24
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}

080105e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b086      	sub	sp, #24
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	60f8      	str	r0, [r7, #12]
 80105ec:	607a      	str	r2, [r7, #4]
 80105ee:	603b      	str	r3, [r7, #0]
 80105f0:	460b      	mov	r3, r1
 80105f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105f4:	2300      	movs	r3, #0
 80105f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105f8:	2300      	movs	r3, #0
 80105fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010602:	7af9      	ldrb	r1, [r7, #11]
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	687a      	ldr	r2, [r7, #4]
 8010608:	f7f6 f818 	bl	800663c <HAL_PCD_EP_Receive>
 801060c:	4603      	mov	r3, r0
 801060e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010610:	7dfb      	ldrb	r3, [r7, #23]
 8010612:	4618      	mov	r0, r3
 8010614:	f000 f86e 	bl	80106f4 <USBD_Get_USB_Status>
 8010618:	4603      	mov	r3, r0
 801061a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801061c:	7dbb      	ldrb	r3, [r7, #22]
}
 801061e:	4618      	mov	r0, r3
 8010620:	3718      	adds	r7, #24
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}

08010626 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010626:	b580      	push	{r7, lr}
 8010628:	b082      	sub	sp, #8
 801062a:	af00      	add	r7, sp, #0
 801062c:	6078      	str	r0, [r7, #4]
 801062e:	460b      	mov	r3, r1
 8010630:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010638:	78fa      	ldrb	r2, [r7, #3]
 801063a:	4611      	mov	r1, r2
 801063c:	4618      	mov	r0, r3
 801063e:	f7f6 f82e 	bl	800669e <HAL_PCD_EP_GetRxCount>
 8010642:	4603      	mov	r3, r0
}
 8010644:	4618      	mov	r0, r3
 8010646:	3708      	adds	r7, #8
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	460b      	mov	r3, r1
 8010656:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010658:	78fb      	ldrb	r3, [r7, #3]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d002      	beq.n	8010664 <HAL_PCDEx_LPM_Callback+0x18>
 801065e:	2b01      	cmp	r3, #1
 8010660:	d013      	beq.n	801068a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010662:	e023      	b.n	80106ac <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	7a5b      	ldrb	r3, [r3, #9]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d007      	beq.n	801067c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801066c:	f000 f83c 	bl	80106e8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010670:	4b10      	ldr	r3, [pc, #64]	@ (80106b4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010672:	691b      	ldr	r3, [r3, #16]
 8010674:	4a0f      	ldr	r2, [pc, #60]	@ (80106b4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010676:	f023 0306 	bic.w	r3, r3, #6
 801067a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010682:	4618      	mov	r0, r3
 8010684:	f7fe fcc2 	bl	800f00c <USBD_LL_Resume>
    break;
 8010688:	e010      	b.n	80106ac <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010690:	4618      	mov	r0, r3
 8010692:	f7fe fca5 	bl	800efe0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	7a5b      	ldrb	r3, [r3, #9]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d005      	beq.n	80106aa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801069e:	4b05      	ldr	r3, [pc, #20]	@ (80106b4 <HAL_PCDEx_LPM_Callback+0x68>)
 80106a0:	691b      	ldr	r3, [r3, #16]
 80106a2:	4a04      	ldr	r2, [pc, #16]	@ (80106b4 <HAL_PCDEx_LPM_Callback+0x68>)
 80106a4:	f043 0306 	orr.w	r3, r3, #6
 80106a8:	6113      	str	r3, [r2, #16]
    break;
 80106aa:	bf00      	nop
}
 80106ac:	bf00      	nop
 80106ae:	3708      	adds	r7, #8
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}
 80106b4:	e000ed00 	.word	0xe000ed00

080106b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80106b8:	b480      	push	{r7}
 80106ba:	b083      	sub	sp, #12
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80106c0:	4b03      	ldr	r3, [pc, #12]	@ (80106d0 <USBD_static_malloc+0x18>)
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	370c      	adds	r7, #12
 80106c6:	46bd      	mov	sp, r7
 80106c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106cc:	4770      	bx	lr
 80106ce:	bf00      	nop
 80106d0:	20001f08 	.word	0x20001f08

080106d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]

}
 80106dc:	bf00      	nop
 80106de:	370c      	adds	r7, #12
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr

080106e8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80106ec:	f7f0 fd4c 	bl	8001188 <SystemClock_Config>
}
 80106f0:	bf00      	nop
 80106f2:	bd80      	pop	{r7, pc}

080106f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b085      	sub	sp, #20
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	4603      	mov	r3, r0
 80106fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106fe:	2300      	movs	r3, #0
 8010700:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010702:	79fb      	ldrb	r3, [r7, #7]
 8010704:	2b03      	cmp	r3, #3
 8010706:	d817      	bhi.n	8010738 <USBD_Get_USB_Status+0x44>
 8010708:	a201      	add	r2, pc, #4	@ (adr r2, 8010710 <USBD_Get_USB_Status+0x1c>)
 801070a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801070e:	bf00      	nop
 8010710:	08010721 	.word	0x08010721
 8010714:	08010727 	.word	0x08010727
 8010718:	0801072d 	.word	0x0801072d
 801071c:	08010733 	.word	0x08010733
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010720:	2300      	movs	r3, #0
 8010722:	73fb      	strb	r3, [r7, #15]
    break;
 8010724:	e00b      	b.n	801073e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010726:	2303      	movs	r3, #3
 8010728:	73fb      	strb	r3, [r7, #15]
    break;
 801072a:	e008      	b.n	801073e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801072c:	2301      	movs	r3, #1
 801072e:	73fb      	strb	r3, [r7, #15]
    break;
 8010730:	e005      	b.n	801073e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010732:	2303      	movs	r3, #3
 8010734:	73fb      	strb	r3, [r7, #15]
    break;
 8010736:	e002      	b.n	801073e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010738:	2303      	movs	r3, #3
 801073a:	73fb      	strb	r3, [r7, #15]
    break;
 801073c:	bf00      	nop
  }
  return usb_status;
 801073e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010740:	4618      	mov	r0, r3
 8010742:	3714      	adds	r7, #20
 8010744:	46bd      	mov	sp, r7
 8010746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074a:	4770      	bx	lr

0801074c <memset>:
 801074c:	4402      	add	r2, r0
 801074e:	4603      	mov	r3, r0
 8010750:	4293      	cmp	r3, r2
 8010752:	d100      	bne.n	8010756 <memset+0xa>
 8010754:	4770      	bx	lr
 8010756:	f803 1b01 	strb.w	r1, [r3], #1
 801075a:	e7f9      	b.n	8010750 <memset+0x4>

0801075c <__libc_init_array>:
 801075c:	b570      	push	{r4, r5, r6, lr}
 801075e:	4d0d      	ldr	r5, [pc, #52]	@ (8010794 <__libc_init_array+0x38>)
 8010760:	4c0d      	ldr	r4, [pc, #52]	@ (8010798 <__libc_init_array+0x3c>)
 8010762:	1b64      	subs	r4, r4, r5
 8010764:	10a4      	asrs	r4, r4, #2
 8010766:	2600      	movs	r6, #0
 8010768:	42a6      	cmp	r6, r4
 801076a:	d109      	bne.n	8010780 <__libc_init_array+0x24>
 801076c:	4d0b      	ldr	r5, [pc, #44]	@ (801079c <__libc_init_array+0x40>)
 801076e:	4c0c      	ldr	r4, [pc, #48]	@ (80107a0 <__libc_init_array+0x44>)
 8010770:	f000 f818 	bl	80107a4 <_init>
 8010774:	1b64      	subs	r4, r4, r5
 8010776:	10a4      	asrs	r4, r4, #2
 8010778:	2600      	movs	r6, #0
 801077a:	42a6      	cmp	r6, r4
 801077c:	d105      	bne.n	801078a <__libc_init_array+0x2e>
 801077e:	bd70      	pop	{r4, r5, r6, pc}
 8010780:	f855 3b04 	ldr.w	r3, [r5], #4
 8010784:	4798      	blx	r3
 8010786:	3601      	adds	r6, #1
 8010788:	e7ee      	b.n	8010768 <__libc_init_array+0xc>
 801078a:	f855 3b04 	ldr.w	r3, [r5], #4
 801078e:	4798      	blx	r3
 8010790:	3601      	adds	r6, #1
 8010792:	e7f2      	b.n	801077a <__libc_init_array+0x1e>
 8010794:	08010d08 	.word	0x08010d08
 8010798:	08010d08 	.word	0x08010d08
 801079c:	08010d08 	.word	0x08010d08
 80107a0:	08010d0c 	.word	0x08010d0c

080107a4 <_init>:
 80107a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107a6:	bf00      	nop
 80107a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107aa:	bc08      	pop	{r3}
 80107ac:	469e      	mov	lr, r3
 80107ae:	4770      	bx	lr

080107b0 <_fini>:
 80107b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107b2:	bf00      	nop
 80107b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107b6:	bc08      	pop	{r3}
 80107b8:	469e      	mov	lr, r3
 80107ba:	4770      	bx	lr
