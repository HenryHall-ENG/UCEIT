
UCEIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9d0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  0800ebb0  0800ebb0  0000fbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee24  0800ee24  000101d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee24  0800ee24  0000fe24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee2c  0800ee2c  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee2c  0800ee2c  0000fe2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ee30  0800ee30  0000fe30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ee34  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000207c  200001d8  0800f008  000101d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002254  0800f008  00010254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d7d0  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004704  00000000  00000000  0002d9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  000320d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001404  00000000  00000000  00033b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bdf7  00000000  00000000  00034f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e17  00000000  00000000  00060d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001141a1  00000000  00000000  00083b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00197cdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077ec  00000000  00000000  00197d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0019f50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800eb98 	.word	0x0800eb98

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800eb98 	.word	0x0800eb98

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2iz>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d215      	bcs.n	8000bb2 <__aeabi_d2iz+0x36>
 8000b86:	d511      	bpl.n	8000bac <__aeabi_d2iz+0x30>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d912      	bls.n	8000bb8 <__aeabi_d2iz+0x3c>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d105      	bne.n	8000bc4 <__aeabi_d2iz+0x48>
 8000bb8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2uiz>:
 8000bcc:	004a      	lsls	r2, r1, #1
 8000bce:	d211      	bcs.n	8000bf4 <__aeabi_d2uiz+0x28>
 8000bd0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd4:	d211      	bcs.n	8000bfa <__aeabi_d2uiz+0x2e>
 8000bd6:	d50d      	bpl.n	8000bf4 <__aeabi_d2uiz+0x28>
 8000bd8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be0:	d40e      	bmi.n	8000c00 <__aeabi_d2uiz+0x34>
 8000be2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfe:	d102      	bne.n	8000c06 <__aeabi_d2uiz+0x3a>
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	4770      	bx	lr
 8000c06:	f04f 0000 	mov.w	r0, #0
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b96a 	b.w	8000ef8 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	460c      	mov	r4, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14e      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c48:	4694      	mov	ip, r2
 8000c4a:	458c      	cmp	ip, r1
 8000c4c:	4686      	mov	lr, r0
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	d962      	bls.n	8000d1a <__udivmoddi4+0xde>
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	4319      	orrs	r1, r3
 8000c66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f f68c 	uxth.w	r6, ip
 8000c72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb04 f106 	mul.w	r1, r4, r6
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c92:	f080 8112 	bcs.w	8000eba <__udivmoddi4+0x27e>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 810f 	bls.w	8000eba <__udivmoddi4+0x27e>
 8000c9c:	3c02      	subs	r4, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a59      	subs	r1, r3, r1
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000caa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb00 f606 	mul.w	r6, r0, r6
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x94>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc2:	f080 80fc 	bcs.w	8000ebe <__udivmoddi4+0x282>
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	f240 80f9 	bls.w	8000ebe <__udivmoddi4+0x282>
 8000ccc:	4463      	add	r3, ip
 8000cce:	3802      	subs	r0, #2
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa6>
 8000cda:	40d3      	lsrs	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xba>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb4>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d146      	bne.n	8000d8c <__udivmoddi4+0x150>
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xcc>
 8000d02:	4290      	cmp	r0, r2
 8000d04:	f0c0 80f0 	bcc.w	8000ee8 <__udivmoddi4+0x2ac>
 8000d08:	1a86      	subs	r6, r0, r2
 8000d0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d0e6      	beq.n	8000ce2 <__udivmoddi4+0xa6>
 8000d14:	e9c5 6300 	strd	r6, r3, [r5]
 8000d18:	e7e3      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 8090 	bne.w	8000e40 <__udivmoddi4+0x204>
 8000d20:	eba1 040c 	sub.w	r4, r1, ip
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa1f f78c 	uxth.w	r7, ip
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb07 f006 	mul.w	r0, r7, r6
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x11c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x11a>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f200 80cd 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d56:	4626      	mov	r6, r4
 8000d58:	1a1c      	subs	r4, r3, r0
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d62:	fb08 4410 	mls	r4, r8, r0, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb00 f707 	mul.w	r7, r0, r7
 8000d6e:	429f      	cmp	r7, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x148>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x146>
 8000d7c:	429f      	cmp	r7, r3
 8000d7e:	f200 80b0 	bhi.w	8000ee2 <__udivmoddi4+0x2a6>
 8000d82:	4620      	mov	r0, r4
 8000d84:	1bdb      	subs	r3, r3, r7
 8000d86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0x9c>
 8000d8c:	f1c1 0620 	rsb	r6, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 f706 	lsr.w	r7, r2, r6
 8000d96:	431f      	orrs	r7, r3
 8000d98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000da0:	ea43 030c 	orr.w	r3, r3, ip
 8000da4:	40f4      	lsrs	r4, r6
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	0c38      	lsrs	r0, r7, #16
 8000dac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db0:	fbb4 fef0 	udiv	lr, r4, r0
 8000db4:	fa1f fc87 	uxth.w	ip, r7
 8000db8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc4:	45a1      	cmp	r9, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	d90a      	bls.n	8000de2 <__udivmoddi4+0x1a6>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dd2:	f080 8084 	bcs.w	8000ede <__udivmoddi4+0x2a2>
 8000dd6:	45a1      	cmp	r9, r4
 8000dd8:	f240 8081 	bls.w	8000ede <__udivmoddi4+0x2a2>
 8000ddc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	eba4 0409 	sub.w	r4, r4, r9
 8000de6:	fa1f f983 	uxth.w	r9, r3
 8000dea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dee:	fb00 4413 	mls	r4, r0, r3, r4
 8000df2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1d2>
 8000dfe:	193c      	adds	r4, r7, r4
 8000e00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e04:	d267      	bcs.n	8000ed6 <__udivmoddi4+0x29a>
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0x29a>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e12:	fba0 9302 	umull	r9, r3, r0, r2
 8000e16:	eba4 040c 	sub.w	r4, r4, ip
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	46ce      	mov	lr, r9
 8000e1e:	469c      	mov	ip, r3
 8000e20:	d351      	bcc.n	8000ec6 <__udivmoddi4+0x28a>
 8000e22:	d04e      	beq.n	8000ec2 <__udivmoddi4+0x286>
 8000e24:	b155      	cbz	r5, 8000e3c <__udivmoddi4+0x200>
 8000e26:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e32:	40cb      	lsrs	r3, r1
 8000e34:	431e      	orrs	r6, r3
 8000e36:	40cc      	lsrs	r4, r1
 8000e38:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	e750      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f103 	lsr.w	r1, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e50:	4094      	lsls	r4, r2
 8000e52:	430c      	orrs	r4, r1
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e5c:	fa1f f78c 	uxth.w	r7, ip
 8000e60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e64:	fb08 3110 	mls	r1, r8, r0, r3
 8000e68:	0c23      	lsrs	r3, r4, #16
 8000e6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6e:	fb00 f107 	mul.w	r1, r0, r7
 8000e72:	4299      	cmp	r1, r3
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x24c>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7e:	d22c      	bcs.n	8000eda <__udivmoddi4+0x29e>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d92a      	bls.n	8000eda <__udivmoddi4+0x29e>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e90:	fb08 3311 	mls	r3, r8, r1, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb01 f307 	mul.w	r3, r1, r7
 8000e9c:	42a3      	cmp	r3, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x276>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea8:	d213      	bcs.n	8000ed2 <__udivmoddi4+0x296>
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	d911      	bls.n	8000ed2 <__udivmoddi4+0x296>
 8000eae:	3902      	subs	r1, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	1ae4      	subs	r4, r4, r3
 8000eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb8:	e739      	b.n	8000d2e <__udivmoddi4+0xf2>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	e6f0      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e706      	b.n	8000cd0 <__udivmoddi4+0x94>
 8000ec2:	45c8      	cmp	r8, r9
 8000ec4:	d2ae      	bcs.n	8000e24 <__udivmoddi4+0x1e8>
 8000ec6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7a8      	b.n	8000e24 <__udivmoddi4+0x1e8>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	e7ed      	b.n	8000eb2 <__udivmoddi4+0x276>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e799      	b.n	8000e0e <__udivmoddi4+0x1d2>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e7d4      	b.n	8000e88 <__udivmoddi4+0x24c>
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	e77f      	b.n	8000de2 <__udivmoddi4+0x1a6>
 8000ee2:	4463      	add	r3, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e74d      	b.n	8000d84 <__udivmoddi4+0x148>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	4623      	mov	r3, r4
 8000eec:	4608      	mov	r0, r1
 8000eee:	e70f      	b.n	8000d10 <__udivmoddi4+0xd4>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	e730      	b.n	8000d58 <__udivmoddi4+0x11c>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
ADC_HandleTypeDef hadc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	@ 0x30
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2220      	movs	r2, #32
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f00d fa6d 	bl	800e3f4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f1a:	4b33      	ldr	r3, [pc, #204]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f1c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f22:	4b31      	ldr	r3, [pc, #196]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f30:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f36:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f42:	4b29      	ldr	r3, [pc, #164]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f44:	2204      	movs	r2, #4
 8000f46:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f48:	4b27      	ldr	r3, [pc, #156]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f4e:	4b26      	ldr	r3, [pc, #152]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f54:	4b24      	ldr	r3, [pc, #144]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f5a:	4b23      	ldr	r3, [pc, #140]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000f62:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f64:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000f68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f6c:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8000f70:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f80:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f88:	4817      	ldr	r0, [pc, #92]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000f8a:	f001 fd85 	bl	8002a98 <HAL_ADC_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000f94:	f001 f83e 	bl	8002014 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4811      	ldr	r0, [pc, #68]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000fa4:	f002 fe76 	bl	8003c94 <HAL_ADCEx_MultiModeConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000fae:	f001 f831 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <MX_ADC1_Init+0xf0>)
 8000fb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fbe:	237f      	movs	r3, #127	@ 0x7f
 8000fc0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4806      	ldr	r0, [pc, #24]	@ (8000fe8 <MX_ADC1_Init+0xec>)
 8000fd0:	f002 f876 	bl	80030c0 <HAL_ADC_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fda:	f001 f81b 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	3730      	adds	r7, #48	@ 0x30
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200001f4 	.word	0x200001f4
 8000fec:	04300002 	.word	0x04300002

08000ff0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f00d f9f9 	bl	800e3f4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001002:	4b2c      	ldr	r3, [pc, #176]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001004:	4a2c      	ldr	r2, [pc, #176]	@ (80010b8 <MX_ADC2_Init+0xc8>)
 8001006:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001008:	4b2a      	ldr	r3, [pc, #168]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 800100a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800100e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001010:	4b28      	ldr	r3, [pc, #160]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001016:	4b27      	ldr	r3, [pc, #156]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800101c:	4b25      	ldr	r3, [pc, #148]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001022:	4b24      	ldr	r3, [pc, #144]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001024:	2200      	movs	r2, #0
 8001026:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001028:	4b22      	ldr	r3, [pc, #136]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 800102a:	2204      	movs	r2, #4
 800102c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800102e:	4b21      	ldr	r3, [pc, #132]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001030:	2200      	movs	r2, #0
 8001032:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001034:	4b1f      	ldr	r3, [pc, #124]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001036:	2200      	movs	r2, #0
 8001038:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800103a:	4b1e      	ldr	r3, [pc, #120]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 800103c:	2201      	movs	r2, #1
 800103e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001040:	4b1c      	ldr	r3, [pc, #112]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001048:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 800104a:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800104e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001050:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001052:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8001056:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001058:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001062:	2200      	movs	r2, #0
 8001064:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001066:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800106e:	4811      	ldr	r0, [pc, #68]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 8001070:	f001 fd12 	bl	8002a98 <HAL_ADC_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800107a:	f000 ffcb 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800107e:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <MX_ADC2_Init+0xcc>)
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001082:	2306      	movs	r3, #6
 8001084:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800108a:	237f      	movs	r3, #127	@ 0x7f
 800108c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108e:	2304      	movs	r3, #4
 8001090:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001096:	463b      	mov	r3, r7
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	@ (80010b4 <MX_ADC2_Init+0xc4>)
 800109c:	f002 f810 	bl	80030c0 <HAL_ADC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80010a6:	f000 ffb5 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3720      	adds	r7, #32
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000260 	.word	0x20000260
 80010b8:	50000100 	.word	0x50000100
 80010bc:	0c900008 	.word	0x0c900008

080010c0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	@ 0x30
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2220      	movs	r2, #32
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f00d f98b 	bl	800e3f4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80010de:	4b32      	ldr	r3, [pc, #200]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 80010e0:	4a32      	ldr	r2, [pc, #200]	@ (80011ac <MX_ADC3_Init+0xec>)
 80010e2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010e4:	4b30      	ldr	r3, [pc, #192]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 80010e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010ea:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010ec:	4b2e      	ldr	r3, [pc, #184]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f2:	4b2d      	ldr	r3, [pc, #180]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80010f8:	4b2b      	ldr	r3, [pc, #172]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010fe:	4b2a      	ldr	r3, [pc, #168]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001104:	4b28      	ldr	r3, [pc, #160]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001106:	2204      	movs	r2, #4
 8001108:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800110a:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 800110c:	2200      	movs	r2, #0
 800110e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001110:	4b25      	ldr	r3, [pc, #148]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001112:	2200      	movs	r2, #0
 8001114:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001116:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001118:	2201      	movs	r2, #1
 800111a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800111c:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001124:	4b20      	ldr	r3, [pc, #128]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001126:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800112a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800112c:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 800112e:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8001132:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001134:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 800113e:	2200      	movs	r2, #0
 8001140:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800114a:	4817      	ldr	r0, [pc, #92]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 800114c:	f001 fca4 	bl	8002a98 <HAL_ADC_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8001156:	f000 ff5d 	bl	8002014 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800115e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001162:	4619      	mov	r1, r3
 8001164:	4810      	ldr	r0, [pc, #64]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001166:	f002 fd95 	bl	8003c94 <HAL_ADCEx_MultiModeConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001170:	f000 ff50 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001174:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <MX_ADC3_Init+0xf0>)
 8001176:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001178:	2306      	movs	r3, #6
 800117a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001180:	237f      	movs	r3, #127	@ 0x7f
 8001182:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001184:	2304      	movs	r3, #4
 8001186:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_ADC3_Init+0xe8>)
 8001192:	f001 ff95 	bl	80030c0 <HAL_ADC_ConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 800119c:	f000 ff3a 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	3730      	adds	r7, #48	@ 0x30
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200002cc 	.word	0x200002cc
 80011ac:	50000400 	.word	0x50000400
 80011b0:	04300002 	.word	0x04300002

080011b4 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ba:	463b      	mov	r3, r7
 80011bc:	2220      	movs	r2, #32
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f00d f917 	bl	800e3f4 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80011c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011c8:	4a2c      	ldr	r2, [pc, #176]	@ (800127c <MX_ADC4_Init+0xc8>)
 80011ca:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011d2:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80011d4:	4b28      	ldr	r3, [pc, #160]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011da:	4b27      	ldr	r3, [pc, #156]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80011e0:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e6:	4b24      	ldr	r3, [pc, #144]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ec:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011ee:	2204      	movs	r2, #4
 80011f0:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80011f2:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <MX_ADC4_Init+0xc4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <MX_ADC4_Init+0xc4>)
 8001200:	2201      	movs	r2, #1
 8001202:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001204:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <MX_ADC4_Init+0xc4>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800120c:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <MX_ADC4_Init+0xc4>)
 800120e:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8001212:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001214:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <MX_ADC4_Init+0xc4>)
 8001216:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800121a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800121c:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <MX_ADC4_Init+0xc4>)
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <MX_ADC4_Init+0xc4>)
 8001226:	2200      	movs	r2, #0
 8001228:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 800122a:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <MX_ADC4_Init+0xc4>)
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001232:	4811      	ldr	r0, [pc, #68]	@ (8001278 <MX_ADC4_Init+0xc4>)
 8001234:	f001 fc30 	bl	8002a98 <HAL_ADC_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC4_Init+0x8e>
  {
    Error_Handler();
 800123e:	f000 fee9 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <MX_ADC4_Init+0xcc>)
 8001244:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001246:	2306      	movs	r3, #6
 8001248:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800124e:	237f      	movs	r3, #127	@ 0x7f
 8001250:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001252:	2304      	movs	r3, #4
 8001254:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	@ (8001278 <MX_ADC4_Init+0xc4>)
 8001260:	f001 ff2e 	bl	80030c0 <HAL_ADC_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_ADC4_Init+0xba>
  {
    Error_Handler();
 800126a:	f000 fed3 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000338 	.word	0x20000338
 800127c:	50000500 	.word	0x50000500
 8001280:	04300002 	.word	0x04300002

08001284 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128a:	463b      	mov	r3, r7
 800128c:	2220      	movs	r2, #32
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f00d f8af 	bl	800e3f4 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001296:	4b2c      	ldr	r3, [pc, #176]	@ (8001348 <MX_ADC5_Init+0xc4>)
 8001298:	4a2c      	ldr	r2, [pc, #176]	@ (800134c <MX_ADC5_Init+0xc8>)
 800129a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800129c:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <MX_ADC5_Init+0xc4>)
 800129e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012a2:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80012a4:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012aa:	4b27      	ldr	r3, [pc, #156]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80012b0:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012b6:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012bc:	4b22      	ldr	r3, [pc, #136]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012be:	2204      	movs	r2, #4
 80012c0:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012de:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 80012e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80012e4:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012e6:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80012ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80012ec:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80012fa:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <MX_ADC5_Init+0xc4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001302:	4811      	ldr	r0, [pc, #68]	@ (8001348 <MX_ADC5_Init+0xc4>)
 8001304:	f001 fbc8 	bl	8002a98 <HAL_ADC_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC5_Init+0x8e>
  {
    Error_Handler();
 800130e:	f000 fe81 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001312:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <MX_ADC5_Init+0xcc>)
 8001314:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001316:	2306      	movs	r3, #6
 8001318:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800131e:	237f      	movs	r3, #127	@ 0x7f
 8001320:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001322:	2304      	movs	r3, #4
 8001324:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800132a:	463b      	mov	r3, r7
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	@ (8001348 <MX_ADC5_Init+0xc4>)
 8001330:	f001 fec6 	bl	80030c0 <HAL_ADC_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADC5_Init+0xba>
  {
    Error_Handler();
 800133a:	f000 fe6b 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200003a4 	.word	0x200003a4
 800134c:	50000600 	.word	0x50000600
 8001350:	19200040 	.word	0x19200040

08001354 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0a6      	sub	sp, #152	@ 0x98
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001370:	2254      	movs	r2, #84	@ 0x54
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f00d f83d 	bl	800e3f4 <memset>
  if(adcHandle->Instance==ADC1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001382:	d141      	bne.n	8001408 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001384:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001388:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800138a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800138e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001390:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001394:	4618      	mov	r0, r3
 8001396:	f005 fb53 	bl	8006a40 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80013a0:	f000 fe38 	bl	8002014 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013a4:	4ba7      	ldr	r3, [pc, #668]	@ (8001644 <HAL_ADC_MspInit+0x2f0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	4aa6      	ldr	r2, [pc, #664]	@ (8001644 <HAL_ADC_MspInit+0x2f0>)
 80013ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013ae:	4ba5      	ldr	r3, [pc, #660]	@ (8001644 <HAL_ADC_MspInit+0x2f0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d10b      	bne.n	80013ce <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013b6:	4ba4      	ldr	r3, [pc, #656]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	4aa3      	ldr	r2, [pc, #652]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80013bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c2:	4ba1      	ldr	r3, [pc, #644]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b9e      	ldr	r3, [pc, #632]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	4a9d      	ldr	r2, [pc, #628]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013da:	4b9b      	ldr	r3, [pc, #620]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ec:	2303      	movs	r3, #3
 80013ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001402:	f002 fe5f 	bl	80040c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8001406:	e119      	b.n	800163c <HAL_ADC_MspInit+0x2e8>
  else if(adcHandle->Instance==ADC2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a8f      	ldr	r2, [pc, #572]	@ (800164c <HAL_ADC_MspInit+0x2f8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d141      	bne.n	8001496 <HAL_ADC_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001416:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001418:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800141c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001422:	4618      	mov	r0, r3
 8001424:	f005 fb0c 	bl	8006a40 <HAL_RCCEx_PeriphCLKConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_ADC_MspInit+0xde>
      Error_Handler();
 800142e:	f000 fdf1 	bl	8002014 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001432:	4b84      	ldr	r3, [pc, #528]	@ (8001644 <HAL_ADC_MspInit+0x2f0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	4a82      	ldr	r2, [pc, #520]	@ (8001644 <HAL_ADC_MspInit+0x2f0>)
 800143a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800143c:	4b81      	ldr	r3, [pc, #516]	@ (8001644 <HAL_ADC_MspInit+0x2f0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d10b      	bne.n	800145c <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001444:	4b80      	ldr	r3, [pc, #512]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001448:	4a7f      	ldr	r2, [pc, #508]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 800144a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800144e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001450:	4b7d      	ldr	r3, [pc, #500]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001454:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
 800145a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4b7a      	ldr	r3, [pc, #488]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001460:	4a79      	ldr	r2, [pc, #484]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001468:	4b77      	ldr	r3, [pc, #476]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	623b      	str	r3, [r7, #32]
 8001472:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001474:	2340      	movs	r3, #64	@ 0x40
 8001476:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147a:	2303      	movs	r3, #3
 800147c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800148a:	4619      	mov	r1, r3
 800148c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001490:	f002 fe18 	bl	80040c4 <HAL_GPIO_Init>
}
 8001494:	e0d2      	b.n	800163c <HAL_ADC_MspInit+0x2e8>
  else if(adcHandle->Instance==ADC3)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a6d      	ldr	r2, [pc, #436]	@ (8001650 <HAL_ADC_MspInit+0x2fc>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d140      	bne.n	8001522 <HAL_ADC_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014a4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014a6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80014aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014b0:	4618      	mov	r0, r3
 80014b2:	f005 fac5 	bl	8006a40 <HAL_RCCEx_PeriphCLKConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_ADC_MspInit+0x16c>
      Error_Handler();
 80014bc:	f000 fdaa 	bl	8002014 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014c0:	4b64      	ldr	r3, [pc, #400]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	4a63      	ldr	r2, [pc, #396]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 80014c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014ca:	4b62      	ldr	r3, [pc, #392]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d10b      	bne.n	80014ea <HAL_ADC_MspInit+0x196>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4a5c      	ldr	r2, [pc, #368]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4b5a      	ldr	r3, [pc, #360]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b57      	ldr	r3, [pc, #348]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4a56      	ldr	r2, [pc, #344]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4b54      	ldr	r3, [pc, #336]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
 8001500:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001502:	2302      	movs	r3, #2
 8001504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001508:	2303      	movs	r3, #3
 800150a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001518:	4619      	mov	r1, r3
 800151a:	484f      	ldr	r0, [pc, #316]	@ (8001658 <HAL_ADC_MspInit+0x304>)
 800151c:	f002 fdd2 	bl	80040c4 <HAL_GPIO_Init>
}
 8001520:	e08c      	b.n	800163c <HAL_ADC_MspInit+0x2e8>
  else if(adcHandle->Instance==ADC4)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a4d      	ldr	r2, [pc, #308]	@ (800165c <HAL_ADC_MspInit+0x308>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d141      	bne.n	80015b0 <HAL_ADC_MspInit+0x25c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800152c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001530:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001532:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001536:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001538:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800153c:	4618      	mov	r0, r3
 800153e:	f005 fa7f 	bl	8006a40 <HAL_RCCEx_PeriphCLKConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001548:	f000 fd64 	bl	8002014 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800154c:	4b41      	ldr	r3, [pc, #260]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4a40      	ldr	r2, [pc, #256]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 8001554:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001556:	4b3f      	ldr	r3, [pc, #252]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d10b      	bne.n	8001576 <HAL_ADC_MspInit+0x222>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800155e:	4b3a      	ldr	r3, [pc, #232]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	4a39      	ldr	r2, [pc, #228]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156a:	4b37      	ldr	r3, [pc, #220]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001576:	4b34      	ldr	r3, [pc, #208]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a33      	ldr	r2, [pc, #204]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 800157c:	f043 0310 	orr.w	r3, r3, #16
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b31      	ldr	r3, [pc, #196]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800158e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001592:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001596:	2303      	movs	r3, #3
 8001598:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80015a6:	4619      	mov	r1, r3
 80015a8:	482d      	ldr	r0, [pc, #180]	@ (8001660 <HAL_ADC_MspInit+0x30c>)
 80015aa:	f002 fd8b 	bl	80040c4 <HAL_GPIO_Init>
}
 80015ae:	e045      	b.n	800163c <HAL_ADC_MspInit+0x2e8>
  else if(adcHandle->Instance==ADC5)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001664 <HAL_ADC_MspInit+0x310>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d140      	bne.n	800163c <HAL_ADC_MspInit+0x2e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015be:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80015c4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015ca:	4618      	mov	r0, r3
 80015cc:	f005 fa38 	bl	8006a40 <HAL_RCCEx_PeriphCLKConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_ADC_MspInit+0x286>
      Error_Handler();
 80015d6:	f000 fd1d 	bl	8002014 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015da:	4b1e      	ldr	r3, [pc, #120]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 80015e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <HAL_ADC_MspInit+0x300>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d10b      	bne.n	8001604 <HAL_ADC_MspInit+0x2b0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80015ec:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f0:	4a15      	ldr	r2, [pc, #84]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80015f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f8:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001608:	4a0f      	ldr	r2, [pc, #60]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 800160a:	f043 0310 	orr.w	r3, r3, #16
 800160e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001610:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <HAL_ADC_MspInit+0x2f4>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800161c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001620:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001624:	2303      	movs	r3, #3
 8001626:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001630:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001634:	4619      	mov	r1, r3
 8001636:	480a      	ldr	r0, [pc, #40]	@ (8001660 <HAL_ADC_MspInit+0x30c>)
 8001638:	f002 fd44 	bl	80040c4 <HAL_GPIO_Init>
}
 800163c:	bf00      	nop
 800163e:	3798      	adds	r7, #152	@ 0x98
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000410 	.word	0x20000410
 8001648:	40021000 	.word	0x40021000
 800164c:	50000100 	.word	0x50000100
 8001650:	50000400 	.word	0x50000400
 8001654:	20000414 	.word	0x20000414
 8001658:	48000400 	.word	0x48000400
 800165c:	50000500 	.word	0x50000500
 8001660:	48001000 	.word	0x48001000
 8001664:	50000600 	.word	0x50000600

08001668 <initDbleBuf>:
#include "stdlib.h"
#include "buffer.h"

// Initialize Double Buffer
int32_t *initDbleBuf (dbleBuf_t *buffer, uint32_t size)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
    buffer->windex = 0;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
    buffer->rindex = size;
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	609a      	str	r2, [r3, #8]
    buffer->size = size;
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	601a      	str	r2, [r3, #0]
    buffer->data = (int32_t *) calloc (2 * size, sizeof(int32_t));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2104      	movs	r1, #4
 800168a:	4618      	mov	r0, r3
 800168c:	f00c fdb4 	bl	800e1f8 <calloc>
 8001690:	4603      	mov	r3, r0
 8001692:	461a      	mov	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	60da      	str	r2, [r3, #12]
    return buffer->data;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <readDbleBuf>:
    }
}

// Read Double Buffer
int readDbleBuf (dbleBuf_t *buffer, int32_t *array)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
    int overrun = (buffer->windex >= buffer->rindex) && !(buffer->windex >= buffer->rindex + buffer->size); // Detect data overrun
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	db0a      	blt.n	80016d0 <readDbleBuf+0x2c>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6899      	ldr	r1, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	440b      	add	r3, r1
 80016c8:	429a      	cmp	r2, r3
 80016ca:	da01      	bge.n	80016d0 <readDbleBuf+0x2c>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <readDbleBuf+0x2e>
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
    int i;
    for (i = 0; i < buffer->size; i++, (buffer->rindex)++) { // Read the data in one buffer into array
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	e013      	b.n	8001702 <readDbleBuf+0x5e>
        array[i] = buffer->data[buffer->rindex];
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	441a      	add	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	6839      	ldr	r1, [r7, #0]
 80016ec:	440b      	add	r3, r1
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < buffer->size; i++, (buffer->rindex)++) { // Read the data in one buffer into array
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	3301      	adds	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbe6      	blt.n	80016da <readDbleBuf+0x36>
    }
    if (buffer->rindex >= 2*buffer->size) {// Circular buffering
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	429a      	cmp	r2, r3
 8001718:	db02      	blt.n	8001720 <readDbleBuf+0x7c>
        buffer->rindex = 0;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
    }
    return overrun;
 8001720:	68bb      	ldr	r3, [r7, #8]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08c      	sub	sp, #48	@ 0x30
 8001734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001746:	4b5f      	ldr	r3, [pc, #380]	@ (80018c4 <MX_GPIO_Init+0x194>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174a:	4a5e      	ldr	r2, [pc, #376]	@ (80018c4 <MX_GPIO_Init+0x194>)
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001752:	4b5c      	ldr	r3, [pc, #368]	@ (80018c4 <MX_GPIO_Init+0x194>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	4b59      	ldr	r3, [pc, #356]	@ (80018c4 <MX_GPIO_Init+0x194>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	4a58      	ldr	r2, [pc, #352]	@ (80018c4 <MX_GPIO_Init+0x194>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800176a:	4b56      	ldr	r3, [pc, #344]	@ (80018c4 <MX_GPIO_Init+0x194>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001776:	4b53      	ldr	r3, [pc, #332]	@ (80018c4 <MX_GPIO_Init+0x194>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177a:	4a52      	ldr	r2, [pc, #328]	@ (80018c4 <MX_GPIO_Init+0x194>)
 800177c:	f043 0320 	orr.w	r3, r3, #32
 8001780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001782:	4b50      	ldr	r3, [pc, #320]	@ (80018c4 <MX_GPIO_Init+0x194>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001786:	f003 0320 	and.w	r3, r3, #32
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	4b4d      	ldr	r3, [pc, #308]	@ (80018c4 <MX_GPIO_Init+0x194>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001792:	4a4c      	ldr	r2, [pc, #304]	@ (80018c4 <MX_GPIO_Init+0x194>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800179a:	4b4a      	ldr	r3, [pc, #296]	@ (80018c4 <MX_GPIO_Init+0x194>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	4b47      	ldr	r3, [pc, #284]	@ (80018c4 <MX_GPIO_Init+0x194>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017aa:	4a46      	ldr	r2, [pc, #280]	@ (80018c4 <MX_GPIO_Init+0x194>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b2:	4b44      	ldr	r3, [pc, #272]	@ (80018c4 <MX_GPIO_Init+0x194>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017be:	4b41      	ldr	r3, [pc, #260]	@ (80018c4 <MX_GPIO_Init+0x194>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c2:	4a40      	ldr	r2, [pc, #256]	@ (80018c4 <MX_GPIO_Init+0x194>)
 80017c4:	f043 0308 	orr.w	r3, r3, #8
 80017c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ca:	4b3e      	ldr	r3, [pc, #248]	@ (80018c4 <MX_GPIO_Init+0x194>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80017d6:	2200      	movs	r2, #0
 80017d8:	f64b 413c 	movw	r1, #48188	@ 0xbc3c
 80017dc:	483a      	ldr	r0, [pc, #232]	@ (80018c8 <MX_GPIO_Init+0x198>)
 80017de:	f002 fdf3 	bl	80043c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80017e2:	2200      	movs	r2, #0
 80017e4:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 80017e8:	4838      	ldr	r0, [pc, #224]	@ (80018cc <MX_GPIO_Init+0x19c>)
 80017ea:	f002 fded 	bl	80043c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80017f4:	4836      	ldr	r0, [pc, #216]	@ (80018d0 <MX_GPIO_Init+0x1a0>)
 80017f6:	f002 fde7 	bl	80043c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80017fa:	2200      	movs	r2, #0
 80017fc:	f64f 710f 	movw	r1, #65295	@ 0xff0f
 8001800:	4834      	ldr	r0, [pc, #208]	@ (80018d4 <MX_GPIO_Init+0x1a4>)
 8001802:	f002 fde1 	bl	80043c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE10 PE11 PE12 PE13
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001806:	f64b 433c 	movw	r3, #48188	@ 0xbc3c
 800180a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	4619      	mov	r1, r3
 800181e:	482a      	ldr	r0, [pc, #168]	@ (80018c8 <MX_GPIO_Init+0x198>)
 8001820:	f002 fc50 	bl	80040c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001824:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8001828:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4619      	mov	r1, r3
 800183c:	4823      	ldr	r0, [pc, #140]	@ (80018cc <MX_GPIO_Init+0x19c>)
 800183e:	f002 fc41 	bl	80040c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001842:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 031c 	add.w	r3, r7, #28
 8001858:	4619      	mov	r1, r3
 800185a:	481d      	ldr	r0, [pc, #116]	@ (80018d0 <MX_GPIO_Init+0x1a0>)
 800185c:	f002 fc32 	bl	80040c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001860:	f64f 730f 	movw	r3, #65295	@ 0xff0f
 8001864:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	4816      	ldr	r0, [pc, #88]	@ (80018d4 <MX_GPIO_Init+0x1a4>)
 800187a:	f002 fc23 	bl	80040c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800187e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001890:	2300      	movs	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189e:	f002 fc11 	bl	80040c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018a2:	23f0      	movs	r3, #240	@ 0xf0
 80018a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4807      	ldr	r0, [pc, #28]	@ (80018d4 <MX_GPIO_Init+0x1a4>)
 80018b6:	f002 fc05 	bl	80040c4 <HAL_GPIO_Init>

}
 80018ba:	bf00      	nop
 80018bc:	3730      	adds	r7, #48	@ 0x30
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	48001000 	.word	0x48001000
 80018cc:	48000800 	.word	0x48000800
 80018d0:	48000400 	.word	0x48000400
 80018d4:	48000c00 	.word	0x48000c00

080018d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018de:	f000 fe38 	bl	8002552 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e2:	f000 f909 	bl	8001af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e6:	f7ff ff23 	bl	8001730 <MX_GPIO_Init>
  MX_ADC1_Init();
 80018ea:	f7ff fb07 	bl	8000efc <MX_ADC1_Init>
  MX_ADC2_Init();
 80018ee:	f7ff fb7f 	bl	8000ff0 <MX_ADC2_Init>
  MX_ADC3_Init();
 80018f2:	f7ff fbe5 	bl	80010c0 <MX_ADC3_Init>
  MX_ADC4_Init();
 80018f6:	f7ff fc5d 	bl	80011b4 <MX_ADC4_Init>
  MX_ADC5_Init();
 80018fa:	f7ff fcc3 	bl	8001284 <MX_ADC5_Init>
  MX_SPI1_Init();
 80018fe:	f000 fb8f 	bl	8002020 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001902:	f000 fcdb 	bl	80022bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001906:	f000 fd69 	bl	80023dc <MX_TIM2_Init>
  MX_USB_Device_Init();
 800190a:	f00a ff3b 	bl	800c784 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800190e:	217f      	movs	r1, #127	@ 0x7f
 8001910:	4869      	ldr	r0, [pc, #420]	@ (8001ab8 <main+0x1e0>)
 8001912:	f002 f95d 	bl	8003bd0 <HAL_ADCEx_Calibration_Start>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <main+0x48>
  	  Error_Handler();
 800191c:	f000 fb7a 	bl	8002014 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8001920:	217f      	movs	r1, #127	@ 0x7f
 8001922:	4866      	ldr	r0, [pc, #408]	@ (8001abc <main+0x1e4>)
 8001924:	f002 f954 	bl	8003bd0 <HAL_ADCEx_Calibration_Start>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <main+0x5a>
  	  Error_Handler();
 800192e:	f000 fb71 	bl	8002014 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED) != HAL_OK)
 8001932:	217f      	movs	r1, #127	@ 0x7f
 8001934:	4862      	ldr	r0, [pc, #392]	@ (8001ac0 <main+0x1e8>)
 8001936:	f002 f94b 	bl	8003bd0 <HAL_ADCEx_Calibration_Start>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <main+0x6c>
  	  Error_Handler();
 8001940:	f000 fb68 	bl	8002014 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED) != HAL_OK)
 8001944:	217f      	movs	r1, #127	@ 0x7f
 8001946:	485f      	ldr	r0, [pc, #380]	@ (8001ac4 <main+0x1ec>)
 8001948:	f002 f942 	bl	8003bd0 <HAL_ADCEx_Calibration_Start>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <main+0x7e>
  	  Error_Handler();
 8001952:	f000 fb5f 	bl	8002014 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED) != HAL_OK)
 8001956:	217f      	movs	r1, #127	@ 0x7f
 8001958:	485b      	ldr	r0, [pc, #364]	@ (8001ac8 <main+0x1f0>)
 800195a:	f002 f939 	bl	8003bd0 <HAL_ADCEx_Calibration_Start>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <main+0x90>
  	  Error_Handler();
 8001964:	f000 fb56 	bl	8002014 <Error_Handler>

  if (HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8001968:	4853      	ldr	r0, [pc, #332]	@ (8001ab8 <main+0x1e0>)
 800196a:	f001 fa51 	bl	8002e10 <HAL_ADC_Start_IT>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <main+0xa0>
  	  Error_Handler();
 8001974:	f000 fb4e 	bl	8002014 <Error_Handler>
  if (HAL_ADC_Start_IT(&hadc2) != HAL_OK)
 8001978:	4850      	ldr	r0, [pc, #320]	@ (8001abc <main+0x1e4>)
 800197a:	f001 fa49 	bl	8002e10 <HAL_ADC_Start_IT>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <main+0xb0>
  	  Error_Handler();
 8001984:	f000 fb46 	bl	8002014 <Error_Handler>
  if (HAL_ADC_Start_IT(&hadc3) != HAL_OK)
 8001988:	484d      	ldr	r0, [pc, #308]	@ (8001ac0 <main+0x1e8>)
 800198a:	f001 fa41 	bl	8002e10 <HAL_ADC_Start_IT>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <main+0xc0>
  	  Error_Handler();
 8001994:	f000 fb3e 	bl	8002014 <Error_Handler>
  if (HAL_ADC_Start_IT(&hadc4) != HAL_OK)
 8001998:	484a      	ldr	r0, [pc, #296]	@ (8001ac4 <main+0x1ec>)
 800199a:	f001 fa39 	bl	8002e10 <HAL_ADC_Start_IT>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <main+0xd0>
  	  Error_Handler();
 80019a4:	f000 fb36 	bl	8002014 <Error_Handler>
  if (HAL_ADC_Start_IT(&hadc5) != HAL_OK)
 80019a8:	4847      	ldr	r0, [pc, #284]	@ (8001ac8 <main+0x1f0>)
 80019aa:	f001 fa31 	bl	8002e10 <HAL_ADC_Start_IT>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <main+0xe0>
  	  Error_Handler();
 80019b4:	f000 fb2e 	bl	8002014 <Error_Handler>

  uint32_t period = (uint32_t)(CLKFREQ / (TIMER2_PRESCALAR * TIMER2_FREQ) - 1);
 80019b8:	2312      	movs	r3, #18
 80019ba:	607b      	str	r3, [r7, #4]
  TIM2->ARR = period;
 80019bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIM2->PSC = TIMER2_PRESCALAR;
 80019c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019c8:	2201      	movs	r2, #1
 80019ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80019cc:	2100      	movs	r1, #0
 80019ce:	483f      	ldr	r0, [pc, #252]	@ (8001acc <main+0x1f4>)
 80019d0:	f005 fc56 	bl	8007280 <HAL_TIM_PWM_Start>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <main+0x106>
	  Error_Handler();
 80019da:	f000 fb1b 	bl	8002014 <Error_Handler>
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 80019de:	483c      	ldr	r0, [pc, #240]	@ (8001ad0 <main+0x1f8>)
 80019e0:	f005 fb7e 	bl	80070e0 <HAL_TIM_Base_Start_IT>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <main+0x116>
  	  Error_Handler();
 80019ea:	f000 fb13 	bl	8002014 <Error_Handler>

  init_lut();
 80019ee:	f000 fa4f 	bl	8001e90 <init_lut>
  init_all_buffers(buffers);
 80019f2:	4b38      	ldr	r3, [pc, #224]	@ (8001ad4 <main+0x1fc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f95e 	bl	8001cb8 <init_all_buffers>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (is_main) {
 80019fc:	4b36      	ldr	r3, [pc, #216]	@ (8001ad8 <main+0x200>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <main+0x132>
		  is_main = 0;
 8001a04:	4b34      	ldr	r3, [pc, #208]	@ (8001ad8 <main+0x200>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
	  }
	  if (is_dac) {
 8001a0a:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <main+0x204>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00f      	beq.n	8001a32 <main+0x15a>
		  write_dac(sinewave[sine_idx]);
 8001a12:	4b33      	ldr	r3, [pc, #204]	@ (8001ae0 <main+0x208>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a33      	ldr	r2, [pc, #204]	@ (8001ae4 <main+0x20c>)
 8001a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fa1b 	bl	8001e58 <write_dac>
		  sine_idx++;
 8001a22:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae0 <main+0x208>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae0 <main+0x208>)
 8001a2a:	6013      	str	r3, [r2, #0]
		  is_dac = 0;
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001adc <main+0x204>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
	  }
	  if (is_usb) {
 8001a32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <main+0x210>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <main+0x172>
		  send_all_buffer(buffers);
 8001a3a:	4b26      	ldr	r3, [pc, #152]	@ (8001ad4 <main+0x1fc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f9a2 	bl	8001d88 <send_all_buffer>
		  is_usb = 0;
 8001a44:	4b28      	ldr	r3, [pc, #160]	@ (8001ae8 <main+0x210>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
	  }
	  if (is_voltage_mux) {
 8001a4a:	4b28      	ldr	r3, [pc, #160]	@ (8001aec <main+0x214>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d018      	beq.n	8001a84 <main+0x1ac>
		  buffers->mux++;
 8001a52:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <main+0x1fc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	881a      	ldrh	r2, [r3, #0]
 8001a58:	3201      	adds	r2, #1
 8001a5a:	b292      	uxth	r2, r2
 8001a5c:	801a      	strh	r2, [r3, #0]
		  if (buffers->mux > 3) {
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <main+0x1fc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d903      	bls.n	8001a70 <main+0x198>
			  buffers->mux = 0;
 8001a68:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <main+0x1fc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	801a      	strh	r2, [r3, #0]
		  }
		  set_mux(buffers->mux);
 8001a70:	4b18      	ldr	r3, [pc, #96]	@ (8001ad4 <main+0x1fc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 f9d9 	bl	8001e30 <set_mux>
		  is_voltage_mux = 0;
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <main+0x214>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
	  }
	  if (is_current_mux) {
 8001a84:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <main+0x218>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0b7      	beq.n	80019fc <main+0x124>
		  current_mux++;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <main+0x21c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <main+0x21c>)
 8001a96:	701a      	strb	r2, [r3, #0]
		  if (current_mux > 15) {
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <main+0x21c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b0f      	cmp	r3, #15
 8001a9e:	d902      	bls.n	8001aa6 <main+0x1ce>
			  current_mux = 0;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <main+0x21c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
		  }
		  updateCurrent(current_mux);
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <main+0x21c>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 fa8a 	bl	8001fc4 <updateCurrent>
		  is_current_mux = 0;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <main+0x218>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
	  if (is_main) {
 8001ab6:	e7a1      	b.n	80019fc <main+0x124>
 8001ab8:	200001f4 	.word	0x200001f4
 8001abc:	20000260 	.word	0x20000260
 8001ac0:	200002cc 	.word	0x200002cc
 8001ac4:	20000338 	.word	0x20000338
 8001ac8:	200003a4 	.word	0x200003a4
 8001acc:	200006a0 	.word	0x200006a0
 8001ad0:	200006ec 	.word	0x200006ec
 8001ad4:	20000620 	.word	0x20000620
 8001ad8:	20000630 	.word	0x20000630
 8001adc:	20000631 	.word	0x20000631
 8001ae0:	20000618 	.word	0x20000618
 8001ae4:	20000418 	.word	0x20000418
 8001ae8:	20000632 	.word	0x20000632
 8001aec:	20000633 	.word	0x20000633
 8001af0:	20000634 	.word	0x20000634
 8001af4:	2000061c 	.word	0x2000061c

08001af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b094      	sub	sp, #80	@ 0x50
 8001afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001afe:	f107 0318 	add.w	r3, r7, #24
 8001b02:	2238      	movs	r2, #56	@ 0x38
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f00c fc74 	bl	800e3f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b1a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b1e:	f004 f99f 	bl	8005e60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b2c:	2340      	movs	r3, #64	@ 0x40
 8001b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b30:	2302      	movs	r3, #2
 8001b32:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b34:	2302      	movs	r3, #2
 8001b36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001b3c:	230c      	movs	r3, #12
 8001b3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b40:	2302      	movs	r3, #2
 8001b42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001b44:	2304      	movs	r3, #4
 8001b46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b4c:	f107 0318 	add.w	r3, r7, #24
 8001b50:	4618      	mov	r0, r3
 8001b52:	f004 fa39 	bl	8005fc8 <HAL_RCC_OscConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001b5c:	f000 fa5a 	bl	8002014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b60:	230f      	movs	r3, #15
 8001b62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b64:	2303      	movs	r3, #3
 8001b66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2103      	movs	r1, #3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f004 fd37 	bl	80065ec <HAL_RCC_ClockConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001b84:	f000 fa46 	bl	8002014 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001b8e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b92:	f004 fe67 	bl	8006864 <HAL_RCC_MCOConfig>
}
 8001b96:	bf00      	nop
 8001b98:	3750      	adds	r7, #80	@ 0x50
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_TIM_PeriodElapsedCallback>:
 * Args:
 * 		htim: handle type for the timer to define
 * 			which timer has triggered the callback.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bb0:	d169      	bne.n	8001c86 <HAL_TIM_PeriodElapsedCallback+0xe6>
		gl_ticks++;
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	1c54      	adds	r4, r2, #1
 8001bba:	f143 0500 	adc.w	r5, r3, #0
 8001bbe:	4b38      	ldr	r3, [pc, #224]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001bc0:	e9c3 4500 	strd	r4, r5, [r3]
	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / MAIN_FREQ) == 1) {
 8001bc4:	4b36      	ldr	r3, [pc, #216]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001bc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bca:	a331      	add	r3, pc, #196	@ (adr r3, 8001c90 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd0:	f7ff f81c 	bl	8000c0c <__aeabi_uldivmod>
 8001bd4:	1e51      	subs	r1, r2, #1
 8001bd6:	430b      	orrs	r3, r1
 8001bd8:	d102      	bne.n	8001be0 <HAL_TIM_PeriodElapsedCallback+0x40>
			is_main = 1; //1Hz
 8001bda:	4b32      	ldr	r3, [pc, #200]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
		}
	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / DAC_FREQ) == 1) {
 8001be0:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001be2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001be6:	f04f 0205 	mov.w	r2, #5
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	f7ff f80d 	bl	8000c0c <__aeabi_uldivmod>
 8001bf2:	1e51      	subs	r1, r2, #1
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	d102      	bne.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x5e>
			is_dac = 1; //1Hz
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
		}
	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / USB_FREQ) == 1) {
 8001bfe:	4b28      	ldr	r3, [pc, #160]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001c00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	f7fe fffe 	bl	8000c0c <__aeabi_uldivmod>
 8001c10:	1e51      	subs	r1, r2, #1
 8001c12:	430b      	orrs	r3, r1
 8001c14:	d102      	bne.n	8001c1c <HAL_TIM_PeriodElapsedCallback+0x7c>
	    	is_usb = 1;
 8001c16:	4b25      	ldr	r3, [pc, #148]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
	    }
	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / VOLTAGE_FREQ) == 1) {
 8001c1c:	4b20      	ldr	r3, [pc, #128]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001c1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	f7fe ffef 	bl	8000c0c <__aeabi_uldivmod>
 8001c2e:	1e51      	subs	r1, r2, #1
 8001c30:	430b      	orrs	r3, r1
 8001c32:	d102      	bne.n	8001c3a <HAL_TIM_PeriodElapsedCallback+0x9a>
	    	is_voltage_mux = 1;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
	    }
	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / CURRENT_FREQ) == 1) {
 8001c3a:	4b19      	ldr	r3, [pc, #100]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001c3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c40:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	f7fe ffe0 	bl	8000c0c <__aeabi_uldivmod>
 8001c4c:	1e51      	subs	r1, r2, #1
 8001c4e:	430b      	orrs	r3, r1
 8001c50:	d102      	bne.n	8001c58 <HAL_TIM_PeriodElapsedCallback+0xb8>
	    	is_current_mux = 1;
 8001c52:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
	    }
        if (gl_ticks >= TIMER2_FREQ) {
 8001c58:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f7fe fcbb 	bl	80005dc <__aeabi_ul2d>
 8001c66:	a30c      	add	r3, pc, #48	@ (adr r3, 8001c98 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6c:	f7fe ff72 	bl	8000b54 <__aeabi_dcmpge>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d100      	bne.n	8001c78 <HAL_TIM_PeriodElapsedCallback+0xd8>
            gl_ticks = 0;
        }
	}

}
 8001c76:	e006      	b.n	8001c86 <HAL_TIM_PeriodElapsedCallback+0xe6>
            gl_ticks = 0;
 8001c78:	4909      	ldr	r1, [pc, #36]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	004c4b40 	.word	0x004c4b40
	...
 8001c9c:	415312d0 	.word	0x415312d0
 8001ca0:	20000628 	.word	0x20000628
 8001ca4:	20000630 	.word	0x20000630
 8001ca8:	20000631 	.word	0x20000631
 8001cac:	20000632 	.word	0x20000632
 8001cb0:	20000633 	.word	0x20000633
 8001cb4:	20000634 	.word	0x20000634

08001cb8 <init_all_buffers>:

void init_all_buffers(buffers_t* buff) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	initDbleBuf(buff->adc1, ADC_SIZE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fccd 	bl	8001668 <initDbleBuf>
	initDbleBuf(buff->adc2, ADC_SIZE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fcc6 	bl	8001668 <initDbleBuf>
	initDbleBuf(buff->adc3, ADC_SIZE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fcbf 	bl	8001668 <initDbleBuf>
	initDbleBuf(buff->adc4, ADC_SIZE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fcb8 	bl	8001668 <initDbleBuf>
	initDbleBuf(buff->adc5, ADC_SIZE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fcb1 	bl	8001668 <initDbleBuf>
	buff->mux = 0;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	801a      	strh	r2, [r3, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <send_adc_buffer>:
 *
 * Args:
 * 		channel: the channel with a full buffer
 * 			that needs to be sent.
 */
void send_adc_buffer(int32_t *array, size_t size, uint8_t mux, uint8_t adc) {
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b093      	sub	sp, #76	@ 0x4c
 8001d18:	af04      	add	r7, sp, #16
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	460b      	mov	r3, r1
 8001d24:	71fb      	strb	r3, [r7, #7]
 8001d26:	4613      	mov	r3, r2
 8001d28:	71bb      	strb	r3, [r7, #6]
	char buffer[USB_PAYLOAD + 1];
	for (size_t i = 0; i < size; i++) {
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d2e:	e01d      	b.n	8001d6c <send_adc_buffer+0x58>
		uint16_t value = array[i];
 8001d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	867b      	strh	r3, [r7, #50]	@ 0x32
		snprintf (buffer, sizeof (buffer), "A%uV%uC%u %u\n", adc, mux, current_mux, value);
 8001d3c:	79b9      	ldrb	r1, [r7, #6]
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	4a0f      	ldr	r2, [pc, #60]	@ (8001d80 <send_adc_buffer+0x6c>)
 8001d42:	7812      	ldrb	r2, [r2, #0]
 8001d44:	4614      	mov	r4, r2
 8001d46:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8001d48:	f107 0010 	add.w	r0, r7, #16
 8001d4c:	9202      	str	r2, [sp, #8]
 8001d4e:	9401      	str	r4, [sp, #4]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	460b      	mov	r3, r1
 8001d54:	4a0b      	ldr	r2, [pc, #44]	@ (8001d84 <send_adc_buffer+0x70>)
 8001d56:	2121      	movs	r1, #33	@ 0x21
 8001d58:	f00c fb18 	bl	800e38c <sniprintf>
		USB_Send(buffer);
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f8f9 	bl	8001f58 <USB_Send>
	for (size_t i = 0; i < size; i++) {
 8001d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d68:	3301      	adds	r3, #1
 8001d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d3dd      	bcc.n	8001d30 <send_adc_buffer+0x1c>
	}
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	373c      	adds	r7, #60	@ 0x3c
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd90      	pop	{r4, r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000061c 	.word	0x2000061c
 8001d84:	0800ebb0 	.word	0x0800ebb0

08001d88 <send_all_buffer>:

void send_all_buffer(buffers_t* buff) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	int32_t *array;
	readDbleBuf (buff->adc1, array);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fc84 	bl	80016a4 <readDbleBuf>
	send_adc_buffer(array, ADC_SIZE, buff->mux, 1);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	2301      	movs	r3, #1
 8001da4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7ff ffb3 	bl	8001d14 <send_adc_buffer>
	readDbleBuf (buff->adc2, array);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	68f9      	ldr	r1, [r7, #12]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fc75 	bl	80016a4 <readDbleBuf>
	send_adc_buffer(array, ADC_SIZE, buff->mux, 2);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f7ff ffa4 	bl	8001d14 <send_adc_buffer>
	readDbleBuf (buff->adc3, array);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	68f9      	ldr	r1, [r7, #12]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fc66 	bl	80016a4 <readDbleBuf>
	send_adc_buffer(array, ADC_SIZE, buff->mux, 3);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	2303      	movs	r3, #3
 8001de0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f7ff ff95 	bl	8001d14 <send_adc_buffer>
	readDbleBuf (buff->adc4, array);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	68f9      	ldr	r1, [r7, #12]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fc57 	bl	80016a4 <readDbleBuf>
	send_adc_buffer(array, ADC_SIZE, buff->mux, 4);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f7ff ff86 	bl	8001d14 <send_adc_buffer>
	readDbleBuf (buff->adc5, array);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	68f9      	ldr	r1, [r7, #12]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fc48 	bl	80016a4 <readDbleBuf>
	send_adc_buffer(array, ADC_SIZE, buff->mux, 5);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7ff ff77 	bl	8001d14 <send_adc_buffer>
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <set_mux>:
 *
 * Args:
 * 		index: The configuration that is being set, only four
 * 			combinations exist to get all readings.
 */
void set_mux(uint8_t index) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
	uint16_t mask = 0xC000; //1100 0000 0000 0000
 8001e3a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001e3e:	81fb      	strh	r3, [r7, #14]
	WriteBits(GPIOE, mask, index);
 8001e40:	79fa      	ldrb	r2, [r7, #7]
 8001e42:	89fb      	ldrh	r3, [r7, #14]
 8001e44:	4619      	mov	r1, r3
 8001e46:	4803      	ldr	r0, [pc, #12]	@ (8001e54 <set_mux+0x24>)
 8001e48:	f000 f897 	bl	8001f7a <WriteBits>
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	48001000 	.word	0x48001000

08001e58 <write_dac>:
 *
 * Args:
 * 		value: The number that is being written
 * 			to the DAC
 */
void write_dac(uint16_t value){
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80fb      	strh	r3, [r7, #6]
	sine_idx = 0;
 8001e62:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <write_dac+0x30>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
	if (value >= 16384) {
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e6e:	d302      	bcc.n	8001e76 <write_dac+0x1e>
		value = 16384;
 8001e70:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e74:	80fb      	strh	r3, [r7, #6]
	}
	GPIOC->ODR = value;
 8001e76:	4a05      	ldr	r2, [pc, #20]	@ (8001e8c <write_dac+0x34>)
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	6153      	str	r3, [r2, #20]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	20000618 	.word	0x20000618
 8001e8c:	48000800 	.word	0x48000800

08001e90 <init_lut>:
 * Sets up a look up table of a sinewave with a DC offset
 * and a max 14 bit amplitude. THe frequency is adjusted according
 * to the update rate of the DAC.
 *
 */
void init_lut(void) {
 8001e90:	b5b0      	push	{r4, r5, r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
	uint32_t amplitude = 8192;
 8001e96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e9a:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < LUT_SIZE; i++) {
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	e048      	b.n	8001f34 <init_lut+0xa4>
		uint32_t new_freq = FREQ_CURRENT / (DAC_FREQ / LUT_SIZE);
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
		uint16_t sine = sin((i * 2.0 * M_PI * new_freq) / LUT_SIZE);
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f7fe fb64 	bl	8000574 <__aeabi_i2d>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	f7fe fa14 	bl	80002dc <__adddf3>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	a324      	add	r3, pc, #144	@ (adr r3, 8001f50 <init_lut+0xc0>)
 8001ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec2:	f7fe fbc1 	bl	8000648 <__aeabi_dmul>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4614      	mov	r4, r2
 8001ecc:	461d      	mov	r5, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fb40 	bl	8000554 <__aeabi_ui2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4620      	mov	r0, r4
 8001eda:	4629      	mov	r1, r5
 8001edc:	f7fe fbb4 	bl	8000648 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <init_lut+0xb8>)
 8001eee:	f7fe fcd5 	bl	800089c <__aeabi_ddiv>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	ec43 2b17 	vmov	d7, r2, r3
 8001efa:	eeb0 0a47 	vmov.f32	s0, s14
 8001efe:	eef0 0a67 	vmov.f32	s1, s15
 8001f02:	f00b f949 	bl	800d198 <sin>
 8001f06:	ec53 2b10 	vmov	r2, r3, d0
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f7fe fe5d 	bl	8000bcc <__aeabi_d2uiz>
 8001f12:	4603      	mov	r3, r0
 8001f14:	807b      	strh	r3, [r7, #2]
		sinewave[i] = (uint16_t)(amplitude * sine + amplitude);
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	fb12 f303 	smulbb	r3, r2, r3
 8001f24:	b299      	uxth	r1, r3
 8001f26:	4a09      	ldr	r2, [pc, #36]	@ (8001f4c <init_lut+0xbc>)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < LUT_SIZE; i++) {
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3301      	adds	r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2bff      	cmp	r3, #255	@ 0xff
 8001f38:	ddb3      	ble.n	8001ea2 <init_lut+0x12>
	}
}
 8001f3a:	bf00      	nop
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bdb0      	pop	{r4, r5, r7, pc}
 8001f44:	f3af 8000 	nop.w
 8001f48:	40700000 	.word	0x40700000
 8001f4c:	20000418 	.word	0x20000418
 8001f50:	54442d18 	.word	0x54442d18
 8001f54:	400921fb 	.word	0x400921fb

08001f58 <USB_Send>:
 * Sends a string to the USB com port on a host PC.
 *
 * Args:
 * 		message: the string that is being sent
 */
void USB_Send(char* message) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*)message, strlen(message));
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7fe f95d 	bl	8000220 <strlen>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f00a fcc7 	bl	800c900 <CDC_Transmit_FS>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <WriteBits>:


void WriteBits(GPIO_TypeDef* GPIOx, uint16_t pinMask, uint8_t value) {
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	807b      	strh	r3, [r7, #2]
 8001f86:	4613      	mov	r3, r2
 8001f88:	707b      	strb	r3, [r7, #1]
    // Clear the bits at the positions of pinMask
    GPIOx->ODR &= ~pinMask;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	43d2      	mvns	r2, r2
 8001f92:	401a      	ands	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	615a      	str	r2, [r3, #20]

    // Set the new value at the positions of pinMask
    GPIOx->ODR |= (value & 0x0F) << __builtin_ctz(pinMask);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	787a      	ldrb	r2, [r7, #1]
 8001f9e:	f002 010f 	and.w	r1, r2, #15
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	fa92 f2a2 	rbit	r2, r2
 8001fa8:	fab2 f282 	clz	r2, r2
 8001fac:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	615a      	str	r2, [r3, #20]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <updateCurrent>:

void updateCurrent(Electrode_t electrodes) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
	uint16_t maskP = 0x003C; //0000 0000 0011 1100
 8001fce:	233c      	movs	r3, #60	@ 0x3c
 8001fd0:	81fb      	strh	r3, [r7, #14]
	uint16_t maskN = 0x3C00; //0011 1100 0000 0000
 8001fd2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8001fd6:	81bb      	strh	r3, [r7, #12]
	uint8_t pinsP = (uint8_t)electrodes; //1,2
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	72fb      	strb	r3, [r7, #11]
	uint8_t pinsN = pinsP < 15 ? pinsP + 1 : 0;
 8001fdc:	7afb      	ldrb	r3, [r7, #11]
 8001fde:	2b0e      	cmp	r3, #14
 8001fe0:	d803      	bhi.n	8001fea <updateCurrent+0x26>
 8001fe2:	7afb      	ldrb	r3, [r7, #11]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	e000      	b.n	8001fec <updateCurrent+0x28>
 8001fea:	2300      	movs	r3, #0
 8001fec:	72bb      	strb	r3, [r7, #10]
	WriteBits(GPIOE, maskP, pinsP);
 8001fee:	7afa      	ldrb	r2, [r7, #11]
 8001ff0:	89fb      	ldrh	r3, [r7, #14]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4806      	ldr	r0, [pc, #24]	@ (8002010 <updateCurrent+0x4c>)
 8001ff6:	f7ff ffc0 	bl	8001f7a <WriteBits>
	WriteBits(GPIOE, maskN, pinsN);
 8001ffa:	7aba      	ldrb	r2, [r7, #10]
 8001ffc:	89bb      	ldrh	r3, [r7, #12]
 8001ffe:	4619      	mov	r1, r3
 8002000:	4803      	ldr	r0, [pc, #12]	@ (8002010 <updateCurrent+0x4c>)
 8002002:	f7ff ffba 	bl	8001f7a <WriteBits>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	48001000 	.word	0x48001000

08002014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002018:	b672      	cpsid	i
}
 800201a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <Error_Handler+0x8>

08002020 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002024:	4b1b      	ldr	r3, [pc, #108]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002026:	4a1c      	ldr	r2, [pc, #112]	@ (8002098 <MX_SPI1_Init+0x78>)
 8002028:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800202a:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <MX_SPI1_Init+0x74>)
 800202c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002030:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002032:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002038:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <MX_SPI1_Init+0x74>)
 800203a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800203e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002040:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002046:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002048:	2200      	movs	r2, #0
 800204a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <MX_SPI1_Init+0x74>)
 800204e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002052:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002054:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800205a:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <MX_SPI1_Init+0x74>)
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002060:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002062:	2200      	movs	r2, #0
 8002064:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002066:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002068:	2200      	movs	r2, #0
 800206a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800206c:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <MX_SPI1_Init+0x74>)
 800206e:	2207      	movs	r2, #7
 8002070:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002072:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <MX_SPI1_Init+0x74>)
 800207a:	2208      	movs	r2, #8
 800207c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002080:	f004 ff2c 	bl	8006edc <HAL_SPI_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800208a:	f7ff ffc3 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000638 	.word	0x20000638
 8002098:	40013000 	.word	0x40013000

0800209c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	@ 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a25      	ldr	r2, [pc, #148]	@ (8002150 <HAL_SPI_MspInit+0xb4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d144      	bne.n	8002148 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020be:	4b25      	ldr	r3, [pc, #148]	@ (8002154 <HAL_SPI_MspInit+0xb8>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c2:	4a24      	ldr	r2, [pc, #144]	@ (8002154 <HAL_SPI_MspInit+0xb8>)
 80020c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ca:	4b22      	ldr	r3, [pc, #136]	@ (8002154 <HAL_SPI_MspInit+0xb8>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002154 <HAL_SPI_MspInit+0xb8>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	4a1e      	ldr	r2, [pc, #120]	@ (8002154 <HAL_SPI_MspInit+0xb8>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002154 <HAL_SPI_MspInit+0xb8>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	4b19      	ldr	r3, [pc, #100]	@ (8002154 <HAL_SPI_MspInit+0xb8>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	4a18      	ldr	r2, [pc, #96]	@ (8002154 <HAL_SPI_MspInit+0xb8>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020fa:	4b16      	ldr	r3, [pc, #88]	@ (8002154 <HAL_SPI_MspInit+0xb8>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002106:	2320      	movs	r3, #32
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002116:	2305      	movs	r3, #5
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002124:	f001 ffce 	bl	80040c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002128:	2330      	movs	r3, #48	@ 0x30
 800212a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002138:	2305      	movs	r3, #5
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	4619      	mov	r1, r3
 8002142:	4805      	ldr	r0, [pc, #20]	@ (8002158 <HAL_SPI_MspInit+0xbc>)
 8002144:	f001 ffbe 	bl	80040c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002148:	bf00      	nop
 800214a:	3728      	adds	r7, #40	@ 0x28
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40013000 	.word	0x40013000
 8002154:	40021000 	.word	0x40021000
 8002158:	48000400 	.word	0x48000400

0800215c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	4b0f      	ldr	r3, [pc, #60]	@ (80021a0 <HAL_MspInit+0x44>)
 8002164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002166:	4a0e      	ldr	r2, [pc, #56]	@ (80021a0 <HAL_MspInit+0x44>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6613      	str	r3, [r2, #96]	@ 0x60
 800216e:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <HAL_MspInit+0x44>)
 8002170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b09      	ldr	r3, [pc, #36]	@ (80021a0 <HAL_MspInit+0x44>)
 800217c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217e:	4a08      	ldr	r2, [pc, #32]	@ (80021a0 <HAL_MspInit+0x44>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002184:	6593      	str	r3, [r2, #88]	@ 0x58
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_MspInit+0x44>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002192:	f003 ff09 	bl	8005fa8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000

080021a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021a8:	bf00      	nop
 80021aa:	e7fd      	b.n	80021a8 <NMI_Handler+0x4>

080021ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <HardFault_Handler+0x4>

080021b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <MemManage_Handler+0x4>

080021bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <BusFault_Handler+0x4>

080021c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <UsageFault_Handler+0x4>

080021cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021fa:	f000 f9fd 	bl	80025f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002208:	4802      	ldr	r0, [pc, #8]	@ (8002214 <USB_LP_IRQHandler+0x10>)
 800220a:	f002 f9e5 	bl	80045d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20001c10 	.word	0x20001c10

08002218 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800221c:	4802      	ldr	r0, [pc, #8]	@ (8002228 <TIM2_IRQHandler+0x10>)
 800221e:	f005 f941 	bl	80074a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200006ec 	.word	0x200006ec

0800222c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002234:	4a14      	ldr	r2, [pc, #80]	@ (8002288 <_sbrk+0x5c>)
 8002236:	4b15      	ldr	r3, [pc, #84]	@ (800228c <_sbrk+0x60>)
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002240:	4b13      	ldr	r3, [pc, #76]	@ (8002290 <_sbrk+0x64>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002248:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <_sbrk+0x64>)
 800224a:	4a12      	ldr	r2, [pc, #72]	@ (8002294 <_sbrk+0x68>)
 800224c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800224e:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <_sbrk+0x64>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	429a      	cmp	r2, r3
 800225a:	d207      	bcs.n	800226c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800225c:	f00c f8e2 	bl	800e424 <__errno>
 8002260:	4603      	mov	r3, r0
 8002262:	220c      	movs	r2, #12
 8002264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	e009      	b.n	8002280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800226c:	4b08      	ldr	r3, [pc, #32]	@ (8002290 <_sbrk+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002272:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <_sbrk+0x64>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	4a05      	ldr	r2, [pc, #20]	@ (8002290 <_sbrk+0x64>)
 800227c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800227e:	68fb      	ldr	r3, [r7, #12]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20020000 	.word	0x20020000
 800228c:	00000400 	.word	0x00000400
 8002290:	2000069c 	.word	0x2000069c
 8002294:	20002258 	.word	0x20002258

08002298 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800229c:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <SystemInit+0x20>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	4a05      	ldr	r2, [pc, #20]	@ (80022b8 <SystemInit+0x20>)
 80022a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b098      	sub	sp, #96	@ 0x60
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
 80022dc:	611a      	str	r2, [r3, #16]
 80022de:	615a      	str	r2, [r3, #20]
 80022e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	2234      	movs	r2, #52	@ 0x34
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f00c f883 	bl	800e3f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022ee:	4b39      	ldr	r3, [pc, #228]	@ (80023d4 <MX_TIM1_Init+0x118>)
 80022f0:	4a39      	ldr	r2, [pc, #228]	@ (80023d8 <MX_TIM1_Init+0x11c>)
 80022f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80022f4:	4b37      	ldr	r3, [pc, #220]	@ (80023d4 <MX_TIM1_Init+0x118>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fa:	4b36      	ldr	r3, [pc, #216]	@ (80023d4 <MX_TIM1_Init+0x118>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9600;
 8002300:	4b34      	ldr	r3, [pc, #208]	@ (80023d4 <MX_TIM1_Init+0x118>)
 8002302:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002306:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002308:	4b32      	ldr	r3, [pc, #200]	@ (80023d4 <MX_TIM1_Init+0x118>)
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800230e:	4b31      	ldr	r3, [pc, #196]	@ (80023d4 <MX_TIM1_Init+0x118>)
 8002310:	2200      	movs	r2, #0
 8002312:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002314:	4b2f      	ldr	r3, [pc, #188]	@ (80023d4 <MX_TIM1_Init+0x118>)
 8002316:	2200      	movs	r2, #0
 8002318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800231a:	482e      	ldr	r0, [pc, #184]	@ (80023d4 <MX_TIM1_Init+0x118>)
 800231c:	f004 ff58 	bl	80071d0 <HAL_TIM_PWM_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002326:	f7ff fe75 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002336:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800233a:	4619      	mov	r1, r3
 800233c:	4825      	ldr	r0, [pc, #148]	@ (80023d4 <MX_TIM1_Init+0x118>)
 800233e:	f006 f8f3 	bl	8008528 <HAL_TIMEx_MasterConfigSynchronization>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002348:	f7ff fe64 	bl	8002014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800234c:	2360      	movs	r3, #96	@ 0x60
 800234e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002354:	2300      	movs	r3, #0
 8002356:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002358:	2300      	movs	r3, #0
 800235a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002360:	2300      	movs	r3, #0
 8002362:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002364:	2300      	movs	r3, #0
 8002366:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002368:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800236c:	2200      	movs	r2, #0
 800236e:	4619      	mov	r1, r3
 8002370:	4818      	ldr	r0, [pc, #96]	@ (80023d4 <MX_TIM1_Init+0x118>)
 8002372:	f005 f9e7 	bl	8007744 <HAL_TIM_PWM_ConfigChannel>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800237c:	f7ff fe4a 	bl	8002014 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002394:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002398:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80023b0:	2300      	movs	r3, #0
 80023b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	4619      	mov	r1, r3
 80023bc:	4805      	ldr	r0, [pc, #20]	@ (80023d4 <MX_TIM1_Init+0x118>)
 80023be:	f006 f949 	bl	8008654 <HAL_TIMEx_ConfigBreakDeadTime>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80023c8:	f7ff fe24 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023cc:	bf00      	nop
 80023ce:	3760      	adds	r7, #96	@ 0x60
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	200006a0 	.word	0x200006a0
 80023d8:	40012c00 	.word	0x40012c00

080023dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e2:	f107 0310 	add.w	r3, r7, #16
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002470 <MX_TIM2_Init+0x94>)
 80023fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002400:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96;
 8002402:	4b1b      	ldr	r3, [pc, #108]	@ (8002470 <MX_TIM2_Init+0x94>)
 8002404:	2260      	movs	r2, #96	@ 0x60
 8002406:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002408:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <MX_TIM2_Init+0x94>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 800240e:	4b18      	ldr	r3, [pc, #96]	@ (8002470 <MX_TIM2_Init+0x94>)
 8002410:	4a18      	ldr	r2, [pc, #96]	@ (8002474 <MX_TIM2_Init+0x98>)
 8002412:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002414:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <MX_TIM2_Init+0x94>)
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241a:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <MX_TIM2_Init+0x94>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002420:	4813      	ldr	r0, [pc, #76]	@ (8002470 <MX_TIM2_Init+0x94>)
 8002422:	f004 fe06 	bl	8007032 <HAL_TIM_Base_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800242c:	f7ff fdf2 	bl	8002014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002430:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002434:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002436:	f107 0310 	add.w	r3, r7, #16
 800243a:	4619      	mov	r1, r3
 800243c:	480c      	ldr	r0, [pc, #48]	@ (8002470 <MX_TIM2_Init+0x94>)
 800243e:	f005 fa95 	bl	800796c <HAL_TIM_ConfigClockSource>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002448:	f7ff fde4 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800244c:	2300      	movs	r3, #0
 800244e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	4619      	mov	r1, r3
 8002458:	4805      	ldr	r0, [pc, #20]	@ (8002470 <MX_TIM2_Init+0x94>)
 800245a:	f006 f865 	bl	8008528 <HAL_TIMEx_MasterConfigSynchronization>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002464:	f7ff fdd6 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002468:	bf00      	nop
 800246a:	3720      	adds	r7, #32
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	200006ec 	.word	0x200006ec
 8002474:	000186a0 	.word	0x000186a0

08002478 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0a      	ldr	r2, [pc, #40]	@ (80024b0 <HAL_TIM_PWM_MspInit+0x38>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10b      	bne.n	80024a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800248a:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <HAL_TIM_PWM_MspInit+0x3c>)
 800248c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800248e:	4a09      	ldr	r2, [pc, #36]	@ (80024b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002490:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002494:	6613      	str	r3, [r2, #96]	@ 0x60
 8002496:	4b07      	ldr	r3, [pc, #28]	@ (80024b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800249a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	40021000 	.word	0x40021000

080024b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c8:	d113      	bne.n	80024f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ca:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <HAL_TIM_Base_MspInit+0x44>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	4a0b      	ldr	r2, [pc, #44]	@ (80024fc <HAL_TIM_Base_MspInit+0x44>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80024d6:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <HAL_TIM_Base_MspInit+0x44>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2100      	movs	r1, #0
 80024e6:	201c      	movs	r0, #28
 80024e8:	f001 fdb7 	bl	800405a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024ec:	201c      	movs	r0, #28
 80024ee:	f001 fdce 	bl	800408e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000

08002500 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002500:	480d      	ldr	r0, [pc, #52]	@ (8002538 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002502:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002504:	f7ff fec8 	bl	8002298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002508:	480c      	ldr	r0, [pc, #48]	@ (800253c <LoopForever+0x6>)
  ldr r1, =_edata
 800250a:	490d      	ldr	r1, [pc, #52]	@ (8002540 <LoopForever+0xa>)
  ldr r2, =_sidata
 800250c:	4a0d      	ldr	r2, [pc, #52]	@ (8002544 <LoopForever+0xe>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002510:	e002      	b.n	8002518 <LoopCopyDataInit>

08002512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002516:	3304      	adds	r3, #4

08002518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800251a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800251c:	d3f9      	bcc.n	8002512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251e:	4a0a      	ldr	r2, [pc, #40]	@ (8002548 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002520:	4c0a      	ldr	r4, [pc, #40]	@ (800254c <LoopForever+0x16>)
  movs r3, #0
 8002522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002524:	e001      	b.n	800252a <LoopFillZerobss>

08002526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002528:	3204      	adds	r2, #4

0800252a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800252a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800252c:	d3fb      	bcc.n	8002526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800252e:	f00b ff7f 	bl	800e430 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002532:	f7ff f9d1 	bl	80018d8 <main>

08002536 <LoopForever>:

LoopForever:
    b LoopForever
 8002536:	e7fe      	b.n	8002536 <LoopForever>
  ldr   r0, =_estack
 8002538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800253c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002540:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002544:	0800ee34 	.word	0x0800ee34
  ldr r2, =_sbss
 8002548:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800254c:	20002254 	.word	0x20002254

08002550 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002550:	e7fe      	b.n	8002550 <ADC1_2_IRQHandler>

08002552 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800255c:	2003      	movs	r0, #3
 800255e:	f001 fd71 	bl	8004044 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002562:	200f      	movs	r0, #15
 8002564:	f000 f80e 	bl	8002584 <HAL_InitTick>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	71fb      	strb	r3, [r7, #7]
 8002572:	e001      	b.n	8002578 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002574:	f7ff fdf2 	bl	800215c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002578:	79fb      	ldrb	r3, [r7, #7]

}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002590:	4b16      	ldr	r3, [pc, #88]	@ (80025ec <HAL_InitTick+0x68>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d022      	beq.n	80025de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002598:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <HAL_InitTick+0x6c>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b13      	ldr	r3, [pc, #76]	@ (80025ec <HAL_InitTick+0x68>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80025a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ac:	4618      	mov	r0, r3
 80025ae:	f001 fd7c 	bl	80040aa <HAL_SYSTICK_Config>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10f      	bne.n	80025d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b0f      	cmp	r3, #15
 80025bc:	d809      	bhi.n	80025d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025be:	2200      	movs	r2, #0
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	f04f 30ff 	mov.w	r0, #4294967295
 80025c6:	f001 fd48 	bl	800405a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025ca:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <HAL_InitTick+0x70>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	e007      	b.n	80025e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
 80025d6:	e004      	b.n	80025e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	e001      	b.n	80025e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000008 	.word	0x20000008
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000004 	.word	0x20000004

080025f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025fc:	4b05      	ldr	r3, [pc, #20]	@ (8002614 <HAL_IncTick+0x1c>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b05      	ldr	r3, [pc, #20]	@ (8002618 <HAL_IncTick+0x20>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4413      	add	r3, r2
 8002606:	4a03      	ldr	r2, [pc, #12]	@ (8002614 <HAL_IncTick+0x1c>)
 8002608:	6013      	str	r3, [r2, #0]
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	20000738 	.word	0x20000738
 8002618:	20000008 	.word	0x20000008

0800261c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return uwTick;
 8002620:	4b03      	ldr	r3, [pc, #12]	@ (8002630 <HAL_GetTick+0x14>)
 8002622:	681b      	ldr	r3, [r3, #0]
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20000738 	.word	0x20000738

08002634 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	609a      	str	r2, [r3, #8]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3360      	adds	r3, #96	@ 0x60
 80026ae:	461a      	mov	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b08      	ldr	r3, [pc, #32]	@ (80026e0 <LL_ADC_SetOffset+0x44>)
 80026be:	4013      	ands	r3, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80026d4:	bf00      	nop
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	03fff000 	.word	0x03fff000

080026e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3360      	adds	r3, #96	@ 0x60
 80026f2:	461a      	mov	r2, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3360      	adds	r3, #96	@ 0x60
 8002720:	461a      	mov	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	431a      	orrs	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002746:	b480      	push	{r7}
 8002748:	b087      	sub	sp, #28
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3360      	adds	r3, #96	@ 0x60
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	431a      	orrs	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002770:	bf00      	nop
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3360      	adds	r3, #96	@ 0x60
 800278c:	461a      	mov	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	615a      	str	r2, [r3, #20]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	3330      	adds	r3, #48	@ 0x30
 80027e8:	461a      	mov	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	4413      	add	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	211f      	movs	r1, #31
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	401a      	ands	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	0e9b      	lsrs	r3, r3, #26
 8002810:	f003 011f 	and.w	r1, r3, #31
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	431a      	orrs	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002824:	bf00      	nop
 8002826:	371c      	adds	r7, #28
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3314      	adds	r3, #20
 8002840:	461a      	mov	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	0e5b      	lsrs	r3, r3, #25
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	4413      	add	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	0d1b      	lsrs	r3, r3, #20
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	2107      	movs	r1, #7
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	401a      	ands	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	0d1b      	lsrs	r3, r3, #20
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	fa01 f303 	lsl.w	r3, r1, r3
 8002874:	431a      	orrs	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800287a:	bf00      	nop
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a0:	43db      	mvns	r3, r3
 80028a2:	401a      	ands	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f003 0318 	and.w	r3, r3, #24
 80028aa:	4908      	ldr	r1, [pc, #32]	@ (80028cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80028ac:	40d9      	lsrs	r1, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	400b      	ands	r3, r1
 80028b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b6:	431a      	orrs	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	0007ffff 	.word	0x0007ffff

080028d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 031f 	and.w	r3, r3, #31
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80028fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6093      	str	r3, [r2, #8]
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002920:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002924:	d101      	bne.n	800292a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002948:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800294c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002970:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002974:	d101      	bne.n	800297a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002998:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800299c:	f043 0201 	orr.w	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029c4:	f043 0202 	orr.w	r2, r3, #2
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <LL_ADC_IsEnabled+0x18>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <LL_ADC_IsEnabled+0x1a>
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d101      	bne.n	8002a16 <LL_ADC_IsDisableOngoing+0x18>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <LL_ADC_IsDisableOngoing+0x1a>
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a38:	f043 0204 	orr.w	r2, r3, #4
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d101      	bne.n	8002a64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d101      	bne.n	8002a8a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a98:	b590      	push	{r4, r7, lr}
 8002a9a:	b089      	sub	sp, #36	@ 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e1a9      	b.n	8002e06 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7fe fc47 	bl	8001354 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff19 	bl	8002910 <LL_ADC_IsDeepPowerDownEnabled>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d004      	beq.n	8002aee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff feff 	bl	80028ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff34 	bl	8002960 <LL_ADC_IsInternalRegulatorEnabled>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d115      	bne.n	8002b2a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ff18 	bl	8002938 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b08:	4b9c      	ldr	r3, [pc, #624]	@ (8002d7c <HAL_ADC_Init+0x2e4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	099b      	lsrs	r3, r3, #6
 8002b0e:	4a9c      	ldr	r2, [pc, #624]	@ (8002d80 <HAL_ADC_Init+0x2e8>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	3301      	adds	r3, #1
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b1c:	e002      	b.n	8002b24 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f9      	bne.n	8002b1e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ff16 	bl	8002960 <LL_ADC_IsInternalRegulatorEnabled>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10d      	bne.n	8002b56 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3e:	f043 0210 	orr.w	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff ff76 	bl	8002a4c <LL_ADC_REG_IsConversionOngoing>
 8002b60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f040 8142 	bne.w	8002df4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f040 813e 	bne.w	8002df4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002b80:	f043 0202 	orr.w	r2, r3, #2
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff23 	bl	80029d8 <LL_ADC_IsEnabled>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d141      	bne.n	8002c1c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ba0:	d004      	beq.n	8002bac <HAL_ADC_Init+0x114>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a77      	ldr	r2, [pc, #476]	@ (8002d84 <HAL_ADC_Init+0x2ec>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d10f      	bne.n	8002bcc <HAL_ADC_Init+0x134>
 8002bac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002bb0:	f7ff ff12 	bl	80029d8 <LL_ADC_IsEnabled>
 8002bb4:	4604      	mov	r4, r0
 8002bb6:	4873      	ldr	r0, [pc, #460]	@ (8002d84 <HAL_ADC_Init+0x2ec>)
 8002bb8:	f7ff ff0e 	bl	80029d8 <LL_ADC_IsEnabled>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	4323      	orrs	r3, r4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	bf0c      	ite	eq
 8002bc4:	2301      	moveq	r3, #1
 8002bc6:	2300      	movne	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	e012      	b.n	8002bf2 <HAL_ADC_Init+0x15a>
 8002bcc:	486e      	ldr	r0, [pc, #440]	@ (8002d88 <HAL_ADC_Init+0x2f0>)
 8002bce:	f7ff ff03 	bl	80029d8 <LL_ADC_IsEnabled>
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	486d      	ldr	r0, [pc, #436]	@ (8002d8c <HAL_ADC_Init+0x2f4>)
 8002bd6:	f7ff feff 	bl	80029d8 <LL_ADC_IsEnabled>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	431c      	orrs	r4, r3
 8002bde:	486c      	ldr	r0, [pc, #432]	@ (8002d90 <HAL_ADC_Init+0x2f8>)
 8002be0:	f7ff fefa 	bl	80029d8 <LL_ADC_IsEnabled>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4323      	orrs	r3, r4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	bf0c      	ite	eq
 8002bec:	2301      	moveq	r3, #1
 8002bee:	2300      	movne	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d012      	beq.n	8002c1c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bfe:	d004      	beq.n	8002c0a <HAL_ADC_Init+0x172>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a5f      	ldr	r2, [pc, #380]	@ (8002d84 <HAL_ADC_Init+0x2ec>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_ADC_Init+0x176>
 8002c0a:	4a62      	ldr	r2, [pc, #392]	@ (8002d94 <HAL_ADC_Init+0x2fc>)
 8002c0c:	e000      	b.n	8002c10 <HAL_ADC_Init+0x178>
 8002c0e:	4a62      	ldr	r2, [pc, #392]	@ (8002d98 <HAL_ADC_Init+0x300>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4619      	mov	r1, r3
 8002c16:	4610      	mov	r0, r2
 8002c18:	f7ff fd0c 	bl	8002634 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7f5b      	ldrb	r3, [r3, #29]
 8002c20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002c32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d106      	bne.n	8002c58 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	045b      	lsls	r3, r3, #17
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d009      	beq.n	8002c74 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	4b48      	ldr	r3, [pc, #288]	@ (8002d9c <HAL_ADC_Init+0x304>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	69b9      	ldr	r1, [r7, #24]
 8002c84:	430b      	orrs	r3, r1
 8002c86:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fee5 	bl	8002a72 <LL_ADC_INJ_IsConversionOngoing>
 8002ca8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d17f      	bne.n	8002db0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d17c      	bne.n	8002db0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002cc2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cd2:	f023 0302 	bic.w	r3, r3, #2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	69b9      	ldr	r1, [r7, #24]
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d017      	beq.n	8002d18 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002cf6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002d00:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6911      	ldr	r1, [r2, #16]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	430b      	orrs	r3, r1
 8002d12:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002d16:	e013      	b.n	8002d40 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002d26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d3c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d12a      	bne.n	8002da0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002d54:	f023 0304 	bic.w	r3, r3, #4
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d60:	4311      	orrs	r1, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d66:	4311      	orrs	r1, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	611a      	str	r2, [r3, #16]
 8002d7a:	e019      	b.n	8002db0 <HAL_ADC_Init+0x318>
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	053e2d63 	.word	0x053e2d63
 8002d84:	50000100 	.word	0x50000100
 8002d88:	50000400 	.word	0x50000400
 8002d8c:	50000500 	.word	0x50000500
 8002d90:	50000600 	.word	0x50000600
 8002d94:	50000300 	.word	0x50000300
 8002d98:	50000700 	.word	0x50000700
 8002d9c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691a      	ldr	r2, [r3, #16]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0201 	bic.w	r2, r2, #1
 8002dae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d10c      	bne.n	8002dd2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	f023 010f 	bic.w	r1, r3, #15
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	1e5a      	subs	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dd0:	e007      	b.n	8002de2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 020f 	bic.w	r2, r2, #15
 8002de0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de6:	f023 0303 	bic.w	r3, r3, #3
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002df2:	e007      	b.n	8002e04 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df8:	f043 0210 	orr.w	r2, r3, #16
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e04:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3724      	adds	r7, #36	@ 0x24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd90      	pop	{r4, r7, pc}
 8002e0e:	bf00      	nop

08002e10 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e20:	d004      	beq.n	8002e2c <HAL_ADC_Start_IT+0x1c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a92      	ldr	r2, [pc, #584]	@ (8003070 <HAL_ADC_Start_IT+0x260>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_Start_IT+0x20>
 8002e2c:	4b91      	ldr	r3, [pc, #580]	@ (8003074 <HAL_ADC_Start_IT+0x264>)
 8002e2e:	e000      	b.n	8002e32 <HAL_ADC_Start_IT+0x22>
 8002e30:	4b91      	ldr	r3, [pc, #580]	@ (8003078 <HAL_ADC_Start_IT+0x268>)
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fd4c 	bl	80028d0 <LL_ADC_GetMultimode>
 8002e38:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fe04 	bl	8002a4c <LL_ADC_REG_IsConversionOngoing>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f040 8132 	bne.w	80030b0 <HAL_ADC_Start_IT+0x2a0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_Start_IT+0x4a>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e12d      	b.n	80030b6 <HAL_ADC_Start_IT+0x2a6>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fd6c 	bl	8003940 <ADC_Enable>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f040 8119 	bne.w	80030a6 <HAL_ADC_Start_IT+0x296>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a78      	ldr	r2, [pc, #480]	@ (8003070 <HAL_ADC_Start_IT+0x260>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d009      	beq.n	8002ea6 <HAL_ADC_Start_IT+0x96>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a79      	ldr	r2, [pc, #484]	@ (800307c <HAL_ADC_Start_IT+0x26c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d002      	beq.n	8002ea2 <HAL_ADC_Start_IT+0x92>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	e003      	b.n	8002eaa <HAL_ADC_Start_IT+0x9a>
 8002ea2:	4b77      	ldr	r3, [pc, #476]	@ (8003080 <HAL_ADC_Start_IT+0x270>)
 8002ea4:	e001      	b.n	8002eaa <HAL_ADC_Start_IT+0x9a>
 8002ea6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d002      	beq.n	8002eb8 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d105      	bne.n	8002ec4 <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ebc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d006      	beq.n	8002ede <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed4:	f023 0206 	bic.w	r2, r3, #6
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	661a      	str	r2, [r3, #96]	@ 0x60
 8002edc:	e002      	b.n	8002ee4 <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	221c      	movs	r2, #28
 8002eea:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 021c 	bic.w	r2, r2, #28
 8002f02:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d108      	bne.n	8002f1e <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0208 	orr.w	r2, r2, #8
 8002f1a:	605a      	str	r2, [r3, #4]
          break;
 8002f1c:	e008      	b.n	8002f30 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0204 	orr.w	r2, r2, #4
 8002f2c:	605a      	str	r2, [r3, #4]
          break;
 8002f2e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d107      	bne.n	8002f48 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0210 	orr.w	r2, r2, #16
 8002f46:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a48      	ldr	r2, [pc, #288]	@ (8003070 <HAL_ADC_Start_IT+0x260>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d009      	beq.n	8002f66 <HAL_ADC_Start_IT+0x156>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a49      	ldr	r2, [pc, #292]	@ (800307c <HAL_ADC_Start_IT+0x26c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d002      	beq.n	8002f62 <HAL_ADC_Start_IT+0x152>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	e003      	b.n	8002f6a <HAL_ADC_Start_IT+0x15a>
 8002f62:	4b47      	ldr	r3, [pc, #284]	@ (8003080 <HAL_ADC_Start_IT+0x270>)
 8002f64:	e001      	b.n	8002f6a <HAL_ADC_Start_IT+0x15a>
 8002f66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d008      	beq.n	8002f84 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	2b05      	cmp	r3, #5
 8002f7c:	d002      	beq.n	8002f84 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b09      	cmp	r3, #9
 8002f82:	d13a      	bne.n	8002ffa <HAL_ADC_Start_IT+0x1ea>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d02d      	beq.n	8002fee <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f96:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f9a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d110      	bne.n	8002fcc <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0220 	bic.w	r2, r2, #32
 8002fb8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fc8:	605a      	str	r2, [r3, #4]
              break;
 8002fca:	e010      	b.n	8002fee <HAL_ADC_Start_IT+0x1de>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fda:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0220 	orr.w	r2, r2, #32
 8002fea:	605a      	str	r2, [r3, #4]
              break;
 8002fec:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fd16 	bl	8002a24 <LL_ADC_REG_StartConversion>
 8002ff8:	e05c      	b.n	80030b4 <HAL_ADC_Start_IT+0x2a4>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a19      	ldr	r2, [pc, #100]	@ (8003070 <HAL_ADC_Start_IT+0x260>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d009      	beq.n	8003024 <HAL_ADC_Start_IT+0x214>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a19      	ldr	r2, [pc, #100]	@ (800307c <HAL_ADC_Start_IT+0x26c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d002      	beq.n	8003020 <HAL_ADC_Start_IT+0x210>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	e003      	b.n	8003028 <HAL_ADC_Start_IT+0x218>
 8003020:	4b17      	ldr	r3, [pc, #92]	@ (8003080 <HAL_ADC_Start_IT+0x270>)
 8003022:	e001      	b.n	8003028 <HAL_ADC_Start_IT+0x218>
 8003024:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003028:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d03e      	beq.n	80030b4 <HAL_ADC_Start_IT+0x2a4>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800303e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b08      	cmp	r3, #8
 800304c:	d11a      	bne.n	8003084 <HAL_ADC_Start_IT+0x274>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0220 	bic.w	r2, r2, #32
 800305c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800306c:	605a      	str	r2, [r3, #4]
              break;
 800306e:	e021      	b.n	80030b4 <HAL_ADC_Start_IT+0x2a4>
 8003070:	50000100 	.word	0x50000100
 8003074:	50000300 	.word	0x50000300
 8003078:	50000700 	.word	0x50000700
 800307c:	50000500 	.word	0x50000500
 8003080:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003092:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0220 	orr.w	r2, r2, #32
 80030a2:	605a      	str	r2, [r3, #4]
              break;
 80030a4:	e006      	b.n	80030b4 <HAL_ADC_Start_IT+0x2a4>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80030ae:	e001      	b.n	80030b4 <HAL_ADC_Start_IT+0x2a4>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030b0:	2302      	movs	r3, #2
 80030b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop

080030c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b0b6      	sub	sp, #216	@ 0xd8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d102      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x24>
 80030de:	2302      	movs	r3, #2
 80030e0:	f000 bc13 	b.w	800390a <HAL_ADC_ConfigChannel+0x84a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fcab 	bl	8002a4c <LL_ADC_REG_IsConversionOngoing>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f040 83f3 	bne.w	80038e4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6859      	ldr	r1, [r3, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	f7ff fb64 	bl	80027d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fc99 	bl	8002a4c <LL_ADC_REG_IsConversionOngoing>
 800311a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fca5 	bl	8002a72 <LL_ADC_INJ_IsConversionOngoing>
 8003128:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800312c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 81d9 	bne.w	80034e8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003136:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800313a:	2b00      	cmp	r3, #0
 800313c:	f040 81d4 	bne.w	80034e8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003148:	d10f      	bne.n	800316a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2200      	movs	r2, #0
 8003154:	4619      	mov	r1, r3
 8003156:	f7ff fb6b 	bl	8002830 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fb25 	bl	80027b2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003168:	e00e      	b.n	8003188 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6819      	ldr	r1, [r3, #0]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	461a      	mov	r2, r3
 8003178:	f7ff fb5a 	bl	8002830 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2100      	movs	r1, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fb15 	bl	80027b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	08db      	lsrs	r3, r3, #3
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d022      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6919      	ldr	r1, [r3, #16]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031ba:	f7ff fa6f 	bl	800269c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6919      	ldr	r1, [r3, #16]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	461a      	mov	r2, r3
 80031cc:	f7ff fabb 	bl	8002746 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d102      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x126>
 80031e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031e4:	e000      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x128>
 80031e6:	2300      	movs	r3, #0
 80031e8:	461a      	mov	r2, r3
 80031ea:	f7ff fac7 	bl	800277c <LL_ADC_SetOffsetSaturation>
 80031ee:	e17b      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2100      	movs	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fa74 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10a      	bne.n	800321c <HAL_ADC_ConfigChannel+0x15c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fa69 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	0e9b      	lsrs	r3, r3, #26
 8003216:	f003 021f 	and.w	r2, r3, #31
 800321a:	e01e      	b.n	800325a <HAL_ADC_ConfigChannel+0x19a>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fa5e 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 8003228:	4603      	mov	r3, r0
 800322a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800323a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800323e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003242:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800324a:	2320      	movs	r3, #32
 800324c:	e004      	b.n	8003258 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800324e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003262:	2b00      	cmp	r3, #0
 8003264:	d105      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x1b2>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	0e9b      	lsrs	r3, r3, #26
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	e018      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x1e4>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800328a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800328e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003296:	2320      	movs	r3, #32
 8003298:	e004      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800329a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d106      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2200      	movs	r2, #0
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fa2d 	bl	8002710 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2101      	movs	r1, #1
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fa11 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10a      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x222>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2101      	movs	r1, #1
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fa06 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 80032d8:	4603      	mov	r3, r0
 80032da:	0e9b      	lsrs	r3, r3, #26
 80032dc:	f003 021f 	and.w	r2, r3, #31
 80032e0:	e01e      	b.n	8003320 <HAL_ADC_ConfigChannel+0x260>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2101      	movs	r1, #1
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff f9fb 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003300:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003304:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003308:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003310:	2320      	movs	r3, #32
 8003312:	e004      	b.n	800331e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003314:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003318:	fab3 f383 	clz	r3, r3
 800331c:	b2db      	uxtb	r3, r3
 800331e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003328:	2b00      	cmp	r3, #0
 800332a:	d105      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x278>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0e9b      	lsrs	r3, r3, #26
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	e018      	b.n	800336a <HAL_ADC_ConfigChannel+0x2aa>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800334c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003350:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003354:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800335c:	2320      	movs	r3, #32
 800335e:	e004      	b.n	800336a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003360:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003364:	fab3 f383 	clz	r3, r3
 8003368:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800336a:	429a      	cmp	r2, r3
 800336c:	d106      	bne.n	800337c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2200      	movs	r2, #0
 8003374:	2101      	movs	r1, #1
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff f9ca 	bl	8002710 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2102      	movs	r1, #2
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff f9ae 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 8003388:	4603      	mov	r3, r0
 800338a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x2e8>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2102      	movs	r1, #2
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff f9a3 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 800339e:	4603      	mov	r3, r0
 80033a0:	0e9b      	lsrs	r3, r3, #26
 80033a2:	f003 021f 	and.w	r2, r3, #31
 80033a6:	e01e      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x326>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2102      	movs	r1, #2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff f998 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80033c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80033ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80033d6:	2320      	movs	r3, #32
 80033d8:	e004      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80033da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d105      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x33e>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	0e9b      	lsrs	r3, r3, #26
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	e016      	b.n	800342c <HAL_ADC_ConfigChannel+0x36c>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800340a:	fa93 f3a3 	rbit	r3, r3
 800340e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003410:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003412:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003416:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800341e:	2320      	movs	r3, #32
 8003420:	e004      	b.n	800342c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003422:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800342c:	429a      	cmp	r2, r3
 800342e:	d106      	bne.n	800343e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2200      	movs	r2, #0
 8003436:	2102      	movs	r1, #2
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff f969 	bl	8002710 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2103      	movs	r1, #3
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff f94d 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 800344a:	4603      	mov	r3, r0
 800344c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10a      	bne.n	800346a <HAL_ADC_ConfigChannel+0x3aa>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2103      	movs	r1, #3
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff f942 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 8003460:	4603      	mov	r3, r0
 8003462:	0e9b      	lsrs	r3, r3, #26
 8003464:	f003 021f 	and.w	r2, r3, #31
 8003468:	e017      	b.n	800349a <HAL_ADC_ConfigChannel+0x3da>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2103      	movs	r1, #3
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff f937 	bl	80026e4 <LL_ADC_GetOffsetChannel>
 8003476:	4603      	mov	r3, r0
 8003478:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800347c:	fa93 f3a3 	rbit	r3, r3
 8003480:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003482:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003484:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003486:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800348c:	2320      	movs	r3, #32
 800348e:	e003      	b.n	8003498 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003490:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003492:	fab3 f383 	clz	r3, r3
 8003496:	b2db      	uxtb	r3, r3
 8003498:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d105      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x3f2>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	0e9b      	lsrs	r3, r3, #26
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	e011      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x416>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80034c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80034c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80034ca:	2320      	movs	r3, #32
 80034cc:	e003      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80034ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034d0:	fab3 f383 	clz	r3, r3
 80034d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d106      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2200      	movs	r2, #0
 80034e0:	2103      	movs	r1, #3
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff f914 	bl	8002710 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fa73 	bl	80029d8 <LL_ADC_IsEnabled>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f040 813d 	bne.w	8003774 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6818      	ldr	r0, [r3, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	6819      	ldr	r1, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	461a      	mov	r2, r3
 8003508:	f7ff f9be 	bl	8002888 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4aa2      	ldr	r2, [pc, #648]	@ (800379c <HAL_ADC_ConfigChannel+0x6dc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	f040 812e 	bne.w	8003774 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x480>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	0e9b      	lsrs	r3, r3, #26
 800352e:	3301      	adds	r3, #1
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	2b09      	cmp	r3, #9
 8003536:	bf94      	ite	ls
 8003538:	2301      	movls	r3, #1
 800353a:	2300      	movhi	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	e019      	b.n	8003574 <HAL_ADC_ConfigChannel+0x4b4>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800354e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003550:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003552:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003558:	2320      	movs	r3, #32
 800355a:	e003      	b.n	8003564 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800355c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800355e:	fab3 f383 	clz	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3301      	adds	r3, #1
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2b09      	cmp	r3, #9
 800356c:	bf94      	ite	ls
 800356e:	2301      	movls	r3, #1
 8003570:	2300      	movhi	r3, #0
 8003572:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003574:	2b00      	cmp	r3, #0
 8003576:	d079      	beq.n	800366c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003580:	2b00      	cmp	r3, #0
 8003582:	d107      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x4d4>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	0e9b      	lsrs	r3, r3, #26
 800358a:	3301      	adds	r3, #1
 800358c:	069b      	lsls	r3, r3, #26
 800358e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003592:	e015      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x500>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800359c:	fa93 f3a3 	rbit	r3, r3
 80035a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80035a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80035a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80035ac:	2320      	movs	r3, #32
 80035ae:	e003      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80035b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b2:	fab3 f383 	clz	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	069b      	lsls	r3, r3, #26
 80035bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d109      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x520>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	0e9b      	lsrs	r3, r3, #26
 80035d2:	3301      	adds	r3, #1
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	2101      	movs	r1, #1
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	e017      	b.n	8003610 <HAL_ADC_ConfigChannel+0x550>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80035ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80035f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80035f8:	2320      	movs	r3, #32
 80035fa:	e003      	b.n	8003604 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80035fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	3301      	adds	r3, #1
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2101      	movs	r1, #1
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	ea42 0103 	orr.w	r1, r2, r3
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x576>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	0e9b      	lsrs	r3, r3, #26
 8003626:	3301      	adds	r3, #1
 8003628:	f003 021f 	and.w	r2, r3, #31
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	051b      	lsls	r3, r3, #20
 8003634:	e018      	b.n	8003668 <HAL_ADC_ConfigChannel+0x5a8>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800364e:	2320      	movs	r3, #32
 8003650:	e003      	b.n	800365a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003654:	fab3 f383 	clz	r3, r3
 8003658:	b2db      	uxtb	r3, r3
 800365a:	3301      	adds	r3, #1
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003668:	430b      	orrs	r3, r1
 800366a:	e07e      	b.n	800376a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003674:	2b00      	cmp	r3, #0
 8003676:	d107      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x5c8>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	0e9b      	lsrs	r3, r3, #26
 800367e:	3301      	adds	r3, #1
 8003680:	069b      	lsls	r3, r3, #26
 8003682:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003686:	e015      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x5f4>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003690:	fa93 f3a3 	rbit	r3, r3
 8003694:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003698:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800369a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80036a0:	2320      	movs	r3, #32
 80036a2:	e003      	b.n	80036ac <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80036a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	3301      	adds	r3, #1
 80036ae:	069b      	lsls	r3, r3, #26
 80036b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x614>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	0e9b      	lsrs	r3, r3, #26
 80036c6:	3301      	adds	r3, #1
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	2101      	movs	r1, #1
 80036ce:	fa01 f303 	lsl.w	r3, r1, r3
 80036d2:	e017      	b.n	8003704 <HAL_ADC_ConfigChannel+0x644>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	fa93 f3a3 	rbit	r3, r3
 80036e0:	61fb      	str	r3, [r7, #28]
  return result;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80036ec:	2320      	movs	r3, #32
 80036ee:	e003      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	3301      	adds	r3, #1
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	2101      	movs	r1, #1
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	ea42 0103 	orr.w	r1, r2, r3
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10d      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x670>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	0e9b      	lsrs	r3, r3, #26
 800371a:	3301      	adds	r3, #1
 800371c:	f003 021f 	and.w	r2, r3, #31
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	3b1e      	subs	r3, #30
 8003728:	051b      	lsls	r3, r3, #20
 800372a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800372e:	e01b      	b.n	8003768 <HAL_ADC_ConfigChannel+0x6a8>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	fa93 f3a3 	rbit	r3, r3
 800373c:	613b      	str	r3, [r7, #16]
  return result;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003748:	2320      	movs	r3, #32
 800374a:	e003      	b.n	8003754 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	3301      	adds	r3, #1
 8003756:	f003 021f 	and.w	r2, r3, #31
 800375a:	4613      	mov	r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4413      	add	r3, r2
 8003760:	3b1e      	subs	r3, #30
 8003762:	051b      	lsls	r3, r3, #20
 8003764:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003768:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800376e:	4619      	mov	r1, r3
 8003770:	f7ff f85e 	bl	8002830 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <HAL_ADC_ConfigChannel+0x6e0>)
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80be 	beq.w	80038fe <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800378a:	d004      	beq.n	8003796 <HAL_ADC_ConfigChannel+0x6d6>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a04      	ldr	r2, [pc, #16]	@ (80037a4 <HAL_ADC_ConfigChannel+0x6e4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d10a      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x6ec>
 8003796:	4b04      	ldr	r3, [pc, #16]	@ (80037a8 <HAL_ADC_ConfigChannel+0x6e8>)
 8003798:	e009      	b.n	80037ae <HAL_ADC_ConfigChannel+0x6ee>
 800379a:	bf00      	nop
 800379c:	407f0000 	.word	0x407f0000
 80037a0:	80080000 	.word	0x80080000
 80037a4:	50000100 	.word	0x50000100
 80037a8:	50000300 	.word	0x50000300
 80037ac:	4b59      	ldr	r3, [pc, #356]	@ (8003914 <HAL_ADC_ConfigChannel+0x854>)
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe ff66 	bl	8002680 <LL_ADC_GetCommonPathInternalCh>
 80037b4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a56      	ldr	r2, [pc, #344]	@ (8003918 <HAL_ADC_ConfigChannel+0x858>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_ADC_ConfigChannel+0x70c>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a55      	ldr	r2, [pc, #340]	@ (800391c <HAL_ADC_ConfigChannel+0x85c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d13a      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d134      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037e0:	d005      	beq.n	80037ee <HAL_ADC_ConfigChannel+0x72e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a4e      	ldr	r2, [pc, #312]	@ (8003920 <HAL_ADC_ConfigChannel+0x860>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	f040 8085 	bne.w	80038f8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037f6:	d004      	beq.n	8003802 <HAL_ADC_ConfigChannel+0x742>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a49      	ldr	r2, [pc, #292]	@ (8003924 <HAL_ADC_ConfigChannel+0x864>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d101      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x746>
 8003802:	4a49      	ldr	r2, [pc, #292]	@ (8003928 <HAL_ADC_ConfigChannel+0x868>)
 8003804:	e000      	b.n	8003808 <HAL_ADC_ConfigChannel+0x748>
 8003806:	4a43      	ldr	r2, [pc, #268]	@ (8003914 <HAL_ADC_ConfigChannel+0x854>)
 8003808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800380c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003810:	4619      	mov	r1, r3
 8003812:	4610      	mov	r0, r2
 8003814:	f7fe ff21 	bl	800265a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003818:	4b44      	ldr	r3, [pc, #272]	@ (800392c <HAL_ADC_ConfigChannel+0x86c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	099b      	lsrs	r3, r3, #6
 800381e:	4a44      	ldr	r2, [pc, #272]	@ (8003930 <HAL_ADC_ConfigChannel+0x870>)
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	099b      	lsrs	r3, r3, #6
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	4613      	mov	r3, r2
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003832:	e002      	b.n	800383a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	3b01      	subs	r3, #1
 8003838:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f9      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003840:	e05a      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a3b      	ldr	r2, [pc, #236]	@ (8003934 <HAL_ADC_ConfigChannel+0x874>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d125      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800384c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003850:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d11f      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a31      	ldr	r2, [pc, #196]	@ (8003924 <HAL_ADC_ConfigChannel+0x864>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d104      	bne.n	800386c <HAL_ADC_ConfigChannel+0x7ac>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a34      	ldr	r2, [pc, #208]	@ (8003938 <HAL_ADC_ConfigChannel+0x878>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d047      	beq.n	80038fc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003874:	d004      	beq.n	8003880 <HAL_ADC_ConfigChannel+0x7c0>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a2a      	ldr	r2, [pc, #168]	@ (8003924 <HAL_ADC_ConfigChannel+0x864>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d101      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x7c4>
 8003880:	4a29      	ldr	r2, [pc, #164]	@ (8003928 <HAL_ADC_ConfigChannel+0x868>)
 8003882:	e000      	b.n	8003886 <HAL_ADC_ConfigChannel+0x7c6>
 8003884:	4a23      	ldr	r2, [pc, #140]	@ (8003914 <HAL_ADC_ConfigChannel+0x854>)
 8003886:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800388a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f7fe fee2 	bl	800265a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003896:	e031      	b.n	80038fc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a27      	ldr	r2, [pc, #156]	@ (800393c <HAL_ADC_ConfigChannel+0x87c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d12d      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d127      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003924 <HAL_ADC_ConfigChannel+0x864>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d022      	beq.n	80038fe <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038c0:	d004      	beq.n	80038cc <HAL_ADC_ConfigChannel+0x80c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a17      	ldr	r2, [pc, #92]	@ (8003924 <HAL_ADC_ConfigChannel+0x864>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d101      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x810>
 80038cc:	4a16      	ldr	r2, [pc, #88]	@ (8003928 <HAL_ADC_ConfigChannel+0x868>)
 80038ce:	e000      	b.n	80038d2 <HAL_ADC_ConfigChannel+0x812>
 80038d0:	4a10      	ldr	r2, [pc, #64]	@ (8003914 <HAL_ADC_ConfigChannel+0x854>)
 80038d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038da:	4619      	mov	r1, r3
 80038dc:	4610      	mov	r0, r2
 80038de:	f7fe febc 	bl	800265a <LL_ADC_SetCommonPathInternalCh>
 80038e2:	e00c      	b.n	80038fe <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80038f6:	e002      	b.n	80038fe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038f8:	bf00      	nop
 80038fa:	e000      	b.n	80038fe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003906:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800390a:	4618      	mov	r0, r3
 800390c:	37d8      	adds	r7, #216	@ 0xd8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	50000700 	.word	0x50000700
 8003918:	c3210000 	.word	0xc3210000
 800391c:	90c00010 	.word	0x90c00010
 8003920:	50000600 	.word	0x50000600
 8003924:	50000100 	.word	0x50000100
 8003928:	50000300 	.word	0x50000300
 800392c:	20000000 	.word	0x20000000
 8003930:	053e2d63 	.word	0x053e2d63
 8003934:	c7520000 	.word	0xc7520000
 8003938:	50000500 	.word	0x50000500
 800393c:	cb840000 	.word	0xcb840000

08003940 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003948:	2300      	movs	r3, #0
 800394a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff f841 	bl	80029d8 <LL_ADC_IsEnabled>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d176      	bne.n	8003a4a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	4b3c      	ldr	r3, [pc, #240]	@ (8003a54 <ADC_Enable+0x114>)
 8003964:	4013      	ands	r3, r2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00d      	beq.n	8003986 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396e:	f043 0210 	orr.w	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e062      	b.n	8003a4c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fffc 	bl	8002988 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003998:	d004      	beq.n	80039a4 <ADC_Enable+0x64>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a2e      	ldr	r2, [pc, #184]	@ (8003a58 <ADC_Enable+0x118>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d101      	bne.n	80039a8 <ADC_Enable+0x68>
 80039a4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a5c <ADC_Enable+0x11c>)
 80039a6:	e000      	b.n	80039aa <ADC_Enable+0x6a>
 80039a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003a60 <ADC_Enable+0x120>)
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe fe68 	bl	8002680 <LL_ADC_GetCommonPathInternalCh>
 80039b0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80039b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d013      	beq.n	80039e2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003a64 <ADC_Enable+0x124>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	099b      	lsrs	r3, r3, #6
 80039c0:	4a29      	ldr	r2, [pc, #164]	@ (8003a68 <ADC_Enable+0x128>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	4613      	mov	r3, r2
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039d4:	e002      	b.n	80039dc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	3b01      	subs	r3, #1
 80039da:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f9      	bne.n	80039d6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039e2:	f7fe fe1b 	bl	800261c <HAL_GetTick>
 80039e6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039e8:	e028      	b.n	8003a3c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fff2 	bl	80029d8 <LL_ADC_IsEnabled>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d104      	bne.n	8003a04 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe ffc2 	bl	8002988 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a04:	f7fe fe0a 	bl	800261c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d914      	bls.n	8003a3c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d00d      	beq.n	8003a3c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a24:	f043 0210 	orr.w	r2, r3, #16
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a30:	f043 0201 	orr.w	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e007      	b.n	8003a4c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d1cf      	bne.n	80039ea <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	8000003f 	.word	0x8000003f
 8003a58:	50000100 	.word	0x50000100
 8003a5c:	50000300 	.word	0x50000300
 8003a60:	50000700 	.word	0x50000700
 8003a64:	20000000 	.word	0x20000000
 8003a68:	053e2d63 	.word	0x053e2d63

08003a6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe ffc0 	bl	80029fe <LL_ADC_IsDisableOngoing>
 8003a7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe ffa7 	bl	80029d8 <LL_ADC_IsEnabled>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d047      	beq.n	8003b20 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d144      	bne.n	8003b20 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 030d 	and.w	r3, r3, #13
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d10c      	bne.n	8003abe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fe ff81 	bl	80029b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ab6:	f7fe fdb1 	bl	800261c <HAL_GetTick>
 8003aba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003abc:	e029      	b.n	8003b12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac2:	f043 0210 	orr.w	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ace:	f043 0201 	orr.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e023      	b.n	8003b22 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ada:	f7fe fd9f 	bl	800261c <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d914      	bls.n	8003b12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00d      	beq.n	8003b12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afa:	f043 0210 	orr.w	r2, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b06:	f043 0201 	orr.w	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e007      	b.n	8003b22 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1dc      	bne.n	8003ada <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <LL_ADC_IsEnabled>:
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <LL_ADC_IsEnabled+0x18>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <LL_ADC_IsEnabled+0x1a>
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <LL_ADC_StartCalibration>:
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003b62:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	609a      	str	r2, [r3, #8]
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <LL_ADC_IsCalibrationOnGoing>:
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b96:	d101      	bne.n	8003b9c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <LL_ADC_REG_IsConversionOngoing>:
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d101      	bne.n	8003bc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_ADCEx_Calibration_Start+0x1c>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e04d      	b.n	8003c88 <HAL_ADCEx_Calibration_Start+0xb8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff ff39 	bl	8003a6c <ADC_Disable>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d136      	bne.n	8003c72 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c08:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c0c:	f023 0302 	bic.w	r3, r3, #2
 8003c10:	f043 0202 	orr.w	r2, r3, #2
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6839      	ldr	r1, [r7, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff ff96 	bl	8003b50 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c24:	e014      	b.n	8003c50 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4a18      	ldr	r2, [pc, #96]	@ (8003c90 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d90d      	bls.n	8003c50 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c38:	f023 0312 	bic.w	r3, r3, #18
 8003c3c:	f043 0210 	orr.w	r2, r3, #16
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e01b      	b.n	8003c88 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff ff94 	bl	8003b82 <LL_ADC_IsCalibrationOnGoing>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e2      	bne.n	8003c26 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c64:	f023 0303 	bic.w	r3, r3, #3
 8003c68:	f043 0201 	orr.w	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c70:	e005      	b.n	8003c7e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c76:	f043 0210 	orr.w	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	0004de01 	.word	0x0004de01

08003c94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003c94:	b590      	push	{r4, r7, lr}
 8003c96:	b0a1      	sub	sp, #132	@ 0x84
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e0e7      	b.n	8003e82 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003cba:	2300      	movs	r3, #0
 8003cbc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cca:	d102      	bne.n	8003cd2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ccc:	4b6f      	ldr	r3, [pc, #444]	@ (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	e009      	b.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a6e      	ldr	r2, [pc, #440]	@ (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d102      	bne.n	8003ce2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003cdc:	4b6d      	ldr	r3, [pc, #436]	@ (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003cde:	60bb      	str	r3, [r7, #8]
 8003ce0:	e001      	b.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0be      	b.n	8003e82 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff ff4f 	bl	8003baa <LL_ADC_REG_IsConversionOngoing>
 8003d0c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff ff49 	bl	8003baa <LL_ADC_REG_IsConversionOngoing>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f040 80a0 	bne.w	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003d20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f040 809c 	bne.w	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d30:	d004      	beq.n	8003d3c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a55      	ldr	r2, [pc, #340]	@ (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d101      	bne.n	8003d40 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003d3c:	4b56      	ldr	r3, [pc, #344]	@ (8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003d3e:	e000      	b.n	8003d42 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003d40:	4b56      	ldr	r3, [pc, #344]	@ (8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003d42:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d04b      	beq.n	8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	6859      	ldr	r1, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d5e:	035b      	lsls	r3, r3, #13
 8003d60:	430b      	orrs	r3, r1
 8003d62:	431a      	orrs	r2, r3
 8003d64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d66:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d70:	d004      	beq.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a45      	ldr	r2, [pc, #276]	@ (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d10f      	bne.n	8003d9c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003d7c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d80:	f7ff fed3 	bl	8003b2a <LL_ADC_IsEnabled>
 8003d84:	4604      	mov	r4, r0
 8003d86:	4841      	ldr	r0, [pc, #260]	@ (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d88:	f7ff fecf 	bl	8003b2a <LL_ADC_IsEnabled>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4323      	orrs	r3, r4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e012      	b.n	8003dc2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003d9c:	483c      	ldr	r0, [pc, #240]	@ (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d9e:	f7ff fec4 	bl	8003b2a <LL_ADC_IsEnabled>
 8003da2:	4604      	mov	r4, r0
 8003da4:	483b      	ldr	r0, [pc, #236]	@ (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003da6:	f7ff fec0 	bl	8003b2a <LL_ADC_IsEnabled>
 8003daa:	4603      	mov	r3, r0
 8003dac:	431c      	orrs	r4, r3
 8003dae:	483c      	ldr	r0, [pc, #240]	@ (8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003db0:	f7ff febb 	bl	8003b2a <LL_ADC_IsEnabled>
 8003db4:	4603      	mov	r3, r0
 8003db6:	4323      	orrs	r3, r4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d056      	beq.n	8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003dce:	f023 030f 	bic.w	r3, r3, #15
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	6811      	ldr	r1, [r2, #0]
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	6892      	ldr	r2, [r2, #8]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003de0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003de2:	e047      	b.n	8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003de4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003df8:	d004      	beq.n	8003e04 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a23      	ldr	r2, [pc, #140]	@ (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d10f      	bne.n	8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003e04:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e08:	f7ff fe8f 	bl	8003b2a <LL_ADC_IsEnabled>
 8003e0c:	4604      	mov	r4, r0
 8003e0e:	481f      	ldr	r0, [pc, #124]	@ (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e10:	f7ff fe8b 	bl	8003b2a <LL_ADC_IsEnabled>
 8003e14:	4603      	mov	r3, r0
 8003e16:	4323      	orrs	r3, r4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e012      	b.n	8003e4a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003e24:	481a      	ldr	r0, [pc, #104]	@ (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e26:	f7ff fe80 	bl	8003b2a <LL_ADC_IsEnabled>
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	4819      	ldr	r0, [pc, #100]	@ (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e2e:	f7ff fe7c 	bl	8003b2a <LL_ADC_IsEnabled>
 8003e32:	4603      	mov	r3, r0
 8003e34:	431c      	orrs	r4, r3
 8003e36:	481a      	ldr	r0, [pc, #104]	@ (8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003e38:	f7ff fe77 	bl	8003b2a <LL_ADC_IsEnabled>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	4323      	orrs	r3, r4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d012      	beq.n	8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003e56:	f023 030f 	bic.w	r3, r3, #15
 8003e5a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003e5c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e5e:	e009      	b.n	8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e64:	f043 0220 	orr.w	r2, r3, #32
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003e72:	e000      	b.n	8003e76 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e7e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3784      	adds	r7, #132	@ 0x84
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd90      	pop	{r4, r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	50000100 	.word	0x50000100
 8003e90:	50000400 	.word	0x50000400
 8003e94:	50000500 	.word	0x50000500
 8003e98:	50000300 	.word	0x50000300
 8003e9c:	50000700 	.word	0x50000700
 8003ea0:	50000600 	.word	0x50000600

08003ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ecc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ed6:	4a04      	ldr	r2, [pc, #16]	@ (8003ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	60d3      	str	r3, [r2, #12]
}
 8003edc:	bf00      	nop
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ef0:	4b04      	ldr	r3, [pc, #16]	@ (8003f04 <__NVIC_GetPriorityGrouping+0x18>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	f003 0307 	and.w	r3, r3, #7
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	e000ed00 	.word	0xe000ed00

08003f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	db0b      	blt.n	8003f32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	f003 021f 	and.w	r2, r3, #31
 8003f20:	4907      	ldr	r1, [pc, #28]	@ (8003f40 <__NVIC_EnableIRQ+0x38>)
 8003f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	2001      	movs	r0, #1
 8003f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	e000e100 	.word	0xe000e100

08003f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	6039      	str	r1, [r7, #0]
 8003f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	db0a      	blt.n	8003f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	490c      	ldr	r1, [pc, #48]	@ (8003f90 <__NVIC_SetPriority+0x4c>)
 8003f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f62:	0112      	lsls	r2, r2, #4
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	440b      	add	r3, r1
 8003f68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f6c:	e00a      	b.n	8003f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	4908      	ldr	r1, [pc, #32]	@ (8003f94 <__NVIC_SetPriority+0x50>)
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	3b04      	subs	r3, #4
 8003f7c:	0112      	lsls	r2, r2, #4
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	440b      	add	r3, r1
 8003f82:	761a      	strb	r2, [r3, #24]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	e000e100 	.word	0xe000e100
 8003f94:	e000ed00 	.word	0xe000ed00

08003f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b089      	sub	sp, #36	@ 0x24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f1c3 0307 	rsb	r3, r3, #7
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	bf28      	it	cs
 8003fb6:	2304      	movcs	r3, #4
 8003fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	2b06      	cmp	r3, #6
 8003fc0:	d902      	bls.n	8003fc8 <NVIC_EncodePriority+0x30>
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	3b03      	subs	r3, #3
 8003fc6:	e000      	b.n	8003fca <NVIC_EncodePriority+0x32>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	401a      	ands	r2, r3
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	43d9      	mvns	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff0:	4313      	orrs	r3, r2
         );
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3724      	adds	r7, #36	@ 0x24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3b01      	subs	r3, #1
 800400c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004010:	d301      	bcc.n	8004016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004012:	2301      	movs	r3, #1
 8004014:	e00f      	b.n	8004036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004016:	4a0a      	ldr	r2, [pc, #40]	@ (8004040 <SysTick_Config+0x40>)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3b01      	subs	r3, #1
 800401c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800401e:	210f      	movs	r1, #15
 8004020:	f04f 30ff 	mov.w	r0, #4294967295
 8004024:	f7ff ff8e 	bl	8003f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004028:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <SysTick_Config+0x40>)
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800402e:	4b04      	ldr	r3, [pc, #16]	@ (8004040 <SysTick_Config+0x40>)
 8004030:	2207      	movs	r2, #7
 8004032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	e000e010 	.word	0xe000e010

08004044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ff29 	bl	8003ea4 <__NVIC_SetPriorityGrouping>
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b086      	sub	sp, #24
 800405e:	af00      	add	r7, sp, #0
 8004060:	4603      	mov	r3, r0
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004068:	f7ff ff40 	bl	8003eec <__NVIC_GetPriorityGrouping>
 800406c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	6978      	ldr	r0, [r7, #20]
 8004074:	f7ff ff90 	bl	8003f98 <NVIC_EncodePriority>
 8004078:	4602      	mov	r2, r0
 800407a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407e:	4611      	mov	r1, r2
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff5f 	bl	8003f44 <__NVIC_SetPriority>
}
 8004086:	bf00      	nop
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	4603      	mov	r3, r0
 8004096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff ff33 	bl	8003f08 <__NVIC_EnableIRQ>
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff ffa4 	bl	8004000 <SysTick_Config>
 80040b8:	4603      	mov	r3, r0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040d2:	e15a      	b.n	800438a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	2101      	movs	r1, #1
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	fa01 f303 	lsl.w	r3, r1, r3
 80040e0:	4013      	ands	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 814c 	beq.w	8004384 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d005      	beq.n	8004104 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004100:	2b02      	cmp	r3, #2
 8004102:	d130      	bne.n	8004166 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	2203      	movs	r2, #3
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4013      	ands	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800413a:	2201      	movs	r2, #1
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43db      	mvns	r3, r3
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4013      	ands	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	f003 0201 	and.w	r2, r3, #1
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b03      	cmp	r3, #3
 8004170:	d017      	beq.n	80041a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	2203      	movs	r2, #3
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43db      	mvns	r3, r3
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4013      	ands	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d123      	bne.n	80041f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	08da      	lsrs	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3208      	adds	r2, #8
 80041b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	220f      	movs	r2, #15
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4013      	ands	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	08da      	lsrs	r2, r3, #3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3208      	adds	r2, #8
 80041f0:	6939      	ldr	r1, [r7, #16]
 80041f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	2203      	movs	r2, #3
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	43db      	mvns	r3, r3
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 0203 	and.w	r2, r3, #3
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 80a6 	beq.w	8004384 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004238:	4b5b      	ldr	r3, [pc, #364]	@ (80043a8 <HAL_GPIO_Init+0x2e4>)
 800423a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423c:	4a5a      	ldr	r2, [pc, #360]	@ (80043a8 <HAL_GPIO_Init+0x2e4>)
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	6613      	str	r3, [r2, #96]	@ 0x60
 8004244:	4b58      	ldr	r3, [pc, #352]	@ (80043a8 <HAL_GPIO_Init+0x2e4>)
 8004246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004250:	4a56      	ldr	r2, [pc, #344]	@ (80043ac <HAL_GPIO_Init+0x2e8>)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	089b      	lsrs	r3, r3, #2
 8004256:	3302      	adds	r3, #2
 8004258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	220f      	movs	r2, #15
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4013      	ands	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800427a:	d01f      	beq.n	80042bc <HAL_GPIO_Init+0x1f8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a4c      	ldr	r2, [pc, #304]	@ (80043b0 <HAL_GPIO_Init+0x2ec>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d019      	beq.n	80042b8 <HAL_GPIO_Init+0x1f4>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a4b      	ldr	r2, [pc, #300]	@ (80043b4 <HAL_GPIO_Init+0x2f0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d013      	beq.n	80042b4 <HAL_GPIO_Init+0x1f0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a4a      	ldr	r2, [pc, #296]	@ (80043b8 <HAL_GPIO_Init+0x2f4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00d      	beq.n	80042b0 <HAL_GPIO_Init+0x1ec>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a49      	ldr	r2, [pc, #292]	@ (80043bc <HAL_GPIO_Init+0x2f8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d007      	beq.n	80042ac <HAL_GPIO_Init+0x1e8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a48      	ldr	r2, [pc, #288]	@ (80043c0 <HAL_GPIO_Init+0x2fc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d101      	bne.n	80042a8 <HAL_GPIO_Init+0x1e4>
 80042a4:	2305      	movs	r3, #5
 80042a6:	e00a      	b.n	80042be <HAL_GPIO_Init+0x1fa>
 80042a8:	2306      	movs	r3, #6
 80042aa:	e008      	b.n	80042be <HAL_GPIO_Init+0x1fa>
 80042ac:	2304      	movs	r3, #4
 80042ae:	e006      	b.n	80042be <HAL_GPIO_Init+0x1fa>
 80042b0:	2303      	movs	r3, #3
 80042b2:	e004      	b.n	80042be <HAL_GPIO_Init+0x1fa>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e002      	b.n	80042be <HAL_GPIO_Init+0x1fa>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <HAL_GPIO_Init+0x1fa>
 80042bc:	2300      	movs	r3, #0
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	f002 0203 	and.w	r2, r2, #3
 80042c4:	0092      	lsls	r2, r2, #2
 80042c6:	4093      	lsls	r3, r2
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042ce:	4937      	ldr	r1, [pc, #220]	@ (80043ac <HAL_GPIO_Init+0x2e8>)
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	089b      	lsrs	r3, r3, #2
 80042d4:	3302      	adds	r3, #2
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042dc:	4b39      	ldr	r3, [pc, #228]	@ (80043c4 <HAL_GPIO_Init+0x300>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	43db      	mvns	r3, r3
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4013      	ands	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004300:	4a30      	ldr	r2, [pc, #192]	@ (80043c4 <HAL_GPIO_Init+0x300>)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004306:	4b2f      	ldr	r3, [pc, #188]	@ (80043c4 <HAL_GPIO_Init+0x300>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	43db      	mvns	r3, r3
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800432a:	4a26      	ldr	r2, [pc, #152]	@ (80043c4 <HAL_GPIO_Init+0x300>)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004330:	4b24      	ldr	r3, [pc, #144]	@ (80043c4 <HAL_GPIO_Init+0x300>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	43db      	mvns	r3, r3
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004354:	4a1b      	ldr	r2, [pc, #108]	@ (80043c4 <HAL_GPIO_Init+0x300>)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800435a:	4b1a      	ldr	r3, [pc, #104]	@ (80043c4 <HAL_GPIO_Init+0x300>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	43db      	mvns	r3, r3
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4013      	ands	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800437e:	4a11      	ldr	r2, [pc, #68]	@ (80043c4 <HAL_GPIO_Init+0x300>)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	3301      	adds	r3, #1
 8004388:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	fa22 f303 	lsr.w	r3, r2, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	f47f ae9d 	bne.w	80040d4 <HAL_GPIO_Init+0x10>
  }
}
 800439a:	bf00      	nop
 800439c:	bf00      	nop
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	40021000 	.word	0x40021000
 80043ac:	40010000 	.word	0x40010000
 80043b0:	48000400 	.word	0x48000400
 80043b4:	48000800 	.word	0x48000800
 80043b8:	48000c00 	.word	0x48000c00
 80043bc:	48001000 	.word	0x48001000
 80043c0:	48001400 	.word	0x48001400
 80043c4:	40010400 	.word	0x40010400

080043c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	807b      	strh	r3, [r7, #2]
 80043d4:	4613      	mov	r3, r2
 80043d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043d8:	787b      	ldrb	r3, [r7, #1]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043de:	887a      	ldrh	r2, [r7, #2]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043e4:	e002      	b.n	80043ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043e6:	887a      	ldrh	r2, [r7, #2]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e0c0      	b.n	800458c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f008 fbb6 	bl	800cb90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2203      	movs	r2, #3
 8004428:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f004 fa00 	bl	8008836 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004436:	2300      	movs	r3, #0
 8004438:	73fb      	strb	r3, [r7, #15]
 800443a:	e03e      	b.n	80044ba <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800443c:	7bfa      	ldrb	r2, [r7, #15]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	440b      	add	r3, r1
 800444a:	3311      	adds	r3, #17
 800444c:	2201      	movs	r2, #1
 800444e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004450:	7bfa      	ldrb	r2, [r7, #15]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	440b      	add	r3, r1
 800445e:	3310      	adds	r3, #16
 8004460:	7bfa      	ldrb	r2, [r7, #15]
 8004462:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004464:	7bfa      	ldrb	r2, [r7, #15]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	440b      	add	r3, r1
 8004472:	3313      	adds	r3, #19
 8004474:	2200      	movs	r2, #0
 8004476:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004478:	7bfa      	ldrb	r2, [r7, #15]
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	440b      	add	r3, r1
 8004486:	3320      	adds	r3, #32
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800448c:	7bfa      	ldrb	r2, [r7, #15]
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	440b      	add	r3, r1
 800449a:	3324      	adds	r3, #36	@ 0x24
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	440b      	add	r3, r1
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	3301      	adds	r3, #1
 80044b8:	73fb      	strb	r3, [r7, #15]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	791b      	ldrb	r3, [r3, #4]
 80044be:	7bfa      	ldrb	r2, [r7, #15]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d3bb      	bcc.n	800443c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044c4:	2300      	movs	r3, #0
 80044c6:	73fb      	strb	r3, [r7, #15]
 80044c8:	e044      	b.n	8004554 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044ca:	7bfa      	ldrb	r2, [r7, #15]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	440b      	add	r3, r1
 80044d8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80044dc:	2200      	movs	r2, #0
 80044de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044e0:	7bfa      	ldrb	r2, [r7, #15]
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	440b      	add	r3, r1
 80044ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044f2:	7bfa      	ldrb	r2, [r7, #15]
 80044f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044f6:	7bfa      	ldrb	r2, [r7, #15]
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	440b      	add	r3, r1
 8004504:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800450c:	7bfa      	ldrb	r2, [r7, #15]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	440b      	add	r3, r1
 800451a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004522:	7bfa      	ldrb	r2, [r7, #15]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	440b      	add	r3, r1
 8004530:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004538:	7bfa      	ldrb	r2, [r7, #15]
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	440b      	add	r3, r1
 8004546:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	3301      	adds	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	791b      	ldrb	r3, [r3, #4]
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	429a      	cmp	r2, r3
 800455c:	d3b5      	bcc.n	80044ca <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3304      	adds	r3, #4
 8004566:	e893 0006 	ldmia.w	r3, {r1, r2}
 800456a:	f004 f97f 	bl	800886c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	7a9b      	ldrb	r3, [r3, #10]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d102      	bne.n	800458a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f001 fc40 	bl	8005e0a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_PCD_Start+0x16>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e012      	b.n	80045d0 <HAL_PCD_Start+0x3c>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f004 f926 	bl	8008808 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f006 fbe6 	bl	800ad92 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f006 fbeb 	bl	800adc0 <USB_ReadInterrupts>
 80045ea:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fb04 	bl	8004c04 <PCD_EP_ISR_Handler>

    return;
 80045fc:	e110      	b.n	8004820 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004610:	b29a      	uxth	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800461a:	b292      	uxth	r2, r2
 800461c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f008 fb46 	bl	800ccb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004626:	2100      	movs	r1, #0
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f8fc 	bl	8004826 <HAL_PCD_SetAddress>

    return;
 800462e:	e0f7      	b.n	8004820 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00c      	beq.n	8004654 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004642:	b29a      	uxth	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800464c:	b292      	uxth	r2, r2
 800464e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004652:	e0e5      	b.n	8004820 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00c      	beq.n	8004678 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004666:	b29a      	uxth	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004670:	b292      	uxth	r2, r2
 8004672:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004676:	e0d3      	b.n	8004820 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d034      	beq.n	80046ec <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800468a:	b29a      	uxth	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0204 	bic.w	r2, r2, #4
 8004694:	b292      	uxth	r2, r2
 8004696:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0208 	bic.w	r2, r2, #8
 80046ac:	b292      	uxth	r2, r2
 80046ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d107      	bne.n	80046cc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80046c4:	2100      	movs	r1, #0
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f008 fce6 	bl	800d098 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f008 fb29 	bl	800cd24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80046da:	b29a      	uxth	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046e4:	b292      	uxth	r2, r2
 80046e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80046ea:	e099      	b.n	8004820 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d027      	beq.n	8004746 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80046fe:	b29a      	uxth	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0208 	orr.w	r2, r2, #8
 8004708:	b292      	uxth	r2, r2
 800470a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004716:	b29a      	uxth	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004720:	b292      	uxth	r2, r2
 8004722:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800472e:	b29a      	uxth	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0204 	orr.w	r2, r2, #4
 8004738:	b292      	uxth	r2, r2
 800473a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f008 fad6 	bl	800ccf0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004744:	e06c      	b.n	8004820 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474c:	2b00      	cmp	r3, #0
 800474e:	d040      	beq.n	80047d2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004758:	b29a      	uxth	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004762:	b292      	uxth	r2, r2
 8004764:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d12b      	bne.n	80047ca <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800477a:	b29a      	uxth	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0204 	orr.w	r2, r2, #4
 8004784:	b292      	uxth	r2, r2
 8004786:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004792:	b29a      	uxth	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0208 	orr.w	r2, r2, #8
 800479c:	b292      	uxth	r2, r2
 800479e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	089b      	lsrs	r3, r3, #2
 80047b6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80047c0:	2101      	movs	r1, #1
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f008 fc68 	bl	800d098 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80047c8:	e02a      	b.n	8004820 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f008 fa90 	bl	800ccf0 <HAL_PCD_SuspendCallback>
    return;
 80047d0:	e026      	b.n	8004820 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00f      	beq.n	80047fc <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80047ee:	b292      	uxth	r2, r2
 80047f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f008 fa4e 	bl	800cc96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80047fa:	e011      	b.n	8004820 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00c      	beq.n	8004820 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800480e:	b29a      	uxth	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004818:	b292      	uxth	r2, r2
 800481a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800481e:	bf00      	nop
  }
}
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	460b      	mov	r3, r1
 8004830:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_PCD_SetAddress+0x1a>
 800483c:	2302      	movs	r3, #2
 800483e:	e012      	b.n	8004866 <HAL_PCD_SetAddress+0x40>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	78fa      	ldrb	r2, [r7, #3]
 800484c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	78fa      	ldrb	r2, [r7, #3]
 8004854:	4611      	mov	r1, r2
 8004856:	4618      	mov	r0, r3
 8004858:	f006 fa87 	bl	800ad6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	4608      	mov	r0, r1
 8004878:	4611      	mov	r1, r2
 800487a:	461a      	mov	r2, r3
 800487c:	4603      	mov	r3, r0
 800487e:	70fb      	strb	r3, [r7, #3]
 8004880:	460b      	mov	r3, r1
 8004882:	803b      	strh	r3, [r7, #0]
 8004884:	4613      	mov	r3, r2
 8004886:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800488c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004890:	2b00      	cmp	r3, #0
 8004892:	da0e      	bge.n	80048b2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	f003 0207 	and.w	r2, r3, #7
 800489a:	4613      	mov	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	3310      	adds	r3, #16
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	4413      	add	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2201      	movs	r2, #1
 80048ae:	705a      	strb	r2, [r3, #1]
 80048b0:	e00e      	b.n	80048d0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	f003 0207 	and.w	r2, r3, #7
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4413      	add	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80048dc:	883a      	ldrh	r2, [r7, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	78ba      	ldrb	r2, [r7, #2]
 80048e6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80048e8:	78bb      	ldrb	r3, [r7, #2]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d102      	bne.n	80048f4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_PCD_EP_Open+0x94>
 80048fe:	2302      	movs	r3, #2
 8004900:	e00e      	b.n	8004920 <HAL_PCD_EP_Open+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68f9      	ldr	r1, [r7, #12]
 8004910:	4618      	mov	r0, r3
 8004912:	f003 ffc9 	bl	80088a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800491e:	7afb      	ldrb	r3, [r7, #11]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004938:	2b00      	cmp	r3, #0
 800493a:	da0e      	bge.n	800495a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	f003 0207 	and.w	r2, r3, #7
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	3310      	adds	r3, #16
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	4413      	add	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	705a      	strb	r2, [r3, #1]
 8004958:	e00e      	b.n	8004978 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800495a:	78fb      	ldrb	r3, [r7, #3]
 800495c:	f003 0207 	and.w	r2, r3, #7
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	4413      	add	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	b2da      	uxtb	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800498a:	2b01      	cmp	r3, #1
 800498c:	d101      	bne.n	8004992 <HAL_PCD_EP_Close+0x6a>
 800498e:	2302      	movs	r3, #2
 8004990:	e00e      	b.n	80049b0 <HAL_PCD_EP_Close+0x88>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68f9      	ldr	r1, [r7, #12]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f004 fb45 	bl	8009030 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	460b      	mov	r3, r1
 80049c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049c8:	7afb      	ldrb	r3, [r7, #11]
 80049ca:	f003 0207 	and.w	r2, r3, #7
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4413      	add	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2200      	movs	r2, #0
 80049f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2200      	movs	r2, #0
 80049f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049f8:	7afb      	ldrb	r3, [r7, #11]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6979      	ldr	r1, [r7, #20]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f004 fcfd 	bl	800940a <USB_EPStartXfer>

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	460b      	mov	r3, r1
 8004a24:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	f003 0207 	and.w	r2, r3, #7
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	440b      	add	r3, r1
 8004a38:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004a3c:	681b      	ldr	r3, [r3, #0]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b086      	sub	sp, #24
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	460b      	mov	r3, r1
 8004a58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a5a:	7afb      	ldrb	r3, [r7, #11]
 8004a5c:	f003 0207 	and.w	r2, r3, #7
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3310      	adds	r3, #16
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2201      	movs	r2, #1
 8004a94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a96:	7afb      	ldrb	r3, [r7, #11]
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6979      	ldr	r1, [r7, #20]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f004 fcae 	bl	800940a <USB_EPStartXfer>

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	7912      	ldrb	r2, [r2, #4]
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e03e      	b.n	8004b54 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ad6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	da0e      	bge.n	8004afc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ade:	78fb      	ldrb	r3, [r7, #3]
 8004ae0:	f003 0207 	and.w	r2, r3, #7
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	3310      	adds	r3, #16
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	4413      	add	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	705a      	strb	r2, [r3, #1]
 8004afa:	e00c      	b.n	8004b16 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004afc:	78fa      	ldrb	r2, [r7, #3]
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_PCD_EP_SetStall+0x7e>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e00e      	b.n	8004b54 <HAL_PCD_EP_SetStall+0x9c>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68f9      	ldr	r1, [r7, #12]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f006 f811 	bl	800ab6c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	7912      	ldrb	r2, [r2, #4]
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e040      	b.n	8004bfc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	da0e      	bge.n	8004ba0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	f003 0207 	and.w	r2, r3, #7
 8004b88:	4613      	mov	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	3310      	adds	r3, #16
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4413      	add	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	705a      	strb	r2, [r3, #1]
 8004b9e:	e00e      	b.n	8004bbe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	f003 0207 	and.w	r2, r3, #7
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_PCD_EP_ClrStall+0x82>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e00e      	b.n	8004bfc <HAL_PCD_EP_ClrStall+0xa0>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68f9      	ldr	r1, [r7, #12]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f006 f80e 	bl	800ac0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b096      	sub	sp, #88	@ 0x58
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c0c:	e3ad      	b.n	800536a <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c16:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004c1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8004c28:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f040 816f 	bne.w	8004f10 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004c32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d14c      	bne.n	8004cd8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4e:	81fb      	strh	r3, [r7, #14]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	89fb      	ldrh	r3, [r7, #14]
 8004c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3310      	adds	r3, #16
 8004c66:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6812      	ldr	r2, [r2, #0]
 8004c80:	4413      	add	r3, r2
 8004c82:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c92:	695a      	ldr	r2, [r3, #20]
 8004c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	441a      	add	r2, r3
 8004c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c9c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f007 ffde 	bl	800cc62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	7b1b      	ldrb	r3, [r3, #12]
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 835c 	beq.w	800536a <PCD_EP_ISR_Handler+0x766>
 8004cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f040 8357 	bne.w	800536a <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	7b1b      	ldrb	r3, [r3, #12]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	731a      	strb	r2, [r3, #12]
 8004cd6:	e348      	b.n	800536a <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004cde:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004cea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004cee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d032      	beq.n	8004d5c <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	4413      	add	r3, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d1c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d2a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d2e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	f006 f897 	bl	800ae64 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004d42:	4013      	ands	r3, r2
 8004d44:	823b      	strh	r3, [r7, #16]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	8a3a      	ldrh	r2, [r7, #16]
 8004d4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d50:	b292      	uxth	r2, r2
 8004d52:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f007 ff57 	bl	800cc08 <HAL_PCD_SetupStageCallback>
 8004d5a:	e306      	b.n	800536a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004d5c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f280 8302 	bge.w	800536a <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004d72:	4013      	ands	r3, r2
 8004d74:	83fb      	strh	r3, [r7, #30]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	8bfa      	ldrh	r2, [r7, #30]
 8004d7c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d80:	b292      	uxth	r2, r2
 8004d82:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	4413      	add	r3, r2
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004daa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d019      	beq.n	8004de8 <PCD_EP_ISR_Handler+0x1e4>
 8004db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d015      	beq.n	8004de8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc2:	6959      	ldr	r1, [r3, #20]
 8004dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f006 f849 	bl	800ae64 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dd4:	695a      	ldr	r2, [r3, #20]
 8004dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	441a      	add	r2, r3
 8004ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dde:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004de0:	2100      	movs	r1, #0
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f007 ff22 	bl	800cc2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004df2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004df6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f040 82b5 	bne.w	800536a <PCD_EP_ISR_Handler+0x766>
 8004e00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004e04:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004e08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e0c:	f000 82ad 	beq.w	800536a <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	4413      	add	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	801a      	strh	r2, [r3, #0]
 8004e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e46:	d91d      	bls.n	8004e84 <PCD_EP_ISR_Handler+0x280>
 8004e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d102      	bne.n	8004e62 <PCD_EP_ISR_Handler+0x25e>
 8004e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	029b      	lsls	r3, r3, #10
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	4313      	orrs	r3, r2
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	801a      	strh	r2, [r3, #0]
 8004e82:	e026      	b.n	8004ed2 <PCD_EP_ISR_Handler+0x2ce>
 8004e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <PCD_EP_ISR_Handler+0x29e>
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	801a      	strh	r2, [r3, #0]
 8004ea0:	e017      	b.n	8004ed2 <PCD_EP_ISR_Handler+0x2ce>
 8004ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	085b      	lsrs	r3, r3, #1
 8004ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <PCD_EP_ISR_Handler+0x2b8>
 8004eb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eb8:	3301      	adds	r3, #1
 8004eba:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	029b      	lsls	r3, r3, #10
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee2:	827b      	strh	r3, [r7, #18]
 8004ee4:	8a7b      	ldrh	r3, [r7, #18]
 8004ee6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004eea:	827b      	strh	r3, [r7, #18]
 8004eec:	8a7b      	ldrh	r3, [r7, #18]
 8004eee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004ef2:	827b      	strh	r3, [r7, #18]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	8a7b      	ldrh	r3, [r7, #18]
 8004efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	8013      	strh	r3, [r2, #0]
 8004f0e:	e22c      	b.n	800536a <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004f24:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f280 80f6 	bge.w	800511a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004f44:	4013      	ands	r3, r2
 8004f46:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004f5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f60:	b292      	uxth	r2, r2
 8004f62:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004f64:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	4413      	add	r3, r2
 8004f78:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f7c:	7b1b      	ldrb	r3, [r3, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d123      	bne.n	8004fca <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	4413      	add	r3, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6812      	ldr	r2, [r2, #0]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fa6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004faa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 808e 	beq.w	80050d0 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fba:	6959      	ldr	r1, [r3, #20]
 8004fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fbe:	88da      	ldrh	r2, [r3, #6]
 8004fc0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004fc4:	f005 ff4e 	bl	800ae64 <USB_ReadPMA>
 8004fc8:	e082      	b.n	80050d0 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fcc:	78db      	ldrb	r3, [r3, #3]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d10a      	bne.n	8004fe8 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004fd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f9d3 	bl	8005386 <HAL_PCD_EP_DB_Receive>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004fe6:	e073      	b.n	80050d0 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005002:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	441a      	add	r2, r3
 8005014:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800501c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005024:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005028:	b29b      	uxth	r3, r3
 800502a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d022      	beq.n	800508c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800504e:	b29b      	uxth	r3, r3
 8005050:	461a      	mov	r2, r3
 8005052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	4413      	add	r3, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	4413      	add	r3, r2
 8005060:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800506a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800506e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005072:	2b00      	cmp	r3, #0
 8005074:	d02c      	beq.n	80050d0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800507c:	6959      	ldr	r1, [r3, #20]
 800507e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005080:	891a      	ldrh	r2, [r3, #8]
 8005082:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005086:	f005 feed 	bl	800ae64 <USB_ReadPMA>
 800508a:	e021      	b.n	80050d0 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005094:	b29b      	uxth	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	4413      	add	r3, r2
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	4413      	add	r3, r2
 80050a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050b0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80050b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d009      	beq.n	80050d0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c2:	6959      	ldr	r1, [r3, #20]
 80050c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c6:	895a      	ldrh	r2, [r3, #10]
 80050c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80050cc:	f005 feca 	bl	800ae64 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80050d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d2:	69da      	ldr	r2, [r3, #28]
 80050d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80050d8:	441a      	add	r2, r3
 80050da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80050de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e0:	695a      	ldr	r2, [r3, #20]
 80050e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80050e6:	441a      	add	r2, r3
 80050e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80050ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <PCD_EP_ISR_Handler+0x4fc>
 80050f4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80050f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d206      	bcs.n	800510e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	4619      	mov	r1, r3
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f007 fd90 	bl	800cc2c <HAL_PCD_DataOutStageCallback>
 800510c:	e005      	b.n	800511a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005114:	4618      	mov	r0, r3
 8005116:	f004 f978 	bl	800940a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800511a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800511e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 8121 	beq.w	800536a <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8005128:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	3310      	adds	r3, #16
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4413      	add	r3, r2
 800513a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005156:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	441a      	add	r2, r3
 8005168:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800516c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005174:	b29b      	uxth	r3, r3
 8005176:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800517a:	78db      	ldrb	r3, [r3, #3]
 800517c:	2b01      	cmp	r3, #1
 800517e:	f040 80a2 	bne.w	80052c6 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8005182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005184:	2200      	movs	r2, #0
 8005186:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800518a:	7b1b      	ldrb	r3, [r3, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 8093 	beq.w	80052b8 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005192:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d046      	beq.n	800522c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800519e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d126      	bne.n	80051f4 <PCD_EP_ISR_Handler+0x5f0>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	4413      	add	r3, r2
 80051bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80051be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	00da      	lsls	r2, r3, #3
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	4413      	add	r3, r2
 80051c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80051cc:	623b      	str	r3, [r7, #32]
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051d8:	b29a      	uxth	r2, r3
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	801a      	strh	r2, [r3, #0]
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	801a      	strh	r2, [r3, #0]
 80051f2:	e061      	b.n	80052b8 <PCD_EP_ISR_Handler+0x6b4>
 80051f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d15d      	bne.n	80052b8 <PCD_EP_ISR_Handler+0x6b4>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800520a:	b29b      	uxth	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005210:	4413      	add	r3, r2
 8005212:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	00da      	lsls	r2, r3, #3
 800521a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800521c:	4413      	add	r3, r2
 800521e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005222:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005226:	2200      	movs	r2, #0
 8005228:	801a      	strh	r2, [r3, #0]
 800522a:	e045      	b.n	80052b8 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d126      	bne.n	8005288 <PCD_EP_ISR_Handler+0x684>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005248:	b29b      	uxth	r3, r3
 800524a:	461a      	mov	r2, r3
 800524c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524e:	4413      	add	r3, r2
 8005250:	637b      	str	r3, [r7, #52]	@ 0x34
 8005252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	00da      	lsls	r2, r3, #3
 8005258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525a:	4413      	add	r3, r2
 800525c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005260:	633b      	str	r3, [r7, #48]	@ 0x30
 8005262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800526c:	b29a      	uxth	r2, r3
 800526e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	b29b      	uxth	r3, r3
 8005278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800527c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005280:	b29a      	uxth	r2, r3
 8005282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005284:	801a      	strh	r2, [r3, #0]
 8005286:	e017      	b.n	80052b8 <PCD_EP_ISR_Handler+0x6b4>
 8005288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800528a:	785b      	ldrb	r3, [r3, #1]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d113      	bne.n	80052b8 <PCD_EP_ISR_Handler+0x6b4>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005298:	b29b      	uxth	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800529e:	4413      	add	r3, r2
 80052a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	00da      	lsls	r2, r3, #3
 80052a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052aa:	4413      	add	r3, r2
 80052ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b4:	2200      	movs	r2, #0
 80052b6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80052b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f007 fccf 	bl	800cc62 <HAL_PCD_DataInStageCallback>
 80052c4:	e051      	b.n	800536a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80052c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80052ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d144      	bne.n	800535c <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052da:	b29b      	uxth	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	4413      	add	r3, r2
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6812      	ldr	r2, [r2, #0]
 80052ea:	4413      	add	r3, r2
 80052ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052f6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80052fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005302:	429a      	cmp	r2, r3
 8005304:	d907      	bls.n	8005316 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8005306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800530e:	1ad2      	subs	r2, r2, r3
 8005310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005312:	619a      	str	r2, [r3, #24]
 8005314:	e002      	b.n	800531c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8005316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005318:	2200      	movs	r2, #0
 800531a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800531c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d106      	bne.n	8005332 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f007 fc99 	bl	800cc62 <HAL_PCD_DataInStageCallback>
 8005330:	e01b      	b.n	800536a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005334:	695a      	ldr	r2, [r3, #20]
 8005336:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800533a:	441a      	add	r2, r3
 800533c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800533e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005348:	441a      	add	r2, r3
 800534a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800534c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005354:	4618      	mov	r0, r3
 8005356:	f004 f858 	bl	800940a <USB_EPStartXfer>
 800535a:	e006      	b.n	800536a <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800535c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005360:	461a      	mov	r2, r3
 8005362:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f917 	bl	8005598 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005372:	b29b      	uxth	r3, r3
 8005374:	b21b      	sxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	f6ff ac49 	blt.w	8004c0e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3758      	adds	r7, #88	@ 0x58
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b088      	sub	sp, #32
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	4613      	mov	r3, r2
 8005392:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005394:	88fb      	ldrh	r3, [r7, #6]
 8005396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d07c      	beq.n	8005498 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	461a      	mov	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	4413      	add	r3, r2
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	6812      	ldr	r2, [r2, #0]
 80053b6:	4413      	add	r3, r2
 80053b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053c2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	699a      	ldr	r2, [r3, #24]
 80053c8:	8b7b      	ldrh	r3, [r7, #26]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d306      	bcc.n	80053dc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	8b7b      	ldrh	r3, [r7, #26]
 80053d4:	1ad2      	subs	r2, r2, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	619a      	str	r2, [r3, #24]
 80053da:	e002      	b.n	80053e2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2200      	movs	r2, #0
 80053e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d123      	bne.n	8005432 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005404:	833b      	strh	r3, [r7, #24]
 8005406:	8b3b      	ldrh	r3, [r7, #24]
 8005408:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800540c:	833b      	strh	r3, [r7, #24]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	441a      	add	r2, r3
 800541c:	8b3b      	ldrh	r3, [r7, #24]
 800541e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800542a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800542e:	b29b      	uxth	r3, r3
 8005430:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005432:	88fb      	ldrh	r3, [r7, #6]
 8005434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01f      	beq.n	800547c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	461a      	mov	r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	b29b      	uxth	r3, r3
 800544e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005456:	82fb      	strh	r3, [r7, #22]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	441a      	add	r2, r3
 8005466:	8afb      	ldrh	r3, [r7, #22]
 8005468:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800546c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005470:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005474:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005478:	b29b      	uxth	r3, r3
 800547a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800547c:	8b7b      	ldrh	r3, [r7, #26]
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 8085 	beq.w	800558e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6959      	ldr	r1, [r3, #20]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	891a      	ldrh	r2, [r3, #8]
 8005490:	8b7b      	ldrh	r3, [r7, #26]
 8005492:	f005 fce7 	bl	800ae64 <USB_ReadPMA>
 8005496:	e07a      	b.n	800558e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	461a      	mov	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	4413      	add	r3, r2
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	4413      	add	r3, r2
 80054b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054bc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	8b7b      	ldrh	r3, [r7, #26]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d306      	bcc.n	80054d6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	699a      	ldr	r2, [r3, #24]
 80054cc:	8b7b      	ldrh	r3, [r7, #26]
 80054ce:	1ad2      	subs	r2, r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	619a      	str	r2, [r3, #24]
 80054d4:	e002      	b.n	80054dc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2200      	movs	r2, #0
 80054da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d123      	bne.n	800552c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fe:	83fb      	strh	r3, [r7, #30]
 8005500:	8bfb      	ldrh	r3, [r7, #30]
 8005502:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005506:	83fb      	strh	r3, [r7, #30]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	461a      	mov	r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	441a      	add	r2, r3
 8005516:	8bfb      	ldrh	r3, [r7, #30]
 8005518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800551c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005528:	b29b      	uxth	r3, r3
 800552a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800552c:	88fb      	ldrh	r3, [r7, #6]
 800552e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d11f      	bne.n	8005576 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800554c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005550:	83bb      	strh	r3, [r7, #28]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	441a      	add	r2, r3
 8005560:	8bbb      	ldrh	r3, [r7, #28]
 8005562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800556a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800556e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005572:	b29b      	uxth	r3, r3
 8005574:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005576:	8b7b      	ldrh	r3, [r7, #26]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d008      	beq.n	800558e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6959      	ldr	r1, [r3, #20]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	895a      	ldrh	r2, [r3, #10]
 8005588:	8b7b      	ldrh	r3, [r7, #26]
 800558a:	f005 fc6b 	bl	800ae64 <USB_ReadPMA>
    }
  }

  return count;
 800558e:	8b7b      	ldrh	r3, [r7, #26]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3720      	adds	r7, #32
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b0a4      	sub	sp, #144	@ 0x90
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	4613      	mov	r3, r2
 80055a4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 81db 	beq.w	8005968 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	4413      	add	r3, r2
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	4413      	add	r3, r2
 80055cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055d6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d907      	bls.n	80055f6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80055ee:	1ad2      	subs	r2, r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	619a      	str	r2, [r3, #24]
 80055f4:	e002      	b.n	80055fc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2200      	movs	r2, #0
 80055fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f040 80b9 	bne.w	8005778 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	785b      	ldrb	r3, [r3, #1]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d126      	bne.n	800565c <HAL_PCD_EP_DB_Transmit+0xc4>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800561c:	b29b      	uxth	r3, r3
 800561e:	461a      	mov	r2, r3
 8005620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005622:	4413      	add	r3, r2
 8005624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	00da      	lsls	r2, r3, #3
 800562c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800562e:	4413      	add	r3, r2
 8005630:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005634:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	b29b      	uxth	r3, r3
 800563c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005640:	b29a      	uxth	r2, r3
 8005642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005654:	b29a      	uxth	r2, r3
 8005656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005658:	801a      	strh	r2, [r3, #0]
 800565a:	e01a      	b.n	8005692 <HAL_PCD_EP_DB_Transmit+0xfa>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d116      	bne.n	8005692 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	637b      	str	r3, [r7, #52]	@ 0x34
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005672:	b29b      	uxth	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005678:	4413      	add	r3, r2
 800567a:	637b      	str	r3, [r7, #52]	@ 0x34
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	00da      	lsls	r2, r3, #3
 8005682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005684:	4413      	add	r3, r2
 8005686:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800568a:	633b      	str	r3, [r7, #48]	@ 0x30
 800568c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568e:	2200      	movs	r2, #0
 8005690:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	785b      	ldrb	r3, [r3, #1]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d126      	bne.n	80056ee <HAL_PCD_EP_DB_Transmit+0x156>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	61fb      	str	r3, [r7, #28]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	4413      	add	r3, r2
 80056b6:	61fb      	str	r3, [r7, #28]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	00da      	lsls	r2, r3, #3
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	4413      	add	r3, r2
 80056c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056c6:	61bb      	str	r3, [r7, #24]
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	801a      	strh	r2, [r3, #0]
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	801a      	strh	r2, [r3, #0]
 80056ec:	e017      	b.n	800571e <HAL_PCD_EP_DB_Transmit+0x186>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d113      	bne.n	800571e <HAL_PCD_EP_DB_Transmit+0x186>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056fe:	b29b      	uxth	r3, r3
 8005700:	461a      	mov	r2, r3
 8005702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005704:	4413      	add	r3, r2
 8005706:	627b      	str	r3, [r7, #36]	@ 0x24
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	00da      	lsls	r2, r3, #3
 800570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005710:	4413      	add	r3, r2
 8005712:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005716:	623b      	str	r3, [r7, #32]
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	2200      	movs	r2, #0
 800571c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	4619      	mov	r1, r3
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f007 fa9c 	bl	800cc62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 82fa 	beq.w	8005d2a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	b29b      	uxth	r3, r3
 8005748:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800574c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005750:	82fb      	strh	r3, [r7, #22]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	441a      	add	r2, r3
 8005760:	8afb      	ldrh	r3, [r7, #22]
 8005762:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005766:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800576a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800576e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005772:	b29b      	uxth	r3, r3
 8005774:	8013      	strh	r3, [r2, #0]
 8005776:	e2d8      	b.n	8005d2a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d021      	beq.n	80057c6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800579c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	441a      	add	r2, r3
 80057ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80057b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	f040 82ac 	bne.w	8005d2a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80057da:	441a      	add	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80057e8:	441a      	add	r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6a1a      	ldr	r2, [r3, #32]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d30b      	bcc.n	8005812 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	6a1a      	ldr	r2, [r3, #32]
 8005806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800580a:	1ad2      	subs	r2, r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	621a      	str	r2, [r3, #32]
 8005810:	e017      	b.n	8005842 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d108      	bne.n	800582c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800581a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800581e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800582a:	e00a      	b.n	8005842 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2200      	movs	r2, #0
 8005840:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	785b      	ldrb	r3, [r3, #1]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d165      	bne.n	8005916 <HAL_PCD_EP_DB_Transmit+0x37e>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005858:	b29b      	uxth	r3, r3
 800585a:	461a      	mov	r2, r3
 800585c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800585e:	4413      	add	r3, r2
 8005860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	00da      	lsls	r2, r3, #3
 8005868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800586a:	4413      	add	r3, r2
 800586c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005870:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800587c:	b29a      	uxth	r2, r3
 800587e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005886:	2b3e      	cmp	r3, #62	@ 0x3e
 8005888:	d91d      	bls.n	80058c6 <HAL_PCD_EP_DB_Transmit+0x32e>
 800588a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800588e:	095b      	lsrs	r3, r3, #5
 8005890:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005892:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	2b00      	cmp	r3, #0
 800589c:	d102      	bne.n	80058a4 <HAL_PCD_EP_DB_Transmit+0x30c>
 800589e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058a0:	3b01      	subs	r3, #1
 80058a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	029b      	lsls	r3, r3, #10
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	4313      	orrs	r3, r2
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058be:	b29a      	uxth	r2, r3
 80058c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c2:	801a      	strh	r2, [r3, #0]
 80058c4:	e044      	b.n	8005950 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80058c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <HAL_PCD_EP_DB_Transmit+0x34c>
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058dc:	b29a      	uxth	r2, r3
 80058de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e0:	801a      	strh	r2, [r3, #0]
 80058e2:	e035      	b.n	8005950 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80058e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058e8:	085b      	lsrs	r3, r3, #1
 80058ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <HAL_PCD_EP_DB_Transmit+0x366>
 80058f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058fa:	3301      	adds	r3, #1
 80058fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29a      	uxth	r2, r3
 8005904:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005906:	b29b      	uxth	r3, r3
 8005908:	029b      	lsls	r3, r3, #10
 800590a:	b29b      	uxth	r3, r3
 800590c:	4313      	orrs	r3, r2
 800590e:	b29a      	uxth	r2, r3
 8005910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	e01c      	b.n	8005950 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	785b      	ldrb	r3, [r3, #1]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d118      	bne.n	8005950 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	647b      	str	r3, [r7, #68]	@ 0x44
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800592c:	b29b      	uxth	r3, r3
 800592e:	461a      	mov	r2, r3
 8005930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005932:	4413      	add	r3, r2
 8005934:	647b      	str	r3, [r7, #68]	@ 0x44
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	00da      	lsls	r2, r3, #3
 800593c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800593e:	4413      	add	r3, r2
 8005940:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005944:	643b      	str	r3, [r7, #64]	@ 0x40
 8005946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800594a:	b29a      	uxth	r2, r3
 800594c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800594e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6818      	ldr	r0, [r3, #0]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6959      	ldr	r1, [r3, #20]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	891a      	ldrh	r2, [r3, #8]
 800595c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005960:	b29b      	uxth	r3, r3
 8005962:	f005 fa3d 	bl	800ade0 <USB_WritePMA>
 8005966:	e1e0      	b.n	8005d2a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005970:	b29b      	uxth	r3, r3
 8005972:	461a      	mov	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	4413      	add	r3, r2
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	4413      	add	r3, r2
 8005982:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800598c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	699a      	ldr	r2, [r3, #24]
 8005994:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005998:	429a      	cmp	r2, r3
 800599a:	d307      	bcc.n	80059ac <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80059a4:	1ad2      	subs	r2, r2, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	619a      	str	r2, [r3, #24]
 80059aa:	e002      	b.n	80059b2 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2200      	movs	r2, #0
 80059b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f040 80c0 	bne.w	8005b3c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d126      	bne.n	8005a12 <HAL_PCD_EP_DB_Transmit+0x47a>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80059d8:	4413      	add	r3, r2
 80059da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	00da      	lsls	r2, r3, #3
 80059e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80059e4:	4413      	add	r3, r2
 80059e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80059ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a0e:	801a      	strh	r2, [r3, #0]
 8005a10:	e01a      	b.n	8005a48 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d116      	bne.n	8005a48 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a2e:	4413      	add	r3, r2
 8005a30:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	00da      	lsls	r2, r3, #3
 8005a38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a40:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a44:	2200      	movs	r2, #0
 8005a46:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	785b      	ldrb	r3, [r3, #1]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d12b      	bne.n	8005aae <HAL_PCD_EP_DB_Transmit+0x516>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a6a:	4413      	add	r3, r2
 8005a6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	00da      	lsls	r2, r3, #3
 8005a74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a76:	4413      	add	r3, r2
 8005a78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a92:	801a      	strh	r2, [r3, #0]
 8005a94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005aaa:	801a      	strh	r2, [r3, #0]
 8005aac:	e017      	b.n	8005ade <HAL_PCD_EP_DB_Transmit+0x546>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d113      	bne.n	8005ade <HAL_PCD_EP_DB_Transmit+0x546>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ac4:	4413      	add	r3, r2
 8005ac6:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	00da      	lsls	r2, r3, #3
 8005ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ad6:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ad8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ada:	2200      	movs	r2, #0
 8005adc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f007 f8bc 	bl	800cc62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005aea:	88fb      	ldrh	r3, [r7, #6]
 8005aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f040 811a 	bne.w	8005d2a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b10:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	441a      	add	r2, r3
 8005b22:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005b26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	8013      	strh	r3, [r2, #0]
 8005b3a:	e0f6      	b.n	8005d2a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d121      	bne.n	8005b8a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b60:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	441a      	add	r2, r3
 8005b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005b76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	f040 80ca 	bne.w	8005d2a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	695a      	ldr	r2, [r3, #20]
 8005b9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005b9e:	441a      	add	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005bac:	441a      	add	r2, r3
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	6a1a      	ldr	r2, [r3, #32]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d30b      	bcc.n	8005bd6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	6a1a      	ldr	r2, [r3, #32]
 8005bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bce:	1ad2      	subs	r2, r2, r3
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	621a      	str	r2, [r3, #32]
 8005bd4:	e017      	b.n	8005c06 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d108      	bne.n	8005bf0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005bde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005be2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005bee:	e00a      	b.n	8005c06 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d165      	bne.n	8005ce0 <HAL_PCD_EP_DB_Transmit+0x748>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c28:	4413      	add	r3, r2
 8005c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	00da      	lsls	r2, r3, #3
 8005c32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c34:	4413      	add	r3, r2
 8005c36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c4a:	801a      	strh	r2, [r3, #0]
 8005c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c50:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c52:	d91d      	bls.n	8005c90 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c60:	f003 031f 	and.w	r3, r3, #31
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d102      	bne.n	8005c6e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005c68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	029b      	lsls	r3, r3, #10
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	e041      	b.n	8005d14 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10a      	bne.n	8005cae <HAL_PCD_EP_DB_Transmit+0x716>
 8005c98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005caa:	801a      	strh	r2, [r3, #0]
 8005cac:	e032      	b.n	8005d14 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cb2:	085b      	lsrs	r3, r3, #1
 8005cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_PCD_EP_DB_Transmit+0x730>
 8005cc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	029b      	lsls	r3, r3, #10
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cdc:	801a      	strh	r2, [r3, #0]
 8005cde:	e019      	b.n	8005d14 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d115      	bne.n	8005d14 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cf6:	4413      	add	r3, r2
 8005cf8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	00da      	lsls	r2, r3, #3
 8005d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d02:	4413      	add	r3, r2
 8005d04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d08:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d12:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	6959      	ldr	r1, [r3, #20]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	895a      	ldrh	r2, [r3, #10]
 8005d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f005 f85b 	bl	800ade0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d44:	82bb      	strh	r3, [r7, #20]
 8005d46:	8abb      	ldrh	r3, [r7, #20]
 8005d48:	f083 0310 	eor.w	r3, r3, #16
 8005d4c:	82bb      	strh	r3, [r7, #20]
 8005d4e:	8abb      	ldrh	r3, [r7, #20]
 8005d50:	f083 0320 	eor.w	r3, r3, #32
 8005d54:	82bb      	strh	r3, [r7, #20]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	441a      	add	r2, r3
 8005d64:	8abb      	ldrh	r3, [r7, #20]
 8005d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3790      	adds	r7, #144	@ 0x90
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	607b      	str	r3, [r7, #4]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	817b      	strh	r3, [r7, #10]
 8005d92:	4613      	mov	r3, r2
 8005d94:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005d96:	897b      	ldrh	r3, [r7, #10]
 8005d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00b      	beq.n	8005dba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005da2:	897b      	ldrh	r3, [r7, #10]
 8005da4:	f003 0207 	and.w	r2, r3, #7
 8005da8:	4613      	mov	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	3310      	adds	r3, #16
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4413      	add	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	e009      	b.n	8005dce <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005dba:	897a      	ldrh	r2, [r7, #10]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005dce:	893b      	ldrh	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d107      	bne.n	8005de4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	80da      	strh	r2, [r3, #6]
 8005de2:	e00b      	b.n	8005dfc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2201      	movs	r2, #1
 8005de8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	0c1b      	lsrs	r3, r3, #16
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b085      	sub	sp, #20
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	f043 0302 	orr.w	r3, r3, #2
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
	...

08005e60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d141      	bne.n	8005ef2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e6e:	4b4b      	ldr	r3, [pc, #300]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e7a:	d131      	bne.n	8005ee0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e7c:	4b47      	ldr	r3, [pc, #284]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e82:	4a46      	ldr	r2, [pc, #280]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e8c:	4b43      	ldr	r3, [pc, #268]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e94:	4a41      	ldr	r2, [pc, #260]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e9c:	4b40      	ldr	r3, [pc, #256]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2232      	movs	r2, #50	@ 0x32
 8005ea2:	fb02 f303 	mul.w	r3, r2, r3
 8005ea6:	4a3f      	ldr	r2, [pc, #252]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eac:	0c9b      	lsrs	r3, r3, #18
 8005eae:	3301      	adds	r3, #1
 8005eb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005eb2:	e002      	b.n	8005eba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005eba:	4b38      	ldr	r3, [pc, #224]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ec6:	d102      	bne.n	8005ece <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f2      	bne.n	8005eb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ece:	4b33      	ldr	r3, [pc, #204]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eda:	d158      	bne.n	8005f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e057      	b.n	8005f90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ee6:	4a2d      	ldr	r2, [pc, #180]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005eec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005ef0:	e04d      	b.n	8005f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ef8:	d141      	bne.n	8005f7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005efa:	4b28      	ldr	r3, [pc, #160]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f06:	d131      	bne.n	8005f6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f08:	4b24      	ldr	r3, [pc, #144]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f0e:	4a23      	ldr	r2, [pc, #140]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f18:	4b20      	ldr	r3, [pc, #128]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f20:	4a1e      	ldr	r2, [pc, #120]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f28:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2232      	movs	r2, #50	@ 0x32
 8005f2e:	fb02 f303 	mul.w	r3, r2, r3
 8005f32:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f34:	fba2 2303 	umull	r2, r3, r2, r3
 8005f38:	0c9b      	lsrs	r3, r3, #18
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f3e:	e002      	b.n	8005f46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f46:	4b15      	ldr	r3, [pc, #84]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f52:	d102      	bne.n	8005f5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1f2      	bne.n	8005f40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f5a:	4b10      	ldr	r3, [pc, #64]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f66:	d112      	bne.n	8005f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e011      	b.n	8005f90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f72:	4a0a      	ldr	r2, [pc, #40]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005f7c:	e007      	b.n	8005f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f7e:	4b07      	ldr	r3, [pc, #28]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f86:	4a05      	ldr	r2, [pc, #20]	@ (8005f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	40007000 	.word	0x40007000
 8005fa0:	20000000 	.word	0x20000000
 8005fa4:	431bde83 	.word	0x431bde83

08005fa8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005fac:	4b05      	ldr	r3, [pc, #20]	@ (8005fc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	4a04      	ldr	r2, [pc, #16]	@ (8005fc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005fb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fb6:	6093      	str	r3, [r2, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40007000 	.word	0x40007000

08005fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e2fe      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d075      	beq.n	80060d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fe6:	4b97      	ldr	r3, [pc, #604]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 030c 	and.w	r3, r3, #12
 8005fee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ff0:	4b94      	ldr	r3, [pc, #592]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f003 0303 	and.w	r3, r3, #3
 8005ff8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b0c      	cmp	r3, #12
 8005ffe:	d102      	bne.n	8006006 <HAL_RCC_OscConfig+0x3e>
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2b03      	cmp	r3, #3
 8006004:	d002      	beq.n	800600c <HAL_RCC_OscConfig+0x44>
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	2b08      	cmp	r3, #8
 800600a:	d10b      	bne.n	8006024 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800600c:	4b8d      	ldr	r3, [pc, #564]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d05b      	beq.n	80060d0 <HAL_RCC_OscConfig+0x108>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d157      	bne.n	80060d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e2d9      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800602c:	d106      	bne.n	800603c <HAL_RCC_OscConfig+0x74>
 800602e:	4b85      	ldr	r3, [pc, #532]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a84      	ldr	r2, [pc, #528]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 8006034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	e01d      	b.n	8006078 <HAL_RCC_OscConfig+0xb0>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006044:	d10c      	bne.n	8006060 <HAL_RCC_OscConfig+0x98>
 8006046:	4b7f      	ldr	r3, [pc, #508]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a7e      	ldr	r2, [pc, #504]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 800604c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	4b7c      	ldr	r3, [pc, #496]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a7b      	ldr	r2, [pc, #492]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 8006058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	e00b      	b.n	8006078 <HAL_RCC_OscConfig+0xb0>
 8006060:	4b78      	ldr	r3, [pc, #480]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a77      	ldr	r2, [pc, #476]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 8006066:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	4b75      	ldr	r3, [pc, #468]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a74      	ldr	r2, [pc, #464]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 8006072:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d013      	beq.n	80060a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006080:	f7fc facc 	bl	800261c <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006086:	e008      	b.n	800609a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006088:	f7fc fac8 	bl	800261c <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b64      	cmp	r3, #100	@ 0x64
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e29e      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800609a:	4b6a      	ldr	r3, [pc, #424]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0f0      	beq.n	8006088 <HAL_RCC_OscConfig+0xc0>
 80060a6:	e014      	b.n	80060d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a8:	f7fc fab8 	bl	800261c <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b0:	f7fc fab4 	bl	800261c <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b64      	cmp	r3, #100	@ 0x64
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e28a      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060c2:	4b60      	ldr	r3, [pc, #384]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f0      	bne.n	80060b0 <HAL_RCC_OscConfig+0xe8>
 80060ce:	e000      	b.n	80060d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d075      	beq.n	80061ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060de:	4b59      	ldr	r3, [pc, #356]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f003 030c 	and.w	r3, r3, #12
 80060e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060e8:	4b56      	ldr	r3, [pc, #344]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f003 0303 	and.w	r3, r3, #3
 80060f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b0c      	cmp	r3, #12
 80060f6:	d102      	bne.n	80060fe <HAL_RCC_OscConfig+0x136>
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d002      	beq.n	8006104 <HAL_RCC_OscConfig+0x13c>
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b04      	cmp	r3, #4
 8006102:	d11f      	bne.n	8006144 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006104:	4b4f      	ldr	r3, [pc, #316]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <HAL_RCC_OscConfig+0x154>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e25d      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800611c:	4b49      	ldr	r3, [pc, #292]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	061b      	lsls	r3, r3, #24
 800612a:	4946      	ldr	r1, [pc, #280]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 800612c:	4313      	orrs	r3, r2
 800612e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006130:	4b45      	ldr	r3, [pc, #276]	@ (8006248 <HAL_RCC_OscConfig+0x280>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4618      	mov	r0, r3
 8006136:	f7fc fa25 	bl	8002584 <HAL_InitTick>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d043      	beq.n	80061c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e249      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d023      	beq.n	8006194 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800614c:	4b3d      	ldr	r3, [pc, #244]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a3c      	ldr	r2, [pc, #240]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 8006152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006158:	f7fc fa60 	bl	800261c <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006160:	f7fc fa5c 	bl	800261c <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e232      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006172:	4b34      	ldr	r3, [pc, #208]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0f0      	beq.n	8006160 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800617e:	4b31      	ldr	r3, [pc, #196]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	061b      	lsls	r3, r3, #24
 800618c:	492d      	ldr	r1, [pc, #180]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 800618e:	4313      	orrs	r3, r2
 8006190:	604b      	str	r3, [r1, #4]
 8006192:	e01a      	b.n	80061ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006194:	4b2b      	ldr	r3, [pc, #172]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a2a      	ldr	r2, [pc, #168]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 800619a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800619e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a0:	f7fc fa3c 	bl	800261c <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061a8:	f7fc fa38 	bl	800261c <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e20e      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061ba:	4b22      	ldr	r3, [pc, #136]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f0      	bne.n	80061a8 <HAL_RCC_OscConfig+0x1e0>
 80061c6:	e000      	b.n	80061ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d041      	beq.n	800625a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d01c      	beq.n	8006218 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061de:	4b19      	ldr	r3, [pc, #100]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 80061e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061e4:	4a17      	ldr	r2, [pc, #92]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 80061e6:	f043 0301 	orr.w	r3, r3, #1
 80061ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ee:	f7fc fa15 	bl	800261c <HAL_GetTick>
 80061f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061f4:	e008      	b.n	8006208 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061f6:	f7fc fa11 	bl	800261c <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e1e7      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006208:	4b0e      	ldr	r3, [pc, #56]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 800620a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0ef      	beq.n	80061f6 <HAL_RCC_OscConfig+0x22e>
 8006216:	e020      	b.n	800625a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006218:	4b0a      	ldr	r3, [pc, #40]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 800621a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800621e:	4a09      	ldr	r2, [pc, #36]	@ (8006244 <HAL_RCC_OscConfig+0x27c>)
 8006220:	f023 0301 	bic.w	r3, r3, #1
 8006224:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006228:	f7fc f9f8 	bl	800261c <HAL_GetTick>
 800622c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800622e:	e00d      	b.n	800624c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006230:	f7fc f9f4 	bl	800261c <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d906      	bls.n	800624c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e1ca      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
 8006242:	bf00      	nop
 8006244:	40021000 	.word	0x40021000
 8006248:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800624c:	4b8c      	ldr	r3, [pc, #560]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 800624e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1ea      	bne.n	8006230 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 80a6 	beq.w	80063b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006268:	2300      	movs	r3, #0
 800626a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800626c:	4b84      	ldr	r3, [pc, #528]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 800626e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <HAL_RCC_OscConfig+0x2b4>
 8006278:	2301      	movs	r3, #1
 800627a:	e000      	b.n	800627e <HAL_RCC_OscConfig+0x2b6>
 800627c:	2300      	movs	r3, #0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00d      	beq.n	800629e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006282:	4b7f      	ldr	r3, [pc, #508]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 8006284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006286:	4a7e      	ldr	r2, [pc, #504]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 8006288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800628c:	6593      	str	r3, [r2, #88]	@ 0x58
 800628e:	4b7c      	ldr	r3, [pc, #496]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 8006290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800629a:	2301      	movs	r3, #1
 800629c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800629e:	4b79      	ldr	r3, [pc, #484]	@ (8006484 <HAL_RCC_OscConfig+0x4bc>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d118      	bne.n	80062dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062aa:	4b76      	ldr	r3, [pc, #472]	@ (8006484 <HAL_RCC_OscConfig+0x4bc>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a75      	ldr	r2, [pc, #468]	@ (8006484 <HAL_RCC_OscConfig+0x4bc>)
 80062b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062b6:	f7fc f9b1 	bl	800261c <HAL_GetTick>
 80062ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062bc:	e008      	b.n	80062d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062be:	f7fc f9ad 	bl	800261c <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d901      	bls.n	80062d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e183      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062d0:	4b6c      	ldr	r3, [pc, #432]	@ (8006484 <HAL_RCC_OscConfig+0x4bc>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0f0      	beq.n	80062be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d108      	bne.n	80062f6 <HAL_RCC_OscConfig+0x32e>
 80062e4:	4b66      	ldr	r3, [pc, #408]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 80062e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ea:	4a65      	ldr	r2, [pc, #404]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 80062ec:	f043 0301 	orr.w	r3, r3, #1
 80062f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062f4:	e024      	b.n	8006340 <HAL_RCC_OscConfig+0x378>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2b05      	cmp	r3, #5
 80062fc:	d110      	bne.n	8006320 <HAL_RCC_OscConfig+0x358>
 80062fe:	4b60      	ldr	r3, [pc, #384]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 8006300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006304:	4a5e      	ldr	r2, [pc, #376]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 8006306:	f043 0304 	orr.w	r3, r3, #4
 800630a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800630e:	4b5c      	ldr	r3, [pc, #368]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 8006310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006314:	4a5a      	ldr	r2, [pc, #360]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 8006316:	f043 0301 	orr.w	r3, r3, #1
 800631a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800631e:	e00f      	b.n	8006340 <HAL_RCC_OscConfig+0x378>
 8006320:	4b57      	ldr	r3, [pc, #348]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 8006322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006326:	4a56      	ldr	r2, [pc, #344]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 8006328:	f023 0301 	bic.w	r3, r3, #1
 800632c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006330:	4b53      	ldr	r3, [pc, #332]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 8006332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006336:	4a52      	ldr	r2, [pc, #328]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 8006338:	f023 0304 	bic.w	r3, r3, #4
 800633c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d016      	beq.n	8006376 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006348:	f7fc f968 	bl	800261c <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800634e:	e00a      	b.n	8006366 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006350:	f7fc f964 	bl	800261c <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800635e:	4293      	cmp	r3, r2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e138      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006366:	4b46      	ldr	r3, [pc, #280]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 8006368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0ed      	beq.n	8006350 <HAL_RCC_OscConfig+0x388>
 8006374:	e015      	b.n	80063a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006376:	f7fc f951 	bl	800261c <HAL_GetTick>
 800637a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800637c:	e00a      	b.n	8006394 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800637e:	f7fc f94d 	bl	800261c <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800638c:	4293      	cmp	r3, r2
 800638e:	d901      	bls.n	8006394 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e121      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006394:	4b3a      	ldr	r3, [pc, #232]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 8006396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1ed      	bne.n	800637e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063a2:	7ffb      	ldrb	r3, [r7, #31]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d105      	bne.n	80063b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063a8:	4b35      	ldr	r3, [pc, #212]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 80063aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ac:	4a34      	ldr	r2, [pc, #208]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 80063ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d03c      	beq.n	800643a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01c      	beq.n	8006402 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063c8:	4b2d      	ldr	r3, [pc, #180]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 80063ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 80063d0:	f043 0301 	orr.w	r3, r3, #1
 80063d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d8:	f7fc f920 	bl	800261c <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063e0:	f7fc f91c 	bl	800261c <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e0f2      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063f2:	4b23      	ldr	r3, [pc, #140]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 80063f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d0ef      	beq.n	80063e0 <HAL_RCC_OscConfig+0x418>
 8006400:	e01b      	b.n	800643a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006402:	4b1f      	ldr	r3, [pc, #124]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 8006404:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006408:	4a1d      	ldr	r2, [pc, #116]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 800640a:	f023 0301 	bic.w	r3, r3, #1
 800640e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006412:	f7fc f903 	bl	800261c <HAL_GetTick>
 8006416:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006418:	e008      	b.n	800642c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800641a:	f7fc f8ff 	bl	800261c <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e0d5      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800642c:	4b14      	ldr	r3, [pc, #80]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 800642e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1ef      	bne.n	800641a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 80c9 	beq.w	80065d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006444:	4b0e      	ldr	r3, [pc, #56]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f003 030c 	and.w	r3, r3, #12
 800644c:	2b0c      	cmp	r3, #12
 800644e:	f000 8083 	beq.w	8006558 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d15e      	bne.n	8006518 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800645a:	4b09      	ldr	r3, [pc, #36]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a08      	ldr	r2, [pc, #32]	@ (8006480 <HAL_RCC_OscConfig+0x4b8>)
 8006460:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006466:	f7fc f8d9 	bl	800261c <HAL_GetTick>
 800646a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800646c:	e00c      	b.n	8006488 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800646e:	f7fc f8d5 	bl	800261c <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	2b02      	cmp	r3, #2
 800647a:	d905      	bls.n	8006488 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e0ab      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
 8006480:	40021000 	.word	0x40021000
 8006484:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006488:	4b55      	ldr	r3, [pc, #340]	@ (80065e0 <HAL_RCC_OscConfig+0x618>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1ec      	bne.n	800646e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006494:	4b52      	ldr	r3, [pc, #328]	@ (80065e0 <HAL_RCC_OscConfig+0x618>)
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	4b52      	ldr	r3, [pc, #328]	@ (80065e4 <HAL_RCC_OscConfig+0x61c>)
 800649a:	4013      	ands	r3, r2
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6a11      	ldr	r1, [r2, #32]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064a4:	3a01      	subs	r2, #1
 80064a6:	0112      	lsls	r2, r2, #4
 80064a8:	4311      	orrs	r1, r2
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80064ae:	0212      	lsls	r2, r2, #8
 80064b0:	4311      	orrs	r1, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80064b6:	0852      	lsrs	r2, r2, #1
 80064b8:	3a01      	subs	r2, #1
 80064ba:	0552      	lsls	r2, r2, #21
 80064bc:	4311      	orrs	r1, r2
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80064c2:	0852      	lsrs	r2, r2, #1
 80064c4:	3a01      	subs	r2, #1
 80064c6:	0652      	lsls	r2, r2, #25
 80064c8:	4311      	orrs	r1, r2
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80064ce:	06d2      	lsls	r2, r2, #27
 80064d0:	430a      	orrs	r2, r1
 80064d2:	4943      	ldr	r1, [pc, #268]	@ (80065e0 <HAL_RCC_OscConfig+0x618>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064d8:	4b41      	ldr	r3, [pc, #260]	@ (80065e0 <HAL_RCC_OscConfig+0x618>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a40      	ldr	r2, [pc, #256]	@ (80065e0 <HAL_RCC_OscConfig+0x618>)
 80064de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064e4:	4b3e      	ldr	r3, [pc, #248]	@ (80065e0 <HAL_RCC_OscConfig+0x618>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	4a3d      	ldr	r2, [pc, #244]	@ (80065e0 <HAL_RCC_OscConfig+0x618>)
 80064ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f0:	f7fc f894 	bl	800261c <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064f8:	f7fc f890 	bl	800261c <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e066      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800650a:	4b35      	ldr	r3, [pc, #212]	@ (80065e0 <HAL_RCC_OscConfig+0x618>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f0      	beq.n	80064f8 <HAL_RCC_OscConfig+0x530>
 8006516:	e05e      	b.n	80065d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006518:	4b31      	ldr	r3, [pc, #196]	@ (80065e0 <HAL_RCC_OscConfig+0x618>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a30      	ldr	r2, [pc, #192]	@ (80065e0 <HAL_RCC_OscConfig+0x618>)
 800651e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006524:	f7fc f87a 	bl	800261c <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800652c:	f7fc f876 	bl	800261c <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e04c      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800653e:	4b28      	ldr	r3, [pc, #160]	@ (80065e0 <HAL_RCC_OscConfig+0x618>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1f0      	bne.n	800652c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800654a:	4b25      	ldr	r3, [pc, #148]	@ (80065e0 <HAL_RCC_OscConfig+0x618>)
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	4924      	ldr	r1, [pc, #144]	@ (80065e0 <HAL_RCC_OscConfig+0x618>)
 8006550:	4b25      	ldr	r3, [pc, #148]	@ (80065e8 <HAL_RCC_OscConfig+0x620>)
 8006552:	4013      	ands	r3, r2
 8006554:	60cb      	str	r3, [r1, #12]
 8006556:	e03e      	b.n	80065d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d101      	bne.n	8006564 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e039      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006564:	4b1e      	ldr	r3, [pc, #120]	@ (80065e0 <HAL_RCC_OscConfig+0x618>)
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f003 0203 	and.w	r2, r3, #3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	429a      	cmp	r2, r3
 8006576:	d12c      	bne.n	80065d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006582:	3b01      	subs	r3, #1
 8006584:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006586:	429a      	cmp	r2, r3
 8006588:	d123      	bne.n	80065d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006594:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006596:	429a      	cmp	r2, r3
 8006598:	d11b      	bne.n	80065d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d113      	bne.n	80065d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b4:	085b      	lsrs	r3, r3, #1
 80065b6:	3b01      	subs	r3, #1
 80065b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d109      	bne.n	80065d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065c8:	085b      	lsrs	r3, r3, #1
 80065ca:	3b01      	subs	r3, #1
 80065cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d001      	beq.n	80065d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3720      	adds	r7, #32
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	40021000 	.word	0x40021000
 80065e4:	019f800c 	.word	0x019f800c
 80065e8:	feeefffc 	.word	0xfeeefffc

080065ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e11e      	b.n	8006842 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006604:	4b91      	ldr	r3, [pc, #580]	@ (800684c <HAL_RCC_ClockConfig+0x260>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 030f 	and.w	r3, r3, #15
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d910      	bls.n	8006634 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006612:	4b8e      	ldr	r3, [pc, #568]	@ (800684c <HAL_RCC_ClockConfig+0x260>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f023 020f 	bic.w	r2, r3, #15
 800661a:	498c      	ldr	r1, [pc, #560]	@ (800684c <HAL_RCC_ClockConfig+0x260>)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	4313      	orrs	r3, r2
 8006620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006622:	4b8a      	ldr	r3, [pc, #552]	@ (800684c <HAL_RCC_ClockConfig+0x260>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 030f 	and.w	r3, r3, #15
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d001      	beq.n	8006634 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e106      	b.n	8006842 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d073      	beq.n	8006728 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b03      	cmp	r3, #3
 8006646:	d129      	bne.n	800669c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006648:	4b81      	ldr	r3, [pc, #516]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e0f4      	b.n	8006842 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006658:	f000 f9ac 	bl	80069b4 <RCC_GetSysClockFreqFromPLLSource>
 800665c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	4a7c      	ldr	r2, [pc, #496]	@ (8006854 <HAL_RCC_ClockConfig+0x268>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d93f      	bls.n	80066e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006666:	4b7a      	ldr	r3, [pc, #488]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800667a:	2b00      	cmp	r3, #0
 800667c:	d033      	beq.n	80066e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006682:	2b00      	cmp	r3, #0
 8006684:	d12f      	bne.n	80066e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006686:	4b72      	ldr	r3, [pc, #456]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800668e:	4a70      	ldr	r2, [pc, #448]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 8006690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006694:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006696:	2380      	movs	r3, #128	@ 0x80
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	e024      	b.n	80066e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d107      	bne.n	80066b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d109      	bne.n	80066c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e0c6      	b.n	8006842 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066b4:	4b66      	ldr	r3, [pc, #408]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e0be      	b.n	8006842 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80066c4:	f000 f914 	bl	80068f0 <HAL_RCC_GetSysClockFreq>
 80066c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	4a61      	ldr	r2, [pc, #388]	@ (8006854 <HAL_RCC_ClockConfig+0x268>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d909      	bls.n	80066e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80066d2:	4b5f      	ldr	r3, [pc, #380]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066da:	4a5d      	ldr	r2, [pc, #372]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 80066dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80066e2:	2380      	movs	r3, #128	@ 0x80
 80066e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066e6:	4b5a      	ldr	r3, [pc, #360]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f023 0203 	bic.w	r2, r3, #3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	4957      	ldr	r1, [pc, #348]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066f8:	f7fb ff90 	bl	800261c <HAL_GetTick>
 80066fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066fe:	e00a      	b.n	8006716 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006700:	f7fb ff8c 	bl	800261c <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800670e:	4293      	cmp	r3, r2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e095      	b.n	8006842 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006716:	4b4e      	ldr	r3, [pc, #312]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 020c 	and.w	r2, r3, #12
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	429a      	cmp	r2, r3
 8006726:	d1eb      	bne.n	8006700 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d023      	beq.n	800677c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006740:	4b43      	ldr	r3, [pc, #268]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	4a42      	ldr	r2, [pc, #264]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 8006746:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800674a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	2b00      	cmp	r3, #0
 8006756:	d007      	beq.n	8006768 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006758:	4b3d      	ldr	r3, [pc, #244]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006760:	4a3b      	ldr	r2, [pc, #236]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 8006762:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006766:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006768:	4b39      	ldr	r3, [pc, #228]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	4936      	ldr	r1, [pc, #216]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 8006776:	4313      	orrs	r3, r2
 8006778:	608b      	str	r3, [r1, #8]
 800677a:	e008      	b.n	800678e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	2b80      	cmp	r3, #128	@ 0x80
 8006780:	d105      	bne.n	800678e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006782:	4b33      	ldr	r3, [pc, #204]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	4a32      	ldr	r2, [pc, #200]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 8006788:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800678c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800678e:	4b2f      	ldr	r3, [pc, #188]	@ (800684c <HAL_RCC_ClockConfig+0x260>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d21d      	bcs.n	80067d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800679c:	4b2b      	ldr	r3, [pc, #172]	@ (800684c <HAL_RCC_ClockConfig+0x260>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f023 020f 	bic.w	r2, r3, #15
 80067a4:	4929      	ldr	r1, [pc, #164]	@ (800684c <HAL_RCC_ClockConfig+0x260>)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80067ac:	f7fb ff36 	bl	800261c <HAL_GetTick>
 80067b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b2:	e00a      	b.n	80067ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067b4:	f7fb ff32 	bl	800261c <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e03b      	b.n	8006842 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ca:	4b20      	ldr	r3, [pc, #128]	@ (800684c <HAL_RCC_ClockConfig+0x260>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d1ed      	bne.n	80067b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	4917      	ldr	r1, [pc, #92]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d009      	beq.n	8006816 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006802:	4b13      	ldr	r3, [pc, #76]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	490f      	ldr	r1, [pc, #60]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 8006812:	4313      	orrs	r3, r2
 8006814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006816:	f000 f86b 	bl	80068f0 <HAL_RCC_GetSysClockFreq>
 800681a:	4602      	mov	r2, r0
 800681c:	4b0c      	ldr	r3, [pc, #48]	@ (8006850 <HAL_RCC_ClockConfig+0x264>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	091b      	lsrs	r3, r3, #4
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	490c      	ldr	r1, [pc, #48]	@ (8006858 <HAL_RCC_ClockConfig+0x26c>)
 8006828:	5ccb      	ldrb	r3, [r1, r3]
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	fa22 f303 	lsr.w	r3, r2, r3
 8006832:	4a0a      	ldr	r2, [pc, #40]	@ (800685c <HAL_RCC_ClockConfig+0x270>)
 8006834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006836:	4b0a      	ldr	r3, [pc, #40]	@ (8006860 <HAL_RCC_ClockConfig+0x274>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4618      	mov	r0, r3
 800683c:	f7fb fea2 	bl	8002584 <HAL_InitTick>
 8006840:	4603      	mov	r3, r0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	40022000 	.word	0x40022000
 8006850:	40021000 	.word	0x40021000
 8006854:	04c4b400 	.word	0x04c4b400
 8006858:	0800ec08 	.word	0x0800ec08
 800685c:	20000000 	.word	0x20000000
 8006860:	20000004 	.word	0x20000004

08006864 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08c      	sub	sp, #48	@ 0x30
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8006870:	2302      	movs	r3, #2
 8006872:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006874:	2303      	movs	r3, #3
 8006876:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8006878:	2300      	movs	r3, #0
 800687a:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006882:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	0c1b      	lsrs	r3, r3, #16
 8006888:	f003 030f 	and.w	r3, r3, #15
 800688c:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8006890:	029b      	lsls	r3, r3, #10
 8006892:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	0c1b      	lsrs	r3, r3, #16
 8006898:	f003 030f 	and.w	r3, r3, #15
 800689c:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800689e:	4b13      	ldr	r3, [pc, #76]	@ (80068ec <HAL_RCC_MCOConfig+0x88>)
 80068a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068a2:	2101      	movs	r1, #1
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	fa01 f303 	lsl.w	r3, r1, r3
 80068aa:	4910      	ldr	r1, [pc, #64]	@ (80068ec <HAL_RCC_MCOConfig+0x88>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	0d1b      	lsrs	r3, r3, #20
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80068be:	f107 0310 	add.w	r3, r7, #16
 80068c2:	4619      	mov	r1, r3
 80068c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068c6:	f7fd fbfd 	bl	80040c4 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 80068ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d109      	bne.n	80068e4 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 80068d0:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <HAL_RCC_MCOConfig+0x88>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	430b      	orrs	r3, r1
 80068de:	4903      	ldr	r1, [pc, #12]	@ (80068ec <HAL_RCC_MCOConfig+0x88>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	608b      	str	r3, [r1, #8]
  }
}
 80068e4:	bf00      	nop
 80068e6:	3730      	adds	r7, #48	@ 0x30
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	40021000 	.word	0x40021000

080068f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80068f6:	4b2c      	ldr	r3, [pc, #176]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f003 030c 	and.w	r3, r3, #12
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d102      	bne.n	8006908 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006902:	4b2a      	ldr	r3, [pc, #168]	@ (80069ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8006904:	613b      	str	r3, [r7, #16]
 8006906:	e047      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006908:	4b27      	ldr	r3, [pc, #156]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f003 030c 	and.w	r3, r3, #12
 8006910:	2b08      	cmp	r3, #8
 8006912:	d102      	bne.n	800691a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006914:	4b26      	ldr	r3, [pc, #152]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006916:	613b      	str	r3, [r7, #16]
 8006918:	e03e      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800691a:	4b23      	ldr	r3, [pc, #140]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 030c 	and.w	r3, r3, #12
 8006922:	2b0c      	cmp	r3, #12
 8006924:	d136      	bne.n	8006994 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006926:	4b20      	ldr	r3, [pc, #128]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006930:	4b1d      	ldr	r3, [pc, #116]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	091b      	lsrs	r3, r3, #4
 8006936:	f003 030f 	and.w	r3, r3, #15
 800693a:	3301      	adds	r3, #1
 800693c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b03      	cmp	r3, #3
 8006942:	d10c      	bne.n	800695e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006944:	4a1a      	ldr	r2, [pc, #104]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	fbb2 f3f3 	udiv	r3, r2, r3
 800694c:	4a16      	ldr	r2, [pc, #88]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800694e:	68d2      	ldr	r2, [r2, #12]
 8006950:	0a12      	lsrs	r2, r2, #8
 8006952:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006956:	fb02 f303 	mul.w	r3, r2, r3
 800695a:	617b      	str	r3, [r7, #20]
      break;
 800695c:	e00c      	b.n	8006978 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800695e:	4a13      	ldr	r2, [pc, #76]	@ (80069ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	fbb2 f3f3 	udiv	r3, r2, r3
 8006966:	4a10      	ldr	r2, [pc, #64]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006968:	68d2      	ldr	r2, [r2, #12]
 800696a:	0a12      	lsrs	r2, r2, #8
 800696c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006970:	fb02 f303 	mul.w	r3, r2, r3
 8006974:	617b      	str	r3, [r7, #20]
      break;
 8006976:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006978:	4b0b      	ldr	r3, [pc, #44]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	0e5b      	lsrs	r3, r3, #25
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	3301      	adds	r3, #1
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	e001      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006998:	693b      	ldr	r3, [r7, #16]
}
 800699a:	4618      	mov	r0, r3
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40021000 	.word	0x40021000
 80069ac:	00f42400 	.word	0x00f42400
 80069b0:	02dc6c00 	.word	0x02dc6c00

080069b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80069ba:	4b1e      	ldr	r3, [pc, #120]	@ (8006a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	091b      	lsrs	r3, r3, #4
 80069ca:	f003 030f 	and.w	r3, r3, #15
 80069ce:	3301      	adds	r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d10c      	bne.n	80069f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069d8:	4a17      	ldr	r2, [pc, #92]	@ (8006a38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e0:	4a14      	ldr	r2, [pc, #80]	@ (8006a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069e2:	68d2      	ldr	r2, [r2, #12]
 80069e4:	0a12      	lsrs	r2, r2, #8
 80069e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069ea:	fb02 f303 	mul.w	r3, r2, r3
 80069ee:	617b      	str	r3, [r7, #20]
    break;
 80069f0:	e00c      	b.n	8006a0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069f2:	4a12      	ldr	r2, [pc, #72]	@ (8006a3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069fc:	68d2      	ldr	r2, [r2, #12]
 80069fe:	0a12      	lsrs	r2, r2, #8
 8006a00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a04:	fb02 f303 	mul.w	r3, r2, r3
 8006a08:	617b      	str	r3, [r7, #20]
    break;
 8006a0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a0c:	4b09      	ldr	r3, [pc, #36]	@ (8006a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	0e5b      	lsrs	r3, r3, #25
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	3301      	adds	r3, #1
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006a26:	687b      	ldr	r3, [r7, #4]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	371c      	adds	r7, #28
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	40021000 	.word	0x40021000
 8006a38:	02dc6c00 	.word	0x02dc6c00
 8006a3c:	00f42400 	.word	0x00f42400

08006a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a48:	2300      	movs	r3, #0
 8006a4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8098 	beq.w	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a62:	4b43      	ldr	r3, [pc, #268]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10d      	bne.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a6e:	4b40      	ldr	r3, [pc, #256]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a72:	4a3f      	ldr	r2, [pc, #252]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a82:	60bb      	str	r3, [r7, #8]
 8006a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a86:	2301      	movs	r3, #1
 8006a88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a8a:	4b3a      	ldr	r3, [pc, #232]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a39      	ldr	r2, [pc, #228]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a96:	f7fb fdc1 	bl	800261c <HAL_GetTick>
 8006a9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a9c:	e009      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a9e:	f7fb fdbd 	bl	800261c <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d902      	bls.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	74fb      	strb	r3, [r7, #19]
        break;
 8006ab0:	e005      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ab2:	4b30      	ldr	r3, [pc, #192]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0ef      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006abe:	7cfb      	ldrb	r3, [r7, #19]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d159      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ace:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d01e      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d019      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ae0:	4b23      	ldr	r3, [pc, #140]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006aec:	4b20      	ldr	r3, [pc, #128]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af2:	4a1f      	ldr	r2, [pc, #124]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006afc:	4b1c      	ldr	r3, [pc, #112]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b02:	4a1b      	ldr	r2, [pc, #108]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b0c:	4a18      	ldr	r2, [pc, #96]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d016      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1e:	f7fb fd7d 	bl	800261c <HAL_GetTick>
 8006b22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b24:	e00b      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b26:	f7fb fd79 	bl	800261c <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d902      	bls.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	74fb      	strb	r3, [r7, #19]
            break;
 8006b3c:	e006      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0ec      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006b4c:	7cfb      	ldrb	r3, [r7, #19]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10b      	bne.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b52:	4b07      	ldr	r3, [pc, #28]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b60:	4903      	ldr	r1, [pc, #12]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006b68:	e008      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b6a:	7cfb      	ldrb	r3, [r7, #19]
 8006b6c:	74bb      	strb	r3, [r7, #18]
 8006b6e:	e005      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006b70:	40021000 	.word	0x40021000
 8006b74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b78:	7cfb      	ldrb	r3, [r7, #19]
 8006b7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b7c:	7c7b      	ldrb	r3, [r7, #17]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d105      	bne.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b82:	4ba7      	ldr	r3, [pc, #668]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b86:	4aa6      	ldr	r2, [pc, #664]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b8c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00a      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b9a:	4ba1      	ldr	r3, [pc, #644]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba0:	f023 0203 	bic.w	r2, r3, #3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	499d      	ldr	r1, [pc, #628]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00a      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006bbc:	4b98      	ldr	r3, [pc, #608]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc2:	f023 020c 	bic.w	r2, r3, #12
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	4995      	ldr	r1, [pc, #596]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0304 	and.w	r3, r3, #4
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00a      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006bde:	4b90      	ldr	r3, [pc, #576]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	498c      	ldr	r1, [pc, #560]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c00:	4b87      	ldr	r3, [pc, #540]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	4984      	ldr	r1, [pc, #528]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0310 	and.w	r3, r3, #16
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c22:	4b7f      	ldr	r3, [pc, #508]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	497b      	ldr	r1, [pc, #492]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0320 	and.w	r3, r3, #32
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00a      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c44:	4b76      	ldr	r3, [pc, #472]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c4a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	4973      	ldr	r1, [pc, #460]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c66:	4b6e      	ldr	r3, [pc, #440]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	496a      	ldr	r1, [pc, #424]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00a      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c88:	4b65      	ldr	r3, [pc, #404]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c8e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	4962      	ldr	r1, [pc, #392]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006caa:	4b5d      	ldr	r3, [pc, #372]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb8:	4959      	ldr	r1, [pc, #356]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ccc:	4b54      	ldr	r3, [pc, #336]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cd2:	f023 0203 	bic.w	r2, r3, #3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cda:	4951      	ldr	r1, [pc, #324]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cee:	4b4c      	ldr	r3, [pc, #304]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cf4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfc:	4948      	ldr	r1, [pc, #288]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d015      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d10:	4b43      	ldr	r3, [pc, #268]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1e:	4940      	ldr	r1, [pc, #256]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d2e:	d105      	bne.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d30:	4b3b      	ldr	r3, [pc, #236]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	4a3a      	ldr	r2, [pc, #232]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d015      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006d48:	4b35      	ldr	r3, [pc, #212]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d56:	4932      	ldr	r1, [pc, #200]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d66:	d105      	bne.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d68:	4b2d      	ldr	r3, [pc, #180]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d72:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d015      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d80:	4b27      	ldr	r3, [pc, #156]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d86:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8e:	4924      	ldr	r1, [pc, #144]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d9e:	d105      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006da0:	4b1f      	ldr	r3, [pc, #124]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	4a1e      	ldr	r2, [pc, #120]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006da6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006daa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d015      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006db8:	4b19      	ldr	r3, [pc, #100]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dbe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc6:	4916      	ldr	r1, [pc, #88]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dd6:	d105      	bne.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dd8:	4b11      	ldr	r3, [pc, #68]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	4a10      	ldr	r2, [pc, #64]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006de2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d019      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006df0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfe:	4908      	ldr	r1, [pc, #32]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e0e:	d109      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e10:	4b03      	ldr	r3, [pc, #12]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	4a02      	ldr	r2, [pc, #8]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e1a:	60d3      	str	r3, [r2, #12]
 8006e1c:	e002      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006e1e:	bf00      	nop
 8006e20:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d015      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006e30:	4b29      	ldr	r3, [pc, #164]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e3e:	4926      	ldr	r1, [pc, #152]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e4e:	d105      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e50:	4b21      	ldr	r3, [pc, #132]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	4a20      	ldr	r2, [pc, #128]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e5a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d015      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006e68:	4b1b      	ldr	r3, [pc, #108]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e76:	4918      	ldr	r1, [pc, #96]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e86:	d105      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e88:	4b13      	ldr	r3, [pc, #76]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	4a12      	ldr	r2, [pc, #72]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e92:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d015      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ea6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eae:	490a      	ldr	r1, [pc, #40]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ebe:	d105      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ec0:	4b05      	ldr	r3, [pc, #20]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	4a04      	ldr	r2, [pc, #16]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ec6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006ecc:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40021000 	.word	0x40021000

08006edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e09d      	b.n	800702a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d108      	bne.n	8006f08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006efe:	d009      	beq.n	8006f14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	61da      	str	r2, [r3, #28]
 8006f06:	e005      	b.n	8006f14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d106      	bne.n	8006f34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fb f8b4 	bl	800209c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f54:	d902      	bls.n	8006f5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f56:	2300      	movs	r3, #0
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	e002      	b.n	8006f62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006f5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006f6a:	d007      	beq.n	8006f7c <HAL_SPI_Init+0xa0>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f74:	d002      	beq.n	8006f7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fbe:	ea42 0103 	orr.w	r1, r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	0c1b      	lsrs	r3, r3, #16
 8006fd8:	f003 0204 	and.w	r2, r3, #4
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe0:	f003 0310 	and.w	r3, r3, #16
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fea:	f003 0308 	and.w	r3, r3, #8
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006ff8:	ea42 0103 	orr.w	r1, r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69da      	ldr	r2, [r3, #28]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007018:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e049      	b.n	80070d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d106      	bne.n	800705e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7fb fa2d 	bl	80024b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2202      	movs	r2, #2
 8007062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	3304      	adds	r3, #4
 800706e:	4619      	mov	r1, r3
 8007070:	4610      	mov	r0, r2
 8007072:	f000 fdb9 	bl	8007be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d001      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e054      	b.n	80071a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2202      	movs	r2, #2
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0201 	orr.w	r2, r2, #1
 800710e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a26      	ldr	r2, [pc, #152]	@ (80071b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d022      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0x80>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007122:	d01d      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0x80>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a22      	ldr	r2, [pc, #136]	@ (80071b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d018      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0x80>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a21      	ldr	r2, [pc, #132]	@ (80071b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d013      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0x80>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a1f      	ldr	r2, [pc, #124]	@ (80071bc <HAL_TIM_Base_Start_IT+0xdc>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00e      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0x80>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a1e      	ldr	r2, [pc, #120]	@ (80071c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d009      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0x80>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a1c      	ldr	r2, [pc, #112]	@ (80071c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0x80>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a1b      	ldr	r2, [pc, #108]	@ (80071c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d115      	bne.n	800718c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	4b19      	ldr	r3, [pc, #100]	@ (80071cc <HAL_TIM_Base_Start_IT+0xec>)
 8007168:	4013      	ands	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b06      	cmp	r3, #6
 8007170:	d015      	beq.n	800719e <HAL_TIM_Base_Start_IT+0xbe>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007178:	d011      	beq.n	800719e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0201 	orr.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800718a:	e008      	b.n	800719e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0201 	orr.w	r2, r2, #1
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	e000      	b.n	80071a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800719e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40012c00 	.word	0x40012c00
 80071b4:	40000400 	.word	0x40000400
 80071b8:	40000800 	.word	0x40000800
 80071bc:	40000c00 	.word	0x40000c00
 80071c0:	40013400 	.word	0x40013400
 80071c4:	40014000 	.word	0x40014000
 80071c8:	40015000 	.word	0x40015000
 80071cc:	00010007 	.word	0x00010007

080071d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e049      	b.n	8007276 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d106      	bne.n	80071fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7fb f93e 	bl	8002478 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	3304      	adds	r3, #4
 800720c:	4619      	mov	r1, r3
 800720e:	4610      	mov	r0, r2
 8007210:	f000 fcea 	bl	8007be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d109      	bne.n	80072a4 <HAL_TIM_PWM_Start+0x24>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b01      	cmp	r3, #1
 800729a:	bf14      	ite	ne
 800729c:	2301      	movne	r3, #1
 800729e:	2300      	moveq	r3, #0
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	e03c      	b.n	800731e <HAL_TIM_PWM_Start+0x9e>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d109      	bne.n	80072be <HAL_TIM_PWM_Start+0x3e>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	bf14      	ite	ne
 80072b6:	2301      	movne	r3, #1
 80072b8:	2300      	moveq	r3, #0
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	e02f      	b.n	800731e <HAL_TIM_PWM_Start+0x9e>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	d109      	bne.n	80072d8 <HAL_TIM_PWM_Start+0x58>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	bf14      	ite	ne
 80072d0:	2301      	movne	r3, #1
 80072d2:	2300      	moveq	r3, #0
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	e022      	b.n	800731e <HAL_TIM_PWM_Start+0x9e>
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2b0c      	cmp	r3, #12
 80072dc:	d109      	bne.n	80072f2 <HAL_TIM_PWM_Start+0x72>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	bf14      	ite	ne
 80072ea:	2301      	movne	r3, #1
 80072ec:	2300      	moveq	r3, #0
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	e015      	b.n	800731e <HAL_TIM_PWM_Start+0x9e>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b10      	cmp	r3, #16
 80072f6:	d109      	bne.n	800730c <HAL_TIM_PWM_Start+0x8c>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b01      	cmp	r3, #1
 8007302:	bf14      	ite	ne
 8007304:	2301      	movne	r3, #1
 8007306:	2300      	moveq	r3, #0
 8007308:	b2db      	uxtb	r3, r3
 800730a:	e008      	b.n	800731e <HAL_TIM_PWM_Start+0x9e>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b01      	cmp	r3, #1
 8007316:	bf14      	ite	ne
 8007318:	2301      	movne	r3, #1
 800731a:	2300      	moveq	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e0a6      	b.n	8007474 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d104      	bne.n	8007336 <HAL_TIM_PWM_Start+0xb6>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007334:	e023      	b.n	800737e <HAL_TIM_PWM_Start+0xfe>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b04      	cmp	r3, #4
 800733a:	d104      	bne.n	8007346 <HAL_TIM_PWM_Start+0xc6>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007344:	e01b      	b.n	800737e <HAL_TIM_PWM_Start+0xfe>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b08      	cmp	r3, #8
 800734a:	d104      	bne.n	8007356 <HAL_TIM_PWM_Start+0xd6>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2202      	movs	r2, #2
 8007350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007354:	e013      	b.n	800737e <HAL_TIM_PWM_Start+0xfe>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b0c      	cmp	r3, #12
 800735a:	d104      	bne.n	8007366 <HAL_TIM_PWM_Start+0xe6>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007364:	e00b      	b.n	800737e <HAL_TIM_PWM_Start+0xfe>
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b10      	cmp	r3, #16
 800736a:	d104      	bne.n	8007376 <HAL_TIM_PWM_Start+0xf6>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007374:	e003      	b.n	800737e <HAL_TIM_PWM_Start+0xfe>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2202      	movs	r2, #2
 800737a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2201      	movs	r2, #1
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	4618      	mov	r0, r3
 8007388:	f001 f8a8 	bl	80084dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a3a      	ldr	r2, [pc, #232]	@ (800747c <HAL_TIM_PWM_Start+0x1fc>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d018      	beq.n	80073c8 <HAL_TIM_PWM_Start+0x148>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a39      	ldr	r2, [pc, #228]	@ (8007480 <HAL_TIM_PWM_Start+0x200>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d013      	beq.n	80073c8 <HAL_TIM_PWM_Start+0x148>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a37      	ldr	r2, [pc, #220]	@ (8007484 <HAL_TIM_PWM_Start+0x204>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d00e      	beq.n	80073c8 <HAL_TIM_PWM_Start+0x148>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a36      	ldr	r2, [pc, #216]	@ (8007488 <HAL_TIM_PWM_Start+0x208>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d009      	beq.n	80073c8 <HAL_TIM_PWM_Start+0x148>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a34      	ldr	r2, [pc, #208]	@ (800748c <HAL_TIM_PWM_Start+0x20c>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d004      	beq.n	80073c8 <HAL_TIM_PWM_Start+0x148>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a33      	ldr	r2, [pc, #204]	@ (8007490 <HAL_TIM_PWM_Start+0x210>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d101      	bne.n	80073cc <HAL_TIM_PWM_Start+0x14c>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <HAL_TIM_PWM_Start+0x14e>
 80073cc:	2300      	movs	r3, #0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d007      	beq.n	80073e2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80073e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a25      	ldr	r2, [pc, #148]	@ (800747c <HAL_TIM_PWM_Start+0x1fc>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d022      	beq.n	8007432 <HAL_TIM_PWM_Start+0x1b2>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f4:	d01d      	beq.n	8007432 <HAL_TIM_PWM_Start+0x1b2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a26      	ldr	r2, [pc, #152]	@ (8007494 <HAL_TIM_PWM_Start+0x214>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d018      	beq.n	8007432 <HAL_TIM_PWM_Start+0x1b2>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a24      	ldr	r2, [pc, #144]	@ (8007498 <HAL_TIM_PWM_Start+0x218>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d013      	beq.n	8007432 <HAL_TIM_PWM_Start+0x1b2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a23      	ldr	r2, [pc, #140]	@ (800749c <HAL_TIM_PWM_Start+0x21c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00e      	beq.n	8007432 <HAL_TIM_PWM_Start+0x1b2>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a19      	ldr	r2, [pc, #100]	@ (8007480 <HAL_TIM_PWM_Start+0x200>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d009      	beq.n	8007432 <HAL_TIM_PWM_Start+0x1b2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a18      	ldr	r2, [pc, #96]	@ (8007484 <HAL_TIM_PWM_Start+0x204>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d004      	beq.n	8007432 <HAL_TIM_PWM_Start+0x1b2>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a18      	ldr	r2, [pc, #96]	@ (8007490 <HAL_TIM_PWM_Start+0x210>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d115      	bne.n	800745e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	4b19      	ldr	r3, [pc, #100]	@ (80074a0 <HAL_TIM_PWM_Start+0x220>)
 800743a:	4013      	ands	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b06      	cmp	r3, #6
 8007442:	d015      	beq.n	8007470 <HAL_TIM_PWM_Start+0x1f0>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800744a:	d011      	beq.n	8007470 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0201 	orr.w	r2, r2, #1
 800745a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800745c:	e008      	b.n	8007470 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f042 0201 	orr.w	r2, r2, #1
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	e000      	b.n	8007472 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007470:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	40012c00 	.word	0x40012c00
 8007480:	40013400 	.word	0x40013400
 8007484:	40014000 	.word	0x40014000
 8007488:	40014400 	.word	0x40014400
 800748c:	40014800 	.word	0x40014800
 8007490:	40015000 	.word	0x40015000
 8007494:	40000400 	.word	0x40000400
 8007498:	40000800 	.word	0x40000800
 800749c:	40000c00 	.word	0x40000c00
 80074a0:	00010007 	.word	0x00010007

080074a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d020      	beq.n	8007508 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01b      	beq.n	8007508 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f06f 0202 	mvn.w	r2, #2
 80074d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	f003 0303 	and.w	r3, r3, #3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fb5c 	bl	8007bac <HAL_TIM_IC_CaptureCallback>
 80074f4:	e005      	b.n	8007502 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fb4e 	bl	8007b98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fb5f 	bl	8007bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f003 0304 	and.w	r3, r3, #4
 800750e:	2b00      	cmp	r3, #0
 8007510:	d020      	beq.n	8007554 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01b      	beq.n	8007554 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f06f 0204 	mvn.w	r2, #4
 8007524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2202      	movs	r2, #2
 800752a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fb36 	bl	8007bac <HAL_TIM_IC_CaptureCallback>
 8007540:	e005      	b.n	800754e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fb28 	bl	8007b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fb39 	bl	8007bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	f003 0308 	and.w	r3, r3, #8
 800755a:	2b00      	cmp	r3, #0
 800755c:	d020      	beq.n	80075a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f003 0308 	and.w	r3, r3, #8
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01b      	beq.n	80075a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f06f 0208 	mvn.w	r2, #8
 8007570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2204      	movs	r2, #4
 8007576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	f003 0303 	and.w	r3, r3, #3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fb10 	bl	8007bac <HAL_TIM_IC_CaptureCallback>
 800758c:	e005      	b.n	800759a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fb02 	bl	8007b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fb13 	bl	8007bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f003 0310 	and.w	r3, r3, #16
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d020      	beq.n	80075ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f003 0310 	and.w	r3, r3, #16
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01b      	beq.n	80075ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f06f 0210 	mvn.w	r2, #16
 80075bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2208      	movs	r2, #8
 80075c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 faea 	bl	8007bac <HAL_TIM_IC_CaptureCallback>
 80075d8:	e005      	b.n	80075e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fadc 	bl	8007b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 faed 	bl	8007bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00c      	beq.n	8007610 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d007      	beq.n	8007610 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f06f 0201 	mvn.w	r2, #1
 8007608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7fa fac8 	bl	8001ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007616:	2b00      	cmp	r3, #0
 8007618:	d104      	bne.n	8007624 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00c      	beq.n	800763e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800762a:	2b00      	cmp	r3, #0
 800762c:	d007      	beq.n	800763e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f001 f8a9 	bl	8008790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00c      	beq.n	8007662 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800764e:	2b00      	cmp	r3, #0
 8007650:	d007      	beq.n	8007662 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800765a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 f8a1 	bl	80087a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00c      	beq.n	8007686 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007672:	2b00      	cmp	r3, #0
 8007674:	d007      	beq.n	8007686 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800767e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 faa7 	bl	8007bd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00c      	beq.n	80076aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b00      	cmp	r3, #0
 8007698:	d007      	beq.n	80076aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f06f 0220 	mvn.w	r2, #32
 80076a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 f869 	bl	800877c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00c      	beq.n	80076ce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d007      	beq.n	80076ce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80076c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 f875 	bl	80087b8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00c      	beq.n	80076f2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d007      	beq.n	80076f2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80076ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 f86d 	bl	80087cc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00c      	beq.n	8007716 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d007      	beq.n	8007716 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800770e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 f865 	bl	80087e0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00c      	beq.n	800773a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d007      	beq.n	800773a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f001 f85d 	bl	80087f4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800773a:	bf00      	nop
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800775a:	2b01      	cmp	r3, #1
 800775c:	d101      	bne.n	8007762 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800775e:	2302      	movs	r3, #2
 8007760:	e0ff      	b.n	8007962 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b14      	cmp	r3, #20
 800776e:	f200 80f0 	bhi.w	8007952 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007772:	a201      	add	r2, pc, #4	@ (adr r2, 8007778 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007778:	080077cd 	.word	0x080077cd
 800777c:	08007953 	.word	0x08007953
 8007780:	08007953 	.word	0x08007953
 8007784:	08007953 	.word	0x08007953
 8007788:	0800780d 	.word	0x0800780d
 800778c:	08007953 	.word	0x08007953
 8007790:	08007953 	.word	0x08007953
 8007794:	08007953 	.word	0x08007953
 8007798:	0800784f 	.word	0x0800784f
 800779c:	08007953 	.word	0x08007953
 80077a0:	08007953 	.word	0x08007953
 80077a4:	08007953 	.word	0x08007953
 80077a8:	0800788f 	.word	0x0800788f
 80077ac:	08007953 	.word	0x08007953
 80077b0:	08007953 	.word	0x08007953
 80077b4:	08007953 	.word	0x08007953
 80077b8:	080078d1 	.word	0x080078d1
 80077bc:	08007953 	.word	0x08007953
 80077c0:	08007953 	.word	0x08007953
 80077c4:	08007953 	.word	0x08007953
 80077c8:	08007911 	.word	0x08007911
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 fabc 	bl	8007d50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0208 	orr.w	r2, r2, #8
 80077e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0204 	bic.w	r2, r2, #4
 80077f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6999      	ldr	r1, [r3, #24]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	691a      	ldr	r2, [r3, #16]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	619a      	str	r2, [r3, #24]
      break;
 800780a:	e0a5      	b.n	8007958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68b9      	ldr	r1, [r7, #8]
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fb36 	bl	8007e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699a      	ldr	r2, [r3, #24]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699a      	ldr	r2, [r3, #24]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6999      	ldr	r1, [r3, #24]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	021a      	lsls	r2, r3, #8
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	619a      	str	r2, [r3, #24]
      break;
 800784c:	e084      	b.n	8007958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	4618      	mov	r0, r3
 8007856:	f000 fba9 	bl	8007fac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	69da      	ldr	r2, [r3, #28]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f042 0208 	orr.w	r2, r2, #8
 8007868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69da      	ldr	r2, [r3, #28]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 0204 	bic.w	r2, r2, #4
 8007878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69d9      	ldr	r1, [r3, #28]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	691a      	ldr	r2, [r3, #16]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	61da      	str	r2, [r3, #28]
      break;
 800788c:	e064      	b.n	8007958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	4618      	mov	r0, r3
 8007896:	f000 fc1b 	bl	80080d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69da      	ldr	r2, [r3, #28]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69da      	ldr	r2, [r3, #28]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69d9      	ldr	r1, [r3, #28]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	021a      	lsls	r2, r3, #8
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	61da      	str	r2, [r3, #28]
      break;
 80078ce:	e043      	b.n	8007958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68b9      	ldr	r1, [r7, #8]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 fc8e 	bl	80081f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f042 0208 	orr.w	r2, r2, #8
 80078ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0204 	bic.w	r2, r2, #4
 80078fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	691a      	ldr	r2, [r3, #16]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800790e:	e023      	b.n	8007958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68b9      	ldr	r1, [r7, #8]
 8007916:	4618      	mov	r0, r3
 8007918:	f000 fcd8 	bl	80082cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800792a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800793a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	021a      	lsls	r2, r3, #8
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007950:	e002      	b.n	8007958 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	75fb      	strb	r3, [r7, #23]
      break;
 8007956:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007960:	7dfb      	ldrb	r3, [r7, #23]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop

0800796c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_TIM_ConfigClockSource+0x1c>
 8007984:	2302      	movs	r3, #2
 8007986:	e0f6      	b.n	8007b76 <HAL_TIM_ConfigClockSource+0x20a>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80079a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80079aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a6f      	ldr	r2, [pc, #444]	@ (8007b80 <HAL_TIM_ConfigClockSource+0x214>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	f000 80c1 	beq.w	8007b4a <HAL_TIM_ConfigClockSource+0x1de>
 80079c8:	4a6d      	ldr	r2, [pc, #436]	@ (8007b80 <HAL_TIM_ConfigClockSource+0x214>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	f200 80c6 	bhi.w	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
 80079d0:	4a6c      	ldr	r2, [pc, #432]	@ (8007b84 <HAL_TIM_ConfigClockSource+0x218>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	f000 80b9 	beq.w	8007b4a <HAL_TIM_ConfigClockSource+0x1de>
 80079d8:	4a6a      	ldr	r2, [pc, #424]	@ (8007b84 <HAL_TIM_ConfigClockSource+0x218>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	f200 80be 	bhi.w	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
 80079e0:	4a69      	ldr	r2, [pc, #420]	@ (8007b88 <HAL_TIM_ConfigClockSource+0x21c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	f000 80b1 	beq.w	8007b4a <HAL_TIM_ConfigClockSource+0x1de>
 80079e8:	4a67      	ldr	r2, [pc, #412]	@ (8007b88 <HAL_TIM_ConfigClockSource+0x21c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	f200 80b6 	bhi.w	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
 80079f0:	4a66      	ldr	r2, [pc, #408]	@ (8007b8c <HAL_TIM_ConfigClockSource+0x220>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	f000 80a9 	beq.w	8007b4a <HAL_TIM_ConfigClockSource+0x1de>
 80079f8:	4a64      	ldr	r2, [pc, #400]	@ (8007b8c <HAL_TIM_ConfigClockSource+0x220>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	f200 80ae 	bhi.w	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
 8007a00:	4a63      	ldr	r2, [pc, #396]	@ (8007b90 <HAL_TIM_ConfigClockSource+0x224>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	f000 80a1 	beq.w	8007b4a <HAL_TIM_ConfigClockSource+0x1de>
 8007a08:	4a61      	ldr	r2, [pc, #388]	@ (8007b90 <HAL_TIM_ConfigClockSource+0x224>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	f200 80a6 	bhi.w	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
 8007a10:	4a60      	ldr	r2, [pc, #384]	@ (8007b94 <HAL_TIM_ConfigClockSource+0x228>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	f000 8099 	beq.w	8007b4a <HAL_TIM_ConfigClockSource+0x1de>
 8007a18:	4a5e      	ldr	r2, [pc, #376]	@ (8007b94 <HAL_TIM_ConfigClockSource+0x228>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	f200 809e 	bhi.w	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
 8007a20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007a24:	f000 8091 	beq.w	8007b4a <HAL_TIM_ConfigClockSource+0x1de>
 8007a28:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007a2c:	f200 8096 	bhi.w	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
 8007a30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a34:	f000 8089 	beq.w	8007b4a <HAL_TIM_ConfigClockSource+0x1de>
 8007a38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a3c:	f200 808e 	bhi.w	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
 8007a40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a44:	d03e      	beq.n	8007ac4 <HAL_TIM_ConfigClockSource+0x158>
 8007a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a4a:	f200 8087 	bhi.w	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
 8007a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a52:	f000 8086 	beq.w	8007b62 <HAL_TIM_ConfigClockSource+0x1f6>
 8007a56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a5a:	d87f      	bhi.n	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
 8007a5c:	2b70      	cmp	r3, #112	@ 0x70
 8007a5e:	d01a      	beq.n	8007a96 <HAL_TIM_ConfigClockSource+0x12a>
 8007a60:	2b70      	cmp	r3, #112	@ 0x70
 8007a62:	d87b      	bhi.n	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
 8007a64:	2b60      	cmp	r3, #96	@ 0x60
 8007a66:	d050      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0x19e>
 8007a68:	2b60      	cmp	r3, #96	@ 0x60
 8007a6a:	d877      	bhi.n	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
 8007a6c:	2b50      	cmp	r3, #80	@ 0x50
 8007a6e:	d03c      	beq.n	8007aea <HAL_TIM_ConfigClockSource+0x17e>
 8007a70:	2b50      	cmp	r3, #80	@ 0x50
 8007a72:	d873      	bhi.n	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
 8007a74:	2b40      	cmp	r3, #64	@ 0x40
 8007a76:	d058      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0x1be>
 8007a78:	2b40      	cmp	r3, #64	@ 0x40
 8007a7a:	d86f      	bhi.n	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
 8007a7c:	2b30      	cmp	r3, #48	@ 0x30
 8007a7e:	d064      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x1de>
 8007a80:	2b30      	cmp	r3, #48	@ 0x30
 8007a82:	d86b      	bhi.n	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	d060      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x1de>
 8007a88:	2b20      	cmp	r3, #32
 8007a8a:	d867      	bhi.n	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d05c      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x1de>
 8007a90:	2b10      	cmp	r3, #16
 8007a92:	d05a      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x1de>
 8007a94:	e062      	b.n	8007b5c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007aa6:	f000 fcf9 	bl	800849c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ab8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	609a      	str	r2, [r3, #8]
      break;
 8007ac2:	e04f      	b.n	8007b64 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ad4:	f000 fce2 	bl	800849c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ae6:	609a      	str	r2, [r3, #8]
      break;
 8007ae8:	e03c      	b.n	8007b64 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007af6:	461a      	mov	r2, r3
 8007af8:	f000 fc54 	bl	80083a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2150      	movs	r1, #80	@ 0x50
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 fcad 	bl	8008462 <TIM_ITRx_SetConfig>
      break;
 8007b08:	e02c      	b.n	8007b64 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b16:	461a      	mov	r2, r3
 8007b18:	f000 fc73 	bl	8008402 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2160      	movs	r1, #96	@ 0x60
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 fc9d 	bl	8008462 <TIM_ITRx_SetConfig>
      break;
 8007b28:	e01c      	b.n	8007b64 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b36:	461a      	mov	r2, r3
 8007b38:	f000 fc34 	bl	80083a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2140      	movs	r1, #64	@ 0x40
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fc8d 	bl	8008462 <TIM_ITRx_SetConfig>
      break;
 8007b48:	e00c      	b.n	8007b64 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4619      	mov	r1, r3
 8007b54:	4610      	mov	r0, r2
 8007b56:	f000 fc84 	bl	8008462 <TIM_ITRx_SetConfig>
      break;
 8007b5a:	e003      	b.n	8007b64 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b60:	e000      	b.n	8007b64 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	00100070 	.word	0x00100070
 8007b84:	00100060 	.word	0x00100060
 8007b88:	00100050 	.word	0x00100050
 8007b8c:	00100040 	.word	0x00100040
 8007b90:	00100030 	.word	0x00100030
 8007b94:	00100020 	.word	0x00100020

08007b98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a4c      	ldr	r2, [pc, #304]	@ (8007d2c <TIM_Base_SetConfig+0x144>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d017      	beq.n	8007c30 <TIM_Base_SetConfig+0x48>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c06:	d013      	beq.n	8007c30 <TIM_Base_SetConfig+0x48>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a49      	ldr	r2, [pc, #292]	@ (8007d30 <TIM_Base_SetConfig+0x148>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d00f      	beq.n	8007c30 <TIM_Base_SetConfig+0x48>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a48      	ldr	r2, [pc, #288]	@ (8007d34 <TIM_Base_SetConfig+0x14c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d00b      	beq.n	8007c30 <TIM_Base_SetConfig+0x48>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a47      	ldr	r2, [pc, #284]	@ (8007d38 <TIM_Base_SetConfig+0x150>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d007      	beq.n	8007c30 <TIM_Base_SetConfig+0x48>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a46      	ldr	r2, [pc, #280]	@ (8007d3c <TIM_Base_SetConfig+0x154>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d003      	beq.n	8007c30 <TIM_Base_SetConfig+0x48>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a45      	ldr	r2, [pc, #276]	@ (8007d40 <TIM_Base_SetConfig+0x158>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d108      	bne.n	8007c42 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a39      	ldr	r2, [pc, #228]	@ (8007d2c <TIM_Base_SetConfig+0x144>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d023      	beq.n	8007c92 <TIM_Base_SetConfig+0xaa>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c50:	d01f      	beq.n	8007c92 <TIM_Base_SetConfig+0xaa>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a36      	ldr	r2, [pc, #216]	@ (8007d30 <TIM_Base_SetConfig+0x148>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d01b      	beq.n	8007c92 <TIM_Base_SetConfig+0xaa>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a35      	ldr	r2, [pc, #212]	@ (8007d34 <TIM_Base_SetConfig+0x14c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d017      	beq.n	8007c92 <TIM_Base_SetConfig+0xaa>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a34      	ldr	r2, [pc, #208]	@ (8007d38 <TIM_Base_SetConfig+0x150>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d013      	beq.n	8007c92 <TIM_Base_SetConfig+0xaa>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a33      	ldr	r2, [pc, #204]	@ (8007d3c <TIM_Base_SetConfig+0x154>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d00f      	beq.n	8007c92 <TIM_Base_SetConfig+0xaa>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a33      	ldr	r2, [pc, #204]	@ (8007d44 <TIM_Base_SetConfig+0x15c>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00b      	beq.n	8007c92 <TIM_Base_SetConfig+0xaa>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a32      	ldr	r2, [pc, #200]	@ (8007d48 <TIM_Base_SetConfig+0x160>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d007      	beq.n	8007c92 <TIM_Base_SetConfig+0xaa>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a31      	ldr	r2, [pc, #196]	@ (8007d4c <TIM_Base_SetConfig+0x164>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d003      	beq.n	8007c92 <TIM_Base_SetConfig+0xaa>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a2c      	ldr	r2, [pc, #176]	@ (8007d40 <TIM_Base_SetConfig+0x158>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d108      	bne.n	8007ca4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a18      	ldr	r2, [pc, #96]	@ (8007d2c <TIM_Base_SetConfig+0x144>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d013      	beq.n	8007cf8 <TIM_Base_SetConfig+0x110>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8007d3c <TIM_Base_SetConfig+0x154>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d00f      	beq.n	8007cf8 <TIM_Base_SetConfig+0x110>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a1a      	ldr	r2, [pc, #104]	@ (8007d44 <TIM_Base_SetConfig+0x15c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00b      	beq.n	8007cf8 <TIM_Base_SetConfig+0x110>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a19      	ldr	r2, [pc, #100]	@ (8007d48 <TIM_Base_SetConfig+0x160>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d007      	beq.n	8007cf8 <TIM_Base_SetConfig+0x110>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a18      	ldr	r2, [pc, #96]	@ (8007d4c <TIM_Base_SetConfig+0x164>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d003      	beq.n	8007cf8 <TIM_Base_SetConfig+0x110>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a13      	ldr	r2, [pc, #76]	@ (8007d40 <TIM_Base_SetConfig+0x158>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d103      	bne.n	8007d00 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	691a      	ldr	r2, [r3, #16]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d105      	bne.n	8007d1e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	f023 0201 	bic.w	r2, r3, #1
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	611a      	str	r2, [r3, #16]
  }
}
 8007d1e:	bf00      	nop
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	40012c00 	.word	0x40012c00
 8007d30:	40000400 	.word	0x40000400
 8007d34:	40000800 	.word	0x40000800
 8007d38:	40000c00 	.word	0x40000c00
 8007d3c:	40013400 	.word	0x40013400
 8007d40:	40015000 	.word	0x40015000
 8007d44:	40014000 	.word	0x40014000
 8007d48:	40014400 	.word	0x40014400
 8007d4c:	40014800 	.word	0x40014800

08007d50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	f023 0201 	bic.w	r2, r3, #1
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 0303 	bic.w	r3, r3, #3
 8007d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f023 0302 	bic.w	r3, r3, #2
 8007d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a30      	ldr	r2, [pc, #192]	@ (8007e6c <TIM_OC1_SetConfig+0x11c>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d013      	beq.n	8007dd8 <TIM_OC1_SetConfig+0x88>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a2f      	ldr	r2, [pc, #188]	@ (8007e70 <TIM_OC1_SetConfig+0x120>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00f      	beq.n	8007dd8 <TIM_OC1_SetConfig+0x88>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a2e      	ldr	r2, [pc, #184]	@ (8007e74 <TIM_OC1_SetConfig+0x124>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d00b      	beq.n	8007dd8 <TIM_OC1_SetConfig+0x88>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a2d      	ldr	r2, [pc, #180]	@ (8007e78 <TIM_OC1_SetConfig+0x128>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d007      	beq.n	8007dd8 <TIM_OC1_SetConfig+0x88>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a2c      	ldr	r2, [pc, #176]	@ (8007e7c <TIM_OC1_SetConfig+0x12c>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d003      	beq.n	8007dd8 <TIM_OC1_SetConfig+0x88>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a2b      	ldr	r2, [pc, #172]	@ (8007e80 <TIM_OC1_SetConfig+0x130>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d10c      	bne.n	8007df2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f023 0308 	bic.w	r3, r3, #8
 8007dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f023 0304 	bic.w	r3, r3, #4
 8007df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a1d      	ldr	r2, [pc, #116]	@ (8007e6c <TIM_OC1_SetConfig+0x11c>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d013      	beq.n	8007e22 <TIM_OC1_SetConfig+0xd2>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8007e70 <TIM_OC1_SetConfig+0x120>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d00f      	beq.n	8007e22 <TIM_OC1_SetConfig+0xd2>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a1b      	ldr	r2, [pc, #108]	@ (8007e74 <TIM_OC1_SetConfig+0x124>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d00b      	beq.n	8007e22 <TIM_OC1_SetConfig+0xd2>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8007e78 <TIM_OC1_SetConfig+0x128>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d007      	beq.n	8007e22 <TIM_OC1_SetConfig+0xd2>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a19      	ldr	r2, [pc, #100]	@ (8007e7c <TIM_OC1_SetConfig+0x12c>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d003      	beq.n	8007e22 <TIM_OC1_SetConfig+0xd2>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a18      	ldr	r2, [pc, #96]	@ (8007e80 <TIM_OC1_SetConfig+0x130>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d111      	bne.n	8007e46 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	621a      	str	r2, [r3, #32]
}
 8007e60:	bf00      	nop
 8007e62:	371c      	adds	r7, #28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	40012c00 	.word	0x40012c00
 8007e70:	40013400 	.word	0x40013400
 8007e74:	40014000 	.word	0x40014000
 8007e78:	40014400 	.word	0x40014400
 8007e7c:	40014800 	.word	0x40014800
 8007e80:	40015000 	.word	0x40015000

08007e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	f023 0210 	bic.w	r2, r3, #16
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	021b      	lsls	r3, r3, #8
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f023 0320 	bic.w	r3, r3, #32
 8007ed2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	011b      	lsls	r3, r3, #4
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8007f94 <TIM_OC2_SetConfig+0x110>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d007      	beq.n	8007ef8 <TIM_OC2_SetConfig+0x74>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a2b      	ldr	r2, [pc, #172]	@ (8007f98 <TIM_OC2_SetConfig+0x114>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d003      	beq.n	8007ef8 <TIM_OC2_SetConfig+0x74>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8007f9c <TIM_OC2_SetConfig+0x118>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d10d      	bne.n	8007f14 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	011b      	lsls	r3, r3, #4
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a1f      	ldr	r2, [pc, #124]	@ (8007f94 <TIM_OC2_SetConfig+0x110>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d013      	beq.n	8007f44 <TIM_OC2_SetConfig+0xc0>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007f98 <TIM_OC2_SetConfig+0x114>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d00f      	beq.n	8007f44 <TIM_OC2_SetConfig+0xc0>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a1e      	ldr	r2, [pc, #120]	@ (8007fa0 <TIM_OC2_SetConfig+0x11c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00b      	beq.n	8007f44 <TIM_OC2_SetConfig+0xc0>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8007fa4 <TIM_OC2_SetConfig+0x120>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d007      	beq.n	8007f44 <TIM_OC2_SetConfig+0xc0>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a1c      	ldr	r2, [pc, #112]	@ (8007fa8 <TIM_OC2_SetConfig+0x124>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d003      	beq.n	8007f44 <TIM_OC2_SetConfig+0xc0>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a17      	ldr	r2, [pc, #92]	@ (8007f9c <TIM_OC2_SetConfig+0x118>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d113      	bne.n	8007f6c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	621a      	str	r2, [r3, #32]
}
 8007f86:	bf00      	nop
 8007f88:	371c      	adds	r7, #28
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	40012c00 	.word	0x40012c00
 8007f98:	40013400 	.word	0x40013400
 8007f9c:	40015000 	.word	0x40015000
 8007fa0:	40014000 	.word	0x40014000
 8007fa4:	40014400 	.word	0x40014400
 8007fa8:	40014800 	.word	0x40014800

08007fac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 0303 	bic.w	r3, r3, #3
 8007fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	021b      	lsls	r3, r3, #8
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	4313      	orrs	r3, r2
 8008004:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a2b      	ldr	r2, [pc, #172]	@ (80080b8 <TIM_OC3_SetConfig+0x10c>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d007      	beq.n	800801e <TIM_OC3_SetConfig+0x72>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a2a      	ldr	r2, [pc, #168]	@ (80080bc <TIM_OC3_SetConfig+0x110>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d003      	beq.n	800801e <TIM_OC3_SetConfig+0x72>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a29      	ldr	r2, [pc, #164]	@ (80080c0 <TIM_OC3_SetConfig+0x114>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d10d      	bne.n	800803a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008024:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	021b      	lsls	r3, r3, #8
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	4313      	orrs	r3, r2
 8008030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a1e      	ldr	r2, [pc, #120]	@ (80080b8 <TIM_OC3_SetConfig+0x10c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d013      	beq.n	800806a <TIM_OC3_SetConfig+0xbe>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a1d      	ldr	r2, [pc, #116]	@ (80080bc <TIM_OC3_SetConfig+0x110>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d00f      	beq.n	800806a <TIM_OC3_SetConfig+0xbe>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a1d      	ldr	r2, [pc, #116]	@ (80080c4 <TIM_OC3_SetConfig+0x118>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d00b      	beq.n	800806a <TIM_OC3_SetConfig+0xbe>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a1c      	ldr	r2, [pc, #112]	@ (80080c8 <TIM_OC3_SetConfig+0x11c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d007      	beq.n	800806a <TIM_OC3_SetConfig+0xbe>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a1b      	ldr	r2, [pc, #108]	@ (80080cc <TIM_OC3_SetConfig+0x120>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d003      	beq.n	800806a <TIM_OC3_SetConfig+0xbe>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a16      	ldr	r2, [pc, #88]	@ (80080c0 <TIM_OC3_SetConfig+0x114>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d113      	bne.n	8008092 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	011b      	lsls	r3, r3, #4
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	4313      	orrs	r3, r2
 8008084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	011b      	lsls	r3, r3, #4
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	4313      	orrs	r3, r2
 8008090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	621a      	str	r2, [r3, #32]
}
 80080ac:	bf00      	nop
 80080ae:	371c      	adds	r7, #28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	40012c00 	.word	0x40012c00
 80080bc:	40013400 	.word	0x40013400
 80080c0:	40015000 	.word	0x40015000
 80080c4:	40014000 	.word	0x40014000
 80080c8:	40014400 	.word	0x40014400
 80080cc:	40014800 	.word	0x40014800

080080d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800810a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	021b      	lsls	r3, r3, #8
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	4313      	orrs	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800811e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	031b      	lsls	r3, r3, #12
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	4313      	orrs	r3, r2
 800812a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a2c      	ldr	r2, [pc, #176]	@ (80081e0 <TIM_OC4_SetConfig+0x110>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d007      	beq.n	8008144 <TIM_OC4_SetConfig+0x74>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a2b      	ldr	r2, [pc, #172]	@ (80081e4 <TIM_OC4_SetConfig+0x114>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d003      	beq.n	8008144 <TIM_OC4_SetConfig+0x74>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a2a      	ldr	r2, [pc, #168]	@ (80081e8 <TIM_OC4_SetConfig+0x118>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d10d      	bne.n	8008160 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800814a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	031b      	lsls	r3, r3, #12
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	4313      	orrs	r3, r2
 8008156:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800815e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a1f      	ldr	r2, [pc, #124]	@ (80081e0 <TIM_OC4_SetConfig+0x110>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d013      	beq.n	8008190 <TIM_OC4_SetConfig+0xc0>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a1e      	ldr	r2, [pc, #120]	@ (80081e4 <TIM_OC4_SetConfig+0x114>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d00f      	beq.n	8008190 <TIM_OC4_SetConfig+0xc0>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a1e      	ldr	r2, [pc, #120]	@ (80081ec <TIM_OC4_SetConfig+0x11c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d00b      	beq.n	8008190 <TIM_OC4_SetConfig+0xc0>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a1d      	ldr	r2, [pc, #116]	@ (80081f0 <TIM_OC4_SetConfig+0x120>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d007      	beq.n	8008190 <TIM_OC4_SetConfig+0xc0>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a1c      	ldr	r2, [pc, #112]	@ (80081f4 <TIM_OC4_SetConfig+0x124>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d003      	beq.n	8008190 <TIM_OC4_SetConfig+0xc0>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a17      	ldr	r2, [pc, #92]	@ (80081e8 <TIM_OC4_SetConfig+0x118>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d113      	bne.n	80081b8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008196:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800819e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	019b      	lsls	r3, r3, #6
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	019b      	lsls	r3, r3, #6
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	621a      	str	r2, [r3, #32]
}
 80081d2:	bf00      	nop
 80081d4:	371c      	adds	r7, #28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	40012c00 	.word	0x40012c00
 80081e4:	40013400 	.word	0x40013400
 80081e8:	40015000 	.word	0x40015000
 80081ec:	40014000 	.word	0x40014000
 80081f0:	40014400 	.word	0x40014400
 80081f4:	40014800 	.word	0x40014800

080081f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a1b      	ldr	r3, [r3, #32]
 800820c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800821e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800822a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	4313      	orrs	r3, r2
 8008234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800823c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	041b      	lsls	r3, r3, #16
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	4313      	orrs	r3, r2
 8008248:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a19      	ldr	r2, [pc, #100]	@ (80082b4 <TIM_OC5_SetConfig+0xbc>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d013      	beq.n	800827a <TIM_OC5_SetConfig+0x82>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a18      	ldr	r2, [pc, #96]	@ (80082b8 <TIM_OC5_SetConfig+0xc0>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d00f      	beq.n	800827a <TIM_OC5_SetConfig+0x82>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a17      	ldr	r2, [pc, #92]	@ (80082bc <TIM_OC5_SetConfig+0xc4>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00b      	beq.n	800827a <TIM_OC5_SetConfig+0x82>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a16      	ldr	r2, [pc, #88]	@ (80082c0 <TIM_OC5_SetConfig+0xc8>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d007      	beq.n	800827a <TIM_OC5_SetConfig+0x82>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a15      	ldr	r2, [pc, #84]	@ (80082c4 <TIM_OC5_SetConfig+0xcc>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d003      	beq.n	800827a <TIM_OC5_SetConfig+0x82>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a14      	ldr	r2, [pc, #80]	@ (80082c8 <TIM_OC5_SetConfig+0xd0>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d109      	bne.n	800828e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008280:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	021b      	lsls	r3, r3, #8
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	4313      	orrs	r3, r2
 800828c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	621a      	str	r2, [r3, #32]
}
 80082a8:	bf00      	nop
 80082aa:	371c      	adds	r7, #28
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	40012c00 	.word	0x40012c00
 80082b8:	40013400 	.word	0x40013400
 80082bc:	40014000 	.word	0x40014000
 80082c0:	40014400 	.word	0x40014400
 80082c4:	40014800 	.word	0x40014800
 80082c8:	40015000 	.word	0x40015000

080082cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b087      	sub	sp, #28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a1b      	ldr	r3, [r3, #32]
 80082e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	021b      	lsls	r3, r3, #8
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	4313      	orrs	r3, r2
 800830a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008312:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	051b      	lsls	r3, r3, #20
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	4313      	orrs	r3, r2
 800831e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a1a      	ldr	r2, [pc, #104]	@ (800838c <TIM_OC6_SetConfig+0xc0>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d013      	beq.n	8008350 <TIM_OC6_SetConfig+0x84>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a19      	ldr	r2, [pc, #100]	@ (8008390 <TIM_OC6_SetConfig+0xc4>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d00f      	beq.n	8008350 <TIM_OC6_SetConfig+0x84>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a18      	ldr	r2, [pc, #96]	@ (8008394 <TIM_OC6_SetConfig+0xc8>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d00b      	beq.n	8008350 <TIM_OC6_SetConfig+0x84>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a17      	ldr	r2, [pc, #92]	@ (8008398 <TIM_OC6_SetConfig+0xcc>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d007      	beq.n	8008350 <TIM_OC6_SetConfig+0x84>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a16      	ldr	r2, [pc, #88]	@ (800839c <TIM_OC6_SetConfig+0xd0>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d003      	beq.n	8008350 <TIM_OC6_SetConfig+0x84>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a15      	ldr	r2, [pc, #84]	@ (80083a0 <TIM_OC6_SetConfig+0xd4>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d109      	bne.n	8008364 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008356:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	029b      	lsls	r3, r3, #10
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	621a      	str	r2, [r3, #32]
}
 800837e:	bf00      	nop
 8008380:	371c      	adds	r7, #28
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	40012c00 	.word	0x40012c00
 8008390:	40013400 	.word	0x40013400
 8008394:	40014000 	.word	0x40014000
 8008398:	40014400 	.word	0x40014400
 800839c:	40014800 	.word	0x40014800
 80083a0:	40015000 	.word	0x40015000

080083a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	f023 0201 	bic.w	r2, r3, #1
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	011b      	lsls	r3, r3, #4
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f023 030a 	bic.w	r3, r3, #10
 80083e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	621a      	str	r2, [r3, #32]
}
 80083f6:	bf00      	nop
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008402:	b480      	push	{r7}
 8008404:	b087      	sub	sp, #28
 8008406:	af00      	add	r7, sp, #0
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	f023 0210 	bic.w	r2, r3, #16
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800842c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	031b      	lsls	r3, r3, #12
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	4313      	orrs	r3, r2
 8008436:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800843e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	011b      	lsls	r3, r3, #4
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	4313      	orrs	r3, r2
 8008448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	621a      	str	r2, [r3, #32]
}
 8008456:	bf00      	nop
 8008458:	371c      	adds	r7, #28
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008462:	b480      	push	{r7}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008478:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800847c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4313      	orrs	r3, r2
 8008484:	f043 0307 	orr.w	r3, r3, #7
 8008488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	609a      	str	r2, [r3, #8]
}
 8008490:	bf00      	nop
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	021a      	lsls	r2, r3, #8
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	431a      	orrs	r2, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	609a      	str	r2, [r3, #8]
}
 80084d0:	bf00      	nop
 80084d2:	371c      	adds	r7, #28
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f003 031f 	and.w	r3, r3, #31
 80084ee:	2201      	movs	r2, #1
 80084f0:	fa02 f303 	lsl.w	r3, r2, r3
 80084f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a1a      	ldr	r2, [r3, #32]
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	43db      	mvns	r3, r3
 80084fe:	401a      	ands	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6a1a      	ldr	r2, [r3, #32]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f003 031f 	and.w	r3, r3, #31
 800850e:	6879      	ldr	r1, [r7, #4]
 8008510:	fa01 f303 	lsl.w	r3, r1, r3
 8008514:	431a      	orrs	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	621a      	str	r2, [r3, #32]
}
 800851a:	bf00      	nop
 800851c:	371c      	adds	r7, #28
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
	...

08008528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008538:	2b01      	cmp	r3, #1
 800853a:	d101      	bne.n	8008540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800853c:	2302      	movs	r3, #2
 800853e:	e074      	b.n	800862a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2202      	movs	r2, #2
 800854c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a34      	ldr	r2, [pc, #208]	@ (8008638 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d009      	beq.n	800857e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a33      	ldr	r2, [pc, #204]	@ (800863c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d004      	beq.n	800857e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a31      	ldr	r2, [pc, #196]	@ (8008640 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d108      	bne.n	8008590 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008584:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	4313      	orrs	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800859a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a21      	ldr	r2, [pc, #132]	@ (8008638 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d022      	beq.n	80085fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085c0:	d01d      	beq.n	80085fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a1f      	ldr	r2, [pc, #124]	@ (8008644 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d018      	beq.n	80085fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008648 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d013      	beq.n	80085fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a1c      	ldr	r2, [pc, #112]	@ (800864c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d00e      	beq.n	80085fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a15      	ldr	r2, [pc, #84]	@ (800863c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d009      	beq.n	80085fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a18      	ldr	r2, [pc, #96]	@ (8008650 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d004      	beq.n	80085fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a11      	ldr	r2, [pc, #68]	@ (8008640 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d10c      	bne.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008604:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	4313      	orrs	r3, r2
 800860e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	40012c00 	.word	0x40012c00
 800863c:	40013400 	.word	0x40013400
 8008640:	40015000 	.word	0x40015000
 8008644:	40000400 	.word	0x40000400
 8008648:	40000800 	.word	0x40000800
 800864c:	40000c00 	.word	0x40000c00
 8008650:	40014000 	.word	0x40014000

08008654 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008668:	2b01      	cmp	r3, #1
 800866a:	d101      	bne.n	8008670 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800866c:	2302      	movs	r3, #2
 800866e:	e078      	b.n	8008762 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	4313      	orrs	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	4313      	orrs	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	4313      	orrs	r3, r2
 80086a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	041b      	lsls	r3, r3, #16
 80086e6:	4313      	orrs	r3, r2
 80086e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	69db      	ldr	r3, [r3, #28]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008770 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d009      	beq.n	8008716 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a1b      	ldr	r2, [pc, #108]	@ (8008774 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d004      	beq.n	8008716 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a19      	ldr	r2, [pc, #100]	@ (8008778 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d11c      	bne.n	8008750 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008720:	051b      	lsls	r3, r3, #20
 8008722:	4313      	orrs	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	6a1b      	ldr	r3, [r3, #32]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800874c:	4313      	orrs	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	40012c00 	.word	0x40012c00
 8008774:	40013400 	.word	0x40013400
 8008778:	40015000 	.word	0x40015000

0800877c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008818:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800881c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	b29a      	uxth	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008836:	b480      	push	{r7}
 8008838:	b085      	sub	sp, #20
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800883e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008842:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800884a:	b29a      	uxth	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	b29b      	uxth	r3, r3
 8008850:	43db      	mvns	r3, r3
 8008852:	b29b      	uxth	r3, r3
 8008854:	4013      	ands	r3, r2
 8008856:	b29a      	uxth	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	1d3b      	adds	r3, r7, #4
 8008876:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b09d      	sub	sp, #116	@ 0x74
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80088ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	78db      	ldrb	r3, [r3, #3]
 80088d6:	2b03      	cmp	r3, #3
 80088d8:	d81f      	bhi.n	800891a <USB_ActivateEndpoint+0x72>
 80088da:	a201      	add	r2, pc, #4	@ (adr r2, 80088e0 <USB_ActivateEndpoint+0x38>)
 80088dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e0:	080088f1 	.word	0x080088f1
 80088e4:	0800890d 	.word	0x0800890d
 80088e8:	08008923 	.word	0x08008923
 80088ec:	080088ff 	.word	0x080088ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80088f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80088f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80088f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80088fc:	e012      	b.n	8008924 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80088fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008902:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008906:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800890a:	e00b      	b.n	8008924 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800890c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008910:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008914:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008918:	e004      	b.n	8008924 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8008920:	e000      	b.n	8008924 <USB_ActivateEndpoint+0x7c>
      break;
 8008922:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	441a      	add	r2, r3
 800892e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800893a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800893e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008942:	b29b      	uxth	r3, r3
 8008944:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	b29b      	uxth	r3, r3
 8008954:	b21b      	sxth	r3, r3
 8008956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800895a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800895e:	b21a      	sxth	r2, r3
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	b21b      	sxth	r3, r3
 8008966:	4313      	orrs	r3, r2
 8008968:	b21b      	sxth	r3, r3
 800896a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	441a      	add	r2, r3
 8008978:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800897c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008980:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800898c:	b29b      	uxth	r3, r3
 800898e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	7b1b      	ldrb	r3, [r3, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	f040 8178 	bne.w	8008c8a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	785b      	ldrb	r3, [r3, #1]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 8084 	beq.w	8008aac <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	61bb      	str	r3, [r7, #24]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	461a      	mov	r2, r3
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	4413      	add	r3, r2
 80089b6:	61bb      	str	r3, [r7, #24]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	00da      	lsls	r2, r3, #3
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	88db      	ldrh	r3, [r3, #6]
 80089cc:	085b      	lsrs	r3, r3, #1
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	005b      	lsls	r3, r3, #1
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	827b      	strh	r3, [r7, #18]
 80089e6:	8a7b      	ldrh	r3, [r7, #18]
 80089e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d01b      	beq.n	8008a28 <USB_ActivateEndpoint+0x180>
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	881b      	ldrh	r3, [r3, #0]
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a06:	823b      	strh	r3, [r7, #16]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	441a      	add	r2, r3
 8008a12:	8a3b      	ldrh	r3, [r7, #16]
 8008a14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	78db      	ldrb	r3, [r3, #3]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d020      	beq.n	8008a72 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a46:	81bb      	strh	r3, [r7, #12]
 8008a48:	89bb      	ldrh	r3, [r7, #12]
 8008a4a:	f083 0320 	eor.w	r3, r3, #32
 8008a4e:	81bb      	strh	r3, [r7, #12]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	441a      	add	r2, r3
 8008a5a:	89bb      	ldrh	r3, [r7, #12]
 8008a5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	8013      	strh	r3, [r2, #0]
 8008a70:	e2d5      	b.n	800901e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a88:	81fb      	strh	r3, [r7, #14]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	441a      	add	r2, r3
 8008a94:	89fb      	ldrh	r3, [r7, #14]
 8008a96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	8013      	strh	r3, [r2, #0]
 8008aaa:	e2b8      	b.n	800901e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	461a      	mov	r2, r3
 8008aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008abc:	4413      	add	r3, r2
 8008abe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	00da      	lsls	r2, r3, #3
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	4413      	add	r3, r2
 8008aca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	88db      	ldrh	r3, [r3, #6]
 8008ad4:	085b      	lsrs	r3, r3, #1
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ade:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	461a      	mov	r2, r3
 8008aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af0:	4413      	add	r3, r2
 8008af2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	00da      	lsls	r2, r3, #3
 8008afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afc:	4413      	add	r3, r2
 8008afe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b12:	801a      	strh	r2, [r3, #0]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b1a:	d91d      	bls.n	8008b58 <USB_ActivateEndpoint+0x2b0>
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	095b      	lsrs	r3, r3, #5
 8008b22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	f003 031f 	and.w	r3, r3, #31
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d102      	bne.n	8008b36 <USB_ActivateEndpoint+0x28e>
 8008b30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b32:	3b01      	subs	r3, #1
 8008b34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b38:	881b      	ldrh	r3, [r3, #0]
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	029b      	lsls	r3, r3, #10
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	4313      	orrs	r3, r2
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b54:	801a      	strh	r2, [r3, #0]
 8008b56:	e026      	b.n	8008ba6 <USB_ActivateEndpoint+0x2fe>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10a      	bne.n	8008b76 <USB_ActivateEndpoint+0x2ce>
 8008b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b72:	801a      	strh	r2, [r3, #0]
 8008b74:	e017      	b.n	8008ba6 <USB_ActivateEndpoint+0x2fe>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	085b      	lsrs	r3, r3, #1
 8008b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <USB_ActivateEndpoint+0x2e8>
 8008b8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	029b      	lsls	r3, r3, #10
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008bb4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d01b      	beq.n	8008bf6 <USB_ActivateEndpoint+0x34e>
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bd4:	843b      	strh	r3, [r7, #32]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	441a      	add	r2, r3
 8008be0:	8c3b      	ldrh	r3, [r7, #32]
 8008be2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008be6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d124      	bne.n	8008c48 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c14:	83bb      	strh	r3, [r7, #28]
 8008c16:	8bbb      	ldrh	r3, [r7, #28]
 8008c18:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008c1c:	83bb      	strh	r3, [r7, #28]
 8008c1e:	8bbb      	ldrh	r3, [r7, #28]
 8008c20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008c24:	83bb      	strh	r3, [r7, #28]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	441a      	add	r2, r3
 8008c30:	8bbb      	ldrh	r3, [r7, #28]
 8008c32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	8013      	strh	r3, [r2, #0]
 8008c46:	e1ea      	b.n	800901e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	881b      	ldrh	r3, [r3, #0]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c5e:	83fb      	strh	r3, [r7, #30]
 8008c60:	8bfb      	ldrh	r3, [r7, #30]
 8008c62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008c66:	83fb      	strh	r3, [r7, #30]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	441a      	add	r2, r3
 8008c72:	8bfb      	ldrh	r3, [r7, #30]
 8008c74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	8013      	strh	r3, [r2, #0]
 8008c88:	e1c9      	b.n	800901e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	78db      	ldrb	r3, [r3, #3]
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d11e      	bne.n	8008cd0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ca8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	441a      	add	r2, r3
 8008cb6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008cba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cc2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	8013      	strh	r3, [r2, #0]
 8008cce:	e01d      	b.n	8008d0c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ce6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	441a      	add	r2, r3
 8008cf4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	461a      	mov	r2, r3
 8008d1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d1c:	4413      	add	r3, r2
 8008d1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	00da      	lsls	r2, r3, #3
 8008d26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d28:	4413      	add	r3, r2
 8008d2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	891b      	ldrh	r3, [r3, #8]
 8008d34:	085b      	lsrs	r3, r3, #1
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	005b      	lsls	r3, r3, #1
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d3e:	801a      	strh	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d50:	4413      	add	r3, r2
 8008d52:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	00da      	lsls	r2, r3, #3
 8008d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008d62:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	895b      	ldrh	r3, [r3, #10]
 8008d68:	085b      	lsrs	r3, r3, #1
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d72:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	785b      	ldrb	r3, [r3, #1]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f040 8093 	bne.w	8008ea4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008d8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01b      	beq.n	8008dd2 <USB_ActivateEndpoint+0x52a>
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008db0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	441a      	add	r2, r3
 8008dbc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008dbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008de0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d01b      	beq.n	8008e22 <USB_ActivateEndpoint+0x57a>
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	881b      	ldrh	r3, [r3, #0]
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e00:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	441a      	add	r2, r3
 8008e0c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e1a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4413      	add	r3, r2
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e38:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008e3a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008e3c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008e40:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008e42:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008e44:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008e48:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	441a      	add	r2, r3
 8008e54:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e80:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	441a      	add	r2, r3
 8008e8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008e8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	8013      	strh	r3, [r2, #0]
 8008ea2:	e0bc      	b.n	800901e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008eb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008eb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d01d      	beq.n	8008efc <USB_ActivateEndpoint+0x654>
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4413      	add	r3, r2
 8008eca:	881b      	ldrh	r3, [r3, #0]
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ed6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	441a      	add	r2, r3
 8008ee4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008ee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008eec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ef0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008f0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d01d      	beq.n	8008f54 <USB_ActivateEndpoint+0x6ac>
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f2e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	441a      	add	r2, r3
 8008f3c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008f40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	78db      	ldrb	r3, [r3, #3]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d024      	beq.n	8008fa6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	881b      	ldrh	r3, [r3, #0]
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f72:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008f76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008f7a:	f083 0320 	eor.w	r3, r3, #32
 8008f7e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	441a      	add	r2, r3
 8008f8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008f90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	8013      	strh	r3, [r2, #0]
 8008fa4:	e01d      	b.n	8008fe2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fbc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	441a      	add	r2, r3
 8008fca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008fce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ff4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ff8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	441a      	add	r2, r3
 8009006:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800900a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800900e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800901a:	b29b      	uxth	r3, r3
 800901c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800901e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8009022:	4618      	mov	r0, r3
 8009024:	3774      	adds	r7, #116	@ 0x74
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop

08009030 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009030:	b480      	push	{r7}
 8009032:	b08d      	sub	sp, #52	@ 0x34
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	7b1b      	ldrb	r3, [r3, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	f040 808e 	bne.w	8009160 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	785b      	ldrb	r3, [r3, #1]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d044      	beq.n	80090d6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	881b      	ldrh	r3, [r3, #0]
 8009058:	81bb      	strh	r3, [r7, #12]
 800905a:	89bb      	ldrh	r3, [r7, #12]
 800905c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009060:	2b00      	cmp	r3, #0
 8009062:	d01b      	beq.n	800909c <USB_DeactivateEndpoint+0x6c>
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	b29b      	uxth	r3, r3
 8009072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800907a:	817b      	strh	r3, [r7, #10]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	441a      	add	r2, r3
 8009086:	897b      	ldrh	r3, [r7, #10]
 8009088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800908c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009094:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009098:	b29b      	uxth	r3, r3
 800909a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090b2:	813b      	strh	r3, [r7, #8]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	441a      	add	r2, r3
 80090be:	893b      	ldrh	r3, [r7, #8]
 80090c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	8013      	strh	r3, [r2, #0]
 80090d4:	e192      	b.n	80093fc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4413      	add	r3, r2
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	827b      	strh	r3, [r7, #18]
 80090e4:	8a7b      	ldrh	r3, [r7, #18]
 80090e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d01b      	beq.n	8009126 <USB_DeactivateEndpoint+0xf6>
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	4413      	add	r3, r2
 80090f8:	881b      	ldrh	r3, [r3, #0]
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009104:	823b      	strh	r3, [r7, #16]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	441a      	add	r2, r3
 8009110:	8a3b      	ldrh	r3, [r7, #16]
 8009112:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009116:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800911a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800911e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009122:	b29b      	uxth	r3, r3
 8009124:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	4413      	add	r3, r2
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	b29b      	uxth	r3, r3
 8009134:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800913c:	81fb      	strh	r3, [r7, #14]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	441a      	add	r2, r3
 8009148:	89fb      	ldrh	r3, [r7, #14]
 800914a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800914e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800915a:	b29b      	uxth	r3, r3
 800915c:	8013      	strh	r3, [r2, #0]
 800915e:	e14d      	b.n	80093fc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	785b      	ldrb	r3, [r3, #1]
 8009164:	2b00      	cmp	r3, #0
 8009166:	f040 80a5 	bne.w	80092b4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	843b      	strh	r3, [r7, #32]
 8009178:	8c3b      	ldrh	r3, [r7, #32]
 800917a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d01b      	beq.n	80091ba <USB_DeactivateEndpoint+0x18a>
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	b29b      	uxth	r3, r3
 8009190:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009198:	83fb      	strh	r3, [r7, #30]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	441a      	add	r2, r3
 80091a4:	8bfb      	ldrh	r3, [r7, #30]
 80091a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80091b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	881b      	ldrh	r3, [r3, #0]
 80091c6:	83bb      	strh	r3, [r7, #28]
 80091c8:	8bbb      	ldrh	r3, [r7, #28]
 80091ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d01b      	beq.n	800920a <USB_DeactivateEndpoint+0x1da>
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	881b      	ldrh	r3, [r3, #0]
 80091de:	b29b      	uxth	r3, r3
 80091e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091e8:	837b      	strh	r3, [r7, #26]
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	441a      	add	r2, r3
 80091f4:	8b7b      	ldrh	r3, [r7, #26]
 80091f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009202:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009206:	b29b      	uxth	r3, r3
 8009208:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	881b      	ldrh	r3, [r3, #0]
 8009216:	b29b      	uxth	r3, r3
 8009218:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800921c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009220:	833b      	strh	r3, [r7, #24]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	441a      	add	r2, r3
 800922c:	8b3b      	ldrh	r3, [r7, #24]
 800922e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800923a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800923e:	b29b      	uxth	r3, r3
 8009240:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4413      	add	r3, r2
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	b29b      	uxth	r3, r3
 8009250:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009258:	82fb      	strh	r3, [r7, #22]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	441a      	add	r2, r3
 8009264:	8afb      	ldrh	r3, [r7, #22]
 8009266:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800926a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800926e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009276:	b29b      	uxth	r3, r3
 8009278:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	b29b      	uxth	r3, r3
 8009288:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800928c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009290:	82bb      	strh	r3, [r7, #20]
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	441a      	add	r2, r3
 800929c:	8abb      	ldrh	r3, [r7, #20]
 800929e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	8013      	strh	r3, [r2, #0]
 80092b2:	e0a3      	b.n	80093fc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4413      	add	r3, r2
 80092be:	881b      	ldrh	r3, [r3, #0]
 80092c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80092c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80092c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d01b      	beq.n	8009304 <USB_DeactivateEndpoint+0x2d4>
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	4413      	add	r3, r2
 80092d6:	881b      	ldrh	r3, [r3, #0]
 80092d8:	b29b      	uxth	r3, r3
 80092da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092e2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	441a      	add	r2, r3
 80092ee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80092f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80092fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009300:	b29b      	uxth	r3, r3
 8009302:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009312:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009318:	2b00      	cmp	r3, #0
 800931a:	d01b      	beq.n	8009354 <USB_DeactivateEndpoint+0x324>
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	b29b      	uxth	r3, r3
 800932a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800932e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009332:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	441a      	add	r2, r3
 800933e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009340:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009344:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009348:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800934c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009350:	b29b      	uxth	r3, r3
 8009352:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	b29b      	uxth	r3, r3
 8009362:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800936a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	441a      	add	r2, r3
 8009376:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009378:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800937c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009380:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009388:	b29b      	uxth	r3, r3
 800938a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	881b      	ldrh	r3, [r3, #0]
 8009398:	b29b      	uxth	r3, r3
 800939a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800939e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	441a      	add	r2, r3
 80093ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80093b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4413      	add	r3, r2
 80093ce:	881b      	ldrh	r3, [r3, #0]
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80093d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093da:	847b      	strh	r3, [r7, #34]	@ 0x22
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	441a      	add	r2, r3
 80093e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80093e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3734      	adds	r7, #52	@ 0x34
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b0c2      	sub	sp, #264	@ 0x108
 800940e:	af00      	add	r7, sp, #0
 8009410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009414:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009418:	6018      	str	r0, [r3, #0]
 800941a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800941e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009422:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	785b      	ldrb	r3, [r3, #1]
 8009430:	2b01      	cmp	r3, #1
 8009432:	f040 86b7 	bne.w	800a1a4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800943a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	699a      	ldr	r2, [r3, #24]
 8009442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	429a      	cmp	r2, r3
 8009450:	d908      	bls.n	8009464 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009462:	e007      	b.n	8009474 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	7b1b      	ldrb	r3, [r3, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d13a      	bne.n	80094fa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6959      	ldr	r1, [r3, #20]
 8009490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	88da      	ldrh	r2, [r3, #6]
 800949c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80094a6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80094aa:	6800      	ldr	r0, [r0, #0]
 80094ac:	f001 fc98 	bl	800ade0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80094b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	613b      	str	r3, [r7, #16]
 80094bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	461a      	mov	r2, r3
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	4413      	add	r3, r2
 80094d2:	613b      	str	r3, [r7, #16]
 80094d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	00da      	lsls	r2, r3, #3
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	4413      	add	r3, r2
 80094e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	801a      	strh	r2, [r3, #0]
 80094f6:	f000 be1f 	b.w	800a138 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80094fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	78db      	ldrb	r3, [r3, #3]
 8009506:	2b02      	cmp	r3, #2
 8009508:	f040 8462 	bne.w	8009dd0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800950c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	6a1a      	ldr	r2, [r3, #32]
 8009518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800951c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	429a      	cmp	r2, r3
 8009526:	f240 83df 	bls.w	8009ce8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800952a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800952e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	881b      	ldrh	r3, [r3, #0]
 8009546:	b29b      	uxth	r3, r3
 8009548:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800954c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009550:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009558:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	441a      	add	r2, r3
 800956e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800957a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800957e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009582:	b29b      	uxth	r3, r3
 8009584:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800958a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6a1a      	ldr	r2, [r3, #32]
 8009592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009596:	1ad2      	subs	r2, r2, r3
 8009598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800959c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80095a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f000 81c7 	beq.w	800995a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80095cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80095d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	785b      	ldrb	r3, [r3, #1]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d177      	bne.n	80096d8 <USB_EPStartXfer+0x2ce>
 80095e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009602:	b29b      	uxth	r3, r3
 8009604:	461a      	mov	r2, r3
 8009606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009608:	4413      	add	r3, r2
 800960a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800960c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	00da      	lsls	r2, r3, #3
 800961a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961c:	4413      	add	r3, r2
 800961e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009622:	627b      	str	r3, [r7, #36]	@ 0x24
 8009624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009626:	881b      	ldrh	r3, [r3, #0]
 8009628:	b29b      	uxth	r3, r3
 800962a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800962e:	b29a      	uxth	r2, r3
 8009630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009632:	801a      	strh	r2, [r3, #0]
 8009634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009638:	2b3e      	cmp	r3, #62	@ 0x3e
 800963a:	d921      	bls.n	8009680 <USB_EPStartXfer+0x276>
 800963c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009640:	095b      	lsrs	r3, r3, #5
 8009642:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800964a:	f003 031f 	and.w	r3, r3, #31
 800964e:	2b00      	cmp	r3, #0
 8009650:	d104      	bne.n	800965c <USB_EPStartXfer+0x252>
 8009652:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009656:	3b01      	subs	r3, #1
 8009658:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800965c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	b29a      	uxth	r2, r3
 8009662:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009666:	b29b      	uxth	r3, r3
 8009668:	029b      	lsls	r3, r3, #10
 800966a:	b29b      	uxth	r3, r3
 800966c:	4313      	orrs	r3, r2
 800966e:	b29b      	uxth	r3, r3
 8009670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009678:	b29a      	uxth	r2, r3
 800967a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967c:	801a      	strh	r2, [r3, #0]
 800967e:	e050      	b.n	8009722 <USB_EPStartXfer+0x318>
 8009680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <USB_EPStartXfer+0x294>
 8009688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968a:	881b      	ldrh	r3, [r3, #0]
 800968c:	b29b      	uxth	r3, r3
 800968e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009696:	b29a      	uxth	r2, r3
 8009698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969a:	801a      	strh	r2, [r3, #0]
 800969c:	e041      	b.n	8009722 <USB_EPStartXfer+0x318>
 800969e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096a2:	085b      	lsrs	r3, r3, #1
 80096a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80096a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d004      	beq.n	80096be <USB_EPStartXfer+0x2b4>
 80096b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80096b8:	3301      	adds	r3, #1
 80096ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80096be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	029b      	lsls	r3, r3, #10
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	4313      	orrs	r3, r2
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d4:	801a      	strh	r2, [r3, #0]
 80096d6:	e024      	b.n	8009722 <USB_EPStartXfer+0x318>
 80096d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	785b      	ldrb	r3, [r3, #1]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d11c      	bne.n	8009722 <USB_EPStartXfer+0x318>
 80096e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	461a      	mov	r2, r3
 80096fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fc:	4413      	add	r3, r2
 80096fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	00da      	lsls	r2, r3, #3
 800970e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009710:	4413      	add	r3, r2
 8009712:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009716:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800971c:	b29a      	uxth	r2, r3
 800971e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009720:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	895b      	ldrh	r3, [r3, #10]
 800972e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6959      	ldr	r1, [r3, #20]
 800973e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009742:	b29b      	uxth	r3, r3
 8009744:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009748:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800974c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009750:	6800      	ldr	r0, [r0, #0]
 8009752:	f001 fb45 	bl	800ade0 <USB_WritePMA>
            ep->xfer_buff += len;
 8009756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800975a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	695a      	ldr	r2, [r3, #20]
 8009762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009766:	441a      	add	r2, r3
 8009768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800976c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	6a1a      	ldr	r2, [r3, #32]
 8009780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	429a      	cmp	r2, r3
 800978e:	d90f      	bls.n	80097b0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	6a1a      	ldr	r2, [r3, #32]
 800979c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a0:	1ad2      	subs	r2, r2, r3
 80097a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	621a      	str	r2, [r3, #32]
 80097ae:	e00e      	b.n	80097ce <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80097b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	6a1b      	ldr	r3, [r3, #32]
 80097bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80097c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2200      	movs	r2, #0
 80097cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	785b      	ldrb	r3, [r3, #1]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d177      	bne.n	80098ce <USB_EPStartXfer+0x4c4>
 80097de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	61bb      	str	r3, [r7, #24]
 80097ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	461a      	mov	r2, r3
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	4413      	add	r3, r2
 8009800:	61bb      	str	r3, [r7, #24]
 8009802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	00da      	lsls	r2, r3, #3
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	4413      	add	r3, r2
 8009814:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009818:	617b      	str	r3, [r7, #20]
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	881b      	ldrh	r3, [r3, #0]
 800981e:	b29b      	uxth	r3, r3
 8009820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009824:	b29a      	uxth	r2, r3
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	801a      	strh	r2, [r3, #0]
 800982a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800982e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009830:	d921      	bls.n	8009876 <USB_EPStartXfer+0x46c>
 8009832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009836:	095b      	lsrs	r3, r3, #5
 8009838:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800983c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009840:	f003 031f 	and.w	r3, r3, #31
 8009844:	2b00      	cmp	r3, #0
 8009846:	d104      	bne.n	8009852 <USB_EPStartXfer+0x448>
 8009848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800984c:	3b01      	subs	r3, #1
 800984e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	881b      	ldrh	r3, [r3, #0]
 8009856:	b29a      	uxth	r2, r3
 8009858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800985c:	b29b      	uxth	r3, r3
 800985e:	029b      	lsls	r3, r3, #10
 8009860:	b29b      	uxth	r3, r3
 8009862:	4313      	orrs	r3, r2
 8009864:	b29b      	uxth	r3, r3
 8009866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800986a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800986e:	b29a      	uxth	r2, r3
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	801a      	strh	r2, [r3, #0]
 8009874:	e056      	b.n	8009924 <USB_EPStartXfer+0x51a>
 8009876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10a      	bne.n	8009894 <USB_EPStartXfer+0x48a>
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	b29b      	uxth	r3, r3
 8009884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800988c:	b29a      	uxth	r2, r3
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	801a      	strh	r2, [r3, #0]
 8009892:	e047      	b.n	8009924 <USB_EPStartXfer+0x51a>
 8009894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009898:	085b      	lsrs	r3, r3, #1
 800989a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800989e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d004      	beq.n	80098b4 <USB_EPStartXfer+0x4aa>
 80098aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098ae:	3301      	adds	r3, #1
 80098b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	881b      	ldrh	r3, [r3, #0]
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098be:	b29b      	uxth	r3, r3
 80098c0:	029b      	lsls	r3, r3, #10
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	4313      	orrs	r3, r2
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	801a      	strh	r2, [r3, #0]
 80098cc:	e02a      	b.n	8009924 <USB_EPStartXfer+0x51a>
 80098ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	785b      	ldrb	r3, [r3, #1]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d122      	bne.n	8009924 <USB_EPStartXfer+0x51a>
 80098de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	623b      	str	r3, [r7, #32]
 80098ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	461a      	mov	r2, r3
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	4413      	add	r3, r2
 8009900:	623b      	str	r3, [r7, #32]
 8009902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	00da      	lsls	r2, r3, #3
 8009910:	6a3b      	ldr	r3, [r7, #32]
 8009912:	4413      	add	r3, r2
 8009914:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009918:	61fb      	str	r3, [r7, #28]
 800991a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800991e:	b29a      	uxth	r2, r3
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	891b      	ldrh	r3, [r3, #8]
 8009930:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	6959      	ldr	r1, [r3, #20]
 8009940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009944:	b29b      	uxth	r3, r3
 8009946:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800994a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800994e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009952:	6800      	ldr	r0, [r0, #0]
 8009954:	f001 fa44 	bl	800ade0 <USB_WritePMA>
 8009958:	e3ee      	b.n	800a138 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800995a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800995e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	785b      	ldrb	r3, [r3, #1]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d177      	bne.n	8009a5a <USB_EPStartXfer+0x650>
 800996a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800996e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800997a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009984:	b29b      	uxth	r3, r3
 8009986:	461a      	mov	r2, r3
 8009988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800998a:	4413      	add	r3, r2
 800998c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800998e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	00da      	lsls	r2, r3, #3
 800999c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800999e:	4413      	add	r3, r2
 80099a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80099a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80099a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099a8:	881b      	ldrh	r3, [r3, #0]
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099b4:	801a      	strh	r2, [r3, #0]
 80099b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80099bc:	d921      	bls.n	8009a02 <USB_EPStartXfer+0x5f8>
 80099be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c2:	095b      	lsrs	r3, r3, #5
 80099c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80099c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099cc:	f003 031f 	and.w	r3, r3, #31
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d104      	bne.n	80099de <USB_EPStartXfer+0x5d4>
 80099d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80099d8:	3b01      	subs	r3, #1
 80099da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80099de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	029b      	lsls	r3, r3, #10
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	4313      	orrs	r3, r2
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099fe:	801a      	strh	r2, [r3, #0]
 8009a00:	e056      	b.n	8009ab0 <USB_EPStartXfer+0x6a6>
 8009a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10a      	bne.n	8009a20 <USB_EPStartXfer+0x616>
 8009a0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a0c:	881b      	ldrh	r3, [r3, #0]
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a1c:	801a      	strh	r2, [r3, #0]
 8009a1e:	e047      	b.n	8009ab0 <USB_EPStartXfer+0x6a6>
 8009a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a24:	085b      	lsrs	r3, r3, #1
 8009a26:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d004      	beq.n	8009a40 <USB_EPStartXfer+0x636>
 8009a36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	029b      	lsls	r3, r3, #10
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	4313      	orrs	r3, r2
 8009a52:	b29a      	uxth	r2, r3
 8009a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a56:	801a      	strh	r2, [r3, #0]
 8009a58:	e02a      	b.n	8009ab0 <USB_EPStartXfer+0x6a6>
 8009a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	785b      	ldrb	r3, [r3, #1]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d122      	bne.n	8009ab0 <USB_EPStartXfer+0x6a6>
 8009a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	461a      	mov	r2, r3
 8009a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a8a:	4413      	add	r3, r2
 8009a8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	00da      	lsls	r2, r3, #3
 8009a9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	891b      	ldrh	r3, [r3, #8]
 8009abc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6959      	ldr	r1, [r3, #20]
 8009acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009ad6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009ada:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009ade:	6800      	ldr	r0, [r0, #0]
 8009ae0:	f001 f97e 	bl	800ade0 <USB_WritePMA>
            ep->xfer_buff += len;
 8009ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	695a      	ldr	r2, [r3, #20]
 8009af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af4:	441a      	add	r2, r3
 8009af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	6a1a      	ldr	r2, [r3, #32]
 8009b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d90f      	bls.n	8009b3e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6a1a      	ldr	r2, [r3, #32]
 8009b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b2e:	1ad2      	subs	r2, r2, r3
 8009b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	621a      	str	r2, [r3, #32]
 8009b3c:	e00e      	b.n	8009b5c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	785b      	ldrb	r3, [r3, #1]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d177      	bne.n	8009c68 <USB_EPStartXfer+0x85e>
 8009b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	461a      	mov	r2, r3
 8009b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b98:	4413      	add	r3, r2
 8009b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	00da      	lsls	r2, r3, #3
 8009baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bac:	4413      	add	r3, r2
 8009bae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bb6:	881b      	ldrh	r3, [r3, #0]
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bc2:	801a      	strh	r2, [r3, #0]
 8009bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8009bca:	d921      	bls.n	8009c10 <USB_EPStartXfer+0x806>
 8009bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bd0:	095b      	lsrs	r3, r3, #5
 8009bd2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bda:	f003 031f 	and.w	r3, r3, #31
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d104      	bne.n	8009bec <USB_EPStartXfer+0x7e2>
 8009be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009be6:	3b01      	subs	r3, #1
 8009be8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	029b      	lsls	r3, r3, #10
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c0c:	801a      	strh	r2, [r3, #0]
 8009c0e:	e050      	b.n	8009cb2 <USB_EPStartXfer+0x8a8>
 8009c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10a      	bne.n	8009c2e <USB_EPStartXfer+0x824>
 8009c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c2a:	801a      	strh	r2, [r3, #0]
 8009c2c:	e041      	b.n	8009cb2 <USB_EPStartXfer+0x8a8>
 8009c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c32:	085b      	lsrs	r3, r3, #1
 8009c34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c3c:	f003 0301 	and.w	r3, r3, #1
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d004      	beq.n	8009c4e <USB_EPStartXfer+0x844>
 8009c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c48:	3301      	adds	r3, #1
 8009c4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c50:	881b      	ldrh	r3, [r3, #0]
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	029b      	lsls	r3, r3, #10
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c64:	801a      	strh	r2, [r3, #0]
 8009c66:	e024      	b.n	8009cb2 <USB_EPStartXfer+0x8a8>
 8009c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	785b      	ldrb	r3, [r3, #1]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d11c      	bne.n	8009cb2 <USB_EPStartXfer+0x8a8>
 8009c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	461a      	mov	r2, r3
 8009c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c8c:	4413      	add	r3, r2
 8009c8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	00da      	lsls	r2, r3, #3
 8009c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	895b      	ldrh	r3, [r3, #10]
 8009cbe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6959      	ldr	r1, [r3, #20]
 8009cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009cd8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009cdc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009ce0:	6800      	ldr	r0, [r0, #0]
 8009ce2:	f001 f87d 	bl	800ade0 <USB_WritePMA>
 8009ce6:	e227      	b.n	800a138 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	6a1b      	ldr	r3, [r3, #32]
 8009cf4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	881b      	ldrh	r3, [r3, #0]
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d1e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	441a      	add	r2, r3
 8009d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009d40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	461a      	mov	r2, r3
 8009d72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d74:	4413      	add	r3, r2
 8009d76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	00da      	lsls	r2, r3, #3
 8009d86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d88:	4413      	add	r3, r2
 8009d8a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009d8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	891b      	ldrh	r3, [r3, #8]
 8009da6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6959      	ldr	r1, [r3, #20]
 8009db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009dc0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009dc4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009dc8:	6800      	ldr	r0, [r0, #0]
 8009dca:	f001 f809 	bl	800ade0 <USB_WritePMA>
 8009dce:	e1b3      	b.n	800a138 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	6a1a      	ldr	r2, [r3, #32]
 8009ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de0:	1ad2      	subs	r2, r2, r3
 8009de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009df2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	4413      	add	r3, r2
 8009e08:	881b      	ldrh	r3, [r3, #0]
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 80c6 	beq.w	8009fa2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	785b      	ldrb	r3, [r3, #1]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d177      	bne.n	8009f22 <USB_EPStartXfer+0xb18>
 8009e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	461a      	mov	r2, r3
 8009e50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e52:	4413      	add	r3, r2
 8009e54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	00da      	lsls	r2, r3, #3
 8009e64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e66:	4413      	add	r3, r2
 8009e68:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009e6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e70:	881b      	ldrh	r3, [r3, #0]
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e7c:	801a      	strh	r2, [r3, #0]
 8009e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e82:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e84:	d921      	bls.n	8009eca <USB_EPStartXfer+0xac0>
 8009e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e8a:	095b      	lsrs	r3, r3, #5
 8009e8c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e94:	f003 031f 	and.w	r3, r3, #31
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d104      	bne.n	8009ea6 <USB_EPStartXfer+0xa9c>
 8009e9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009ea6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ea8:	881b      	ldrh	r3, [r3, #0]
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	029b      	lsls	r3, r3, #10
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ec6:	801a      	strh	r2, [r3, #0]
 8009ec8:	e050      	b.n	8009f6c <USB_EPStartXfer+0xb62>
 8009eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10a      	bne.n	8009ee8 <USB_EPStartXfer+0xade>
 8009ed2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ee4:	801a      	strh	r2, [r3, #0]
 8009ee6:	e041      	b.n	8009f6c <USB_EPStartXfer+0xb62>
 8009ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eec:	085b      	lsrs	r3, r3, #1
 8009eee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef6:	f003 0301 	and.w	r3, r3, #1
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d004      	beq.n	8009f08 <USB_EPStartXfer+0xafe>
 8009efe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009f02:	3301      	adds	r3, #1
 8009f04:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009f08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f0a:	881b      	ldrh	r3, [r3, #0]
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	029b      	lsls	r3, r3, #10
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f1e:	801a      	strh	r2, [r3, #0]
 8009f20:	e024      	b.n	8009f6c <USB_EPStartXfer+0xb62>
 8009f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	785b      	ldrb	r3, [r3, #1]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d11c      	bne.n	8009f6c <USB_EPStartXfer+0xb62>
 8009f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	461a      	mov	r2, r3
 8009f44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f46:	4413      	add	r3, r2
 8009f48:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	00da      	lsls	r2, r3, #3
 8009f58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	895b      	ldrh	r3, [r3, #10]
 8009f78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6959      	ldr	r1, [r3, #20]
 8009f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009f92:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009f96:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009f9a:	6800      	ldr	r0, [r0, #0]
 8009f9c:	f000 ff20 	bl	800ade0 <USB_WritePMA>
 8009fa0:	e0ca      	b.n	800a138 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	785b      	ldrb	r3, [r3, #1]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d177      	bne.n	800a0a2 <USB_EPStartXfer+0xc98>
 8009fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	461a      	mov	r2, r3
 8009fd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009fd2:	4413      	add	r3, r2
 8009fd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	00da      	lsls	r2, r3, #3
 8009fe4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009fec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009fee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ff0:	881b      	ldrh	r3, [r3, #0]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ffc:	801a      	strh	r2, [r3, #0]
 8009ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a002:	2b3e      	cmp	r3, #62	@ 0x3e
 800a004:	d921      	bls.n	800a04a <USB_EPStartXfer+0xc40>
 800a006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a00a:	095b      	lsrs	r3, r3, #5
 800a00c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a014:	f003 031f 	and.w	r3, r3, #31
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d104      	bne.n	800a026 <USB_EPStartXfer+0xc1c>
 800a01c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a020:	3b01      	subs	r3, #1
 800a022:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a026:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a030:	b29b      	uxth	r3, r3
 800a032:	029b      	lsls	r3, r3, #10
 800a034:	b29b      	uxth	r3, r3
 800a036:	4313      	orrs	r3, r2
 800a038:	b29b      	uxth	r3, r3
 800a03a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a03e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a042:	b29a      	uxth	r2, r3
 800a044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a046:	801a      	strh	r2, [r3, #0]
 800a048:	e05c      	b.n	800a104 <USB_EPStartXfer+0xcfa>
 800a04a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10a      	bne.n	800a068 <USB_EPStartXfer+0xc5e>
 800a052:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a054:	881b      	ldrh	r3, [r3, #0]
 800a056:	b29b      	uxth	r3, r3
 800a058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a05c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a060:	b29a      	uxth	r2, r3
 800a062:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a064:	801a      	strh	r2, [r3, #0]
 800a066:	e04d      	b.n	800a104 <USB_EPStartXfer+0xcfa>
 800a068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a06c:	085b      	lsrs	r3, r3, #1
 800a06e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a076:	f003 0301 	and.w	r3, r3, #1
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d004      	beq.n	800a088 <USB_EPStartXfer+0xc7e>
 800a07e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a082:	3301      	adds	r3, #1
 800a084:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a088:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a08a:	881b      	ldrh	r3, [r3, #0]
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a092:	b29b      	uxth	r3, r3
 800a094:	029b      	lsls	r3, r3, #10
 800a096:	b29b      	uxth	r3, r3
 800a098:	4313      	orrs	r3, r2
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a09e:	801a      	strh	r2, [r3, #0]
 800a0a0:	e030      	b.n	800a104 <USB_EPStartXfer+0xcfa>
 800a0a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	785b      	ldrb	r3, [r3, #1]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d128      	bne.n	800a104 <USB_EPStartXfer+0xcfa>
 800a0b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a0c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a0dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	00da      	lsls	r2, r3, #3
 800a0ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a0f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0fc:	b29a      	uxth	r2, r3
 800a0fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a102:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	891b      	ldrh	r3, [r3, #8]
 800a110:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	6959      	ldr	r1, [r3, #20]
 800a120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a124:	b29b      	uxth	r3, r3
 800a126:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a12a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a12e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a132:	6800      	ldr	r0, [r0, #0]
 800a134:	f000 fe54 	bl	800ade0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a13c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	4413      	add	r3, r2
 800a152:	881b      	ldrh	r3, [r3, #0]
 800a154:	b29b      	uxth	r3, r3
 800a156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a15a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a15e:	817b      	strh	r3, [r7, #10]
 800a160:	897b      	ldrh	r3, [r7, #10]
 800a162:	f083 0310 	eor.w	r3, r3, #16
 800a166:	817b      	strh	r3, [r7, #10]
 800a168:	897b      	ldrh	r3, [r7, #10]
 800a16a:	f083 0320 	eor.w	r3, r3, #32
 800a16e:	817b      	strh	r3, [r7, #10]
 800a170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a17e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	441a      	add	r2, r3
 800a18a:	897b      	ldrh	r3, [r7, #10]
 800a18c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a190:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a194:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	8013      	strh	r3, [r2, #0]
 800a1a0:	f000 bcde 	b.w	800ab60 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a1a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	7b1b      	ldrb	r3, [r3, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f040 80bb 	bne.w	800a32c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a1b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	699a      	ldr	r2, [r3, #24]
 800a1c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d917      	bls.n	800a202 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a1d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	691b      	ldr	r3, [r3, #16]
 800a1de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a1e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	699a      	ldr	r2, [r3, #24]
 800a1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1f2:	1ad2      	subs	r2, r2, r3
 800a1f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	619a      	str	r2, [r3, #24]
 800a200:	e00e      	b.n	800a220 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	699b      	ldr	r3, [r3, #24]
 800a20e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2200      	movs	r2, #0
 800a21e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a224:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a22e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	461a      	mov	r2, r3
 800a240:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a244:	4413      	add	r3, r2
 800a246:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a24a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a24e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	00da      	lsls	r2, r3, #3
 800a258:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a25c:	4413      	add	r3, r2
 800a25e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a262:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a266:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a26a:	881b      	ldrh	r3, [r3, #0]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a272:	b29a      	uxth	r2, r3
 800a274:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a278:	801a      	strh	r2, [r3, #0]
 800a27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a27e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a280:	d924      	bls.n	800a2cc <USB_EPStartXfer+0xec2>
 800a282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a286:	095b      	lsrs	r3, r3, #5
 800a288:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a290:	f003 031f 	and.w	r3, r3, #31
 800a294:	2b00      	cmp	r3, #0
 800a296:	d104      	bne.n	800a2a2 <USB_EPStartXfer+0xe98>
 800a298:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a29c:	3b01      	subs	r3, #1
 800a29e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a2a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a2a6:	881b      	ldrh	r3, [r3, #0]
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	029b      	lsls	r3, r3, #10
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a2c6:	801a      	strh	r2, [r3, #0]
 800a2c8:	f000 bc10 	b.w	800aaec <USB_EPStartXfer+0x16e2>
 800a2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10c      	bne.n	800a2ee <USB_EPStartXfer+0xee4>
 800a2d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a2ea:	801a      	strh	r2, [r3, #0]
 800a2ec:	e3fe      	b.n	800aaec <USB_EPStartXfer+0x16e2>
 800a2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2f2:	085b      	lsrs	r3, r3, #1
 800a2f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2fc:	f003 0301 	and.w	r3, r3, #1
 800a300:	2b00      	cmp	r3, #0
 800a302:	d004      	beq.n	800a30e <USB_EPStartXfer+0xf04>
 800a304:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a308:	3301      	adds	r3, #1
 800a30a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a30e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a312:	881b      	ldrh	r3, [r3, #0]
 800a314:	b29a      	uxth	r2, r3
 800a316:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	029b      	lsls	r3, r3, #10
 800a31e:	b29b      	uxth	r3, r3
 800a320:	4313      	orrs	r3, r2
 800a322:	b29a      	uxth	r2, r3
 800a324:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a328:	801a      	strh	r2, [r3, #0]
 800a32a:	e3df      	b.n	800aaec <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a32c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	78db      	ldrb	r3, [r3, #3]
 800a338:	2b02      	cmp	r3, #2
 800a33a:	f040 8218 	bne.w	800a76e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a33e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	785b      	ldrb	r3, [r3, #1]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f040 809d 	bne.w	800a48a <USB_EPStartXfer+0x1080>
 800a350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a354:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a35e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a362:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	461a      	mov	r2, r3
 800a370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a374:	4413      	add	r3, r2
 800a376:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a37e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	00da      	lsls	r2, r3, #3
 800a388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a38c:	4413      	add	r3, r2
 800a38e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a392:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a396:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a39a:	881b      	ldrh	r3, [r3, #0]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a3a8:	801a      	strh	r2, [r3, #0]
 800a3aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a3b8:	d92b      	bls.n	800a412 <USB_EPStartXfer+0x1008>
 800a3ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	095b      	lsrs	r3, r3, #5
 800a3c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a3cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	f003 031f 	and.w	r3, r3, #31
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d104      	bne.n	800a3ea <USB_EPStartXfer+0xfe0>
 800a3e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a3ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a3ee:	881b      	ldrh	r3, [r3, #0]
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	029b      	lsls	r3, r3, #10
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a408:	b29a      	uxth	r2, r3
 800a40a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a40e:	801a      	strh	r2, [r3, #0]
 800a410:	e070      	b.n	800a4f4 <USB_EPStartXfer+0x10ea>
 800a412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d10c      	bne.n	800a43c <USB_EPStartXfer+0x1032>
 800a422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a426:	881b      	ldrh	r3, [r3, #0]
 800a428:	b29b      	uxth	r3, r3
 800a42a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a42e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a432:	b29a      	uxth	r2, r3
 800a434:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a438:	801a      	strh	r2, [r3, #0]
 800a43a:	e05b      	b.n	800a4f4 <USB_EPStartXfer+0x10ea>
 800a43c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	085b      	lsrs	r3, r3, #1
 800a44a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a44e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	691b      	ldr	r3, [r3, #16]
 800a45a:	f003 0301 	and.w	r3, r3, #1
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d004      	beq.n	800a46c <USB_EPStartXfer+0x1062>
 800a462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a466:	3301      	adds	r3, #1
 800a468:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a46c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a470:	881b      	ldrh	r3, [r3, #0]
 800a472:	b29a      	uxth	r2, r3
 800a474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a478:	b29b      	uxth	r3, r3
 800a47a:	029b      	lsls	r3, r3, #10
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	4313      	orrs	r3, r2
 800a480:	b29a      	uxth	r2, r3
 800a482:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a486:	801a      	strh	r2, [r3, #0]
 800a488:	e034      	b.n	800a4f4 <USB_EPStartXfer+0x10ea>
 800a48a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a48e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	785b      	ldrb	r3, [r3, #1]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d12c      	bne.n	800a4f4 <USB_EPStartXfer+0x10ea>
 800a49a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a49e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a4a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a4be:	4413      	add	r3, r2
 800a4c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a4c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	00da      	lsls	r2, r3, #3
 800a4d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a4dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a4e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a4f2:	801a      	strh	r2, [r3, #0]
 800a4f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	785b      	ldrb	r3, [r3, #1]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f040 809d 	bne.w	800a64e <USB_EPStartXfer+0x1244>
 800a514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a518:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a526:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a530:	b29b      	uxth	r3, r3
 800a532:	461a      	mov	r2, r3
 800a534:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a538:	4413      	add	r3, r2
 800a53a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a53e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	00da      	lsls	r2, r3, #3
 800a54c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a550:	4413      	add	r3, r2
 800a552:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a556:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a55a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	b29b      	uxth	r3, r3
 800a562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a566:	b29a      	uxth	r2, r3
 800a568:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a56c:	801a      	strh	r2, [r3, #0]
 800a56e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a57c:	d92b      	bls.n	800a5d6 <USB_EPStartXfer+0x11cc>
 800a57e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	095b      	lsrs	r3, r3, #5
 800a58c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	f003 031f 	and.w	r3, r3, #31
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d104      	bne.n	800a5ae <USB_EPStartXfer+0x11a4>
 800a5a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a5ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5b2:	881b      	ldrh	r3, [r3, #0]
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	029b      	lsls	r3, r3, #10
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5d2:	801a      	strh	r2, [r3, #0]
 800a5d4:	e069      	b.n	800a6aa <USB_EPStartXfer+0x12a0>
 800a5d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10c      	bne.n	800a600 <USB_EPStartXfer+0x11f6>
 800a5e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5ea:	881b      	ldrh	r3, [r3, #0]
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5fc:	801a      	strh	r2, [r3, #0]
 800a5fe:	e054      	b.n	800a6aa <USB_EPStartXfer+0x12a0>
 800a600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	085b      	lsrs	r3, r3, #1
 800a60e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	2b00      	cmp	r3, #0
 800a624:	d004      	beq.n	800a630 <USB_EPStartXfer+0x1226>
 800a626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a62a:	3301      	adds	r3, #1
 800a62c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a630:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	b29a      	uxth	r2, r3
 800a638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	029b      	lsls	r3, r3, #10
 800a640:	b29b      	uxth	r3, r3
 800a642:	4313      	orrs	r3, r2
 800a644:	b29a      	uxth	r2, r3
 800a646:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a64a:	801a      	strh	r2, [r3, #0]
 800a64c:	e02d      	b.n	800a6aa <USB_EPStartXfer+0x12a0>
 800a64e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	785b      	ldrb	r3, [r3, #1]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d125      	bne.n	800a6aa <USB_EPStartXfer+0x12a0>
 800a65e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a662:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	461a      	mov	r2, r3
 800a670:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a674:	4413      	add	r3, r2
 800a676:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a67a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a67e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	00da      	lsls	r2, r3, #3
 800a688:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a68c:	4413      	add	r3, r2
 800a68e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a69a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a6a8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a6aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f000 8218 	beq.w	800aaec <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a6bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	4413      	add	r3, r2
 800a6d6:	881b      	ldrh	r3, [r3, #0]
 800a6d8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a6dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a6e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d005      	beq.n	800a6f4 <USB_EPStartXfer+0x12ea>
 800a6e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a6ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10d      	bne.n	800a710 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a6f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a6f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f040 81f5 	bne.w	800aaec <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a702:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f040 81ee 	bne.w	800aaec <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a714:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a71e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4413      	add	r3, r2
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a736:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a73a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a73e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	441a      	add	r2, r3
 800a754:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a75c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a764:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a768:	b29b      	uxth	r3, r3
 800a76a:	8013      	strh	r3, [r2, #0]
 800a76c:	e1be      	b.n	800aaec <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a76e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	78db      	ldrb	r3, [r3, #3]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	f040 81b4 	bne.w	800aae8 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	699a      	ldr	r2, [r3, #24]
 800a78c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d917      	bls.n	800a7cc <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a79c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800a7ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	699a      	ldr	r2, [r3, #24]
 800a7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7bc:	1ad2      	subs	r2, r2, r3
 800a7be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	619a      	str	r2, [r3, #24]
 800a7ca:	e00e      	b.n	800a7ea <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a7cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800a7dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a7ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	785b      	ldrb	r3, [r3, #1]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f040 8085 	bne.w	800a906 <USB_EPStartXfer+0x14fc>
 800a7fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a800:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a80a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a80e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a818:	b29b      	uxth	r3, r3
 800a81a:	461a      	mov	r2, r3
 800a81c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a820:	4413      	add	r3, r2
 800a822:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a82a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	00da      	lsls	r2, r3, #3
 800a834:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a838:	4413      	add	r3, r2
 800a83a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a83e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a842:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	b29b      	uxth	r3, r3
 800a84a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a84e:	b29a      	uxth	r2, r3
 800a850:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a854:	801a      	strh	r2, [r3, #0]
 800a856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a85a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a85c:	d923      	bls.n	800a8a6 <USB_EPStartXfer+0x149c>
 800a85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a862:	095b      	lsrs	r3, r3, #5
 800a864:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a86c:	f003 031f 	and.w	r3, r3, #31
 800a870:	2b00      	cmp	r3, #0
 800a872:	d104      	bne.n	800a87e <USB_EPStartXfer+0x1474>
 800a874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a878:	3b01      	subs	r3, #1
 800a87a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a87e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a882:	881b      	ldrh	r3, [r3, #0]
 800a884:	b29a      	uxth	r2, r3
 800a886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	029b      	lsls	r3, r3, #10
 800a88e:	b29b      	uxth	r3, r3
 800a890:	4313      	orrs	r3, r2
 800a892:	b29b      	uxth	r3, r3
 800a894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a8a2:	801a      	strh	r2, [r3, #0]
 800a8a4:	e060      	b.n	800a968 <USB_EPStartXfer+0x155e>
 800a8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10c      	bne.n	800a8c8 <USB_EPStartXfer+0x14be>
 800a8ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a8b2:	881b      	ldrh	r3, [r3, #0]
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a8c4:	801a      	strh	r2, [r3, #0]
 800a8c6:	e04f      	b.n	800a968 <USB_EPStartXfer+0x155e>
 800a8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8cc:	085b      	lsrs	r3, r3, #1
 800a8ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d004      	beq.n	800a8e8 <USB_EPStartXfer+0x14de>
 800a8de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a8e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a8ec:	881b      	ldrh	r3, [r3, #0]
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	029b      	lsls	r3, r3, #10
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a902:	801a      	strh	r2, [r3, #0]
 800a904:	e030      	b.n	800a968 <USB_EPStartXfer+0x155e>
 800a906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a90a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	785b      	ldrb	r3, [r3, #1]
 800a912:	2b01      	cmp	r3, #1
 800a914:	d128      	bne.n	800a968 <USB_EPStartXfer+0x155e>
 800a916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a91a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a928:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a932:	b29b      	uxth	r3, r3
 800a934:	461a      	mov	r2, r3
 800a936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a93a:	4413      	add	r3, r2
 800a93c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	00da      	lsls	r2, r3, #3
 800a94e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a952:	4413      	add	r3, r2
 800a954:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a958:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a960:	b29a      	uxth	r2, r3
 800a962:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a966:	801a      	strh	r2, [r3, #0]
 800a968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a96c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a97a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	785b      	ldrb	r3, [r3, #1]
 800a982:	2b00      	cmp	r3, #0
 800a984:	f040 8085 	bne.w	800aa92 <USB_EPStartXfer+0x1688>
 800a988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a98c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a99a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a9ac:	4413      	add	r3, r2
 800a9ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a9b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	00da      	lsls	r2, r3, #3
 800a9c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a9ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a9ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a9d2:	881b      	ldrh	r3, [r3, #0]
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a9e0:	801a      	strh	r2, [r3, #0]
 800a9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a9e8:	d923      	bls.n	800aa32 <USB_EPStartXfer+0x1628>
 800a9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9ee:	095b      	lsrs	r3, r3, #5
 800a9f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9f8:	f003 031f 	and.w	r3, r3, #31
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d104      	bne.n	800aa0a <USB_EPStartXfer+0x1600>
 800aa00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa04:	3b01      	subs	r3, #1
 800aa06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aa0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa0e:	881b      	ldrh	r3, [r3, #0]
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	029b      	lsls	r3, r3, #10
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa2e:	801a      	strh	r2, [r3, #0]
 800aa30:	e05c      	b.n	800aaec <USB_EPStartXfer+0x16e2>
 800aa32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10c      	bne.n	800aa54 <USB_EPStartXfer+0x164a>
 800aa3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa3e:	881b      	ldrh	r3, [r3, #0]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa50:	801a      	strh	r2, [r3, #0]
 800aa52:	e04b      	b.n	800aaec <USB_EPStartXfer+0x16e2>
 800aa54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa58:	085b      	lsrs	r3, r3, #1
 800aa5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aa5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d004      	beq.n	800aa74 <USB_EPStartXfer+0x166a>
 800aa6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa6e:	3301      	adds	r3, #1
 800aa70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aa74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	029b      	lsls	r3, r3, #10
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	4313      	orrs	r3, r2
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa8e:	801a      	strh	r2, [r3, #0]
 800aa90:	e02c      	b.n	800aaec <USB_EPStartXfer+0x16e2>
 800aa92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	785b      	ldrb	r3, [r3, #1]
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d124      	bne.n	800aaec <USB_EPStartXfer+0x16e2>
 800aaa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	461a      	mov	r2, r3
 800aab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aab8:	4413      	add	r3, r2
 800aaba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aabe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	00da      	lsls	r2, r3, #3
 800aacc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aad0:	4413      	add	r3, r2
 800aad2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aad6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aade:	b29a      	uxth	r2, r3
 800aae0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aae4:	801a      	strh	r2, [r3, #0]
 800aae6:	e001      	b.n	800aaec <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	e03a      	b.n	800ab62 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aaec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aafa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	881b      	ldrh	r3, [r3, #0]
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab12:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ab16:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ab1a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ab1e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ab22:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ab26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ab2a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ab2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	441a      	add	r2, r3
 800ab48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ab4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	785b      	ldrb	r3, [r3, #1]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d020      	beq.n	800abc0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4413      	add	r3, r2
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab94:	81bb      	strh	r3, [r7, #12]
 800ab96:	89bb      	ldrh	r3, [r7, #12]
 800ab98:	f083 0310 	eor.w	r3, r3, #16
 800ab9c:	81bb      	strh	r3, [r7, #12]
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	441a      	add	r2, r3
 800aba8:	89bb      	ldrh	r3, [r7, #12]
 800abaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abba:	b29b      	uxth	r3, r3
 800abbc:	8013      	strh	r3, [r2, #0]
 800abbe:	e01f      	b.n	800ac00 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4413      	add	r3, r2
 800abca:	881b      	ldrh	r3, [r3, #0]
 800abcc:	b29b      	uxth	r3, r3
 800abce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800abd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abd6:	81fb      	strh	r3, [r7, #14]
 800abd8:	89fb      	ldrh	r3, [r7, #14]
 800abda:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800abde:	81fb      	strh	r3, [r7, #14]
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	441a      	add	r2, r3
 800abea:	89fb      	ldrh	r3, [r7, #14]
 800abec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3714      	adds	r7, #20
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b087      	sub	sp, #28
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	7b1b      	ldrb	r3, [r3, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f040 809d 	bne.w	800ad5c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	785b      	ldrb	r3, [r3, #1]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d04c      	beq.n	800acc4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	881b      	ldrh	r3, [r3, #0]
 800ac36:	823b      	strh	r3, [r7, #16]
 800ac38:	8a3b      	ldrh	r3, [r7, #16]
 800ac3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d01b      	beq.n	800ac7a <USB_EPClearStall+0x6c>
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	881b      	ldrh	r3, [r3, #0]
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac58:	81fb      	strh	r3, [r7, #14]
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	441a      	add	r2, r3
 800ac64:	89fb      	ldrh	r3, [r7, #14]
 800ac66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	78db      	ldrb	r3, [r3, #3]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d06c      	beq.n	800ad5c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	881b      	ldrh	r3, [r3, #0]
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac98:	81bb      	strh	r3, [r7, #12]
 800ac9a:	89bb      	ldrh	r3, [r7, #12]
 800ac9c:	f083 0320 	eor.w	r3, r3, #32
 800aca0:	81bb      	strh	r3, [r7, #12]
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	441a      	add	r2, r3
 800acac:	89bb      	ldrh	r3, [r7, #12]
 800acae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	8013      	strh	r3, [r2, #0]
 800acc2:	e04b      	b.n	800ad5c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	881b      	ldrh	r3, [r3, #0]
 800acd0:	82fb      	strh	r3, [r7, #22]
 800acd2:	8afb      	ldrh	r3, [r7, #22]
 800acd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d01b      	beq.n	800ad14 <USB_EPClearStall+0x106>
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	b29b      	uxth	r3, r3
 800acea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acf2:	82bb      	strh	r3, [r7, #20]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	441a      	add	r2, r3
 800acfe:	8abb      	ldrh	r3, [r7, #20]
 800ad00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ad0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	881b      	ldrh	r3, [r3, #0]
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad2a:	827b      	strh	r3, [r7, #18]
 800ad2c:	8a7b      	ldrh	r3, [r7, #18]
 800ad2e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ad32:	827b      	strh	r3, [r7, #18]
 800ad34:	8a7b      	ldrh	r3, [r7, #18]
 800ad36:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ad3a:	827b      	strh	r3, [r7, #18]
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	441a      	add	r2, r3
 800ad46:	8a7b      	ldrh	r3, [r7, #18]
 800ad48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ad5c:	2300      	movs	r3, #0
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	371c      	adds	r7, #28
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr

0800ad6a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b083      	sub	sp, #12
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	460b      	mov	r3, r1
 800ad74:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ad76:	78fb      	ldrb	r3, [r7, #3]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d103      	bne.n	800ad84 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2280      	movs	r2, #128	@ 0x80
 800ad80:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b083      	sub	sp, #12
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ada6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adaa:	b29a      	uxth	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800adb2:	2300      	movs	r3, #0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800adce:	b29b      	uxth	r3, r3
 800add0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800add2:	68fb      	ldr	r3, [r7, #12]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3714      	adds	r7, #20
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b08b      	sub	sp, #44	@ 0x2c
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	4611      	mov	r1, r2
 800adec:	461a      	mov	r2, r3
 800adee:	460b      	mov	r3, r1
 800adf0:	80fb      	strh	r3, [r7, #6]
 800adf2:	4613      	mov	r3, r2
 800adf4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800adf6:	88bb      	ldrh	r3, [r7, #4]
 800adf8:	3301      	adds	r3, #1
 800adfa:	085b      	lsrs	r3, r3, #1
 800adfc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ae06:	88fa      	ldrh	r2, [r7, #6]
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae10:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae16:	e01b      	b.n	800ae50 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	3301      	adds	r3, #1
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	021b      	lsls	r3, r3, #8
 800ae26:	b21a      	sxth	r2, r3
 800ae28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	b21b      	sxth	r3, r3
 800ae30:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ae32:	6a3b      	ldr	r3, [r7, #32]
 800ae34:	8a7a      	ldrh	r2, [r7, #18]
 800ae36:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ae38:	6a3b      	ldr	r3, [r7, #32]
 800ae3a:	3302      	adds	r3, #2
 800ae3c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	3301      	adds	r3, #1
 800ae42:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	3301      	adds	r3, #1
 800ae48:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1e0      	bne.n	800ae18 <USB_WritePMA+0x38>
  }
}
 800ae56:	bf00      	nop
 800ae58:	bf00      	nop
 800ae5a:	372c      	adds	r7, #44	@ 0x2c
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b08b      	sub	sp, #44	@ 0x2c
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	4611      	mov	r1, r2
 800ae70:	461a      	mov	r2, r3
 800ae72:	460b      	mov	r3, r1
 800ae74:	80fb      	strh	r3, [r7, #6]
 800ae76:	4613      	mov	r3, r2
 800ae78:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ae7a:	88bb      	ldrh	r3, [r7, #4]
 800ae7c:	085b      	lsrs	r3, r3, #1
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ae8a:	88fa      	ldrh	r2, [r7, #6]
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	4413      	add	r3, r2
 800ae90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae94:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae9a:	e018      	b.n	800aece <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ae9c:	6a3b      	ldr	r3, [r7, #32]
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800aea4:	6a3b      	ldr	r3, [r7, #32]
 800aea6:	3302      	adds	r3, #2
 800aea8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	b2da      	uxtb	r2, r3
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	0a1b      	lsrs	r3, r3, #8
 800aebc:	b2da      	uxtb	r2, r3
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	3301      	adds	r3, #1
 800aec6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800aec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeca:	3b01      	subs	r3, #1
 800aecc:	627b      	str	r3, [r7, #36]	@ 0x24
 800aece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1e3      	bne.n	800ae9c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800aed4:	88bb      	ldrh	r3, [r7, #4]
 800aed6:	f003 0301 	and.w	r3, r3, #1
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d007      	beq.n	800aef0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800aee0:	6a3b      	ldr	r3, [r7, #32]
 800aee2:	881b      	ldrh	r3, [r3, #0]
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	b2da      	uxtb	r2, r3
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	701a      	strb	r2, [r3, #0]
  }
}
 800aef0:	bf00      	nop
 800aef2:	372c      	adds	r7, #44	@ 0x2c
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	460b      	mov	r3, r1
 800af06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800af08:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800af0c:	f002 f8fa 	bl	800d104 <USBD_static_malloc>
 800af10:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d105      	bne.n	800af24 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800af20:	2302      	movs	r3, #2
 800af22:	e066      	b.n	800aff2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	7c1b      	ldrb	r3, [r3, #16]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d119      	bne.n	800af68 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800af34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af38:	2202      	movs	r2, #2
 800af3a:	2181      	movs	r1, #129	@ 0x81
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f001 ff88 	bl	800ce52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800af48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af4c:	2202      	movs	r2, #2
 800af4e:	2101      	movs	r1, #1
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f001 ff7e 	bl	800ce52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2201      	movs	r2, #1
 800af5a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2210      	movs	r2, #16
 800af62:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800af66:	e016      	b.n	800af96 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800af68:	2340      	movs	r3, #64	@ 0x40
 800af6a:	2202      	movs	r2, #2
 800af6c:	2181      	movs	r1, #129	@ 0x81
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f001 ff6f 	bl	800ce52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2201      	movs	r2, #1
 800af78:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800af7a:	2340      	movs	r3, #64	@ 0x40
 800af7c:	2202      	movs	r2, #2
 800af7e:	2101      	movs	r1, #1
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f001 ff66 	bl	800ce52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2201      	movs	r2, #1
 800af8a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2210      	movs	r2, #16
 800af92:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af96:	2308      	movs	r3, #8
 800af98:	2203      	movs	r2, #3
 800af9a:	2182      	movs	r1, #130	@ 0x82
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f001 ff58 	bl	800ce52 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2201      	movs	r2, #1
 800afa6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	7c1b      	ldrb	r3, [r3, #16]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d109      	bne.n	800afe0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afd6:	2101      	movs	r1, #1
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f002 f829 	bl	800d030 <USBD_LL_PrepareReceive>
 800afde:	e007      	b.n	800aff0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afe6:	2340      	movs	r3, #64	@ 0x40
 800afe8:	2101      	movs	r1, #1
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f002 f820 	bl	800d030 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b082      	sub	sp, #8
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	460b      	mov	r3, r1
 800b004:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b006:	2181      	movs	r1, #129	@ 0x81
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f001 ff48 	bl	800ce9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b014:	2101      	movs	r1, #1
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f001 ff41 	bl	800ce9e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b024:	2182      	movs	r1, #130	@ 0x82
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f001 ff39 	bl	800ce9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00e      	beq.n	800b064 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b056:	4618      	mov	r0, r3
 800b058:	f002 f862 	bl	800d120 <USBD_static_free>
    pdev->pClassData = NULL;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
	...

0800b070 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b080:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b082:	2300      	movs	r3, #0
 800b084:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b086:	2300      	movs	r3, #0
 800b088:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b08a:	2300      	movs	r3, #0
 800b08c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d101      	bne.n	800b098 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b094:	2303      	movs	r3, #3
 800b096:	e0af      	b.n	800b1f8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d03f      	beq.n	800b124 <USBD_CDC_Setup+0xb4>
 800b0a4:	2b20      	cmp	r3, #32
 800b0a6:	f040 809f 	bne.w	800b1e8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	88db      	ldrh	r3, [r3, #6]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d02e      	beq.n	800b110 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	b25b      	sxtb	r3, r3
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	da16      	bge.n	800b0ea <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	683a      	ldr	r2, [r7, #0]
 800b0c6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b0c8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	88d2      	ldrh	r2, [r2, #6]
 800b0ce:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	88db      	ldrh	r3, [r3, #6]
 800b0d4:	2b07      	cmp	r3, #7
 800b0d6:	bf28      	it	cs
 800b0d8:	2307      	movcs	r3, #7
 800b0da:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	89fa      	ldrh	r2, [r7, #14]
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f001 facd 	bl	800c682 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b0e8:	e085      	b.n	800b1f6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	785a      	ldrb	r2, [r3, #1]
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	88db      	ldrh	r3, [r3, #6]
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b100:	6939      	ldr	r1, [r7, #16]
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	88db      	ldrh	r3, [r3, #6]
 800b106:	461a      	mov	r2, r3
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f001 fae6 	bl	800c6da <USBD_CtlPrepareRx>
      break;
 800b10e:	e072      	b.n	800b1f6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	683a      	ldr	r2, [r7, #0]
 800b11a:	7850      	ldrb	r0, [r2, #1]
 800b11c:	2200      	movs	r2, #0
 800b11e:	6839      	ldr	r1, [r7, #0]
 800b120:	4798      	blx	r3
      break;
 800b122:	e068      	b.n	800b1f6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	785b      	ldrb	r3, [r3, #1]
 800b128:	2b0b      	cmp	r3, #11
 800b12a:	d852      	bhi.n	800b1d2 <USBD_CDC_Setup+0x162>
 800b12c:	a201      	add	r2, pc, #4	@ (adr r2, 800b134 <USBD_CDC_Setup+0xc4>)
 800b12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b132:	bf00      	nop
 800b134:	0800b165 	.word	0x0800b165
 800b138:	0800b1e1 	.word	0x0800b1e1
 800b13c:	0800b1d3 	.word	0x0800b1d3
 800b140:	0800b1d3 	.word	0x0800b1d3
 800b144:	0800b1d3 	.word	0x0800b1d3
 800b148:	0800b1d3 	.word	0x0800b1d3
 800b14c:	0800b1d3 	.word	0x0800b1d3
 800b150:	0800b1d3 	.word	0x0800b1d3
 800b154:	0800b1d3 	.word	0x0800b1d3
 800b158:	0800b1d3 	.word	0x0800b1d3
 800b15c:	0800b18f 	.word	0x0800b18f
 800b160:	0800b1b9 	.word	0x0800b1b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	2b03      	cmp	r3, #3
 800b16e:	d107      	bne.n	800b180 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b170:	f107 030a 	add.w	r3, r7, #10
 800b174:	2202      	movs	r2, #2
 800b176:	4619      	mov	r1, r3
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f001 fa82 	bl	800c682 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b17e:	e032      	b.n	800b1e6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b180:	6839      	ldr	r1, [r7, #0]
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f001 fa0c 	bl	800c5a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b188:	2303      	movs	r3, #3
 800b18a:	75fb      	strb	r3, [r7, #23]
          break;
 800b18c:	e02b      	b.n	800b1e6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b194:	b2db      	uxtb	r3, r3
 800b196:	2b03      	cmp	r3, #3
 800b198:	d107      	bne.n	800b1aa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b19a:	f107 030d 	add.w	r3, r7, #13
 800b19e:	2201      	movs	r2, #1
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f001 fa6d 	bl	800c682 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b1a8:	e01d      	b.n	800b1e6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b1aa:	6839      	ldr	r1, [r7, #0]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f001 f9f7 	bl	800c5a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b1b2:	2303      	movs	r3, #3
 800b1b4:	75fb      	strb	r3, [r7, #23]
          break;
 800b1b6:	e016      	b.n	800b1e6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	2b03      	cmp	r3, #3
 800b1c2:	d00f      	beq.n	800b1e4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b1c4:	6839      	ldr	r1, [r7, #0]
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f001 f9ea 	bl	800c5a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b1d0:	e008      	b.n	800b1e4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f001 f9e3 	bl	800c5a0 <USBD_CtlError>
          ret = USBD_FAIL;
 800b1da:	2303      	movs	r3, #3
 800b1dc:	75fb      	strb	r3, [r7, #23]
          break;
 800b1de:	e002      	b.n	800b1e6 <USBD_CDC_Setup+0x176>
          break;
 800b1e0:	bf00      	nop
 800b1e2:	e008      	b.n	800b1f6 <USBD_CDC_Setup+0x186>
          break;
 800b1e4:	bf00      	nop
      }
      break;
 800b1e6:	e006      	b.n	800b1f6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f001 f9d8 	bl	800c5a0 <USBD_CtlError>
      ret = USBD_FAIL;
 800b1f0:	2303      	movs	r3, #3
 800b1f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b1f4:	bf00      	nop
  }

  return (uint8_t)ret;
 800b1f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3718      	adds	r7, #24
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	460b      	mov	r3, r1
 800b20a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b212:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d101      	bne.n	800b222 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b21e:	2303      	movs	r3, #3
 800b220:	e04f      	b.n	800b2c2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b228:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b22a:	78fa      	ldrb	r2, [r7, #3]
 800b22c:	6879      	ldr	r1, [r7, #4]
 800b22e:	4613      	mov	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	4413      	add	r3, r2
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	440b      	add	r3, r1
 800b238:	3318      	adds	r3, #24
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d029      	beq.n	800b294 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b240:	78fa      	ldrb	r2, [r7, #3]
 800b242:	6879      	ldr	r1, [r7, #4]
 800b244:	4613      	mov	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	4413      	add	r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	440b      	add	r3, r1
 800b24e:	3318      	adds	r3, #24
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	78f9      	ldrb	r1, [r7, #3]
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	460b      	mov	r3, r1
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	440b      	add	r3, r1
 800b25c:	00db      	lsls	r3, r3, #3
 800b25e:	4403      	add	r3, r0
 800b260:	3320      	adds	r3, #32
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	fbb2 f1f3 	udiv	r1, r2, r3
 800b268:	fb01 f303 	mul.w	r3, r1, r3
 800b26c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d110      	bne.n	800b294 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b272:	78fa      	ldrb	r2, [r7, #3]
 800b274:	6879      	ldr	r1, [r7, #4]
 800b276:	4613      	mov	r3, r2
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	4413      	add	r3, r2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	440b      	add	r3, r1
 800b280:	3318      	adds	r3, #24
 800b282:	2200      	movs	r2, #0
 800b284:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b286:	78f9      	ldrb	r1, [r7, #3]
 800b288:	2300      	movs	r3, #0
 800b28a:	2200      	movs	r2, #0
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f001 feae 	bl	800cfee <USBD_LL_Transmit>
 800b292:	e015      	b.n	800b2c0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	2200      	movs	r2, #0
 800b298:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00b      	beq.n	800b2c0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b2b6:	68ba      	ldr	r2, [r7, #8]
 800b2b8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b2bc:	78fa      	ldrb	r2, [r7, #3]
 800b2be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b084      	sub	sp, #16
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d101      	bne.n	800b2ec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	e015      	b.n	800b318 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b2ec:	78fb      	ldrb	r3, [r7, #3]
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f001 febe 	bl	800d072 <USBD_LL_GetRxDataSize>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b312:	4611      	mov	r1, r2
 800b314:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b32e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d101      	bne.n	800b33a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b336:	2303      	movs	r3, #3
 800b338:	e01a      	b.n	800b370 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d014      	beq.n	800b36e <USBD_CDC_EP0_RxReady+0x4e>
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b34a:	2bff      	cmp	r3, #255	@ 0xff
 800b34c:	d00f      	beq.n	800b36e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800b35c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b364:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	22ff      	movs	r2, #255	@ 0xff
 800b36a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2243      	movs	r2, #67	@ 0x43
 800b384:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b386:	4b03      	ldr	r3, [pc, #12]	@ (800b394 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b388:	4618      	mov	r0, r3
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	20000094 	.word	0x20000094

0800b398 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2243      	movs	r2, #67	@ 0x43
 800b3a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b3a6:	4b03      	ldr	r3, [pc, #12]	@ (800b3b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr
 800b3b4:	20000050 	.word	0x20000050

0800b3b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2243      	movs	r2, #67	@ 0x43
 800b3c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b3c6:	4b03      	ldr	r3, [pc, #12]	@ (800b3d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr
 800b3d4:	200000d8 	.word	0x200000d8

0800b3d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	220a      	movs	r2, #10
 800b3e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b3e6:	4b03      	ldr	r3, [pc, #12]	@ (800b3f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr
 800b3f4:	2000000c 	.word	0x2000000c

0800b3f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b408:	2303      	movs	r3, #3
 800b40a:	e004      	b.n	800b416 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	683a      	ldr	r2, [r7, #0]
 800b410:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	370c      	adds	r7, #12
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr

0800b422 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b422:	b480      	push	{r7}
 800b424:	b087      	sub	sp, #28
 800b426:	af00      	add	r7, sp, #0
 800b428:	60f8      	str	r0, [r7, #12]
 800b42a:	60b9      	str	r1, [r7, #8]
 800b42c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b434:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d101      	bne.n	800b440 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b43c:	2303      	movs	r3, #3
 800b43e:	e008      	b.n	800b452 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	371c      	adds	r7, #28
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b45e:	b480      	push	{r7}
 800b460:	b085      	sub	sp, #20
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b46e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d101      	bne.n	800b47a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b476:	2303      	movs	r3, #3
 800b478:	e004      	b.n	800b484 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	683a      	ldr	r2, [r7, #0]
 800b47e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3714      	adds	r7, #20
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b49e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b4ae:	2303      	movs	r3, #3
 800b4b0:	e01a      	b.n	800b4e8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d114      	bne.n	800b4e6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b4da:	2181      	movs	r1, #129	@ 0x81
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f001 fd86 	bl	800cfee <USBD_LL_Transmit>

    ret = USBD_OK;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b506:	2b00      	cmp	r3, #0
 800b508:	d101      	bne.n	800b50e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b50a:	2303      	movs	r3, #3
 800b50c:	e016      	b.n	800b53c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	7c1b      	ldrb	r3, [r3, #16]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d109      	bne.n	800b52a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b51c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b520:	2101      	movs	r1, #1
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f001 fd84 	bl	800d030 <USBD_LL_PrepareReceive>
 800b528:	e007      	b.n	800b53a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b530:	2340      	movs	r3, #64	@ 0x40
 800b532:	2101      	movs	r1, #1
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f001 fd7b 	bl	800d030 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b53a:	2300      	movs	r3, #0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	4613      	mov	r3, r2
 800b550:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d101      	bne.n	800b55c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b558:	2303      	movs	r3, #3
 800b55a:	e01f      	b.n	800b59c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2200      	movs	r2, #0
 800b568:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2200      	movs	r2, #0
 800b570:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d003      	beq.n	800b582 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	68ba      	ldr	r2, [r7, #8]
 800b57e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2201      	movs	r2, #1
 800b586:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	79fa      	ldrb	r2, [r7, #7]
 800b58e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f001 fbe3 	bl	800cd5c <USBD_LL_Init>
 800b596:	4603      	mov	r3, r0
 800b598:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3718      	adds	r7, #24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	e016      	b.n	800b5ea <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00b      	beq.n	800b5e8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d8:	f107 020e 	add.w	r2, r7, #14
 800b5dc:	4610      	mov	r0, r2
 800b5de:	4798      	blx	r3
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b082      	sub	sp, #8
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f001 fc0e 	bl	800ce1c <USBD_LL_Start>
 800b600:	4603      	mov	r3, r0
}
 800b602:	4618      	mov	r0, r3
 800b604:	3708      	adds	r7, #8
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b083      	sub	sp, #12
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b612:	2300      	movs	r3, #0
}
 800b614:	4618      	mov	r0, r3
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	460b      	mov	r3, r1
 800b62a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b62c:	2303      	movs	r3, #3
 800b62e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b636:	2b00      	cmp	r3, #0
 800b638:	d009      	beq.n	800b64e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	78fa      	ldrb	r2, [r7, #3]
 800b644:	4611      	mov	r1, r2
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	4798      	blx	r3
 800b64a:	4603      	mov	r3, r0
 800b64c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3710      	adds	r7, #16
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	460b      	mov	r3, r1
 800b662:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d007      	beq.n	800b67e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	78fa      	ldrb	r2, [r7, #3]
 800b678:	4611      	mov	r1, r2
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	4798      	blx	r3
  }

  return USBD_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	3708      	adds	r7, #8
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b698:	6839      	ldr	r1, [r7, #0]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f000 ff46 	bl	800c52c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b6bc:	f003 031f 	and.w	r3, r3, #31
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	d01a      	beq.n	800b6fa <USBD_LL_SetupStage+0x72>
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d822      	bhi.n	800b70e <USBD_LL_SetupStage+0x86>
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d002      	beq.n	800b6d2 <USBD_LL_SetupStage+0x4a>
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d00a      	beq.n	800b6e6 <USBD_LL_SetupStage+0x5e>
 800b6d0:	e01d      	b.n	800b70e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6d8:	4619      	mov	r1, r3
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 f9ee 	bl	800babc <USBD_StdDevReq>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b6e4:	e020      	b.n	800b728 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fa52 	bl	800bb98 <USBD_StdItfReq>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b6f8:	e016      	b.n	800b728 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b700:	4619      	mov	r1, r3
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 fa91 	bl	800bc2a <USBD_StdEPReq>
 800b708:	4603      	mov	r3, r0
 800b70a:	73fb      	strb	r3, [r7, #15]
      break;
 800b70c:	e00c      	b.n	800b728 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b714:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	4619      	mov	r1, r3
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f001 fbdd 	bl	800cedc <USBD_LL_StallEP>
 800b722:	4603      	mov	r3, r0
 800b724:	73fb      	strb	r3, [r7, #15]
      break;
 800b726:	bf00      	nop
  }

  return ret;
 800b728:	7bfb      	ldrb	r3, [r7, #15]
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b732:	b580      	push	{r7, lr}
 800b734:	b086      	sub	sp, #24
 800b736:	af00      	add	r7, sp, #0
 800b738:	60f8      	str	r0, [r7, #12]
 800b73a:	460b      	mov	r3, r1
 800b73c:	607a      	str	r2, [r7, #4]
 800b73e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b740:	7afb      	ldrb	r3, [r7, #11]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d138      	bne.n	800b7b8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b74c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b754:	2b03      	cmp	r3, #3
 800b756:	d14a      	bne.n	800b7ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	689a      	ldr	r2, [r3, #8]
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	429a      	cmp	r2, r3
 800b762:	d913      	bls.n	800b78c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	689a      	ldr	r2, [r3, #8]
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	1ad2      	subs	r2, r2, r3
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	68da      	ldr	r2, [r3, #12]
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	4293      	cmp	r3, r2
 800b77c:	bf28      	it	cs
 800b77e:	4613      	movcs	r3, r2
 800b780:	461a      	mov	r2, r3
 800b782:	6879      	ldr	r1, [r7, #4]
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	f000 ffc5 	bl	800c714 <USBD_CtlContinueRx>
 800b78a:	e030      	b.n	800b7ee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b792:	b2db      	uxtb	r3, r3
 800b794:	2b03      	cmp	r3, #3
 800b796:	d10b      	bne.n	800b7b0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d005      	beq.n	800b7b0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f000 ffc0 	bl	800c736 <USBD_CtlSendStatus>
 800b7b6:	e01a      	b.n	800b7ee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	2b03      	cmp	r3, #3
 800b7c2:	d114      	bne.n	800b7ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00e      	beq.n	800b7ee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7d6:	699b      	ldr	r3, [r3, #24]
 800b7d8:	7afa      	ldrb	r2, [r7, #11]
 800b7da:	4611      	mov	r1, r2
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	4798      	blx	r3
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b7e4:	7dfb      	ldrb	r3, [r7, #23]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
 800b7ec:	e000      	b.n	800b7f0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3718      	adds	r7, #24
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b086      	sub	sp, #24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	460b      	mov	r3, r1
 800b802:	607a      	str	r2, [r7, #4]
 800b804:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b806:	7afb      	ldrb	r3, [r7, #11]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d16b      	bne.n	800b8e4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	3314      	adds	r3, #20
 800b810:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b818:	2b02      	cmp	r3, #2
 800b81a:	d156      	bne.n	800b8ca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	689a      	ldr	r2, [r3, #8]
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	429a      	cmp	r2, r3
 800b826:	d914      	bls.n	800b852 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	689a      	ldr	r2, [r3, #8]
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	1ad2      	subs	r2, r2, r3
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	461a      	mov	r2, r3
 800b83c:	6879      	ldr	r1, [r7, #4]
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f000 ff3a 	bl	800c6b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b844:	2300      	movs	r3, #0
 800b846:	2200      	movs	r2, #0
 800b848:	2100      	movs	r1, #0
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f001 fbf0 	bl	800d030 <USBD_LL_PrepareReceive>
 800b850:	e03b      	b.n	800b8ca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	68da      	ldr	r2, [r3, #12]
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d11c      	bne.n	800b898 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	685a      	ldr	r2, [r3, #4]
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b866:	429a      	cmp	r2, r3
 800b868:	d316      	bcc.n	800b898 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	685a      	ldr	r2, [r3, #4]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b874:	429a      	cmp	r2, r3
 800b876:	d20f      	bcs.n	800b898 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b878:	2200      	movs	r2, #0
 800b87a:	2100      	movs	r1, #0
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f000 ff1b 	bl	800c6b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2200      	movs	r2, #0
 800b886:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b88a:	2300      	movs	r3, #0
 800b88c:	2200      	movs	r2, #0
 800b88e:	2100      	movs	r1, #0
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	f001 fbcd 	bl	800d030 <USBD_LL_PrepareReceive>
 800b896:	e018      	b.n	800b8ca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	2b03      	cmp	r3, #3
 800b8a2:	d10b      	bne.n	800b8bc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d005      	beq.n	800b8bc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8bc:	2180      	movs	r1, #128	@ 0x80
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f001 fb0c 	bl	800cedc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f000 ff49 	bl	800c75c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d122      	bne.n	800b91a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f7ff fe98 	bl	800b60a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b8e2:	e01a      	b.n	800b91a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	2b03      	cmp	r3, #3
 800b8ee:	d114      	bne.n	800b91a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8f6:	695b      	ldr	r3, [r3, #20]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00e      	beq.n	800b91a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b902:	695b      	ldr	r3, [r3, #20]
 800b904:	7afa      	ldrb	r2, [r7, #11]
 800b906:	4611      	mov	r1, r2
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	4798      	blx	r3
 800b90c:	4603      	mov	r3, r0
 800b90e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b910:	7dfb      	ldrb	r3, [r7, #23]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d001      	beq.n	800b91a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b916:	7dfb      	ldrb	r3, [r7, #23]
 800b918:	e000      	b.n	800b91c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3718      	adds	r7, #24
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b950:	2b00      	cmp	r3, #0
 800b952:	d101      	bne.n	800b958 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b954:	2303      	movs	r3, #3
 800b956:	e02f      	b.n	800b9b8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00f      	beq.n	800b982 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d009      	beq.n	800b982 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	6852      	ldr	r2, [r2, #4]
 800b97a:	b2d2      	uxtb	r2, r2
 800b97c:	4611      	mov	r1, r2
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b982:	2340      	movs	r3, #64	@ 0x40
 800b984:	2200      	movs	r2, #0
 800b986:	2100      	movs	r1, #0
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f001 fa62 	bl	800ce52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2201      	movs	r2, #1
 800b992:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2240      	movs	r2, #64	@ 0x40
 800b99a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b99e:	2340      	movs	r3, #64	@ 0x40
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	2180      	movs	r1, #128	@ 0x80
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f001 fa54 	bl	800ce52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2240      	movs	r2, #64	@ 0x40
 800b9b4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	78fa      	ldrb	r2, [r7, #3]
 800b9d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2204      	movs	r2, #4
 800b9fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	2b04      	cmp	r3, #4
 800ba1e:	d106      	bne.n	800ba2e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ba26:	b2da      	uxtb	r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d101      	bne.n	800ba52 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ba4e:	2303      	movs	r3, #3
 800ba50:	e012      	b.n	800ba78 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d10b      	bne.n	800ba76 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba64:	69db      	ldr	r3, [r3, #28]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d005      	beq.n	800ba76 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba70:	69db      	ldr	r3, [r3, #28]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3708      	adds	r7, #8
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b087      	sub	sp, #28
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	3301      	adds	r3, #1
 800ba96:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ba9e:	8a3b      	ldrh	r3, [r7, #16]
 800baa0:	021b      	lsls	r3, r3, #8
 800baa2:	b21a      	sxth	r2, r3
 800baa4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800baa8:	4313      	orrs	r3, r2
 800baaa:	b21b      	sxth	r3, r3
 800baac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800baae:	89fb      	ldrh	r3, [r7, #14]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	371c      	adds	r7, #28
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bad2:	2b40      	cmp	r3, #64	@ 0x40
 800bad4:	d005      	beq.n	800bae2 <USBD_StdDevReq+0x26>
 800bad6:	2b40      	cmp	r3, #64	@ 0x40
 800bad8:	d853      	bhi.n	800bb82 <USBD_StdDevReq+0xc6>
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00b      	beq.n	800baf6 <USBD_StdDevReq+0x3a>
 800bade:	2b20      	cmp	r3, #32
 800bae0:	d14f      	bne.n	800bb82 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	6839      	ldr	r1, [r7, #0]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	4798      	blx	r3
 800baf0:	4603      	mov	r3, r0
 800baf2:	73fb      	strb	r3, [r7, #15]
      break;
 800baf4:	e04a      	b.n	800bb8c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	785b      	ldrb	r3, [r3, #1]
 800bafa:	2b09      	cmp	r3, #9
 800bafc:	d83b      	bhi.n	800bb76 <USBD_StdDevReq+0xba>
 800bafe:	a201      	add	r2, pc, #4	@ (adr r2, 800bb04 <USBD_StdDevReq+0x48>)
 800bb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb04:	0800bb59 	.word	0x0800bb59
 800bb08:	0800bb6d 	.word	0x0800bb6d
 800bb0c:	0800bb77 	.word	0x0800bb77
 800bb10:	0800bb63 	.word	0x0800bb63
 800bb14:	0800bb77 	.word	0x0800bb77
 800bb18:	0800bb37 	.word	0x0800bb37
 800bb1c:	0800bb2d 	.word	0x0800bb2d
 800bb20:	0800bb77 	.word	0x0800bb77
 800bb24:	0800bb4f 	.word	0x0800bb4f
 800bb28:	0800bb41 	.word	0x0800bb41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 f9de 	bl	800bef0 <USBD_GetDescriptor>
          break;
 800bb34:	e024      	b.n	800bb80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bb36:	6839      	ldr	r1, [r7, #0]
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fb6d 	bl	800c218 <USBD_SetAddress>
          break;
 800bb3e:	e01f      	b.n	800bb80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bb40:	6839      	ldr	r1, [r7, #0]
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fbac 	bl	800c2a0 <USBD_SetConfig>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	73fb      	strb	r3, [r7, #15]
          break;
 800bb4c:	e018      	b.n	800bb80 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 fc4b 	bl	800c3ec <USBD_GetConfig>
          break;
 800bb56:	e013      	b.n	800bb80 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bb58:	6839      	ldr	r1, [r7, #0]
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 fc7c 	bl	800c458 <USBD_GetStatus>
          break;
 800bb60:	e00e      	b.n	800bb80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bb62:	6839      	ldr	r1, [r7, #0]
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fcab 	bl	800c4c0 <USBD_SetFeature>
          break;
 800bb6a:	e009      	b.n	800bb80 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bb6c:	6839      	ldr	r1, [r7, #0]
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fcba 	bl	800c4e8 <USBD_ClrFeature>
          break;
 800bb74:	e004      	b.n	800bb80 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bb76:	6839      	ldr	r1, [r7, #0]
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fd11 	bl	800c5a0 <USBD_CtlError>
          break;
 800bb7e:	bf00      	nop
      }
      break;
 800bb80:	e004      	b.n	800bb8c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bb82:	6839      	ldr	r1, [r7, #0]
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 fd0b 	bl	800c5a0 <USBD_CtlError>
      break;
 800bb8a:	bf00      	nop
  }

  return ret;
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop

0800bb98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bba2:	2300      	movs	r3, #0
 800bba4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbae:	2b40      	cmp	r3, #64	@ 0x40
 800bbb0:	d005      	beq.n	800bbbe <USBD_StdItfReq+0x26>
 800bbb2:	2b40      	cmp	r3, #64	@ 0x40
 800bbb4:	d82f      	bhi.n	800bc16 <USBD_StdItfReq+0x7e>
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <USBD_StdItfReq+0x26>
 800bbba:	2b20      	cmp	r3, #32
 800bbbc:	d12b      	bne.n	800bc16 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d81d      	bhi.n	800bc08 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	889b      	ldrh	r3, [r3, #4]
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d813      	bhi.n	800bbfe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	6839      	ldr	r1, [r7, #0]
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	4798      	blx	r3
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	88db      	ldrh	r3, [r3, #6]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d110      	bne.n	800bc12 <USBD_StdItfReq+0x7a>
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d10d      	bne.n	800bc12 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 fd9d 	bl	800c736 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bbfc:	e009      	b.n	800bc12 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bbfe:	6839      	ldr	r1, [r7, #0]
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 fccd 	bl	800c5a0 <USBD_CtlError>
          break;
 800bc06:	e004      	b.n	800bc12 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bc08:	6839      	ldr	r1, [r7, #0]
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fcc8 	bl	800c5a0 <USBD_CtlError>
          break;
 800bc10:	e000      	b.n	800bc14 <USBD_StdItfReq+0x7c>
          break;
 800bc12:	bf00      	nop
      }
      break;
 800bc14:	e004      	b.n	800bc20 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bc16:	6839      	ldr	r1, [r7, #0]
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 fcc1 	bl	800c5a0 <USBD_CtlError>
      break;
 800bc1e:	bf00      	nop
  }

  return ret;
 800bc20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b084      	sub	sp, #16
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
 800bc32:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	889b      	ldrh	r3, [r3, #4]
 800bc3c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bc46:	2b40      	cmp	r3, #64	@ 0x40
 800bc48:	d007      	beq.n	800bc5a <USBD_StdEPReq+0x30>
 800bc4a:	2b40      	cmp	r3, #64	@ 0x40
 800bc4c:	f200 8145 	bhi.w	800beda <USBD_StdEPReq+0x2b0>
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d00c      	beq.n	800bc6e <USBD_StdEPReq+0x44>
 800bc54:	2b20      	cmp	r3, #32
 800bc56:	f040 8140 	bne.w	800beda <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	6839      	ldr	r1, [r7, #0]
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	4798      	blx	r3
 800bc68:	4603      	mov	r3, r0
 800bc6a:	73fb      	strb	r3, [r7, #15]
      break;
 800bc6c:	e13a      	b.n	800bee4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	785b      	ldrb	r3, [r3, #1]
 800bc72:	2b03      	cmp	r3, #3
 800bc74:	d007      	beq.n	800bc86 <USBD_StdEPReq+0x5c>
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	f300 8129 	bgt.w	800bece <USBD_StdEPReq+0x2a4>
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d07f      	beq.n	800bd80 <USBD_StdEPReq+0x156>
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d03c      	beq.n	800bcfe <USBD_StdEPReq+0xd4>
 800bc84:	e123      	b.n	800bece <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	2b02      	cmp	r3, #2
 800bc90:	d002      	beq.n	800bc98 <USBD_StdEPReq+0x6e>
 800bc92:	2b03      	cmp	r3, #3
 800bc94:	d016      	beq.n	800bcc4 <USBD_StdEPReq+0x9a>
 800bc96:	e02c      	b.n	800bcf2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00d      	beq.n	800bcba <USBD_StdEPReq+0x90>
 800bc9e:	7bbb      	ldrb	r3, [r7, #14]
 800bca0:	2b80      	cmp	r3, #128	@ 0x80
 800bca2:	d00a      	beq.n	800bcba <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bca4:	7bbb      	ldrb	r3, [r7, #14]
 800bca6:	4619      	mov	r1, r3
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f001 f917 	bl	800cedc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcae:	2180      	movs	r1, #128	@ 0x80
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f001 f913 	bl	800cedc <USBD_LL_StallEP>
 800bcb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bcb8:	e020      	b.n	800bcfc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bcba:	6839      	ldr	r1, [r7, #0]
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 fc6f 	bl	800c5a0 <USBD_CtlError>
              break;
 800bcc2:	e01b      	b.n	800bcfc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	885b      	ldrh	r3, [r3, #2]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10e      	bne.n	800bcea <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bccc:	7bbb      	ldrb	r3, [r7, #14]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00b      	beq.n	800bcea <USBD_StdEPReq+0xc0>
 800bcd2:	7bbb      	ldrb	r3, [r7, #14]
 800bcd4:	2b80      	cmp	r3, #128	@ 0x80
 800bcd6:	d008      	beq.n	800bcea <USBD_StdEPReq+0xc0>
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	88db      	ldrh	r3, [r3, #6]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d104      	bne.n	800bcea <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bce0:	7bbb      	ldrb	r3, [r7, #14]
 800bce2:	4619      	mov	r1, r3
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f001 f8f9 	bl	800cedc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 fd23 	bl	800c736 <USBD_CtlSendStatus>

              break;
 800bcf0:	e004      	b.n	800bcfc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bcf2:	6839      	ldr	r1, [r7, #0]
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 fc53 	bl	800c5a0 <USBD_CtlError>
              break;
 800bcfa:	bf00      	nop
          }
          break;
 800bcfc:	e0ec      	b.n	800bed8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	d002      	beq.n	800bd10 <USBD_StdEPReq+0xe6>
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	d016      	beq.n	800bd3c <USBD_StdEPReq+0x112>
 800bd0e:	e030      	b.n	800bd72 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd10:	7bbb      	ldrb	r3, [r7, #14]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00d      	beq.n	800bd32 <USBD_StdEPReq+0x108>
 800bd16:	7bbb      	ldrb	r3, [r7, #14]
 800bd18:	2b80      	cmp	r3, #128	@ 0x80
 800bd1a:	d00a      	beq.n	800bd32 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
 800bd1e:	4619      	mov	r1, r3
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f001 f8db 	bl	800cedc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd26:	2180      	movs	r1, #128	@ 0x80
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f001 f8d7 	bl	800cedc <USBD_LL_StallEP>
 800bd2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd30:	e025      	b.n	800bd7e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bd32:	6839      	ldr	r1, [r7, #0]
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fc33 	bl	800c5a0 <USBD_CtlError>
              break;
 800bd3a:	e020      	b.n	800bd7e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	885b      	ldrh	r3, [r3, #2]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d11b      	bne.n	800bd7c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bd44:	7bbb      	ldrb	r3, [r7, #14]
 800bd46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d004      	beq.n	800bd58 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bd4e:	7bbb      	ldrb	r3, [r7, #14]
 800bd50:	4619      	mov	r1, r3
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f001 f8e1 	bl	800cf1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 fcec 	bl	800c736 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	4798      	blx	r3
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bd70:	e004      	b.n	800bd7c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bd72:	6839      	ldr	r1, [r7, #0]
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 fc13 	bl	800c5a0 <USBD_CtlError>
              break;
 800bd7a:	e000      	b.n	800bd7e <USBD_StdEPReq+0x154>
              break;
 800bd7c:	bf00      	nop
          }
          break;
 800bd7e:	e0ab      	b.n	800bed8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	d002      	beq.n	800bd92 <USBD_StdEPReq+0x168>
 800bd8c:	2b03      	cmp	r3, #3
 800bd8e:	d032      	beq.n	800bdf6 <USBD_StdEPReq+0x1cc>
 800bd90:	e097      	b.n	800bec2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd92:	7bbb      	ldrb	r3, [r7, #14]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d007      	beq.n	800bda8 <USBD_StdEPReq+0x17e>
 800bd98:	7bbb      	ldrb	r3, [r7, #14]
 800bd9a:	2b80      	cmp	r3, #128	@ 0x80
 800bd9c:	d004      	beq.n	800bda8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 fbfd 	bl	800c5a0 <USBD_CtlError>
                break;
 800bda6:	e091      	b.n	800becc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bda8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	da0b      	bge.n	800bdc8 <USBD_StdEPReq+0x19e>
 800bdb0:	7bbb      	ldrb	r3, [r7, #14]
 800bdb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdb6:	4613      	mov	r3, r2
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	4413      	add	r3, r2
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	3310      	adds	r3, #16
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	3304      	adds	r3, #4
 800bdc6:	e00b      	b.n	800bde0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
 800bdca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdce:	4613      	mov	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4413      	add	r3, r2
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	4413      	add	r3, r2
 800bdde:	3304      	adds	r3, #4
 800bde0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	2200      	movs	r2, #0
 800bde6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	2202      	movs	r2, #2
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fc47 	bl	800c682 <USBD_CtlSendData>
              break;
 800bdf4:	e06a      	b.n	800becc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bdf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	da11      	bge.n	800be22 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bdfe:	7bbb      	ldrb	r3, [r7, #14]
 800be00:	f003 020f 	and.w	r2, r3, #15
 800be04:	6879      	ldr	r1, [r7, #4]
 800be06:	4613      	mov	r3, r2
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	4413      	add	r3, r2
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	440b      	add	r3, r1
 800be10:	3324      	adds	r3, #36	@ 0x24
 800be12:	881b      	ldrh	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d117      	bne.n	800be48 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800be18:	6839      	ldr	r1, [r7, #0]
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 fbc0 	bl	800c5a0 <USBD_CtlError>
                  break;
 800be20:	e054      	b.n	800becc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be22:	7bbb      	ldrb	r3, [r7, #14]
 800be24:	f003 020f 	and.w	r2, r3, #15
 800be28:	6879      	ldr	r1, [r7, #4]
 800be2a:	4613      	mov	r3, r2
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	4413      	add	r3, r2
 800be30:	009b      	lsls	r3, r3, #2
 800be32:	440b      	add	r3, r1
 800be34:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800be38:	881b      	ldrh	r3, [r3, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d104      	bne.n	800be48 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fbad 	bl	800c5a0 <USBD_CtlError>
                  break;
 800be46:	e041      	b.n	800becc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	da0b      	bge.n	800be68 <USBD_StdEPReq+0x23e>
 800be50:	7bbb      	ldrb	r3, [r7, #14]
 800be52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be56:	4613      	mov	r3, r2
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	3310      	adds	r3, #16
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	4413      	add	r3, r2
 800be64:	3304      	adds	r3, #4
 800be66:	e00b      	b.n	800be80 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be68:	7bbb      	ldrb	r3, [r7, #14]
 800be6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be6e:	4613      	mov	r3, r2
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	4413      	add	r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	4413      	add	r3, r2
 800be7e:	3304      	adds	r3, #4
 800be80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800be82:	7bbb      	ldrb	r3, [r7, #14]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d002      	beq.n	800be8e <USBD_StdEPReq+0x264>
 800be88:	7bbb      	ldrb	r3, [r7, #14]
 800be8a:	2b80      	cmp	r3, #128	@ 0x80
 800be8c:	d103      	bne.n	800be96 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2200      	movs	r2, #0
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	e00e      	b.n	800beb4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800be96:	7bbb      	ldrb	r3, [r7, #14]
 800be98:	4619      	mov	r1, r3
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f001 f85c 	bl	800cf58 <USBD_LL_IsStallEP>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d003      	beq.n	800beae <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	2201      	movs	r2, #1
 800beaa:	601a      	str	r2, [r3, #0]
 800beac:	e002      	b.n	800beb4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	2200      	movs	r2, #0
 800beb2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	2202      	movs	r2, #2
 800beb8:	4619      	mov	r1, r3
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 fbe1 	bl	800c682 <USBD_CtlSendData>
              break;
 800bec0:	e004      	b.n	800becc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fb6b 	bl	800c5a0 <USBD_CtlError>
              break;
 800beca:	bf00      	nop
          }
          break;
 800becc:	e004      	b.n	800bed8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fb65 	bl	800c5a0 <USBD_CtlError>
          break;
 800bed6:	bf00      	nop
      }
      break;
 800bed8:	e004      	b.n	800bee4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fb5f 	bl	800c5a0 <USBD_CtlError>
      break;
 800bee2:	bf00      	nop
  }

  return ret;
 800bee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
	...

0800bef0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800befa:	2300      	movs	r3, #0
 800befc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800befe:	2300      	movs	r3, #0
 800bf00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bf02:	2300      	movs	r3, #0
 800bf04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	885b      	ldrh	r3, [r3, #2]
 800bf0a:	0a1b      	lsrs	r3, r3, #8
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	2b0e      	cmp	r3, #14
 800bf12:	f200 8152 	bhi.w	800c1ba <USBD_GetDescriptor+0x2ca>
 800bf16:	a201      	add	r2, pc, #4	@ (adr r2, 800bf1c <USBD_GetDescriptor+0x2c>)
 800bf18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf1c:	0800bf8d 	.word	0x0800bf8d
 800bf20:	0800bfa5 	.word	0x0800bfa5
 800bf24:	0800bfe5 	.word	0x0800bfe5
 800bf28:	0800c1bb 	.word	0x0800c1bb
 800bf2c:	0800c1bb 	.word	0x0800c1bb
 800bf30:	0800c15b 	.word	0x0800c15b
 800bf34:	0800c187 	.word	0x0800c187
 800bf38:	0800c1bb 	.word	0x0800c1bb
 800bf3c:	0800c1bb 	.word	0x0800c1bb
 800bf40:	0800c1bb 	.word	0x0800c1bb
 800bf44:	0800c1bb 	.word	0x0800c1bb
 800bf48:	0800c1bb 	.word	0x0800c1bb
 800bf4c:	0800c1bb 	.word	0x0800c1bb
 800bf50:	0800c1bb 	.word	0x0800c1bb
 800bf54:	0800bf59 	.word	0x0800bf59
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf5e:	69db      	ldr	r3, [r3, #28]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00b      	beq.n	800bf7c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf6a:	69db      	ldr	r3, [r3, #28]
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	7c12      	ldrb	r2, [r2, #16]
 800bf70:	f107 0108 	add.w	r1, r7, #8
 800bf74:	4610      	mov	r0, r2
 800bf76:	4798      	blx	r3
 800bf78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf7a:	e126      	b.n	800c1ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bf7c:	6839      	ldr	r1, [r7, #0]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 fb0e 	bl	800c5a0 <USBD_CtlError>
        err++;
 800bf84:	7afb      	ldrb	r3, [r7, #11]
 800bf86:	3301      	adds	r3, #1
 800bf88:	72fb      	strb	r3, [r7, #11]
      break;
 800bf8a:	e11e      	b.n	800c1ca <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	7c12      	ldrb	r2, [r2, #16]
 800bf98:	f107 0108 	add.w	r1, r7, #8
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	4798      	blx	r3
 800bfa0:	60f8      	str	r0, [r7, #12]
      break;
 800bfa2:	e112      	b.n	800c1ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	7c1b      	ldrb	r3, [r3, #16]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d10d      	bne.n	800bfc8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb4:	f107 0208 	add.w	r2, r7, #8
 800bfb8:	4610      	mov	r0, r2
 800bfba:	4798      	blx	r3
 800bfbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	2202      	movs	r2, #2
 800bfc4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bfc6:	e100      	b.n	800c1ca <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfd0:	f107 0208 	add.w	r2, r7, #8
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	4798      	blx	r3
 800bfd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	2202      	movs	r2, #2
 800bfe0:	701a      	strb	r2, [r3, #0]
      break;
 800bfe2:	e0f2      	b.n	800c1ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	885b      	ldrh	r3, [r3, #2]
 800bfe8:	b2db      	uxtb	r3, r3
 800bfea:	2b05      	cmp	r3, #5
 800bfec:	f200 80ac 	bhi.w	800c148 <USBD_GetDescriptor+0x258>
 800bff0:	a201      	add	r2, pc, #4	@ (adr r2, 800bff8 <USBD_GetDescriptor+0x108>)
 800bff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff6:	bf00      	nop
 800bff8:	0800c011 	.word	0x0800c011
 800bffc:	0800c045 	.word	0x0800c045
 800c000:	0800c079 	.word	0x0800c079
 800c004:	0800c0ad 	.word	0x0800c0ad
 800c008:	0800c0e1 	.word	0x0800c0e1
 800c00c:	0800c115 	.word	0x0800c115
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00b      	beq.n	800c034 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	7c12      	ldrb	r2, [r2, #16]
 800c028:	f107 0108 	add.w	r1, r7, #8
 800c02c:	4610      	mov	r0, r2
 800c02e:	4798      	blx	r3
 800c030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c032:	e091      	b.n	800c158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c034:	6839      	ldr	r1, [r7, #0]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 fab2 	bl	800c5a0 <USBD_CtlError>
            err++;
 800c03c:	7afb      	ldrb	r3, [r7, #11]
 800c03e:	3301      	adds	r3, #1
 800c040:	72fb      	strb	r3, [r7, #11]
          break;
 800c042:	e089      	b.n	800c158 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00b      	beq.n	800c068 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	7c12      	ldrb	r2, [r2, #16]
 800c05c:	f107 0108 	add.w	r1, r7, #8
 800c060:	4610      	mov	r0, r2
 800c062:	4798      	blx	r3
 800c064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c066:	e077      	b.n	800c158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fa98 	bl	800c5a0 <USBD_CtlError>
            err++;
 800c070:	7afb      	ldrb	r3, [r7, #11]
 800c072:	3301      	adds	r3, #1
 800c074:	72fb      	strb	r3, [r7, #11]
          break;
 800c076:	e06f      	b.n	800c158 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d00b      	beq.n	800c09c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	7c12      	ldrb	r2, [r2, #16]
 800c090:	f107 0108 	add.w	r1, r7, #8
 800c094:	4610      	mov	r0, r2
 800c096:	4798      	blx	r3
 800c098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c09a:	e05d      	b.n	800c158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c09c:	6839      	ldr	r1, [r7, #0]
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 fa7e 	bl	800c5a0 <USBD_CtlError>
            err++;
 800c0a4:	7afb      	ldrb	r3, [r7, #11]
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c0aa:	e055      	b.n	800c158 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0b2:	691b      	ldr	r3, [r3, #16]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d00b      	beq.n	800c0d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	7c12      	ldrb	r2, [r2, #16]
 800c0c4:	f107 0108 	add.w	r1, r7, #8
 800c0c8:	4610      	mov	r0, r2
 800c0ca:	4798      	blx	r3
 800c0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0ce:	e043      	b.n	800c158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c0d0:	6839      	ldr	r1, [r7, #0]
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fa64 	bl	800c5a0 <USBD_CtlError>
            err++;
 800c0d8:	7afb      	ldrb	r3, [r7, #11]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c0de:	e03b      	b.n	800c158 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0e6:	695b      	ldr	r3, [r3, #20]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00b      	beq.n	800c104 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	7c12      	ldrb	r2, [r2, #16]
 800c0f8:	f107 0108 	add.w	r1, r7, #8
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	4798      	blx	r3
 800c100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c102:	e029      	b.n	800c158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c104:	6839      	ldr	r1, [r7, #0]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fa4a 	bl	800c5a0 <USBD_CtlError>
            err++;
 800c10c:	7afb      	ldrb	r3, [r7, #11]
 800c10e:	3301      	adds	r3, #1
 800c110:	72fb      	strb	r3, [r7, #11]
          break;
 800c112:	e021      	b.n	800c158 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c11a:	699b      	ldr	r3, [r3, #24]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d00b      	beq.n	800c138 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c126:	699b      	ldr	r3, [r3, #24]
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	7c12      	ldrb	r2, [r2, #16]
 800c12c:	f107 0108 	add.w	r1, r7, #8
 800c130:	4610      	mov	r0, r2
 800c132:	4798      	blx	r3
 800c134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c136:	e00f      	b.n	800c158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c138:	6839      	ldr	r1, [r7, #0]
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 fa30 	bl	800c5a0 <USBD_CtlError>
            err++;
 800c140:	7afb      	ldrb	r3, [r7, #11]
 800c142:	3301      	adds	r3, #1
 800c144:	72fb      	strb	r3, [r7, #11]
          break;
 800c146:	e007      	b.n	800c158 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 fa28 	bl	800c5a0 <USBD_CtlError>
          err++;
 800c150:	7afb      	ldrb	r3, [r7, #11]
 800c152:	3301      	adds	r3, #1
 800c154:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c156:	bf00      	nop
      }
      break;
 800c158:	e037      	b.n	800c1ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	7c1b      	ldrb	r3, [r3, #16]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d109      	bne.n	800c176 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c16a:	f107 0208 	add.w	r2, r7, #8
 800c16e:	4610      	mov	r0, r2
 800c170:	4798      	blx	r3
 800c172:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c174:	e029      	b.n	800c1ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c176:	6839      	ldr	r1, [r7, #0]
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fa11 	bl	800c5a0 <USBD_CtlError>
        err++;
 800c17e:	7afb      	ldrb	r3, [r7, #11]
 800c180:	3301      	adds	r3, #1
 800c182:	72fb      	strb	r3, [r7, #11]
      break;
 800c184:	e021      	b.n	800c1ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	7c1b      	ldrb	r3, [r3, #16]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d10d      	bne.n	800c1aa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c196:	f107 0208 	add.w	r2, r7, #8
 800c19a:	4610      	mov	r0, r2
 800c19c:	4798      	blx	r3
 800c19e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	2207      	movs	r2, #7
 800c1a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1a8:	e00f      	b.n	800c1ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c1aa:	6839      	ldr	r1, [r7, #0]
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 f9f7 	bl	800c5a0 <USBD_CtlError>
        err++;
 800c1b2:	7afb      	ldrb	r3, [r7, #11]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	72fb      	strb	r3, [r7, #11]
      break;
 800c1b8:	e007      	b.n	800c1ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 f9ef 	bl	800c5a0 <USBD_CtlError>
      err++;
 800c1c2:	7afb      	ldrb	r3, [r7, #11]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	72fb      	strb	r3, [r7, #11]
      break;
 800c1c8:	bf00      	nop
  }

  if (err != 0U)
 800c1ca:	7afb      	ldrb	r3, [r7, #11]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d11e      	bne.n	800c20e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	88db      	ldrh	r3, [r3, #6]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d016      	beq.n	800c206 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c1d8:	893b      	ldrh	r3, [r7, #8]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00e      	beq.n	800c1fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	88da      	ldrh	r2, [r3, #6]
 800c1e2:	893b      	ldrh	r3, [r7, #8]
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	bf28      	it	cs
 800c1e8:	4613      	movcs	r3, r2
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c1ee:	893b      	ldrh	r3, [r7, #8]
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	68f9      	ldr	r1, [r7, #12]
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 fa44 	bl	800c682 <USBD_CtlSendData>
 800c1fa:	e009      	b.n	800c210 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c1fc:	6839      	ldr	r1, [r7, #0]
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 f9ce 	bl	800c5a0 <USBD_CtlError>
 800c204:	e004      	b.n	800c210 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fa95 	bl	800c736 <USBD_CtlSendStatus>
 800c20c:	e000      	b.n	800c210 <USBD_GetDescriptor+0x320>
    return;
 800c20e:	bf00      	nop
  }
}
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop

0800c218 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	889b      	ldrh	r3, [r3, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d131      	bne.n	800c28e <USBD_SetAddress+0x76>
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	88db      	ldrh	r3, [r3, #6]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d12d      	bne.n	800c28e <USBD_SetAddress+0x76>
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	885b      	ldrh	r3, [r3, #2]
 800c236:	2b7f      	cmp	r3, #127	@ 0x7f
 800c238:	d829      	bhi.n	800c28e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	885b      	ldrh	r3, [r3, #2]
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c244:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	2b03      	cmp	r3, #3
 800c250:	d104      	bne.n	800c25c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c252:	6839      	ldr	r1, [r7, #0]
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 f9a3 	bl	800c5a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c25a:	e01d      	b.n	800c298 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	7bfa      	ldrb	r2, [r7, #15]
 800c260:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c264:	7bfb      	ldrb	r3, [r7, #15]
 800c266:	4619      	mov	r1, r3
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 fea1 	bl	800cfb0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 fa61 	bl	800c736 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c274:	7bfb      	ldrb	r3, [r7, #15]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d004      	beq.n	800c284 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2202      	movs	r2, #2
 800c27e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c282:	e009      	b.n	800c298 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2201      	movs	r2, #1
 800c288:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c28c:	e004      	b.n	800c298 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c28e:	6839      	ldr	r1, [r7, #0]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 f985 	bl	800c5a0 <USBD_CtlError>
  }
}
 800c296:	bf00      	nop
 800c298:	bf00      	nop
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	885b      	ldrh	r3, [r3, #2]
 800c2b2:	b2da      	uxtb	r2, r3
 800c2b4:	4b4c      	ldr	r3, [pc, #304]	@ (800c3e8 <USBD_SetConfig+0x148>)
 800c2b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c2b8:	4b4b      	ldr	r3, [pc, #300]	@ (800c3e8 <USBD_SetConfig+0x148>)
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d905      	bls.n	800c2cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 f96c 	bl	800c5a0 <USBD_CtlError>
    return USBD_FAIL;
 800c2c8:	2303      	movs	r3, #3
 800c2ca:	e088      	b.n	800c3de <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d002      	beq.n	800c2de <USBD_SetConfig+0x3e>
 800c2d8:	2b03      	cmp	r3, #3
 800c2da:	d025      	beq.n	800c328 <USBD_SetConfig+0x88>
 800c2dc:	e071      	b.n	800c3c2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c2de:	4b42      	ldr	r3, [pc, #264]	@ (800c3e8 <USBD_SetConfig+0x148>)
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d01c      	beq.n	800c320 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c2e6:	4b40      	ldr	r3, [pc, #256]	@ (800c3e8 <USBD_SetConfig+0x148>)
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c2f0:	4b3d      	ldr	r3, [pc, #244]	@ (800c3e8 <USBD_SetConfig+0x148>)
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7ff f992 	bl	800b620 <USBD_SetClassConfig>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c300:	7bfb      	ldrb	r3, [r7, #15]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d004      	beq.n	800c310 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c306:	6839      	ldr	r1, [r7, #0]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 f949 	bl	800c5a0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c30e:	e065      	b.n	800c3dc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fa10 	bl	800c736 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2203      	movs	r2, #3
 800c31a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c31e:	e05d      	b.n	800c3dc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 fa08 	bl	800c736 <USBD_CtlSendStatus>
      break;
 800c326:	e059      	b.n	800c3dc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c328:	4b2f      	ldr	r3, [pc, #188]	@ (800c3e8 <USBD_SetConfig+0x148>)
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d112      	bne.n	800c356 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2202      	movs	r2, #2
 800c334:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c338:	4b2b      	ldr	r3, [pc, #172]	@ (800c3e8 <USBD_SetConfig+0x148>)
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	461a      	mov	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c342:	4b29      	ldr	r3, [pc, #164]	@ (800c3e8 <USBD_SetConfig+0x148>)
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	4619      	mov	r1, r3
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f7ff f985 	bl	800b658 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 f9f1 	bl	800c736 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c354:	e042      	b.n	800c3dc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c356:	4b24      	ldr	r3, [pc, #144]	@ (800c3e8 <USBD_SetConfig+0x148>)
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	461a      	mov	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	429a      	cmp	r2, r3
 800c362:	d02a      	beq.n	800c3ba <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	4619      	mov	r1, r3
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f7ff f973 	bl	800b658 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c372:	4b1d      	ldr	r3, [pc, #116]	@ (800c3e8 <USBD_SetConfig+0x148>)
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	461a      	mov	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c37c:	4b1a      	ldr	r3, [pc, #104]	@ (800c3e8 <USBD_SetConfig+0x148>)
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	4619      	mov	r1, r3
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f7ff f94c 	bl	800b620 <USBD_SetClassConfig>
 800c388:	4603      	mov	r3, r0
 800c38a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c38c:	7bfb      	ldrb	r3, [r7, #15]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00f      	beq.n	800c3b2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 f903 	bl	800c5a0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f7ff f958 	bl	800b658 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c3b0:	e014      	b.n	800c3dc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 f9bf 	bl	800c736 <USBD_CtlSendStatus>
      break;
 800c3b8:	e010      	b.n	800c3dc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 f9bb 	bl	800c736 <USBD_CtlSendStatus>
      break;
 800c3c0:	e00c      	b.n	800c3dc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c3c2:	6839      	ldr	r1, [r7, #0]
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 f8eb 	bl	800c5a0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c3ca:	4b07      	ldr	r3, [pc, #28]	@ (800c3e8 <USBD_SetConfig+0x148>)
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f7ff f941 	bl	800b658 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c3d6:	2303      	movs	r3, #3
 800c3d8:	73fb      	strb	r3, [r7, #15]
      break;
 800c3da:	bf00      	nop
  }

  return ret;
 800c3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	2000073c 	.word	0x2000073c

0800c3ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	88db      	ldrh	r3, [r3, #6]
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d004      	beq.n	800c408 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c3fe:	6839      	ldr	r1, [r7, #0]
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f000 f8cd 	bl	800c5a0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c406:	e023      	b.n	800c450 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	2b02      	cmp	r3, #2
 800c412:	dc02      	bgt.n	800c41a <USBD_GetConfig+0x2e>
 800c414:	2b00      	cmp	r3, #0
 800c416:	dc03      	bgt.n	800c420 <USBD_GetConfig+0x34>
 800c418:	e015      	b.n	800c446 <USBD_GetConfig+0x5a>
 800c41a:	2b03      	cmp	r3, #3
 800c41c:	d00b      	beq.n	800c436 <USBD_GetConfig+0x4a>
 800c41e:	e012      	b.n	800c446 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	3308      	adds	r3, #8
 800c42a:	2201      	movs	r2, #1
 800c42c:	4619      	mov	r1, r3
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f927 	bl	800c682 <USBD_CtlSendData>
        break;
 800c434:	e00c      	b.n	800c450 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	3304      	adds	r3, #4
 800c43a:	2201      	movs	r2, #1
 800c43c:	4619      	mov	r1, r3
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 f91f 	bl	800c682 <USBD_CtlSendData>
        break;
 800c444:	e004      	b.n	800c450 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c446:	6839      	ldr	r1, [r7, #0]
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 f8a9 	bl	800c5a0 <USBD_CtlError>
        break;
 800c44e:	bf00      	nop
}
 800c450:	bf00      	nop
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	3b01      	subs	r3, #1
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	d81e      	bhi.n	800c4ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	88db      	ldrh	r3, [r3, #6]
 800c474:	2b02      	cmp	r3, #2
 800c476:	d004      	beq.n	800c482 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c478:	6839      	ldr	r1, [r7, #0]
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 f890 	bl	800c5a0 <USBD_CtlError>
        break;
 800c480:	e01a      	b.n	800c4b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2201      	movs	r2, #1
 800c486:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d005      	beq.n	800c49e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	f043 0202 	orr.w	r2, r3, #2
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	330c      	adds	r3, #12
 800c4a2:	2202      	movs	r2, #2
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 f8eb 	bl	800c682 <USBD_CtlSendData>
      break;
 800c4ac:	e004      	b.n	800c4b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c4ae:	6839      	ldr	r1, [r7, #0]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 f875 	bl	800c5a0 <USBD_CtlError>
      break;
 800c4b6:	bf00      	nop
  }
}
 800c4b8:	bf00      	nop
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	885b      	ldrh	r3, [r3, #2]
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d106      	bne.n	800c4e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 f92b 	bl	800c736 <USBD_CtlSendStatus>
  }
}
 800c4e0:	bf00      	nop
 800c4e2:	3708      	adds	r7, #8
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	3b01      	subs	r3, #1
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	d80b      	bhi.n	800c518 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	885b      	ldrh	r3, [r3, #2]
 800c504:	2b01      	cmp	r3, #1
 800c506:	d10c      	bne.n	800c522 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 f910 	bl	800c736 <USBD_CtlSendStatus>
      }
      break;
 800c516:	e004      	b.n	800c522 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 f840 	bl	800c5a0 <USBD_CtlError>
      break;
 800c520:	e000      	b.n	800c524 <USBD_ClrFeature+0x3c>
      break;
 800c522:	bf00      	nop
  }
}
 800c524:	bf00      	nop
 800c526:	3708      	adds	r7, #8
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	781a      	ldrb	r2, [r3, #0]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	3301      	adds	r3, #1
 800c546:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	781a      	ldrb	r2, [r3, #0]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	3301      	adds	r3, #1
 800c554:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c556:	68f8      	ldr	r0, [r7, #12]
 800c558:	f7ff fa92 	bl	800ba80 <SWAPBYTE>
 800c55c:	4603      	mov	r3, r0
 800c55e:	461a      	mov	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	3301      	adds	r3, #1
 800c568:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	3301      	adds	r3, #1
 800c56e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c570:	68f8      	ldr	r0, [r7, #12]
 800c572:	f7ff fa85 	bl	800ba80 <SWAPBYTE>
 800c576:	4603      	mov	r3, r0
 800c578:	461a      	mov	r2, r3
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	3301      	adds	r3, #1
 800c582:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	3301      	adds	r3, #1
 800c588:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c58a:	68f8      	ldr	r0, [r7, #12]
 800c58c:	f7ff fa78 	bl	800ba80 <SWAPBYTE>
 800c590:	4603      	mov	r3, r0
 800c592:	461a      	mov	r2, r3
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	80da      	strh	r2, [r3, #6]
}
 800c598:	bf00      	nop
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5aa:	2180      	movs	r1, #128	@ 0x80
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 fc95 	bl	800cedc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 fc91 	bl	800cedc <USBD_LL_StallEP>
}
 800c5ba:	bf00      	nop
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b086      	sub	sp, #24
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	60f8      	str	r0, [r7, #12]
 800c5ca:	60b9      	str	r1, [r7, #8]
 800c5cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d036      	beq.n	800c646 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c5dc:	6938      	ldr	r0, [r7, #16]
 800c5de:	f000 f836 	bl	800c64e <USBD_GetLen>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	005b      	lsls	r3, r3, #1
 800c5ea:	b29a      	uxth	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c5f0:	7dfb      	ldrb	r3, [r7, #23]
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	4413      	add	r3, r2
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	7812      	ldrb	r2, [r2, #0]
 800c5fa:	701a      	strb	r2, [r3, #0]
  idx++;
 800c5fc:	7dfb      	ldrb	r3, [r7, #23]
 800c5fe:	3301      	adds	r3, #1
 800c600:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c602:	7dfb      	ldrb	r3, [r7, #23]
 800c604:	68ba      	ldr	r2, [r7, #8]
 800c606:	4413      	add	r3, r2
 800c608:	2203      	movs	r2, #3
 800c60a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c60c:	7dfb      	ldrb	r3, [r7, #23]
 800c60e:	3301      	adds	r3, #1
 800c610:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c612:	e013      	b.n	800c63c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c614:	7dfb      	ldrb	r3, [r7, #23]
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	4413      	add	r3, r2
 800c61a:	693a      	ldr	r2, [r7, #16]
 800c61c:	7812      	ldrb	r2, [r2, #0]
 800c61e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	3301      	adds	r3, #1
 800c624:	613b      	str	r3, [r7, #16]
    idx++;
 800c626:	7dfb      	ldrb	r3, [r7, #23]
 800c628:	3301      	adds	r3, #1
 800c62a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c62c:	7dfb      	ldrb	r3, [r7, #23]
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	4413      	add	r3, r2
 800c632:	2200      	movs	r2, #0
 800c634:	701a      	strb	r2, [r3, #0]
    idx++;
 800c636:	7dfb      	ldrb	r3, [r7, #23]
 800c638:	3301      	adds	r3, #1
 800c63a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d1e7      	bne.n	800c614 <USBD_GetString+0x52>
 800c644:	e000      	b.n	800c648 <USBD_GetString+0x86>
    return;
 800c646:	bf00      	nop
  }
}
 800c648:	3718      	adds	r7, #24
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c64e:	b480      	push	{r7}
 800c650:	b085      	sub	sp, #20
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c656:	2300      	movs	r3, #0
 800c658:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c65e:	e005      	b.n	800c66c <USBD_GetLen+0x1e>
  {
    len++;
 800c660:	7bfb      	ldrb	r3, [r7, #15]
 800c662:	3301      	adds	r3, #1
 800c664:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	3301      	adds	r3, #1
 800c66a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1f5      	bne.n	800c660 <USBD_GetLen+0x12>
  }

  return len;
 800c674:	7bfb      	ldrb	r3, [r7, #15]
}
 800c676:	4618      	mov	r0, r3
 800c678:	3714      	adds	r7, #20
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr

0800c682 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b084      	sub	sp, #16
 800c686:	af00      	add	r7, sp, #0
 800c688:	60f8      	str	r0, [r7, #12]
 800c68a:	60b9      	str	r1, [r7, #8]
 800c68c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2202      	movs	r2, #2
 800c692:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	68ba      	ldr	r2, [r7, #8]
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	68f8      	ldr	r0, [r7, #12]
 800c6aa:	f000 fca0 	bl	800cfee <USBD_LL_Transmit>

  return USBD_OK;
 800c6ae:	2300      	movs	r3, #0
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3710      	adds	r7, #16
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	60f8      	str	r0, [r7, #12]
 800c6c0:	60b9      	str	r1, [r7, #8]
 800c6c2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	68f8      	ldr	r0, [r7, #12]
 800c6cc:	f000 fc8f 	bl	800cfee <USBD_LL_Transmit>

  return USBD_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b084      	sub	sp, #16
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	60f8      	str	r0, [r7, #12]
 800c6e2:	60b9      	str	r1, [r7, #8]
 800c6e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2203      	movs	r2, #3
 800c6ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	68ba      	ldr	r2, [r7, #8]
 800c702:	2100      	movs	r1, #0
 800c704:	68f8      	ldr	r0, [r7, #12]
 800c706:	f000 fc93 	bl	800d030 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	60b9      	str	r1, [r7, #8]
 800c71e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	68ba      	ldr	r2, [r7, #8]
 800c724:	2100      	movs	r1, #0
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	f000 fc82 	bl	800d030 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c72c:	2300      	movs	r3, #0
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b082      	sub	sp, #8
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2204      	movs	r2, #4
 800c742:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c746:	2300      	movs	r3, #0
 800c748:	2200      	movs	r2, #0
 800c74a:	2100      	movs	r1, #0
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 fc4e 	bl	800cfee <USBD_LL_Transmit>

  return USBD_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3708      	adds	r7, #8
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2205      	movs	r2, #5
 800c768:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c76c:	2300      	movs	r3, #0
 800c76e:	2200      	movs	r2, #0
 800c770:	2100      	movs	r1, #0
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fc5c 	bl	800d030 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c778:	2300      	movs	r3, #0
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
	...

0800c784 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c788:	2200      	movs	r2, #0
 800c78a:	4912      	ldr	r1, [pc, #72]	@ (800c7d4 <MX_USB_Device_Init+0x50>)
 800c78c:	4812      	ldr	r0, [pc, #72]	@ (800c7d8 <MX_USB_Device_Init+0x54>)
 800c78e:	f7fe fed9 	bl	800b544 <USBD_Init>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d001      	beq.n	800c79c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c798:	f7f5 fc3c 	bl	8002014 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c79c:	490f      	ldr	r1, [pc, #60]	@ (800c7dc <MX_USB_Device_Init+0x58>)
 800c79e:	480e      	ldr	r0, [pc, #56]	@ (800c7d8 <MX_USB_Device_Init+0x54>)
 800c7a0:	f7fe ff00 	bl	800b5a4 <USBD_RegisterClass>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d001      	beq.n	800c7ae <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c7aa:	f7f5 fc33 	bl	8002014 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c7ae:	490c      	ldr	r1, [pc, #48]	@ (800c7e0 <MX_USB_Device_Init+0x5c>)
 800c7b0:	4809      	ldr	r0, [pc, #36]	@ (800c7d8 <MX_USB_Device_Init+0x54>)
 800c7b2:	f7fe fe21 	bl	800b3f8 <USBD_CDC_RegisterInterface>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c7bc:	f7f5 fc2a 	bl	8002014 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c7c0:	4805      	ldr	r0, [pc, #20]	@ (800c7d8 <MX_USB_Device_Init+0x54>)
 800c7c2:	f7fe ff16 	bl	800b5f2 <USBD_Start>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c7cc:	f7f5 fc22 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c7d0:	bf00      	nop
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	20000130 	.word	0x20000130
 800c7d8:	20000740 	.word	0x20000740
 800c7dc:	20000018 	.word	0x20000018
 800c7e0:	2000011c 	.word	0x2000011c

0800c7e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	4905      	ldr	r1, [pc, #20]	@ (800c800 <CDC_Init_FS+0x1c>)
 800c7ec:	4805      	ldr	r0, [pc, #20]	@ (800c804 <CDC_Init_FS+0x20>)
 800c7ee:	f7fe fe18 	bl	800b422 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c7f2:	4905      	ldr	r1, [pc, #20]	@ (800c808 <CDC_Init_FS+0x24>)
 800c7f4:	4803      	ldr	r0, [pc, #12]	@ (800c804 <CDC_Init_FS+0x20>)
 800c7f6:	f7fe fe32 	bl	800b45e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c7fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	20001210 	.word	0x20001210
 800c804:	20000740 	.word	0x20000740
 800c808:	20000a10 	.word	0x20000a10

0800c80c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c80c:	b480      	push	{r7}
 800c80e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c810:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c812:	4618      	mov	r0, r3
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
 800c822:	4603      	mov	r3, r0
 800c824:	6039      	str	r1, [r7, #0]
 800c826:	71fb      	strb	r3, [r7, #7]
 800c828:	4613      	mov	r3, r2
 800c82a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c82c:	79fb      	ldrb	r3, [r7, #7]
 800c82e:	2b23      	cmp	r3, #35	@ 0x23
 800c830:	d84a      	bhi.n	800c8c8 <CDC_Control_FS+0xac>
 800c832:	a201      	add	r2, pc, #4	@ (adr r2, 800c838 <CDC_Control_FS+0x1c>)
 800c834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c838:	0800c8c9 	.word	0x0800c8c9
 800c83c:	0800c8c9 	.word	0x0800c8c9
 800c840:	0800c8c9 	.word	0x0800c8c9
 800c844:	0800c8c9 	.word	0x0800c8c9
 800c848:	0800c8c9 	.word	0x0800c8c9
 800c84c:	0800c8c9 	.word	0x0800c8c9
 800c850:	0800c8c9 	.word	0x0800c8c9
 800c854:	0800c8c9 	.word	0x0800c8c9
 800c858:	0800c8c9 	.word	0x0800c8c9
 800c85c:	0800c8c9 	.word	0x0800c8c9
 800c860:	0800c8c9 	.word	0x0800c8c9
 800c864:	0800c8c9 	.word	0x0800c8c9
 800c868:	0800c8c9 	.word	0x0800c8c9
 800c86c:	0800c8c9 	.word	0x0800c8c9
 800c870:	0800c8c9 	.word	0x0800c8c9
 800c874:	0800c8c9 	.word	0x0800c8c9
 800c878:	0800c8c9 	.word	0x0800c8c9
 800c87c:	0800c8c9 	.word	0x0800c8c9
 800c880:	0800c8c9 	.word	0x0800c8c9
 800c884:	0800c8c9 	.word	0x0800c8c9
 800c888:	0800c8c9 	.word	0x0800c8c9
 800c88c:	0800c8c9 	.word	0x0800c8c9
 800c890:	0800c8c9 	.word	0x0800c8c9
 800c894:	0800c8c9 	.word	0x0800c8c9
 800c898:	0800c8c9 	.word	0x0800c8c9
 800c89c:	0800c8c9 	.word	0x0800c8c9
 800c8a0:	0800c8c9 	.word	0x0800c8c9
 800c8a4:	0800c8c9 	.word	0x0800c8c9
 800c8a8:	0800c8c9 	.word	0x0800c8c9
 800c8ac:	0800c8c9 	.word	0x0800c8c9
 800c8b0:	0800c8c9 	.word	0x0800c8c9
 800c8b4:	0800c8c9 	.word	0x0800c8c9
 800c8b8:	0800c8c9 	.word	0x0800c8c9
 800c8bc:	0800c8c9 	.word	0x0800c8c9
 800c8c0:	0800c8c9 	.word	0x0800c8c9
 800c8c4:	0800c8c9 	.word	0x0800c8c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c8c8:	bf00      	nop
  }

  return (USBD_OK);
 800c8ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c8e2:	6879      	ldr	r1, [r7, #4]
 800c8e4:	4805      	ldr	r0, [pc, #20]	@ (800c8fc <CDC_Receive_FS+0x24>)
 800c8e6:	f7fe fdba 	bl	800b45e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c8ea:	4804      	ldr	r0, [pc, #16]	@ (800c8fc <CDC_Receive_FS+0x24>)
 800c8ec:	f7fe fe00 	bl	800b4f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c8f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3708      	adds	r7, #8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	20000740 	.word	0x20000740

0800c900 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	460b      	mov	r3, r1
 800c90a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c90c:	2300      	movs	r3, #0
 800c90e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c910:	4b0d      	ldr	r3, [pc, #52]	@ (800c948 <CDC_Transmit_FS+0x48>)
 800c912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c916:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d001      	beq.n	800c926 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c922:	2301      	movs	r3, #1
 800c924:	e00b      	b.n	800c93e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c926:	887b      	ldrh	r3, [r7, #2]
 800c928:	461a      	mov	r2, r3
 800c92a:	6879      	ldr	r1, [r7, #4]
 800c92c:	4806      	ldr	r0, [pc, #24]	@ (800c948 <CDC_Transmit_FS+0x48>)
 800c92e:	f7fe fd78 	bl	800b422 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c932:	4805      	ldr	r0, [pc, #20]	@ (800c948 <CDC_Transmit_FS+0x48>)
 800c934:	f7fe fdac 	bl	800b490 <USBD_CDC_TransmitPacket>
 800c938:	4603      	mov	r3, r0
 800c93a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	20000740 	.word	0x20000740

0800c94c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b087      	sub	sp, #28
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	4613      	mov	r3, r2
 800c958:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c95a:	2300      	movs	r3, #0
 800c95c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c95e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c962:	4618      	mov	r0, r3
 800c964:	371c      	adds	r7, #28
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr
	...

0800c970 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	4603      	mov	r3, r0
 800c978:	6039      	str	r1, [r7, #0]
 800c97a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	2212      	movs	r2, #18
 800c980:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c982:	4b03      	ldr	r3, [pc, #12]	@ (800c990 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c984:	4618      	mov	r0, r3
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr
 800c990:	20000150 	.word	0x20000150

0800c994 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
 800c99a:	4603      	mov	r3, r0
 800c99c:	6039      	str	r1, [r7, #0]
 800c99e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	2204      	movs	r2, #4
 800c9a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c9a6:	4b03      	ldr	r3, [pc, #12]	@ (800c9b4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr
 800c9b4:	20000164 	.word	0x20000164

0800c9b8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	4603      	mov	r3, r0
 800c9c0:	6039      	str	r1, [r7, #0]
 800c9c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9c4:	79fb      	ldrb	r3, [r7, #7]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d105      	bne.n	800c9d6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c9ca:	683a      	ldr	r2, [r7, #0]
 800c9cc:	4907      	ldr	r1, [pc, #28]	@ (800c9ec <USBD_CDC_ProductStrDescriptor+0x34>)
 800c9ce:	4808      	ldr	r0, [pc, #32]	@ (800c9f0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c9d0:	f7ff fdf7 	bl	800c5c2 <USBD_GetString>
 800c9d4:	e004      	b.n	800c9e0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c9d6:	683a      	ldr	r2, [r7, #0]
 800c9d8:	4904      	ldr	r1, [pc, #16]	@ (800c9ec <USBD_CDC_ProductStrDescriptor+0x34>)
 800c9da:	4805      	ldr	r0, [pc, #20]	@ (800c9f0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c9dc:	f7ff fdf1 	bl	800c5c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9e0:	4b02      	ldr	r3, [pc, #8]	@ (800c9ec <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3708      	adds	r7, #8
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	bf00      	nop
 800c9ec:	20001a10 	.word	0x20001a10
 800c9f0:	0800ebc0 	.word	0x0800ebc0

0800c9f4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	6039      	str	r1, [r7, #0]
 800c9fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca00:	683a      	ldr	r2, [r7, #0]
 800ca02:	4904      	ldr	r1, [pc, #16]	@ (800ca14 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ca04:	4804      	ldr	r0, [pc, #16]	@ (800ca18 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ca06:	f7ff fddc 	bl	800c5c2 <USBD_GetString>
  return USBD_StrDesc;
 800ca0a:	4b02      	ldr	r3, [pc, #8]	@ (800ca14 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3708      	adds	r7, #8
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	20001a10 	.word	0x20001a10
 800ca18:	0800ebd8 	.word	0x0800ebd8

0800ca1c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	4603      	mov	r3, r0
 800ca24:	6039      	str	r1, [r7, #0]
 800ca26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	221a      	movs	r2, #26
 800ca2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ca2e:	f000 f843 	bl	800cab8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ca32:	4b02      	ldr	r3, [pc, #8]	@ (800ca3c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	20000168 	.word	0x20000168

0800ca40 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	4603      	mov	r3, r0
 800ca48:	6039      	str	r1, [r7, #0]
 800ca4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ca4c:	79fb      	ldrb	r3, [r7, #7]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d105      	bne.n	800ca5e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ca52:	683a      	ldr	r2, [r7, #0]
 800ca54:	4907      	ldr	r1, [pc, #28]	@ (800ca74 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ca56:	4808      	ldr	r0, [pc, #32]	@ (800ca78 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ca58:	f7ff fdb3 	bl	800c5c2 <USBD_GetString>
 800ca5c:	e004      	b.n	800ca68 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ca5e:	683a      	ldr	r2, [r7, #0]
 800ca60:	4904      	ldr	r1, [pc, #16]	@ (800ca74 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ca62:	4805      	ldr	r0, [pc, #20]	@ (800ca78 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ca64:	f7ff fdad 	bl	800c5c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca68:	4b02      	ldr	r3, [pc, #8]	@ (800ca74 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3708      	adds	r7, #8
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}
 800ca72:	bf00      	nop
 800ca74:	20001a10 	.word	0x20001a10
 800ca78:	0800ebec 	.word	0x0800ebec

0800ca7c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	4603      	mov	r3, r0
 800ca84:	6039      	str	r1, [r7, #0]
 800ca86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ca88:	79fb      	ldrb	r3, [r7, #7]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d105      	bne.n	800ca9a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ca8e:	683a      	ldr	r2, [r7, #0]
 800ca90:	4907      	ldr	r1, [pc, #28]	@ (800cab0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ca92:	4808      	ldr	r0, [pc, #32]	@ (800cab4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ca94:	f7ff fd95 	bl	800c5c2 <USBD_GetString>
 800ca98:	e004      	b.n	800caa4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ca9a:	683a      	ldr	r2, [r7, #0]
 800ca9c:	4904      	ldr	r1, [pc, #16]	@ (800cab0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ca9e:	4805      	ldr	r0, [pc, #20]	@ (800cab4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800caa0:	f7ff fd8f 	bl	800c5c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800caa4:	4b02      	ldr	r3, [pc, #8]	@ (800cab0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	20001a10 	.word	0x20001a10
 800cab4:	0800ebf8 	.word	0x0800ebf8

0800cab8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cabe:	4b0f      	ldr	r3, [pc, #60]	@ (800cafc <Get_SerialNum+0x44>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cac4:	4b0e      	ldr	r3, [pc, #56]	@ (800cb00 <Get_SerialNum+0x48>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800caca:	4b0e      	ldr	r3, [pc, #56]	@ (800cb04 <Get_SerialNum+0x4c>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	4413      	add	r3, r2
 800cad6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d009      	beq.n	800caf2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cade:	2208      	movs	r2, #8
 800cae0:	4909      	ldr	r1, [pc, #36]	@ (800cb08 <Get_SerialNum+0x50>)
 800cae2:	68f8      	ldr	r0, [r7, #12]
 800cae4:	f000 f814 	bl	800cb10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cae8:	2204      	movs	r2, #4
 800caea:	4908      	ldr	r1, [pc, #32]	@ (800cb0c <Get_SerialNum+0x54>)
 800caec:	68b8      	ldr	r0, [r7, #8]
 800caee:	f000 f80f 	bl	800cb10 <IntToUnicode>
  }
}
 800caf2:	bf00      	nop
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	1fff7590 	.word	0x1fff7590
 800cb00:	1fff7594 	.word	0x1fff7594
 800cb04:	1fff7598 	.word	0x1fff7598
 800cb08:	2000016a 	.word	0x2000016a
 800cb0c:	2000017a 	.word	0x2000017a

0800cb10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b087      	sub	sp, #28
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cb22:	2300      	movs	r3, #0
 800cb24:	75fb      	strb	r3, [r7, #23]
 800cb26:	e027      	b.n	800cb78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	0f1b      	lsrs	r3, r3, #28
 800cb2c:	2b09      	cmp	r3, #9
 800cb2e:	d80b      	bhi.n	800cb48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	0f1b      	lsrs	r3, r3, #28
 800cb34:	b2da      	uxtb	r2, r3
 800cb36:	7dfb      	ldrb	r3, [r7, #23]
 800cb38:	005b      	lsls	r3, r3, #1
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	440b      	add	r3, r1
 800cb40:	3230      	adds	r2, #48	@ 0x30
 800cb42:	b2d2      	uxtb	r2, r2
 800cb44:	701a      	strb	r2, [r3, #0]
 800cb46:	e00a      	b.n	800cb5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	0f1b      	lsrs	r3, r3, #28
 800cb4c:	b2da      	uxtb	r2, r3
 800cb4e:	7dfb      	ldrb	r3, [r7, #23]
 800cb50:	005b      	lsls	r3, r3, #1
 800cb52:	4619      	mov	r1, r3
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	440b      	add	r3, r1
 800cb58:	3237      	adds	r2, #55	@ 0x37
 800cb5a:	b2d2      	uxtb	r2, r2
 800cb5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	011b      	lsls	r3, r3, #4
 800cb62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cb64:	7dfb      	ldrb	r3, [r7, #23]
 800cb66:	005b      	lsls	r3, r3, #1
 800cb68:	3301      	adds	r3, #1
 800cb6a:	68ba      	ldr	r2, [r7, #8]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	2200      	movs	r2, #0
 800cb70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cb72:	7dfb      	ldrb	r3, [r7, #23]
 800cb74:	3301      	adds	r3, #1
 800cb76:	75fb      	strb	r3, [r7, #23]
 800cb78:	7dfa      	ldrb	r2, [r7, #23]
 800cb7a:	79fb      	ldrb	r3, [r7, #7]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d3d3      	bcc.n	800cb28 <IntToUnicode+0x18>
  }
}
 800cb80:	bf00      	nop
 800cb82:	bf00      	nop
 800cb84:	371c      	adds	r7, #28
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
	...

0800cb90 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b098      	sub	sp, #96	@ 0x60
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cb98:	f107 030c 	add.w	r3, r7, #12
 800cb9c:	2254      	movs	r2, #84	@ 0x54
 800cb9e:	2100      	movs	r1, #0
 800cba0:	4618      	mov	r0, r3
 800cba2:	f001 fc27 	bl	800e3f4 <memset>
  if(pcdHandle->Instance==USB)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a15      	ldr	r2, [pc, #84]	@ (800cc00 <HAL_PCD_MspInit+0x70>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d123      	bne.n	800cbf8 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cbb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cbb4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800cbb6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cbba:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cbbc:	f107 030c 	add.w	r3, r7, #12
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7f9 ff3d 	bl	8006a40 <HAL_RCCEx_PeriphCLKConfig>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d001      	beq.n	800cbd0 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800cbcc:	f7f5 fa22 	bl	8002014 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cbd0:	4b0c      	ldr	r3, [pc, #48]	@ (800cc04 <HAL_PCD_MspInit+0x74>)
 800cbd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbd4:	4a0b      	ldr	r2, [pc, #44]	@ (800cc04 <HAL_PCD_MspInit+0x74>)
 800cbd6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cbda:	6593      	str	r3, [r2, #88]	@ 0x58
 800cbdc:	4b09      	ldr	r3, [pc, #36]	@ (800cc04 <HAL_PCD_MspInit+0x74>)
 800cbde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbe0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cbe4:	60bb      	str	r3, [r7, #8]
 800cbe6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800cbe8:	2200      	movs	r2, #0
 800cbea:	2100      	movs	r1, #0
 800cbec:	2014      	movs	r0, #20
 800cbee:	f7f7 fa34 	bl	800405a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800cbf2:	2014      	movs	r0, #20
 800cbf4:	f7f7 fa4b 	bl	800408e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cbf8:	bf00      	nop
 800cbfa:	3760      	adds	r7, #96	@ 0x60
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	40005c00 	.word	0x40005c00
 800cc04:	40021000 	.word	0x40021000

0800cc08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	4610      	mov	r0, r2
 800cc20:	f7fe fd32 	bl	800b688 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800cc24:	bf00      	nop
 800cc26:	3708      	adds	r7, #8
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	460b      	mov	r3, r1
 800cc36:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cc3e:	78fa      	ldrb	r2, [r7, #3]
 800cc40:	6879      	ldr	r1, [r7, #4]
 800cc42:	4613      	mov	r3, r2
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	4413      	add	r3, r2
 800cc48:	00db      	lsls	r3, r3, #3
 800cc4a:	440b      	add	r3, r1
 800cc4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	78fb      	ldrb	r3, [r7, #3]
 800cc54:	4619      	mov	r1, r3
 800cc56:	f7fe fd6c 	bl	800b732 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800cc5a:	bf00      	nop
 800cc5c:	3708      	adds	r7, #8
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b082      	sub	sp, #8
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	6078      	str	r0, [r7, #4]
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cc74:	78fa      	ldrb	r2, [r7, #3]
 800cc76:	6879      	ldr	r1, [r7, #4]
 800cc78:	4613      	mov	r3, r2
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	4413      	add	r3, r2
 800cc7e:	00db      	lsls	r3, r3, #3
 800cc80:	440b      	add	r3, r1
 800cc82:	3324      	adds	r3, #36	@ 0x24
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	78fb      	ldrb	r3, [r7, #3]
 800cc88:	4619      	mov	r1, r3
 800cc8a:	f7fe fdb5 	bl	800b7f8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800cc8e:	bf00      	nop
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b082      	sub	sp, #8
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7fe fec9 	bl	800ba3c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ccaa:	bf00      	nop
 800ccac:	3708      	adds	r7, #8
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b084      	sub	sp, #16
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	795b      	ldrb	r3, [r3, #5]
 800ccc2:	2b02      	cmp	r3, #2
 800ccc4:	d001      	beq.n	800ccca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ccc6:	f7f5 f9a5 	bl	8002014 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ccd0:	7bfa      	ldrb	r2, [r7, #15]
 800ccd2:	4611      	mov	r1, r2
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7fe fe73 	bl	800b9c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7fe fe1f 	bl	800b924 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cce6:	bf00      	nop
 800cce8:	3710      	adds	r7, #16
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
	...

0800ccf0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7fe fe6e 	bl	800b9e0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	7a5b      	ldrb	r3, [r3, #9]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d005      	beq.n	800cd18 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd0c:	4b04      	ldr	r3, [pc, #16]	@ (800cd20 <HAL_PCD_SuspendCallback+0x30>)
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	4a03      	ldr	r2, [pc, #12]	@ (800cd20 <HAL_PCD_SuspendCallback+0x30>)
 800cd12:	f043 0306 	orr.w	r3, r3, #6
 800cd16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cd18:	bf00      	nop
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	e000ed00 	.word	0xe000ed00

0800cd24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	7a5b      	ldrb	r3, [r3, #9]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d007      	beq.n	800cd44 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd34:	4b08      	ldr	r3, [pc, #32]	@ (800cd58 <HAL_PCD_ResumeCallback+0x34>)
 800cd36:	691b      	ldr	r3, [r3, #16]
 800cd38:	4a07      	ldr	r2, [pc, #28]	@ (800cd58 <HAL_PCD_ResumeCallback+0x34>)
 800cd3a:	f023 0306 	bic.w	r3, r3, #6
 800cd3e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cd40:	f000 f9f8 	bl	800d134 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fe fe5e 	bl	800ba0c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800cd50:	bf00      	nop
 800cd52:	3708      	adds	r7, #8
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	e000ed00 	.word	0xe000ed00

0800cd5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800cd64:	4a2b      	ldr	r2, [pc, #172]	@ (800ce14 <USBD_LL_Init+0xb8>)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4a29      	ldr	r2, [pc, #164]	@ (800ce14 <USBD_LL_Init+0xb8>)
 800cd70:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800cd74:	4b27      	ldr	r3, [pc, #156]	@ (800ce14 <USBD_LL_Init+0xb8>)
 800cd76:	4a28      	ldr	r2, [pc, #160]	@ (800ce18 <USBD_LL_Init+0xbc>)
 800cd78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cd7a:	4b26      	ldr	r3, [pc, #152]	@ (800ce14 <USBD_LL_Init+0xb8>)
 800cd7c:	2208      	movs	r2, #8
 800cd7e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cd80:	4b24      	ldr	r3, [pc, #144]	@ (800ce14 <USBD_LL_Init+0xb8>)
 800cd82:	2202      	movs	r2, #2
 800cd84:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cd86:	4b23      	ldr	r3, [pc, #140]	@ (800ce14 <USBD_LL_Init+0xb8>)
 800cd88:	2202      	movs	r2, #2
 800cd8a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cd8c:	4b21      	ldr	r3, [pc, #132]	@ (800ce14 <USBD_LL_Init+0xb8>)
 800cd8e:	2200      	movs	r2, #0
 800cd90:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cd92:	4b20      	ldr	r3, [pc, #128]	@ (800ce14 <USBD_LL_Init+0xb8>)
 800cd94:	2200      	movs	r2, #0
 800cd96:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cd98:	4b1e      	ldr	r3, [pc, #120]	@ (800ce14 <USBD_LL_Init+0xb8>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cd9e:	4b1d      	ldr	r3, [pc, #116]	@ (800ce14 <USBD_LL_Init+0xb8>)
 800cda0:	2200      	movs	r2, #0
 800cda2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cda4:	481b      	ldr	r0, [pc, #108]	@ (800ce14 <USBD_LL_Init+0xb8>)
 800cda6:	f7f7 fb27 	bl	80043f8 <HAL_PCD_Init>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d001      	beq.n	800cdb4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800cdb0:	f7f5 f930 	bl	8002014 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cdba:	2318      	movs	r3, #24
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	f7f8 ffe0 	bl	8005d84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cdca:	2358      	movs	r3, #88	@ 0x58
 800cdcc:	2200      	movs	r2, #0
 800cdce:	2180      	movs	r1, #128	@ 0x80
 800cdd0:	f7f8 ffd8 	bl	8005d84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cdda:	23c0      	movs	r3, #192	@ 0xc0
 800cddc:	2200      	movs	r2, #0
 800cdde:	2181      	movs	r1, #129	@ 0x81
 800cde0:	f7f8 ffd0 	bl	8005d84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cdea:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cdee:	2200      	movs	r2, #0
 800cdf0:	2101      	movs	r1, #1
 800cdf2:	f7f8 ffc7 	bl	8005d84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cdfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce00:	2200      	movs	r2, #0
 800ce02:	2182      	movs	r1, #130	@ 0x82
 800ce04:	f7f8 ffbe 	bl	8005d84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ce08:	2300      	movs	r3, #0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3708      	adds	r7, #8
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	20001c10 	.word	0x20001c10
 800ce18:	40005c00 	.word	0x40005c00

0800ce1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce24:	2300      	movs	r3, #0
 800ce26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7f7 fbae 	bl	8004594 <HAL_PCD_Start>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce3c:	7bfb      	ldrb	r3, [r7, #15]
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f000 f97e 	bl	800d140 <USBD_Get_USB_Status>
 800ce44:	4603      	mov	r3, r0
 800ce46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b084      	sub	sp, #16
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
 800ce5a:	4608      	mov	r0, r1
 800ce5c:	4611      	mov	r1, r2
 800ce5e:	461a      	mov	r2, r3
 800ce60:	4603      	mov	r3, r0
 800ce62:	70fb      	strb	r3, [r7, #3]
 800ce64:	460b      	mov	r3, r1
 800ce66:	70bb      	strb	r3, [r7, #2]
 800ce68:	4613      	mov	r3, r2
 800ce6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce70:	2300      	movs	r3, #0
 800ce72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ce7a:	78bb      	ldrb	r3, [r7, #2]
 800ce7c:	883a      	ldrh	r2, [r7, #0]
 800ce7e:	78f9      	ldrb	r1, [r7, #3]
 800ce80:	f7f7 fcf5 	bl	800486e <HAL_PCD_EP_Open>
 800ce84:	4603      	mov	r3, r0
 800ce86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce88:	7bfb      	ldrb	r3, [r7, #15]
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f000 f958 	bl	800d140 <USBD_Get_USB_Status>
 800ce90:	4603      	mov	r3, r0
 800ce92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3710      	adds	r7, #16
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b084      	sub	sp, #16
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	460b      	mov	r3, r1
 800cea8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ceb8:	78fa      	ldrb	r2, [r7, #3]
 800ceba:	4611      	mov	r1, r2
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7f7 fd33 	bl	8004928 <HAL_PCD_EP_Close>
 800cec2:	4603      	mov	r3, r0
 800cec4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cec6:	7bfb      	ldrb	r3, [r7, #15]
 800cec8:	4618      	mov	r0, r3
 800ceca:	f000 f939 	bl	800d140 <USBD_Get_USB_Status>
 800cece:	4603      	mov	r3, r0
 800ced0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ced2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3710      	adds	r7, #16
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	460b      	mov	r3, r1
 800cee6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cee8:	2300      	movs	r3, #0
 800ceea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceec:	2300      	movs	r3, #0
 800ceee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cef6:	78fa      	ldrb	r2, [r7, #3]
 800cef8:	4611      	mov	r1, r2
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7f7 fddc 	bl	8004ab8 <HAL_PCD_EP_SetStall>
 800cf00:	4603      	mov	r3, r0
 800cf02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf04:	7bfb      	ldrb	r3, [r7, #15]
 800cf06:	4618      	mov	r0, r3
 800cf08:	f000 f91a 	bl	800d140 <USBD_Get_USB_Status>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf10:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b084      	sub	sp, #16
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
 800cf22:	460b      	mov	r3, r1
 800cf24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf26:	2300      	movs	r3, #0
 800cf28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cf34:	78fa      	ldrb	r2, [r7, #3]
 800cf36:	4611      	mov	r1, r2
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7f7 fe0f 	bl	8004b5c <HAL_PCD_EP_ClrStall>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf42:	7bfb      	ldrb	r3, [r7, #15]
 800cf44:	4618      	mov	r0, r3
 800cf46:	f000 f8fb 	bl	800d140 <USBD_Get_USB_Status>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3710      	adds	r7, #16
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	460b      	mov	r3, r1
 800cf62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cf6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cf6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	da0b      	bge.n	800cf8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cf74:	78fb      	ldrb	r3, [r7, #3]
 800cf76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf7a:	68f9      	ldr	r1, [r7, #12]
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	4413      	add	r3, r2
 800cf82:	00db      	lsls	r3, r3, #3
 800cf84:	440b      	add	r3, r1
 800cf86:	3312      	adds	r3, #18
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	e00b      	b.n	800cfa4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf8c:	78fb      	ldrb	r3, [r7, #3]
 800cf8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf92:	68f9      	ldr	r1, [r7, #12]
 800cf94:	4613      	mov	r3, r2
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	4413      	add	r3, r2
 800cf9a:	00db      	lsls	r3, r3, #3
 800cf9c:	440b      	add	r3, r1
 800cf9e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800cfa2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3714      	adds	r7, #20
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	460b      	mov	r3, r1
 800cfba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cfca:	78fa      	ldrb	r2, [r7, #3]
 800cfcc:	4611      	mov	r1, r2
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7f7 fc29 	bl	8004826 <HAL_PCD_SetAddress>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfd8:	7bfb      	ldrb	r3, [r7, #15]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 f8b0 	bl	800d140 <USBD_Get_USB_Status>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b086      	sub	sp, #24
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	60f8      	str	r0, [r7, #12]
 800cff6:	607a      	str	r2, [r7, #4]
 800cff8:	603b      	str	r3, [r7, #0]
 800cffa:	460b      	mov	r3, r1
 800cffc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cffe:	2300      	movs	r3, #0
 800d000:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d002:	2300      	movs	r3, #0
 800d004:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d00c:	7af9      	ldrb	r1, [r7, #11]
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	687a      	ldr	r2, [r7, #4]
 800d012:	f7f7 fd1a 	bl	8004a4a <HAL_PCD_EP_Transmit>
 800d016:	4603      	mov	r3, r0
 800d018:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d01a:	7dfb      	ldrb	r3, [r7, #23]
 800d01c:	4618      	mov	r0, r3
 800d01e:	f000 f88f 	bl	800d140 <USBD_Get_USB_Status>
 800d022:	4603      	mov	r3, r0
 800d024:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d026:	7dbb      	ldrb	r3, [r7, #22]
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3718      	adds	r7, #24
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b086      	sub	sp, #24
 800d034:	af00      	add	r7, sp, #0
 800d036:	60f8      	str	r0, [r7, #12]
 800d038:	607a      	str	r2, [r7, #4]
 800d03a:	603b      	str	r3, [r7, #0]
 800d03c:	460b      	mov	r3, r1
 800d03e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d040:	2300      	movs	r3, #0
 800d042:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d044:	2300      	movs	r3, #0
 800d046:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d04e:	7af9      	ldrb	r1, [r7, #11]
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	f7f7 fcb0 	bl	80049b8 <HAL_PCD_EP_Receive>
 800d058:	4603      	mov	r3, r0
 800d05a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d05c:	7dfb      	ldrb	r3, [r7, #23]
 800d05e:	4618      	mov	r0, r3
 800d060:	f000 f86e 	bl	800d140 <USBD_Get_USB_Status>
 800d064:	4603      	mov	r3, r0
 800d066:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d068:	7dbb      	ldrb	r3, [r7, #22]
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3718      	adds	r7, #24
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}

0800d072 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d072:	b580      	push	{r7, lr}
 800d074:	b082      	sub	sp, #8
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
 800d07a:	460b      	mov	r3, r1
 800d07c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d084:	78fa      	ldrb	r2, [r7, #3]
 800d086:	4611      	mov	r1, r2
 800d088:	4618      	mov	r0, r3
 800d08a:	f7f7 fcc6 	bl	8004a1a <HAL_PCD_EP_GetRxCount>
 800d08e:	4603      	mov	r3, r0
}
 800d090:	4618      	mov	r0, r3
 800d092:	3708      	adds	r7, #8
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d0a4:	78fb      	ldrb	r3, [r7, #3]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d002      	beq.n	800d0b0 <HAL_PCDEx_LPM_Callback+0x18>
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d013      	beq.n	800d0d6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d0ae:	e023      	b.n	800d0f8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	7a5b      	ldrb	r3, [r3, #9]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d007      	beq.n	800d0c8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d0b8:	f000 f83c 	bl	800d134 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0bc:	4b10      	ldr	r3, [pc, #64]	@ (800d100 <HAL_PCDEx_LPM_Callback+0x68>)
 800d0be:	691b      	ldr	r3, [r3, #16]
 800d0c0:	4a0f      	ldr	r2, [pc, #60]	@ (800d100 <HAL_PCDEx_LPM_Callback+0x68>)
 800d0c2:	f023 0306 	bic.w	r3, r3, #6
 800d0c6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7fe fc9c 	bl	800ba0c <USBD_LL_Resume>
    break;
 800d0d4:	e010      	b.n	800d0f8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fe fc7f 	bl	800b9e0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	7a5b      	ldrb	r3, [r3, #9]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d005      	beq.n	800d0f6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0ea:	4b05      	ldr	r3, [pc, #20]	@ (800d100 <HAL_PCDEx_LPM_Callback+0x68>)
 800d0ec:	691b      	ldr	r3, [r3, #16]
 800d0ee:	4a04      	ldr	r2, [pc, #16]	@ (800d100 <HAL_PCDEx_LPM_Callback+0x68>)
 800d0f0:	f043 0306 	orr.w	r3, r3, #6
 800d0f4:	6113      	str	r3, [r2, #16]
    break;
 800d0f6:	bf00      	nop
}
 800d0f8:	bf00      	nop
 800d0fa:	3708      	adds	r7, #8
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}
 800d100:	e000ed00 	.word	0xe000ed00

0800d104 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d10c:	4b03      	ldr	r3, [pc, #12]	@ (800d11c <USBD_static_malloc+0x18>)
}
 800d10e:	4618      	mov	r0, r3
 800d110:	370c      	adds	r7, #12
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr
 800d11a:	bf00      	nop
 800d11c:	20001eec 	.word	0x20001eec

0800d120 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]

}
 800d128:	bf00      	nop
 800d12a:	370c      	adds	r7, #12
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d138:	f7f4 fcde 	bl	8001af8 <SystemClock_Config>
}
 800d13c:	bf00      	nop
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d140:	b480      	push	{r7}
 800d142:	b085      	sub	sp, #20
 800d144:	af00      	add	r7, sp, #0
 800d146:	4603      	mov	r3, r0
 800d148:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d14a:	2300      	movs	r3, #0
 800d14c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d14e:	79fb      	ldrb	r3, [r7, #7]
 800d150:	2b03      	cmp	r3, #3
 800d152:	d817      	bhi.n	800d184 <USBD_Get_USB_Status+0x44>
 800d154:	a201      	add	r2, pc, #4	@ (adr r2, 800d15c <USBD_Get_USB_Status+0x1c>)
 800d156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d15a:	bf00      	nop
 800d15c:	0800d16d 	.word	0x0800d16d
 800d160:	0800d173 	.word	0x0800d173
 800d164:	0800d179 	.word	0x0800d179
 800d168:	0800d17f 	.word	0x0800d17f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d16c:	2300      	movs	r3, #0
 800d16e:	73fb      	strb	r3, [r7, #15]
    break;
 800d170:	e00b      	b.n	800d18a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d172:	2303      	movs	r3, #3
 800d174:	73fb      	strb	r3, [r7, #15]
    break;
 800d176:	e008      	b.n	800d18a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d178:	2301      	movs	r3, #1
 800d17a:	73fb      	strb	r3, [r7, #15]
    break;
 800d17c:	e005      	b.n	800d18a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d17e:	2303      	movs	r3, #3
 800d180:	73fb      	strb	r3, [r7, #15]
    break;
 800d182:	e002      	b.n	800d18a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d184:	2303      	movs	r3, #3
 800d186:	73fb      	strb	r3, [r7, #15]
    break;
 800d188:	bf00      	nop
  }
  return usb_status;
 800d18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3714      	adds	r7, #20
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <sin>:
 800d198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d19a:	ec53 2b10 	vmov	r2, r3, d0
 800d19e:	4826      	ldr	r0, [pc, #152]	@ (800d238 <sin+0xa0>)
 800d1a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d1a4:	4281      	cmp	r1, r0
 800d1a6:	d807      	bhi.n	800d1b8 <sin+0x20>
 800d1a8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d230 <sin+0x98>
 800d1ac:	2000      	movs	r0, #0
 800d1ae:	b005      	add	sp, #20
 800d1b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1b4:	f000 b90c 	b.w	800d3d0 <__kernel_sin>
 800d1b8:	4820      	ldr	r0, [pc, #128]	@ (800d23c <sin+0xa4>)
 800d1ba:	4281      	cmp	r1, r0
 800d1bc:	d908      	bls.n	800d1d0 <sin+0x38>
 800d1be:	4610      	mov	r0, r2
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	f7f3 f889 	bl	80002d8 <__aeabi_dsub>
 800d1c6:	ec41 0b10 	vmov	d0, r0, r1
 800d1ca:	b005      	add	sp, #20
 800d1cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1d0:	4668      	mov	r0, sp
 800d1d2:	f000 f9b9 	bl	800d548 <__ieee754_rem_pio2>
 800d1d6:	f000 0003 	and.w	r0, r0, #3
 800d1da:	2801      	cmp	r0, #1
 800d1dc:	d00c      	beq.n	800d1f8 <sin+0x60>
 800d1de:	2802      	cmp	r0, #2
 800d1e0:	d011      	beq.n	800d206 <sin+0x6e>
 800d1e2:	b9e8      	cbnz	r0, 800d220 <sin+0x88>
 800d1e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d1e8:	ed9d 0b00 	vldr	d0, [sp]
 800d1ec:	2001      	movs	r0, #1
 800d1ee:	f000 f8ef 	bl	800d3d0 <__kernel_sin>
 800d1f2:	ec51 0b10 	vmov	r0, r1, d0
 800d1f6:	e7e6      	b.n	800d1c6 <sin+0x2e>
 800d1f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d1fc:	ed9d 0b00 	vldr	d0, [sp]
 800d200:	f000 f81e 	bl	800d240 <__kernel_cos>
 800d204:	e7f5      	b.n	800d1f2 <sin+0x5a>
 800d206:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d20a:	ed9d 0b00 	vldr	d0, [sp]
 800d20e:	2001      	movs	r0, #1
 800d210:	f000 f8de 	bl	800d3d0 <__kernel_sin>
 800d214:	ec53 2b10 	vmov	r2, r3, d0
 800d218:	4610      	mov	r0, r2
 800d21a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d21e:	e7d2      	b.n	800d1c6 <sin+0x2e>
 800d220:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d224:	ed9d 0b00 	vldr	d0, [sp]
 800d228:	f000 f80a 	bl	800d240 <__kernel_cos>
 800d22c:	e7f2      	b.n	800d214 <sin+0x7c>
 800d22e:	bf00      	nop
	...
 800d238:	3fe921fb 	.word	0x3fe921fb
 800d23c:	7fefffff 	.word	0x7fefffff

0800d240 <__kernel_cos>:
 800d240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d244:	ec57 6b10 	vmov	r6, r7, d0
 800d248:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d24c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800d250:	ed8d 1b00 	vstr	d1, [sp]
 800d254:	d206      	bcs.n	800d264 <__kernel_cos+0x24>
 800d256:	4630      	mov	r0, r6
 800d258:	4639      	mov	r1, r7
 800d25a:	f7f3 fc8f 	bl	8000b7c <__aeabi_d2iz>
 800d25e:	2800      	cmp	r0, #0
 800d260:	f000 8088 	beq.w	800d374 <__kernel_cos+0x134>
 800d264:	4632      	mov	r2, r6
 800d266:	463b      	mov	r3, r7
 800d268:	4630      	mov	r0, r6
 800d26a:	4639      	mov	r1, r7
 800d26c:	f7f3 f9ec 	bl	8000648 <__aeabi_dmul>
 800d270:	4b51      	ldr	r3, [pc, #324]	@ (800d3b8 <__kernel_cos+0x178>)
 800d272:	2200      	movs	r2, #0
 800d274:	4604      	mov	r4, r0
 800d276:	460d      	mov	r5, r1
 800d278:	f7f3 f9e6 	bl	8000648 <__aeabi_dmul>
 800d27c:	a340      	add	r3, pc, #256	@ (adr r3, 800d380 <__kernel_cos+0x140>)
 800d27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d282:	4682      	mov	sl, r0
 800d284:	468b      	mov	fp, r1
 800d286:	4620      	mov	r0, r4
 800d288:	4629      	mov	r1, r5
 800d28a:	f7f3 f9dd 	bl	8000648 <__aeabi_dmul>
 800d28e:	a33e      	add	r3, pc, #248	@ (adr r3, 800d388 <__kernel_cos+0x148>)
 800d290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d294:	f7f3 f822 	bl	80002dc <__adddf3>
 800d298:	4622      	mov	r2, r4
 800d29a:	462b      	mov	r3, r5
 800d29c:	f7f3 f9d4 	bl	8000648 <__aeabi_dmul>
 800d2a0:	a33b      	add	r3, pc, #236	@ (adr r3, 800d390 <__kernel_cos+0x150>)
 800d2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a6:	f7f3 f817 	bl	80002d8 <__aeabi_dsub>
 800d2aa:	4622      	mov	r2, r4
 800d2ac:	462b      	mov	r3, r5
 800d2ae:	f7f3 f9cb 	bl	8000648 <__aeabi_dmul>
 800d2b2:	a339      	add	r3, pc, #228	@ (adr r3, 800d398 <__kernel_cos+0x158>)
 800d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b8:	f7f3 f810 	bl	80002dc <__adddf3>
 800d2bc:	4622      	mov	r2, r4
 800d2be:	462b      	mov	r3, r5
 800d2c0:	f7f3 f9c2 	bl	8000648 <__aeabi_dmul>
 800d2c4:	a336      	add	r3, pc, #216	@ (adr r3, 800d3a0 <__kernel_cos+0x160>)
 800d2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ca:	f7f3 f805 	bl	80002d8 <__aeabi_dsub>
 800d2ce:	4622      	mov	r2, r4
 800d2d0:	462b      	mov	r3, r5
 800d2d2:	f7f3 f9b9 	bl	8000648 <__aeabi_dmul>
 800d2d6:	a334      	add	r3, pc, #208	@ (adr r3, 800d3a8 <__kernel_cos+0x168>)
 800d2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2dc:	f7f2 fffe 	bl	80002dc <__adddf3>
 800d2e0:	4622      	mov	r2, r4
 800d2e2:	462b      	mov	r3, r5
 800d2e4:	f7f3 f9b0 	bl	8000648 <__aeabi_dmul>
 800d2e8:	4622      	mov	r2, r4
 800d2ea:	462b      	mov	r3, r5
 800d2ec:	f7f3 f9ac 	bl	8000648 <__aeabi_dmul>
 800d2f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2f4:	4604      	mov	r4, r0
 800d2f6:	460d      	mov	r5, r1
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	4639      	mov	r1, r7
 800d2fc:	f7f3 f9a4 	bl	8000648 <__aeabi_dmul>
 800d300:	460b      	mov	r3, r1
 800d302:	4602      	mov	r2, r0
 800d304:	4629      	mov	r1, r5
 800d306:	4620      	mov	r0, r4
 800d308:	f7f2 ffe6 	bl	80002d8 <__aeabi_dsub>
 800d30c:	4b2b      	ldr	r3, [pc, #172]	@ (800d3bc <__kernel_cos+0x17c>)
 800d30e:	4598      	cmp	r8, r3
 800d310:	4606      	mov	r6, r0
 800d312:	460f      	mov	r7, r1
 800d314:	d810      	bhi.n	800d338 <__kernel_cos+0xf8>
 800d316:	4602      	mov	r2, r0
 800d318:	460b      	mov	r3, r1
 800d31a:	4650      	mov	r0, sl
 800d31c:	4659      	mov	r1, fp
 800d31e:	f7f2 ffdb 	bl	80002d8 <__aeabi_dsub>
 800d322:	460b      	mov	r3, r1
 800d324:	4926      	ldr	r1, [pc, #152]	@ (800d3c0 <__kernel_cos+0x180>)
 800d326:	4602      	mov	r2, r0
 800d328:	2000      	movs	r0, #0
 800d32a:	f7f2 ffd5 	bl	80002d8 <__aeabi_dsub>
 800d32e:	ec41 0b10 	vmov	d0, r0, r1
 800d332:	b003      	add	sp, #12
 800d334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d338:	4b22      	ldr	r3, [pc, #136]	@ (800d3c4 <__kernel_cos+0x184>)
 800d33a:	4921      	ldr	r1, [pc, #132]	@ (800d3c0 <__kernel_cos+0x180>)
 800d33c:	4598      	cmp	r8, r3
 800d33e:	bf8c      	ite	hi
 800d340:	4d21      	ldrhi	r5, [pc, #132]	@ (800d3c8 <__kernel_cos+0x188>)
 800d342:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800d346:	2400      	movs	r4, #0
 800d348:	4622      	mov	r2, r4
 800d34a:	462b      	mov	r3, r5
 800d34c:	2000      	movs	r0, #0
 800d34e:	f7f2 ffc3 	bl	80002d8 <__aeabi_dsub>
 800d352:	4622      	mov	r2, r4
 800d354:	4680      	mov	r8, r0
 800d356:	4689      	mov	r9, r1
 800d358:	462b      	mov	r3, r5
 800d35a:	4650      	mov	r0, sl
 800d35c:	4659      	mov	r1, fp
 800d35e:	f7f2 ffbb 	bl	80002d8 <__aeabi_dsub>
 800d362:	4632      	mov	r2, r6
 800d364:	463b      	mov	r3, r7
 800d366:	f7f2 ffb7 	bl	80002d8 <__aeabi_dsub>
 800d36a:	4602      	mov	r2, r0
 800d36c:	460b      	mov	r3, r1
 800d36e:	4640      	mov	r0, r8
 800d370:	4649      	mov	r1, r9
 800d372:	e7da      	b.n	800d32a <__kernel_cos+0xea>
 800d374:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800d3b0 <__kernel_cos+0x170>
 800d378:	e7db      	b.n	800d332 <__kernel_cos+0xf2>
 800d37a:	bf00      	nop
 800d37c:	f3af 8000 	nop.w
 800d380:	be8838d4 	.word	0xbe8838d4
 800d384:	bda8fae9 	.word	0xbda8fae9
 800d388:	bdb4b1c4 	.word	0xbdb4b1c4
 800d38c:	3e21ee9e 	.word	0x3e21ee9e
 800d390:	809c52ad 	.word	0x809c52ad
 800d394:	3e927e4f 	.word	0x3e927e4f
 800d398:	19cb1590 	.word	0x19cb1590
 800d39c:	3efa01a0 	.word	0x3efa01a0
 800d3a0:	16c15177 	.word	0x16c15177
 800d3a4:	3f56c16c 	.word	0x3f56c16c
 800d3a8:	5555554c 	.word	0x5555554c
 800d3ac:	3fa55555 	.word	0x3fa55555
 800d3b0:	00000000 	.word	0x00000000
 800d3b4:	3ff00000 	.word	0x3ff00000
 800d3b8:	3fe00000 	.word	0x3fe00000
 800d3bc:	3fd33332 	.word	0x3fd33332
 800d3c0:	3ff00000 	.word	0x3ff00000
 800d3c4:	3fe90000 	.word	0x3fe90000
 800d3c8:	3fd20000 	.word	0x3fd20000
 800d3cc:	00000000 	.word	0x00000000

0800d3d0 <__kernel_sin>:
 800d3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d4:	ec55 4b10 	vmov	r4, r5, d0
 800d3d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d3dc:	b085      	sub	sp, #20
 800d3de:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d3e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d3e6:	4680      	mov	r8, r0
 800d3e8:	d205      	bcs.n	800d3f6 <__kernel_sin+0x26>
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	f7f3 fbc5 	bl	8000b7c <__aeabi_d2iz>
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d052      	beq.n	800d49c <__kernel_sin+0xcc>
 800d3f6:	4622      	mov	r2, r4
 800d3f8:	462b      	mov	r3, r5
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	4629      	mov	r1, r5
 800d3fe:	f7f3 f923 	bl	8000648 <__aeabi_dmul>
 800d402:	4682      	mov	sl, r0
 800d404:	468b      	mov	fp, r1
 800d406:	4602      	mov	r2, r0
 800d408:	460b      	mov	r3, r1
 800d40a:	4620      	mov	r0, r4
 800d40c:	4629      	mov	r1, r5
 800d40e:	f7f3 f91b 	bl	8000648 <__aeabi_dmul>
 800d412:	a342      	add	r3, pc, #264	@ (adr r3, 800d51c <__kernel_sin+0x14c>)
 800d414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d418:	e9cd 0100 	strd	r0, r1, [sp]
 800d41c:	4650      	mov	r0, sl
 800d41e:	4659      	mov	r1, fp
 800d420:	f7f3 f912 	bl	8000648 <__aeabi_dmul>
 800d424:	a33f      	add	r3, pc, #252	@ (adr r3, 800d524 <__kernel_sin+0x154>)
 800d426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42a:	f7f2 ff55 	bl	80002d8 <__aeabi_dsub>
 800d42e:	4652      	mov	r2, sl
 800d430:	465b      	mov	r3, fp
 800d432:	f7f3 f909 	bl	8000648 <__aeabi_dmul>
 800d436:	a33d      	add	r3, pc, #244	@ (adr r3, 800d52c <__kernel_sin+0x15c>)
 800d438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43c:	f7f2 ff4e 	bl	80002dc <__adddf3>
 800d440:	4652      	mov	r2, sl
 800d442:	465b      	mov	r3, fp
 800d444:	f7f3 f900 	bl	8000648 <__aeabi_dmul>
 800d448:	a33a      	add	r3, pc, #232	@ (adr r3, 800d534 <__kernel_sin+0x164>)
 800d44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44e:	f7f2 ff43 	bl	80002d8 <__aeabi_dsub>
 800d452:	4652      	mov	r2, sl
 800d454:	465b      	mov	r3, fp
 800d456:	f7f3 f8f7 	bl	8000648 <__aeabi_dmul>
 800d45a:	a338      	add	r3, pc, #224	@ (adr r3, 800d53c <__kernel_sin+0x16c>)
 800d45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d460:	f7f2 ff3c 	bl	80002dc <__adddf3>
 800d464:	4606      	mov	r6, r0
 800d466:	460f      	mov	r7, r1
 800d468:	f1b8 0f00 	cmp.w	r8, #0
 800d46c:	d11b      	bne.n	800d4a6 <__kernel_sin+0xd6>
 800d46e:	4602      	mov	r2, r0
 800d470:	460b      	mov	r3, r1
 800d472:	4650      	mov	r0, sl
 800d474:	4659      	mov	r1, fp
 800d476:	f7f3 f8e7 	bl	8000648 <__aeabi_dmul>
 800d47a:	a325      	add	r3, pc, #148	@ (adr r3, 800d510 <__kernel_sin+0x140>)
 800d47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d480:	f7f2 ff2a 	bl	80002d8 <__aeabi_dsub>
 800d484:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d488:	f7f3 f8de 	bl	8000648 <__aeabi_dmul>
 800d48c:	4602      	mov	r2, r0
 800d48e:	460b      	mov	r3, r1
 800d490:	4620      	mov	r0, r4
 800d492:	4629      	mov	r1, r5
 800d494:	f7f2 ff22 	bl	80002dc <__adddf3>
 800d498:	4604      	mov	r4, r0
 800d49a:	460d      	mov	r5, r1
 800d49c:	ec45 4b10 	vmov	d0, r4, r5
 800d4a0:	b005      	add	sp, #20
 800d4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4aa:	4b1b      	ldr	r3, [pc, #108]	@ (800d518 <__kernel_sin+0x148>)
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f7f3 f8cb 	bl	8000648 <__aeabi_dmul>
 800d4b2:	4632      	mov	r2, r6
 800d4b4:	4680      	mov	r8, r0
 800d4b6:	4689      	mov	r9, r1
 800d4b8:	463b      	mov	r3, r7
 800d4ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4be:	f7f3 f8c3 	bl	8000648 <__aeabi_dmul>
 800d4c2:	4602      	mov	r2, r0
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	4640      	mov	r0, r8
 800d4c8:	4649      	mov	r1, r9
 800d4ca:	f7f2 ff05 	bl	80002d8 <__aeabi_dsub>
 800d4ce:	4652      	mov	r2, sl
 800d4d0:	465b      	mov	r3, fp
 800d4d2:	f7f3 f8b9 	bl	8000648 <__aeabi_dmul>
 800d4d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4da:	f7f2 fefd 	bl	80002d8 <__aeabi_dsub>
 800d4de:	a30c      	add	r3, pc, #48	@ (adr r3, 800d510 <__kernel_sin+0x140>)
 800d4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e4:	4606      	mov	r6, r0
 800d4e6:	460f      	mov	r7, r1
 800d4e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4ec:	f7f3 f8ac 	bl	8000648 <__aeabi_dmul>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	4630      	mov	r0, r6
 800d4f6:	4639      	mov	r1, r7
 800d4f8:	f7f2 fef0 	bl	80002dc <__adddf3>
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	460b      	mov	r3, r1
 800d500:	4620      	mov	r0, r4
 800d502:	4629      	mov	r1, r5
 800d504:	f7f2 fee8 	bl	80002d8 <__aeabi_dsub>
 800d508:	e7c6      	b.n	800d498 <__kernel_sin+0xc8>
 800d50a:	bf00      	nop
 800d50c:	f3af 8000 	nop.w
 800d510:	55555549 	.word	0x55555549
 800d514:	3fc55555 	.word	0x3fc55555
 800d518:	3fe00000 	.word	0x3fe00000
 800d51c:	5acfd57c 	.word	0x5acfd57c
 800d520:	3de5d93a 	.word	0x3de5d93a
 800d524:	8a2b9ceb 	.word	0x8a2b9ceb
 800d528:	3e5ae5e6 	.word	0x3e5ae5e6
 800d52c:	57b1fe7d 	.word	0x57b1fe7d
 800d530:	3ec71de3 	.word	0x3ec71de3
 800d534:	19c161d5 	.word	0x19c161d5
 800d538:	3f2a01a0 	.word	0x3f2a01a0
 800d53c:	1110f8a6 	.word	0x1110f8a6
 800d540:	3f811111 	.word	0x3f811111
 800d544:	00000000 	.word	0x00000000

0800d548 <__ieee754_rem_pio2>:
 800d548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54c:	ec57 6b10 	vmov	r6, r7, d0
 800d550:	4bc5      	ldr	r3, [pc, #788]	@ (800d868 <__ieee754_rem_pio2+0x320>)
 800d552:	b08d      	sub	sp, #52	@ 0x34
 800d554:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d558:	4598      	cmp	r8, r3
 800d55a:	4604      	mov	r4, r0
 800d55c:	9704      	str	r7, [sp, #16]
 800d55e:	d807      	bhi.n	800d570 <__ieee754_rem_pio2+0x28>
 800d560:	2200      	movs	r2, #0
 800d562:	2300      	movs	r3, #0
 800d564:	ed80 0b00 	vstr	d0, [r0]
 800d568:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d56c:	2500      	movs	r5, #0
 800d56e:	e028      	b.n	800d5c2 <__ieee754_rem_pio2+0x7a>
 800d570:	4bbe      	ldr	r3, [pc, #760]	@ (800d86c <__ieee754_rem_pio2+0x324>)
 800d572:	4598      	cmp	r8, r3
 800d574:	d878      	bhi.n	800d668 <__ieee754_rem_pio2+0x120>
 800d576:	9b04      	ldr	r3, [sp, #16]
 800d578:	4dbd      	ldr	r5, [pc, #756]	@ (800d870 <__ieee754_rem_pio2+0x328>)
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	4630      	mov	r0, r6
 800d57e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800d830 <__ieee754_rem_pio2+0x2e8>)
 800d580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d584:	4639      	mov	r1, r7
 800d586:	dd38      	ble.n	800d5fa <__ieee754_rem_pio2+0xb2>
 800d588:	f7f2 fea6 	bl	80002d8 <__aeabi_dsub>
 800d58c:	45a8      	cmp	r8, r5
 800d58e:	4606      	mov	r6, r0
 800d590:	460f      	mov	r7, r1
 800d592:	d01a      	beq.n	800d5ca <__ieee754_rem_pio2+0x82>
 800d594:	a3a8      	add	r3, pc, #672	@ (adr r3, 800d838 <__ieee754_rem_pio2+0x2f0>)
 800d596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59a:	f7f2 fe9d 	bl	80002d8 <__aeabi_dsub>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	460b      	mov	r3, r1
 800d5a2:	4680      	mov	r8, r0
 800d5a4:	4689      	mov	r9, r1
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	4639      	mov	r1, r7
 800d5aa:	f7f2 fe95 	bl	80002d8 <__aeabi_dsub>
 800d5ae:	a3a2      	add	r3, pc, #648	@ (adr r3, 800d838 <__ieee754_rem_pio2+0x2f0>)
 800d5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b4:	f7f2 fe90 	bl	80002d8 <__aeabi_dsub>
 800d5b8:	e9c4 8900 	strd	r8, r9, [r4]
 800d5bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d5c0:	2501      	movs	r5, #1
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	b00d      	add	sp, #52	@ 0x34
 800d5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ca:	a39d      	add	r3, pc, #628	@ (adr r3, 800d840 <__ieee754_rem_pio2+0x2f8>)
 800d5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d0:	f7f2 fe82 	bl	80002d8 <__aeabi_dsub>
 800d5d4:	a39c      	add	r3, pc, #624	@ (adr r3, 800d848 <__ieee754_rem_pio2+0x300>)
 800d5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5da:	4606      	mov	r6, r0
 800d5dc:	460f      	mov	r7, r1
 800d5de:	f7f2 fe7b 	bl	80002d8 <__aeabi_dsub>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	4680      	mov	r8, r0
 800d5e8:	4689      	mov	r9, r1
 800d5ea:	4630      	mov	r0, r6
 800d5ec:	4639      	mov	r1, r7
 800d5ee:	f7f2 fe73 	bl	80002d8 <__aeabi_dsub>
 800d5f2:	a395      	add	r3, pc, #596	@ (adr r3, 800d848 <__ieee754_rem_pio2+0x300>)
 800d5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f8:	e7dc      	b.n	800d5b4 <__ieee754_rem_pio2+0x6c>
 800d5fa:	f7f2 fe6f 	bl	80002dc <__adddf3>
 800d5fe:	45a8      	cmp	r8, r5
 800d600:	4606      	mov	r6, r0
 800d602:	460f      	mov	r7, r1
 800d604:	d018      	beq.n	800d638 <__ieee754_rem_pio2+0xf0>
 800d606:	a38c      	add	r3, pc, #560	@ (adr r3, 800d838 <__ieee754_rem_pio2+0x2f0>)
 800d608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60c:	f7f2 fe66 	bl	80002dc <__adddf3>
 800d610:	4602      	mov	r2, r0
 800d612:	460b      	mov	r3, r1
 800d614:	4680      	mov	r8, r0
 800d616:	4689      	mov	r9, r1
 800d618:	4630      	mov	r0, r6
 800d61a:	4639      	mov	r1, r7
 800d61c:	f7f2 fe5c 	bl	80002d8 <__aeabi_dsub>
 800d620:	a385      	add	r3, pc, #532	@ (adr r3, 800d838 <__ieee754_rem_pio2+0x2f0>)
 800d622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d626:	f7f2 fe59 	bl	80002dc <__adddf3>
 800d62a:	f04f 35ff 	mov.w	r5, #4294967295
 800d62e:	e9c4 8900 	strd	r8, r9, [r4]
 800d632:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d636:	e7c4      	b.n	800d5c2 <__ieee754_rem_pio2+0x7a>
 800d638:	a381      	add	r3, pc, #516	@ (adr r3, 800d840 <__ieee754_rem_pio2+0x2f8>)
 800d63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63e:	f7f2 fe4d 	bl	80002dc <__adddf3>
 800d642:	a381      	add	r3, pc, #516	@ (adr r3, 800d848 <__ieee754_rem_pio2+0x300>)
 800d644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d648:	4606      	mov	r6, r0
 800d64a:	460f      	mov	r7, r1
 800d64c:	f7f2 fe46 	bl	80002dc <__adddf3>
 800d650:	4602      	mov	r2, r0
 800d652:	460b      	mov	r3, r1
 800d654:	4680      	mov	r8, r0
 800d656:	4689      	mov	r9, r1
 800d658:	4630      	mov	r0, r6
 800d65a:	4639      	mov	r1, r7
 800d65c:	f7f2 fe3c 	bl	80002d8 <__aeabi_dsub>
 800d660:	a379      	add	r3, pc, #484	@ (adr r3, 800d848 <__ieee754_rem_pio2+0x300>)
 800d662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d666:	e7de      	b.n	800d626 <__ieee754_rem_pio2+0xde>
 800d668:	4b82      	ldr	r3, [pc, #520]	@ (800d874 <__ieee754_rem_pio2+0x32c>)
 800d66a:	4598      	cmp	r8, r3
 800d66c:	f200 80d1 	bhi.w	800d812 <__ieee754_rem_pio2+0x2ca>
 800d670:	f000 f966 	bl	800d940 <fabs>
 800d674:	ec57 6b10 	vmov	r6, r7, d0
 800d678:	a375      	add	r3, pc, #468	@ (adr r3, 800d850 <__ieee754_rem_pio2+0x308>)
 800d67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67e:	4630      	mov	r0, r6
 800d680:	4639      	mov	r1, r7
 800d682:	f7f2 ffe1 	bl	8000648 <__aeabi_dmul>
 800d686:	4b7c      	ldr	r3, [pc, #496]	@ (800d878 <__ieee754_rem_pio2+0x330>)
 800d688:	2200      	movs	r2, #0
 800d68a:	f7f2 fe27 	bl	80002dc <__adddf3>
 800d68e:	f7f3 fa75 	bl	8000b7c <__aeabi_d2iz>
 800d692:	4605      	mov	r5, r0
 800d694:	f7f2 ff6e 	bl	8000574 <__aeabi_i2d>
 800d698:	4602      	mov	r2, r0
 800d69a:	460b      	mov	r3, r1
 800d69c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d6a0:	a363      	add	r3, pc, #396	@ (adr r3, 800d830 <__ieee754_rem_pio2+0x2e8>)
 800d6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a6:	f7f2 ffcf 	bl	8000648 <__aeabi_dmul>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	4630      	mov	r0, r6
 800d6b0:	4639      	mov	r1, r7
 800d6b2:	f7f2 fe11 	bl	80002d8 <__aeabi_dsub>
 800d6b6:	a360      	add	r3, pc, #384	@ (adr r3, 800d838 <__ieee754_rem_pio2+0x2f0>)
 800d6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6bc:	4682      	mov	sl, r0
 800d6be:	468b      	mov	fp, r1
 800d6c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6c4:	f7f2 ffc0 	bl	8000648 <__aeabi_dmul>
 800d6c8:	2d1f      	cmp	r5, #31
 800d6ca:	4606      	mov	r6, r0
 800d6cc:	460f      	mov	r7, r1
 800d6ce:	dc0c      	bgt.n	800d6ea <__ieee754_rem_pio2+0x1a2>
 800d6d0:	4b6a      	ldr	r3, [pc, #424]	@ (800d87c <__ieee754_rem_pio2+0x334>)
 800d6d2:	1e6a      	subs	r2, r5, #1
 800d6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6d8:	4543      	cmp	r3, r8
 800d6da:	d006      	beq.n	800d6ea <__ieee754_rem_pio2+0x1a2>
 800d6dc:	4632      	mov	r2, r6
 800d6de:	463b      	mov	r3, r7
 800d6e0:	4650      	mov	r0, sl
 800d6e2:	4659      	mov	r1, fp
 800d6e4:	f7f2 fdf8 	bl	80002d8 <__aeabi_dsub>
 800d6e8:	e00e      	b.n	800d708 <__ieee754_rem_pio2+0x1c0>
 800d6ea:	463b      	mov	r3, r7
 800d6ec:	4632      	mov	r2, r6
 800d6ee:	4650      	mov	r0, sl
 800d6f0:	4659      	mov	r1, fp
 800d6f2:	f7f2 fdf1 	bl	80002d8 <__aeabi_dsub>
 800d6f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d6fa:	9305      	str	r3, [sp, #20]
 800d6fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d700:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d704:	2b10      	cmp	r3, #16
 800d706:	dc02      	bgt.n	800d70e <__ieee754_rem_pio2+0x1c6>
 800d708:	e9c4 0100 	strd	r0, r1, [r4]
 800d70c:	e039      	b.n	800d782 <__ieee754_rem_pio2+0x23a>
 800d70e:	a34c      	add	r3, pc, #304	@ (adr r3, 800d840 <__ieee754_rem_pio2+0x2f8>)
 800d710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d714:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d718:	f7f2 ff96 	bl	8000648 <__aeabi_dmul>
 800d71c:	4606      	mov	r6, r0
 800d71e:	460f      	mov	r7, r1
 800d720:	4602      	mov	r2, r0
 800d722:	460b      	mov	r3, r1
 800d724:	4650      	mov	r0, sl
 800d726:	4659      	mov	r1, fp
 800d728:	f7f2 fdd6 	bl	80002d8 <__aeabi_dsub>
 800d72c:	4602      	mov	r2, r0
 800d72e:	460b      	mov	r3, r1
 800d730:	4680      	mov	r8, r0
 800d732:	4689      	mov	r9, r1
 800d734:	4650      	mov	r0, sl
 800d736:	4659      	mov	r1, fp
 800d738:	f7f2 fdce 	bl	80002d8 <__aeabi_dsub>
 800d73c:	4632      	mov	r2, r6
 800d73e:	463b      	mov	r3, r7
 800d740:	f7f2 fdca 	bl	80002d8 <__aeabi_dsub>
 800d744:	a340      	add	r3, pc, #256	@ (adr r3, 800d848 <__ieee754_rem_pio2+0x300>)
 800d746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74a:	4606      	mov	r6, r0
 800d74c:	460f      	mov	r7, r1
 800d74e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d752:	f7f2 ff79 	bl	8000648 <__aeabi_dmul>
 800d756:	4632      	mov	r2, r6
 800d758:	463b      	mov	r3, r7
 800d75a:	f7f2 fdbd 	bl	80002d8 <__aeabi_dsub>
 800d75e:	4602      	mov	r2, r0
 800d760:	460b      	mov	r3, r1
 800d762:	4606      	mov	r6, r0
 800d764:	460f      	mov	r7, r1
 800d766:	4640      	mov	r0, r8
 800d768:	4649      	mov	r1, r9
 800d76a:	f7f2 fdb5 	bl	80002d8 <__aeabi_dsub>
 800d76e:	9a05      	ldr	r2, [sp, #20]
 800d770:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	2b31      	cmp	r3, #49	@ 0x31
 800d778:	dc20      	bgt.n	800d7bc <__ieee754_rem_pio2+0x274>
 800d77a:	e9c4 0100 	strd	r0, r1, [r4]
 800d77e:	46c2      	mov	sl, r8
 800d780:	46cb      	mov	fp, r9
 800d782:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d786:	4650      	mov	r0, sl
 800d788:	4642      	mov	r2, r8
 800d78a:	464b      	mov	r3, r9
 800d78c:	4659      	mov	r1, fp
 800d78e:	f7f2 fda3 	bl	80002d8 <__aeabi_dsub>
 800d792:	463b      	mov	r3, r7
 800d794:	4632      	mov	r2, r6
 800d796:	f7f2 fd9f 	bl	80002d8 <__aeabi_dsub>
 800d79a:	9b04      	ldr	r3, [sp, #16]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d7a2:	f6bf af0e 	bge.w	800d5c2 <__ieee754_rem_pio2+0x7a>
 800d7a6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d7aa:	6063      	str	r3, [r4, #4]
 800d7ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d7b0:	f8c4 8000 	str.w	r8, [r4]
 800d7b4:	60a0      	str	r0, [r4, #8]
 800d7b6:	60e3      	str	r3, [r4, #12]
 800d7b8:	426d      	negs	r5, r5
 800d7ba:	e702      	b.n	800d5c2 <__ieee754_rem_pio2+0x7a>
 800d7bc:	a326      	add	r3, pc, #152	@ (adr r3, 800d858 <__ieee754_rem_pio2+0x310>)
 800d7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7c6:	f7f2 ff3f 	bl	8000648 <__aeabi_dmul>
 800d7ca:	4606      	mov	r6, r0
 800d7cc:	460f      	mov	r7, r1
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	4640      	mov	r0, r8
 800d7d4:	4649      	mov	r1, r9
 800d7d6:	f7f2 fd7f 	bl	80002d8 <__aeabi_dsub>
 800d7da:	4602      	mov	r2, r0
 800d7dc:	460b      	mov	r3, r1
 800d7de:	4682      	mov	sl, r0
 800d7e0:	468b      	mov	fp, r1
 800d7e2:	4640      	mov	r0, r8
 800d7e4:	4649      	mov	r1, r9
 800d7e6:	f7f2 fd77 	bl	80002d8 <__aeabi_dsub>
 800d7ea:	4632      	mov	r2, r6
 800d7ec:	463b      	mov	r3, r7
 800d7ee:	f7f2 fd73 	bl	80002d8 <__aeabi_dsub>
 800d7f2:	a31b      	add	r3, pc, #108	@ (adr r3, 800d860 <__ieee754_rem_pio2+0x318>)
 800d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f8:	4606      	mov	r6, r0
 800d7fa:	460f      	mov	r7, r1
 800d7fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d800:	f7f2 ff22 	bl	8000648 <__aeabi_dmul>
 800d804:	4632      	mov	r2, r6
 800d806:	463b      	mov	r3, r7
 800d808:	f7f2 fd66 	bl	80002d8 <__aeabi_dsub>
 800d80c:	4606      	mov	r6, r0
 800d80e:	460f      	mov	r7, r1
 800d810:	e764      	b.n	800d6dc <__ieee754_rem_pio2+0x194>
 800d812:	4b1b      	ldr	r3, [pc, #108]	@ (800d880 <__ieee754_rem_pio2+0x338>)
 800d814:	4598      	cmp	r8, r3
 800d816:	d935      	bls.n	800d884 <__ieee754_rem_pio2+0x33c>
 800d818:	4632      	mov	r2, r6
 800d81a:	463b      	mov	r3, r7
 800d81c:	4630      	mov	r0, r6
 800d81e:	4639      	mov	r1, r7
 800d820:	f7f2 fd5a 	bl	80002d8 <__aeabi_dsub>
 800d824:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d828:	e9c4 0100 	strd	r0, r1, [r4]
 800d82c:	e69e      	b.n	800d56c <__ieee754_rem_pio2+0x24>
 800d82e:	bf00      	nop
 800d830:	54400000 	.word	0x54400000
 800d834:	3ff921fb 	.word	0x3ff921fb
 800d838:	1a626331 	.word	0x1a626331
 800d83c:	3dd0b461 	.word	0x3dd0b461
 800d840:	1a600000 	.word	0x1a600000
 800d844:	3dd0b461 	.word	0x3dd0b461
 800d848:	2e037073 	.word	0x2e037073
 800d84c:	3ba3198a 	.word	0x3ba3198a
 800d850:	6dc9c883 	.word	0x6dc9c883
 800d854:	3fe45f30 	.word	0x3fe45f30
 800d858:	2e000000 	.word	0x2e000000
 800d85c:	3ba3198a 	.word	0x3ba3198a
 800d860:	252049c1 	.word	0x252049c1
 800d864:	397b839a 	.word	0x397b839a
 800d868:	3fe921fb 	.word	0x3fe921fb
 800d86c:	4002d97b 	.word	0x4002d97b
 800d870:	3ff921fb 	.word	0x3ff921fb
 800d874:	413921fb 	.word	0x413921fb
 800d878:	3fe00000 	.word	0x3fe00000
 800d87c:	0800ec18 	.word	0x0800ec18
 800d880:	7fefffff 	.word	0x7fefffff
 800d884:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d888:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800d88c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d890:	4630      	mov	r0, r6
 800d892:	460f      	mov	r7, r1
 800d894:	f7f3 f972 	bl	8000b7c <__aeabi_d2iz>
 800d898:	f7f2 fe6c 	bl	8000574 <__aeabi_i2d>
 800d89c:	4602      	mov	r2, r0
 800d89e:	460b      	mov	r3, r1
 800d8a0:	4630      	mov	r0, r6
 800d8a2:	4639      	mov	r1, r7
 800d8a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d8a8:	f7f2 fd16 	bl	80002d8 <__aeabi_dsub>
 800d8ac:	4b22      	ldr	r3, [pc, #136]	@ (800d938 <__ieee754_rem_pio2+0x3f0>)
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f7f2 feca 	bl	8000648 <__aeabi_dmul>
 800d8b4:	460f      	mov	r7, r1
 800d8b6:	4606      	mov	r6, r0
 800d8b8:	f7f3 f960 	bl	8000b7c <__aeabi_d2iz>
 800d8bc:	f7f2 fe5a 	bl	8000574 <__aeabi_i2d>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	4630      	mov	r0, r6
 800d8c6:	4639      	mov	r1, r7
 800d8c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d8cc:	f7f2 fd04 	bl	80002d8 <__aeabi_dsub>
 800d8d0:	4b19      	ldr	r3, [pc, #100]	@ (800d938 <__ieee754_rem_pio2+0x3f0>)
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f7f2 feb8 	bl	8000648 <__aeabi_dmul>
 800d8d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800d8dc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800d8e0:	f04f 0803 	mov.w	r8, #3
 800d8e4:	2600      	movs	r6, #0
 800d8e6:	2700      	movs	r7, #0
 800d8e8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d8ec:	4632      	mov	r2, r6
 800d8ee:	463b      	mov	r3, r7
 800d8f0:	46c2      	mov	sl, r8
 800d8f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d8f6:	f7f3 f90f 	bl	8000b18 <__aeabi_dcmpeq>
 800d8fa:	2800      	cmp	r0, #0
 800d8fc:	d1f4      	bne.n	800d8e8 <__ieee754_rem_pio2+0x3a0>
 800d8fe:	4b0f      	ldr	r3, [pc, #60]	@ (800d93c <__ieee754_rem_pio2+0x3f4>)
 800d900:	9301      	str	r3, [sp, #4]
 800d902:	2302      	movs	r3, #2
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	462a      	mov	r2, r5
 800d908:	4653      	mov	r3, sl
 800d90a:	4621      	mov	r1, r4
 800d90c:	a806      	add	r0, sp, #24
 800d90e:	f000 f81f 	bl	800d950 <__kernel_rem_pio2>
 800d912:	9b04      	ldr	r3, [sp, #16]
 800d914:	2b00      	cmp	r3, #0
 800d916:	4605      	mov	r5, r0
 800d918:	f6bf ae53 	bge.w	800d5c2 <__ieee754_rem_pio2+0x7a>
 800d91c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800d920:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d924:	e9c4 2300 	strd	r2, r3, [r4]
 800d928:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800d92c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d930:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d934:	e740      	b.n	800d7b8 <__ieee754_rem_pio2+0x270>
 800d936:	bf00      	nop
 800d938:	41700000 	.word	0x41700000
 800d93c:	0800ec98 	.word	0x0800ec98

0800d940 <fabs>:
 800d940:	ec51 0b10 	vmov	r0, r1, d0
 800d944:	4602      	mov	r2, r0
 800d946:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d94a:	ec43 2b10 	vmov	d0, r2, r3
 800d94e:	4770      	bx	lr

0800d950 <__kernel_rem_pio2>:
 800d950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d954:	ed2d 8b02 	vpush	{d8}
 800d958:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800d95c:	f112 0f14 	cmn.w	r2, #20
 800d960:	9306      	str	r3, [sp, #24]
 800d962:	9104      	str	r1, [sp, #16]
 800d964:	4bbe      	ldr	r3, [pc, #760]	@ (800dc60 <__kernel_rem_pio2+0x310>)
 800d966:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800d968:	9008      	str	r0, [sp, #32]
 800d96a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d96e:	9300      	str	r3, [sp, #0]
 800d970:	9b06      	ldr	r3, [sp, #24]
 800d972:	f103 33ff 	add.w	r3, r3, #4294967295
 800d976:	bfa8      	it	ge
 800d978:	1ed4      	subge	r4, r2, #3
 800d97a:	9305      	str	r3, [sp, #20]
 800d97c:	bfb2      	itee	lt
 800d97e:	2400      	movlt	r4, #0
 800d980:	2318      	movge	r3, #24
 800d982:	fb94 f4f3 	sdivge	r4, r4, r3
 800d986:	f06f 0317 	mvn.w	r3, #23
 800d98a:	fb04 3303 	mla	r3, r4, r3, r3
 800d98e:	eb03 0b02 	add.w	fp, r3, r2
 800d992:	9b00      	ldr	r3, [sp, #0]
 800d994:	9a05      	ldr	r2, [sp, #20]
 800d996:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800dc50 <__kernel_rem_pio2+0x300>
 800d99a:	eb03 0802 	add.w	r8, r3, r2
 800d99e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d9a0:	1aa7      	subs	r7, r4, r2
 800d9a2:	ae20      	add	r6, sp, #128	@ 0x80
 800d9a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d9a8:	2500      	movs	r5, #0
 800d9aa:	4545      	cmp	r5, r8
 800d9ac:	dd13      	ble.n	800d9d6 <__kernel_rem_pio2+0x86>
 800d9ae:	9b06      	ldr	r3, [sp, #24]
 800d9b0:	aa20      	add	r2, sp, #128	@ 0x80
 800d9b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d9b6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800d9ba:	f04f 0800 	mov.w	r8, #0
 800d9be:	9b00      	ldr	r3, [sp, #0]
 800d9c0:	4598      	cmp	r8, r3
 800d9c2:	dc31      	bgt.n	800da28 <__kernel_rem_pio2+0xd8>
 800d9c4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800dc50 <__kernel_rem_pio2+0x300>
 800d9c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d9d0:	462f      	mov	r7, r5
 800d9d2:	2600      	movs	r6, #0
 800d9d4:	e01b      	b.n	800da0e <__kernel_rem_pio2+0xbe>
 800d9d6:	42ef      	cmn	r7, r5
 800d9d8:	d407      	bmi.n	800d9ea <__kernel_rem_pio2+0x9a>
 800d9da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d9de:	f7f2 fdc9 	bl	8000574 <__aeabi_i2d>
 800d9e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d9e6:	3501      	adds	r5, #1
 800d9e8:	e7df      	b.n	800d9aa <__kernel_rem_pio2+0x5a>
 800d9ea:	ec51 0b18 	vmov	r0, r1, d8
 800d9ee:	e7f8      	b.n	800d9e2 <__kernel_rem_pio2+0x92>
 800d9f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d9f8:	f7f2 fe26 	bl	8000648 <__aeabi_dmul>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	460b      	mov	r3, r1
 800da00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da04:	f7f2 fc6a 	bl	80002dc <__adddf3>
 800da08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da0c:	3601      	adds	r6, #1
 800da0e:	9b05      	ldr	r3, [sp, #20]
 800da10:	429e      	cmp	r6, r3
 800da12:	f1a7 0708 	sub.w	r7, r7, #8
 800da16:	ddeb      	ble.n	800d9f0 <__kernel_rem_pio2+0xa0>
 800da18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da1c:	f108 0801 	add.w	r8, r8, #1
 800da20:	ecaa 7b02 	vstmia	sl!, {d7}
 800da24:	3508      	adds	r5, #8
 800da26:	e7ca      	b.n	800d9be <__kernel_rem_pio2+0x6e>
 800da28:	9b00      	ldr	r3, [sp, #0]
 800da2a:	f8dd 8000 	ldr.w	r8, [sp]
 800da2e:	aa0c      	add	r2, sp, #48	@ 0x30
 800da30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da34:	930a      	str	r3, [sp, #40]	@ 0x28
 800da36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800da38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800da3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800da3e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800da42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800da44:	ab98      	add	r3, sp, #608	@ 0x260
 800da46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800da4a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800da4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800da52:	ac0c      	add	r4, sp, #48	@ 0x30
 800da54:	ab70      	add	r3, sp, #448	@ 0x1c0
 800da56:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800da5a:	46a1      	mov	r9, r4
 800da5c:	46c2      	mov	sl, r8
 800da5e:	f1ba 0f00 	cmp.w	sl, #0
 800da62:	f1a5 0508 	sub.w	r5, r5, #8
 800da66:	dc77      	bgt.n	800db58 <__kernel_rem_pio2+0x208>
 800da68:	4658      	mov	r0, fp
 800da6a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800da6e:	f000 fac7 	bl	800e000 <scalbn>
 800da72:	ec57 6b10 	vmov	r6, r7, d0
 800da76:	2200      	movs	r2, #0
 800da78:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800da7c:	4630      	mov	r0, r6
 800da7e:	4639      	mov	r1, r7
 800da80:	f7f2 fde2 	bl	8000648 <__aeabi_dmul>
 800da84:	ec41 0b10 	vmov	d0, r0, r1
 800da88:	f000 fb3a 	bl	800e100 <floor>
 800da8c:	4b75      	ldr	r3, [pc, #468]	@ (800dc64 <__kernel_rem_pio2+0x314>)
 800da8e:	ec51 0b10 	vmov	r0, r1, d0
 800da92:	2200      	movs	r2, #0
 800da94:	f7f2 fdd8 	bl	8000648 <__aeabi_dmul>
 800da98:	4602      	mov	r2, r0
 800da9a:	460b      	mov	r3, r1
 800da9c:	4630      	mov	r0, r6
 800da9e:	4639      	mov	r1, r7
 800daa0:	f7f2 fc1a 	bl	80002d8 <__aeabi_dsub>
 800daa4:	460f      	mov	r7, r1
 800daa6:	4606      	mov	r6, r0
 800daa8:	f7f3 f868 	bl	8000b7c <__aeabi_d2iz>
 800daac:	9002      	str	r0, [sp, #8]
 800daae:	f7f2 fd61 	bl	8000574 <__aeabi_i2d>
 800dab2:	4602      	mov	r2, r0
 800dab4:	460b      	mov	r3, r1
 800dab6:	4630      	mov	r0, r6
 800dab8:	4639      	mov	r1, r7
 800daba:	f7f2 fc0d 	bl	80002d8 <__aeabi_dsub>
 800dabe:	f1bb 0f00 	cmp.w	fp, #0
 800dac2:	4606      	mov	r6, r0
 800dac4:	460f      	mov	r7, r1
 800dac6:	dd6c      	ble.n	800dba2 <__kernel_rem_pio2+0x252>
 800dac8:	f108 31ff 	add.w	r1, r8, #4294967295
 800dacc:	ab0c      	add	r3, sp, #48	@ 0x30
 800dace:	9d02      	ldr	r5, [sp, #8]
 800dad0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dad4:	f1cb 0018 	rsb	r0, fp, #24
 800dad8:	fa43 f200 	asr.w	r2, r3, r0
 800dadc:	4415      	add	r5, r2
 800dade:	4082      	lsls	r2, r0
 800dae0:	1a9b      	subs	r3, r3, r2
 800dae2:	aa0c      	add	r2, sp, #48	@ 0x30
 800dae4:	9502      	str	r5, [sp, #8]
 800dae6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800daea:	f1cb 0217 	rsb	r2, fp, #23
 800daee:	fa43 f902 	asr.w	r9, r3, r2
 800daf2:	f1b9 0f00 	cmp.w	r9, #0
 800daf6:	dd64      	ble.n	800dbc2 <__kernel_rem_pio2+0x272>
 800daf8:	9b02      	ldr	r3, [sp, #8]
 800dafa:	2200      	movs	r2, #0
 800dafc:	3301      	adds	r3, #1
 800dafe:	9302      	str	r3, [sp, #8]
 800db00:	4615      	mov	r5, r2
 800db02:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800db06:	4590      	cmp	r8, r2
 800db08:	f300 80b8 	bgt.w	800dc7c <__kernel_rem_pio2+0x32c>
 800db0c:	f1bb 0f00 	cmp.w	fp, #0
 800db10:	dd07      	ble.n	800db22 <__kernel_rem_pio2+0x1d2>
 800db12:	f1bb 0f01 	cmp.w	fp, #1
 800db16:	f000 80bf 	beq.w	800dc98 <__kernel_rem_pio2+0x348>
 800db1a:	f1bb 0f02 	cmp.w	fp, #2
 800db1e:	f000 80c6 	beq.w	800dcae <__kernel_rem_pio2+0x35e>
 800db22:	f1b9 0f02 	cmp.w	r9, #2
 800db26:	d14c      	bne.n	800dbc2 <__kernel_rem_pio2+0x272>
 800db28:	4632      	mov	r2, r6
 800db2a:	463b      	mov	r3, r7
 800db2c:	494e      	ldr	r1, [pc, #312]	@ (800dc68 <__kernel_rem_pio2+0x318>)
 800db2e:	2000      	movs	r0, #0
 800db30:	f7f2 fbd2 	bl	80002d8 <__aeabi_dsub>
 800db34:	4606      	mov	r6, r0
 800db36:	460f      	mov	r7, r1
 800db38:	2d00      	cmp	r5, #0
 800db3a:	d042      	beq.n	800dbc2 <__kernel_rem_pio2+0x272>
 800db3c:	4658      	mov	r0, fp
 800db3e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800dc58 <__kernel_rem_pio2+0x308>
 800db42:	f000 fa5d 	bl	800e000 <scalbn>
 800db46:	4630      	mov	r0, r6
 800db48:	4639      	mov	r1, r7
 800db4a:	ec53 2b10 	vmov	r2, r3, d0
 800db4e:	f7f2 fbc3 	bl	80002d8 <__aeabi_dsub>
 800db52:	4606      	mov	r6, r0
 800db54:	460f      	mov	r7, r1
 800db56:	e034      	b.n	800dbc2 <__kernel_rem_pio2+0x272>
 800db58:	4b44      	ldr	r3, [pc, #272]	@ (800dc6c <__kernel_rem_pio2+0x31c>)
 800db5a:	2200      	movs	r2, #0
 800db5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db60:	f7f2 fd72 	bl	8000648 <__aeabi_dmul>
 800db64:	f7f3 f80a 	bl	8000b7c <__aeabi_d2iz>
 800db68:	f7f2 fd04 	bl	8000574 <__aeabi_i2d>
 800db6c:	4b40      	ldr	r3, [pc, #256]	@ (800dc70 <__kernel_rem_pio2+0x320>)
 800db6e:	2200      	movs	r2, #0
 800db70:	4606      	mov	r6, r0
 800db72:	460f      	mov	r7, r1
 800db74:	f7f2 fd68 	bl	8000648 <__aeabi_dmul>
 800db78:	4602      	mov	r2, r0
 800db7a:	460b      	mov	r3, r1
 800db7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db80:	f7f2 fbaa 	bl	80002d8 <__aeabi_dsub>
 800db84:	f7f2 fffa 	bl	8000b7c <__aeabi_d2iz>
 800db88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800db8c:	f849 0b04 	str.w	r0, [r9], #4
 800db90:	4639      	mov	r1, r7
 800db92:	4630      	mov	r0, r6
 800db94:	f7f2 fba2 	bl	80002dc <__adddf3>
 800db98:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dba0:	e75d      	b.n	800da5e <__kernel_rem_pio2+0x10e>
 800dba2:	d107      	bne.n	800dbb4 <__kernel_rem_pio2+0x264>
 800dba4:	f108 33ff 	add.w	r3, r8, #4294967295
 800dba8:	aa0c      	add	r2, sp, #48	@ 0x30
 800dbaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbae:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800dbb2:	e79e      	b.n	800daf2 <__kernel_rem_pio2+0x1a2>
 800dbb4:	4b2f      	ldr	r3, [pc, #188]	@ (800dc74 <__kernel_rem_pio2+0x324>)
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f7f2 ffcc 	bl	8000b54 <__aeabi_dcmpge>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d143      	bne.n	800dc48 <__kernel_rem_pio2+0x2f8>
 800dbc0:	4681      	mov	r9, r0
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	4630      	mov	r0, r6
 800dbc8:	4639      	mov	r1, r7
 800dbca:	f7f2 ffa5 	bl	8000b18 <__aeabi_dcmpeq>
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	f000 80bf 	beq.w	800dd52 <__kernel_rem_pio2+0x402>
 800dbd4:	f108 33ff 	add.w	r3, r8, #4294967295
 800dbd8:	2200      	movs	r2, #0
 800dbda:	9900      	ldr	r1, [sp, #0]
 800dbdc:	428b      	cmp	r3, r1
 800dbde:	da6e      	bge.n	800dcbe <__kernel_rem_pio2+0x36e>
 800dbe0:	2a00      	cmp	r2, #0
 800dbe2:	f000 8089 	beq.w	800dcf8 <__kernel_rem_pio2+0x3a8>
 800dbe6:	f108 38ff 	add.w	r8, r8, #4294967295
 800dbea:	ab0c      	add	r3, sp, #48	@ 0x30
 800dbec:	f1ab 0b18 	sub.w	fp, fp, #24
 800dbf0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d0f6      	beq.n	800dbe6 <__kernel_rem_pio2+0x296>
 800dbf8:	4658      	mov	r0, fp
 800dbfa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800dc58 <__kernel_rem_pio2+0x308>
 800dbfe:	f000 f9ff 	bl	800e000 <scalbn>
 800dc02:	f108 0301 	add.w	r3, r8, #1
 800dc06:	00da      	lsls	r2, r3, #3
 800dc08:	9205      	str	r2, [sp, #20]
 800dc0a:	ec55 4b10 	vmov	r4, r5, d0
 800dc0e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800dc10:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800dc6c <__kernel_rem_pio2+0x31c>
 800dc14:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800dc18:	4646      	mov	r6, r8
 800dc1a:	f04f 0a00 	mov.w	sl, #0
 800dc1e:	2e00      	cmp	r6, #0
 800dc20:	f280 80cf 	bge.w	800ddc2 <__kernel_rem_pio2+0x472>
 800dc24:	4644      	mov	r4, r8
 800dc26:	2c00      	cmp	r4, #0
 800dc28:	f2c0 80fd 	blt.w	800de26 <__kernel_rem_pio2+0x4d6>
 800dc2c:	4b12      	ldr	r3, [pc, #72]	@ (800dc78 <__kernel_rem_pio2+0x328>)
 800dc2e:	461f      	mov	r7, r3
 800dc30:	ab70      	add	r3, sp, #448	@ 0x1c0
 800dc32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc36:	9306      	str	r3, [sp, #24]
 800dc38:	f04f 0a00 	mov.w	sl, #0
 800dc3c:	f04f 0b00 	mov.w	fp, #0
 800dc40:	2600      	movs	r6, #0
 800dc42:	eba8 0504 	sub.w	r5, r8, r4
 800dc46:	e0e2      	b.n	800de0e <__kernel_rem_pio2+0x4be>
 800dc48:	f04f 0902 	mov.w	r9, #2
 800dc4c:	e754      	b.n	800daf8 <__kernel_rem_pio2+0x1a8>
 800dc4e:	bf00      	nop
	...
 800dc5c:	3ff00000 	.word	0x3ff00000
 800dc60:	0800ede0 	.word	0x0800ede0
 800dc64:	40200000 	.word	0x40200000
 800dc68:	3ff00000 	.word	0x3ff00000
 800dc6c:	3e700000 	.word	0x3e700000
 800dc70:	41700000 	.word	0x41700000
 800dc74:	3fe00000 	.word	0x3fe00000
 800dc78:	0800eda0 	.word	0x0800eda0
 800dc7c:	f854 3b04 	ldr.w	r3, [r4], #4
 800dc80:	b945      	cbnz	r5, 800dc94 <__kernel_rem_pio2+0x344>
 800dc82:	b123      	cbz	r3, 800dc8e <__kernel_rem_pio2+0x33e>
 800dc84:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800dc88:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	3201      	adds	r2, #1
 800dc90:	461d      	mov	r5, r3
 800dc92:	e738      	b.n	800db06 <__kernel_rem_pio2+0x1b6>
 800dc94:	1acb      	subs	r3, r1, r3
 800dc96:	e7f7      	b.n	800dc88 <__kernel_rem_pio2+0x338>
 800dc98:	f108 32ff 	add.w	r2, r8, #4294967295
 800dc9c:	ab0c      	add	r3, sp, #48	@ 0x30
 800dc9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dca2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dca6:	a90c      	add	r1, sp, #48	@ 0x30
 800dca8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dcac:	e739      	b.n	800db22 <__kernel_rem_pio2+0x1d2>
 800dcae:	f108 32ff 	add.w	r2, r8, #4294967295
 800dcb2:	ab0c      	add	r3, sp, #48	@ 0x30
 800dcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcb8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dcbc:	e7f3      	b.n	800dca6 <__kernel_rem_pio2+0x356>
 800dcbe:	a90c      	add	r1, sp, #48	@ 0x30
 800dcc0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dcc4:	3b01      	subs	r3, #1
 800dcc6:	430a      	orrs	r2, r1
 800dcc8:	e787      	b.n	800dbda <__kernel_rem_pio2+0x28a>
 800dcca:	3401      	adds	r4, #1
 800dccc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dcd0:	2a00      	cmp	r2, #0
 800dcd2:	d0fa      	beq.n	800dcca <__kernel_rem_pio2+0x37a>
 800dcd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcd6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dcda:	eb0d 0503 	add.w	r5, sp, r3
 800dcde:	9b06      	ldr	r3, [sp, #24]
 800dce0:	aa20      	add	r2, sp, #128	@ 0x80
 800dce2:	4443      	add	r3, r8
 800dce4:	f108 0701 	add.w	r7, r8, #1
 800dce8:	3d98      	subs	r5, #152	@ 0x98
 800dcea:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800dcee:	4444      	add	r4, r8
 800dcf0:	42bc      	cmp	r4, r7
 800dcf2:	da04      	bge.n	800dcfe <__kernel_rem_pio2+0x3ae>
 800dcf4:	46a0      	mov	r8, r4
 800dcf6:	e6a2      	b.n	800da3e <__kernel_rem_pio2+0xee>
 800dcf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcfa:	2401      	movs	r4, #1
 800dcfc:	e7e6      	b.n	800dccc <__kernel_rem_pio2+0x37c>
 800dcfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd00:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800dd04:	f7f2 fc36 	bl	8000574 <__aeabi_i2d>
 800dd08:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800dfd0 <__kernel_rem_pio2+0x680>
 800dd0c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dd10:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dd14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dd18:	46b2      	mov	sl, r6
 800dd1a:	f04f 0800 	mov.w	r8, #0
 800dd1e:	9b05      	ldr	r3, [sp, #20]
 800dd20:	4598      	cmp	r8, r3
 800dd22:	dd05      	ble.n	800dd30 <__kernel_rem_pio2+0x3e0>
 800dd24:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd28:	3701      	adds	r7, #1
 800dd2a:	eca5 7b02 	vstmia	r5!, {d7}
 800dd2e:	e7df      	b.n	800dcf0 <__kernel_rem_pio2+0x3a0>
 800dd30:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800dd34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dd38:	f7f2 fc86 	bl	8000648 <__aeabi_dmul>
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	460b      	mov	r3, r1
 800dd40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd44:	f7f2 faca 	bl	80002dc <__adddf3>
 800dd48:	f108 0801 	add.w	r8, r8, #1
 800dd4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd50:	e7e5      	b.n	800dd1e <__kernel_rem_pio2+0x3ce>
 800dd52:	f1cb 0000 	rsb	r0, fp, #0
 800dd56:	ec47 6b10 	vmov	d0, r6, r7
 800dd5a:	f000 f951 	bl	800e000 <scalbn>
 800dd5e:	ec55 4b10 	vmov	r4, r5, d0
 800dd62:	4b9d      	ldr	r3, [pc, #628]	@ (800dfd8 <__kernel_rem_pio2+0x688>)
 800dd64:	2200      	movs	r2, #0
 800dd66:	4620      	mov	r0, r4
 800dd68:	4629      	mov	r1, r5
 800dd6a:	f7f2 fef3 	bl	8000b54 <__aeabi_dcmpge>
 800dd6e:	b300      	cbz	r0, 800ddb2 <__kernel_rem_pio2+0x462>
 800dd70:	4b9a      	ldr	r3, [pc, #616]	@ (800dfdc <__kernel_rem_pio2+0x68c>)
 800dd72:	2200      	movs	r2, #0
 800dd74:	4620      	mov	r0, r4
 800dd76:	4629      	mov	r1, r5
 800dd78:	f7f2 fc66 	bl	8000648 <__aeabi_dmul>
 800dd7c:	f7f2 fefe 	bl	8000b7c <__aeabi_d2iz>
 800dd80:	4606      	mov	r6, r0
 800dd82:	f7f2 fbf7 	bl	8000574 <__aeabi_i2d>
 800dd86:	4b94      	ldr	r3, [pc, #592]	@ (800dfd8 <__kernel_rem_pio2+0x688>)
 800dd88:	2200      	movs	r2, #0
 800dd8a:	f7f2 fc5d 	bl	8000648 <__aeabi_dmul>
 800dd8e:	460b      	mov	r3, r1
 800dd90:	4602      	mov	r2, r0
 800dd92:	4629      	mov	r1, r5
 800dd94:	4620      	mov	r0, r4
 800dd96:	f7f2 fa9f 	bl	80002d8 <__aeabi_dsub>
 800dd9a:	f7f2 feef 	bl	8000b7c <__aeabi_d2iz>
 800dd9e:	ab0c      	add	r3, sp, #48	@ 0x30
 800dda0:	f10b 0b18 	add.w	fp, fp, #24
 800dda4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800dda8:	f108 0801 	add.w	r8, r8, #1
 800ddac:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800ddb0:	e722      	b.n	800dbf8 <__kernel_rem_pio2+0x2a8>
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	4629      	mov	r1, r5
 800ddb6:	f7f2 fee1 	bl	8000b7c <__aeabi_d2iz>
 800ddba:	ab0c      	add	r3, sp, #48	@ 0x30
 800ddbc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800ddc0:	e71a      	b.n	800dbf8 <__kernel_rem_pio2+0x2a8>
 800ddc2:	ab0c      	add	r3, sp, #48	@ 0x30
 800ddc4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ddc8:	f7f2 fbd4 	bl	8000574 <__aeabi_i2d>
 800ddcc:	4622      	mov	r2, r4
 800ddce:	462b      	mov	r3, r5
 800ddd0:	f7f2 fc3a 	bl	8000648 <__aeabi_dmul>
 800ddd4:	4652      	mov	r2, sl
 800ddd6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800ddda:	465b      	mov	r3, fp
 800dddc:	4620      	mov	r0, r4
 800ddde:	4629      	mov	r1, r5
 800dde0:	f7f2 fc32 	bl	8000648 <__aeabi_dmul>
 800dde4:	3e01      	subs	r6, #1
 800dde6:	4604      	mov	r4, r0
 800dde8:	460d      	mov	r5, r1
 800ddea:	e718      	b.n	800dc1e <__kernel_rem_pio2+0x2ce>
 800ddec:	9906      	ldr	r1, [sp, #24]
 800ddee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800ddf2:	9106      	str	r1, [sp, #24]
 800ddf4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800ddf8:	f7f2 fc26 	bl	8000648 <__aeabi_dmul>
 800ddfc:	4602      	mov	r2, r0
 800ddfe:	460b      	mov	r3, r1
 800de00:	4650      	mov	r0, sl
 800de02:	4659      	mov	r1, fp
 800de04:	f7f2 fa6a 	bl	80002dc <__adddf3>
 800de08:	3601      	adds	r6, #1
 800de0a:	4682      	mov	sl, r0
 800de0c:	468b      	mov	fp, r1
 800de0e:	9b00      	ldr	r3, [sp, #0]
 800de10:	429e      	cmp	r6, r3
 800de12:	dc01      	bgt.n	800de18 <__kernel_rem_pio2+0x4c8>
 800de14:	42b5      	cmp	r5, r6
 800de16:	dae9      	bge.n	800ddec <__kernel_rem_pio2+0x49c>
 800de18:	ab48      	add	r3, sp, #288	@ 0x120
 800de1a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800de1e:	e9c5 ab00 	strd	sl, fp, [r5]
 800de22:	3c01      	subs	r4, #1
 800de24:	e6ff      	b.n	800dc26 <__kernel_rem_pio2+0x2d6>
 800de26:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800de28:	2b02      	cmp	r3, #2
 800de2a:	dc0b      	bgt.n	800de44 <__kernel_rem_pio2+0x4f4>
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	dc39      	bgt.n	800dea4 <__kernel_rem_pio2+0x554>
 800de30:	d05d      	beq.n	800deee <__kernel_rem_pio2+0x59e>
 800de32:	9b02      	ldr	r3, [sp, #8]
 800de34:	f003 0007 	and.w	r0, r3, #7
 800de38:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800de3c:	ecbd 8b02 	vpop	{d8}
 800de40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de44:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800de46:	2b03      	cmp	r3, #3
 800de48:	d1f3      	bne.n	800de32 <__kernel_rem_pio2+0x4e2>
 800de4a:	9b05      	ldr	r3, [sp, #20]
 800de4c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800de50:	eb0d 0403 	add.w	r4, sp, r3
 800de54:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800de58:	4625      	mov	r5, r4
 800de5a:	46c2      	mov	sl, r8
 800de5c:	f1ba 0f00 	cmp.w	sl, #0
 800de60:	f1a5 0508 	sub.w	r5, r5, #8
 800de64:	dc6b      	bgt.n	800df3e <__kernel_rem_pio2+0x5ee>
 800de66:	4645      	mov	r5, r8
 800de68:	2d01      	cmp	r5, #1
 800de6a:	f1a4 0408 	sub.w	r4, r4, #8
 800de6e:	f300 8087 	bgt.w	800df80 <__kernel_rem_pio2+0x630>
 800de72:	9c05      	ldr	r4, [sp, #20]
 800de74:	ab48      	add	r3, sp, #288	@ 0x120
 800de76:	441c      	add	r4, r3
 800de78:	2000      	movs	r0, #0
 800de7a:	2100      	movs	r1, #0
 800de7c:	f1b8 0f01 	cmp.w	r8, #1
 800de80:	f300 809c 	bgt.w	800dfbc <__kernel_rem_pio2+0x66c>
 800de84:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800de88:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800de8c:	f1b9 0f00 	cmp.w	r9, #0
 800de90:	f040 80a6 	bne.w	800dfe0 <__kernel_rem_pio2+0x690>
 800de94:	9b04      	ldr	r3, [sp, #16]
 800de96:	e9c3 7800 	strd	r7, r8, [r3]
 800de9a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800de9e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dea2:	e7c6      	b.n	800de32 <__kernel_rem_pio2+0x4e2>
 800dea4:	9d05      	ldr	r5, [sp, #20]
 800dea6:	ab48      	add	r3, sp, #288	@ 0x120
 800dea8:	441d      	add	r5, r3
 800deaa:	4644      	mov	r4, r8
 800deac:	2000      	movs	r0, #0
 800deae:	2100      	movs	r1, #0
 800deb0:	2c00      	cmp	r4, #0
 800deb2:	da35      	bge.n	800df20 <__kernel_rem_pio2+0x5d0>
 800deb4:	f1b9 0f00 	cmp.w	r9, #0
 800deb8:	d038      	beq.n	800df2c <__kernel_rem_pio2+0x5dc>
 800deba:	4602      	mov	r2, r0
 800debc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dec0:	9c04      	ldr	r4, [sp, #16]
 800dec2:	e9c4 2300 	strd	r2, r3, [r4]
 800dec6:	4602      	mov	r2, r0
 800dec8:	460b      	mov	r3, r1
 800deca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800dece:	f7f2 fa03 	bl	80002d8 <__aeabi_dsub>
 800ded2:	ad4a      	add	r5, sp, #296	@ 0x128
 800ded4:	2401      	movs	r4, #1
 800ded6:	45a0      	cmp	r8, r4
 800ded8:	da2b      	bge.n	800df32 <__kernel_rem_pio2+0x5e2>
 800deda:	f1b9 0f00 	cmp.w	r9, #0
 800dede:	d002      	beq.n	800dee6 <__kernel_rem_pio2+0x596>
 800dee0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dee4:	4619      	mov	r1, r3
 800dee6:	9b04      	ldr	r3, [sp, #16]
 800dee8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800deec:	e7a1      	b.n	800de32 <__kernel_rem_pio2+0x4e2>
 800deee:	9c05      	ldr	r4, [sp, #20]
 800def0:	ab48      	add	r3, sp, #288	@ 0x120
 800def2:	441c      	add	r4, r3
 800def4:	2000      	movs	r0, #0
 800def6:	2100      	movs	r1, #0
 800def8:	f1b8 0f00 	cmp.w	r8, #0
 800defc:	da09      	bge.n	800df12 <__kernel_rem_pio2+0x5c2>
 800defe:	f1b9 0f00 	cmp.w	r9, #0
 800df02:	d002      	beq.n	800df0a <__kernel_rem_pio2+0x5ba>
 800df04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800df08:	4619      	mov	r1, r3
 800df0a:	9b04      	ldr	r3, [sp, #16]
 800df0c:	e9c3 0100 	strd	r0, r1, [r3]
 800df10:	e78f      	b.n	800de32 <__kernel_rem_pio2+0x4e2>
 800df12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800df16:	f7f2 f9e1 	bl	80002dc <__adddf3>
 800df1a:	f108 38ff 	add.w	r8, r8, #4294967295
 800df1e:	e7eb      	b.n	800def8 <__kernel_rem_pio2+0x5a8>
 800df20:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800df24:	f7f2 f9da 	bl	80002dc <__adddf3>
 800df28:	3c01      	subs	r4, #1
 800df2a:	e7c1      	b.n	800deb0 <__kernel_rem_pio2+0x560>
 800df2c:	4602      	mov	r2, r0
 800df2e:	460b      	mov	r3, r1
 800df30:	e7c6      	b.n	800dec0 <__kernel_rem_pio2+0x570>
 800df32:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800df36:	f7f2 f9d1 	bl	80002dc <__adddf3>
 800df3a:	3401      	adds	r4, #1
 800df3c:	e7cb      	b.n	800ded6 <__kernel_rem_pio2+0x586>
 800df3e:	ed95 7b00 	vldr	d7, [r5]
 800df42:	ed8d 7b00 	vstr	d7, [sp]
 800df46:	ed95 7b02 	vldr	d7, [r5, #8]
 800df4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df4e:	ec53 2b17 	vmov	r2, r3, d7
 800df52:	ed8d 7b06 	vstr	d7, [sp, #24]
 800df56:	f7f2 f9c1 	bl	80002dc <__adddf3>
 800df5a:	4602      	mov	r2, r0
 800df5c:	460b      	mov	r3, r1
 800df5e:	4606      	mov	r6, r0
 800df60:	460f      	mov	r7, r1
 800df62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df66:	f7f2 f9b7 	bl	80002d8 <__aeabi_dsub>
 800df6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800df6e:	f7f2 f9b5 	bl	80002dc <__adddf3>
 800df72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df76:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800df7a:	e9c5 6700 	strd	r6, r7, [r5]
 800df7e:	e76d      	b.n	800de5c <__kernel_rem_pio2+0x50c>
 800df80:	ed94 7b00 	vldr	d7, [r4]
 800df84:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800df88:	ec51 0b17 	vmov	r0, r1, d7
 800df8c:	4652      	mov	r2, sl
 800df8e:	465b      	mov	r3, fp
 800df90:	ed8d 7b00 	vstr	d7, [sp]
 800df94:	f7f2 f9a2 	bl	80002dc <__adddf3>
 800df98:	4602      	mov	r2, r0
 800df9a:	460b      	mov	r3, r1
 800df9c:	4606      	mov	r6, r0
 800df9e:	460f      	mov	r7, r1
 800dfa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfa4:	f7f2 f998 	bl	80002d8 <__aeabi_dsub>
 800dfa8:	4652      	mov	r2, sl
 800dfaa:	465b      	mov	r3, fp
 800dfac:	f7f2 f996 	bl	80002dc <__adddf3>
 800dfb0:	3d01      	subs	r5, #1
 800dfb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dfb6:	e9c4 6700 	strd	r6, r7, [r4]
 800dfba:	e755      	b.n	800de68 <__kernel_rem_pio2+0x518>
 800dfbc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dfc0:	f7f2 f98c 	bl	80002dc <__adddf3>
 800dfc4:	f108 38ff 	add.w	r8, r8, #4294967295
 800dfc8:	e758      	b.n	800de7c <__kernel_rem_pio2+0x52c>
 800dfca:	bf00      	nop
 800dfcc:	f3af 8000 	nop.w
	...
 800dfd8:	41700000 	.word	0x41700000
 800dfdc:	3e700000 	.word	0x3e700000
 800dfe0:	9b04      	ldr	r3, [sp, #16]
 800dfe2:	9a04      	ldr	r2, [sp, #16]
 800dfe4:	601f      	str	r7, [r3, #0]
 800dfe6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800dfea:	605c      	str	r4, [r3, #4]
 800dfec:	609d      	str	r5, [r3, #8]
 800dfee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dff2:	60d3      	str	r3, [r2, #12]
 800dff4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dff8:	6110      	str	r0, [r2, #16]
 800dffa:	6153      	str	r3, [r2, #20]
 800dffc:	e719      	b.n	800de32 <__kernel_rem_pio2+0x4e2>
 800dffe:	bf00      	nop

0800e000 <scalbn>:
 800e000:	b570      	push	{r4, r5, r6, lr}
 800e002:	ec55 4b10 	vmov	r4, r5, d0
 800e006:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e00a:	4606      	mov	r6, r0
 800e00c:	462b      	mov	r3, r5
 800e00e:	b991      	cbnz	r1, 800e036 <scalbn+0x36>
 800e010:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e014:	4323      	orrs	r3, r4
 800e016:	d03d      	beq.n	800e094 <scalbn+0x94>
 800e018:	4b35      	ldr	r3, [pc, #212]	@ (800e0f0 <scalbn+0xf0>)
 800e01a:	4620      	mov	r0, r4
 800e01c:	4629      	mov	r1, r5
 800e01e:	2200      	movs	r2, #0
 800e020:	f7f2 fb12 	bl	8000648 <__aeabi_dmul>
 800e024:	4b33      	ldr	r3, [pc, #204]	@ (800e0f4 <scalbn+0xf4>)
 800e026:	429e      	cmp	r6, r3
 800e028:	4604      	mov	r4, r0
 800e02a:	460d      	mov	r5, r1
 800e02c:	da0f      	bge.n	800e04e <scalbn+0x4e>
 800e02e:	a328      	add	r3, pc, #160	@ (adr r3, 800e0d0 <scalbn+0xd0>)
 800e030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e034:	e01e      	b.n	800e074 <scalbn+0x74>
 800e036:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e03a:	4291      	cmp	r1, r2
 800e03c:	d10b      	bne.n	800e056 <scalbn+0x56>
 800e03e:	4622      	mov	r2, r4
 800e040:	4620      	mov	r0, r4
 800e042:	4629      	mov	r1, r5
 800e044:	f7f2 f94a 	bl	80002dc <__adddf3>
 800e048:	4604      	mov	r4, r0
 800e04a:	460d      	mov	r5, r1
 800e04c:	e022      	b.n	800e094 <scalbn+0x94>
 800e04e:	460b      	mov	r3, r1
 800e050:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e054:	3936      	subs	r1, #54	@ 0x36
 800e056:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e05a:	4296      	cmp	r6, r2
 800e05c:	dd0d      	ble.n	800e07a <scalbn+0x7a>
 800e05e:	2d00      	cmp	r5, #0
 800e060:	a11d      	add	r1, pc, #116	@ (adr r1, 800e0d8 <scalbn+0xd8>)
 800e062:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e066:	da02      	bge.n	800e06e <scalbn+0x6e>
 800e068:	a11d      	add	r1, pc, #116	@ (adr r1, 800e0e0 <scalbn+0xe0>)
 800e06a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e06e:	a31a      	add	r3, pc, #104	@ (adr r3, 800e0d8 <scalbn+0xd8>)
 800e070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e074:	f7f2 fae8 	bl	8000648 <__aeabi_dmul>
 800e078:	e7e6      	b.n	800e048 <scalbn+0x48>
 800e07a:	1872      	adds	r2, r6, r1
 800e07c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e080:	428a      	cmp	r2, r1
 800e082:	dcec      	bgt.n	800e05e <scalbn+0x5e>
 800e084:	2a00      	cmp	r2, #0
 800e086:	dd08      	ble.n	800e09a <scalbn+0x9a>
 800e088:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e08c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e090:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e094:	ec45 4b10 	vmov	d0, r4, r5
 800e098:	bd70      	pop	{r4, r5, r6, pc}
 800e09a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e09e:	da08      	bge.n	800e0b2 <scalbn+0xb2>
 800e0a0:	2d00      	cmp	r5, #0
 800e0a2:	a10b      	add	r1, pc, #44	@ (adr r1, 800e0d0 <scalbn+0xd0>)
 800e0a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0a8:	dac1      	bge.n	800e02e <scalbn+0x2e>
 800e0aa:	a10f      	add	r1, pc, #60	@ (adr r1, 800e0e8 <scalbn+0xe8>)
 800e0ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0b0:	e7bd      	b.n	800e02e <scalbn+0x2e>
 800e0b2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e0b6:	3236      	adds	r2, #54	@ 0x36
 800e0b8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e0bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e0f8 <scalbn+0xf8>)
 800e0c4:	4629      	mov	r1, r5
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	e7d4      	b.n	800e074 <scalbn+0x74>
 800e0ca:	bf00      	nop
 800e0cc:	f3af 8000 	nop.w
 800e0d0:	c2f8f359 	.word	0xc2f8f359
 800e0d4:	01a56e1f 	.word	0x01a56e1f
 800e0d8:	8800759c 	.word	0x8800759c
 800e0dc:	7e37e43c 	.word	0x7e37e43c
 800e0e0:	8800759c 	.word	0x8800759c
 800e0e4:	fe37e43c 	.word	0xfe37e43c
 800e0e8:	c2f8f359 	.word	0xc2f8f359
 800e0ec:	81a56e1f 	.word	0x81a56e1f
 800e0f0:	43500000 	.word	0x43500000
 800e0f4:	ffff3cb0 	.word	0xffff3cb0
 800e0f8:	3c900000 	.word	0x3c900000
 800e0fc:	00000000 	.word	0x00000000

0800e100 <floor>:
 800e100:	ec51 0b10 	vmov	r0, r1, d0
 800e104:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e10c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800e110:	2e13      	cmp	r6, #19
 800e112:	460c      	mov	r4, r1
 800e114:	4605      	mov	r5, r0
 800e116:	4680      	mov	r8, r0
 800e118:	dc34      	bgt.n	800e184 <floor+0x84>
 800e11a:	2e00      	cmp	r6, #0
 800e11c:	da17      	bge.n	800e14e <floor+0x4e>
 800e11e:	a332      	add	r3, pc, #200	@ (adr r3, 800e1e8 <floor+0xe8>)
 800e120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e124:	f7f2 f8da 	bl	80002dc <__adddf3>
 800e128:	2200      	movs	r2, #0
 800e12a:	2300      	movs	r3, #0
 800e12c:	f7f2 fd1c 	bl	8000b68 <__aeabi_dcmpgt>
 800e130:	b150      	cbz	r0, 800e148 <floor+0x48>
 800e132:	2c00      	cmp	r4, #0
 800e134:	da55      	bge.n	800e1e2 <floor+0xe2>
 800e136:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e13a:	432c      	orrs	r4, r5
 800e13c:	2500      	movs	r5, #0
 800e13e:	42ac      	cmp	r4, r5
 800e140:	4c2b      	ldr	r4, [pc, #172]	@ (800e1f0 <floor+0xf0>)
 800e142:	bf08      	it	eq
 800e144:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e148:	4621      	mov	r1, r4
 800e14a:	4628      	mov	r0, r5
 800e14c:	e023      	b.n	800e196 <floor+0x96>
 800e14e:	4f29      	ldr	r7, [pc, #164]	@ (800e1f4 <floor+0xf4>)
 800e150:	4137      	asrs	r7, r6
 800e152:	ea01 0307 	and.w	r3, r1, r7
 800e156:	4303      	orrs	r3, r0
 800e158:	d01d      	beq.n	800e196 <floor+0x96>
 800e15a:	a323      	add	r3, pc, #140	@ (adr r3, 800e1e8 <floor+0xe8>)
 800e15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e160:	f7f2 f8bc 	bl	80002dc <__adddf3>
 800e164:	2200      	movs	r2, #0
 800e166:	2300      	movs	r3, #0
 800e168:	f7f2 fcfe 	bl	8000b68 <__aeabi_dcmpgt>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d0eb      	beq.n	800e148 <floor+0x48>
 800e170:	2c00      	cmp	r4, #0
 800e172:	bfbe      	ittt	lt
 800e174:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800e178:	4133      	asrlt	r3, r6
 800e17a:	18e4      	addlt	r4, r4, r3
 800e17c:	ea24 0407 	bic.w	r4, r4, r7
 800e180:	2500      	movs	r5, #0
 800e182:	e7e1      	b.n	800e148 <floor+0x48>
 800e184:	2e33      	cmp	r6, #51	@ 0x33
 800e186:	dd0a      	ble.n	800e19e <floor+0x9e>
 800e188:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e18c:	d103      	bne.n	800e196 <floor+0x96>
 800e18e:	4602      	mov	r2, r0
 800e190:	460b      	mov	r3, r1
 800e192:	f7f2 f8a3 	bl	80002dc <__adddf3>
 800e196:	ec41 0b10 	vmov	d0, r0, r1
 800e19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e19e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e1a2:	f04f 37ff 	mov.w	r7, #4294967295
 800e1a6:	40df      	lsrs	r7, r3
 800e1a8:	4207      	tst	r7, r0
 800e1aa:	d0f4      	beq.n	800e196 <floor+0x96>
 800e1ac:	a30e      	add	r3, pc, #56	@ (adr r3, 800e1e8 <floor+0xe8>)
 800e1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b2:	f7f2 f893 	bl	80002dc <__adddf3>
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	f7f2 fcd5 	bl	8000b68 <__aeabi_dcmpgt>
 800e1be:	2800      	cmp	r0, #0
 800e1c0:	d0c2      	beq.n	800e148 <floor+0x48>
 800e1c2:	2c00      	cmp	r4, #0
 800e1c4:	da0a      	bge.n	800e1dc <floor+0xdc>
 800e1c6:	2e14      	cmp	r6, #20
 800e1c8:	d101      	bne.n	800e1ce <floor+0xce>
 800e1ca:	3401      	adds	r4, #1
 800e1cc:	e006      	b.n	800e1dc <floor+0xdc>
 800e1ce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	40b3      	lsls	r3, r6
 800e1d6:	441d      	add	r5, r3
 800e1d8:	4545      	cmp	r5, r8
 800e1da:	d3f6      	bcc.n	800e1ca <floor+0xca>
 800e1dc:	ea25 0507 	bic.w	r5, r5, r7
 800e1e0:	e7b2      	b.n	800e148 <floor+0x48>
 800e1e2:	2500      	movs	r5, #0
 800e1e4:	462c      	mov	r4, r5
 800e1e6:	e7af      	b.n	800e148 <floor+0x48>
 800e1e8:	8800759c 	.word	0x8800759c
 800e1ec:	7e37e43c 	.word	0x7e37e43c
 800e1f0:	bff00000 	.word	0xbff00000
 800e1f4:	000fffff 	.word	0x000fffff

0800e1f8 <calloc>:
 800e1f8:	4b02      	ldr	r3, [pc, #8]	@ (800e204 <calloc+0xc>)
 800e1fa:	460a      	mov	r2, r1
 800e1fc:	4601      	mov	r1, r0
 800e1fe:	6818      	ldr	r0, [r3, #0]
 800e200:	f000 b802 	b.w	800e208 <_calloc_r>
 800e204:	20000184 	.word	0x20000184

0800e208 <_calloc_r>:
 800e208:	b570      	push	{r4, r5, r6, lr}
 800e20a:	fba1 5402 	umull	r5, r4, r1, r2
 800e20e:	b93c      	cbnz	r4, 800e220 <_calloc_r+0x18>
 800e210:	4629      	mov	r1, r5
 800e212:	f000 f82f 	bl	800e274 <_malloc_r>
 800e216:	4606      	mov	r6, r0
 800e218:	b928      	cbnz	r0, 800e226 <_calloc_r+0x1e>
 800e21a:	2600      	movs	r6, #0
 800e21c:	4630      	mov	r0, r6
 800e21e:	bd70      	pop	{r4, r5, r6, pc}
 800e220:	220c      	movs	r2, #12
 800e222:	6002      	str	r2, [r0, #0]
 800e224:	e7f9      	b.n	800e21a <_calloc_r+0x12>
 800e226:	462a      	mov	r2, r5
 800e228:	4621      	mov	r1, r4
 800e22a:	f000 f8e3 	bl	800e3f4 <memset>
 800e22e:	e7f5      	b.n	800e21c <_calloc_r+0x14>

0800e230 <sbrk_aligned>:
 800e230:	b570      	push	{r4, r5, r6, lr}
 800e232:	4e0f      	ldr	r6, [pc, #60]	@ (800e270 <sbrk_aligned+0x40>)
 800e234:	460c      	mov	r4, r1
 800e236:	6831      	ldr	r1, [r6, #0]
 800e238:	4605      	mov	r5, r0
 800e23a:	b911      	cbnz	r1, 800e242 <sbrk_aligned+0x12>
 800e23c:	f000 f8e2 	bl	800e404 <_sbrk_r>
 800e240:	6030      	str	r0, [r6, #0]
 800e242:	4621      	mov	r1, r4
 800e244:	4628      	mov	r0, r5
 800e246:	f000 f8dd 	bl	800e404 <_sbrk_r>
 800e24a:	1c43      	adds	r3, r0, #1
 800e24c:	d103      	bne.n	800e256 <sbrk_aligned+0x26>
 800e24e:	f04f 34ff 	mov.w	r4, #4294967295
 800e252:	4620      	mov	r0, r4
 800e254:	bd70      	pop	{r4, r5, r6, pc}
 800e256:	1cc4      	adds	r4, r0, #3
 800e258:	f024 0403 	bic.w	r4, r4, #3
 800e25c:	42a0      	cmp	r0, r4
 800e25e:	d0f8      	beq.n	800e252 <sbrk_aligned+0x22>
 800e260:	1a21      	subs	r1, r4, r0
 800e262:	4628      	mov	r0, r5
 800e264:	f000 f8ce 	bl	800e404 <_sbrk_r>
 800e268:	3001      	adds	r0, #1
 800e26a:	d1f2      	bne.n	800e252 <sbrk_aligned+0x22>
 800e26c:	e7ef      	b.n	800e24e <sbrk_aligned+0x1e>
 800e26e:	bf00      	nop
 800e270:	2000210c 	.word	0x2000210c

0800e274 <_malloc_r>:
 800e274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e278:	1ccd      	adds	r5, r1, #3
 800e27a:	f025 0503 	bic.w	r5, r5, #3
 800e27e:	3508      	adds	r5, #8
 800e280:	2d0c      	cmp	r5, #12
 800e282:	bf38      	it	cc
 800e284:	250c      	movcc	r5, #12
 800e286:	2d00      	cmp	r5, #0
 800e288:	4606      	mov	r6, r0
 800e28a:	db01      	blt.n	800e290 <_malloc_r+0x1c>
 800e28c:	42a9      	cmp	r1, r5
 800e28e:	d904      	bls.n	800e29a <_malloc_r+0x26>
 800e290:	230c      	movs	r3, #12
 800e292:	6033      	str	r3, [r6, #0]
 800e294:	2000      	movs	r0, #0
 800e296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e29a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e370 <_malloc_r+0xfc>
 800e29e:	f000 f869 	bl	800e374 <__malloc_lock>
 800e2a2:	f8d8 3000 	ldr.w	r3, [r8]
 800e2a6:	461c      	mov	r4, r3
 800e2a8:	bb44      	cbnz	r4, 800e2fc <_malloc_r+0x88>
 800e2aa:	4629      	mov	r1, r5
 800e2ac:	4630      	mov	r0, r6
 800e2ae:	f7ff ffbf 	bl	800e230 <sbrk_aligned>
 800e2b2:	1c43      	adds	r3, r0, #1
 800e2b4:	4604      	mov	r4, r0
 800e2b6:	d158      	bne.n	800e36a <_malloc_r+0xf6>
 800e2b8:	f8d8 4000 	ldr.w	r4, [r8]
 800e2bc:	4627      	mov	r7, r4
 800e2be:	2f00      	cmp	r7, #0
 800e2c0:	d143      	bne.n	800e34a <_malloc_r+0xd6>
 800e2c2:	2c00      	cmp	r4, #0
 800e2c4:	d04b      	beq.n	800e35e <_malloc_r+0xea>
 800e2c6:	6823      	ldr	r3, [r4, #0]
 800e2c8:	4639      	mov	r1, r7
 800e2ca:	4630      	mov	r0, r6
 800e2cc:	eb04 0903 	add.w	r9, r4, r3
 800e2d0:	f000 f898 	bl	800e404 <_sbrk_r>
 800e2d4:	4581      	cmp	r9, r0
 800e2d6:	d142      	bne.n	800e35e <_malloc_r+0xea>
 800e2d8:	6821      	ldr	r1, [r4, #0]
 800e2da:	1a6d      	subs	r5, r5, r1
 800e2dc:	4629      	mov	r1, r5
 800e2de:	4630      	mov	r0, r6
 800e2e0:	f7ff ffa6 	bl	800e230 <sbrk_aligned>
 800e2e4:	3001      	adds	r0, #1
 800e2e6:	d03a      	beq.n	800e35e <_malloc_r+0xea>
 800e2e8:	6823      	ldr	r3, [r4, #0]
 800e2ea:	442b      	add	r3, r5
 800e2ec:	6023      	str	r3, [r4, #0]
 800e2ee:	f8d8 3000 	ldr.w	r3, [r8]
 800e2f2:	685a      	ldr	r2, [r3, #4]
 800e2f4:	bb62      	cbnz	r2, 800e350 <_malloc_r+0xdc>
 800e2f6:	f8c8 7000 	str.w	r7, [r8]
 800e2fa:	e00f      	b.n	800e31c <_malloc_r+0xa8>
 800e2fc:	6822      	ldr	r2, [r4, #0]
 800e2fe:	1b52      	subs	r2, r2, r5
 800e300:	d420      	bmi.n	800e344 <_malloc_r+0xd0>
 800e302:	2a0b      	cmp	r2, #11
 800e304:	d917      	bls.n	800e336 <_malloc_r+0xc2>
 800e306:	1961      	adds	r1, r4, r5
 800e308:	42a3      	cmp	r3, r4
 800e30a:	6025      	str	r5, [r4, #0]
 800e30c:	bf18      	it	ne
 800e30e:	6059      	strne	r1, [r3, #4]
 800e310:	6863      	ldr	r3, [r4, #4]
 800e312:	bf08      	it	eq
 800e314:	f8c8 1000 	streq.w	r1, [r8]
 800e318:	5162      	str	r2, [r4, r5]
 800e31a:	604b      	str	r3, [r1, #4]
 800e31c:	4630      	mov	r0, r6
 800e31e:	f000 f82f 	bl	800e380 <__malloc_unlock>
 800e322:	f104 000b 	add.w	r0, r4, #11
 800e326:	1d23      	adds	r3, r4, #4
 800e328:	f020 0007 	bic.w	r0, r0, #7
 800e32c:	1ac2      	subs	r2, r0, r3
 800e32e:	bf1c      	itt	ne
 800e330:	1a1b      	subne	r3, r3, r0
 800e332:	50a3      	strne	r3, [r4, r2]
 800e334:	e7af      	b.n	800e296 <_malloc_r+0x22>
 800e336:	6862      	ldr	r2, [r4, #4]
 800e338:	42a3      	cmp	r3, r4
 800e33a:	bf0c      	ite	eq
 800e33c:	f8c8 2000 	streq.w	r2, [r8]
 800e340:	605a      	strne	r2, [r3, #4]
 800e342:	e7eb      	b.n	800e31c <_malloc_r+0xa8>
 800e344:	4623      	mov	r3, r4
 800e346:	6864      	ldr	r4, [r4, #4]
 800e348:	e7ae      	b.n	800e2a8 <_malloc_r+0x34>
 800e34a:	463c      	mov	r4, r7
 800e34c:	687f      	ldr	r7, [r7, #4]
 800e34e:	e7b6      	b.n	800e2be <_malloc_r+0x4a>
 800e350:	461a      	mov	r2, r3
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	42a3      	cmp	r3, r4
 800e356:	d1fb      	bne.n	800e350 <_malloc_r+0xdc>
 800e358:	2300      	movs	r3, #0
 800e35a:	6053      	str	r3, [r2, #4]
 800e35c:	e7de      	b.n	800e31c <_malloc_r+0xa8>
 800e35e:	230c      	movs	r3, #12
 800e360:	6033      	str	r3, [r6, #0]
 800e362:	4630      	mov	r0, r6
 800e364:	f000 f80c 	bl	800e380 <__malloc_unlock>
 800e368:	e794      	b.n	800e294 <_malloc_r+0x20>
 800e36a:	6005      	str	r5, [r0, #0]
 800e36c:	e7d6      	b.n	800e31c <_malloc_r+0xa8>
 800e36e:	bf00      	nop
 800e370:	20002110 	.word	0x20002110

0800e374 <__malloc_lock>:
 800e374:	4801      	ldr	r0, [pc, #4]	@ (800e37c <__malloc_lock+0x8>)
 800e376:	f000 b87f 	b.w	800e478 <__retarget_lock_acquire_recursive>
 800e37a:	bf00      	nop
 800e37c:	20002250 	.word	0x20002250

0800e380 <__malloc_unlock>:
 800e380:	4801      	ldr	r0, [pc, #4]	@ (800e388 <__malloc_unlock+0x8>)
 800e382:	f000 b87a 	b.w	800e47a <__retarget_lock_release_recursive>
 800e386:	bf00      	nop
 800e388:	20002250 	.word	0x20002250

0800e38c <sniprintf>:
 800e38c:	b40c      	push	{r2, r3}
 800e38e:	b530      	push	{r4, r5, lr}
 800e390:	4b17      	ldr	r3, [pc, #92]	@ (800e3f0 <sniprintf+0x64>)
 800e392:	1e0c      	subs	r4, r1, #0
 800e394:	681d      	ldr	r5, [r3, #0]
 800e396:	b09d      	sub	sp, #116	@ 0x74
 800e398:	da08      	bge.n	800e3ac <sniprintf+0x20>
 800e39a:	238b      	movs	r3, #139	@ 0x8b
 800e39c:	602b      	str	r3, [r5, #0]
 800e39e:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a2:	b01d      	add	sp, #116	@ 0x74
 800e3a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3a8:	b002      	add	sp, #8
 800e3aa:	4770      	bx	lr
 800e3ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e3b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e3b4:	bf14      	ite	ne
 800e3b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e3ba:	4623      	moveq	r3, r4
 800e3bc:	9304      	str	r3, [sp, #16]
 800e3be:	9307      	str	r3, [sp, #28]
 800e3c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e3c4:	9002      	str	r0, [sp, #8]
 800e3c6:	9006      	str	r0, [sp, #24]
 800e3c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e3cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e3ce:	ab21      	add	r3, sp, #132	@ 0x84
 800e3d0:	a902      	add	r1, sp, #8
 800e3d2:	4628      	mov	r0, r5
 800e3d4:	9301      	str	r3, [sp, #4]
 800e3d6:	f000 f8f7 	bl	800e5c8 <_svfiprintf_r>
 800e3da:	1c43      	adds	r3, r0, #1
 800e3dc:	bfbc      	itt	lt
 800e3de:	238b      	movlt	r3, #139	@ 0x8b
 800e3e0:	602b      	strlt	r3, [r5, #0]
 800e3e2:	2c00      	cmp	r4, #0
 800e3e4:	d0dd      	beq.n	800e3a2 <sniprintf+0x16>
 800e3e6:	9b02      	ldr	r3, [sp, #8]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	701a      	strb	r2, [r3, #0]
 800e3ec:	e7d9      	b.n	800e3a2 <sniprintf+0x16>
 800e3ee:	bf00      	nop
 800e3f0:	20000184 	.word	0x20000184

0800e3f4 <memset>:
 800e3f4:	4402      	add	r2, r0
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d100      	bne.n	800e3fe <memset+0xa>
 800e3fc:	4770      	bx	lr
 800e3fe:	f803 1b01 	strb.w	r1, [r3], #1
 800e402:	e7f9      	b.n	800e3f8 <memset+0x4>

0800e404 <_sbrk_r>:
 800e404:	b538      	push	{r3, r4, r5, lr}
 800e406:	4d06      	ldr	r5, [pc, #24]	@ (800e420 <_sbrk_r+0x1c>)
 800e408:	2300      	movs	r3, #0
 800e40a:	4604      	mov	r4, r0
 800e40c:	4608      	mov	r0, r1
 800e40e:	602b      	str	r3, [r5, #0]
 800e410:	f7f3 ff0c 	bl	800222c <_sbrk>
 800e414:	1c43      	adds	r3, r0, #1
 800e416:	d102      	bne.n	800e41e <_sbrk_r+0x1a>
 800e418:	682b      	ldr	r3, [r5, #0]
 800e41a:	b103      	cbz	r3, 800e41e <_sbrk_r+0x1a>
 800e41c:	6023      	str	r3, [r4, #0]
 800e41e:	bd38      	pop	{r3, r4, r5, pc}
 800e420:	2000224c 	.word	0x2000224c

0800e424 <__errno>:
 800e424:	4b01      	ldr	r3, [pc, #4]	@ (800e42c <__errno+0x8>)
 800e426:	6818      	ldr	r0, [r3, #0]
 800e428:	4770      	bx	lr
 800e42a:	bf00      	nop
 800e42c:	20000184 	.word	0x20000184

0800e430 <__libc_init_array>:
 800e430:	b570      	push	{r4, r5, r6, lr}
 800e432:	4d0d      	ldr	r5, [pc, #52]	@ (800e468 <__libc_init_array+0x38>)
 800e434:	4c0d      	ldr	r4, [pc, #52]	@ (800e46c <__libc_init_array+0x3c>)
 800e436:	1b64      	subs	r4, r4, r5
 800e438:	10a4      	asrs	r4, r4, #2
 800e43a:	2600      	movs	r6, #0
 800e43c:	42a6      	cmp	r6, r4
 800e43e:	d109      	bne.n	800e454 <__libc_init_array+0x24>
 800e440:	4d0b      	ldr	r5, [pc, #44]	@ (800e470 <__libc_init_array+0x40>)
 800e442:	4c0c      	ldr	r4, [pc, #48]	@ (800e474 <__libc_init_array+0x44>)
 800e444:	f000 fba8 	bl	800eb98 <_init>
 800e448:	1b64      	subs	r4, r4, r5
 800e44a:	10a4      	asrs	r4, r4, #2
 800e44c:	2600      	movs	r6, #0
 800e44e:	42a6      	cmp	r6, r4
 800e450:	d105      	bne.n	800e45e <__libc_init_array+0x2e>
 800e452:	bd70      	pop	{r4, r5, r6, pc}
 800e454:	f855 3b04 	ldr.w	r3, [r5], #4
 800e458:	4798      	blx	r3
 800e45a:	3601      	adds	r6, #1
 800e45c:	e7ee      	b.n	800e43c <__libc_init_array+0xc>
 800e45e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e462:	4798      	blx	r3
 800e464:	3601      	adds	r6, #1
 800e466:	e7f2      	b.n	800e44e <__libc_init_array+0x1e>
 800e468:	0800ee2c 	.word	0x0800ee2c
 800e46c:	0800ee2c 	.word	0x0800ee2c
 800e470:	0800ee2c 	.word	0x0800ee2c
 800e474:	0800ee30 	.word	0x0800ee30

0800e478 <__retarget_lock_acquire_recursive>:
 800e478:	4770      	bx	lr

0800e47a <__retarget_lock_release_recursive>:
 800e47a:	4770      	bx	lr

0800e47c <_free_r>:
 800e47c:	b538      	push	{r3, r4, r5, lr}
 800e47e:	4605      	mov	r5, r0
 800e480:	2900      	cmp	r1, #0
 800e482:	d041      	beq.n	800e508 <_free_r+0x8c>
 800e484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e488:	1f0c      	subs	r4, r1, #4
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	bfb8      	it	lt
 800e48e:	18e4      	addlt	r4, r4, r3
 800e490:	f7ff ff70 	bl	800e374 <__malloc_lock>
 800e494:	4a1d      	ldr	r2, [pc, #116]	@ (800e50c <_free_r+0x90>)
 800e496:	6813      	ldr	r3, [r2, #0]
 800e498:	b933      	cbnz	r3, 800e4a8 <_free_r+0x2c>
 800e49a:	6063      	str	r3, [r4, #4]
 800e49c:	6014      	str	r4, [r2, #0]
 800e49e:	4628      	mov	r0, r5
 800e4a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4a4:	f7ff bf6c 	b.w	800e380 <__malloc_unlock>
 800e4a8:	42a3      	cmp	r3, r4
 800e4aa:	d908      	bls.n	800e4be <_free_r+0x42>
 800e4ac:	6820      	ldr	r0, [r4, #0]
 800e4ae:	1821      	adds	r1, r4, r0
 800e4b0:	428b      	cmp	r3, r1
 800e4b2:	bf01      	itttt	eq
 800e4b4:	6819      	ldreq	r1, [r3, #0]
 800e4b6:	685b      	ldreq	r3, [r3, #4]
 800e4b8:	1809      	addeq	r1, r1, r0
 800e4ba:	6021      	streq	r1, [r4, #0]
 800e4bc:	e7ed      	b.n	800e49a <_free_r+0x1e>
 800e4be:	461a      	mov	r2, r3
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	b10b      	cbz	r3, 800e4c8 <_free_r+0x4c>
 800e4c4:	42a3      	cmp	r3, r4
 800e4c6:	d9fa      	bls.n	800e4be <_free_r+0x42>
 800e4c8:	6811      	ldr	r1, [r2, #0]
 800e4ca:	1850      	adds	r0, r2, r1
 800e4cc:	42a0      	cmp	r0, r4
 800e4ce:	d10b      	bne.n	800e4e8 <_free_r+0x6c>
 800e4d0:	6820      	ldr	r0, [r4, #0]
 800e4d2:	4401      	add	r1, r0
 800e4d4:	1850      	adds	r0, r2, r1
 800e4d6:	4283      	cmp	r3, r0
 800e4d8:	6011      	str	r1, [r2, #0]
 800e4da:	d1e0      	bne.n	800e49e <_free_r+0x22>
 800e4dc:	6818      	ldr	r0, [r3, #0]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	6053      	str	r3, [r2, #4]
 800e4e2:	4408      	add	r0, r1
 800e4e4:	6010      	str	r0, [r2, #0]
 800e4e6:	e7da      	b.n	800e49e <_free_r+0x22>
 800e4e8:	d902      	bls.n	800e4f0 <_free_r+0x74>
 800e4ea:	230c      	movs	r3, #12
 800e4ec:	602b      	str	r3, [r5, #0]
 800e4ee:	e7d6      	b.n	800e49e <_free_r+0x22>
 800e4f0:	6820      	ldr	r0, [r4, #0]
 800e4f2:	1821      	adds	r1, r4, r0
 800e4f4:	428b      	cmp	r3, r1
 800e4f6:	bf04      	itt	eq
 800e4f8:	6819      	ldreq	r1, [r3, #0]
 800e4fa:	685b      	ldreq	r3, [r3, #4]
 800e4fc:	6063      	str	r3, [r4, #4]
 800e4fe:	bf04      	itt	eq
 800e500:	1809      	addeq	r1, r1, r0
 800e502:	6021      	streq	r1, [r4, #0]
 800e504:	6054      	str	r4, [r2, #4]
 800e506:	e7ca      	b.n	800e49e <_free_r+0x22>
 800e508:	bd38      	pop	{r3, r4, r5, pc}
 800e50a:	bf00      	nop
 800e50c:	20002110 	.word	0x20002110

0800e510 <__ssputs_r>:
 800e510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e514:	688e      	ldr	r6, [r1, #8]
 800e516:	461f      	mov	r7, r3
 800e518:	42be      	cmp	r6, r7
 800e51a:	680b      	ldr	r3, [r1, #0]
 800e51c:	4682      	mov	sl, r0
 800e51e:	460c      	mov	r4, r1
 800e520:	4690      	mov	r8, r2
 800e522:	d82d      	bhi.n	800e580 <__ssputs_r+0x70>
 800e524:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e528:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e52c:	d026      	beq.n	800e57c <__ssputs_r+0x6c>
 800e52e:	6965      	ldr	r5, [r4, #20]
 800e530:	6909      	ldr	r1, [r1, #16]
 800e532:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e536:	eba3 0901 	sub.w	r9, r3, r1
 800e53a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e53e:	1c7b      	adds	r3, r7, #1
 800e540:	444b      	add	r3, r9
 800e542:	106d      	asrs	r5, r5, #1
 800e544:	429d      	cmp	r5, r3
 800e546:	bf38      	it	cc
 800e548:	461d      	movcc	r5, r3
 800e54a:	0553      	lsls	r3, r2, #21
 800e54c:	d527      	bpl.n	800e59e <__ssputs_r+0x8e>
 800e54e:	4629      	mov	r1, r5
 800e550:	f7ff fe90 	bl	800e274 <_malloc_r>
 800e554:	4606      	mov	r6, r0
 800e556:	b360      	cbz	r0, 800e5b2 <__ssputs_r+0xa2>
 800e558:	6921      	ldr	r1, [r4, #16]
 800e55a:	464a      	mov	r2, r9
 800e55c:	f000 fad8 	bl	800eb10 <memcpy>
 800e560:	89a3      	ldrh	r3, [r4, #12]
 800e562:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e56a:	81a3      	strh	r3, [r4, #12]
 800e56c:	6126      	str	r6, [r4, #16]
 800e56e:	6165      	str	r5, [r4, #20]
 800e570:	444e      	add	r6, r9
 800e572:	eba5 0509 	sub.w	r5, r5, r9
 800e576:	6026      	str	r6, [r4, #0]
 800e578:	60a5      	str	r5, [r4, #8]
 800e57a:	463e      	mov	r6, r7
 800e57c:	42be      	cmp	r6, r7
 800e57e:	d900      	bls.n	800e582 <__ssputs_r+0x72>
 800e580:	463e      	mov	r6, r7
 800e582:	6820      	ldr	r0, [r4, #0]
 800e584:	4632      	mov	r2, r6
 800e586:	4641      	mov	r1, r8
 800e588:	f000 faa8 	bl	800eadc <memmove>
 800e58c:	68a3      	ldr	r3, [r4, #8]
 800e58e:	1b9b      	subs	r3, r3, r6
 800e590:	60a3      	str	r3, [r4, #8]
 800e592:	6823      	ldr	r3, [r4, #0]
 800e594:	4433      	add	r3, r6
 800e596:	6023      	str	r3, [r4, #0]
 800e598:	2000      	movs	r0, #0
 800e59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e59e:	462a      	mov	r2, r5
 800e5a0:	f000 fac4 	bl	800eb2c <_realloc_r>
 800e5a4:	4606      	mov	r6, r0
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	d1e0      	bne.n	800e56c <__ssputs_r+0x5c>
 800e5aa:	6921      	ldr	r1, [r4, #16]
 800e5ac:	4650      	mov	r0, sl
 800e5ae:	f7ff ff65 	bl	800e47c <_free_r>
 800e5b2:	230c      	movs	r3, #12
 800e5b4:	f8ca 3000 	str.w	r3, [sl]
 800e5b8:	89a3      	ldrh	r3, [r4, #12]
 800e5ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5be:	81a3      	strh	r3, [r4, #12]
 800e5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5c4:	e7e9      	b.n	800e59a <__ssputs_r+0x8a>
	...

0800e5c8 <_svfiprintf_r>:
 800e5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5cc:	4698      	mov	r8, r3
 800e5ce:	898b      	ldrh	r3, [r1, #12]
 800e5d0:	061b      	lsls	r3, r3, #24
 800e5d2:	b09d      	sub	sp, #116	@ 0x74
 800e5d4:	4607      	mov	r7, r0
 800e5d6:	460d      	mov	r5, r1
 800e5d8:	4614      	mov	r4, r2
 800e5da:	d510      	bpl.n	800e5fe <_svfiprintf_r+0x36>
 800e5dc:	690b      	ldr	r3, [r1, #16]
 800e5de:	b973      	cbnz	r3, 800e5fe <_svfiprintf_r+0x36>
 800e5e0:	2140      	movs	r1, #64	@ 0x40
 800e5e2:	f7ff fe47 	bl	800e274 <_malloc_r>
 800e5e6:	6028      	str	r0, [r5, #0]
 800e5e8:	6128      	str	r0, [r5, #16]
 800e5ea:	b930      	cbnz	r0, 800e5fa <_svfiprintf_r+0x32>
 800e5ec:	230c      	movs	r3, #12
 800e5ee:	603b      	str	r3, [r7, #0]
 800e5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f4:	b01d      	add	sp, #116	@ 0x74
 800e5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5fa:	2340      	movs	r3, #64	@ 0x40
 800e5fc:	616b      	str	r3, [r5, #20]
 800e5fe:	2300      	movs	r3, #0
 800e600:	9309      	str	r3, [sp, #36]	@ 0x24
 800e602:	2320      	movs	r3, #32
 800e604:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e608:	f8cd 800c 	str.w	r8, [sp, #12]
 800e60c:	2330      	movs	r3, #48	@ 0x30
 800e60e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e7ac <_svfiprintf_r+0x1e4>
 800e612:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e616:	f04f 0901 	mov.w	r9, #1
 800e61a:	4623      	mov	r3, r4
 800e61c:	469a      	mov	sl, r3
 800e61e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e622:	b10a      	cbz	r2, 800e628 <_svfiprintf_r+0x60>
 800e624:	2a25      	cmp	r2, #37	@ 0x25
 800e626:	d1f9      	bne.n	800e61c <_svfiprintf_r+0x54>
 800e628:	ebba 0b04 	subs.w	fp, sl, r4
 800e62c:	d00b      	beq.n	800e646 <_svfiprintf_r+0x7e>
 800e62e:	465b      	mov	r3, fp
 800e630:	4622      	mov	r2, r4
 800e632:	4629      	mov	r1, r5
 800e634:	4638      	mov	r0, r7
 800e636:	f7ff ff6b 	bl	800e510 <__ssputs_r>
 800e63a:	3001      	adds	r0, #1
 800e63c:	f000 80a7 	beq.w	800e78e <_svfiprintf_r+0x1c6>
 800e640:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e642:	445a      	add	r2, fp
 800e644:	9209      	str	r2, [sp, #36]	@ 0x24
 800e646:	f89a 3000 	ldrb.w	r3, [sl]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	f000 809f 	beq.w	800e78e <_svfiprintf_r+0x1c6>
 800e650:	2300      	movs	r3, #0
 800e652:	f04f 32ff 	mov.w	r2, #4294967295
 800e656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e65a:	f10a 0a01 	add.w	sl, sl, #1
 800e65e:	9304      	str	r3, [sp, #16]
 800e660:	9307      	str	r3, [sp, #28]
 800e662:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e666:	931a      	str	r3, [sp, #104]	@ 0x68
 800e668:	4654      	mov	r4, sl
 800e66a:	2205      	movs	r2, #5
 800e66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e670:	484e      	ldr	r0, [pc, #312]	@ (800e7ac <_svfiprintf_r+0x1e4>)
 800e672:	f7f1 fddd 	bl	8000230 <memchr>
 800e676:	9a04      	ldr	r2, [sp, #16]
 800e678:	b9d8      	cbnz	r0, 800e6b2 <_svfiprintf_r+0xea>
 800e67a:	06d0      	lsls	r0, r2, #27
 800e67c:	bf44      	itt	mi
 800e67e:	2320      	movmi	r3, #32
 800e680:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e684:	0711      	lsls	r1, r2, #28
 800e686:	bf44      	itt	mi
 800e688:	232b      	movmi	r3, #43	@ 0x2b
 800e68a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e68e:	f89a 3000 	ldrb.w	r3, [sl]
 800e692:	2b2a      	cmp	r3, #42	@ 0x2a
 800e694:	d015      	beq.n	800e6c2 <_svfiprintf_r+0xfa>
 800e696:	9a07      	ldr	r2, [sp, #28]
 800e698:	4654      	mov	r4, sl
 800e69a:	2000      	movs	r0, #0
 800e69c:	f04f 0c0a 	mov.w	ip, #10
 800e6a0:	4621      	mov	r1, r4
 800e6a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6a6:	3b30      	subs	r3, #48	@ 0x30
 800e6a8:	2b09      	cmp	r3, #9
 800e6aa:	d94b      	bls.n	800e744 <_svfiprintf_r+0x17c>
 800e6ac:	b1b0      	cbz	r0, 800e6dc <_svfiprintf_r+0x114>
 800e6ae:	9207      	str	r2, [sp, #28]
 800e6b0:	e014      	b.n	800e6dc <_svfiprintf_r+0x114>
 800e6b2:	eba0 0308 	sub.w	r3, r0, r8
 800e6b6:	fa09 f303 	lsl.w	r3, r9, r3
 800e6ba:	4313      	orrs	r3, r2
 800e6bc:	9304      	str	r3, [sp, #16]
 800e6be:	46a2      	mov	sl, r4
 800e6c0:	e7d2      	b.n	800e668 <_svfiprintf_r+0xa0>
 800e6c2:	9b03      	ldr	r3, [sp, #12]
 800e6c4:	1d19      	adds	r1, r3, #4
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	9103      	str	r1, [sp, #12]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	bfbb      	ittet	lt
 800e6ce:	425b      	neglt	r3, r3
 800e6d0:	f042 0202 	orrlt.w	r2, r2, #2
 800e6d4:	9307      	strge	r3, [sp, #28]
 800e6d6:	9307      	strlt	r3, [sp, #28]
 800e6d8:	bfb8      	it	lt
 800e6da:	9204      	strlt	r2, [sp, #16]
 800e6dc:	7823      	ldrb	r3, [r4, #0]
 800e6de:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6e0:	d10a      	bne.n	800e6f8 <_svfiprintf_r+0x130>
 800e6e2:	7863      	ldrb	r3, [r4, #1]
 800e6e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6e6:	d132      	bne.n	800e74e <_svfiprintf_r+0x186>
 800e6e8:	9b03      	ldr	r3, [sp, #12]
 800e6ea:	1d1a      	adds	r2, r3, #4
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	9203      	str	r2, [sp, #12]
 800e6f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e6f4:	3402      	adds	r4, #2
 800e6f6:	9305      	str	r3, [sp, #20]
 800e6f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e7bc <_svfiprintf_r+0x1f4>
 800e6fc:	7821      	ldrb	r1, [r4, #0]
 800e6fe:	2203      	movs	r2, #3
 800e700:	4650      	mov	r0, sl
 800e702:	f7f1 fd95 	bl	8000230 <memchr>
 800e706:	b138      	cbz	r0, 800e718 <_svfiprintf_r+0x150>
 800e708:	9b04      	ldr	r3, [sp, #16]
 800e70a:	eba0 000a 	sub.w	r0, r0, sl
 800e70e:	2240      	movs	r2, #64	@ 0x40
 800e710:	4082      	lsls	r2, r0
 800e712:	4313      	orrs	r3, r2
 800e714:	3401      	adds	r4, #1
 800e716:	9304      	str	r3, [sp, #16]
 800e718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e71c:	4824      	ldr	r0, [pc, #144]	@ (800e7b0 <_svfiprintf_r+0x1e8>)
 800e71e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e722:	2206      	movs	r2, #6
 800e724:	f7f1 fd84 	bl	8000230 <memchr>
 800e728:	2800      	cmp	r0, #0
 800e72a:	d036      	beq.n	800e79a <_svfiprintf_r+0x1d2>
 800e72c:	4b21      	ldr	r3, [pc, #132]	@ (800e7b4 <_svfiprintf_r+0x1ec>)
 800e72e:	bb1b      	cbnz	r3, 800e778 <_svfiprintf_r+0x1b0>
 800e730:	9b03      	ldr	r3, [sp, #12]
 800e732:	3307      	adds	r3, #7
 800e734:	f023 0307 	bic.w	r3, r3, #7
 800e738:	3308      	adds	r3, #8
 800e73a:	9303      	str	r3, [sp, #12]
 800e73c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e73e:	4433      	add	r3, r6
 800e740:	9309      	str	r3, [sp, #36]	@ 0x24
 800e742:	e76a      	b.n	800e61a <_svfiprintf_r+0x52>
 800e744:	fb0c 3202 	mla	r2, ip, r2, r3
 800e748:	460c      	mov	r4, r1
 800e74a:	2001      	movs	r0, #1
 800e74c:	e7a8      	b.n	800e6a0 <_svfiprintf_r+0xd8>
 800e74e:	2300      	movs	r3, #0
 800e750:	3401      	adds	r4, #1
 800e752:	9305      	str	r3, [sp, #20]
 800e754:	4619      	mov	r1, r3
 800e756:	f04f 0c0a 	mov.w	ip, #10
 800e75a:	4620      	mov	r0, r4
 800e75c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e760:	3a30      	subs	r2, #48	@ 0x30
 800e762:	2a09      	cmp	r2, #9
 800e764:	d903      	bls.n	800e76e <_svfiprintf_r+0x1a6>
 800e766:	2b00      	cmp	r3, #0
 800e768:	d0c6      	beq.n	800e6f8 <_svfiprintf_r+0x130>
 800e76a:	9105      	str	r1, [sp, #20]
 800e76c:	e7c4      	b.n	800e6f8 <_svfiprintf_r+0x130>
 800e76e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e772:	4604      	mov	r4, r0
 800e774:	2301      	movs	r3, #1
 800e776:	e7f0      	b.n	800e75a <_svfiprintf_r+0x192>
 800e778:	ab03      	add	r3, sp, #12
 800e77a:	9300      	str	r3, [sp, #0]
 800e77c:	462a      	mov	r2, r5
 800e77e:	4b0e      	ldr	r3, [pc, #56]	@ (800e7b8 <_svfiprintf_r+0x1f0>)
 800e780:	a904      	add	r1, sp, #16
 800e782:	4638      	mov	r0, r7
 800e784:	f3af 8000 	nop.w
 800e788:	1c42      	adds	r2, r0, #1
 800e78a:	4606      	mov	r6, r0
 800e78c:	d1d6      	bne.n	800e73c <_svfiprintf_r+0x174>
 800e78e:	89ab      	ldrh	r3, [r5, #12]
 800e790:	065b      	lsls	r3, r3, #25
 800e792:	f53f af2d 	bmi.w	800e5f0 <_svfiprintf_r+0x28>
 800e796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e798:	e72c      	b.n	800e5f4 <_svfiprintf_r+0x2c>
 800e79a:	ab03      	add	r3, sp, #12
 800e79c:	9300      	str	r3, [sp, #0]
 800e79e:	462a      	mov	r2, r5
 800e7a0:	4b05      	ldr	r3, [pc, #20]	@ (800e7b8 <_svfiprintf_r+0x1f0>)
 800e7a2:	a904      	add	r1, sp, #16
 800e7a4:	4638      	mov	r0, r7
 800e7a6:	f000 f879 	bl	800e89c <_printf_i>
 800e7aa:	e7ed      	b.n	800e788 <_svfiprintf_r+0x1c0>
 800e7ac:	0800edf0 	.word	0x0800edf0
 800e7b0:	0800edfa 	.word	0x0800edfa
 800e7b4:	00000000 	.word	0x00000000
 800e7b8:	0800e511 	.word	0x0800e511
 800e7bc:	0800edf6 	.word	0x0800edf6

0800e7c0 <_printf_common>:
 800e7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7c4:	4616      	mov	r6, r2
 800e7c6:	4698      	mov	r8, r3
 800e7c8:	688a      	ldr	r2, [r1, #8]
 800e7ca:	690b      	ldr	r3, [r1, #16]
 800e7cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	bfb8      	it	lt
 800e7d4:	4613      	movlt	r3, r2
 800e7d6:	6033      	str	r3, [r6, #0]
 800e7d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e7dc:	4607      	mov	r7, r0
 800e7de:	460c      	mov	r4, r1
 800e7e0:	b10a      	cbz	r2, 800e7e6 <_printf_common+0x26>
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	6033      	str	r3, [r6, #0]
 800e7e6:	6823      	ldr	r3, [r4, #0]
 800e7e8:	0699      	lsls	r1, r3, #26
 800e7ea:	bf42      	ittt	mi
 800e7ec:	6833      	ldrmi	r3, [r6, #0]
 800e7ee:	3302      	addmi	r3, #2
 800e7f0:	6033      	strmi	r3, [r6, #0]
 800e7f2:	6825      	ldr	r5, [r4, #0]
 800e7f4:	f015 0506 	ands.w	r5, r5, #6
 800e7f8:	d106      	bne.n	800e808 <_printf_common+0x48>
 800e7fa:	f104 0a19 	add.w	sl, r4, #25
 800e7fe:	68e3      	ldr	r3, [r4, #12]
 800e800:	6832      	ldr	r2, [r6, #0]
 800e802:	1a9b      	subs	r3, r3, r2
 800e804:	42ab      	cmp	r3, r5
 800e806:	dc26      	bgt.n	800e856 <_printf_common+0x96>
 800e808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e80c:	6822      	ldr	r2, [r4, #0]
 800e80e:	3b00      	subs	r3, #0
 800e810:	bf18      	it	ne
 800e812:	2301      	movne	r3, #1
 800e814:	0692      	lsls	r2, r2, #26
 800e816:	d42b      	bmi.n	800e870 <_printf_common+0xb0>
 800e818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e81c:	4641      	mov	r1, r8
 800e81e:	4638      	mov	r0, r7
 800e820:	47c8      	blx	r9
 800e822:	3001      	adds	r0, #1
 800e824:	d01e      	beq.n	800e864 <_printf_common+0xa4>
 800e826:	6823      	ldr	r3, [r4, #0]
 800e828:	6922      	ldr	r2, [r4, #16]
 800e82a:	f003 0306 	and.w	r3, r3, #6
 800e82e:	2b04      	cmp	r3, #4
 800e830:	bf02      	ittt	eq
 800e832:	68e5      	ldreq	r5, [r4, #12]
 800e834:	6833      	ldreq	r3, [r6, #0]
 800e836:	1aed      	subeq	r5, r5, r3
 800e838:	68a3      	ldr	r3, [r4, #8]
 800e83a:	bf0c      	ite	eq
 800e83c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e840:	2500      	movne	r5, #0
 800e842:	4293      	cmp	r3, r2
 800e844:	bfc4      	itt	gt
 800e846:	1a9b      	subgt	r3, r3, r2
 800e848:	18ed      	addgt	r5, r5, r3
 800e84a:	2600      	movs	r6, #0
 800e84c:	341a      	adds	r4, #26
 800e84e:	42b5      	cmp	r5, r6
 800e850:	d11a      	bne.n	800e888 <_printf_common+0xc8>
 800e852:	2000      	movs	r0, #0
 800e854:	e008      	b.n	800e868 <_printf_common+0xa8>
 800e856:	2301      	movs	r3, #1
 800e858:	4652      	mov	r2, sl
 800e85a:	4641      	mov	r1, r8
 800e85c:	4638      	mov	r0, r7
 800e85e:	47c8      	blx	r9
 800e860:	3001      	adds	r0, #1
 800e862:	d103      	bne.n	800e86c <_printf_common+0xac>
 800e864:	f04f 30ff 	mov.w	r0, #4294967295
 800e868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e86c:	3501      	adds	r5, #1
 800e86e:	e7c6      	b.n	800e7fe <_printf_common+0x3e>
 800e870:	18e1      	adds	r1, r4, r3
 800e872:	1c5a      	adds	r2, r3, #1
 800e874:	2030      	movs	r0, #48	@ 0x30
 800e876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e87a:	4422      	add	r2, r4
 800e87c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e884:	3302      	adds	r3, #2
 800e886:	e7c7      	b.n	800e818 <_printf_common+0x58>
 800e888:	2301      	movs	r3, #1
 800e88a:	4622      	mov	r2, r4
 800e88c:	4641      	mov	r1, r8
 800e88e:	4638      	mov	r0, r7
 800e890:	47c8      	blx	r9
 800e892:	3001      	adds	r0, #1
 800e894:	d0e6      	beq.n	800e864 <_printf_common+0xa4>
 800e896:	3601      	adds	r6, #1
 800e898:	e7d9      	b.n	800e84e <_printf_common+0x8e>
	...

0800e89c <_printf_i>:
 800e89c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8a0:	7e0f      	ldrb	r7, [r1, #24]
 800e8a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e8a4:	2f78      	cmp	r7, #120	@ 0x78
 800e8a6:	4691      	mov	r9, r2
 800e8a8:	4680      	mov	r8, r0
 800e8aa:	460c      	mov	r4, r1
 800e8ac:	469a      	mov	sl, r3
 800e8ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e8b2:	d807      	bhi.n	800e8c4 <_printf_i+0x28>
 800e8b4:	2f62      	cmp	r7, #98	@ 0x62
 800e8b6:	d80a      	bhi.n	800e8ce <_printf_i+0x32>
 800e8b8:	2f00      	cmp	r7, #0
 800e8ba:	f000 80d2 	beq.w	800ea62 <_printf_i+0x1c6>
 800e8be:	2f58      	cmp	r7, #88	@ 0x58
 800e8c0:	f000 80b9 	beq.w	800ea36 <_printf_i+0x19a>
 800e8c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e8c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e8cc:	e03a      	b.n	800e944 <_printf_i+0xa8>
 800e8ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e8d2:	2b15      	cmp	r3, #21
 800e8d4:	d8f6      	bhi.n	800e8c4 <_printf_i+0x28>
 800e8d6:	a101      	add	r1, pc, #4	@ (adr r1, 800e8dc <_printf_i+0x40>)
 800e8d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e8dc:	0800e935 	.word	0x0800e935
 800e8e0:	0800e949 	.word	0x0800e949
 800e8e4:	0800e8c5 	.word	0x0800e8c5
 800e8e8:	0800e8c5 	.word	0x0800e8c5
 800e8ec:	0800e8c5 	.word	0x0800e8c5
 800e8f0:	0800e8c5 	.word	0x0800e8c5
 800e8f4:	0800e949 	.word	0x0800e949
 800e8f8:	0800e8c5 	.word	0x0800e8c5
 800e8fc:	0800e8c5 	.word	0x0800e8c5
 800e900:	0800e8c5 	.word	0x0800e8c5
 800e904:	0800e8c5 	.word	0x0800e8c5
 800e908:	0800ea49 	.word	0x0800ea49
 800e90c:	0800e973 	.word	0x0800e973
 800e910:	0800ea03 	.word	0x0800ea03
 800e914:	0800e8c5 	.word	0x0800e8c5
 800e918:	0800e8c5 	.word	0x0800e8c5
 800e91c:	0800ea6b 	.word	0x0800ea6b
 800e920:	0800e8c5 	.word	0x0800e8c5
 800e924:	0800e973 	.word	0x0800e973
 800e928:	0800e8c5 	.word	0x0800e8c5
 800e92c:	0800e8c5 	.word	0x0800e8c5
 800e930:	0800ea0b 	.word	0x0800ea0b
 800e934:	6833      	ldr	r3, [r6, #0]
 800e936:	1d1a      	adds	r2, r3, #4
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	6032      	str	r2, [r6, #0]
 800e93c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e944:	2301      	movs	r3, #1
 800e946:	e09d      	b.n	800ea84 <_printf_i+0x1e8>
 800e948:	6833      	ldr	r3, [r6, #0]
 800e94a:	6820      	ldr	r0, [r4, #0]
 800e94c:	1d19      	adds	r1, r3, #4
 800e94e:	6031      	str	r1, [r6, #0]
 800e950:	0606      	lsls	r6, r0, #24
 800e952:	d501      	bpl.n	800e958 <_printf_i+0xbc>
 800e954:	681d      	ldr	r5, [r3, #0]
 800e956:	e003      	b.n	800e960 <_printf_i+0xc4>
 800e958:	0645      	lsls	r5, r0, #25
 800e95a:	d5fb      	bpl.n	800e954 <_printf_i+0xb8>
 800e95c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e960:	2d00      	cmp	r5, #0
 800e962:	da03      	bge.n	800e96c <_printf_i+0xd0>
 800e964:	232d      	movs	r3, #45	@ 0x2d
 800e966:	426d      	negs	r5, r5
 800e968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e96c:	4859      	ldr	r0, [pc, #356]	@ (800ead4 <_printf_i+0x238>)
 800e96e:	230a      	movs	r3, #10
 800e970:	e011      	b.n	800e996 <_printf_i+0xfa>
 800e972:	6821      	ldr	r1, [r4, #0]
 800e974:	6833      	ldr	r3, [r6, #0]
 800e976:	0608      	lsls	r0, r1, #24
 800e978:	f853 5b04 	ldr.w	r5, [r3], #4
 800e97c:	d402      	bmi.n	800e984 <_printf_i+0xe8>
 800e97e:	0649      	lsls	r1, r1, #25
 800e980:	bf48      	it	mi
 800e982:	b2ad      	uxthmi	r5, r5
 800e984:	2f6f      	cmp	r7, #111	@ 0x6f
 800e986:	4853      	ldr	r0, [pc, #332]	@ (800ead4 <_printf_i+0x238>)
 800e988:	6033      	str	r3, [r6, #0]
 800e98a:	bf14      	ite	ne
 800e98c:	230a      	movne	r3, #10
 800e98e:	2308      	moveq	r3, #8
 800e990:	2100      	movs	r1, #0
 800e992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e996:	6866      	ldr	r6, [r4, #4]
 800e998:	60a6      	str	r6, [r4, #8]
 800e99a:	2e00      	cmp	r6, #0
 800e99c:	bfa2      	ittt	ge
 800e99e:	6821      	ldrge	r1, [r4, #0]
 800e9a0:	f021 0104 	bicge.w	r1, r1, #4
 800e9a4:	6021      	strge	r1, [r4, #0]
 800e9a6:	b90d      	cbnz	r5, 800e9ac <_printf_i+0x110>
 800e9a8:	2e00      	cmp	r6, #0
 800e9aa:	d04b      	beq.n	800ea44 <_printf_i+0x1a8>
 800e9ac:	4616      	mov	r6, r2
 800e9ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800e9b2:	fb03 5711 	mls	r7, r3, r1, r5
 800e9b6:	5dc7      	ldrb	r7, [r0, r7]
 800e9b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e9bc:	462f      	mov	r7, r5
 800e9be:	42bb      	cmp	r3, r7
 800e9c0:	460d      	mov	r5, r1
 800e9c2:	d9f4      	bls.n	800e9ae <_printf_i+0x112>
 800e9c4:	2b08      	cmp	r3, #8
 800e9c6:	d10b      	bne.n	800e9e0 <_printf_i+0x144>
 800e9c8:	6823      	ldr	r3, [r4, #0]
 800e9ca:	07df      	lsls	r7, r3, #31
 800e9cc:	d508      	bpl.n	800e9e0 <_printf_i+0x144>
 800e9ce:	6923      	ldr	r3, [r4, #16]
 800e9d0:	6861      	ldr	r1, [r4, #4]
 800e9d2:	4299      	cmp	r1, r3
 800e9d4:	bfde      	ittt	le
 800e9d6:	2330      	movle	r3, #48	@ 0x30
 800e9d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e9dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e9e0:	1b92      	subs	r2, r2, r6
 800e9e2:	6122      	str	r2, [r4, #16]
 800e9e4:	f8cd a000 	str.w	sl, [sp]
 800e9e8:	464b      	mov	r3, r9
 800e9ea:	aa03      	add	r2, sp, #12
 800e9ec:	4621      	mov	r1, r4
 800e9ee:	4640      	mov	r0, r8
 800e9f0:	f7ff fee6 	bl	800e7c0 <_printf_common>
 800e9f4:	3001      	adds	r0, #1
 800e9f6:	d14a      	bne.n	800ea8e <_printf_i+0x1f2>
 800e9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9fc:	b004      	add	sp, #16
 800e9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea02:	6823      	ldr	r3, [r4, #0]
 800ea04:	f043 0320 	orr.w	r3, r3, #32
 800ea08:	6023      	str	r3, [r4, #0]
 800ea0a:	4833      	ldr	r0, [pc, #204]	@ (800ead8 <_printf_i+0x23c>)
 800ea0c:	2778      	movs	r7, #120	@ 0x78
 800ea0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ea12:	6823      	ldr	r3, [r4, #0]
 800ea14:	6831      	ldr	r1, [r6, #0]
 800ea16:	061f      	lsls	r7, r3, #24
 800ea18:	f851 5b04 	ldr.w	r5, [r1], #4
 800ea1c:	d402      	bmi.n	800ea24 <_printf_i+0x188>
 800ea1e:	065f      	lsls	r7, r3, #25
 800ea20:	bf48      	it	mi
 800ea22:	b2ad      	uxthmi	r5, r5
 800ea24:	6031      	str	r1, [r6, #0]
 800ea26:	07d9      	lsls	r1, r3, #31
 800ea28:	bf44      	itt	mi
 800ea2a:	f043 0320 	orrmi.w	r3, r3, #32
 800ea2e:	6023      	strmi	r3, [r4, #0]
 800ea30:	b11d      	cbz	r5, 800ea3a <_printf_i+0x19e>
 800ea32:	2310      	movs	r3, #16
 800ea34:	e7ac      	b.n	800e990 <_printf_i+0xf4>
 800ea36:	4827      	ldr	r0, [pc, #156]	@ (800ead4 <_printf_i+0x238>)
 800ea38:	e7e9      	b.n	800ea0e <_printf_i+0x172>
 800ea3a:	6823      	ldr	r3, [r4, #0]
 800ea3c:	f023 0320 	bic.w	r3, r3, #32
 800ea40:	6023      	str	r3, [r4, #0]
 800ea42:	e7f6      	b.n	800ea32 <_printf_i+0x196>
 800ea44:	4616      	mov	r6, r2
 800ea46:	e7bd      	b.n	800e9c4 <_printf_i+0x128>
 800ea48:	6833      	ldr	r3, [r6, #0]
 800ea4a:	6825      	ldr	r5, [r4, #0]
 800ea4c:	6961      	ldr	r1, [r4, #20]
 800ea4e:	1d18      	adds	r0, r3, #4
 800ea50:	6030      	str	r0, [r6, #0]
 800ea52:	062e      	lsls	r6, r5, #24
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	d501      	bpl.n	800ea5c <_printf_i+0x1c0>
 800ea58:	6019      	str	r1, [r3, #0]
 800ea5a:	e002      	b.n	800ea62 <_printf_i+0x1c6>
 800ea5c:	0668      	lsls	r0, r5, #25
 800ea5e:	d5fb      	bpl.n	800ea58 <_printf_i+0x1bc>
 800ea60:	8019      	strh	r1, [r3, #0]
 800ea62:	2300      	movs	r3, #0
 800ea64:	6123      	str	r3, [r4, #16]
 800ea66:	4616      	mov	r6, r2
 800ea68:	e7bc      	b.n	800e9e4 <_printf_i+0x148>
 800ea6a:	6833      	ldr	r3, [r6, #0]
 800ea6c:	1d1a      	adds	r2, r3, #4
 800ea6e:	6032      	str	r2, [r6, #0]
 800ea70:	681e      	ldr	r6, [r3, #0]
 800ea72:	6862      	ldr	r2, [r4, #4]
 800ea74:	2100      	movs	r1, #0
 800ea76:	4630      	mov	r0, r6
 800ea78:	f7f1 fbda 	bl	8000230 <memchr>
 800ea7c:	b108      	cbz	r0, 800ea82 <_printf_i+0x1e6>
 800ea7e:	1b80      	subs	r0, r0, r6
 800ea80:	6060      	str	r0, [r4, #4]
 800ea82:	6863      	ldr	r3, [r4, #4]
 800ea84:	6123      	str	r3, [r4, #16]
 800ea86:	2300      	movs	r3, #0
 800ea88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea8c:	e7aa      	b.n	800e9e4 <_printf_i+0x148>
 800ea8e:	6923      	ldr	r3, [r4, #16]
 800ea90:	4632      	mov	r2, r6
 800ea92:	4649      	mov	r1, r9
 800ea94:	4640      	mov	r0, r8
 800ea96:	47d0      	blx	sl
 800ea98:	3001      	adds	r0, #1
 800ea9a:	d0ad      	beq.n	800e9f8 <_printf_i+0x15c>
 800ea9c:	6823      	ldr	r3, [r4, #0]
 800ea9e:	079b      	lsls	r3, r3, #30
 800eaa0:	d413      	bmi.n	800eaca <_printf_i+0x22e>
 800eaa2:	68e0      	ldr	r0, [r4, #12]
 800eaa4:	9b03      	ldr	r3, [sp, #12]
 800eaa6:	4298      	cmp	r0, r3
 800eaa8:	bfb8      	it	lt
 800eaaa:	4618      	movlt	r0, r3
 800eaac:	e7a6      	b.n	800e9fc <_printf_i+0x160>
 800eaae:	2301      	movs	r3, #1
 800eab0:	4632      	mov	r2, r6
 800eab2:	4649      	mov	r1, r9
 800eab4:	4640      	mov	r0, r8
 800eab6:	47d0      	blx	sl
 800eab8:	3001      	adds	r0, #1
 800eaba:	d09d      	beq.n	800e9f8 <_printf_i+0x15c>
 800eabc:	3501      	adds	r5, #1
 800eabe:	68e3      	ldr	r3, [r4, #12]
 800eac0:	9903      	ldr	r1, [sp, #12]
 800eac2:	1a5b      	subs	r3, r3, r1
 800eac4:	42ab      	cmp	r3, r5
 800eac6:	dcf2      	bgt.n	800eaae <_printf_i+0x212>
 800eac8:	e7eb      	b.n	800eaa2 <_printf_i+0x206>
 800eaca:	2500      	movs	r5, #0
 800eacc:	f104 0619 	add.w	r6, r4, #25
 800ead0:	e7f5      	b.n	800eabe <_printf_i+0x222>
 800ead2:	bf00      	nop
 800ead4:	0800ee01 	.word	0x0800ee01
 800ead8:	0800ee12 	.word	0x0800ee12

0800eadc <memmove>:
 800eadc:	4288      	cmp	r0, r1
 800eade:	b510      	push	{r4, lr}
 800eae0:	eb01 0402 	add.w	r4, r1, r2
 800eae4:	d902      	bls.n	800eaec <memmove+0x10>
 800eae6:	4284      	cmp	r4, r0
 800eae8:	4623      	mov	r3, r4
 800eaea:	d807      	bhi.n	800eafc <memmove+0x20>
 800eaec:	1e43      	subs	r3, r0, #1
 800eaee:	42a1      	cmp	r1, r4
 800eaf0:	d008      	beq.n	800eb04 <memmove+0x28>
 800eaf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eaf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eafa:	e7f8      	b.n	800eaee <memmove+0x12>
 800eafc:	4402      	add	r2, r0
 800eafe:	4601      	mov	r1, r0
 800eb00:	428a      	cmp	r2, r1
 800eb02:	d100      	bne.n	800eb06 <memmove+0x2a>
 800eb04:	bd10      	pop	{r4, pc}
 800eb06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb0e:	e7f7      	b.n	800eb00 <memmove+0x24>

0800eb10 <memcpy>:
 800eb10:	440a      	add	r2, r1
 800eb12:	4291      	cmp	r1, r2
 800eb14:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb18:	d100      	bne.n	800eb1c <memcpy+0xc>
 800eb1a:	4770      	bx	lr
 800eb1c:	b510      	push	{r4, lr}
 800eb1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb26:	4291      	cmp	r1, r2
 800eb28:	d1f9      	bne.n	800eb1e <memcpy+0xe>
 800eb2a:	bd10      	pop	{r4, pc}

0800eb2c <_realloc_r>:
 800eb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb30:	4680      	mov	r8, r0
 800eb32:	4615      	mov	r5, r2
 800eb34:	460c      	mov	r4, r1
 800eb36:	b921      	cbnz	r1, 800eb42 <_realloc_r+0x16>
 800eb38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb3c:	4611      	mov	r1, r2
 800eb3e:	f7ff bb99 	b.w	800e274 <_malloc_r>
 800eb42:	b92a      	cbnz	r2, 800eb50 <_realloc_r+0x24>
 800eb44:	f7ff fc9a 	bl	800e47c <_free_r>
 800eb48:	2400      	movs	r4, #0
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb50:	f000 f81a 	bl	800eb88 <_malloc_usable_size_r>
 800eb54:	4285      	cmp	r5, r0
 800eb56:	4606      	mov	r6, r0
 800eb58:	d802      	bhi.n	800eb60 <_realloc_r+0x34>
 800eb5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eb5e:	d8f4      	bhi.n	800eb4a <_realloc_r+0x1e>
 800eb60:	4629      	mov	r1, r5
 800eb62:	4640      	mov	r0, r8
 800eb64:	f7ff fb86 	bl	800e274 <_malloc_r>
 800eb68:	4607      	mov	r7, r0
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	d0ec      	beq.n	800eb48 <_realloc_r+0x1c>
 800eb6e:	42b5      	cmp	r5, r6
 800eb70:	462a      	mov	r2, r5
 800eb72:	4621      	mov	r1, r4
 800eb74:	bf28      	it	cs
 800eb76:	4632      	movcs	r2, r6
 800eb78:	f7ff ffca 	bl	800eb10 <memcpy>
 800eb7c:	4621      	mov	r1, r4
 800eb7e:	4640      	mov	r0, r8
 800eb80:	f7ff fc7c 	bl	800e47c <_free_r>
 800eb84:	463c      	mov	r4, r7
 800eb86:	e7e0      	b.n	800eb4a <_realloc_r+0x1e>

0800eb88 <_malloc_usable_size_r>:
 800eb88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb8c:	1f18      	subs	r0, r3, #4
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	bfbc      	itt	lt
 800eb92:	580b      	ldrlt	r3, [r1, r0]
 800eb94:	18c0      	addlt	r0, r0, r3
 800eb96:	4770      	bx	lr

0800eb98 <_init>:
 800eb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb9a:	bf00      	nop
 800eb9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb9e:	bc08      	pop	{r3}
 800eba0:	469e      	mov	lr, r3
 800eba2:	4770      	bx	lr

0800eba4 <_fini>:
 800eba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba6:	bf00      	nop
 800eba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebaa:	bc08      	pop	{r3}
 800ebac:	469e      	mov	lr, r3
 800ebae:	4770      	bx	lr
