
UCEIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d40  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d0  08013f20  08013f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080148f0  080148f0  000161d4  2**0
                  CONTENTS
  4 .ARM          00000008  080148f0  080148f0  000158f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080148f8  080148f8  000161d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080148f8  080148f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080148fc  080148fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08014900  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002104  200001d8  08014ad4  000161d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  200022dc  08014ad4  000162dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000161d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000239c1  00000000  00000000  00016204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b87  00000000  00000000  00039bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e50  00000000  00000000  0003e750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001771  00000000  00000000  000405a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e448  00000000  00000000  00041d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fc54  00000000  00000000  00070159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001348ca  00000000  00000000  0009fdad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d4677  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008864  00000000  00000000  001d46bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001dcf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013f08 	.word	0x08013f08

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	08013f08 	.word	0x08013f08

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_dmul>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002de:	bf1d      	ittte	ne
 80002e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002e4:	ea94 0f0c 	teqne	r4, ip
 80002e8:	ea95 0f0c 	teqne	r5, ip
 80002ec:	f000 f8de 	bleq	80004ac <__aeabi_dmul+0x1dc>
 80002f0:	442c      	add	r4, r5
 80002f2:	ea81 0603 	eor.w	r6, r1, r3
 80002f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000302:	bf18      	it	ne
 8000304:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000308:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800030c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000310:	d038      	beq.n	8000384 <__aeabi_dmul+0xb4>
 8000312:	fba0 ce02 	umull	ip, lr, r0, r2
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800031e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000322:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000326:	f04f 0600 	mov.w	r6, #0
 800032a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800032e:	f09c 0f00 	teq	ip, #0
 8000332:	bf18      	it	ne
 8000334:	f04e 0e01 	orrne.w	lr, lr, #1
 8000338:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800033c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000340:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000344:	d204      	bcs.n	8000350 <__aeabi_dmul+0x80>
 8000346:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800034a:	416d      	adcs	r5, r5
 800034c:	eb46 0606 	adc.w	r6, r6, r6
 8000350:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000354:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000358:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800035c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000360:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000364:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000368:	bf88      	it	hi
 800036a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800036e:	d81e      	bhi.n	80003ae <__aeabi_dmul+0xde>
 8000370:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000374:	bf08      	it	eq
 8000376:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800037a:	f150 0000 	adcs.w	r0, r0, #0
 800037e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000388:	ea46 0101 	orr.w	r1, r6, r1
 800038c:	ea40 0002 	orr.w	r0, r0, r2
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000398:	bfc2      	ittt	gt
 800039a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800039e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003a2:	bd70      	popgt	{r4, r5, r6, pc}
 80003a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80003a8:	f04f 0e00 	mov.w	lr, #0
 80003ac:	3c01      	subs	r4, #1
 80003ae:	f300 80ab 	bgt.w	8000508 <__aeabi_dmul+0x238>
 80003b2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003b6:	bfde      	ittt	le
 80003b8:	2000      	movle	r0, #0
 80003ba:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003be:	bd70      	pople	{r4, r5, r6, pc}
 80003c0:	f1c4 0400 	rsb	r4, r4, #0
 80003c4:	3c20      	subs	r4, #32
 80003c6:	da35      	bge.n	8000434 <__aeabi_dmul+0x164>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc1b      	bgt.n	8000404 <__aeabi_dmul+0x134>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f305 	lsl.w	r3, r0, r5
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f205 	lsl.w	r2, r1, r5
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f0:	fa21 f604 	lsr.w	r6, r1, r4
 80003f4:	eb42 0106 	adc.w	r1, r2, r6
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 040c 	rsb	r4, r4, #12
 8000408:	f1c4 0520 	rsb	r5, r4, #32
 800040c:	fa00 f304 	lsl.w	r3, r0, r4
 8000410:	fa20 f005 	lsr.w	r0, r0, r5
 8000414:	fa01 f204 	lsl.w	r2, r1, r4
 8000418:	ea40 0002 	orr.w	r0, r0, r2
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000424:	f141 0100 	adc.w	r1, r1, #0
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f1c4 0520 	rsb	r5, r4, #32
 8000438:	fa00 f205 	lsl.w	r2, r0, r5
 800043c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000440:	fa20 f304 	lsr.w	r3, r0, r4
 8000444:	fa01 f205 	lsl.w	r2, r1, r5
 8000448:	ea43 0302 	orr.w	r3, r3, r2
 800044c:	fa21 f004 	lsr.w	r0, r1, r4
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	fa21 f204 	lsr.w	r2, r1, r4
 8000458:	ea20 0002 	bic.w	r0, r0, r2
 800045c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000464:	bf08      	it	eq
 8000466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f094 0f00 	teq	r4, #0
 8000470:	d10f      	bne.n	8000492 <__aeabi_dmul+0x1c2>
 8000472:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000476:	0040      	lsls	r0, r0, #1
 8000478:	eb41 0101 	adc.w	r1, r1, r1
 800047c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3c01      	subeq	r4, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1a6>
 8000486:	ea41 0106 	orr.w	r1, r1, r6
 800048a:	f095 0f00 	teq	r5, #0
 800048e:	bf18      	it	ne
 8000490:	4770      	bxne	lr
 8000492:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	eb43 0303 	adc.w	r3, r3, r3
 800049c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80004a0:	bf08      	it	eq
 80004a2:	3d01      	subeq	r5, #1
 80004a4:	d0f7      	beq.n	8000496 <__aeabi_dmul+0x1c6>
 80004a6:	ea43 0306 	orr.w	r3, r3, r6
 80004aa:	4770      	bx	lr
 80004ac:	ea94 0f0c 	teq	r4, ip
 80004b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004b4:	bf18      	it	ne
 80004b6:	ea95 0f0c 	teqne	r5, ip
 80004ba:	d00c      	beq.n	80004d6 <__aeabi_dmul+0x206>
 80004bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004c0:	bf18      	it	ne
 80004c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c6:	d1d1      	bne.n	800046c <__aeabi_dmul+0x19c>
 80004c8:	ea81 0103 	eor.w	r1, r1, r3
 80004cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004da:	bf06      	itte	eq
 80004dc:	4610      	moveq	r0, r2
 80004de:	4619      	moveq	r1, r3
 80004e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e4:	d019      	beq.n	800051a <__aeabi_dmul+0x24a>
 80004e6:	ea94 0f0c 	teq	r4, ip
 80004ea:	d102      	bne.n	80004f2 <__aeabi_dmul+0x222>
 80004ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004f0:	d113      	bne.n	800051a <__aeabi_dmul+0x24a>
 80004f2:	ea95 0f0c 	teq	r5, ip
 80004f6:	d105      	bne.n	8000504 <__aeabi_dmul+0x234>
 80004f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004fc:	bf1c      	itt	ne
 80004fe:	4610      	movne	r0, r2
 8000500:	4619      	movne	r1, r3
 8000502:	d10a      	bne.n	800051a <__aeabi_dmul+0x24a>
 8000504:	ea81 0103 	eor.w	r1, r1, r3
 8000508:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd70      	pop	{r4, r5, r6, pc}
 800051a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800051e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000522:	bd70      	pop	{r4, r5, r6, pc}

08000524 <__aeabi_drsub>:
 8000524:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000528:	e002      	b.n	8000530 <__adddf3>
 800052a:	bf00      	nop

0800052c <__aeabi_dsub>:
 800052c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000530 <__adddf3>:
 8000530:	b530      	push	{r4, r5, lr}
 8000532:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000536:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800053a:	ea94 0f05 	teq	r4, r5
 800053e:	bf08      	it	eq
 8000540:	ea90 0f02 	teqeq	r0, r2
 8000544:	bf1f      	itttt	ne
 8000546:	ea54 0c00 	orrsne.w	ip, r4, r0
 800054a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800054e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000552:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000556:	f000 80e2 	beq.w	800071e <__adddf3+0x1ee>
 800055a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800055e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000562:	bfb8      	it	lt
 8000564:	426d      	neglt	r5, r5
 8000566:	dd0c      	ble.n	8000582 <__adddf3+0x52>
 8000568:	442c      	add	r4, r5
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	ea82 0000 	eor.w	r0, r2, r0
 8000576:	ea83 0101 	eor.w	r1, r3, r1
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	2d36      	cmp	r5, #54	@ 0x36
 8000584:	bf88      	it	hi
 8000586:	bd30      	pophi	{r4, r5, pc}
 8000588:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800058c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000590:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000594:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000598:	d002      	beq.n	80005a0 <__adddf3+0x70>
 800059a:	4240      	negs	r0, r0
 800059c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80005a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005ac:	d002      	beq.n	80005b4 <__adddf3+0x84>
 80005ae:	4252      	negs	r2, r2
 80005b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b4:	ea94 0f05 	teq	r4, r5
 80005b8:	f000 80a7 	beq.w	800070a <__adddf3+0x1da>
 80005bc:	f1a4 0401 	sub.w	r4, r4, #1
 80005c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005c4:	db0d      	blt.n	80005e2 <__adddf3+0xb2>
 80005c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ca:	fa22 f205 	lsr.w	r2, r2, r5
 80005ce:	1880      	adds	r0, r0, r2
 80005d0:	f141 0100 	adc.w	r1, r1, #0
 80005d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d8:	1880      	adds	r0, r0, r2
 80005da:	fa43 f305 	asr.w	r3, r3, r5
 80005de:	4159      	adcs	r1, r3
 80005e0:	e00e      	b.n	8000600 <__adddf3+0xd0>
 80005e2:	f1a5 0520 	sub.w	r5, r5, #32
 80005e6:	f10e 0e20 	add.w	lr, lr, #32
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005f0:	bf28      	it	cs
 80005f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005f6:	fa43 f305 	asr.w	r3, r3, r5
 80005fa:	18c0      	adds	r0, r0, r3
 80005fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000604:	d507      	bpl.n	8000616 <__adddf3+0xe6>
 8000606:	f04f 0e00 	mov.w	lr, #0
 800060a:	f1dc 0c00 	rsbs	ip, ip, #0
 800060e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000612:	eb6e 0101 	sbc.w	r1, lr, r1
 8000616:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800061a:	d31b      	bcc.n	8000654 <__adddf3+0x124>
 800061c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000620:	d30c      	bcc.n	800063c <__adddf3+0x10c>
 8000622:	0849      	lsrs	r1, r1, #1
 8000624:	ea5f 0030 	movs.w	r0, r0, rrx
 8000628:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800062c:	f104 0401 	add.w	r4, r4, #1
 8000630:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000634:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000638:	f080 809a 	bcs.w	8000770 <__adddf3+0x240>
 800063c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	ea41 0105 	orr.w	r1, r1, r5
 8000652:	bd30      	pop	{r4, r5, pc}
 8000654:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000658:	4140      	adcs	r0, r0
 800065a:	eb41 0101 	adc.w	r1, r1, r1
 800065e:	3c01      	subs	r4, #1
 8000660:	bf28      	it	cs
 8000662:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000666:	d2e9      	bcs.n	800063c <__adddf3+0x10c>
 8000668:	f091 0f00 	teq	r1, #0
 800066c:	bf04      	itt	eq
 800066e:	4601      	moveq	r1, r0
 8000670:	2000      	moveq	r0, #0
 8000672:	fab1 f381 	clz	r3, r1
 8000676:	bf08      	it	eq
 8000678:	3320      	addeq	r3, #32
 800067a:	f1a3 030b 	sub.w	r3, r3, #11
 800067e:	f1b3 0220 	subs.w	r2, r3, #32
 8000682:	da0c      	bge.n	800069e <__adddf3+0x16e>
 8000684:	320c      	adds	r2, #12
 8000686:	dd08      	ble.n	800069a <__adddf3+0x16a>
 8000688:	f102 0c14 	add.w	ip, r2, #20
 800068c:	f1c2 020c 	rsb	r2, r2, #12
 8000690:	fa01 f00c 	lsl.w	r0, r1, ip
 8000694:	fa21 f102 	lsr.w	r1, r1, r2
 8000698:	e00c      	b.n	80006b4 <__adddf3+0x184>
 800069a:	f102 0214 	add.w	r2, r2, #20
 800069e:	bfd8      	it	le
 80006a0:	f1c2 0c20 	rsble	ip, r2, #32
 80006a4:	fa01 f102 	lsl.w	r1, r1, r2
 80006a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006ac:	bfdc      	itt	le
 80006ae:	ea41 010c 	orrle.w	r1, r1, ip
 80006b2:	4090      	lslle	r0, r2
 80006b4:	1ae4      	subs	r4, r4, r3
 80006b6:	bfa2      	ittt	ge
 80006b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006bc:	4329      	orrge	r1, r5
 80006be:	bd30      	popge	{r4, r5, pc}
 80006c0:	ea6f 0404 	mvn.w	r4, r4
 80006c4:	3c1f      	subs	r4, #31
 80006c6:	da1c      	bge.n	8000702 <__adddf3+0x1d2>
 80006c8:	340c      	adds	r4, #12
 80006ca:	dc0e      	bgt.n	80006ea <__adddf3+0x1ba>
 80006cc:	f104 0414 	add.w	r4, r4, #20
 80006d0:	f1c4 0220 	rsb	r2, r4, #32
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f302 	lsl.w	r3, r1, r2
 80006dc:	ea40 0003 	orr.w	r0, r0, r3
 80006e0:	fa21 f304 	lsr.w	r3, r1, r4
 80006e4:	ea45 0103 	orr.w	r1, r5, r3
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f1c4 040c 	rsb	r4, r4, #12
 80006ee:	f1c4 0220 	rsb	r2, r4, #32
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 f304 	lsl.w	r3, r1, r4
 80006fa:	ea40 0003 	orr.w	r0, r0, r3
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	fa21 f004 	lsr.w	r0, r1, r4
 8000706:	4629      	mov	r1, r5
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f094 0f00 	teq	r4, #0
 800070e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000712:	bf06      	itte	eq
 8000714:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000718:	3401      	addeq	r4, #1
 800071a:	3d01      	subne	r5, #1
 800071c:	e74e      	b.n	80005bc <__adddf3+0x8c>
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf18      	it	ne
 8000724:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000728:	d029      	beq.n	800077e <__adddf3+0x24e>
 800072a:	ea94 0f05 	teq	r4, r5
 800072e:	bf08      	it	eq
 8000730:	ea90 0f02 	teqeq	r0, r2
 8000734:	d005      	beq.n	8000742 <__adddf3+0x212>
 8000736:	ea54 0c00 	orrs.w	ip, r4, r0
 800073a:	bf04      	itt	eq
 800073c:	4619      	moveq	r1, r3
 800073e:	4610      	moveq	r0, r2
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea91 0f03 	teq	r1, r3
 8000746:	bf1e      	ittt	ne
 8000748:	2100      	movne	r1, #0
 800074a:	2000      	movne	r0, #0
 800074c:	bd30      	popne	{r4, r5, pc}
 800074e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000752:	d105      	bne.n	8000760 <__adddf3+0x230>
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	4149      	adcs	r1, r1
 8000758:	bf28      	it	cs
 800075a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800075e:	bd30      	pop	{r4, r5, pc}
 8000760:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000764:	bf3c      	itt	cc
 8000766:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800076a:	bd30      	popcc	{r4, r5, pc}
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000774:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000782:	bf1a      	itte	ne
 8000784:	4619      	movne	r1, r3
 8000786:	4610      	movne	r0, r2
 8000788:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800078c:	bf1c      	itt	ne
 800078e:	460b      	movne	r3, r1
 8000790:	4602      	movne	r2, r0
 8000792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000796:	bf06      	itte	eq
 8000798:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800079c:	ea91 0f03 	teqeq	r1, r3
 80007a0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80007a4:	bd30      	pop	{r4, r5, pc}
 80007a6:	bf00      	nop

080007a8 <__aeabi_ui2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f04f 0500 	mov.w	r5, #0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e750      	b.n	8000668 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_i2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007dc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	f04f 0100 	mov.w	r1, #0
 80007e8:	e73e      	b.n	8000668 <__adddf3+0x138>
 80007ea:	bf00      	nop

080007ec <__aeabi_f2d>:
 80007ec:	0042      	lsls	r2, r0, #1
 80007ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007fa:	bf1f      	itttt	ne
 80007fc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000800:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000804:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000808:	4770      	bxne	lr
 800080a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800080e:	bf08      	it	eq
 8000810:	4770      	bxeq	lr
 8000812:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000816:	bf04      	itt	eq
 8000818:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800081c:	4770      	bxeq	lr
 800081e:	b530      	push	{r4, r5, lr}
 8000820:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000824:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	e71c      	b.n	8000668 <__adddf3+0x138>
 800082e:	bf00      	nop

08000830 <__aeabi_ul2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f04f 0500 	mov.w	r5, #0
 800083e:	e00a      	b.n	8000856 <__aeabi_l2d+0x16>

08000840 <__aeabi_l2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800084e:	d502      	bpl.n	8000856 <__aeabi_l2d+0x16>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800085a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800085e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000862:	f43f aed8 	beq.w	8000616 <__adddf3+0xe6>
 8000866:	f04f 0203 	mov.w	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000876:	bf18      	it	ne
 8000878:	3203      	addne	r2, #3
 800087a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	fa00 fc03 	lsl.w	ip, r0, r3
 8000886:	fa20 f002 	lsr.w	r0, r0, r2
 800088a:	fa01 fe03 	lsl.w	lr, r1, r3
 800088e:	ea40 000e 	orr.w	r0, r0, lr
 8000892:	fa21 f102 	lsr.w	r1, r1, r2
 8000896:	4414      	add	r4, r2
 8000898:	e6bd      	b.n	8000616 <__adddf3+0xe6>
 800089a:	bf00      	nop

0800089c <__aeabi_d2uiz>:
 800089c:	004a      	lsls	r2, r1, #1
 800089e:	d211      	bcs.n	80008c4 <__aeabi_d2uiz+0x28>
 80008a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008a4:	d211      	bcs.n	80008ca <__aeabi_d2uiz+0x2e>
 80008a6:	d50d      	bpl.n	80008c4 <__aeabi_d2uiz+0x28>
 80008a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b0:	d40e      	bmi.n	80008d0 <__aeabi_d2uiz+0x34>
 80008b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008be:	fa23 f002 	lsr.w	r0, r3, r2
 80008c2:	4770      	bx	lr
 80008c4:	f04f 0000 	mov.w	r0, #0
 80008c8:	4770      	bx	lr
 80008ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ce:	d102      	bne.n	80008d6 <__aeabi_d2uiz+0x3a>
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	4770      	bx	lr
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	4770      	bx	lr

080008dc <__aeabi_d2f>:
 80008dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008e4:	bf24      	itt	cs
 80008e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008ee:	d90d      	bls.n	800090c <__aeabi_d2f+0x30>
 80008f0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008fc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000900:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000904:	bf08      	it	eq
 8000906:	f020 0001 	biceq.w	r0, r0, #1
 800090a:	4770      	bx	lr
 800090c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000910:	d121      	bne.n	8000956 <__aeabi_d2f+0x7a>
 8000912:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000916:	bfbc      	itt	lt
 8000918:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800091c:	4770      	bxlt	lr
 800091e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000922:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000926:	f1c2 0218 	rsb	r2, r2, #24
 800092a:	f1c2 0c20 	rsb	ip, r2, #32
 800092e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000932:	fa20 f002 	lsr.w	r0, r0, r2
 8000936:	bf18      	it	ne
 8000938:	f040 0001 	orrne.w	r0, r0, #1
 800093c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000940:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000944:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000948:	ea40 000c 	orr.w	r0, r0, ip
 800094c:	fa23 f302 	lsr.w	r3, r3, r2
 8000950:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000954:	e7cc      	b.n	80008f0 <__aeabi_d2f+0x14>
 8000956:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800095a:	d107      	bne.n	800096c <__aeabi_d2f+0x90>
 800095c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000960:	bf1e      	ittt	ne
 8000962:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000966:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800096a:	4770      	bxne	lr
 800096c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000970:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000974:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop

0800097c <__aeabi_uldivmod>:
 800097c:	b953      	cbnz	r3, 8000994 <__aeabi_uldivmod+0x18>
 800097e:	b94a      	cbnz	r2, 8000994 <__aeabi_uldivmod+0x18>
 8000980:	2900      	cmp	r1, #0
 8000982:	bf08      	it	eq
 8000984:	2800      	cmpeq	r0, #0
 8000986:	bf1c      	itt	ne
 8000988:	f04f 31ff 	movne.w	r1, #4294967295
 800098c:	f04f 30ff 	movne.w	r0, #4294967295
 8000990:	f000 b96a 	b.w	8000c68 <__aeabi_idiv0>
 8000994:	f1ad 0c08 	sub.w	ip, sp, #8
 8000998:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800099c:	f000 f806 	bl	80009ac <__udivmoddi4>
 80009a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009a8:	b004      	add	sp, #16
 80009aa:	4770      	bx	lr

080009ac <__udivmoddi4>:
 80009ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009b0:	9d08      	ldr	r5, [sp, #32]
 80009b2:	460c      	mov	r4, r1
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d14e      	bne.n	8000a56 <__udivmoddi4+0xaa>
 80009b8:	4694      	mov	ip, r2
 80009ba:	458c      	cmp	ip, r1
 80009bc:	4686      	mov	lr, r0
 80009be:	fab2 f282 	clz	r2, r2
 80009c2:	d962      	bls.n	8000a8a <__udivmoddi4+0xde>
 80009c4:	b14a      	cbz	r2, 80009da <__udivmoddi4+0x2e>
 80009c6:	f1c2 0320 	rsb	r3, r2, #32
 80009ca:	4091      	lsls	r1, r2
 80009cc:	fa20 f303 	lsr.w	r3, r0, r3
 80009d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80009d4:	4319      	orrs	r1, r3
 80009d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80009da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009de:	fa1f f68c 	uxth.w	r6, ip
 80009e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80009e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009ea:	fb07 1114 	mls	r1, r7, r4, r1
 80009ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009f2:	fb04 f106 	mul.w	r1, r4, r6
 80009f6:	4299      	cmp	r1, r3
 80009f8:	d90a      	bls.n	8000a10 <__udivmoddi4+0x64>
 80009fa:	eb1c 0303 	adds.w	r3, ip, r3
 80009fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a02:	f080 8112 	bcs.w	8000c2a <__udivmoddi4+0x27e>
 8000a06:	4299      	cmp	r1, r3
 8000a08:	f240 810f 	bls.w	8000c2a <__udivmoddi4+0x27e>
 8000a0c:	3c02      	subs	r4, #2
 8000a0e:	4463      	add	r3, ip
 8000a10:	1a59      	subs	r1, r3, r1
 8000a12:	fa1f f38e 	uxth.w	r3, lr
 8000a16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a22:	fb00 f606 	mul.w	r6, r0, r6
 8000a26:	429e      	cmp	r6, r3
 8000a28:	d90a      	bls.n	8000a40 <__udivmoddi4+0x94>
 8000a2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a32:	f080 80fc 	bcs.w	8000c2e <__udivmoddi4+0x282>
 8000a36:	429e      	cmp	r6, r3
 8000a38:	f240 80f9 	bls.w	8000c2e <__udivmoddi4+0x282>
 8000a3c:	4463      	add	r3, ip
 8000a3e:	3802      	subs	r0, #2
 8000a40:	1b9b      	subs	r3, r3, r6
 8000a42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a46:	2100      	movs	r1, #0
 8000a48:	b11d      	cbz	r5, 8000a52 <__udivmoddi4+0xa6>
 8000a4a:	40d3      	lsrs	r3, r2
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d905      	bls.n	8000a66 <__udivmoddi4+0xba>
 8000a5a:	b10d      	cbz	r5, 8000a60 <__udivmoddi4+0xb4>
 8000a5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a60:	2100      	movs	r1, #0
 8000a62:	4608      	mov	r0, r1
 8000a64:	e7f5      	b.n	8000a52 <__udivmoddi4+0xa6>
 8000a66:	fab3 f183 	clz	r1, r3
 8000a6a:	2900      	cmp	r1, #0
 8000a6c:	d146      	bne.n	8000afc <__udivmoddi4+0x150>
 8000a6e:	42a3      	cmp	r3, r4
 8000a70:	d302      	bcc.n	8000a78 <__udivmoddi4+0xcc>
 8000a72:	4290      	cmp	r0, r2
 8000a74:	f0c0 80f0 	bcc.w	8000c58 <__udivmoddi4+0x2ac>
 8000a78:	1a86      	subs	r6, r0, r2
 8000a7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a7e:	2001      	movs	r0, #1
 8000a80:	2d00      	cmp	r5, #0
 8000a82:	d0e6      	beq.n	8000a52 <__udivmoddi4+0xa6>
 8000a84:	e9c5 6300 	strd	r6, r3, [r5]
 8000a88:	e7e3      	b.n	8000a52 <__udivmoddi4+0xa6>
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	f040 8090 	bne.w	8000bb0 <__udivmoddi4+0x204>
 8000a90:	eba1 040c 	sub.w	r4, r1, ip
 8000a94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a98:	fa1f f78c 	uxth.w	r7, ip
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aa2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aa6:	fb08 4416 	mls	r4, r8, r6, r4
 8000aaa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aae:	fb07 f006 	mul.w	r0, r7, r6
 8000ab2:	4298      	cmp	r0, r3
 8000ab4:	d908      	bls.n	8000ac8 <__udivmoddi4+0x11c>
 8000ab6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000abe:	d202      	bcs.n	8000ac6 <__udivmoddi4+0x11a>
 8000ac0:	4298      	cmp	r0, r3
 8000ac2:	f200 80cd 	bhi.w	8000c60 <__udivmoddi4+0x2b4>
 8000ac6:	4626      	mov	r6, r4
 8000ac8:	1a1c      	subs	r4, r3, r0
 8000aca:	fa1f f38e 	uxth.w	r3, lr
 8000ace:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ad2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ad6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ada:	fb00 f707 	mul.w	r7, r0, r7
 8000ade:	429f      	cmp	r7, r3
 8000ae0:	d908      	bls.n	8000af4 <__udivmoddi4+0x148>
 8000ae2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aea:	d202      	bcs.n	8000af2 <__udivmoddi4+0x146>
 8000aec:	429f      	cmp	r7, r3
 8000aee:	f200 80b0 	bhi.w	8000c52 <__udivmoddi4+0x2a6>
 8000af2:	4620      	mov	r0, r4
 8000af4:	1bdb      	subs	r3, r3, r7
 8000af6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000afa:	e7a5      	b.n	8000a48 <__udivmoddi4+0x9c>
 8000afc:	f1c1 0620 	rsb	r6, r1, #32
 8000b00:	408b      	lsls	r3, r1
 8000b02:	fa22 f706 	lsr.w	r7, r2, r6
 8000b06:	431f      	orrs	r7, r3
 8000b08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b10:	ea43 030c 	orr.w	r3, r3, ip
 8000b14:	40f4      	lsrs	r4, r6
 8000b16:	fa00 f801 	lsl.w	r8, r0, r1
 8000b1a:	0c38      	lsrs	r0, r7, #16
 8000b1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b20:	fbb4 fef0 	udiv	lr, r4, r0
 8000b24:	fa1f fc87 	uxth.w	ip, r7
 8000b28:	fb00 441e 	mls	r4, r0, lr, r4
 8000b2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b30:	fb0e f90c 	mul.w	r9, lr, ip
 8000b34:	45a1      	cmp	r9, r4
 8000b36:	fa02 f201 	lsl.w	r2, r2, r1
 8000b3a:	d90a      	bls.n	8000b52 <__udivmoddi4+0x1a6>
 8000b3c:	193c      	adds	r4, r7, r4
 8000b3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b42:	f080 8084 	bcs.w	8000c4e <__udivmoddi4+0x2a2>
 8000b46:	45a1      	cmp	r9, r4
 8000b48:	f240 8081 	bls.w	8000c4e <__udivmoddi4+0x2a2>
 8000b4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b50:	443c      	add	r4, r7
 8000b52:	eba4 0409 	sub.w	r4, r4, r9
 8000b56:	fa1f f983 	uxth.w	r9, r3
 8000b5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000b62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b6a:	45a4      	cmp	ip, r4
 8000b6c:	d907      	bls.n	8000b7e <__udivmoddi4+0x1d2>
 8000b6e:	193c      	adds	r4, r7, r4
 8000b70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b74:	d267      	bcs.n	8000c46 <__udivmoddi4+0x29a>
 8000b76:	45a4      	cmp	ip, r4
 8000b78:	d965      	bls.n	8000c46 <__udivmoddi4+0x29a>
 8000b7a:	3b02      	subs	r3, #2
 8000b7c:	443c      	add	r4, r7
 8000b7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b82:	fba0 9302 	umull	r9, r3, r0, r2
 8000b86:	eba4 040c 	sub.w	r4, r4, ip
 8000b8a:	429c      	cmp	r4, r3
 8000b8c:	46ce      	mov	lr, r9
 8000b8e:	469c      	mov	ip, r3
 8000b90:	d351      	bcc.n	8000c36 <__udivmoddi4+0x28a>
 8000b92:	d04e      	beq.n	8000c32 <__udivmoddi4+0x286>
 8000b94:	b155      	cbz	r5, 8000bac <__udivmoddi4+0x200>
 8000b96:	ebb8 030e 	subs.w	r3, r8, lr
 8000b9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000ba2:	40cb      	lsrs	r3, r1
 8000ba4:	431e      	orrs	r6, r3
 8000ba6:	40cc      	lsrs	r4, r1
 8000ba8:	e9c5 6400 	strd	r6, r4, [r5]
 8000bac:	2100      	movs	r1, #0
 8000bae:	e750      	b.n	8000a52 <__udivmoddi4+0xa6>
 8000bb0:	f1c2 0320 	rsb	r3, r2, #32
 8000bb4:	fa20 f103 	lsr.w	r1, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	430c      	orrs	r4, r1
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bcc:	fa1f f78c 	uxth.w	r7, ip
 8000bd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000bd8:	0c23      	lsrs	r3, r4, #16
 8000bda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bde:	fb00 f107 	mul.w	r1, r0, r7
 8000be2:	4299      	cmp	r1, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x24c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bee:	d22c      	bcs.n	8000c4a <__udivmoddi4+0x29e>
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	d92a      	bls.n	8000c4a <__udivmoddi4+0x29e>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a5b      	subs	r3, r3, r1
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c00:	fb08 3311 	mls	r3, r8, r1, r3
 8000c04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c08:	fb01 f307 	mul.w	r3, r1, r7
 8000c0c:	42a3      	cmp	r3, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x276>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c18:	d213      	bcs.n	8000c42 <__udivmoddi4+0x296>
 8000c1a:	42a3      	cmp	r3, r4
 8000c1c:	d911      	bls.n	8000c42 <__udivmoddi4+0x296>
 8000c1e:	3902      	subs	r1, #2
 8000c20:	4464      	add	r4, ip
 8000c22:	1ae4      	subs	r4, r4, r3
 8000c24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c28:	e739      	b.n	8000a9e <__udivmoddi4+0xf2>
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	e6f0      	b.n	8000a10 <__udivmoddi4+0x64>
 8000c2e:	4608      	mov	r0, r1
 8000c30:	e706      	b.n	8000a40 <__udivmoddi4+0x94>
 8000c32:	45c8      	cmp	r8, r9
 8000c34:	d2ae      	bcs.n	8000b94 <__udivmoddi4+0x1e8>
 8000c36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c3e:	3801      	subs	r0, #1
 8000c40:	e7a8      	b.n	8000b94 <__udivmoddi4+0x1e8>
 8000c42:	4631      	mov	r1, r6
 8000c44:	e7ed      	b.n	8000c22 <__udivmoddi4+0x276>
 8000c46:	4603      	mov	r3, r0
 8000c48:	e799      	b.n	8000b7e <__udivmoddi4+0x1d2>
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	e7d4      	b.n	8000bf8 <__udivmoddi4+0x24c>
 8000c4e:	46d6      	mov	lr, sl
 8000c50:	e77f      	b.n	8000b52 <__udivmoddi4+0x1a6>
 8000c52:	4463      	add	r3, ip
 8000c54:	3802      	subs	r0, #2
 8000c56:	e74d      	b.n	8000af4 <__udivmoddi4+0x148>
 8000c58:	4606      	mov	r6, r0
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	e70f      	b.n	8000a80 <__udivmoddi4+0xd4>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	e730      	b.n	8000ac8 <__udivmoddi4+0x11c>
 8000c66:	bf00      	nop

08000c68 <__aeabi_idiv0>:
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
ADC_HandleTypeDef hadc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	@ 0x30
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2220      	movs	r2, #32
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f012 fd6d 	bl	8013764 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c8a:	4b33      	ldr	r3, [pc, #204]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000c8c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c92:	4b31      	ldr	r3, [pc, #196]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000c94:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cac:	4b2a      	ldr	r3, [pc, #168]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb2:	4b29      	ldr	r3, [pc, #164]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cb8:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cbe:	4b26      	ldr	r3, [pc, #152]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000cc4:	4b24      	ldr	r3, [pc, #144]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cca:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000cd2:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000cd4:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000cda:	4b1f      	ldr	r3, [pc, #124]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000cdc:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8000ce0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cea:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cf8:	4817      	ldr	r0, [pc, #92]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000cfa:	f001 ffd9 	bl	8002cb0 <HAL_ADC_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000d04:	f001 fa88 	bl	8002218 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	4811      	ldr	r0, [pc, #68]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000d14:	f004 fa96 	bl	8005244 <HAL_ADCEx_MultiModeConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000d1e:	f001 fa7b 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <MX_ADC1_Init+0xf0>)
 8000d24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d26:	2306      	movs	r3, #6
 8000d28:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d2e:	237f      	movs	r3, #127	@ 0x7f
 8000d30:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d32:	2304      	movs	r3, #4
 8000d34:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4806      	ldr	r0, [pc, #24]	@ (8000d58 <MX_ADC1_Init+0xec>)
 8000d40:	f003 f8a8 	bl	8003e94 <HAL_ADC_ConfigChannel>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000d4a:	f001 fa65 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	3730      	adds	r7, #48	@ 0x30
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200001f4 	.word	0x200001f4
 8000d5c:	04300002 	.word	0x04300002

08000d60 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d66:	463b      	mov	r3, r7
 8000d68:	2220      	movs	r2, #32
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f012 fcf9 	bl	8013764 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d72:	4b2c      	ldr	r3, [pc, #176]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000d74:	4a2c      	ldr	r2, [pc, #176]	@ (8000e28 <MX_ADC2_Init+0xc8>)
 8000d76:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d78:	4b2a      	ldr	r3, [pc, #168]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000d7a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d7e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d80:	4b28      	ldr	r3, [pc, #160]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d86:	4b27      	ldr	r3, [pc, #156]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000d8c:	4b25      	ldr	r3, [pc, #148]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d92:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d98:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000daa:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000db0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000dba:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000dc0:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000dc2:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8000dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000dc8:	4b16      	ldr	r3, [pc, #88]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dde:	4811      	ldr	r0, [pc, #68]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000de0:	f001 ff66 	bl	8002cb0 <HAL_ADC_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000dea:	f001 fa15 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <MX_ADC2_Init+0xcc>)
 8000df0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df2:	2306      	movs	r3, #6
 8000df4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dfa:	237f      	movs	r3, #127	@ 0x7f
 8000dfc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e06:	463b      	mov	r3, r7
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4806      	ldr	r0, [pc, #24]	@ (8000e24 <MX_ADC2_Init+0xc4>)
 8000e0c:	f003 f842 	bl	8003e94 <HAL_ADC_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000e16:	f001 f9ff 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	3720      	adds	r7, #32
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000260 	.word	0x20000260
 8000e28:	50000100 	.word	0x50000100
 8000e2c:	0c900008 	.word	0x0c900008

08000e30 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	@ 0x30
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2220      	movs	r2, #32
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f012 fc8b 	bl	8013764 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e4e:	4b32      	ldr	r3, [pc, #200]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000e50:	4a32      	ldr	r2, [pc, #200]	@ (8000f1c <MX_ADC3_Init+0xec>)
 8000e52:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e54:	4b30      	ldr	r3, [pc, #192]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000e56:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e5a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e62:	4b2d      	ldr	r3, [pc, #180]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000e68:	4b2b      	ldr	r3, [pc, #172]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e74:	4b28      	ldr	r3, [pc, #160]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000e76:	2204      	movs	r2, #4
 8000e78:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e7a:	4b27      	ldr	r3, [pc, #156]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e80:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000e86:	4b24      	ldr	r3, [pc, #144]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000e94:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000e96:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000e9e:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8000ea2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000eba:	4817      	ldr	r0, [pc, #92]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000ebc:	f001 fef8 	bl	8002cb0 <HAL_ADC_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000ec6:	f001 f9a7 	bl	8002218 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4810      	ldr	r0, [pc, #64]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000ed6:	f004 f9b5 	bl	8005244 <HAL_ADCEx_MultiModeConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000ee0:	f001 f99a 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <MX_ADC3_Init+0xf0>)
 8000ee6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ee8:	2306      	movs	r3, #6
 8000eea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef0:	237f      	movs	r3, #127	@ 0x7f
 8000ef2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <MX_ADC3_Init+0xe8>)
 8000f02:	f002 ffc7 	bl	8003e94 <HAL_ADC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 8000f0c:	f001 f984 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	3730      	adds	r7, #48	@ 0x30
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200002cc 	.word	0x200002cc
 8000f1c:	50000400 	.word	0x50000400
 8000f20:	04300002 	.word	0x04300002

08000f24 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f012 fc17 	bl	8013764 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000f36:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000f38:	4a2c      	ldr	r2, [pc, #176]	@ (8000fec <MX_ADC4_Init+0xc8>)
 8000f3a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000f3e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f42:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000f44:	4b28      	ldr	r3, [pc, #160]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4a:	4b27      	ldr	r3, [pc, #156]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000f50:	4b25      	ldr	r3, [pc, #148]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f56:	4b24      	ldr	r3, [pc, #144]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5c:	4b22      	ldr	r3, [pc, #136]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000f5e:	2204      	movs	r2, #4
 8000f60:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000f62:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000f74:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000f7e:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000f84:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000f86:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8000f8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f94:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000fa2:	4811      	ldr	r0, [pc, #68]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000fa4:	f001 fe84 	bl	8002cb0 <HAL_ADC_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_ADC4_Init+0x8e>
  {
    Error_Handler();
 8000fae:	f001 f933 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <MX_ADC4_Init+0xcc>)
 8000fb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fbe:	237f      	movs	r3, #127	@ 0x7f
 8000fc0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4806      	ldr	r0, [pc, #24]	@ (8000fe8 <MX_ADC4_Init+0xc4>)
 8000fd0:	f002 ff60 	bl	8003e94 <HAL_ADC_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC4_Init+0xba>
  {
    Error_Handler();
 8000fda:	f001 f91d 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	3720      	adds	r7, #32
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000338 	.word	0x20000338
 8000fec:	50000500 	.word	0x50000500
 8000ff0:	04300002 	.word	0x04300002

08000ff4 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f012 fbaf 	bl	8013764 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001006:	4b2c      	ldr	r3, [pc, #176]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 8001008:	4a2c      	ldr	r2, [pc, #176]	@ (80010bc <MX_ADC5_Init+0xc8>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800100c:	4b2a      	ldr	r3, [pc, #168]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 800100e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001012:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001014:	4b28      	ldr	r3, [pc, #160]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101a:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001020:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001026:	4b24      	ldr	r3, [pc, #144]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102c:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 800102e:	2204      	movs	r2, #4
 8001030:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001032:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 8001034:	2200      	movs	r2, #0
 8001036:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001038:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 800103a:	2200      	movs	r2, #0
 800103c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800103e:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 8001040:	2201      	movs	r2, #1
 8001042:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001044:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800104c:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 800104e:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8001052:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001054:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 8001056:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800105a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001064:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 8001066:	2200      	movs	r2, #0
 8001068:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001072:	4811      	ldr	r0, [pc, #68]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 8001074:	f001 fe1c 	bl	8002cb0 <HAL_ADC_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC5_Init+0x8e>
  {
    Error_Handler();
 800107e:	f001 f8cb 	bl	8002218 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <MX_ADC5_Init+0xcc>)
 8001084:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001086:	2306      	movs	r3, #6
 8001088:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800108e:	237f      	movs	r3, #127	@ 0x7f
 8001090:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001092:	2304      	movs	r3, #4
 8001094:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	4619      	mov	r1, r3
 800109e:	4806      	ldr	r0, [pc, #24]	@ (80010b8 <MX_ADC5_Init+0xc4>)
 80010a0:	f002 fef8 	bl	8003e94 <HAL_ADC_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_ADC5_Init+0xba>
  {
    Error_Handler();
 80010aa:	f001 f8b5 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200003a4 	.word	0x200003a4
 80010bc:	50000600 	.word	0x50000600
 80010c0:	19200040 	.word	0x19200040

080010c4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0a6      	sub	sp, #152	@ 0x98
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010e0:	2254      	movs	r2, #84	@ 0x54
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f012 fb3d 	bl	8013764 <memset>
  if(adcHandle->Instance==ADC1)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010f2:	d149      	bne.n	8001188 <HAL_ADC_MspInit+0xc4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010f8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010fa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010fe:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001100:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001104:	4618      	mov	r0, r3
 8001106:	f009 fb89 	bl	800a81c <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001110:	f001 f882 	bl	8002218 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001114:	4b92      	ldr	r3, [pc, #584]	@ (8001360 <HAL_ADC_MspInit+0x29c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	4a91      	ldr	r2, [pc, #580]	@ (8001360 <HAL_ADC_MspInit+0x29c>)
 800111c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800111e:	4b90      	ldr	r3, [pc, #576]	@ (8001360 <HAL_ADC_MspInit+0x29c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10b      	bne.n	800113e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001126:	4b8f      	ldr	r3, [pc, #572]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	4a8e      	ldr	r2, [pc, #568]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 800112c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001130:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001132:	4b8c      	ldr	r3, [pc, #560]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800113c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b89      	ldr	r3, [pc, #548]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	4a88      	ldr	r2, [pc, #544]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114a:	4b86      	ldr	r3, [pc, #536]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001156:	2301      	movs	r3, #1
 8001158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800115c:	2303      	movs	r3, #3
 800115e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800116c:	4619      	mov	r1, r3
 800116e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001172:	f004 fee1 	bl	8005f38 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2012      	movs	r0, #18
 800117c:	f004 faf0 	bl	8005760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001180:	2012      	movs	r0, #18
 8001182:	f004 fb17 	bl	80057b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8001186:	e149      	b.n	800141c <HAL_ADC_MspInit+0x358>
  else if(adcHandle->Instance==ADC2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a76      	ldr	r2, [pc, #472]	@ (8001368 <HAL_ADC_MspInit+0x2a4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d149      	bne.n	8001226 <HAL_ADC_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001196:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001198:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800119c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a2:	4618      	mov	r0, r3
 80011a4:	f009 fb3a 	bl	800a81c <HAL_RCCEx_PeriphCLKConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_ADC_MspInit+0xee>
      Error_Handler();
 80011ae:	f001 f833 	bl	8002218 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011b2:	4b6b      	ldr	r3, [pc, #428]	@ (8001360 <HAL_ADC_MspInit+0x29c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	4a69      	ldr	r2, [pc, #420]	@ (8001360 <HAL_ADC_MspInit+0x29c>)
 80011ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011bc:	4b68      	ldr	r3, [pc, #416]	@ (8001360 <HAL_ADC_MspInit+0x29c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d10b      	bne.n	80011dc <HAL_ADC_MspInit+0x118>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011c4:	4b67      	ldr	r3, [pc, #412]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c8:	4a66      	ldr	r2, [pc, #408]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 80011ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d0:	4b64      	ldr	r3, [pc, #400]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80011da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	4b61      	ldr	r3, [pc, #388]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e0:	4a60      	ldr	r2, [pc, #384]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	623b      	str	r3, [r7, #32]
 80011f2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011f4:	2340      	movs	r3, #64	@ 0x40
 80011f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011fa:	2303      	movs	r3, #3
 80011fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800120a:	4619      	mov	r1, r3
 800120c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001210:	f004 fe92 	bl	8005f38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2100      	movs	r1, #0
 8001218:	2012      	movs	r0, #18
 800121a:	f004 faa1 	bl	8005760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800121e:	2012      	movs	r0, #18
 8001220:	f004 fac8 	bl	80057b4 <HAL_NVIC_EnableIRQ>
}
 8001224:	e0fa      	b.n	800141c <HAL_ADC_MspInit+0x358>
  else if(adcHandle->Instance==ADC3)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a50      	ldr	r2, [pc, #320]	@ (800136c <HAL_ADC_MspInit+0x2a8>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d148      	bne.n	80012c2 <HAL_ADC_MspInit+0x1fe>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001230:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001234:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001236:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800123a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001240:	4618      	mov	r0, r3
 8001242:	f009 faeb 	bl	800a81c <HAL_RCCEx_PeriphCLKConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_ADC_MspInit+0x18c>
      Error_Handler();
 800124c:	f000 ffe4 	bl	8002218 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001250:	4b47      	ldr	r3, [pc, #284]	@ (8001370 <HAL_ADC_MspInit+0x2ac>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	4a46      	ldr	r2, [pc, #280]	@ (8001370 <HAL_ADC_MspInit+0x2ac>)
 8001258:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800125a:	4b45      	ldr	r3, [pc, #276]	@ (8001370 <HAL_ADC_MspInit+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d10b      	bne.n	800127a <HAL_ADC_MspInit+0x1b6>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001262:	4b40      	ldr	r3, [pc, #256]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	4a3f      	ldr	r2, [pc, #252]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126e:	4b3d      	ldr	r3, [pc, #244]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001276:	61fb      	str	r3, [r7, #28]
 8001278:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b3a      	ldr	r3, [pc, #232]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	4a39      	ldr	r2, [pc, #228]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001286:	4b37      	ldr	r3, [pc, #220]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001298:	2303      	movs	r3, #3
 800129a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80012a8:	4619      	mov	r1, r3
 80012aa:	4832      	ldr	r0, [pc, #200]	@ (8001374 <HAL_ADC_MspInit+0x2b0>)
 80012ac:	f004 fe44 	bl	8005f38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	202f      	movs	r0, #47	@ 0x2f
 80012b6:	f004 fa53 	bl	8005760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80012ba:	202f      	movs	r0, #47	@ 0x2f
 80012bc:	f004 fa7a 	bl	80057b4 <HAL_NVIC_EnableIRQ>
}
 80012c0:	e0ac      	b.n	800141c <HAL_ADC_MspInit+0x358>
  else if(adcHandle->Instance==ADC4)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001378 <HAL_ADC_MspInit+0x2b4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d159      	bne.n	8001380 <HAL_ADC_MspInit+0x2bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80012cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012d0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80012d2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80012d6:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012dc:	4618      	mov	r0, r3
 80012de:	f009 fa9d 	bl	800a81c <HAL_RCCEx_PeriphCLKConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_ADC_MspInit+0x228>
      Error_Handler();
 80012e8:	f000 ff96 	bl	8002218 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80012ec:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <HAL_ADC_MspInit+0x2ac>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001370 <HAL_ADC_MspInit+0x2ac>)
 80012f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80012f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <HAL_ADC_MspInit+0x2ac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d10b      	bne.n	8001316 <HAL_ADC_MspInit+0x252>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80012fe:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	4a18      	ldr	r2, [pc, #96]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130a:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001316:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	4a12      	ldr	r2, [pc, #72]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 800131c:	f043 0310 	orr.w	r3, r3, #16
 8001320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001322:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <HAL_ADC_MspInit+0x2a0>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800132e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001332:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001336:	2303      	movs	r3, #3
 8001338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001342:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001346:	4619      	mov	r1, r3
 8001348:	480c      	ldr	r0, [pc, #48]	@ (800137c <HAL_ADC_MspInit+0x2b8>)
 800134a:	f004 fdf5 	bl	8005f38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	203d      	movs	r0, #61	@ 0x3d
 8001354:	f004 fa04 	bl	8005760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8001358:	203d      	movs	r0, #61	@ 0x3d
 800135a:	f004 fa2b 	bl	80057b4 <HAL_NVIC_EnableIRQ>
}
 800135e:	e05d      	b.n	800141c <HAL_ADC_MspInit+0x358>
 8001360:	20000410 	.word	0x20000410
 8001364:	40021000 	.word	0x40021000
 8001368:	50000100 	.word	0x50000100
 800136c:	50000400 	.word	0x50000400
 8001370:	20000414 	.word	0x20000414
 8001374:	48000400 	.word	0x48000400
 8001378:	50000500 	.word	0x50000500
 800137c:	48001000 	.word	0x48001000
  else if(adcHandle->Instance==ADC5)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a27      	ldr	r2, [pc, #156]	@ (8001424 <HAL_ADC_MspInit+0x360>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d148      	bne.n	800141c <HAL_ADC_MspInit+0x358>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800138a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800138e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001390:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001394:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001396:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800139a:	4618      	mov	r0, r3
 800139c:	f009 fa3e 	bl	800a81c <HAL_RCCEx_PeriphCLKConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_ADC_MspInit+0x2e6>
      Error_Handler();
 80013a6:	f000 ff37 	bl	8002218 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <HAL_ADC_MspInit+0x364>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001428 <HAL_ADC_MspInit+0x364>)
 80013b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80013b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <HAL_ADC_MspInit+0x364>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d10b      	bne.n	80013d4 <HAL_ADC_MspInit+0x310>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <HAL_ADC_MspInit+0x368>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c0:	4a1a      	ldr	r2, [pc, #104]	@ (800142c <HAL_ADC_MspInit+0x368>)
 80013c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c8:	4b18      	ldr	r3, [pc, #96]	@ (800142c <HAL_ADC_MspInit+0x368>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d4:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_ADC_MspInit+0x368>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	4a14      	ldr	r2, [pc, #80]	@ (800142c <HAL_ADC_MspInit+0x368>)
 80013da:	f043 0310 	orr.w	r3, r3, #16
 80013de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <HAL_ADC_MspInit+0x368>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f4:	2303      	movs	r3, #3
 80013f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001400:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001404:	4619      	mov	r1, r3
 8001406:	480a      	ldr	r0, [pc, #40]	@ (8001430 <HAL_ADC_MspInit+0x36c>)
 8001408:	f004 fd96 	bl	8005f38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC5_IRQn, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	203e      	movs	r0, #62	@ 0x3e
 8001412:	f004 f9a5 	bl	8005760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
 8001416:	203e      	movs	r0, #62	@ 0x3e
 8001418:	f004 f9cc 	bl	80057b4 <HAL_NVIC_EnableIRQ>
}
 800141c:	bf00      	nop
 800141e:	3798      	adds	r7, #152	@ 0x98
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	50000600 	.word	0x50000600
 8001428:	20000414 	.word	0x20000414
 800142c:	40021000 	.word	0x40021000
 8001430:	48001000 	.word	0x48001000

08001434 <initDbleBuf>:
#include "stdlib.h"
#include "buffer.h"

// Initialize Double Buffer
int32_t *initDbleBuf (dbleBuf_t *buffer, uint32_t size)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
    buffer->windex = 0;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
    buffer->rindex = size;
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	609a      	str	r2, [r3, #8]
    buffer->size = size;
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	601a      	str	r2, [r3, #0]
    buffer->data = (int32_t *) calloc (2 * size, sizeof(int32_t));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2104      	movs	r1, #4
 8001456:	4618      	mov	r0, r3
 8001458:	f012 f886 	bl	8013568 <calloc>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	60da      	str	r2, [r3, #12]
    return buffer->data;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <writeDbleBuf>:

// Write to the Double Buffer
void writeDbleBuf (dbleBuf_t *buffer, int32_t entry)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
    buffer->data[buffer->windex] = entry;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	601a      	str	r2, [r3, #0]
    buffer->windex++;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	605a      	str	r2, [r3, #4]
    if (buffer->windex >= 2 * buffer->size) {
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	429a      	cmp	r2, r3
 80014a0:	db02      	blt.n	80014a8 <writeDbleBuf+0x38>
       buffer->windex = 0;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	605a      	str	r2, [r3, #4]
    }
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <readDbleBuf>:

// Read Double Buffer
int readDbleBuf (dbleBuf_t *buffer, int32_t *array)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
    int overrun = (buffer->windex >= buffer->rindex) && !(buffer->windex >= buffer->rindex + buffer->size); // Detect data overrun
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	db0a      	blt.n	80014e0 <readDbleBuf+0x2c>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6899      	ldr	r1, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	440b      	add	r3, r1
 80014d8:	429a      	cmp	r2, r3
 80014da:	da01      	bge.n	80014e0 <readDbleBuf+0x2c>
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <readDbleBuf+0x2e>
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
    int i;
    for (i = 0; i < buffer->size; i++, (buffer->rindex)++) { // Read the data in one buffer into array
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	e013      	b.n	8001512 <readDbleBuf+0x5e>
        array[i] = buffer->data[buffer->rindex];
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	441a      	add	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	6839      	ldr	r1, [r7, #0]
 80014fc:	440b      	add	r3, r1
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	601a      	str	r2, [r3, #0]
    for (i = 0; i < buffer->size; i++, (buffer->rindex)++) { // Read the data in one buffer into array
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	3301      	adds	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbe6      	blt.n	80014ea <readDbleBuf+0x36>
    }
    if (buffer->rindex >= 2*buffer->size) {// Circular buffering
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	429a      	cmp	r2, r3
 8001528:	db02      	blt.n	8001530 <readDbleBuf+0x7c>
        buffer->rindex = 0;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
    }
    return overrun;
 8001530:	68bb      	ldr	r3, [r7, #8]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08c      	sub	sp, #48	@ 0x30
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001546:	463b      	mov	r3, r7
 8001548:	2230      	movs	r2, #48	@ 0x30
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f012 f909 	bl	8013764 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001552:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <MX_DAC1_Init+0x6c>)
 8001554:	4a16      	ldr	r2, [pc, #88]	@ (80015b0 <MX_DAC1_Init+0x70>)
 8001556:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001558:	4814      	ldr	r0, [pc, #80]	@ (80015ac <MX_DAC1_Init+0x6c>)
 800155a:	f004 f94f 	bl	80057fc <HAL_DAC_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001564:	f000 fe58 	bl	8002218 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001568:	2302      	movs	r3, #2
 800156a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001584:	2301      	movs	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	@ (80015ac <MX_DAC1_Init+0x6c>)
 8001594:	f004 f978 	bl	8005888 <HAL_DAC_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800159e:	f000 fe3b 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	3730      	adds	r7, #48	@ 0x30
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000418 	.word	0x20000418
 80015b0:	50000800 	.word	0x50000800

080015b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a15      	ldr	r2, [pc, #84]	@ (8001628 <HAL_DAC_MspInit+0x74>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d124      	bne.n	8001620 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <HAL_DAC_MspInit+0x78>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015da:	4a14      	ldr	r2, [pc, #80]	@ (800162c <HAL_DAC_MspInit+0x78>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e2:	4b12      	ldr	r3, [pc, #72]	@ (800162c <HAL_DAC_MspInit+0x78>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <HAL_DAC_MspInit+0x78>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	4a0e      	ldr	r2, [pc, #56]	@ (800162c <HAL_DAC_MspInit+0x78>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fa:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <HAL_DAC_MspInit+0x78>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001606:	2310      	movs	r3, #16
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160a:	2303      	movs	r3, #3
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800161c:	f004 fc8c 	bl	8005f38 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	@ 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	50000800 	.word	0x50000800
 800162c:	40021000 	.word	0x40021000

08001630 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	@ 0x30
 8001634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001646:	4b96      	ldr	r3, [pc, #600]	@ (80018a0 <MX_GPIO_Init+0x270>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	4a95      	ldr	r2, [pc, #596]	@ (80018a0 <MX_GPIO_Init+0x270>)
 800164c:	f043 0310 	orr.w	r3, r3, #16
 8001650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001652:	4b93      	ldr	r3, [pc, #588]	@ (80018a0 <MX_GPIO_Init+0x270>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165e:	4b90      	ldr	r3, [pc, #576]	@ (80018a0 <MX_GPIO_Init+0x270>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	4a8f      	ldr	r2, [pc, #572]	@ (80018a0 <MX_GPIO_Init+0x270>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166a:	4b8d      	ldr	r3, [pc, #564]	@ (80018a0 <MX_GPIO_Init+0x270>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001676:	4b8a      	ldr	r3, [pc, #552]	@ (80018a0 <MX_GPIO_Init+0x270>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167a:	4a89      	ldr	r2, [pc, #548]	@ (80018a0 <MX_GPIO_Init+0x270>)
 800167c:	f043 0320 	orr.w	r3, r3, #32
 8001680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001682:	4b87      	ldr	r3, [pc, #540]	@ (80018a0 <MX_GPIO_Init+0x270>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800168e:	4b84      	ldr	r3, [pc, #528]	@ (80018a0 <MX_GPIO_Init+0x270>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	4a83      	ldr	r2, [pc, #524]	@ (80018a0 <MX_GPIO_Init+0x270>)
 8001694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169a:	4b81      	ldr	r3, [pc, #516]	@ (80018a0 <MX_GPIO_Init+0x270>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	4b7e      	ldr	r3, [pc, #504]	@ (80018a0 <MX_GPIO_Init+0x270>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016aa:	4a7d      	ldr	r2, [pc, #500]	@ (80018a0 <MX_GPIO_Init+0x270>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b2:	4b7b      	ldr	r3, [pc, #492]	@ (80018a0 <MX_GPIO_Init+0x270>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	4b78      	ldr	r3, [pc, #480]	@ (80018a0 <MX_GPIO_Init+0x270>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c2:	4a77      	ldr	r2, [pc, #476]	@ (80018a0 <MX_GPIO_Init+0x270>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ca:	4b75      	ldr	r3, [pc, #468]	@ (80018a0 <MX_GPIO_Init+0x270>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d6:	4b72      	ldr	r3, [pc, #456]	@ (80018a0 <MX_GPIO_Init+0x270>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016da:	4a71      	ldr	r2, [pc, #452]	@ (80018a0 <MX_GPIO_Init+0x270>)
 80016dc:	f043 0308 	orr.w	r3, r3, #8
 80016e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e2:	4b6f      	ldr	r3, [pc, #444]	@ (80018a0 <MX_GPIO_Init+0x270>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80016ee:	2200      	movs	r2, #0
 80016f0:	f64b 413c 	movw	r1, #48188	@ 0xbc3c
 80016f4:	486b      	ldr	r0, [pc, #428]	@ (80018a4 <MX_GPIO_Init+0x274>)
 80016f6:	f004 fe73 	bl	80063e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80016fa:	2200      	movs	r2, #0
 80016fc:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8001700:	4869      	ldr	r0, [pc, #420]	@ (80018a8 <MX_GPIO_Init+0x278>)
 8001702:	f004 fe6d 	bl	80063e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800170c:	4867      	ldr	r0, [pc, #412]	@ (80018ac <MX_GPIO_Init+0x27c>)
 800170e:	f004 fe67 	bl	80063e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001718:	4865      	ldr	r0, [pc, #404]	@ (80018b0 <MX_GPIO_Init+0x280>)
 800171a:	f004 fe61 	bl	80063e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 800171e:	2201      	movs	r2, #1
 8001720:	210f      	movs	r1, #15
 8001722:	4863      	ldr	r0, [pc, #396]	@ (80018b0 <MX_GPIO_Init+0x280>)
 8001724:	f004 fe5c 	bl	80063e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE10 PE11 PE12 PE13
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001728:	f64b 433c 	movw	r3, #48188	@ 0xbc3c
 800172c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4619      	mov	r1, r3
 8001740:	4858      	ldr	r0, [pc, #352]	@ (80018a4 <MX_GPIO_Init+0x274>)
 8001742:	f004 fbf9 	bl	8005f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE9 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_0
 8001746:	f240 23c3 	movw	r3, #707	@ 0x2c3
 800174a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800174c:	2303      	movs	r3, #3
 800174e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	4619      	mov	r1, r3
 800175a:	4852      	ldr	r0, [pc, #328]	@ (80018a4 <MX_GPIO_Init+0x274>)
 800175c:	f004 fbec 	bl	8005f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001760:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	2301      	movs	r3, #1
 8001768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	4619      	mov	r1, r3
 8001778:	484b      	ldr	r0, [pc, #300]	@ (80018a8 <MX_GPIO_Init+0x278>)
 800177a:	f004 fbdd 	bl	8005f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800177e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001784:	2303      	movs	r3, #3
 8001786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	4845      	ldr	r0, [pc, #276]	@ (80018a8 <MX_GPIO_Init+0x278>)
 8001794:	f004 fbd0 	bl	8005f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF9 PF10 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_2;
 8001798:	f240 6304 	movw	r3, #1540	@ 0x604
 800179c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179e:	2303      	movs	r3, #3
 80017a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	4619      	mov	r1, r3
 80017ac:	4841      	ldr	r0, [pc, #260]	@ (80018b4 <MX_GPIO_Init+0x284>)
 80017ae:	f004 fbc3 	bl	8005f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b8:	2303      	movs	r3, #3
 80017ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	483c      	ldr	r0, [pc, #240]	@ (80018b8 <MX_GPIO_Init+0x288>)
 80017c8:	f004 fbb6 	bl	8005f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017cc:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80017d0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	4830      	ldr	r0, [pc, #192]	@ (80018a8 <MX_GPIO_Init+0x278>)
 80017e6:	f004 fba7 	bl	8005f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA7 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 80017ea:	f248 63ae 	movw	r3, #34478	@ 0x86ae
 80017ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f0:	2303      	movs	r3, #3
 80017f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001802:	f004 fb99 	bl	8005f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8001806:	f640 73fd 	movw	r3, #4093	@ 0xffd
 800180a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180c:	2303      	movs	r3, #3
 800180e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	4824      	ldr	r0, [pc, #144]	@ (80018ac <MX_GPIO_Init+0x27c>)
 800181c:	f004 fb8c 	bl	8005f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001820:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	481c      	ldr	r0, [pc, #112]	@ (80018ac <MX_GPIO_Init+0x27c>)
 800183a:	f004 fb7d 	bl	8005f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800183e:	f64f 730f 	movw	r3, #65295	@ 0xff0f
 8001842:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4619      	mov	r1, r3
 8001856:	4816      	ldr	r0, [pc, #88]	@ (80018b0 <MX_GPIO_Init+0x280>)
 8001858:	f004 fb6e 	bl	8005f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800185c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186a:	2303      	movs	r3, #3
 800186c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800186e:	2300      	movs	r3, #0
 8001870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800187c:	f004 fb5c 	bl	8005f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001880:	23f0      	movs	r3, #240	@ 0xf0
 8001882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4619      	mov	r1, r3
 8001892:	4807      	ldr	r0, [pc, #28]	@ (80018b0 <MX_GPIO_Init+0x280>)
 8001894:	f004 fb50 	bl	8005f38 <HAL_GPIO_Init>

}
 8001898:	bf00      	nop
 800189a:	3730      	adds	r7, #48	@ 0x30
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	48001000 	.word	0x48001000
 80018a8:	48000800 	.word	0x48000800
 80018ac:	48000400 	.word	0x48000400
 80018b0:	48000c00 	.word	0x48000c00
 80018b4:	48001400 	.word	0x48001400
 80018b8:	48001800 	.word	0x48001800

080018bc <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0a4      	sub	sp, #144	@ 0x90
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80018c2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 80018d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
 80018e0:	615a      	str	r2, [r3, #20]
 80018e2:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	2260      	movs	r2, #96	@ 0x60
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f011 ff3a 	bl	8013764 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80018f0:	4b44      	ldr	r3, [pc, #272]	@ (8001a04 <MX_HRTIM1_Init+0x148>)
 80018f2:	4a45      	ldr	r2, [pc, #276]	@ (8001a08 <MX_HRTIM1_Init+0x14c>)
 80018f4:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80018f6:	4b43      	ldr	r3, [pc, #268]	@ (8001a04 <MX_HRTIM1_Init+0x148>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80018fc:	4b41      	ldr	r3, [pc, #260]	@ (8001a04 <MX_HRTIM1_Init+0x148>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8001902:	4840      	ldr	r0, [pc, #256]	@ (8001a04 <MX_HRTIM1_Init+0x148>)
 8001904:	f004 fdba 	bl	800647c <HAL_HRTIM_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_HRTIM1_Init+0x56>
  {
    Error_Handler();
 800190e:	f000 fc83 	bl	8002218 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8001912:	210c      	movs	r1, #12
 8001914:	483b      	ldr	r0, [pc, #236]	@ (8001a04 <MX_HRTIM1_Init+0x148>)
 8001916:	f004 fed9 	bl	80066cc <HAL_HRTIM_DLLCalibrationStart>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_HRTIM1_Init+0x68>
  {
    Error_Handler();
 8001920:	f000 fc7a 	bl	8002218 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8001924:	210a      	movs	r1, #10
 8001926:	4837      	ldr	r0, [pc, #220]	@ (8001a04 <MX_HRTIM1_Init+0x148>)
 8001928:	f004 ff3e 	bl	80067a8 <HAL_HRTIM_PollForDLLCalibration>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_HRTIM1_Init+0x7a>
  {
    Error_Handler();
 8001932:	f000 fc71 	bl	8002218 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 8001936:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 800193a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800194a:	2308      	movs	r3, #8
 800194c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001950:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001954:	461a      	mov	r2, r3
 8001956:	2100      	movs	r1, #0
 8001958:	482a      	ldr	r0, [pc, #168]	@ (8001a04 <MX_HRTIM1_Init+0x148>)
 800195a:	f004 ff59 	bl	8006810 <HAL_HRTIM_TimeBaseConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 8001964:	f000 fc58 	bl	8002218 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8001968:	2300      	movs	r3, #0
 800196a:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 800196c:	2300      	movs	r3, #0
 800196e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8001970:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001974:	461a      	mov	r2, r3
 8001976:	2100      	movs	r1, #0
 8001978:	4822      	ldr	r0, [pc, #136]	@ (8001a04 <MX_HRTIM1_Init+0x148>)
 800197a:	f005 fa05 	bl	8006d88 <HAL_HRTIM_WaveformTimerControl>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_HRTIM1_Init+0xcc>
  {
    Error_Handler();
 8001984:	f000 fc48 	bl	8002218 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  pTimerCfg.DMASrcAddress = 0x0000;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  pTimerCfg.DMADstAddress = 0x0000;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  pTimerCfg.DMASize = 0x1;
 8001998:	2301      	movs	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800199c:	2300      	movs	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80019bc:	2300      	movs	r3, #0
 80019be:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80019cc:	2300      	movs	r3, #0
 80019ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80019d0:	2300      	movs	r3, #0
 80019d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80019d8:	2300      	movs	r3, #0
 80019da:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80019dc:	2300      	movs	r3, #0
 80019de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	461a      	mov	r2, r3
 80019e8:	2100      	movs	r1, #0
 80019ea:	4806      	ldr	r0, [pc, #24]	@ (8001a04 <MX_HRTIM1_Init+0x148>)
 80019ec:	f004 ff8a 	bl	8006904 <HAL_HRTIM_WaveformTimerConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_HRTIM1_Init+0x13e>
  {
    Error_Handler();
 80019f6:	f000 fc0f 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	3790      	adds	r7, #144	@ 0x90
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000042c 	.word	0x2000042c
 8001a08:	40016800 	.word	0x40016800

08001a0c <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <HAL_HRTIM_MspInit+0x44>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d113      	bne.n	8001a46 <HAL_HRTIM_MspInit+0x3a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a54 <HAL_HRTIM_MspInit+0x48>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a22:	4a0c      	ldr	r2, [pc, #48]	@ (8001a54 <HAL_HRTIM_MspInit+0x48>)
 8001a24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a28:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <HAL_HRTIM_MspInit+0x48>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]

    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2044      	movs	r0, #68	@ 0x44
 8001a3c:	f003 fe90 	bl	8005760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8001a40:	2044      	movs	r0, #68	@ 0x44
 8001a42:	f003 feb7 	bl	80057b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40016800 	.word	0x40016800
 8001a54:	40021000 	.word	0x40021000

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a5e:	f000 fe20 	bl	80026a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a62:	f000 f90d 	bl	8001c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a66:	f7ff fde3 	bl	8001630 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8001a6a:	f010 fb39 	bl	80120e0 <MX_USB_Device_Init>
  MX_ADC1_Init();
 8001a6e:	f7ff f8fd 	bl	8000c6c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001a72:	f7ff f975 	bl	8000d60 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001a76:	f7ff f9db 	bl	8000e30 <MX_ADC3_Init>
  MX_ADC4_Init();
 8001a7a:	f7ff fa53 	bl	8000f24 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001a7e:	f7ff fab9 	bl	8000ff4 <MX_ADC5_Init>
  MX_TIM1_Init();
 8001a82:	f000 fcc3 	bl	800240c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a86:	f000 fd51 	bl	800252c <MX_TIM2_Init>
  MX_HRTIM1_Init();
 8001a8a:	f7ff ff17 	bl	80018bc <MX_HRTIM1_Init>
  MX_DAC1_Init();
 8001a8e:	f7ff fd57 	bl	8001540 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  //---------- ADC Calibration ----------
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8001a92:	217f      	movs	r1, #127	@ 0x7f
 8001a94:	486b      	ldr	r0, [pc, #428]	@ (8001c44 <main+0x1ec>)
 8001a96:	f003 fb0d 	bl	80050b4 <HAL_ADCEx_Calibration_Start>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <main+0x4c>
  	  Error_Handler();
 8001aa0:	f000 fbba 	bl	8002218 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8001aa4:	217f      	movs	r1, #127	@ 0x7f
 8001aa6:	4868      	ldr	r0, [pc, #416]	@ (8001c48 <main+0x1f0>)
 8001aa8:	f003 fb04 	bl	80050b4 <HAL_ADCEx_Calibration_Start>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <main+0x5e>
  	  Error_Handler();
 8001ab2:	f000 fbb1 	bl	8002218 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED) != HAL_OK)
 8001ab6:	217f      	movs	r1, #127	@ 0x7f
 8001ab8:	4864      	ldr	r0, [pc, #400]	@ (8001c4c <main+0x1f4>)
 8001aba:	f003 fafb 	bl	80050b4 <HAL_ADCEx_Calibration_Start>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <main+0x70>
  	  Error_Handler();
 8001ac4:	f000 fba8 	bl	8002218 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED) != HAL_OK)
 8001ac8:	217f      	movs	r1, #127	@ 0x7f
 8001aca:	4861      	ldr	r0, [pc, #388]	@ (8001c50 <main+0x1f8>)
 8001acc:	f003 faf2 	bl	80050b4 <HAL_ADCEx_Calibration_Start>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <main+0x82>
  	  Error_Handler();
 8001ad6:	f000 fb9f 	bl	8002218 <Error_Handler>
  if (HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED) != HAL_OK)
 8001ada:	217f      	movs	r1, #127	@ 0x7f
 8001adc:	485d      	ldr	r0, [pc, #372]	@ (8001c54 <main+0x1fc>)
 8001ade:	f003 fae9 	bl	80050b4 <HAL_ADCEx_Calibration_Start>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <main+0x94>
  	  Error_Handler();
 8001ae8:	f000 fb96 	bl	8002218 <Error_Handler>

  //---------- ADC Start ----------
  if (HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8001aec:	4855      	ldr	r0, [pc, #340]	@ (8001c44 <main+0x1ec>)
 8001aee:	f001 fd7f 	bl	80035f0 <HAL_ADC_Start_IT>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <main+0xa4>
  	  Error_Handler();
 8001af8:	f000 fb8e 	bl	8002218 <Error_Handler>
  if (HAL_ADC_Start_IT(&hadc2) != HAL_OK)
 8001afc:	4852      	ldr	r0, [pc, #328]	@ (8001c48 <main+0x1f0>)
 8001afe:	f001 fd77 	bl	80035f0 <HAL_ADC_Start_IT>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <main+0xb4>
  	  Error_Handler();
 8001b08:	f000 fb86 	bl	8002218 <Error_Handler>
  if (HAL_ADC_Start_IT(&hadc3) != HAL_OK)
 8001b0c:	484f      	ldr	r0, [pc, #316]	@ (8001c4c <main+0x1f4>)
 8001b0e:	f001 fd6f 	bl	80035f0 <HAL_ADC_Start_IT>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <main+0xc4>
  	  Error_Handler();
 8001b18:	f000 fb7e 	bl	8002218 <Error_Handler>
  if (HAL_ADC_Start_IT(&hadc4) != HAL_OK)
 8001b1c:	484c      	ldr	r0, [pc, #304]	@ (8001c50 <main+0x1f8>)
 8001b1e:	f001 fd67 	bl	80035f0 <HAL_ADC_Start_IT>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <main+0xd4>
  	  Error_Handler();
 8001b28:	f000 fb76 	bl	8002218 <Error_Handler>
  if (HAL_ADC_Start_IT(&hadc5) != HAL_OK)
 8001b2c:	4849      	ldr	r0, [pc, #292]	@ (8001c54 <main+0x1fc>)
 8001b2e:	f001 fd5f 	bl	80035f0 <HAL_ADC_Start_IT>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <main+0xe4>
  	  Error_Handler();
 8001b38:	f000 fb6e 	bl	8002218 <Error_Handler>

  //---------- Timer Period Set ----------
  uint32_t period = (uint32_t)(CLKFREQ / (TIMER2_PRESCALAR * TIMER2_FREQ) - 1);
 8001b3c:	f240 539f 	movw	r3, #1439	@ 0x59f
 8001b40:	607b      	str	r3, [r7, #4]
  TIM2->ARR = period;
 8001b42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIM2->PSC = TIMER2_PRESCALAR;
 8001b4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b4e:	2201      	movs	r2, #1
 8001b50:	629a      	str	r2, [r3, #40]	@ 0x28
//  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].PERxR = HRTIM_MUL*(CLKFREQ/updateFreq);



  //---------- Buffer Initialisation ----------
  init_all_buffers(&buffers);
 8001b52:	4841      	ldr	r0, [pc, #260]	@ (8001c58 <main+0x200>)
 8001b54:	f000 f9ac 	bl	8001eb0 <init_all_buffers>
  HAL_Delay(100);
 8001b58:	2064      	movs	r0, #100	@ 0x64
 8001b5a:	f000 fe13 	bl	8002784 <HAL_Delay>

  //---------- Timer Start ----------
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8001b5e:	2100      	movs	r1, #0
 8001b60:	483e      	ldr	r0, [pc, #248]	@ (8001c5c <main+0x204>)
 8001b62:	f009 fda5 	bl	800b6b0 <HAL_TIM_PWM_Start>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <main+0x118>
	  Error_Handler();
 8001b6c:	f000 fb54 	bl	8002218 <Error_Handler>

  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8001b70:	483b      	ldr	r0, [pc, #236]	@ (8001c60 <main+0x208>)
 8001b72:	f009 fbcb 	bl	800b30c <HAL_TIM_Base_Start_IT>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <main+0x128>
  	  Error_Handler();
 8001b7c:	f000 fb4c 	bl	8002218 <Error_Handler>

//  if (HAL_HRTIM_SimpleBaseStart_IT(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A) != HAL_OK)
//  	  Error_Handler();

  HAL_Delay(400);
 8001b80:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001b84:	f000 fdfe 	bl	8002784 <HAL_Delay>

  //---------- LUT Initialisation ----------
  init_lut();
 8001b88:	f000 fa86 	bl	8002098 <init_lut>

  //---------- MUX Enable ----------
  updateCurrent(0);
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f000 fb1b 	bl	80021c8 <updateCurrent>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001b92:	2201      	movs	r2, #1
 8001b94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b98:	4832      	ldr	r0, [pc, #200]	@ (8001c64 <main+0x20c>)
 8001b9a:	f004 fc21 	bl	80063e0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (is_main) { // Toggles a status LED
 8001b9e:	4b32      	ldr	r3, [pc, #200]	@ (8001c68 <main+0x210>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <main+0x15e>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8001ba8:	2104      	movs	r1, #4
 8001baa:	4830      	ldr	r0, [pc, #192]	@ (8001c6c <main+0x214>)
 8001bac:	f004 fc44 	bl	8006438 <HAL_GPIO_TogglePin>
		  is_main = 0;
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c68 <main+0x210>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
	  }
	  if (is_usb) { //Sends all data and triggers a MUX change
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c70 <main+0x218>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <main+0x17a>
		  send_all_buffer(&buffers);
 8001bc0:	4825      	ldr	r0, [pc, #148]	@ (8001c58 <main+0x200>)
 8001bc2:	f000 f9d9 	bl	8001f78 <send_all_buffer>
		  is_usb = 0;
 8001bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c70 <main+0x218>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
		  is_voltage_mux = 1;
 8001bcc:	4b29      	ldr	r3, [pc, #164]	@ (8001c74 <main+0x21c>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
	  }
	  if (is_voltage_mux) { //Updates Voltage MUX and triggers a MUX change
 8001bd2:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <main+0x21c>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d018      	beq.n	8001c0e <main+0x1b6>
		  buffers.mux++;
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c58 <main+0x200>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c58 <main+0x200>)
 8001be6:	801a      	strh	r2, [r3, #0]
		  if (buffers.mux > 3) {
 8001be8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c58 <main+0x200>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d905      	bls.n	8001bfc <main+0x1a4>
			  buffers.mux = 0;
 8001bf0:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <main+0x200>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	801a      	strh	r2, [r3, #0]
			  is_current_mux = 1;
 8001bf6:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <main+0x220>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]
		  }
		  set_mux(buffers.mux);
 8001bfc:	4b16      	ldr	r3, [pc, #88]	@ (8001c58 <main+0x200>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fa1c 	bl	8002040 <set_mux>
		  is_voltage_mux = 0;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <main+0x21c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
	  }
	  if (is_current_mux) { //Updates Current MUX
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <main+0x220>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0c2      	beq.n	8001b9e <main+0x146>
		  current_mux++;
 8001c18:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <main+0x224>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b16      	ldr	r3, [pc, #88]	@ (8001c7c <main+0x224>)
 8001c22:	701a      	strb	r2, [r3, #0]
		  if (current_mux > 15) {
 8001c24:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <main+0x224>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b0f      	cmp	r3, #15
 8001c2a:	d902      	bls.n	8001c32 <main+0x1da>
			  current_mux = 0;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <main+0x224>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
		  }
		  updateCurrent(current_mux);
 8001c32:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <main+0x224>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 fac6 	bl	80021c8 <updateCurrent>
		  is_current_mux = 0;
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <main+0x220>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
	  if (is_main) { // Toggles a status LED
 8001c42:	e7ac      	b.n	8001b9e <main+0x146>
 8001c44:	200001f4 	.word	0x200001f4
 8001c48:	20000260 	.word	0x20000260
 8001c4c:	200002cc 	.word	0x200002cc
 8001c50:	20000338 	.word	0x20000338
 8001c54:	200003a4 	.word	0x200003a4
 8001c58:	200006c0 	.word	0x200006c0
 8001c5c:	20000728 	.word	0x20000728
 8001c60:	20000774 	.word	0x20000774
 8001c64:	48001000 	.word	0x48001000
 8001c68:	20000720 	.word	0x20000720
 8001c6c:	48000c00 	.word	0x48000c00
 8001c70:	20000721 	.word	0x20000721
 8001c74:	20000722 	.word	0x20000722
 8001c78:	20000723 	.word	0x20000723
 8001c7c:	200006bc 	.word	0x200006bc

08001c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b094      	sub	sp, #80	@ 0x50
 8001c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c86:	f107 0318 	add.w	r3, r7, #24
 8001c8a:	2238      	movs	r2, #56	@ 0x38
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f011 fd68 	bl	8013764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ca6:	f007 fd77 	bl	8009798 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001cc0:	2312      	movs	r3, #18
 8001cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8001cc8:	2306      	movs	r3, #6
 8001cca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd0:	f107 0318 	add.w	r3, r7, #24
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f007 fe23 	bl	8009920 <HAL_RCC_OscConfig>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001ce0:	f000 fa9a 	bl	8002218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce4:	230f      	movs	r3, #15
 8001ce6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	2104      	movs	r1, #4
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f008 fa1b 	bl	800a138 <HAL_RCC_ClockConfig>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001d08:	f000 fa86 	bl	8002218 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_8);
 8001d0c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001d10:	f04f 61a0 	mov.w	r1, #83886080	@ 0x5000000
 8001d14:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d18:	f008 fc0c 	bl	800a534 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001d1c:	f008 fd0c 	bl	800a738 <HAL_RCC_EnableCSS>
}
 8001d20:	bf00      	nop
 8001d22:	3750      	adds	r7, #80	@ 0x50
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_ADC_ConvCpltCallback>:
 * Args:
 * 		hadc: Handle type for the adc, defines which
 * 			adc is being used
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
//	char buffer[USB_PAYLOAD + 1];
    if (hadc->Instance == ADC1) {
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d38:	d108      	bne.n	8001d4c <HAL_ADC_ConvCpltCallback+0x24>
//    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0);
    	uint32_t adc1_val = HAL_ADC_GetValue(hadc);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f001 fdd2 	bl	80038e4 <HAL_ADC_GetValue>
 8001d40:	61f8      	str	r0, [r7, #28]
    	writeDbleBuf (&buffers.adc1, adc1_val);
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	4619      	mov	r1, r3
 8001d46:	481f      	ldr	r0, [pc, #124]	@ (8001dc4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001d48:	f7ff fb92 	bl	8001470 <writeDbleBuf>
    }
    if (hadc->Instance == ADC2) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d108      	bne.n	8001d68 <HAL_ADC_ConvCpltCallback+0x40>
    	uint32_t adc2_val = HAL_ADC_GetValue(hadc);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f001 fdc4 	bl	80038e4 <HAL_ADC_GetValue>
 8001d5c:	61b8      	str	r0, [r7, #24]
    	writeDbleBuf (&buffers.adc2, adc2_val);
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4619      	mov	r1, r3
 8001d62:	481a      	ldr	r0, [pc, #104]	@ (8001dcc <HAL_ADC_ConvCpltCallback+0xa4>)
 8001d64:	f7ff fb84 	bl	8001470 <writeDbleBuf>
    }
    if (hadc->Instance == ADC3) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a18      	ldr	r2, [pc, #96]	@ (8001dd0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d108      	bne.n	8001d84 <HAL_ADC_ConvCpltCallback+0x5c>
    	uint32_t adc3_val = HAL_ADC_GetValue(hadc);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f001 fdb6 	bl	80038e4 <HAL_ADC_GetValue>
 8001d78:	6178      	str	r0, [r7, #20]
    	writeDbleBuf (&buffers.adc3, adc3_val);
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4815      	ldr	r0, [pc, #84]	@ (8001dd4 <HAL_ADC_ConvCpltCallback+0xac>)
 8001d80:	f7ff fb76 	bl	8001470 <writeDbleBuf>
    }
    if (hadc->Instance == ADC4) {
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a13      	ldr	r2, [pc, #76]	@ (8001dd8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d108      	bne.n	8001da0 <HAL_ADC_ConvCpltCallback+0x78>
    	uint32_t adc4_val = HAL_ADC_GetValue(hadc);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f001 fda8 	bl	80038e4 <HAL_ADC_GetValue>
 8001d94:	6138      	str	r0, [r7, #16]
    	writeDbleBuf (&buffers.adc4, adc4_val);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4810      	ldr	r0, [pc, #64]	@ (8001ddc <HAL_ADC_ConvCpltCallback+0xb4>)
 8001d9c:	f7ff fb68 	bl	8001470 <writeDbleBuf>
    }
    if (hadc->Instance == ADC5) {
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0e      	ldr	r2, [pc, #56]	@ (8001de0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d108      	bne.n	8001dbc <HAL_ADC_ConvCpltCallback+0x94>
    	uint32_t adc5_val = HAL_ADC_GetValue(hadc);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f001 fd9a 	bl	80038e4 <HAL_ADC_GetValue>
 8001db0:	60f8      	str	r0, [r7, #12]
    	writeDbleBuf (&buffers.adc5, adc5_val);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4619      	mov	r1, r3
 8001db6:	480b      	ldr	r0, [pc, #44]	@ (8001de4 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001db8:	f7ff fb5a 	bl	8001470 <writeDbleBuf>
    }
}
 8001dbc:	bf00      	nop
 8001dbe:	3720      	adds	r7, #32
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200006c4 	.word	0x200006c4
 8001dc8:	50000100 	.word	0x50000100
 8001dcc:	200006d4 	.word	0x200006d4
 8001dd0:	50000400 	.word	0x50000400
 8001dd4:	200006e4 	.word	0x200006e4
 8001dd8:	50000500 	.word	0x50000500
 8001ddc:	200006f4 	.word	0x200006f4
 8001de0:	50000600 	.word	0x50000600
 8001de4:	20000704 	.word	0x20000704

08001de8 <HAL_TIM_PeriodElapsedCallback>:
 * Args:
 * 		htim: Handle type for the timer to define
 * 			which timer has triggered the callback.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df8:	d126      	bne.n	8001e48 <HAL_TIM_PeriodElapsedCallback+0x60>
		gl_ticks++;
 8001dfa:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	1c54      	adds	r4, r2, #1
 8001e02:	f143 0500 	adc.w	r5, r3, #0
 8001e06:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001e08:	e9c3 4500 	strd	r4, r5, [r3]
	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / MAIN_FREQ) == 1) {
 8001e0c:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e12:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	f7fe fdaf 	bl	800097c <__aeabi_uldivmod>
 8001e1e:	1e51      	subs	r1, r2, #1
 8001e20:	430b      	orrs	r3, r1
 8001e22:	d102      	bne.n	8001e2a <HAL_TIM_PeriodElapsedCallback+0x42>
			is_main = 1;
 8001e24:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
		}
	    if (gl_ticks % (uint64_t)(TIMER2_FREQ / USB_FREQ) == 1) {
 8001e2a:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001e2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e30:	f04f 020a 	mov.w	r2, #10
 8001e34:	f04f 0300 	mov.w	r3, #0
 8001e38:	f7fe fda0 	bl	800097c <__aeabi_uldivmod>
 8001e3c:	1e51      	subs	r1, r2, #1
 8001e3e:	430b      	orrs	r3, r1
 8001e40:	d102      	bne.n	8001e48 <HAL_TIM_PeriodElapsedCallback+0x60>
	    	is_usb = 1;
 8001e42:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
//        if (gl_ticks >= TIMER2_FREQ) {
//            gl_ticks = 0;
//        }
	}

}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e50:	20000718 	.word	0x20000718
 8001e54:	20000720 	.word	0x20000720
 8001e58:	20000721 	.word	0x20000721

08001e5c <HAL_HRTIM_RepetitionEventCallback>:
 * 		hhrtim: Handle type for the timer to define
 * 			which timer has triggered the callback.
 */
void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
	if (hhrtim->Instance == HRTIM1) {
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea4 <HAL_HRTIM_RepetitionEventCallback+0x48>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d114      	bne.n	8001e9a <HAL_HRTIM_RepetitionEventCallback+0x3e>
		write_dac(sinewave[sine_idx]);
 8001e70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_HRTIM_RepetitionEventCallback+0x4c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0d      	ldr	r2, [pc, #52]	@ (8001eac <HAL_HRTIM_RepetitionEventCallback+0x50>)
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 f8f3 	bl	8002068 <write_dac>
		sine_idx++;
 8001e82:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <HAL_HRTIM_RepetitionEventCallback+0x4c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3301      	adds	r3, #1
 8001e88:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <HAL_HRTIM_RepetitionEventCallback+0x4c>)
 8001e8a:	6013      	str	r3, [r2, #0]
		if (sine_idx > (LUT_SIZE-1)) {
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_HRTIM_RepetitionEventCallback+0x4c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b63      	cmp	r3, #99	@ 0x63
 8001e92:	d902      	bls.n	8001e9a <HAL_HRTIM_RepetitionEventCallback+0x3e>
			sine_idx=0;
 8001e94:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <HAL_HRTIM_RepetitionEventCallback+0x4c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40016800 	.word	0x40016800
 8001ea8:	200006b8 	.word	0x200006b8
 8001eac:	20000528 	.word	0x20000528

08001eb0 <init_all_buffers>:
 *
 * Args:
 * 		buff: pointer to the buffer which
 * 			is being intialised
 */
void init_all_buffers(buffers_t* buff) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	initDbleBuf(&buff->adc1, ADC_SIZE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3304      	adds	r3, #4
 8001ebc:	2120      	movs	r1, #32
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fab8 	bl	8001434 <initDbleBuf>
	initDbleBuf(&buff->adc2, ADC_SIZE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3314      	adds	r3, #20
 8001ec8:	2120      	movs	r1, #32
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fab2 	bl	8001434 <initDbleBuf>
	initDbleBuf(&buff->adc3, ADC_SIZE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3324      	adds	r3, #36	@ 0x24
 8001ed4:	2120      	movs	r1, #32
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff faac 	bl	8001434 <initDbleBuf>
	initDbleBuf(&buff->adc4, ADC_SIZE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3334      	adds	r3, #52	@ 0x34
 8001ee0:	2120      	movs	r1, #32
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff faa6 	bl	8001434 <initDbleBuf>
	initDbleBuf(&buff->adc5, ADC_SIZE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3344      	adds	r3, #68	@ 0x44
 8001eec:	2120      	movs	r1, #32
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff faa0 	bl	8001434 <initDbleBuf>
	buff->mux = 0;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	801a      	strh	r2, [r3, #0]
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <send_adc_buffer>:
 * 		size: Length of the array being sent
 * 		mux: Multiplexing value for the voltage
 * 			reading system
* 		adc: The ADC unit that the buffer is associated with.
 */
void send_adc_buffer(int32_t *array, size_t size, uint8_t mux, uint8_t adc) {
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b093      	sub	sp, #76	@ 0x4c
 8001f08:	af04      	add	r7, sp, #16
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	460b      	mov	r3, r1
 8001f14:	71fb      	strb	r3, [r7, #7]
 8001f16:	4613      	mov	r3, r2
 8001f18:	71bb      	strb	r3, [r7, #6]
	char buffer[USB_PAYLOAD + 1];
	for (size_t i = 0; i < size; i++) {
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f1e:	e01d      	b.n	8001f5c <send_adc_buffer+0x58>
		uint16_t value = array[i];
 8001f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4413      	add	r3, r2
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	867b      	strh	r3, [r7, #50]	@ 0x32
		snprintf (buffer, sizeof (buffer), "A%uV%uC%u %u\r\n", adc, mux, current_mux, value);
 8001f2c:	79b9      	ldrb	r1, [r7, #6]
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	4a0f      	ldr	r2, [pc, #60]	@ (8001f70 <send_adc_buffer+0x6c>)
 8001f32:	7812      	ldrb	r2, [r2, #0]
 8001f34:	4614      	mov	r4, r2
 8001f36:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8001f38:	f107 0010 	add.w	r0, r7, #16
 8001f3c:	9202      	str	r2, [sp, #8]
 8001f3e:	9401      	str	r4, [sp, #4]
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	460b      	mov	r3, r1
 8001f44:	4a0b      	ldr	r2, [pc, #44]	@ (8001f74 <send_adc_buffer+0x70>)
 8001f46:	2121      	movs	r1, #33	@ 0x21
 8001f48:	f011 fbd8 	bl	80136fc <sniprintf>
		USB_Send(buffer);
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 f903 	bl	800215c <USB_Send>
	for (size_t i = 0; i < size; i++) {
 8001f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f58:	3301      	adds	r3, #1
 8001f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d3dd      	bcc.n	8001f20 <send_adc_buffer+0x1c>
	}
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	373c      	adds	r7, #60	@ 0x3c
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd90      	pop	{r4, r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200006bc 	.word	0x200006bc
 8001f74:	08013f20 	.word	0x08013f20

08001f78 <send_all_buffer>:
 *
 * Args:
 * 		buff: Buffer structure that is being
 * 			sent.
 */
void send_all_buffer(buffers_t* buff) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b0a2      	sub	sp, #136	@ 0x88
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	int32_t array[ADC_SIZE] = {0};
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	2280      	movs	r2, #128	@ 0x80
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f011 fbeb 	bl	8013764 <memset>
	readDbleBuf (&buff->adc1, array);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3304      	adds	r3, #4
 8001f92:	f107 0208 	add.w	r2, r7, #8
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fa8b 	bl	80014b4 <readDbleBuf>
	send_adc_buffer(array, ADC_SIZE, buff->mux, 1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	f107 0008 	add.w	r0, r7, #8
 8001fa8:	2301      	movs	r3, #1
 8001faa:	2120      	movs	r1, #32
 8001fac:	f7ff ffaa 	bl	8001f04 <send_adc_buffer>
	readDbleBuf (&buff->adc2, array);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3314      	adds	r3, #20
 8001fb4:	f107 0208 	add.w	r2, r7, #8
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fa7a 	bl	80014b4 <readDbleBuf>
	send_adc_buffer(array, ADC_SIZE, buff->mux, 2);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	f107 0008 	add.w	r0, r7, #8
 8001fca:	2302      	movs	r3, #2
 8001fcc:	2120      	movs	r1, #32
 8001fce:	f7ff ff99 	bl	8001f04 <send_adc_buffer>
	readDbleBuf (&buff->adc3, array);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3324      	adds	r3, #36	@ 0x24
 8001fd6:	f107 0208 	add.w	r2, r7, #8
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fa69 	bl	80014b4 <readDbleBuf>
	send_adc_buffer(array, ADC_SIZE, buff->mux, 3);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	f107 0008 	add.w	r0, r7, #8
 8001fec:	2303      	movs	r3, #3
 8001fee:	2120      	movs	r1, #32
 8001ff0:	f7ff ff88 	bl	8001f04 <send_adc_buffer>
	readDbleBuf (&buff->adc4, array);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3334      	adds	r3, #52	@ 0x34
 8001ff8:	f107 0208 	add.w	r2, r7, #8
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fa58 	bl	80014b4 <readDbleBuf>
	send_adc_buffer(array, ADC_SIZE, buff->mux, 4);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	f107 0008 	add.w	r0, r7, #8
 800200e:	2304      	movs	r3, #4
 8002010:	2120      	movs	r1, #32
 8002012:	f7ff ff77 	bl	8001f04 <send_adc_buffer>
	readDbleBuf (&buff->adc5, array);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3344      	adds	r3, #68	@ 0x44
 800201a:	f107 0208 	add.w	r2, r7, #8
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fa47 	bl	80014b4 <readDbleBuf>
	send_adc_buffer(array, ADC_SIZE, buff->mux, 5);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	f107 0008 	add.w	r0, r7, #8
 8002030:	2305      	movs	r3, #5
 8002032:	2120      	movs	r1, #32
 8002034:	f7ff ff66 	bl	8001f04 <send_adc_buffer>
}
 8002038:	bf00      	nop
 800203a:	3788      	adds	r7, #136	@ 0x88
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <set_mux>:
 *
 * Args:
 * 		index: The configuration that is being set, only four
 * 			combinations exist to get all readings.
 */
void set_mux(uint8_t index) {
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
	uint16_t mask = 0xC000; //1100 0000 0000 0000
 800204a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800204e:	81fb      	strh	r3, [r7, #14]
	WriteBits(GPIOB, mask, index);
 8002050:	79fa      	ldrb	r2, [r7, #7]
 8002052:	89fb      	ldrh	r3, [r7, #14]
 8002054:	4619      	mov	r1, r3
 8002056:	4803      	ldr	r0, [pc, #12]	@ (8002064 <set_mux+0x24>)
 8002058:	f000 f891 	bl	800217e <WriteBits>
}
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	48000400 	.word	0x48000400

08002068 <write_dac>:
 *
 * Args:
 * 		value: The number that is being written
 * 			to the DAC
 */
void write_dac(uint16_t value){
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
	if (value >= 16383) {
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	f643 72fe 	movw	r2, #16382	@ 0x3ffe
 8002078:	4293      	cmp	r3, r2
 800207a:	d902      	bls.n	8002082 <write_dac+0x1a>
		value = 16383;
 800207c:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8002080:	80fb      	strh	r3, [r7, #6]
	}
	GPIOC->ODR = value;
 8002082:	4a04      	ldr	r2, [pc, #16]	@ (8002094 <write_dac+0x2c>)
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	6153      	str	r3, [r2, #20]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	48000800 	.word	0x48000800

08002098 <init_lut>:
 * Sets up a look up table of a sinewave with a DC offset
 * and a max 14 bit amplitude. THe frequency is adjusted according
 * to the update rate of the DAC.
 *
 */
void init_lut(void) {
 8002098:	b5b0      	push	{r4, r5, r7, lr}
 800209a:	b08c      	sub	sp, #48	@ 0x30
 800209c:	af00      	add	r7, sp, #0
	uint32_t amplitude = 8192;
 800209e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	char buffer[USB_PAYLOAD + 1];

	for (int i = 0; i < LUT_SIZE; i++) {
 80020a4:	2300      	movs	r3, #0
 80020a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020a8:	e044      	b.n	8002134 <init_lut+0x9c>
		float sine = sinf(i * (2.0 * M_PI / LUT_SIZE));
 80020aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80020ac:	f7fe fb8c 	bl	80007c8 <__aeabi_i2d>
 80020b0:	a328      	add	r3, pc, #160	@ (adr r3, 8002154 <init_lut+0xbc>)
 80020b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b6:	f7fe f90b 	bl	80002d0 <__aeabi_dmul>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	f7fe fc0b 	bl	80008dc <__aeabi_d2f>
 80020c6:	4603      	mov	r3, r0
 80020c8:	ee00 3a10 	vmov	s0, r3
 80020cc:	f010 fd12 	bl	8012af4 <sinf>
 80020d0:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		sinewave[i] = (uint16_t)(amplitude * (sine + 1.0));
 80020d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80020d6:	f7fe fb67 	bl	80007a8 <__aeabi_ui2d>
 80020da:	4604      	mov	r4, r0
 80020dc:	460d      	mov	r5, r1
 80020de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020e0:	f7fe fb84 	bl	80007ec <__aeabi_f2d>
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	4b17      	ldr	r3, [pc, #92]	@ (8002148 <init_lut+0xb0>)
 80020ea:	f7fe fa21 	bl	8000530 <__adddf3>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4620      	mov	r0, r4
 80020f4:	4629      	mov	r1, r5
 80020f6:	f7fe f8eb 	bl	80002d0 <__aeabi_dmul>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4610      	mov	r0, r2
 8002100:	4619      	mov	r1, r3
 8002102:	f7fe fbcb 	bl	800089c <__aeabi_d2uiz>
 8002106:	4603      	mov	r3, r0
 8002108:	b29b      	uxth	r3, r3
 800210a:	4619      	mov	r1, r3
 800210c:	4a0f      	ldr	r2, [pc, #60]	@ (800214c <init_lut+0xb4>)
 800210e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002110:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    snprintf (buffer, sizeof (buffer), "%lu\r\n", sinewave[i]);
 8002114:	4a0d      	ldr	r2, [pc, #52]	@ (800214c <init_lut+0xb4>)
 8002116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211c:	4638      	mov	r0, r7
 800211e:	4a0c      	ldr	r2, [pc, #48]	@ (8002150 <init_lut+0xb8>)
 8002120:	2121      	movs	r1, #33	@ 0x21
 8002122:	f011 faeb 	bl	80136fc <sniprintf>
		USB_Send(buffer);
 8002126:	463b      	mov	r3, r7
 8002128:	4618      	mov	r0, r3
 800212a:	f000 f817 	bl	800215c <USB_Send>
	for (int i = 0; i < LUT_SIZE; i++) {
 800212e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002130:	3301      	adds	r3, #1
 8002132:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002136:	2b63      	cmp	r3, #99	@ 0x63
 8002138:	ddb7      	ble.n	80020aa <init_lut+0x12>
	}
}
 800213a:	bf00      	nop
 800213c:	bf00      	nop
 800213e:	3730      	adds	r7, #48	@ 0x30
 8002140:	46bd      	mov	sp, r7
 8002142:	bdb0      	pop	{r4, r5, r7, pc}
 8002144:	f3af 8000 	nop.w
 8002148:	3ff00000 	.word	0x3ff00000
 800214c:	20000528 	.word	0x20000528
 8002150:	08013f30 	.word	0x08013f30
 8002154:	9217271a 	.word	0x9217271a
 8002158:	3fb015bf 	.word	0x3fb015bf

0800215c <USB_Send>:
 * Sends a string to the USB com port on a host PC.
 *
 * Args:
 * 		message: the string that is being sent
 */
void USB_Send(char* message) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*)message, strlen(message));
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7fe f85b 	bl	8000220 <strlen>
 800216a:	4603      	mov	r3, r0
 800216c:	b29b      	uxth	r3, r3
 800216e:	4619      	mov	r1, r3
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f010 f873 	bl	801225c <CDC_Transmit_FS>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <WriteBits>:
 * 		pinMask: The binary value of the pins that are
 * 			to be changed.
 * 		value: The binary number that is being written
 * 			to the pins defined in pinMask.
 */
void WriteBits(GPIO_TypeDef* GPIOx, uint16_t pinMask, uint8_t value) {
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	807b      	strh	r3, [r7, #2]
 800218a:	4613      	mov	r3, r2
 800218c:	707b      	strb	r3, [r7, #1]
    // Clear the bits at the positions of pinMask
    GPIOx->ODR &= ~pinMask;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	43d2      	mvns	r2, r2
 8002196:	401a      	ands	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	615a      	str	r2, [r3, #20]

    // Set the new value at the positions of pinMask
    GPIOx->ODR |= (value & 0x0F) << __builtin_ctz(pinMask);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	787a      	ldrb	r2, [r7, #1]
 80021a2:	f002 010f 	and.w	r1, r2, #15
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	fa92 f2a2 	rbit	r2, r2
 80021ac:	fab2 f282 	clz	r2, r2
 80021b0:	fa01 f202 	lsl.w	r2, r1, r2
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	615a      	str	r2, [r3, #20]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <updateCurrent>:
 * passed to it defining what electrodes are written to.
 *
 * Args:
 * 		electrodes: The configuration that is being set.
 */
void updateCurrent(uint16_t electrodes) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
	uint16_t maskP = 0x003C; //0000 0000 0011 1100
 80021d2:	233c      	movs	r3, #60	@ 0x3c
 80021d4:	81fb      	strh	r3, [r7, #14]
	uint16_t maskN = 0x3C00; //0011 1100 0000 0000
 80021d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80021da:	81bb      	strh	r3, [r7, #12]
	uint8_t pinsP = (uint8_t)electrodes; //1,2
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	72fb      	strb	r3, [r7, #11]
	uint8_t pinsN = pinsP < 15 ? pinsP + 1 : 0;
 80021e0:	7afb      	ldrb	r3, [r7, #11]
 80021e2:	2b0e      	cmp	r3, #14
 80021e4:	d803      	bhi.n	80021ee <updateCurrent+0x26>
 80021e6:	7afb      	ldrb	r3, [r7, #11]
 80021e8:	3301      	adds	r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	e000      	b.n	80021f0 <updateCurrent+0x28>
 80021ee:	2300      	movs	r3, #0
 80021f0:	72bb      	strb	r3, [r7, #10]
	WriteBits(GPIOE, maskP, pinsP);
 80021f2:	7afa      	ldrb	r2, [r7, #11]
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	4619      	mov	r1, r3
 80021f8:	4806      	ldr	r0, [pc, #24]	@ (8002214 <updateCurrent+0x4c>)
 80021fa:	f7ff ffc0 	bl	800217e <WriteBits>
	WriteBits(GPIOE, maskN, pinsN);
 80021fe:	7aba      	ldrb	r2, [r7, #10]
 8002200:	89bb      	ldrh	r3, [r7, #12]
 8002202:	4619      	mov	r1, r3
 8002204:	4803      	ldr	r0, [pc, #12]	@ (8002214 <updateCurrent+0x4c>)
 8002206:	f7ff ffba 	bl	800217e <WriteBits>
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	48001000 	.word	0x48001000

08002218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800221c:	b672      	cpsid	i
}
 800221e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <Error_Handler+0x8>

08002224 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002242:	4b0f      	ldr	r3, [pc, #60]	@ (8002280 <HAL_MspInit+0x44>)
 8002244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002246:	4a0e      	ldr	r2, [pc, #56]	@ (8002280 <HAL_MspInit+0x44>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6613      	str	r3, [r2, #96]	@ 0x60
 800224e:	4b0c      	ldr	r3, [pc, #48]	@ (8002280 <HAL_MspInit+0x44>)
 8002250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <HAL_MspInit+0x44>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225e:	4a08      	ldr	r2, [pc, #32]	@ (8002280 <HAL_MspInit+0x44>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002264:	6593      	str	r3, [r2, #88]	@ 0x58
 8002266:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_MspInit+0x44>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002272:	f007 fb45 	bl	8009900 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000

08002284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002288:	f008 fa66 	bl	800a758 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <NMI_Handler+0x8>

08002290 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <HardFault_Handler+0x4>

08002298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <MemManage_Handler+0x4>

080022a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <BusFault_Handler+0x4>

080022a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <UsageFault_Handler+0x4>

080022b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022de:	f000 fa33 	bl	8002748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022ec:	4803      	ldr	r0, [pc, #12]	@ (80022fc <ADC1_2_IRQHandler+0x14>)
 80022ee:	f001 fb2d 	bl	800394c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80022f2:	4803      	ldr	r0, [pc, #12]	@ (8002300 <ADC1_2_IRQHandler+0x18>)
 80022f4:	f001 fb2a 	bl	800394c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	200001f4 	.word	0x200001f4
 8002300:	20000260 	.word	0x20000260

08002304 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002308:	4802      	ldr	r0, [pc, #8]	@ (8002314 <USB_LP_IRQHandler+0x10>)
 800230a:	f005 fe01 	bl	8007f10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20001c98 	.word	0x20001c98

08002318 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800231c:	4802      	ldr	r0, [pc, #8]	@ (8002328 <TIM2_IRQHandler+0x10>)
 800231e:	f009 fba1 	bl	800ba64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000774 	.word	0x20000774

0800232c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002330:	4802      	ldr	r0, [pc, #8]	@ (800233c <ADC3_IRQHandler+0x10>)
 8002332:	f001 fb0b 	bl	800394c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200002cc 	.word	0x200002cc

08002340 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8002344:	4802      	ldr	r0, [pc, #8]	@ (8002350 <ADC4_IRQHandler+0x10>)
 8002346:	f001 fb01 	bl	800394c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000338 	.word	0x20000338

08002354 <ADC5_IRQHandler>:

/**
  * @brief This function handles ADC5 global interrupt.
  */
void ADC5_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC5_IRQn 0 */

  /* USER CODE END ADC5_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc5);
 8002358:	4802      	ldr	r0, [pc, #8]	@ (8002364 <ADC5_IRQHandler+0x10>)
 800235a:	f001 faf7 	bl	800394c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC5_IRQn 1 */

  /* USER CODE END ADC5_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200003a4 	.word	0x200003a4

08002368 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_TIMER_A);
 800236c:	2100      	movs	r1, #0
 800236e:	4802      	ldr	r0, [pc, #8]	@ (8002378 <HRTIM1_TIMA_IRQHandler+0x10>)
 8002370:	f004 fdb8 	bl	8006ee4 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	2000042c 	.word	0x2000042c

0800237c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002384:	4a14      	ldr	r2, [pc, #80]	@ (80023d8 <_sbrk+0x5c>)
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <_sbrk+0x60>)
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002390:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <_sbrk+0x64>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002398:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <_sbrk+0x64>)
 800239a:	4a12      	ldr	r2, [pc, #72]	@ (80023e4 <_sbrk+0x68>)
 800239c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800239e:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <_sbrk+0x64>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d207      	bcs.n	80023bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023ac:	f011 f9f2 	bl	8013794 <__errno>
 80023b0:	4603      	mov	r3, r0
 80023b2:	220c      	movs	r2, #12
 80023b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	e009      	b.n	80023d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023bc:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c2:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <_sbrk+0x64>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	4a05      	ldr	r2, [pc, #20]	@ (80023e0 <_sbrk+0x64>)
 80023cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20020000 	.word	0x20020000
 80023dc:	00000800 	.word	0x00000800
 80023e0:	20000724 	.word	0x20000724
 80023e4:	200022e0 	.word	0x200022e0

080023e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023ec:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <SystemInit+0x20>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f2:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <SystemInit+0x20>)
 80023f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b098      	sub	sp, #96	@ 0x60
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002412:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800241e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	60da      	str	r2, [r3, #12]
 800242c:	611a      	str	r2, [r3, #16]
 800242e:	615a      	str	r2, [r3, #20]
 8002430:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	2234      	movs	r2, #52	@ 0x34
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f011 f993 	bl	8013764 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800243e:	4b39      	ldr	r3, [pc, #228]	@ (8002524 <MX_TIM1_Init+0x118>)
 8002440:	4a39      	ldr	r2, [pc, #228]	@ (8002528 <MX_TIM1_Init+0x11c>)
 8002442:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002444:	4b37      	ldr	r3, [pc, #220]	@ (8002524 <MX_TIM1_Init+0x118>)
 8002446:	2200      	movs	r2, #0
 8002448:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244a:	4b36      	ldr	r3, [pc, #216]	@ (8002524 <MX_TIM1_Init+0x118>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 14400;
 8002450:	4b34      	ldr	r3, [pc, #208]	@ (8002524 <MX_TIM1_Init+0x118>)
 8002452:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 8002456:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002458:	4b32      	ldr	r3, [pc, #200]	@ (8002524 <MX_TIM1_Init+0x118>)
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800245e:	4b31      	ldr	r3, [pc, #196]	@ (8002524 <MX_TIM1_Init+0x118>)
 8002460:	2200      	movs	r2, #0
 8002462:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002464:	4b2f      	ldr	r3, [pc, #188]	@ (8002524 <MX_TIM1_Init+0x118>)
 8002466:	2200      	movs	r2, #0
 8002468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800246a:	482e      	ldr	r0, [pc, #184]	@ (8002524 <MX_TIM1_Init+0x118>)
 800246c:	f009 f80e 	bl	800b48c <HAL_TIM_PWM_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002476:	f7ff fecf 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800247a:	2320      	movs	r3, #32
 800247c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002486:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800248a:	4619      	mov	r1, r3
 800248c:	4825      	ldr	r0, [pc, #148]	@ (8002524 <MX_TIM1_Init+0x118>)
 800248e:	f00b fb3d 	bl	800db0c <HAL_TIMEx_MasterConfigSynchronization>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002498:	f7ff febe 	bl	8002218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800249c:	2360      	movs	r3, #96	@ 0x60
 800249e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a4:	2300      	movs	r3, #0
 80024a6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024a8:	2300      	movs	r3, #0
 80024aa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024bc:	2200      	movs	r2, #0
 80024be:	4619      	mov	r1, r3
 80024c0:	4818      	ldr	r0, [pc, #96]	@ (8002524 <MX_TIM1_Init+0x118>)
 80024c2:	f009 fc1f 	bl	800bd04 <HAL_TIM_PWM_ConfigChannel>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80024cc:	f7ff fea4 	bl	8002218 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002500:	2300      	movs	r3, #0
 8002502:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	4619      	mov	r1, r3
 800250c:	4805      	ldr	r0, [pc, #20]	@ (8002524 <MX_TIM1_Init+0x118>)
 800250e:	f00b fc6d 	bl	800ddec <HAL_TIMEx_ConfigBreakDeadTime>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002518:	f7ff fe7e 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	3760      	adds	r7, #96	@ 0x60
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000728 	.word	0x20000728
 8002528:	40012c00 	.word	0x40012c00

0800252c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002532:	f107 0310 	add.w	r3, r7, #16
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800254a:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <MX_TIM2_Init+0x94>)
 800254c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002550:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96;
 8002552:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <MX_TIM2_Init+0x94>)
 8002554:	2260      	movs	r2, #96	@ 0x60
 8002556:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002558:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <MX_TIM2_Init+0x94>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 800255e:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <MX_TIM2_Init+0x94>)
 8002560:	4a18      	ldr	r2, [pc, #96]	@ (80025c4 <MX_TIM2_Init+0x98>)
 8002562:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002564:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <MX_TIM2_Init+0x94>)
 8002566:	2200      	movs	r2, #0
 8002568:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256a:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <MX_TIM2_Init+0x94>)
 800256c:	2200      	movs	r2, #0
 800256e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002570:	4813      	ldr	r0, [pc, #76]	@ (80025c0 <MX_TIM2_Init+0x94>)
 8002572:	f008 fdb9 	bl	800b0e8 <HAL_TIM_Base_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800257c:	f7ff fe4c 	bl	8002218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002584:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002586:	f107 0310 	add.w	r3, r7, #16
 800258a:	4619      	mov	r1, r3
 800258c:	480c      	ldr	r0, [pc, #48]	@ (80025c0 <MX_TIM2_Init+0x94>)
 800258e:	f009 fe29 	bl	800c1e4 <HAL_TIM_ConfigClockSource>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002598:	f7ff fe3e 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259c:	2300      	movs	r3, #0
 800259e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	4619      	mov	r1, r3
 80025a8:	4805      	ldr	r0, [pc, #20]	@ (80025c0 <MX_TIM2_Init+0x94>)
 80025aa:	f00b faaf 	bl	800db0c <HAL_TIMEx_MasterConfigSynchronization>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80025b4:	f7ff fe30 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025b8:	bf00      	nop
 80025ba:	3720      	adds	r7, #32
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000774 	.word	0x20000774
 80025c4:	000186a0 	.word	0x000186a0

080025c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002600 <HAL_TIM_PWM_MspInit+0x38>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d10b      	bne.n	80025f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025da:	4b0a      	ldr	r3, [pc, #40]	@ (8002604 <HAL_TIM_PWM_MspInit+0x3c>)
 80025dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025de:	4a09      	ldr	r2, [pc, #36]	@ (8002604 <HAL_TIM_PWM_MspInit+0x3c>)
 80025e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80025e6:	4b07      	ldr	r3, [pc, #28]	@ (8002604 <HAL_TIM_PWM_MspInit+0x3c>)
 80025e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40012c00 	.word	0x40012c00
 8002604:	40021000 	.word	0x40021000

08002608 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002618:	d113      	bne.n	8002642 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800261a:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <HAL_TIM_Base_MspInit+0x44>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261e:	4a0b      	ldr	r2, [pc, #44]	@ (800264c <HAL_TIM_Base_MspInit+0x44>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6593      	str	r3, [r2, #88]	@ 0x58
 8002626:	4b09      	ldr	r3, [pc, #36]	@ (800264c <HAL_TIM_Base_MspInit+0x44>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	201c      	movs	r0, #28
 8002638:	f003 f892 	bl	8005760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800263c:	201c      	movs	r0, #28
 800263e:	f003 f8b9 	bl	80057b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000

08002650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002650:	480d      	ldr	r0, [pc, #52]	@ (8002688 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002652:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002654:	f7ff fec8 	bl	80023e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002658:	480c      	ldr	r0, [pc, #48]	@ (800268c <LoopForever+0x6>)
  ldr r1, =_edata
 800265a:	490d      	ldr	r1, [pc, #52]	@ (8002690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800265c:	4a0d      	ldr	r2, [pc, #52]	@ (8002694 <LoopForever+0xe>)
  movs r3, #0
 800265e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002660:	e002      	b.n	8002668 <LoopCopyDataInit>

08002662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002666:	3304      	adds	r3, #4

08002668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800266a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800266c:	d3f9      	bcc.n	8002662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800266e:	4a0a      	ldr	r2, [pc, #40]	@ (8002698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002670:	4c0a      	ldr	r4, [pc, #40]	@ (800269c <LoopForever+0x16>)
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002674:	e001      	b.n	800267a <LoopFillZerobss>

08002676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002678:	3204      	adds	r2, #4

0800267a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800267a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800267c:	d3fb      	bcc.n	8002676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800267e:	f011 f88f 	bl	80137a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002682:	f7ff f9e9 	bl	8001a58 <main>

08002686 <LoopForever>:

LoopForever:
    b LoopForever
 8002686:	e7fe      	b.n	8002686 <LoopForever>
  ldr   r0, =_estack
 8002688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800268c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002690:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002694:	08014900 	.word	0x08014900
  ldr r2, =_sbss
 8002698:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800269c:	200022dc 	.word	0x200022dc

080026a0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026a0:	e7fe      	b.n	80026a0 <COMP1_2_3_IRQHandler>

080026a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ac:	2003      	movs	r0, #3
 80026ae:	f003 f837 	bl	8005720 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026b2:	200f      	movs	r0, #15
 80026b4:	f000 f80e 	bl	80026d4 <HAL_InitTick>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	71fb      	strb	r3, [r7, #7]
 80026c2:	e001      	b.n	80026c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026c4:	f7ff fdba 	bl	800223c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026c8:	79fb      	ldrb	r3, [r7, #7]

}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026e0:	4b16      	ldr	r3, [pc, #88]	@ (800273c <HAL_InitTick+0x68>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d022      	beq.n	800272e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026e8:	4b15      	ldr	r3, [pc, #84]	@ (8002740 <HAL_InitTick+0x6c>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b13      	ldr	r3, [pc, #76]	@ (800273c <HAL_InitTick+0x68>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80026f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fc:	4618      	mov	r0, r3
 80026fe:	f003 f871 	bl	80057e4 <HAL_SYSTICK_Config>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10f      	bne.n	8002728 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b0f      	cmp	r3, #15
 800270c:	d809      	bhi.n	8002722 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800270e:	2200      	movs	r2, #0
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	f04f 30ff 	mov.w	r0, #4294967295
 8002716:	f003 f823 	bl	8005760 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800271a:	4a0a      	ldr	r2, [pc, #40]	@ (8002744 <HAL_InitTick+0x70>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	e007      	b.n	8002732 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e004      	b.n	8002732 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e001      	b.n	8002732 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000008 	.word	0x20000008
 8002740:	20000000 	.word	0x20000000
 8002744:	20000004 	.word	0x20000004

08002748 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800274c:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <HAL_IncTick+0x1c>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <HAL_IncTick+0x20>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4413      	add	r3, r2
 8002756:	4a03      	ldr	r2, [pc, #12]	@ (8002764 <HAL_IncTick+0x1c>)
 8002758:	6013      	str	r3, [r2, #0]
}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	200007c0 	.word	0x200007c0
 8002768:	20000008 	.word	0x20000008

0800276c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return uwTick;
 8002770:	4b03      	ldr	r3, [pc, #12]	@ (8002780 <HAL_GetTick+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	200007c0 	.word	0x200007c0

08002784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800278c:	f7ff ffee 	bl	800276c <HAL_GetTick>
 8002790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279c:	d004      	beq.n	80027a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800279e:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <HAL_Delay+0x40>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4413      	add	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027a8:	bf00      	nop
 80027aa:	f7ff ffdf 	bl	800276c <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d8f7      	bhi.n	80027aa <HAL_Delay+0x26>
  {
  }
}
 80027ba:	bf00      	nop
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000008 	.word	0x20000008

080027c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	609a      	str	r2, [r3, #8]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	609a      	str	r2, [r3, #8]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(const ADC_TypeDef *ADCx)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0318 	and.w	r3, r3, #24
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3360      	adds	r3, #96	@ 0x60
 800285e:	461a      	mov	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <LL_ADC_SetOffset+0x44>)
 800286e:	4013      	ands	r3, r2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	4313      	orrs	r3, r2
 800287c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002884:	bf00      	nop
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	03fff000 	.word	0x03fff000

08002894 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3360      	adds	r3, #96	@ 0x60
 80028a2:	461a      	mov	r2, r3
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3360      	adds	r3, #96	@ 0x60
 80028d0:	461a      	mov	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b087      	sub	sp, #28
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3360      	adds	r3, #96	@ 0x60
 8002906:	461a      	mov	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	431a      	orrs	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002920:	bf00      	nop
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3360      	adds	r3, #96	@ 0x60
 800293c:	461a      	mov	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	431a      	orrs	r2, r3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002956:	bf00      	nop
 8002958:	371c      	adds	r7, #28
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	615a      	str	r2, [r3, #20]
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b087      	sub	sp, #28
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3330      	adds	r3, #48	@ 0x30
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	0a1b      	lsrs	r3, r3, #8
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	4413      	add	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	211f      	movs	r1, #31
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	401a      	ands	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	0e9b      	lsrs	r3, r3, #26
 80029e6:	f003 011f 	and.w	r1, r3, #31
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	fa01 f303 	lsl.w	r3, r1, r3
 80029f4:	431a      	orrs	r2, r3
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a12:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	3314      	adds	r3, #20
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	0e5b      	lsrs	r3, r3, #25
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	4413      	add	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	0d1b      	lsrs	r3, r3, #20
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2107      	movs	r1, #7
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	401a      	ands	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	0d1b      	lsrs	r3, r3, #20
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	431a      	orrs	r2, r3
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a76:	bf00      	nop
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f003 0318 	and.w	r3, r3, #24
 8002aa6:	4908      	ldr	r1, [pc, #32]	@ (8002ac8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002aa8:	40d9      	lsrs	r1, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	400b      	ands	r3, r1
 8002aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	0007ffff 	.word	0x0007ffff

08002acc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 031f 	and.w	r3, r3, #31
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002b14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6093      	str	r3, [r2, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b3c:	d101      	bne.n	8002b42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b64:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b8c:	d101      	bne.n	8002b92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bdc:	f043 0202 	orr.w	r2, r3, #2
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <LL_ADC_IsEnabled+0x18>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <LL_ADC_IsEnabled+0x1a>
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d101      	bne.n	8002c2e <LL_ADC_IsDisableOngoing+0x18>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <LL_ADC_IsDisableOngoing+0x1a>
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c50:	f043 0204 	orr.w	r2, r3, #4
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d101      	bne.n	8002c7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d101      	bne.n	8002ca2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b089      	sub	sp, #36	@ 0x24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <HAL_ADC_Init+0x1c>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f000 bc8c 	b.w	80035e4 <HAL_ADC_Init+0x934>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cd4:	d018      	beq.n	8002d08 <HAL_ADC_Init+0x58>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a63      	ldr	r2, [pc, #396]	@ (8002e68 <HAL_ADC_Init+0x1b8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_ADC_Init+0x58>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a61      	ldr	r2, [pc, #388]	@ (8002e6c <HAL_ADC_Init+0x1bc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00e      	beq.n	8002d08 <HAL_ADC_Init+0x58>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a60      	ldr	r2, [pc, #384]	@ (8002e70 <HAL_ADC_Init+0x1c0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d009      	beq.n	8002d08 <HAL_ADC_Init+0x58>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a5e      	ldr	r2, [pc, #376]	@ (8002e74 <HAL_ADC_Init+0x1c4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_ADC_Init+0x58>
 8002cfe:	f240 119b 	movw	r1, #411	@ 0x19b
 8002d02:	485d      	ldr	r0, [pc, #372]	@ (8002e78 <HAL_ADC_Init+0x1c8>)
 8002d04:	f7ff fa8e 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d10:	d049      	beq.n	8002da6 <HAL_ADC_Init+0xf6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d1a:	d044      	beq.n	8002da6 <HAL_ADC_Init+0xf6>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d24:	d03f      	beq.n	8002da6 <HAL_ADC_Init+0xf6>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d03b      	beq.n	8002da6 <HAL_ADC_Init+0xf6>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d36:	d036      	beq.n	8002da6 <HAL_ADC_Init+0xf6>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d40:	d031      	beq.n	8002da6 <HAL_ADC_Init+0xf6>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d4a:	d02c      	beq.n	8002da6 <HAL_ADC_Init+0xf6>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d54:	d027      	beq.n	8002da6 <HAL_ADC_Init+0xf6>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002d5e:	d022      	beq.n	8002da6 <HAL_ADC_Init+0xf6>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002d68:	d01d      	beq.n	8002da6 <HAL_ADC_Init+0xf6>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002d72:	d018      	beq.n	8002da6 <HAL_ADC_Init+0xf6>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d7c:	d013      	beq.n	8002da6 <HAL_ADC_Init+0xf6>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002d86:	d00e      	beq.n	8002da6 <HAL_ADC_Init+0xf6>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002d90:	d009      	beq.n	8002da6 <HAL_ADC_Init+0xf6>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002d9a:	d004      	beq.n	8002da6 <HAL_ADC_Init+0xf6>
 8002d9c:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8002da0:	4835      	ldr	r0, [pc, #212]	@ (8002e78 <HAL_ADC_Init+0x1c8>)
 8002da2:	f7ff fa3f 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d010      	beq.n	8002dd0 <HAL_ADC_Init+0x120>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d00c      	beq.n	8002dd0 <HAL_ADC_Init+0x120>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b10      	cmp	r3, #16
 8002dbc:	d008      	beq.n	8002dd0 <HAL_ADC_Init+0x120>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b18      	cmp	r3, #24
 8002dc4:	d004      	beq.n	8002dd0 <HAL_ADC_Init+0x120>
 8002dc6:	f240 119d 	movw	r1, #413	@ 0x19d
 8002dca:	482b      	ldr	r0, [pc, #172]	@ (8002e78 <HAL_ADC_Init+0x1c8>)
 8002dcc:	f7ff fa2a 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d009      	beq.n	8002dec <HAL_ADC_Init+0x13c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002de0:	d004      	beq.n	8002dec <HAL_ADC_Init+0x13c>
 8002de2:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8002de6:	4824      	ldr	r0, [pc, #144]	@ (8002e78 <HAL_ADC_Init+0x1c8>)
 8002de8:	f7ff fa1c 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_GAIN_COMPENSATION(hadc->Init.GainCompensation));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f244 0209 	movw	r2, #16393	@ 0x4009
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d904      	bls.n	8002e02 <HAL_ADC_Init+0x152>
 8002df8:	f240 119f 	movw	r1, #415	@ 0x19f
 8002dfc:	481e      	ldr	r0, [pc, #120]	@ (8002e78 <HAL_ADC_Init+0x1c8>)
 8002dfe:	f7ff fa11 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_ADC_Init+0x16c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d004      	beq.n	8002e1c <HAL_ADC_Init+0x16c>
 8002e12:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8002e16:	4818      	ldr	r0, [pc, #96]	@ (8002e78 <HAL_ADC_Init+0x1c8>)
 8002e18:	f7ff fa04 	bl	8002224 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	7f5b      	ldrb	r3, [r3, #29]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_ADC_Init+0x186>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	7f5b      	ldrb	r3, [r3, #29]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d004      	beq.n	8002e36 <HAL_ADC_Init+0x186>
 8002e2c:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8002e30:	4811      	ldr	r0, [pc, #68]	@ (8002e78 <HAL_ADC_Init+0x1c8>)
 8002e32:	f7ff f9f7 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01e      	beq.n	8002e7c <HAL_ADC_Init+0x1cc>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e46:	d019      	beq.n	8002e7c <HAL_ADC_Init+0x1cc>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e50:	d014      	beq.n	8002e7c <HAL_ADC_Init+0x1cc>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e5a:	d00f      	beq.n	8002e7c <HAL_ADC_Init+0x1cc>
 8002e5c:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8002e60:	4805      	ldr	r0, [pc, #20]	@ (8002e78 <HAL_ADC_Init+0x1c8>)
 8002e62:	f7ff f9df 	bl	8002224 <assert_failed>
 8002e66:	e009      	b.n	8002e7c <HAL_ADC_Init+0x1cc>
 8002e68:	50000100 	.word	0x50000100
 8002e6c:	50000400 	.word	0x50000400
 8002e70:	50000500 	.word	0x50000500
 8002e74:	50000600 	.word	0x50000600
 8002e78:	08013f38 	.word	0x08013f38
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e80:	f5b3 6fa4 	cmp.w	r3, #1312	@ 0x520
 8002e84:	f000 80f3 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8c:	f5b3 6fa8 	cmp.w	r3, #1344	@ 0x540
 8002e90:	f000 80ed 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 8002e9c:	f000 80e7 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea4:	f5b3 6fac 	cmp.w	r3, #1376	@ 0x560
 8002ea8:	f000 80e1 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8002eb4:	f000 80db 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8002ec0:	f000 80d5 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec8:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8002ecc:	f000 80cf 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	f5b3 6ff8 	cmp.w	r3, #1984	@ 0x7c0
 8002ed8:	f000 80c9 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee0:	f5b3 6f9c 	cmp.w	r3, #1248	@ 0x4e0
 8002ee4:	f000 80c3 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eec:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002ef0:	f000 80bd 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	f5b3 6fb8 	cmp.w	r3, #1472	@ 0x5c0
 8002efc:	f000 80b7 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002f08:	f000 80b1 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f10:	f5b3 6fc4 	cmp.w	r3, #1568	@ 0x620
 8002f14:	f000 80ab 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8002f20:	f000 80a5 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f28:	f5b3 6fd4 	cmp.w	r3, #1696	@ 0x6a0
 8002f2c:	f000 809f 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f34:	f5b3 6fd8 	cmp.w	r3, #1728	@ 0x6c0
 8002f38:	f000 8099 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f40:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8002f44:	f000 8093 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f50:	f000 808d 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f58:	f5b3 6fe4 	cmp.w	r3, #1824	@ 0x720
 8002f5c:	f000 8087 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f64:	f5b3 6fe8 	cmp.w	r3, #1856	@ 0x740
 8002f68:	f000 8081 	beq.w	800306e <HAL_ADC_Init+0x3be>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f70:	f5b3 6fec 	cmp.w	r3, #1888	@ 0x760
 8002f74:	d07b      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7a:	f5b3 6ff0 	cmp.w	r3, #1920	@ 0x780
 8002f7e:	d076      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f84:	f5b3 6ff4 	cmp.w	r3, #1952	@ 0x7a0
 8002f88:	d071      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f92:	d004      	beq.n	8002f9e <HAL_ADC_Init+0x2ee>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a97      	ldr	r2, [pc, #604]	@ (80031f8 <HAL_ADC_Init+0x548>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d127      	bne.n	8002fee <HAL_ADC_Init+0x33e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa6:	d062      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fac:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 8002fb0:	d05d      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb6:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 8002fba:	d058      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc0:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 8002fc4:	d053      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fca:	f5b3 6f94 	cmp.w	r3, #1184	@ 0x4a0
 8002fce:	d04e      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd4:	f5b3 6fcc 	cmp.w	r3, #1632	@ 0x660
 8002fd8:	d049      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fde:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8002fe2:	d044      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe8:	f5b3 6f98 	cmp.w	r3, #1216	@ 0x4c0
 8002fec:	d03f      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a82      	ldr	r2, [pc, #520]	@ (80031fc <HAL_ADC_Init+0x54c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d009      	beq.n	800300c <HAL_ADC_Init+0x35c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a80      	ldr	r2, [pc, #512]	@ (8003200 <HAL_ADC_Init+0x550>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d004      	beq.n	800300c <HAL_ADC_Init+0x35c>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a7f      	ldr	r2, [pc, #508]	@ (8003204 <HAL_ADC_Init+0x554>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d127      	bne.n	800305c <HAL_ADC_Init+0x3ac>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 8003014:	d02b      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301a:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 800301e:	d026      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003028:	d021      	beq.n	800306e <HAL_ADC_Init+0x3be>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302e:	f5b3 6f98 	cmp.w	r3, #1216	@ 0x4c0
 8003032:	d01c      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003038:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 800303c:	d017      	beq.n	800306e <HAL_ADC_Init+0x3be>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003042:	f5b3 6fcc 	cmp.w	r3, #1632	@ 0x660
 8003046:	d012      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8003050:	d00d      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003056:	f5b3 6f94 	cmp.w	r3, #1184	@ 0x4a0
 800305a:	d008      	beq.n	800306e <HAL_ADC_Init+0x3be>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d004      	beq.n	800306e <HAL_ADC_Init+0x3be>
 8003064:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8003068:	4867      	ldr	r0, [pc, #412]	@ (8003208 <HAL_ADC_Init+0x558>)
 800306a:	f7ff f8db 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_SAMPLINGMODE(hadc->Init.SamplingMode));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00e      	beq.n	8003094 <HAL_ADC_Init+0x3e4>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800307a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800307e:	d009      	beq.n	8003094 <HAL_ADC_Init+0x3e4>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003084:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003088:	d004      	beq.n	8003094 <HAL_ADC_Init+0x3e4>
 800308a:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 800308e:	485e      	ldr	r0, [pc, #376]	@ (8003208 <HAL_ADC_Init+0x558>)
 8003090:	f7ff f8c8 	bl	8002224 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <HAL_ADC_Init+0x402>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d004      	beq.n	80030b2 <HAL_ADC_Init+0x402>
 80030a8:	f240 11a5 	movw	r1, #421	@ 0x1a5
 80030ac:	4856      	ldr	r0, [pc, #344]	@ (8003208 <HAL_ADC_Init+0x558>)
 80030ae:	f7ff f8b9 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d008      	beq.n	80030cc <HAL_ADC_Init+0x41c>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d004      	beq.n	80030cc <HAL_ADC_Init+0x41c>
 80030c2:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 80030c6:	4850      	ldr	r0, [pc, #320]	@ (8003208 <HAL_ADC_Init+0x558>)
 80030c8:	f7ff f8ac 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d009      	beq.n	80030e8 <HAL_ADC_Init+0x438>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030dc:	d004      	beq.n	80030e8 <HAL_ADC_Init+0x438>
 80030de:	f240 11a7 	movw	r1, #423	@ 0x1a7
 80030e2:	4849      	ldr	r0, [pc, #292]	@ (8003208 <HAL_ADC_Init+0x558>)
 80030e4:	f7ff f89e 	bl	8002224 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	7f1b      	ldrb	r3, [r3, #28]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_ADC_Init+0x452>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7f1b      	ldrb	r3, [r3, #28]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d004      	beq.n	8003102 <HAL_ADC_Init+0x452>
 80030f8:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 80030fc:	4842      	ldr	r0, [pc, #264]	@ (8003208 <HAL_ADC_Init+0x558>)
 80030fe:	f7ff f891 	bl	8002224 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d009      	beq.n	8003120 <HAL_ADC_Init+0x470>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003112:	2b01      	cmp	r3, #1
 8003114:	d004      	beq.n	8003120 <HAL_ADC_Init+0x470>
 8003116:	f240 11a9 	movw	r1, #425	@ 0x1a9
 800311a:	483b      	ldr	r0, [pc, #236]	@ (8003208 <HAL_ADC_Init+0x558>)
 800311c:	f7ff f882 	bl	8002224 <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d02d      	beq.n	8003184 <HAL_ADC_Init+0x4d4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_ADC_Init+0x488>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	2b10      	cmp	r3, #16
 8003136:	d904      	bls.n	8003142 <HAL_ADC_Init+0x492>
 8003138:	f240 11ad 	movw	r1, #429	@ 0x1ad
 800313c:	4832      	ldr	r0, [pc, #200]	@ (8003208 <HAL_ADC_Init+0x558>)
 800313e:	f7ff f871 	bl	8002224 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003148:	2b00      	cmp	r3, #0
 800314a:	d009      	beq.n	8003160 <HAL_ADC_Init+0x4b0>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003152:	2b01      	cmp	r3, #1
 8003154:	d004      	beq.n	8003160 <HAL_ADC_Init+0x4b0>
 8003156:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 800315a:	482b      	ldr	r0, [pc, #172]	@ (8003208 <HAL_ADC_Init+0x558>)
 800315c:	f7ff f862 	bl	8002224 <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003166:	2b01      	cmp	r3, #1
 8003168:	d10c      	bne.n	8003184 <HAL_ADC_Init+0x4d4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_ADC_Init+0x4ca>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003176:	2b08      	cmp	r3, #8
 8003178:	d904      	bls.n	8003184 <HAL_ADC_Init+0x4d4>
 800317a:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 800317e:	4822      	ldr	r0, [pc, #136]	@ (8003208 <HAL_ADC_Init+0x558>)
 8003180:	f7ff f850 	bl	8002224 <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800318a:	2b01      	cmp	r3, #1
 800318c:	d108      	bne.n	80031a0 <HAL_ADC_Init+0x4f0>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7f5b      	ldrb	r3, [r3, #29]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d104      	bne.n	80031a0 <HAL_ADC_Init+0x4f0>
 8003196:	f240 11b7 	movw	r1, #439	@ 0x1b7
 800319a:	481b      	ldr	r0, [pc, #108]	@ (8003208 <HAL_ADC_Init+0x558>)
 800319c:	f7ff f842 	bl	8002224 <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <HAL_ADC_Init+0x50c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7fd ff8b 	bl	80010c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fcb1 	bl	8002b28 <LL_ADC_IsDeepPowerDownEnabled>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d004      	beq.n	80031d6 <HAL_ADC_Init+0x526>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fc97 	bl	8002b04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fccc 	bl	8002b78 <LL_ADC_IsInternalRegulatorEnabled>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d122      	bne.n	800322c <HAL_ADC_Init+0x57c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fcb0 	bl	8002b50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031f0:	4b06      	ldr	r3, [pc, #24]	@ (800320c <HAL_ADC_Init+0x55c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	099b      	lsrs	r3, r3, #6
 80031f6:	e00b      	b.n	8003210 <HAL_ADC_Init+0x560>
 80031f8:	50000100 	.word	0x50000100
 80031fc:	50000400 	.word	0x50000400
 8003200:	50000500 	.word	0x50000500
 8003204:	50000600 	.word	0x50000600
 8003208:	08013f38 	.word	0x08013f38
 800320c:	20000000 	.word	0x20000000
 8003210:	4a83      	ldr	r2, [pc, #524]	@ (8003420 <HAL_ADC_Init+0x770>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	099b      	lsrs	r3, r3, #6
 8003218:	3301      	adds	r3, #1
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800321e:	e002      	b.n	8003226 <HAL_ADC_Init+0x576>
    {
      wait_loop_index--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3b01      	subs	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f9      	bne.n	8003220 <HAL_ADC_Init+0x570>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fca1 	bl	8002b78 <LL_ADC_IsInternalRegulatorEnabled>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10d      	bne.n	8003258 <HAL_ADC_Init+0x5a8>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003240:	f043 0210 	orr.w	r2, r3, #16
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324c:	f043 0201 	orr.w	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fd01 	bl	8002c64 <LL_ADC_REG_IsConversionOngoing>
 8003262:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	f040 81b0 	bne.w	80035d2 <HAL_ADC_Init+0x922>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f040 81ac 	bne.w	80035d2 <HAL_ADC_Init+0x922>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003282:	f043 0202 	orr.w	r2, r3, #2
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fcae 	bl	8002bf0 <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d141      	bne.n	800331e <HAL_ADC_Init+0x66e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032a2:	d004      	beq.n	80032ae <HAL_ADC_Init+0x5fe>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a5e      	ldr	r2, [pc, #376]	@ (8003424 <HAL_ADC_Init+0x774>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d10f      	bne.n	80032ce <HAL_ADC_Init+0x61e>
 80032ae:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80032b2:	f7ff fc9d 	bl	8002bf0 <LL_ADC_IsEnabled>
 80032b6:	4604      	mov	r4, r0
 80032b8:	485a      	ldr	r0, [pc, #360]	@ (8003424 <HAL_ADC_Init+0x774>)
 80032ba:	f7ff fc99 	bl	8002bf0 <LL_ADC_IsEnabled>
 80032be:	4603      	mov	r3, r0
 80032c0:	4323      	orrs	r3, r4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	e012      	b.n	80032f4 <HAL_ADC_Init+0x644>
 80032ce:	4856      	ldr	r0, [pc, #344]	@ (8003428 <HAL_ADC_Init+0x778>)
 80032d0:	f7ff fc8e 	bl	8002bf0 <LL_ADC_IsEnabled>
 80032d4:	4604      	mov	r4, r0
 80032d6:	4855      	ldr	r0, [pc, #340]	@ (800342c <HAL_ADC_Init+0x77c>)
 80032d8:	f7ff fc8a 	bl	8002bf0 <LL_ADC_IsEnabled>
 80032dc:	4603      	mov	r3, r0
 80032de:	431c      	orrs	r4, r3
 80032e0:	4853      	ldr	r0, [pc, #332]	@ (8003430 <HAL_ADC_Init+0x780>)
 80032e2:	f7ff fc85 	bl	8002bf0 <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	4323      	orrs	r3, r4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	bf0c      	ite	eq
 80032ee:	2301      	moveq	r3, #1
 80032f0:	2300      	movne	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d012      	beq.n	800331e <HAL_ADC_Init+0x66e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003300:	d004      	beq.n	800330c <HAL_ADC_Init+0x65c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a47      	ldr	r2, [pc, #284]	@ (8003424 <HAL_ADC_Init+0x774>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d101      	bne.n	8003310 <HAL_ADC_Init+0x660>
 800330c:	4a49      	ldr	r2, [pc, #292]	@ (8003434 <HAL_ADC_Init+0x784>)
 800330e:	e000      	b.n	8003312 <HAL_ADC_Init+0x662>
 8003310:	4a49      	ldr	r2, [pc, #292]	@ (8003438 <HAL_ADC_Init+0x788>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4619      	mov	r1, r3
 8003318:	4610      	mov	r0, r2
 800331a:	f7ff fa55 	bl	80027c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	7f5b      	ldrb	r3, [r3, #29]
 8003322:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003328:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800332e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003334:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800333c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003348:	2b01      	cmp	r3, #1
 800334a:	d106      	bne.n	800335a <HAL_ADC_Init+0x6aa>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003350:	3b01      	subs	r3, #1
 8003352:	045b      	lsls	r3, r3, #17
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <HAL_ADC_Init+0x6c6>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003366:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	4b2f      	ldr	r3, [pc, #188]	@ (800343c <HAL_ADC_Init+0x78c>)
 800337e:	4013      	ands	r3, r2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	69b9      	ldr	r1, [r7, #24]
 8003386:	430b      	orrs	r3, r1
 8003388:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fc70 	bl	8002c8a <LL_ADC_INJ_IsConversionOngoing>
 80033aa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f040 80ed 	bne.w	800358e <HAL_ADC_Init+0x8de>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 80e9 	bne.w	800358e <HAL_ADC_Init+0x8de>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80033c0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80033c8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033d8:	f023 0302 	bic.w	r3, r3, #2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	69b9      	ldr	r1, [r7, #24]
 80033e2:	430b      	orrs	r3, r1
 80033e4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d028      	beq.n	8003440 <HAL_ADC_Init+0x790>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80033fc:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003406:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800340a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6911      	ldr	r1, [r2, #16]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	430b      	orrs	r3, r1
 8003418:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800341c:	e024      	b.n	8003468 <HAL_ADC_Init+0x7b8>
 800341e:	bf00      	nop
 8003420:	053e2d63 	.word	0x053e2d63
 8003424:	50000100 	.word	0x50000100
 8003428:	50000400 	.word	0x50000400
 800342c:	50000500 	.word	0x50000500
 8003430:	50000600 	.word	0x50000600
 8003434:	50000300 	.word	0x50000300
 8003438:	50000700 	.word	0x50000700
 800343c:	fff04007 	.word	0xfff04007
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800344e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003460:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003464:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800346e:	2b01      	cmp	r3, #1
 8003470:	f040 8085 	bne.w	800357e <HAL_ADC_Init+0x8ce>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003478:	2b00      	cmp	r3, #0
 800347a:	d020      	beq.n	80034be <HAL_ADC_Init+0x80e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003480:	2b04      	cmp	r3, #4
 8003482:	d01c      	beq.n	80034be <HAL_ADC_Init+0x80e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003488:	2b08      	cmp	r3, #8
 800348a:	d018      	beq.n	80034be <HAL_ADC_Init+0x80e>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003490:	2b0c      	cmp	r3, #12
 8003492:	d014      	beq.n	80034be <HAL_ADC_Init+0x80e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003498:	2b10      	cmp	r3, #16
 800349a:	d010      	beq.n	80034be <HAL_ADC_Init+0x80e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a0:	2b14      	cmp	r3, #20
 80034a2:	d00c      	beq.n	80034be <HAL_ADC_Init+0x80e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a8:	2b18      	cmp	r3, #24
 80034aa:	d008      	beq.n	80034be <HAL_ADC_Init+0x80e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b0:	2b1c      	cmp	r3, #28
 80034b2:	d004      	beq.n	80034be <HAL_ADC_Init+0x80e>
 80034b4:	f240 2176 	movw	r1, #630	@ 0x276
 80034b8:	484c      	ldr	r0, [pc, #304]	@ (80035ec <HAL_ADC_Init+0x93c>)
 80034ba:	f7fe feb3 	bl	8002224 <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d025      	beq.n	8003512 <HAL_ADC_Init+0x862>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d021      	beq.n	8003512 <HAL_ADC_Init+0x862>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d2:	2b40      	cmp	r3, #64	@ 0x40
 80034d4:	d01d      	beq.n	8003512 <HAL_ADC_Init+0x862>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034da:	2b60      	cmp	r3, #96	@ 0x60
 80034dc:	d019      	beq.n	8003512 <HAL_ADC_Init+0x862>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e2:	2b80      	cmp	r3, #128	@ 0x80
 80034e4:	d015      	beq.n	8003512 <HAL_ADC_Init+0x862>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80034ec:	d011      	beq.n	8003512 <HAL_ADC_Init+0x862>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80034f4:	d00d      	beq.n	8003512 <HAL_ADC_Init+0x862>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034fa:	2be0      	cmp	r3, #224	@ 0xe0
 80034fc:	d009      	beq.n	8003512 <HAL_ADC_Init+0x862>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003506:	d004      	beq.n	8003512 <HAL_ADC_Init+0x862>
 8003508:	f240 2177 	movw	r1, #631	@ 0x277
 800350c:	4837      	ldr	r0, [pc, #220]	@ (80035ec <HAL_ADC_Init+0x93c>)
 800350e:	f7fe fe89 	bl	8002224 <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_ADC_Init+0x87e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003522:	d004      	beq.n	800352e <HAL_ADC_Init+0x87e>
 8003524:	f44f 711e 	mov.w	r1, #632	@ 0x278
 8003528:	4830      	ldr	r0, [pc, #192]	@ (80035ec <HAL_ADC_Init+0x93c>)
 800352a:	f7fe fe7b 	bl	8002224 <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003532:	2b01      	cmp	r3, #1
 8003534:	d00a      	beq.n	800354c <HAL_ADC_Init+0x89c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353a:	f240 4201 	movw	r2, #1025	@ 0x401
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_ADC_Init+0x89c>
 8003542:	f240 2179 	movw	r1, #633	@ 0x279
 8003546:	4829      	ldr	r0, [pc, #164]	@ (80035ec <HAL_ADC_Init+0x93c>)
 8003548:	f7fe fe6c 	bl	8002224 <assert_failed>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003556:	f023 0304 	bic.w	r3, r3, #4
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003562:	4311      	orrs	r1, r2
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003568:	4311      	orrs	r1, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800356e:	430a      	orrs	r2, r1
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	611a      	str	r2, [r3, #16]
 800357c:	e007      	b.n	800358e <HAL_ADC_Init+0x8de>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0201 	bic.w	r2, r2, #1
 800358c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d10c      	bne.n	80035b0 <HAL_ADC_Init+0x900>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359c:	f023 010f 	bic.w	r1, r3, #15
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	1e5a      	subs	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80035ae:	e007      	b.n	80035c0 <HAL_ADC_Init+0x910>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 020f 	bic.w	r2, r2, #15
 80035be:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c4:	f023 0303 	bic.w	r3, r3, #3
 80035c8:	f043 0201 	orr.w	r2, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035d0:	e007      	b.n	80035e2 <HAL_ADC_Init+0x932>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d6:	f043 0210 	orr.w	r2, r3, #16
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80035e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3724      	adds	r7, #36	@ 0x24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd90      	pop	{r4, r7, pc}
 80035ec:	08013f38 	.word	0x08013f38

080035f0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003600:	d004      	beq.n	800360c <HAL_ADC_Start_IT+0x1c>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a8e      	ldr	r2, [pc, #568]	@ (8003840 <HAL_ADC_Start_IT+0x250>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d101      	bne.n	8003610 <HAL_ADC_Start_IT+0x20>
 800360c:	4b8d      	ldr	r3, [pc, #564]	@ (8003844 <HAL_ADC_Start_IT+0x254>)
 800360e:	e000      	b.n	8003612 <HAL_ADC_Start_IT+0x22>
 8003610:	4b8d      	ldr	r3, [pc, #564]	@ (8003848 <HAL_ADC_Start_IT+0x258>)
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fa5a 	bl	8002acc <LL_ADC_GetMultimode>
 8003618:	6138      	str	r0, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003622:	d018      	beq.n	8003656 <HAL_ADC_Start_IT+0x66>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a85      	ldr	r2, [pc, #532]	@ (8003840 <HAL_ADC_Start_IT+0x250>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_ADC_Start_IT+0x66>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a86      	ldr	r2, [pc, #536]	@ (800384c <HAL_ADC_Start_IT+0x25c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00e      	beq.n	8003656 <HAL_ADC_Start_IT+0x66>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a84      	ldr	r2, [pc, #528]	@ (8003850 <HAL_ADC_Start_IT+0x260>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d009      	beq.n	8003656 <HAL_ADC_Start_IT+0x66>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a83      	ldr	r2, [pc, #524]	@ (8003854 <HAL_ADC_Start_IT+0x264>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <HAL_ADC_Start_IT+0x66>
 800364c:	f44f 61db 	mov.w	r1, #1752	@ 0x6d8
 8003650:	4881      	ldr	r0, [pc, #516]	@ (8003858 <HAL_ADC_Start_IT+0x268>)
 8003652:	f7fe fde7 	bl	8002224 <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fb02 	bl	8002c64 <LL_ADC_REG_IsConversionOngoing>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 8136 	bne.w	80038d4 <HAL_ADC_Start_IT+0x2e4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_ADC_Start_IT+0x86>
 8003672:	2302      	movs	r3, #2
 8003674:	e131      	b.n	80038da <HAL_ADC_Start_IT+0x2ea>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f001 fbd0 	bl	8004e24 <ADC_Enable>
 8003684:	4603      	mov	r3, r0
 8003686:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f040 811d 	bne.w	80038ca <HAL_ADC_Start_IT+0x2da>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003694:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a65      	ldr	r2, [pc, #404]	@ (8003840 <HAL_ADC_Start_IT+0x250>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d009      	beq.n	80036c2 <HAL_ADC_Start_IT+0xd2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a67      	ldr	r2, [pc, #412]	@ (8003850 <HAL_ADC_Start_IT+0x260>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d002      	beq.n	80036be <HAL_ADC_Start_IT+0xce>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	e003      	b.n	80036c6 <HAL_ADC_Start_IT+0xd6>
 80036be:	4b63      	ldr	r3, [pc, #396]	@ (800384c <HAL_ADC_Start_IT+0x25c>)
 80036c0:	e001      	b.n	80036c6 <HAL_ADC_Start_IT+0xd6>
 80036c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d002      	beq.n	80036d4 <HAL_ADC_Start_IT+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <HAL_ADC_Start_IT+0xf0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d006      	beq.n	80036fa <HAL_ADC_Start_IT+0x10a>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f0:	f023 0206 	bic.w	r2, r3, #6
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	661a      	str	r2, [r3, #96]	@ 0x60
 80036f8:	e002      	b.n	8003700 <HAL_ADC_Start_IT+0x110>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	221c      	movs	r2, #28
 8003706:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 021c 	bic.w	r2, r2, #28
 800371e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b08      	cmp	r3, #8
 8003726:	d108      	bne.n	800373a <HAL_ADC_Start_IT+0x14a>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0208 	orr.w	r2, r2, #8
 8003736:	605a      	str	r2, [r3, #4]
          break;
 8003738:	e008      	b.n	800374c <HAL_ADC_Start_IT+0x15c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0204 	orr.w	r2, r2, #4
 8003748:	605a      	str	r2, [r3, #4]
          break;
 800374a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d107      	bne.n	8003764 <HAL_ADC_Start_IT+0x174>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0210 	orr.w	r2, r2, #16
 8003762:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a35      	ldr	r2, [pc, #212]	@ (8003840 <HAL_ADC_Start_IT+0x250>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d009      	beq.n	8003782 <HAL_ADC_Start_IT+0x192>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a37      	ldr	r2, [pc, #220]	@ (8003850 <HAL_ADC_Start_IT+0x260>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d002      	beq.n	800377e <HAL_ADC_Start_IT+0x18e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	e003      	b.n	8003786 <HAL_ADC_Start_IT+0x196>
 800377e:	4b33      	ldr	r3, [pc, #204]	@ (800384c <HAL_ADC_Start_IT+0x25c>)
 8003780:	e001      	b.n	8003786 <HAL_ADC_Start_IT+0x196>
 8003782:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	4293      	cmp	r3, r2
 800378c:	d008      	beq.n	80037a0 <HAL_ADC_Start_IT+0x1b0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_ADC_Start_IT+0x1b0>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b05      	cmp	r3, #5
 8003798:	d002      	beq.n	80037a0 <HAL_ADC_Start_IT+0x1b0>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2b09      	cmp	r3, #9
 800379e:	d13a      	bne.n	8003816 <HAL_ADC_Start_IT+0x226>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d02d      	beq.n	800380a <HAL_ADC_Start_IT+0x21a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80037b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d110      	bne.n	80037e8 <HAL_ADC_Start_IT+0x1f8>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0220 	bic.w	r2, r2, #32
 80037d4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037e4:	605a      	str	r2, [r3, #4]
              break;
 80037e6:	e010      	b.n	800380a <HAL_ADC_Start_IT+0x21a>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037f6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0220 	orr.w	r2, r2, #32
 8003806:	605a      	str	r2, [r3, #4]
              break;
 8003808:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fa14 	bl	8002c3c <LL_ADC_REG_StartConversion>
 8003814:	e060      	b.n	80038d8 <HAL_ADC_Start_IT+0x2e8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a06      	ldr	r2, [pc, #24]	@ (8003840 <HAL_ADC_Start_IT+0x250>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d017      	beq.n	800385c <HAL_ADC_Start_IT+0x26c>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a07      	ldr	r2, [pc, #28]	@ (8003850 <HAL_ADC_Start_IT+0x260>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d002      	beq.n	800383c <HAL_ADC_Start_IT+0x24c>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	e011      	b.n	8003860 <HAL_ADC_Start_IT+0x270>
 800383c:	4b03      	ldr	r3, [pc, #12]	@ (800384c <HAL_ADC_Start_IT+0x25c>)
 800383e:	e00f      	b.n	8003860 <HAL_ADC_Start_IT+0x270>
 8003840:	50000100 	.word	0x50000100
 8003844:	50000300 	.word	0x50000300
 8003848:	50000700 	.word	0x50000700
 800384c:	50000400 	.word	0x50000400
 8003850:	50000500 	.word	0x50000500
 8003854:	50000600 	.word	0x50000600
 8003858:	08013f38 	.word	0x08013f38
 800385c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003860:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d034      	beq.n	80038d8 <HAL_ADC_Start_IT+0x2e8>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003872:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003876:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b08      	cmp	r3, #8
 8003884:	d110      	bne.n	80038a8 <HAL_ADC_Start_IT+0x2b8>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0220 	bic.w	r2, r2, #32
 8003894:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038a4:	605a      	str	r2, [r3, #4]
              break;
 80038a6:	e017      	b.n	80038d8 <HAL_ADC_Start_IT+0x2e8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038b6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0220 	orr.w	r2, r2, #32
 80038c6:	605a      	str	r2, [r3, #4]
              break;
 80038c8:	e006      	b.n	80038d8 <HAL_ADC_Start_IT+0x2e8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80038d2:	e001      	b.n	80038d8 <HAL_ADC_Start_IT+0x2e8>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
 80038d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop

080038e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f4:	d018      	beq.n	8003928 <HAL_ADC_GetValue+0x44>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a0f      	ldr	r2, [pc, #60]	@ (8003938 <HAL_ADC_GetValue+0x54>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <HAL_ADC_GetValue+0x44>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0d      	ldr	r2, [pc, #52]	@ (800393c <HAL_ADC_GetValue+0x58>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00e      	beq.n	8003928 <HAL_ADC_GetValue+0x44>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a0c      	ldr	r2, [pc, #48]	@ (8003940 <HAL_ADC_GetValue+0x5c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d009      	beq.n	8003928 <HAL_ADC_GetValue+0x44>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0a      	ldr	r2, [pc, #40]	@ (8003944 <HAL_ADC_GetValue+0x60>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_ADC_GetValue+0x44>
 800391e:	f640 01b9 	movw	r1, #2233	@ 0x8b9
 8003922:	4809      	ldr	r0, [pc, #36]	@ (8003948 <HAL_ADC_GetValue+0x64>)
 8003924:	f7fe fc7e 	bl	8002224 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	50000100 	.word	0x50000100
 800393c:	50000400 	.word	0x50000400
 8003940:	50000500 	.word	0x50000500
 8003944:	50000600 	.word	0x50000600
 8003948:	08013f38 	.word	0x08013f38

0800394c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	@ 0x28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003954:	2300      	movs	r3, #0
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003970:	d004      	beq.n	800397c <HAL_ADC_IRQHandler+0x30>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a72      	ldr	r2, [pc, #456]	@ (8003b40 <HAL_ADC_IRQHandler+0x1f4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d101      	bne.n	8003980 <HAL_ADC_IRQHandler+0x34>
 800397c:	4b71      	ldr	r3, [pc, #452]	@ (8003b44 <HAL_ADC_IRQHandler+0x1f8>)
 800397e:	e000      	b.n	8003982 <HAL_ADC_IRQHandler+0x36>
 8003980:	4b71      	ldr	r3, [pc, #452]	@ (8003b48 <HAL_ADC_IRQHandler+0x1fc>)
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff f8a2 	bl	8002acc <LL_ADC_GetMultimode>
 8003988:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003992:	d018      	beq.n	80039c6 <HAL_ADC_IRQHandler+0x7a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a69      	ldr	r2, [pc, #420]	@ (8003b40 <HAL_ADC_IRQHandler+0x1f4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d013      	beq.n	80039c6 <HAL_ADC_IRQHandler+0x7a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a6a      	ldr	r2, [pc, #424]	@ (8003b4c <HAL_ADC_IRQHandler+0x200>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00e      	beq.n	80039c6 <HAL_ADC_IRQHandler+0x7a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a68      	ldr	r2, [pc, #416]	@ (8003b50 <HAL_ADC_IRQHandler+0x204>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d009      	beq.n	80039c6 <HAL_ADC_IRQHandler+0x7a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a67      	ldr	r2, [pc, #412]	@ (8003b54 <HAL_ADC_IRQHandler+0x208>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d004      	beq.n	80039c6 <HAL_ADC_IRQHandler+0x7a>
 80039bc:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 80039c0:	4865      	ldr	r0, [pc, #404]	@ (8003b58 <HAL_ADC_IRQHandler+0x20c>)
 80039c2:	f7fe fc2f 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d008      	beq.n	80039e0 <HAL_ADC_IRQHandler+0x94>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d004      	beq.n	80039e0 <HAL_ADC_IRQHandler+0x94>
 80039d6:	f640 1101 	movw	r1, #2305	@ 0x901
 80039da:	485f      	ldr	r0, [pc, #380]	@ (8003b58 <HAL_ADC_IRQHandler+0x20c>)
 80039dc:	f7fe fc22 	bl	8002224 <assert_failed>

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d017      	beq.n	8003a1a <HAL_ADC_IRQHandler+0xce>
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d012      	beq.n	8003a1a <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d105      	bne.n	8003a0c <HAL_ADC_IRQHandler+0xc0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a04:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f001 fc0f 	bl	8005230 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2202      	movs	r2, #2
 8003a18:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <HAL_ADC_IRQHandler+0xe2>
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10b      	bne.n	8003a46 <HAL_ADC_IRQHandler+0xfa>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80a4 	beq.w	8003b82 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 809e 	beq.w	8003b82 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d105      	bne.n	8003a5e <HAL_ADC_IRQHandler+0x112>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe ff90 	bl	8002988 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8082 	beq.w	8003b74 <HAL_ADC_IRQHandler+0x228>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a32      	ldr	r2, [pc, #200]	@ (8003b40 <HAL_ADC_IRQHandler+0x1f4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_ADC_IRQHandler+0x142>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a34      	ldr	r2, [pc, #208]	@ (8003b50 <HAL_ADC_IRQHandler+0x204>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d002      	beq.n	8003a8a <HAL_ADC_IRQHandler+0x13e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	e003      	b.n	8003a92 <HAL_ADC_IRQHandler+0x146>
 8003a8a:	4b30      	ldr	r3, [pc, #192]	@ (8003b4c <HAL_ADC_IRQHandler+0x200>)
 8003a8c:	e001      	b.n	8003a92 <HAL_ADC_IRQHandler+0x146>
 8003a8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d008      	beq.n	8003aac <HAL_ADC_IRQHandler+0x160>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_ADC_IRQHandler+0x160>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b05      	cmp	r3, #5
 8003aa4:	d002      	beq.n	8003aac <HAL_ADC_IRQHandler+0x160>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b09      	cmp	r3, #9
 8003aaa:	d104      	bne.n	8003ab6 <HAL_ADC_IRQHandler+0x16a>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	623b      	str	r3, [r7, #32]
 8003ab4:	e014      	b.n	8003ae0 <HAL_ADC_IRQHandler+0x194>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a21      	ldr	r2, [pc, #132]	@ (8003b40 <HAL_ADC_IRQHandler+0x1f4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d009      	beq.n	8003ad4 <HAL_ADC_IRQHandler+0x188>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a22      	ldr	r2, [pc, #136]	@ (8003b50 <HAL_ADC_IRQHandler+0x204>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d002      	beq.n	8003ad0 <HAL_ADC_IRQHandler+0x184>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	e003      	b.n	8003ad8 <HAL_ADC_IRQHandler+0x18c>
 8003ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b4c <HAL_ADC_IRQHandler+0x200>)
 8003ad2:	e001      	b.n	8003ad8 <HAL_ADC_IRQHandler+0x18c>
 8003ad4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ad8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d144      	bne.n	8003b74 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d13d      	bne.n	8003b74 <HAL_ADC_IRQHandler+0x228>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff f8b1 	bl	8002c64 <LL_ADC_REG_IsConversionOngoing>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d129      	bne.n	8003b5c <HAL_ADC_IRQHandler+0x210>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 020c 	bic.w	r2, r2, #12
 8003b16:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d121      	bne.n	8003b74 <HAL_ADC_IRQHandler+0x228>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b34:	f043 0201 	orr.w	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b3c:	e01a      	b.n	8003b74 <HAL_ADC_IRQHandler+0x228>
 8003b3e:	bf00      	nop
 8003b40:	50000100 	.word	0x50000100
 8003b44:	50000300 	.word	0x50000300
 8003b48:	50000700 	.word	0x50000700
 8003b4c:	50000400 	.word	0x50000400
 8003b50:	50000500 	.word	0x50000500
 8003b54:	50000600 	.word	0x50000600
 8003b58:	08013f38 	.word	0x08013f38
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b60:	f043 0210 	orr.w	r2, r3, #16
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6c:	f043 0201 	orr.w	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7fe f8d7 	bl	8001d28 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	220c      	movs	r2, #12
 8003b80:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <HAL_ADC_IRQHandler+0x24a>
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10b      	bne.n	8003bae <HAL_ADC_IRQHandler+0x262>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80a8 	beq.w	8003cf2 <HAL_ADC_IRQHandler+0x3a6>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80a2 	beq.w	8003cf2 <HAL_ADC_IRQHandler+0x3a6>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d105      	bne.n	8003bc6 <HAL_ADC_IRQHandler+0x27a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bbe:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe ff1b 	bl	8002a06 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003bd0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe fed6 	bl	8002988 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bdc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a7c      	ldr	r2, [pc, #496]	@ (8003dd4 <HAL_ADC_IRQHandler+0x488>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d009      	beq.n	8003bfc <HAL_ADC_IRQHandler+0x2b0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a7a      	ldr	r2, [pc, #488]	@ (8003dd8 <HAL_ADC_IRQHandler+0x48c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d002      	beq.n	8003bf8 <HAL_ADC_IRQHandler+0x2ac>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	e003      	b.n	8003c00 <HAL_ADC_IRQHandler+0x2b4>
 8003bf8:	4b78      	ldr	r3, [pc, #480]	@ (8003ddc <HAL_ADC_IRQHandler+0x490>)
 8003bfa:	e001      	b.n	8003c00 <HAL_ADC_IRQHandler+0x2b4>
 8003bfc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d008      	beq.n	8003c1a <HAL_ADC_IRQHandler+0x2ce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_ADC_IRQHandler+0x2ce>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d002      	beq.n	8003c1a <HAL_ADC_IRQHandler+0x2ce>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2b07      	cmp	r3, #7
 8003c18:	d104      	bne.n	8003c24 <HAL_ADC_IRQHandler+0x2d8>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	623b      	str	r3, [r7, #32]
 8003c22:	e014      	b.n	8003c4e <HAL_ADC_IRQHandler+0x302>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a6a      	ldr	r2, [pc, #424]	@ (8003dd4 <HAL_ADC_IRQHandler+0x488>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d009      	beq.n	8003c42 <HAL_ADC_IRQHandler+0x2f6>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a69      	ldr	r2, [pc, #420]	@ (8003dd8 <HAL_ADC_IRQHandler+0x48c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d002      	beq.n	8003c3e <HAL_ADC_IRQHandler+0x2f2>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	e003      	b.n	8003c46 <HAL_ADC_IRQHandler+0x2fa>
 8003c3e:	4b67      	ldr	r3, [pc, #412]	@ (8003ddc <HAL_ADC_IRQHandler+0x490>)
 8003c40:	e001      	b.n	8003c46 <HAL_ADC_IRQHandler+0x2fa>
 8003c42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c46:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d047      	beq.n	8003ce4 <HAL_ADC_IRQHandler+0x398>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <HAL_ADC_IRQHandler+0x322>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d03f      	beq.n	8003ce4 <HAL_ADC_IRQHandler+0x398>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d13a      	bne.n	8003ce4 <HAL_ADC_IRQHandler+0x398>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c78:	2b40      	cmp	r3, #64	@ 0x40
 8003c7a:	d133      	bne.n	8003ce4 <HAL_ADC_IRQHandler+0x398>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d12e      	bne.n	8003ce4 <HAL_ADC_IRQHandler+0x398>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe fffd 	bl	8002c8a <LL_ADC_INJ_IsConversionOngoing>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d11a      	bne.n	8003ccc <HAL_ADC_IRQHandler+0x380>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ca4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003caa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d112      	bne.n	8003ce4 <HAL_ADC_IRQHandler+0x398>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc2:	f043 0201 	orr.w	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cca:	e00b      	b.n	8003ce4 <HAL_ADC_IRQHandler+0x398>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd0:	f043 0210 	orr.w	r2, r3, #16
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cdc:	f043 0201 	orr.w	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f001 fa7b 	bl	80051e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2260      	movs	r2, #96	@ 0x60
 8003cf0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d011      	beq.n	8003d20 <HAL_ADC_IRQHandler+0x3d4>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00c      	beq.n	8003d20 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f8aa 	bl	8003e6c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2280      	movs	r2, #128	@ 0x80
 8003d1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d012      	beq.n	8003d50 <HAL_ADC_IRQHandler+0x404>
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <HAL_ADC_IRQHandler+0x404>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d38:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f001 fa61 	bl	8005208 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d012      	beq.n	8003d80 <HAL_ADC_IRQHandler+0x434>
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00d      	beq.n	8003d80 <HAL_ADC_IRQHandler+0x434>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d68:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f001 fa53 	bl	800521c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d04d      	beq.n	8003e26 <HAL_ADC_IRQHandler+0x4da>
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d048      	beq.n	8003e26 <HAL_ADC_IRQHandler+0x4da>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d102      	bne.n	8003da2 <HAL_ADC_IRQHandler+0x456>
    {
      overrun_error = 1UL;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da0:	e02b      	b.n	8003dfa <HAL_ADC_IRQHandler+0x4ae>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01f      	beq.n	8003de8 <HAL_ADC_IRQHandler+0x49c>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003db0:	d004      	beq.n	8003dbc <HAL_ADC_IRQHandler+0x470>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a07      	ldr	r2, [pc, #28]	@ (8003dd4 <HAL_ADC_IRQHandler+0x488>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d101      	bne.n	8003dc0 <HAL_ADC_IRQHandler+0x474>
 8003dbc:	4b08      	ldr	r3, [pc, #32]	@ (8003de0 <HAL_ADC_IRQHandler+0x494>)
 8003dbe:	e000      	b.n	8003dc2 <HAL_ADC_IRQHandler+0x476>
 8003dc0:	4b08      	ldr	r3, [pc, #32]	@ (8003de4 <HAL_ADC_IRQHandler+0x498>)
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe fe90 	bl	8002ae8 <LL_ADC_GetMultiDMATransfer>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d015      	beq.n	8003dfa <HAL_ADC_IRQHandler+0x4ae>
        {
          overrun_error = 1UL;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd2:	e012      	b.n	8003dfa <HAL_ADC_IRQHandler+0x4ae>
 8003dd4:	50000100 	.word	0x50000100
 8003dd8:	50000500 	.word	0x50000500
 8003ddc:	50000400 	.word	0x50000400
 8003de0:	50000300 	.word	0x50000300
 8003de4:	50000700 	.word	0x50000700
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_ADC_IRQHandler+0x4ae>
        {
          overrun_error = 1UL;
 8003df6:	2301      	movs	r3, #1
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d10e      	bne.n	8003e1e <HAL_ADC_IRQHandler+0x4d2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e04:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e10:	f043 0202 	orr.w	r2, r3, #2
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f831 	bl	8003e80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2210      	movs	r2, #16
 8003e24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d018      	beq.n	8003e62 <HAL_ADC_IRQHandler+0x516>
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d013      	beq.n	8003e62 <HAL_ADC_IRQHandler+0x516>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4a:	f043 0208 	orr.w	r2, r3, #8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f001 f9c9 	bl	80051f4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003e62:	bf00      	nop
 8003e64:	3728      	adds	r7, #40	@ 0x28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop

08003e6c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003e94:	b590      	push	{r4, r7, lr}
 8003e96:	b0b7      	sub	sp, #220	@ 0xdc
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eb0:	d018      	beq.n	8003ee4 <HAL_ADC_ConfigChannel+0x50>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a93      	ldr	r2, [pc, #588]	@ (8004104 <HAL_ADC_ConfigChannel+0x270>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d013      	beq.n	8003ee4 <HAL_ADC_ConfigChannel+0x50>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a91      	ldr	r2, [pc, #580]	@ (8004108 <HAL_ADC_ConfigChannel+0x274>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00e      	beq.n	8003ee4 <HAL_ADC_ConfigChannel+0x50>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a90      	ldr	r2, [pc, #576]	@ (800410c <HAL_ADC_ConfigChannel+0x278>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d009      	beq.n	8003ee4 <HAL_ADC_ConfigChannel+0x50>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a8e      	ldr	r2, [pc, #568]	@ (8004110 <HAL_ADC_ConfigChannel+0x27c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d004      	beq.n	8003ee4 <HAL_ADC_ConfigChannel+0x50>
 8003eda:	f640 21d2 	movw	r1, #2770	@ 0xad2
 8003ede:	488d      	ldr	r0, [pc, #564]	@ (8004114 <HAL_ADC_ConfigChannel+0x280>)
 8003ee0:	f7fe f9a0 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b06      	cmp	r3, #6
 8003eea:	d04f      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xf8>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b0c      	cmp	r3, #12
 8003ef2:	d04b      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xf8>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b12      	cmp	r3, #18
 8003efa:	d047      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xf8>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b18      	cmp	r3, #24
 8003f02:	d043      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xf8>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f0c:	d03e      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xf8>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8003f16:	d039      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xf8>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8003f20:	d034      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xf8>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8003f2a:	d02f      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xf8>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003f34:	d02a      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xf8>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f3e:	d025      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xf8>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f240 2206 	movw	r2, #518	@ 0x206
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d01f      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xf8>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 8003f54:	d01a      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xf8>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f240 2212 	movw	r2, #530	@ 0x212
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d014      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xf8>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8003f6a:	d00f      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xf8>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f74:	d00a      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xf8>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f240 3206 	movw	r2, #774	@ 0x306
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0xf8>
 8003f82:	f640 21d3 	movw	r1, #2771	@ 0xad3
 8003f86:	4863      	ldr	r0, [pc, #396]	@ (8004114 <HAL_ADC_ConfigChannel+0x280>)
 8003f88:	f7fe f94c 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(pConfig->SamplingTime));
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d025      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x14c>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f9c:	d020      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x14c>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d01c      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x14c>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d018      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x14c>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d014      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x14c>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d010      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x14c>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b05      	cmp	r3, #5
 8003fc4:	d00c      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x14c>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b06      	cmp	r3, #6
 8003fcc:	d008      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x14c>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b07      	cmp	r3, #7
 8003fd4:	d004      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x14c>
 8003fd6:	f640 21d4 	movw	r1, #2772	@ 0xad4
 8003fda:	484e      	ldr	r0, [pc, #312]	@ (8004114 <HAL_ADC_ConfigChannel+0x280>)
 8003fdc:	f7fe f922 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(pConfig->SingleDiff));
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003fe6:	d009      	beq.n	8003ffc <HAL_ADC_ConfigChannel+0x168>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4a4a      	ldr	r2, [pc, #296]	@ (8004118 <HAL_ADC_ConfigChannel+0x284>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <HAL_ADC_ConfigChannel+0x168>
 8003ff2:	f640 21d5 	movw	r1, #2773	@ 0xad5
 8003ff6:	4847      	ldr	r0, [pc, #284]	@ (8004114 <HAL_ADC_ConfigChannel+0x280>)
 8003ff8:	f7fe f914 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(pConfig->OffsetNumber));
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	2b04      	cmp	r3, #4
 8004002:	d014      	beq.n	800402e <HAL_ADC_ConfigChannel+0x19a>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d010      	beq.n	800402e <HAL_ADC_ConfigChannel+0x19a>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d00c      	beq.n	800402e <HAL_ADC_ConfigChannel+0x19a>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d008      	beq.n	800402e <HAL_ADC_ConfigChannel+0x19a>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d004      	beq.n	800402e <HAL_ADC_ConfigChannel+0x19a>
 8004024:	f640 21d6 	movw	r1, #2774	@ 0xad6
 8004028:	483a      	ldr	r0, [pc, #232]	@ (8004114 <HAL_ADC_ConfigChannel+0x280>)
 800402a:	f7fe f8fb 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pConfig->Offset));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	695c      	ldr	r4, [r3, #20]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fbfa 	bl	8002830 <LL_ADC_GetResolution>
 800403c:	4603      	mov	r3, r0
 800403e:	089b      	lsrs	r3, r3, #2
 8004040:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
 8004048:	429c      	cmp	r4, r3
 800404a:	d904      	bls.n	8004056 <HAL_ADC_ConfigChannel+0x1c2>
 800404c:	f640 21d7 	movw	r1, #2775	@ 0xad7
 8004050:	4830      	ldr	r0, [pc, #192]	@ (8004114 <HAL_ADC_ConfigChannel+0x280>)
 8004052:	f7fe f8e7 	bl	8002224 <assert_failed>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((pConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b04      	cmp	r3, #4
 800405c:	d009      	beq.n	8004072 <HAL_ADC_ConfigChannel+0x1de>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004064:	2b01      	cmp	r3, #1
 8004066:	d104      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x1de>
 8004068:	f640 21db 	movw	r1, #2779	@ 0xadb
 800406c:	4829      	ldr	r0, [pc, #164]	@ (8004114 <HAL_ADC_ConfigChannel+0x280>)
 800406e:	f7fe f8d9 	bl	8002224 <assert_failed>

  /* Verification of channel number */
  if (pConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	4a28      	ldr	r2, [pc, #160]	@ (8004118 <HAL_ADC_ConfigChannel+0x284>)
 8004078:	4293      	cmp	r3, r2
 800407a:	f000 8189 	beq.w	8004390 <HAL_ADC_ConfigChannel+0x4fc>
  {
    assert_param(IS_ADC_CHANNEL(hadc, pConfig->Channel));
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b01      	cmp	r3, #1
 8004084:	f000 8253 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a23      	ldr	r2, [pc, #140]	@ (800411c <HAL_ADC_ConfigChannel+0x288>)
 800408e:	4293      	cmp	r3, r2
 8004090:	f000 824d 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a21      	ldr	r2, [pc, #132]	@ (8004120 <HAL_ADC_ConfigChannel+0x28c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	f000 8247 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004124 <HAL_ADC_ConfigChannel+0x290>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	f000 8241 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004128 <HAL_ADC_ConfigChannel+0x294>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	f000 823b 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1b      	ldr	r2, [pc, #108]	@ (800412c <HAL_ADC_ConfigChannel+0x298>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	f000 8235 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a19      	ldr	r2, [pc, #100]	@ (8004130 <HAL_ADC_ConfigChannel+0x29c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	f000 822f 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a17      	ldr	r2, [pc, #92]	@ (8004134 <HAL_ADC_ConfigChannel+0x2a0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	f000 8229 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a15      	ldr	r2, [pc, #84]	@ (8004138 <HAL_ADC_ConfigChannel+0x2a4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	f000 8223 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a13      	ldr	r2, [pc, #76]	@ (800413c <HAL_ADC_ConfigChannel+0x2a8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	f000 821d 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a11      	ldr	r2, [pc, #68]	@ (8004140 <HAL_ADC_ConfigChannel+0x2ac>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	f000 8217 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004100:	e020      	b.n	8004144 <HAL_ADC_ConfigChannel+0x2b0>
 8004102:	bf00      	nop
 8004104:	50000100 	.word	0x50000100
 8004108:	50000400 	.word	0x50000400
 800410c:	50000500 	.word	0x50000500
 8004110:	50000600 	.word	0x50000600
 8004114:	08013f38 	.word	0x08013f38
 8004118:	407f0000 	.word	0x407f0000
 800411c:	04300002 	.word	0x04300002
 8004120:	08600004 	.word	0x08600004
 8004124:	19200040 	.word	0x19200040
 8004128:	1d500080 	.word	0x1d500080
 800412c:	21800100 	.word	0x21800100
 8004130:	25b00200 	.word	0x25b00200
 8004134:	2a000400 	.word	0x2a000400
 8004138:	2e300800 	.word	0x2e300800
 800413c:	32601000 	.word	0x32601000
 8004140:	3ac04000 	.word	0x3ac04000
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a7a      	ldr	r2, [pc, #488]	@ (8004334 <HAL_ADC_ConfigChannel+0x4a0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	f000 81ef 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004158:	d129      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x31a>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a76      	ldr	r2, [pc, #472]	@ (8004338 <HAL_ADC_ConfigChannel+0x4a4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	f000 81e4 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a74      	ldr	r2, [pc, #464]	@ (800433c <HAL_ADC_ConfigChannel+0x4a8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	f000 81de 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a72      	ldr	r2, [pc, #456]	@ (8004340 <HAL_ADC_ConfigChannel+0x4ac>)
 8004178:	4293      	cmp	r3, r2
 800417a:	f000 81d8 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a70      	ldr	r2, [pc, #448]	@ (8004344 <HAL_ADC_ConfigChannel+0x4b0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	f000 81d2 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a6e      	ldr	r2, [pc, #440]	@ (8004348 <HAL_ADC_ConfigChannel+0x4b4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	f000 81cc 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a6c      	ldr	r2, [pc, #432]	@ (800434c <HAL_ADC_ConfigChannel+0x4b8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	f000 81c6 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a6a      	ldr	r2, [pc, #424]	@ (8004350 <HAL_ADC_ConfigChannel+0x4bc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	f000 81c0 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a68      	ldr	r2, [pc, #416]	@ (8004354 <HAL_ADC_ConfigChannel+0x4c0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d129      	bne.n	800420c <HAL_ADC_ConfigChannel+0x378>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a5e      	ldr	r2, [pc, #376]	@ (8004338 <HAL_ADC_ConfigChannel+0x4a4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	f000 81b5 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a5c      	ldr	r2, [pc, #368]	@ (800433c <HAL_ADC_ConfigChannel+0x4a8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	f000 81af 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a5a      	ldr	r2, [pc, #360]	@ (8004340 <HAL_ADC_ConfigChannel+0x4ac>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	f000 81a9 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a5d      	ldr	r2, [pc, #372]	@ (8004358 <HAL_ADC_ConfigChannel+0x4c4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	f000 81a3 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a5b      	ldr	r2, [pc, #364]	@ (800435c <HAL_ADC_ConfigChannel+0x4c8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	f000 819d 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a59      	ldr	r2, [pc, #356]	@ (8004360 <HAL_ADC_ConfigChannel+0x4cc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	f000 8197 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a57      	ldr	r2, [pc, #348]	@ (8004364 <HAL_ADC_ConfigChannel+0x4d0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	f000 8191 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a55      	ldr	r2, [pc, #340]	@ (8004368 <HAL_ADC_ConfigChannel+0x4d4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d129      	bne.n	800426a <HAL_ADC_ConfigChannel+0x3d6>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a47      	ldr	r2, [pc, #284]	@ (8004338 <HAL_ADC_ConfigChannel+0x4a4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	f000 8186 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a45      	ldr	r2, [pc, #276]	@ (800433c <HAL_ADC_ConfigChannel+0x4a8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	f000 8180 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a43      	ldr	r2, [pc, #268]	@ (8004340 <HAL_ADC_ConfigChannel+0x4ac>)
 8004234:	4293      	cmp	r3, r2
 8004236:	f000 817a 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a4b      	ldr	r2, [pc, #300]	@ (800436c <HAL_ADC_ConfigChannel+0x4d8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	f000 8174 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a49      	ldr	r2, [pc, #292]	@ (8004370 <HAL_ADC_ConfigChannel+0x4dc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	f000 816e 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a3d      	ldr	r2, [pc, #244]	@ (800434c <HAL_ADC_ConfigChannel+0x4b8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	f000 8168 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a3b      	ldr	r2, [pc, #236]	@ (8004350 <HAL_ADC_ConfigChannel+0x4bc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	f000 8162 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a41      	ldr	r2, [pc, #260]	@ (8004374 <HAL_ADC_ConfigChannel+0x4e0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d129      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x434>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a2f      	ldr	r2, [pc, #188]	@ (8004338 <HAL_ADC_ConfigChannel+0x4a4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	f000 8157 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a2d      	ldr	r2, [pc, #180]	@ (800433c <HAL_ADC_ConfigChannel+0x4a8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	f000 8151 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a2b      	ldr	r2, [pc, #172]	@ (8004340 <HAL_ADC_ConfigChannel+0x4ac>)
 8004292:	4293      	cmp	r3, r2
 8004294:	f000 814b 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a2e      	ldr	r2, [pc, #184]	@ (8004358 <HAL_ADC_ConfigChannel+0x4c4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	f000 8145 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a31      	ldr	r2, [pc, #196]	@ (8004370 <HAL_ADC_ConfigChannel+0x4dc>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	f000 813f 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a30      	ldr	r2, [pc, #192]	@ (8004378 <HAL_ADC_ConfigChannel+0x4e4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	f000 8139 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a23      	ldr	r2, [pc, #140]	@ (8004350 <HAL_ADC_ConfigChannel+0x4bc>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	f000 8133 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a2b      	ldr	r2, [pc, #172]	@ (800437c <HAL_ADC_ConfigChannel+0x4e8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d129      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x492>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004380 <HAL_ADC_ConfigChannel+0x4ec>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	f000 8128 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a28      	ldr	r2, [pc, #160]	@ (8004384 <HAL_ADC_ConfigChannel+0x4f0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	f000 8122 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a26      	ldr	r2, [pc, #152]	@ (8004388 <HAL_ADC_ConfigChannel+0x4f4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	f000 811c 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a17      	ldr	r2, [pc, #92]	@ (8004358 <HAL_ADC_ConfigChannel+0x4c4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	f000 8116 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1a      	ldr	r2, [pc, #104]	@ (8004370 <HAL_ADC_ConfigChannel+0x4dc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	f000 8110 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a0e      	ldr	r2, [pc, #56]	@ (800434c <HAL_ADC_ConfigChannel+0x4b8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	f000 810a 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a0c      	ldr	r2, [pc, #48]	@ (8004350 <HAL_ADC_ConfigChannel+0x4bc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	f000 8104 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004326:	f44f 612e 	mov.w	r1, #2784	@ 0xae0
 800432a:	4818      	ldr	r0, [pc, #96]	@ (800438c <HAL_ADC_ConfigChannel+0x4f8>)
 800432c:	f7fd ff7a 	bl	8002224 <assert_failed>
 8004330:	e0fd      	b.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004332:	bf00      	nop
 8004334:	3ef08000 	.word	0x3ef08000
 8004338:	0c900008 	.word	0x0c900008
 800433c:	10c00010 	.word	0x10c00010
 8004340:	14f00020 	.word	0x14f00020
 8004344:	b6902000 	.word	0xb6902000
 8004348:	c3210000 	.word	0xc3210000
 800434c:	c7520000 	.word	0xc7520000
 8004350:	cb840000 	.word	0xcb840000
 8004354:	50000100 	.word	0x50000100
 8004358:	36902000 	.word	0x36902000
 800435c:	c3290000 	.word	0xc3290000
 8004360:	47520000 	.word	0x47520000
 8004364:	cb8c0000 	.word	0xcb8c0000
 8004368:	50000400 	.word	0x50000400
 800436c:	b6982000 	.word	0xb6982000
 8004370:	43210000 	.word	0x43210000
 8004374:	50000500 	.word	0x50000500
 8004378:	c75a0000 	.word	0xc75a0000
 800437c:	50000600 	.word	0x50000600
 8004380:	8c900008 	.word	0x8c900008
 8004384:	90c00010 	.word	0x90c00010
 8004388:	94f00020 	.word	0x94f00020
 800438c:	08013f38 	.word	0x08013f38
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a8b      	ldr	r2, [pc, #556]	@ (80045c4 <HAL_ADC_ConfigChannel+0x730>)
 8004396:	4293      	cmp	r3, r2
 8004398:	f000 80c9 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a89      	ldr	r2, [pc, #548]	@ (80045c8 <HAL_ADC_ConfigChannel+0x734>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	f000 80c3 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a87      	ldr	r2, [pc, #540]	@ (80045cc <HAL_ADC_ConfigChannel+0x738>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	f000 80bd 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a85      	ldr	r2, [pc, #532]	@ (80045d0 <HAL_ADC_ConfigChannel+0x73c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	f000 80b7 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a83      	ldr	r2, [pc, #524]	@ (80045d4 <HAL_ADC_ConfigChannel+0x740>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	f000 80b1 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a81      	ldr	r2, [pc, #516]	@ (80045d8 <HAL_ADC_ConfigChannel+0x744>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	f000 80ab 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a7f      	ldr	r2, [pc, #508]	@ (80045dc <HAL_ADC_ConfigChannel+0x748>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	f000 80a5 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a7d      	ldr	r2, [pc, #500]	@ (80045e0 <HAL_ADC_ConfigChannel+0x74c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	f000 809f 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043f8:	d117      	bne.n	800442a <HAL_ADC_ConfigChannel+0x596>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a79      	ldr	r2, [pc, #484]	@ (80045e4 <HAL_ADC_ConfigChannel+0x750>)
 8004400:	4293      	cmp	r3, r2
 8004402:	f000 8094 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a77      	ldr	r2, [pc, #476]	@ (80045e8 <HAL_ADC_ConfigChannel+0x754>)
 800440c:	4293      	cmp	r3, r2
 800440e:	f000 808e 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a75      	ldr	r2, [pc, #468]	@ (80045ec <HAL_ADC_ConfigChannel+0x758>)
 8004418:	4293      	cmp	r3, r2
 800441a:	f000 8088 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a73      	ldr	r2, [pc, #460]	@ (80045f0 <HAL_ADC_ConfigChannel+0x75c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	f000 8082 	beq.w	800452e <HAL_ADC_ConfigChannel+0x69a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a71      	ldr	r2, [pc, #452]	@ (80045f4 <HAL_ADC_ConfigChannel+0x760>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d11d      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x5dc>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a6a      	ldr	r2, [pc, #424]	@ (80045e4 <HAL_ADC_ConfigChannel+0x750>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d077      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a69      	ldr	r2, [pc, #420]	@ (80045e8 <HAL_ADC_ConfigChannel+0x754>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d072      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a67      	ldr	r2, [pc, #412]	@ (80045ec <HAL_ADC_ConfigChannel+0x758>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d06d      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a66      	ldr	r2, [pc, #408]	@ (80045f0 <HAL_ADC_ConfigChannel+0x75c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d068      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a65      	ldr	r2, [pc, #404]	@ (80045f8 <HAL_ADC_ConfigChannel+0x764>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d063      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a64      	ldr	r2, [pc, #400]	@ (80045fc <HAL_ADC_ConfigChannel+0x768>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d05e      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a62      	ldr	r2, [pc, #392]	@ (8004600 <HAL_ADC_ConfigChannel+0x76c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d118      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x618>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a59      	ldr	r2, [pc, #356]	@ (80045e4 <HAL_ADC_ConfigChannel+0x750>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d054      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a57      	ldr	r2, [pc, #348]	@ (80045e8 <HAL_ADC_ConfigChannel+0x754>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d04f      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a56      	ldr	r2, [pc, #344]	@ (80045ec <HAL_ADC_ConfigChannel+0x758>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d04a      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a54      	ldr	r2, [pc, #336]	@ (80045f0 <HAL_ADC_ConfigChannel+0x75c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d045      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a57      	ldr	r2, [pc, #348]	@ (8004604 <HAL_ADC_ConfigChannel+0x770>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d040      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a55      	ldr	r2, [pc, #340]	@ (8004608 <HAL_ADC_ConfigChannel+0x774>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d122      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x668>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a4a      	ldr	r2, [pc, #296]	@ (80045e4 <HAL_ADC_ConfigChannel+0x750>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d036      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a48      	ldr	r2, [pc, #288]	@ (80045e8 <HAL_ADC_ConfigChannel+0x754>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d031      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a47      	ldr	r2, [pc, #284]	@ (80045ec <HAL_ADC_ConfigChannel+0x758>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d02c      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a45      	ldr	r2, [pc, #276]	@ (80045f0 <HAL_ADC_ConfigChannel+0x75c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d027      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a45      	ldr	r2, [pc, #276]	@ (80045f8 <HAL_ADC_ConfigChannel+0x764>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d022      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a43      	ldr	r2, [pc, #268]	@ (80045fc <HAL_ADC_ConfigChannel+0x768>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01d      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a43      	ldr	r2, [pc, #268]	@ (8004604 <HAL_ADC_ConfigChannel+0x770>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d018      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a42      	ldr	r2, [pc, #264]	@ (800460c <HAL_ADC_ConfigChannel+0x778>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d10e      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x690>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a3b      	ldr	r2, [pc, #236]	@ (80045f8 <HAL_ADC_ConfigChannel+0x764>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00e      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a39      	ldr	r2, [pc, #228]	@ (80045fc <HAL_ADC_ConfigChannel+0x768>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d009      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a39      	ldr	r2, [pc, #228]	@ (8004604 <HAL_ADC_ConfigChannel+0x770>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_ADC_ConfigChannel+0x69a>
 8004524:	f640 21e4 	movw	r1, #2788	@ 0xae4
 8004528:	4839      	ldr	r0, [pc, #228]	@ (8004610 <HAL_ADC_ConfigChannel+0x77c>)
 800452a:	f7fd fe7b 	bl	8002224 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004534:	2b01      	cmp	r3, #1
 8004536:	d102      	bne.n	800453e <HAL_ADC_ConfigChannel+0x6aa>
 8004538:	2302      	movs	r3, #2
 800453a:	f000 bc58 	b.w	8004dee <HAL_ADC_ConfigChannel+0xf5a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe fb8a 	bl	8002c64 <LL_ADC_REG_IsConversionOngoing>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	f040 8438 	bne.w	8004dc8 <HAL_ADC_ConfigChannel+0xf34>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	f7fe fa22 	bl	80029ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe fb78 	bl	8002c64 <LL_ADC_REG_IsConversionOngoing>
 8004574:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe fb84 	bl	8002c8a <LL_ADC_INJ_IsConversionOngoing>
 8004582:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004586:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800458a:	2b00      	cmp	r3, #0
 800458c:	f040 821f 	bne.w	80049ce <HAL_ADC_ConfigChannel+0xb3a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004590:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004594:	2b00      	cmp	r3, #0
 8004596:	f040 821a 	bne.w	80049ce <HAL_ADC_ConfigChannel+0xb3a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045a2:	d137      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x780>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2200      	movs	r2, #0
 80045ae:	4619      	mov	r1, r3
 80045b0:	f7fe fa3c 	bl	8002a2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fe f9d0 	bl	8002962 <LL_ADC_SetSamplingTimeCommonConfig>
 80045c2:	e036      	b.n	8004632 <HAL_ADC_ConfigChannel+0x79e>
 80045c4:	04300002 	.word	0x04300002
 80045c8:	19200040 	.word	0x19200040
 80045cc:	1d500080 	.word	0x1d500080
 80045d0:	21800100 	.word	0x21800100
 80045d4:	25b00200 	.word	0x25b00200
 80045d8:	2a000400 	.word	0x2a000400
 80045dc:	2e300800 	.word	0x2e300800
 80045e0:	3ac04000 	.word	0x3ac04000
 80045e4:	08600004 	.word	0x08600004
 80045e8:	0c900008 	.word	0x0c900008
 80045ec:	10c00010 	.word	0x10c00010
 80045f0:	14f00020 	.word	0x14f00020
 80045f4:	50000100 	.word	0x50000100
 80045f8:	32601000 	.word	0x32601000
 80045fc:	36902000 	.word	0x36902000
 8004600:	50000400 	.word	0x50000400
 8004604:	3ef08000 	.word	0x3ef08000
 8004608:	50000500 	.word	0x50000500
 800460c:	50000600 	.word	0x50000600
 8004610:	08013f38 	.word	0x08013f38
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	6819      	ldr	r1, [r3, #0]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	461a      	mov	r2, r3
 8004622:	f7fe fa03 	bl	8002a2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe f998 	bl	8002962 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	08db      	lsrs	r3, r3, #3
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2b04      	cmp	r3, #4
 8004652:	d03d      	beq.n	80046d0 <HAL_ADC_ConfigChannel+0x83c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	6919      	ldr	r1, [r3, #16]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004664:	f7fe f8f2 	bl	800284c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <HAL_ADC_ConfigChannel+0x7f0>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004678:	d004      	beq.n	8004684 <HAL_ADC_ConfigChannel+0x7f0>
 800467a:	f640 311c 	movw	r1, #2844	@ 0xb1c
 800467e:	48b3      	ldr	r0, [pc, #716]	@ (800494c <HAL_ADC_ConfigChannel+0xab8>)
 8004680:	f7fd fdd0 	bl	8002224 <assert_failed>
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	7f1b      	ldrb	r3, [r3, #28]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_ADC_ConfigChannel+0x80a>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	7f1b      	ldrb	r3, [r3, #28]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d004      	beq.n	800469e <HAL_ADC_ConfigChannel+0x80a>
 8004694:	f640 311d 	movw	r1, #2845	@ 0xb1d
 8004698:	48ac      	ldr	r0, [pc, #688]	@ (800494c <HAL_ADC_ConfigChannel+0xab8>)
 800469a:	f7fd fdc3 	bl	8002224 <assert_failed>
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6919      	ldr	r1, [r3, #16]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	461a      	mov	r2, r3
 80046ac:	f7fe f923 	bl	80028f6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6818      	ldr	r0, [r3, #0]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d102      	bne.n	80046c6 <HAL_ADC_ConfigChannel+0x832>
 80046c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046c4:	e000      	b.n	80046c8 <HAL_ADC_ConfigChannel+0x834>
 80046c6:	2300      	movs	r3, #0
 80046c8:	461a      	mov	r2, r3
 80046ca:	f7fe f92f 	bl	800292c <LL_ADC_SetOffsetSaturation>
 80046ce:	e17e      	b.n	80049ce <HAL_ADC_ConfigChannel+0xb3a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2100      	movs	r1, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe f8dc 	bl	8002894 <LL_ADC_GetOffsetChannel>
 80046dc:	4603      	mov	r3, r0
 80046de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x868>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2100      	movs	r1, #0
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fe f8d1 	bl	8002894 <LL_ADC_GetOffsetChannel>
 80046f2:	4603      	mov	r3, r0
 80046f4:	0e9b      	lsrs	r3, r3, #26
 80046f6:	f003 021f 	and.w	r2, r3, #31
 80046fa:	e01e      	b.n	800473a <HAL_ADC_ConfigChannel+0x8a6>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe f8c6 	bl	8002894 <LL_ADC_GetOffsetChannel>
 8004708:	4603      	mov	r3, r0
 800470a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004712:	fa93 f3a3 	rbit	r3, r3
 8004716:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800471a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800471e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004722:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_ADC_ConfigChannel+0x89a>
  {
    return 32U;
 800472a:	2320      	movs	r3, #32
 800472c:	e004      	b.n	8004738 <HAL_ADC_ConfigChannel+0x8a4>
  }
  return __builtin_clz(value);
 800472e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004732:	fab3 f383 	clz	r3, r3
 8004736:	b2db      	uxtb	r3, r3
 8004738:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004742:	2b00      	cmp	r3, #0
 8004744:	d105      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x8be>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	0e9b      	lsrs	r3, r3, #26
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	e018      	b.n	8004784 <HAL_ADC_ConfigChannel+0x8f0>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800475e:	fa93 f3a3 	rbit	r3, r3
 8004762:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800476a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800476e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_ADC_ConfigChannel+0x8e6>
    return 32U;
 8004776:	2320      	movs	r3, #32
 8004778:	e004      	b.n	8004784 <HAL_ADC_ConfigChannel+0x8f0>
  return __builtin_clz(value);
 800477a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800477e:	fab3 f383 	clz	r3, r3
 8004782:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004784:	429a      	cmp	r2, r3
 8004786:	d106      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x902>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2200      	movs	r2, #0
 800478e:	2100      	movs	r1, #0
 8004790:	4618      	mov	r0, r3
 8004792:	f7fe f895 	bl	80028c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2101      	movs	r1, #1
 800479c:	4618      	mov	r0, r3
 800479e:	f7fe f879 	bl	8002894 <LL_ADC_GetOffsetChannel>
 80047a2:	4603      	mov	r3, r0
 80047a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x92e>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2101      	movs	r1, #1
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe f86e 	bl	8002894 <LL_ADC_GetOffsetChannel>
 80047b8:	4603      	mov	r3, r0
 80047ba:	0e9b      	lsrs	r3, r3, #26
 80047bc:	f003 021f 	and.w	r2, r3, #31
 80047c0:	e01e      	b.n	8004800 <HAL_ADC_ConfigChannel+0x96c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2101      	movs	r1, #1
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fe f863 	bl	8002894 <LL_ADC_GetOffsetChannel>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80047d8:	fa93 f3a3 	rbit	r3, r3
 80047dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80047e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80047e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x960>
    return 32U;
 80047f0:	2320      	movs	r3, #32
 80047f2:	e004      	b.n	80047fe <HAL_ADC_ConfigChannel+0x96a>
  return __builtin_clz(value);
 80047f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047f8:	fab3 f383 	clz	r3, r3
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004808:	2b00      	cmp	r3, #0
 800480a:	d105      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x984>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	0e9b      	lsrs	r3, r3, #26
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	e018      	b.n	800484a <HAL_ADC_ConfigChannel+0x9b6>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004820:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004824:	fa93 f3a3 	rbit	r3, r3
 8004828:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800482c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004830:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004834:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x9ac>
    return 32U;
 800483c:	2320      	movs	r3, #32
 800483e:	e004      	b.n	800484a <HAL_ADC_ConfigChannel+0x9b6>
  return __builtin_clz(value);
 8004840:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004844:	fab3 f383 	clz	r3, r3
 8004848:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800484a:	429a      	cmp	r2, r3
 800484c:	d106      	bne.n	800485c <HAL_ADC_ConfigChannel+0x9c8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	2101      	movs	r1, #1
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe f832 	bl	80028c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2102      	movs	r1, #2
 8004862:	4618      	mov	r0, r3
 8004864:	f7fe f816 	bl	8002894 <LL_ADC_GetOffsetChannel>
 8004868:	4603      	mov	r3, r0
 800486a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x9f4>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2102      	movs	r1, #2
 8004878:	4618      	mov	r0, r3
 800487a:	f7fe f80b 	bl	8002894 <LL_ADC_GetOffsetChannel>
 800487e:	4603      	mov	r3, r0
 8004880:	0e9b      	lsrs	r3, r3, #26
 8004882:	f003 021f 	and.w	r2, r3, #31
 8004886:	e01e      	b.n	80048c6 <HAL_ADC_ConfigChannel+0xa32>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2102      	movs	r1, #2
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe f800 	bl	8002894 <LL_ADC_GetOffsetChannel>
 8004894:	4603      	mov	r3, r0
 8004896:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800489e:	fa93 f3a3 	rbit	r3, r3
 80048a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80048a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80048ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_ADC_ConfigChannel+0xa26>
    return 32U;
 80048b6:	2320      	movs	r3, #32
 80048b8:	e004      	b.n	80048c4 <HAL_ADC_ConfigChannel+0xa30>
  return __builtin_clz(value);
 80048ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80048be:	fab3 f383 	clz	r3, r3
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d105      	bne.n	80048de <HAL_ADC_ConfigChannel+0xa4a>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	0e9b      	lsrs	r3, r3, #26
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	e016      	b.n	800490c <HAL_ADC_ConfigChannel+0xa78>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048ea:	fa93 f3a3 	rbit	r3, r3
 80048ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80048f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80048f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_ADC_ConfigChannel+0xa6e>
    return 32U;
 80048fe:	2320      	movs	r3, #32
 8004900:	e004      	b.n	800490c <HAL_ADC_ConfigChannel+0xa78>
  return __builtin_clz(value);
 8004902:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800490c:	429a      	cmp	r2, r3
 800490e:	d106      	bne.n	800491e <HAL_ADC_ConfigChannel+0xa8a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2200      	movs	r2, #0
 8004916:	2102      	movs	r1, #2
 8004918:	4618      	mov	r0, r3
 800491a:	f7fd ffd1 	bl	80028c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2103      	movs	r1, #3
 8004924:	4618      	mov	r0, r3
 8004926:	f7fd ffb5 	bl	8002894 <LL_ADC_GetOffsetChannel>
 800492a:	4603      	mov	r3, r0
 800492c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10d      	bne.n	8004950 <HAL_ADC_ConfigChannel+0xabc>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2103      	movs	r1, #3
 800493a:	4618      	mov	r0, r3
 800493c:	f7fd ffaa 	bl	8002894 <LL_ADC_GetOffsetChannel>
 8004940:	4603      	mov	r3, r0
 8004942:	0e9b      	lsrs	r3, r3, #26
 8004944:	f003 021f 	and.w	r2, r3, #31
 8004948:	e01a      	b.n	8004980 <HAL_ADC_ConfigChannel+0xaec>
 800494a:	bf00      	nop
 800494c:	08013f38 	.word	0x08013f38
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2103      	movs	r1, #3
 8004956:	4618      	mov	r0, r3
 8004958:	f7fd ff9c 	bl	8002894 <LL_ADC_GetOffsetChannel>
 800495c:	4603      	mov	r3, r0
 800495e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004960:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004962:	fa93 f3a3 	rbit	r3, r3
 8004966:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004968:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800496a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800496c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_ADC_ConfigChannel+0xae2>
    return 32U;
 8004972:	2320      	movs	r3, #32
 8004974:	e003      	b.n	800497e <HAL_ADC_ConfigChannel+0xaea>
  return __builtin_clz(value);
 8004976:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004978:	fab3 f383 	clz	r3, r3
 800497c:	b2db      	uxtb	r3, r3
 800497e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004988:	2b00      	cmp	r3, #0
 800498a:	d105      	bne.n	8004998 <HAL_ADC_ConfigChannel+0xb04>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	0e9b      	lsrs	r3, r3, #26
 8004992:	f003 031f 	and.w	r3, r3, #31
 8004996:	e011      	b.n	80049bc <HAL_ADC_ConfigChannel+0xb28>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049a0:	fa93 f3a3 	rbit	r3, r3
 80049a4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80049a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80049aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0xb20>
    return 32U;
 80049b0:	2320      	movs	r3, #32
 80049b2:	e003      	b.n	80049bc <HAL_ADC_ConfigChannel+0xb28>
  return __builtin_clz(value);
 80049b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049b6:	fab3 f383 	clz	r3, r3
 80049ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80049bc:	429a      	cmp	r2, r3
 80049be:	d106      	bne.n	80049ce <HAL_ADC_ConfigChannel+0xb3a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2200      	movs	r2, #0
 80049c6:	2103      	movs	r1, #3
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fd ff79 	bl	80028c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe f90c 	bl	8002bf0 <LL_ADC_IsEnabled>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f040 813d 	bne.w	8004c5a <HAL_ADC_ConfigChannel+0xdc6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	6819      	ldr	r1, [r3, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	461a      	mov	r2, r3
 80049ee:	f7fe f849 	bl	8002a84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	4aa2      	ldr	r2, [pc, #648]	@ (8004c80 <HAL_ADC_ConfigChannel+0xdec>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	f040 812e 	bne.w	8004c5a <HAL_ADC_ConfigChannel+0xdc6>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10b      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0xb92>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	0e9b      	lsrs	r3, r3, #26
 8004a14:	3301      	adds	r3, #1
 8004a16:	f003 031f 	and.w	r3, r3, #31
 8004a1a:	2b09      	cmp	r3, #9
 8004a1c:	bf94      	ite	ls
 8004a1e:	2301      	movls	r3, #1
 8004a20:	2300      	movhi	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	e019      	b.n	8004a5a <HAL_ADC_ConfigChannel+0xbc6>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a2e:	fa93 f3a3 	rbit	r3, r3
 8004a32:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004a34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a36:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004a38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_ADC_ConfigChannel+0xbae>
    return 32U;
 8004a3e:	2320      	movs	r3, #32
 8004a40:	e003      	b.n	8004a4a <HAL_ADC_ConfigChannel+0xbb6>
  return __builtin_clz(value);
 8004a42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a44:	fab3 f383 	clz	r3, r3
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	2b09      	cmp	r3, #9
 8004a52:	bf94      	ite	ls
 8004a54:	2301      	movls	r3, #1
 8004a56:	2300      	movhi	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d079      	beq.n	8004b52 <HAL_ADC_ConfigChannel+0xcbe>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d107      	bne.n	8004a7a <HAL_ADC_ConfigChannel+0xbe6>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	0e9b      	lsrs	r3, r3, #26
 8004a70:	3301      	adds	r3, #1
 8004a72:	069b      	lsls	r3, r3, #26
 8004a74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a78:	e015      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0xc12>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a82:	fa93 f3a3 	rbit	r3, r3
 8004a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a8a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0xc02>
    return 32U;
 8004a92:	2320      	movs	r3, #32
 8004a94:	e003      	b.n	8004a9e <HAL_ADC_ConfigChannel+0xc0a>
  return __builtin_clz(value);
 8004a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a98:	fab3 f383 	clz	r3, r3
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	069b      	lsls	r3, r3, #26
 8004aa2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0xc32>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	0e9b      	lsrs	r3, r3, #26
 8004ab8:	3301      	adds	r3, #1
 8004aba:	f003 031f 	and.w	r3, r3, #31
 8004abe:	2101      	movs	r1, #1
 8004ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac4:	e017      	b.n	8004af6 <HAL_ADC_ConfigChannel+0xc62>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ace:	fa93 f3a3 	rbit	r3, r3
 8004ad2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_ADC_ConfigChannel+0xc4e>
    return 32U;
 8004ade:	2320      	movs	r3, #32
 8004ae0:	e003      	b.n	8004aea <HAL_ADC_ConfigChannel+0xc56>
  return __builtin_clz(value);
 8004ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ae4:	fab3 f383 	clz	r3, r3
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	3301      	adds	r3, #1
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	2101      	movs	r1, #1
 8004af2:	fa01 f303 	lsl.w	r3, r1, r3
 8004af6:	ea42 0103 	orr.w	r1, r2, r3
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0xc88>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	0e9b      	lsrs	r3, r3, #26
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	f003 021f 	and.w	r2, r3, #31
 8004b12:	4613      	mov	r3, r2
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	4413      	add	r3, r2
 8004b18:	051b      	lsls	r3, r3, #20
 8004b1a:	e018      	b.n	8004b4e <HAL_ADC_ConfigChannel+0xcba>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b24:	fa93 f3a3 	rbit	r3, r3
 8004b28:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0xca4>
    return 32U;
 8004b34:	2320      	movs	r3, #32
 8004b36:	e003      	b.n	8004b40 <HAL_ADC_ConfigChannel+0xcac>
  return __builtin_clz(value);
 8004b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b3a:	fab3 f383 	clz	r3, r3
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	3301      	adds	r3, #1
 8004b42:	f003 021f 	and.w	r2, r3, #31
 8004b46:	4613      	mov	r3, r2
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	4413      	add	r3, r2
 8004b4c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	e07e      	b.n	8004c50 <HAL_ADC_ConfigChannel+0xdbc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d107      	bne.n	8004b6e <HAL_ADC_ConfigChannel+0xcda>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	0e9b      	lsrs	r3, r3, #26
 8004b64:	3301      	adds	r3, #1
 8004b66:	069b      	lsls	r3, r3, #26
 8004b68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b6c:	e015      	b.n	8004b9a <HAL_ADC_ConfigChannel+0xd06>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b76:	fa93 f3a3 	rbit	r3, r3
 8004b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_ADC_ConfigChannel+0xcf6>
    return 32U;
 8004b86:	2320      	movs	r3, #32
 8004b88:	e003      	b.n	8004b92 <HAL_ADC_ConfigChannel+0xcfe>
  return __builtin_clz(value);
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8c:	fab3 f383 	clz	r3, r3
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	3301      	adds	r3, #1
 8004b94:	069b      	lsls	r3, r3, #26
 8004b96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d109      	bne.n	8004bba <HAL_ADC_ConfigChannel+0xd26>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	0e9b      	lsrs	r3, r3, #26
 8004bac:	3301      	adds	r3, #1
 8004bae:	f003 031f 	and.w	r3, r3, #31
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb8:	e017      	b.n	8004bea <HAL_ADC_ConfigChannel+0xd56>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	fa93 f3a3 	rbit	r3, r3
 8004bc6:	61fb      	str	r3, [r7, #28]
  return result;
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0xd42>
    return 32U;
 8004bd2:	2320      	movs	r3, #32
 8004bd4:	e003      	b.n	8004bde <HAL_ADC_ConfigChannel+0xd4a>
  return __builtin_clz(value);
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	fab3 f383 	clz	r3, r3
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	3301      	adds	r3, #1
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	2101      	movs	r1, #1
 8004be6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bea:	ea42 0103 	orr.w	r1, r2, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10d      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0xd82>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	0e9b      	lsrs	r3, r3, #26
 8004c00:	3301      	adds	r3, #1
 8004c02:	f003 021f 	and.w	r2, r3, #31
 8004c06:	4613      	mov	r3, r2
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	4413      	add	r3, r2
 8004c0c:	3b1e      	subs	r3, #30
 8004c0e:	051b      	lsls	r3, r3, #20
 8004c10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c14:	e01b      	b.n	8004c4e <HAL_ADC_ConfigChannel+0xdba>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	fa93 f3a3 	rbit	r3, r3
 8004c22:	613b      	str	r3, [r7, #16]
  return result;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0xd9e>
    return 32U;
 8004c2e:	2320      	movs	r3, #32
 8004c30:	e003      	b.n	8004c3a <HAL_ADC_ConfigChannel+0xda6>
  return __builtin_clz(value);
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	fab3 f383 	clz	r3, r3
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	f003 021f 	and.w	r2, r3, #31
 8004c40:	4613      	mov	r3, r2
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	4413      	add	r3, r2
 8004c46:	3b1e      	subs	r3, #30
 8004c48:	051b      	lsls	r3, r3, #20
 8004c4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c4e:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c54:	4619      	mov	r1, r3
 8004c56:	f7fd fee9 	bl	8002a2c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b09      	ldr	r3, [pc, #36]	@ (8004c84 <HAL_ADC_ConfigChannel+0xdf0>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80bd 	beq.w	8004de2 <HAL_ADC_ConfigChannel+0xf4e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c70:	d004      	beq.n	8004c7c <HAL_ADC_ConfigChannel+0xde8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a04      	ldr	r2, [pc, #16]	@ (8004c88 <HAL_ADC_ConfigChannel+0xdf4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d109      	bne.n	8004c90 <HAL_ADC_ConfigChannel+0xdfc>
 8004c7c:	4b03      	ldr	r3, [pc, #12]	@ (8004c8c <HAL_ADC_ConfigChannel+0xdf8>)
 8004c7e:	e008      	b.n	8004c92 <HAL_ADC_ConfigChannel+0xdfe>
 8004c80:	407f0000 	.word	0x407f0000
 8004c84:	80080000 	.word	0x80080000
 8004c88:	50000100 	.word	0x50000100
 8004c8c:	50000300 	.word	0x50000300
 8004c90:	4b59      	ldr	r3, [pc, #356]	@ (8004df8 <HAL_ADC_ConfigChannel+0xf64>)
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fd fdbe 	bl	8002814 <LL_ADC_GetCommonPathInternalCh>
 8004c98:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a56      	ldr	r2, [pc, #344]	@ (8004dfc <HAL_ADC_ConfigChannel+0xf68>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_ADC_ConfigChannel+0xe1c>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a55      	ldr	r2, [pc, #340]	@ (8004e00 <HAL_ADC_ConfigChannel+0xf6c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d13a      	bne.n	8004d26 <HAL_ADC_ConfigChannel+0xe92>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d134      	bne.n	8004d26 <HAL_ADC_ConfigChannel+0xe92>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cc4:	d005      	beq.n	8004cd2 <HAL_ADC_ConfigChannel+0xe3e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a4e      	ldr	r2, [pc, #312]	@ (8004e04 <HAL_ADC_ConfigChannel+0xf70>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	f040 8085 	bne.w	8004ddc <HAL_ADC_ConfigChannel+0xf48>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cda:	d004      	beq.n	8004ce6 <HAL_ADC_ConfigChannel+0xe52>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a49      	ldr	r2, [pc, #292]	@ (8004e08 <HAL_ADC_ConfigChannel+0xf74>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d101      	bne.n	8004cea <HAL_ADC_ConfigChannel+0xe56>
 8004ce6:	4a49      	ldr	r2, [pc, #292]	@ (8004e0c <HAL_ADC_ConfigChannel+0xf78>)
 8004ce8:	e000      	b.n	8004cec <HAL_ADC_ConfigChannel+0xe58>
 8004cea:	4a43      	ldr	r2, [pc, #268]	@ (8004df8 <HAL_ADC_ConfigChannel+0xf64>)
 8004cec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cf0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f7fd fd79 	bl	80027ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cfc:	4b44      	ldr	r3, [pc, #272]	@ (8004e10 <HAL_ADC_ConfigChannel+0xf7c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	099b      	lsrs	r3, r3, #6
 8004d02:	4a44      	ldr	r2, [pc, #272]	@ (8004e14 <HAL_ADC_ConfigChannel+0xf80>)
 8004d04:	fba2 2303 	umull	r2, r3, r2, r3
 8004d08:	099b      	lsrs	r3, r3, #6
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d16:	e002      	b.n	8004d1e <HAL_ADC_ConfigChannel+0xe8a>
          {
            wait_loop_index--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f9      	bne.n	8004d18 <HAL_ADC_ConfigChannel+0xe84>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d24:	e05a      	b.n	8004ddc <HAL_ADC_ConfigChannel+0xf48>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a3b      	ldr	r2, [pc, #236]	@ (8004e18 <HAL_ADC_ConfigChannel+0xf84>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d125      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0xee8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d11f      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0xee8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a31      	ldr	r2, [pc, #196]	@ (8004e08 <HAL_ADC_ConfigChannel+0xf74>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d104      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0xebc>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a34      	ldr	r2, [pc, #208]	@ (8004e1c <HAL_ADC_ConfigChannel+0xf88>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d047      	beq.n	8004de0 <HAL_ADC_ConfigChannel+0xf4c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d58:	d004      	beq.n	8004d64 <HAL_ADC_ConfigChannel+0xed0>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8004e08 <HAL_ADC_ConfigChannel+0xf74>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d101      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0xed4>
 8004d64:	4a29      	ldr	r2, [pc, #164]	@ (8004e0c <HAL_ADC_ConfigChannel+0xf78>)
 8004d66:	e000      	b.n	8004d6a <HAL_ADC_ConfigChannel+0xed6>
 8004d68:	4a23      	ldr	r2, [pc, #140]	@ (8004df8 <HAL_ADC_ConfigChannel+0xf64>)
 8004d6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d72:	4619      	mov	r1, r3
 8004d74:	4610      	mov	r0, r2
 8004d76:	f7fd fd3a 	bl	80027ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d7a:	e031      	b.n	8004de0 <HAL_ADC_ConfigChannel+0xf4c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a27      	ldr	r2, [pc, #156]	@ (8004e20 <HAL_ADC_ConfigChannel+0xf8c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d12d      	bne.n	8004de2 <HAL_ADC_ConfigChannel+0xf4e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d127      	bne.n	8004de2 <HAL_ADC_ConfigChannel+0xf4e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1c      	ldr	r2, [pc, #112]	@ (8004e08 <HAL_ADC_ConfigChannel+0xf74>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d022      	beq.n	8004de2 <HAL_ADC_ConfigChannel+0xf4e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004da4:	d004      	beq.n	8004db0 <HAL_ADC_ConfigChannel+0xf1c>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a17      	ldr	r2, [pc, #92]	@ (8004e08 <HAL_ADC_ConfigChannel+0xf74>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d101      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0xf20>
 8004db0:	4a16      	ldr	r2, [pc, #88]	@ (8004e0c <HAL_ADC_ConfigChannel+0xf78>)
 8004db2:	e000      	b.n	8004db6 <HAL_ADC_ConfigChannel+0xf22>
 8004db4:	4a10      	ldr	r2, [pc, #64]	@ (8004df8 <HAL_ADC_ConfigChannel+0xf64>)
 8004db6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004dba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	f7fd fd14 	bl	80027ee <LL_ADC_SetCommonPathInternalCh>
 8004dc6:	e00c      	b.n	8004de2 <HAL_ADC_ConfigChannel+0xf4e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dcc:	f043 0220 	orr.w	r2, r3, #32
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004dda:	e002      	b.n	8004de2 <HAL_ADC_ConfigChannel+0xf4e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ddc:	bf00      	nop
 8004dde:	e000      	b.n	8004de2 <HAL_ADC_ConfigChannel+0xf4e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004de0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004dea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	37dc      	adds	r7, #220	@ 0xdc
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd90      	pop	{r4, r7, pc}
 8004df6:	bf00      	nop
 8004df8:	50000700 	.word	0x50000700
 8004dfc:	c3210000 	.word	0xc3210000
 8004e00:	90c00010 	.word	0x90c00010
 8004e04:	50000600 	.word	0x50000600
 8004e08:	50000100 	.word	0x50000100
 8004e0c:	50000300 	.word	0x50000300
 8004e10:	20000000 	.word	0x20000000
 8004e14:	053e2d63 	.word	0x053e2d63
 8004e18:	c7520000 	.word	0xc7520000
 8004e1c:	50000500 	.word	0x50000500
 8004e20:	cb840000 	.word	0xcb840000

08004e24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fd fedb 	bl	8002bf0 <LL_ADC_IsEnabled>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d176      	bne.n	8004f2e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	4b3c      	ldr	r3, [pc, #240]	@ (8004f38 <ADC_Enable+0x114>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00d      	beq.n	8004e6a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e52:	f043 0210 	orr.w	r2, r3, #16
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e5e:	f043 0201 	orr.w	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e062      	b.n	8004f30 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fd fe96 	bl	8002ba0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e7c:	d004      	beq.n	8004e88 <ADC_Enable+0x64>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a2e      	ldr	r2, [pc, #184]	@ (8004f3c <ADC_Enable+0x118>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d101      	bne.n	8004e8c <ADC_Enable+0x68>
 8004e88:	4b2d      	ldr	r3, [pc, #180]	@ (8004f40 <ADC_Enable+0x11c>)
 8004e8a:	e000      	b.n	8004e8e <ADC_Enable+0x6a>
 8004e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f44 <ADC_Enable+0x120>)
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fd fcc0 	bl	8002814 <LL_ADC_GetCommonPathInternalCh>
 8004e94:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004e96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d013      	beq.n	8004ec6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8004f48 <ADC_Enable+0x124>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	099b      	lsrs	r3, r3, #6
 8004ea4:	4a29      	ldr	r2, [pc, #164]	@ (8004f4c <ADC_Enable+0x128>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	099b      	lsrs	r3, r3, #6
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	4613      	mov	r3, r2
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004eb8:	e002      	b.n	8004ec0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f9      	bne.n	8004eba <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ec6:	f7fd fc51 	bl	800276c <HAL_GetTick>
 8004eca:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ecc:	e028      	b.n	8004f20 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fd fe8c 	bl	8002bf0 <LL_ADC_IsEnabled>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d104      	bne.n	8004ee8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fd fe5c 	bl	8002ba0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ee8:	f7fd fc40 	bl	800276c <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d914      	bls.n	8004f20 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d00d      	beq.n	8004f20 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f08:	f043 0210 	orr.w	r2, r3, #16
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f14:	f043 0201 	orr.w	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e007      	b.n	8004f30 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d1cf      	bne.n	8004ece <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	8000003f 	.word	0x8000003f
 8004f3c:	50000100 	.word	0x50000100
 8004f40:	50000300 	.word	0x50000300
 8004f44:	50000700 	.word	0x50000700
 8004f48:	20000000 	.word	0x20000000
 8004f4c:	053e2d63 	.word	0x053e2d63

08004f50 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fd fe5a 	bl	8002c16 <LL_ADC_IsDisableOngoing>
 8004f62:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fd fe41 	bl	8002bf0 <LL_ADC_IsEnabled>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d047      	beq.n	8005004 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d144      	bne.n	8005004 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 030d 	and.w	r3, r3, #13
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d10c      	bne.n	8004fa2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fd fe1b 	bl	8002bc8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2203      	movs	r2, #3
 8004f98:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004f9a:	f7fd fbe7 	bl	800276c <HAL_GetTick>
 8004f9e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fa0:	e029      	b.n	8004ff6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa6:	f043 0210 	orr.w	r2, r3, #16
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb2:	f043 0201 	orr.w	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e023      	b.n	8005006 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004fbe:	f7fd fbd5 	bl	800276c <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d914      	bls.n	8004ff6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00d      	beq.n	8004ff6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fde:	f043 0210 	orr.w	r2, r3, #16
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fea:	f043 0201 	orr.w	r2, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e007      	b.n	8005006 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1dc      	bne.n	8004fbe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <LL_ADC_IsEnabled>:
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <LL_ADC_IsEnabled+0x18>
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <LL_ADC_IsEnabled+0x1a>
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <LL_ADC_StartCalibration>:
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005046:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005050:	4313      	orrs	r3, r2
 8005052:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	609a      	str	r2, [r3, #8]
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <LL_ADC_IsCalibrationOnGoing>:
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005076:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800507a:	d101      	bne.n	8005080 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800507c:	2301      	movs	r3, #1
 800507e:	e000      	b.n	8005082 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <LL_ADC_REG_IsConversionOngoing>:
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 0304 	and.w	r3, r3, #4
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d101      	bne.n	80050a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80050be:	2300      	movs	r3, #0
 80050c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050ca:	d017      	beq.n	80050fc <HAL_ADCEx_Calibration_Start+0x48>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a3c      	ldr	r2, [pc, #240]	@ (80051c4 <HAL_ADCEx_Calibration_Start+0x110>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d012      	beq.n	80050fc <HAL_ADCEx_Calibration_Start+0x48>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a3b      	ldr	r2, [pc, #236]	@ (80051c8 <HAL_ADCEx_Calibration_Start+0x114>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00d      	beq.n	80050fc <HAL_ADCEx_Calibration_Start+0x48>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a39      	ldr	r2, [pc, #228]	@ (80051cc <HAL_ADCEx_Calibration_Start+0x118>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d008      	beq.n	80050fc <HAL_ADCEx_Calibration_Start+0x48>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a38      	ldr	r2, [pc, #224]	@ (80051d0 <HAL_ADCEx_Calibration_Start+0x11c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <HAL_ADCEx_Calibration_Start+0x48>
 80050f4:	2184      	movs	r1, #132	@ 0x84
 80050f6:	4837      	ldr	r0, [pc, #220]	@ (80051d4 <HAL_ADCEx_Calibration_Start+0x120>)
 80050f8:	f7fd f894 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005100:	d007      	beq.n	8005112 <HAL_ADCEx_Calibration_Start+0x5e>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	4a34      	ldr	r2, [pc, #208]	@ (80051d8 <HAL_ADCEx_Calibration_Start+0x124>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d003      	beq.n	8005112 <HAL_ADCEx_Calibration_Start+0x5e>
 800510a:	2185      	movs	r1, #133	@ 0x85
 800510c:	4831      	ldr	r0, [pc, #196]	@ (80051d4 <HAL_ADCEx_Calibration_Start+0x120>)
 800510e:	f7fd f889 	bl	8002224 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_ADCEx_Calibration_Start+0x6c>
 800511c:	2302      	movs	r3, #2
 800511e:	e04d      	b.n	80051bc <HAL_ADCEx_Calibration_Start+0x108>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff ff11 	bl	8004f50 <ADC_Disable>
 800512e:	4603      	mov	r3, r0
 8005130:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005132:	7bfb      	ldrb	r3, [r7, #15]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d136      	bne.n	80051a6 <HAL_ADCEx_Calibration_Start+0xf2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800513c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005140:	f023 0302 	bic.w	r3, r3, #2
 8005144:	f043 0202 	orr.w	r2, r3, #2
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6839      	ldr	r1, [r7, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff ff6e 	bl	8005034 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005158:	e014      	b.n	8005184 <HAL_ADCEx_Calibration_Start+0xd0>
    {
      wait_loop_index++;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	3301      	adds	r3, #1
 800515e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4a1e      	ldr	r2, [pc, #120]	@ (80051dc <HAL_ADCEx_Calibration_Start+0x128>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d90d      	bls.n	8005184 <HAL_ADCEx_Calibration_Start+0xd0>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800516c:	f023 0312 	bic.w	r3, r3, #18
 8005170:	f043 0210 	orr.w	r2, r3, #16
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e01b      	b.n	80051bc <HAL_ADCEx_Calibration_Start+0x108>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff ff6c 	bl	8005066 <LL_ADC_IsCalibrationOnGoing>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e2      	bne.n	800515a <HAL_ADCEx_Calibration_Start+0xa6>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005198:	f023 0303 	bic.w	r3, r3, #3
 800519c:	f043 0201 	orr.w	r2, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80051a4:	e005      	b.n	80051b2 <HAL_ADCEx_Calibration_Start+0xfe>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051aa:	f043 0210 	orr.w	r2, r3, #16
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	50000100 	.word	0x50000100
 80051c8:	50000400 	.word	0x50000400
 80051cc:	50000500 	.word	0x50000500
 80051d0:	50000600 	.word	0x50000600
 80051d4:	08013fa8 	.word	0x08013fa8
 80051d8:	407f0000 	.word	0x407f0000
 80051dc:	0004de01 	.word	0x0004de01

080051e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b0a1      	sub	sp, #132	@ 0x84
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmp_hadc_slave;
  uint32_t tmp_hadc_slave_conversion_on_going;

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800525c:	d009      	beq.n	8005272 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a92      	ldr	r2, [pc, #584]	@ (80054ac <HAL_ADCEx_MultiModeConfigChannel+0x268>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8005268:	f640 014c 	movw	r1, #2124	@ 0x84c
 800526c:	4890      	ldr	r0, [pc, #576]	@ (80054b0 <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 800526e:	f7fc ffd9 	bl	8002224 <assert_failed>
  assert_param(IS_ADC_MULTIMODE(pMultimode->Mode));
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d020      	beq.n	80052bc <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d01c      	beq.n	80052bc <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d018      	beq.n	80052bc <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d014      	beq.n	80052bc <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b05      	cmp	r3, #5
 8005298:	d010      	beq.n	80052bc <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b06      	cmp	r3, #6
 80052a0:	d00c      	beq.n	80052bc <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b07      	cmp	r3, #7
 80052a8:	d008      	beq.n	80052bc <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b09      	cmp	r3, #9
 80052b0:	d004      	beq.n	80052bc <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80052b2:	f640 014d 	movw	r1, #2125	@ 0x84d
 80052b6:	487e      	ldr	r0, [pc, #504]	@ (80054b0 <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 80052b8:	f7fc ffb4 	bl	8002224 <assert_failed>
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d052      	beq.n	800536a <HAL_ADCEx_MultiModeConfigChannel+0x126>
  {
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00e      	beq.n	80052ea <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052d4:	d009      	beq.n	80052ea <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80052de:	d004      	beq.n	80052ea <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80052e0:	f44f 6105 	mov.w	r1, #2128	@ 0x850
 80052e4:	4872      	ldr	r0, [pc, #456]	@ (80054b0 <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 80052e6:	f7fc ff9d 	bl	8002224 <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d03b      	beq.n	800536a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052fa:	d036      	beq.n	800536a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005304:	d031      	beq.n	800536a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800530e:	d02c      	beq.n	800536a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005318:	d027      	beq.n	800536a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005322:	d022      	beq.n	800536a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800532c:	d01d      	beq.n	800536a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005336:	d018      	beq.n	800536a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005340:	d013      	beq.n	800536a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 800534a:	d00e      	beq.n	800536a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005354:	d009      	beq.n	800536a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 800535e:	d004      	beq.n	800536a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8005360:	f640 0151 	movw	r1, #2129	@ 0x851
 8005364:	4852      	ldr	r0, [pc, #328]	@ (80054b0 <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8005366:	f7fc ff5d 	bl	8002224 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_ADCEx_MultiModeConfigChannel+0x134>
 8005374:	2302      	movs	r3, #2
 8005376:	e0f6      	b.n	8005566 <HAL_ADCEx_MultiModeConfigChannel+0x322>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005380:	2300      	movs	r3, #0
 8005382:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005384:	2300      	movs	r3, #0
 8005386:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005390:	d102      	bne.n	8005398 <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8005392:	4b48      	ldr	r3, [pc, #288]	@ (80054b4 <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	e009      	b.n	80053ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a43      	ldr	r2, [pc, #268]	@ (80054ac <HAL_ADCEx_MultiModeConfigChannel+0x268>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d102      	bne.n	80053a8 <HAL_ADCEx_MultiModeConfigChannel+0x164>
 80053a2:	4b45      	ldr	r3, [pc, #276]	@ (80054b8 <HAL_ADCEx_MultiModeConfigChannel+0x274>)
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	e001      	b.n	80053ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80053a8:	2300      	movs	r3, #0
 80053aa:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10b      	bne.n	80053ca <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b6:	f043 0220 	orr.w	r2, r3, #32
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e0cd      	b.n	8005566 <HAL_ADCEx_MultiModeConfigChannel+0x322>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff fe5e 	bl	800508e <LL_ADC_REG_IsConversionOngoing>
 80053d2:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff fe58 	bl	800508e <LL_ADC_REG_IsConversionOngoing>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f040 80af 	bne.w	8005544 <HAL_ADCEx_MultiModeConfigChannel+0x300>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80053e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f040 80ab 	bne.w	8005544 <HAL_ADCEx_MultiModeConfigChannel+0x300>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053f6:	d004      	beq.n	8005402 <HAL_ADCEx_MultiModeConfigChannel+0x1be>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a2d      	ldr	r2, [pc, #180]	@ (80054b4 <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d101      	bne.n	8005406 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8005402:	4b2e      	ldr	r3, [pc, #184]	@ (80054bc <HAL_ADCEx_MultiModeConfigChannel+0x278>)
 8005404:	e000      	b.n	8005408 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
 8005406:	4b2e      	ldr	r3, [pc, #184]	@ (80054c0 <HAL_ADCEx_MultiModeConfigChannel+0x27c>)
 8005408:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d05a      	beq.n	80054c8 <HAL_ADCEx_MultiModeConfigChannel+0x284>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005412:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6859      	ldr	r1, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005424:	035b      	lsls	r3, r3, #13
 8005426:	430b      	orrs	r3, r1
 8005428:	431a      	orrs	r2, r3
 800542a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800542c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005436:	d004      	beq.n	8005442 <HAL_ADCEx_MultiModeConfigChannel+0x1fe>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1d      	ldr	r2, [pc, #116]	@ (80054b4 <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d10f      	bne.n	8005462 <HAL_ADCEx_MultiModeConfigChannel+0x21e>
 8005442:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005446:	f7ff fde2 	bl	800500e <LL_ADC_IsEnabled>
 800544a:	4604      	mov	r4, r0
 800544c:	4819      	ldr	r0, [pc, #100]	@ (80054b4 <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 800544e:	f7ff fdde 	bl	800500e <LL_ADC_IsEnabled>
 8005452:	4603      	mov	r3, r0
 8005454:	4323      	orrs	r3, r4
 8005456:	2b00      	cmp	r3, #0
 8005458:	bf0c      	ite	eq
 800545a:	2301      	moveq	r3, #1
 800545c:	2300      	movne	r3, #0
 800545e:	b2db      	uxtb	r3, r3
 8005460:	e012      	b.n	8005488 <HAL_ADCEx_MultiModeConfigChannel+0x244>
 8005462:	4812      	ldr	r0, [pc, #72]	@ (80054ac <HAL_ADCEx_MultiModeConfigChannel+0x268>)
 8005464:	f7ff fdd3 	bl	800500e <LL_ADC_IsEnabled>
 8005468:	4604      	mov	r4, r0
 800546a:	4813      	ldr	r0, [pc, #76]	@ (80054b8 <HAL_ADCEx_MultiModeConfigChannel+0x274>)
 800546c:	f7ff fdcf 	bl	800500e <LL_ADC_IsEnabled>
 8005470:	4603      	mov	r3, r0
 8005472:	431c      	orrs	r4, r3
 8005474:	4813      	ldr	r0, [pc, #76]	@ (80054c4 <HAL_ADCEx_MultiModeConfigChannel+0x280>)
 8005476:	f7ff fdca 	bl	800500e <LL_ADC_IsEnabled>
 800547a:	4603      	mov	r3, r0
 800547c:	4323      	orrs	r3, r4
 800547e:	2b00      	cmp	r3, #0
 8005480:	bf0c      	ite	eq
 8005482:	2301      	moveq	r3, #1
 8005484:	2300      	movne	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d065      	beq.n	8005558 <HAL_ADCEx_MultiModeConfigChannel+0x314>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800548c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005494:	f023 030f 	bic.w	r3, r3, #15
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	6811      	ldr	r1, [r2, #0]
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	6892      	ldr	r2, [r2, #8]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	431a      	orrs	r2, r3
 80054a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054a6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80054a8:	e056      	b.n	8005558 <HAL_ADCEx_MultiModeConfigChannel+0x314>
 80054aa:	bf00      	nop
 80054ac:	50000400 	.word	0x50000400
 80054b0:	08013fa8 	.word	0x08013fa8
 80054b4:	50000100 	.word	0x50000100
 80054b8:	50000500 	.word	0x50000500
 80054bc:	50000300 	.word	0x50000300
 80054c0:	50000700 	.word	0x50000700
 80054c4:	50000600 	.word	0x50000600
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80054c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054d2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054dc:	d004      	beq.n	80054e8 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a23      	ldr	r2, [pc, #140]	@ (8005570 <HAL_ADCEx_MultiModeConfigChannel+0x32c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d10f      	bne.n	8005508 <HAL_ADCEx_MultiModeConfigChannel+0x2c4>
 80054e8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80054ec:	f7ff fd8f 	bl	800500e <LL_ADC_IsEnabled>
 80054f0:	4604      	mov	r4, r0
 80054f2:	481f      	ldr	r0, [pc, #124]	@ (8005570 <HAL_ADCEx_MultiModeConfigChannel+0x32c>)
 80054f4:	f7ff fd8b 	bl	800500e <LL_ADC_IsEnabled>
 80054f8:	4603      	mov	r3, r0
 80054fa:	4323      	orrs	r3, r4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bf0c      	ite	eq
 8005500:	2301      	moveq	r3, #1
 8005502:	2300      	movne	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e012      	b.n	800552e <HAL_ADCEx_MultiModeConfigChannel+0x2ea>
 8005508:	481a      	ldr	r0, [pc, #104]	@ (8005574 <HAL_ADCEx_MultiModeConfigChannel+0x330>)
 800550a:	f7ff fd80 	bl	800500e <LL_ADC_IsEnabled>
 800550e:	4604      	mov	r4, r0
 8005510:	4819      	ldr	r0, [pc, #100]	@ (8005578 <HAL_ADCEx_MultiModeConfigChannel+0x334>)
 8005512:	f7ff fd7c 	bl	800500e <LL_ADC_IsEnabled>
 8005516:	4603      	mov	r3, r0
 8005518:	431c      	orrs	r4, r3
 800551a:	4818      	ldr	r0, [pc, #96]	@ (800557c <HAL_ADCEx_MultiModeConfigChannel+0x338>)
 800551c:	f7ff fd77 	bl	800500e <LL_ADC_IsEnabled>
 8005520:	4603      	mov	r3, r0
 8005522:	4323      	orrs	r3, r4
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf0c      	ite	eq
 8005528:	2301      	moveq	r3, #1
 800552a:	2300      	movne	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d012      	beq.n	8005558 <HAL_ADCEx_MultiModeConfigChannel+0x314>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005532:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800553a:	f023 030f 	bic.w	r3, r3, #15
 800553e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005540:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005542:	e009      	b.n	8005558 <HAL_ADCEx_MultiModeConfigChannel+0x314>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005548:	f043 0220 	orr.w	r2, r3, #32
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005556:	e000      	b.n	800555a <HAL_ADCEx_MultiModeConfigChannel+0x316>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005558:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005562:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005566:	4618      	mov	r0, r3
 8005568:	3784      	adds	r7, #132	@ 0x84
 800556a:	46bd      	mov	sp, r7
 800556c:	bd90      	pop	{r4, r7, pc}
 800556e:	bf00      	nop
 8005570:	50000100 	.word	0x50000100
 8005574:	50000400 	.word	0x50000400
 8005578:	50000500 	.word	0x50000500
 800557c:	50000600 	.word	0x50000600

08005580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005590:	4b0c      	ldr	r3, [pc, #48]	@ (80055c4 <__NVIC_SetPriorityGrouping+0x44>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800559c:	4013      	ands	r3, r2
 800559e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80055ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055b2:	4a04      	ldr	r2, [pc, #16]	@ (80055c4 <__NVIC_SetPriorityGrouping+0x44>)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	60d3      	str	r3, [r2, #12]
}
 80055b8:	bf00      	nop
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	e000ed00 	.word	0xe000ed00

080055c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055cc:	4b04      	ldr	r3, [pc, #16]	@ (80055e0 <__NVIC_GetPriorityGrouping+0x18>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	0a1b      	lsrs	r3, r3, #8
 80055d2:	f003 0307 	and.w	r3, r3, #7
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	e000ed00 	.word	0xe000ed00

080055e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	db0b      	blt.n	800560e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055f6:	79fb      	ldrb	r3, [r7, #7]
 80055f8:	f003 021f 	and.w	r2, r3, #31
 80055fc:	4907      	ldr	r1, [pc, #28]	@ (800561c <__NVIC_EnableIRQ+0x38>)
 80055fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	2001      	movs	r0, #1
 8005606:	fa00 f202 	lsl.w	r2, r0, r2
 800560a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	e000e100 	.word	0xe000e100

08005620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	6039      	str	r1, [r7, #0]
 800562a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800562c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005630:	2b00      	cmp	r3, #0
 8005632:	db0a      	blt.n	800564a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	b2da      	uxtb	r2, r3
 8005638:	490c      	ldr	r1, [pc, #48]	@ (800566c <__NVIC_SetPriority+0x4c>)
 800563a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800563e:	0112      	lsls	r2, r2, #4
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	440b      	add	r3, r1
 8005644:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005648:	e00a      	b.n	8005660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	b2da      	uxtb	r2, r3
 800564e:	4908      	ldr	r1, [pc, #32]	@ (8005670 <__NVIC_SetPriority+0x50>)
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	3b04      	subs	r3, #4
 8005658:	0112      	lsls	r2, r2, #4
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	440b      	add	r3, r1
 800565e:	761a      	strb	r2, [r3, #24]
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	e000e100 	.word	0xe000e100
 8005670:	e000ed00 	.word	0xe000ed00

08005674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005674:	b480      	push	{r7}
 8005676:	b089      	sub	sp, #36	@ 0x24
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f1c3 0307 	rsb	r3, r3, #7
 800568e:	2b04      	cmp	r3, #4
 8005690:	bf28      	it	cs
 8005692:	2304      	movcs	r3, #4
 8005694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	3304      	adds	r3, #4
 800569a:	2b06      	cmp	r3, #6
 800569c:	d902      	bls.n	80056a4 <NVIC_EncodePriority+0x30>
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	3b03      	subs	r3, #3
 80056a2:	e000      	b.n	80056a6 <NVIC_EncodePriority+0x32>
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056a8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	43da      	mvns	r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	401a      	ands	r2, r3
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056bc:	f04f 31ff 	mov.w	r1, #4294967295
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	fa01 f303 	lsl.w	r3, r1, r3
 80056c6:	43d9      	mvns	r1, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056cc:	4313      	orrs	r3, r2
         );
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3724      	adds	r7, #36	@ 0x24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056ec:	d301      	bcc.n	80056f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056ee:	2301      	movs	r3, #1
 80056f0:	e00f      	b.n	8005712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056f2:	4a0a      	ldr	r2, [pc, #40]	@ (800571c <SysTick_Config+0x40>)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056fa:	210f      	movs	r1, #15
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	f7ff ff8e 	bl	8005620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005704:	4b05      	ldr	r3, [pc, #20]	@ (800571c <SysTick_Config+0x40>)
 8005706:	2200      	movs	r2, #0
 8005708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800570a:	4b04      	ldr	r3, [pc, #16]	@ (800571c <SysTick_Config+0x40>)
 800570c:	2207      	movs	r2, #7
 800570e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	e000e010 	.word	0xe000e010

08005720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b07      	cmp	r3, #7
 800572c:	d00f      	beq.n	800574e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b06      	cmp	r3, #6
 8005732:	d00c      	beq.n	800574e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b05      	cmp	r3, #5
 8005738:	d009      	beq.n	800574e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b04      	cmp	r3, #4
 800573e:	d006      	beq.n	800574e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b03      	cmp	r3, #3
 8005744:	d003      	beq.n	800574e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005746:	21a6      	movs	r1, #166	@ 0xa6
 8005748:	4804      	ldr	r0, [pc, #16]	@ (800575c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800574a:	f7fc fd6b 	bl	8002224 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff ff16 	bl	8005580 <__NVIC_SetPriorityGrouping>
}
 8005754:	bf00      	nop
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	0801401c 	.word	0x0801401c

08005760 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	4603      	mov	r3, r0
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b0f      	cmp	r3, #15
 8005772:	d903      	bls.n	800577c <HAL_NVIC_SetPriority+0x1c>
 8005774:	21be      	movs	r1, #190	@ 0xbe
 8005776:	480e      	ldr	r0, [pc, #56]	@ (80057b0 <HAL_NVIC_SetPriority+0x50>)
 8005778:	f7fc fd54 	bl	8002224 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b0f      	cmp	r3, #15
 8005780:	d903      	bls.n	800578a <HAL_NVIC_SetPriority+0x2a>
 8005782:	21bf      	movs	r1, #191	@ 0xbf
 8005784:	480a      	ldr	r0, [pc, #40]	@ (80057b0 <HAL_NVIC_SetPriority+0x50>)
 8005786:	f7fc fd4d 	bl	8002224 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800578a:	f7ff ff1d 	bl	80055c8 <__NVIC_GetPriorityGrouping>
 800578e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	6978      	ldr	r0, [r7, #20]
 8005796:	f7ff ff6d 	bl	8005674 <NVIC_EncodePriority>
 800579a:	4602      	mov	r2, r0
 800579c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057a0:	4611      	mov	r1, r2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff ff3c 	bl	8005620 <__NVIC_SetPriority>
}
 80057a8:	bf00      	nop
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	0801401c 	.word	0x0801401c

080057b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	4603      	mov	r3, r0
 80057bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80057be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	da03      	bge.n	80057ce <HAL_NVIC_EnableIRQ+0x1a>
 80057c6:	21d2      	movs	r1, #210	@ 0xd2
 80057c8:	4805      	ldr	r0, [pc, #20]	@ (80057e0 <HAL_NVIC_EnableIRQ+0x2c>)
 80057ca:	f7fc fd2b 	bl	8002224 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff ff06 	bl	80055e4 <__NVIC_EnableIRQ>
}
 80057d8:	bf00      	nop
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	0801401c 	.word	0x0801401c

080057e4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff ff75 	bl	80056dc <SysTick_Config>
 80057f2:	4603      	mov	r3, r0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e02d      	b.n	800586a <HAL_DAC_Init+0x6e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a18      	ldr	r2, [pc, #96]	@ (8005874 <HAL_DAC_Init+0x78>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d013      	beq.n	8005840 <HAL_DAC_Init+0x44>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a16      	ldr	r2, [pc, #88]	@ (8005878 <HAL_DAC_Init+0x7c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00e      	beq.n	8005840 <HAL_DAC_Init+0x44>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a15      	ldr	r2, [pc, #84]	@ (800587c <HAL_DAC_Init+0x80>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d009      	beq.n	8005840 <HAL_DAC_Init+0x44>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a13      	ldr	r2, [pc, #76]	@ (8005880 <HAL_DAC_Init+0x84>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d004      	beq.n	8005840 <HAL_DAC_Init+0x44>
 8005836:	f240 119d 	movw	r1, #413	@ 0x19d
 800583a:	4812      	ldr	r0, [pc, #72]	@ (8005884 <HAL_DAC_Init+0x88>)
 800583c:	f7fc fcf2 	bl	8002224 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	791b      	ldrb	r3, [r3, #4]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d105      	bne.n	8005856 <HAL_DAC_Init+0x5a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7fb feaf 	bl	80015b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2202      	movs	r2, #2
 800585a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	50000800 	.word	0x50000800
 8005878:	50000c00 	.word	0x50000c00
 800587c:	50001000 	.word	0x50001000
 8005880:	50001400 	.word	0x50001400
 8005884:	08014090 	.word	0x08014090

08005888 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	@ 0x28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <HAL_DAC_ConfigChannel+0x1c>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e33f      	b.n	8005f28 <HAL_DAC_ConfigChannel+0x6a0>
  }

  /* Check the DAC parameters */
  assert_param(IS_DAC_HIGH_FREQUENCY_MODE(sConfig->DAC_HighFrequency));
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d012      	beq.n	80058d6 <HAL_DAC_ConfigChannel+0x4e>
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058b8:	d00d      	beq.n	80058d6 <HAL_DAC_ConfigChannel+0x4e>
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058c2:	d008      	beq.n	80058d6 <HAL_DAC_ConfigChannel+0x4e>
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d004      	beq.n	80058d6 <HAL_DAC_ConfigChannel+0x4e>
 80058cc:	f240 4189 	movw	r1, #1161	@ 0x489
 80058d0:	4884      	ldr	r0, [pc, #528]	@ (8005ae4 <HAL_DAC_ConfigChannel+0x25c>)
 80058d2:	f7fc fca7 	bl	8002224 <assert_failed>
  assert_param(IS_DAC_TRIGGER(hdac->Instance, sConfig->DAC_Trigger));
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d070      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d06c      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	2b0a      	cmp	r3, #10
 80058ec:	d068      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	2b0e      	cmp	r3, #14
 80058f4:	d064      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	2b12      	cmp	r3, #18
 80058fc:	d060      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	2b16      	cmp	r3, #22
 8005904:	d05c      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	2b1a      	cmp	r3, #26
 800590c:	d058      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	2b1e      	cmp	r3, #30
 8005914:	d054      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	2b22      	cmp	r3, #34	@ 0x22
 800591c:	d050      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	2b26      	cmp	r3, #38	@ 0x26
 8005924:	d04c      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	2b2a      	cmp	r3, #42	@ 0x2a
 800592c:	d048      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2b2e      	cmp	r3, #46	@ 0x2e
 8005934:	d044      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	2b32      	cmp	r3, #50	@ 0x32
 800593c:	d040      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	2b36      	cmp	r3, #54	@ 0x36
 8005944:	d03c      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	2b3a      	cmp	r3, #58	@ 0x3a
 800594c:	d038      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a65      	ldr	r2, [pc, #404]	@ (8005ae8 <HAL_DAC_ConfigChannel+0x260>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d107      	bne.n	8005968 <HAL_DAC_ConfigChannel+0xe0>
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	2b06      	cmp	r3, #6
 800595e:	d02f      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	2b3e      	cmp	r3, #62	@ 0x3e
 8005966:	d02b      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a5f      	ldr	r2, [pc, #380]	@ (8005aec <HAL_DAC_ConfigChannel+0x264>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d107      	bne.n	8005982 <HAL_DAC_ConfigChannel+0xfa>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	2b06      	cmp	r3, #6
 8005978:	d022      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005980:	d01e      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a5a      	ldr	r2, [pc, #360]	@ (8005af0 <HAL_DAC_ConfigChannel+0x268>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d107      	bne.n	800599c <HAL_DAC_ConfigChannel+0x114>
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	2b06      	cmp	r3, #6
 8005992:	d015      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	2b3e      	cmp	r3, #62	@ 0x3e
 800599a:	d011      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a54      	ldr	r2, [pc, #336]	@ (8005af4 <HAL_DAC_ConfigChannel+0x26c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d107      	bne.n	80059b6 <HAL_DAC_ConfigChannel+0x12e>
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	2b06      	cmp	r3, #6
 80059ac:	d008      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80059b4:	d004      	beq.n	80059c0 <HAL_DAC_ConfigChannel+0x138>
 80059b6:	f240 418a 	movw	r1, #1162	@ 0x48a
 80059ba:	484a      	ldr	r0, [pc, #296]	@ (8005ae4 <HAL_DAC_ConfigChannel+0x25c>)
 80059bc:	f7fc fc32 	bl	8002224 <assert_failed>
  assert_param(IS_DAC_TRIGGER2(hdac->Instance, sConfig->DAC_Trigger2));
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d060      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d05c      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	2b0a      	cmp	r3, #10
 80059d6:	d058      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	2b0e      	cmp	r3, #14
 80059de:	d054      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	2b12      	cmp	r3, #18
 80059e6:	d050      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	2b16      	cmp	r3, #22
 80059ee:	d04c      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	2b1a      	cmp	r3, #26
 80059f6:	d048      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	2b1e      	cmp	r3, #30
 80059fe:	d044      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	2b22      	cmp	r3, #34	@ 0x22
 8005a06:	d040      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	2b26      	cmp	r3, #38	@ 0x26
 8005a0e:	d03c      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a16:	d038      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a1e:	d034      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b32      	cmp	r3, #50	@ 0x32
 8005a26:	d030      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	2b36      	cmp	r3, #54	@ 0x36
 8005a2e:	d02c      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b3a      	cmp	r3, #58	@ 0x3a
 8005a36:	d028      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ae8 <HAL_DAC_ConfigChannel+0x260>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d103      	bne.n	8005a4a <HAL_DAC_ConfigChannel+0x1c2>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b06      	cmp	r3, #6
 8005a48:	d01f      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a27      	ldr	r2, [pc, #156]	@ (8005aec <HAL_DAC_ConfigChannel+0x264>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d103      	bne.n	8005a5c <HAL_DAC_ConfigChannel+0x1d4>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	2b06      	cmp	r3, #6
 8005a5a:	d016      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a23      	ldr	r2, [pc, #140]	@ (8005af0 <HAL_DAC_ConfigChannel+0x268>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d103      	bne.n	8005a6e <HAL_DAC_ConfigChannel+0x1e6>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b06      	cmp	r3, #6
 8005a6c:	d00d      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a20      	ldr	r2, [pc, #128]	@ (8005af4 <HAL_DAC_ConfigChannel+0x26c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d103      	bne.n	8005a80 <HAL_DAC_ConfigChannel+0x1f8>
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b06      	cmp	r3, #6
 8005a7e:	d004      	beq.n	8005a8a <HAL_DAC_ConfigChannel+0x202>
 8005a80:	f240 418b 	movw	r1, #1163	@ 0x48b
 8005a84:	4817      	ldr	r0, [pc, #92]	@ (8005ae4 <HAL_DAC_ConfigChannel+0x25c>)
 8005a86:	f7fc fbcd 	bl	8002224 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d008      	beq.n	8005aa4 <HAL_DAC_ConfigChannel+0x21c>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d004      	beq.n	8005aa4 <HAL_DAC_ConfigChannel+0x21c>
 8005a9a:	f240 418c 	movw	r1, #1164	@ 0x48c
 8005a9e:	4811      	ldr	r0, [pc, #68]	@ (8005ae4 <HAL_DAC_ConfigChannel+0x25c>)
 8005aa0:	f7fc fbc0 	bl	8002224 <assert_failed>
  assert_param(IS_DAC_CHIP_CONNECTION(sConfig->DAC_ConnectOnChipPeripheral));
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d00c      	beq.n	8005ac6 <HAL_DAC_ConfigChannel+0x23e>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d008      	beq.n	8005ac6 <HAL_DAC_ConfigChannel+0x23e>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d004      	beq.n	8005ac6 <HAL_DAC_ConfigChannel+0x23e>
 8005abc:	f240 418d 	movw	r1, #1165	@ 0x48d
 8005ac0:	4808      	ldr	r0, [pc, #32]	@ (8005ae4 <HAL_DAC_ConfigChannel+0x25c>)
 8005ac2:	f7fc fbaf 	bl	8002224 <assert_failed>
  assert_param(IS_DAC_TRIMMING(sConfig->DAC_UserTrimming));
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d014      	beq.n	8005af8 <HAL_DAC_ConfigChannel+0x270>
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d010      	beq.n	8005af8 <HAL_DAC_ConfigChannel+0x270>
 8005ad6:	f240 418e 	movw	r1, #1166	@ 0x48e
 8005ada:	4802      	ldr	r0, [pc, #8]	@ (8005ae4 <HAL_DAC_ConfigChannel+0x25c>)
 8005adc:	f7fc fba2 	bl	8002224 <assert_failed>
 8005ae0:	e00a      	b.n	8005af8 <HAL_DAC_ConfigChannel+0x270>
 8005ae2:	bf00      	nop
 8005ae4:	08014090 	.word	0x08014090
 8005ae8:	50000800 	.word	0x50000800
 8005aec:	50000c00 	.word	0x50000c00
 8005af0:	50001000 	.word	0x50001000
 8005af4:	50001400 	.word	0x50001400
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d108      	bne.n	8005b12 <HAL_DAC_ConfigChannel+0x28a>
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	2b1f      	cmp	r3, #31
 8005b06:	d904      	bls.n	8005b12 <HAL_DAC_ConfigChannel+0x28a>
 8005b08:	f240 4191 	movw	r1, #1169	@ 0x491
 8005b0c:	4899      	ldr	r0, [pc, #612]	@ (8005d74 <HAL_DAC_ConfigChannel+0x4ec>)
 8005b0e:	f7fc fb89 	bl	8002224 <assert_failed>
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d008      	beq.n	8005b2c <HAL_DAC_ConfigChannel+0x2a4>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d004      	beq.n	8005b2c <HAL_DAC_ConfigChannel+0x2a4>
 8005b22:	f240 4193 	movw	r1, #1171	@ 0x493
 8005b26:	4893      	ldr	r0, [pc, #588]	@ (8005d74 <HAL_DAC_ConfigChannel+0x4ec>)
 8005b28:	f7fc fb7c 	bl	8002224 <assert_failed>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d11c      	bne.n	8005b6e <HAL_DAC_ConfigChannel+0x2e6>
  {
    assert_param(IS_DAC_SAMPLETIME(sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime));
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b3c:	d304      	bcc.n	8005b48 <HAL_DAC_ConfigChannel+0x2c0>
 8005b3e:	f240 4196 	movw	r1, #1174	@ 0x496
 8005b42:	488c      	ldr	r0, [pc, #560]	@ (8005d74 <HAL_DAC_ConfigChannel+0x4ec>)
 8005b44:	f7fc fb6e 	bl	8002224 <assert_failed>
    assert_param(IS_DAC_HOLDTIME(sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime));
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b50:	d304      	bcc.n	8005b5c <HAL_DAC_ConfigChannel+0x2d4>
 8005b52:	f240 4197 	movw	r1, #1175	@ 0x497
 8005b56:	4887      	ldr	r0, [pc, #540]	@ (8005d74 <HAL_DAC_ConfigChannel+0x4ec>)
 8005b58:	f7fc fb64 	bl	8002224 <assert_failed>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b60:	2bff      	cmp	r3, #255	@ 0xff
 8005b62:	d904      	bls.n	8005b6e <HAL_DAC_ConfigChannel+0x2e6>
 8005b64:	f44f 6193 	mov.w	r1, #1176	@ 0x498
 8005b68:	4882      	ldr	r0, [pc, #520]	@ (8005d74 <HAL_DAC_ConfigChannel+0x4ec>)
 8005b6a:	f7fc fb5b 	bl	8002224 <assert_failed>
  }
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a81      	ldr	r2, [pc, #516]	@ (8005d78 <HAL_DAC_ConfigChannel+0x4f0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d106      	bne.n	8005b86 <HAL_DAC_ConfigChannel+0x2fe>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bf0c      	ite	eq
 8005b7e:	2301      	moveq	r3, #1
 8005b80:	2300      	movne	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	e00b      	b.n	8005b9e <HAL_DAC_ConfigChannel+0x316>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <HAL_DAC_ConfigChannel+0x30a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b10      	cmp	r3, #16
 8005b90:	d101      	bne.n	8005b96 <HAL_DAC_ConfigChannel+0x30e>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <HAL_DAC_ConfigChannel+0x310>
 8005b96:	2300      	movs	r3, #0
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d104      	bne.n	8005bac <HAL_DAC_ConfigChannel+0x324>
 8005ba2:	f240 419a 	movw	r1, #1178	@ 0x49a
 8005ba6:	4873      	ldr	r0, [pc, #460]	@ (8005d74 <HAL_DAC_ConfigChannel+0x4ec>)
 8005ba8:	f7fc fb3c 	bl	8002224 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	791b      	ldrb	r3, [r3, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d008      	beq.n	8005bc6 <HAL_DAC_ConfigChannel+0x33e>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	791b      	ldrb	r3, [r3, #4]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d004      	beq.n	8005bc6 <HAL_DAC_ConfigChannel+0x33e>
 8005bbc:	f240 419b 	movw	r1, #1179	@ 0x49b
 8005bc0:	486c      	ldr	r0, [pc, #432]	@ (8005d74 <HAL_DAC_ConfigChannel+0x4ec>)
 8005bc2:	f7fc fb2f 	bl	8002224 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	795b      	ldrb	r3, [r3, #5]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d008      	beq.n	8005be0 <HAL_DAC_ConfigChannel+0x358>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	795b      	ldrb	r3, [r3, #5]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d004      	beq.n	8005be0 <HAL_DAC_ConfigChannel+0x358>
 8005bd6:	f240 419c 	movw	r1, #1180	@ 0x49c
 8005bda:	4866      	ldr	r0, [pc, #408]	@ (8005d74 <HAL_DAC_ConfigChannel+0x4ec>)
 8005bdc:	f7fc fb22 	bl	8002224 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	795b      	ldrb	r3, [r3, #5]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_DAC_ConfigChannel+0x364>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e19d      	b.n	8005f28 <HAL_DAC_ConfigChannel+0x6a0>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d17a      	bne.n	8005cf6 <HAL_DAC_ConfigChannel+0x46e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005c00:	f7fc fdb4 	bl	800276c <HAL_GetTick>
 8005c04:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d13d      	bne.n	8005c88 <HAL_DAC_ConfigChannel+0x400>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c0c:	e018      	b.n	8005c40 <HAL_DAC_ConfigChannel+0x3b8>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005c0e:	f7fc fdad 	bl	800276c <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d911      	bls.n	8005c40 <HAL_DAC_ConfigChannel+0x3b8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <HAL_DAC_ConfigChannel+0x3b8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f043 0208 	orr.w	r2, r3, #8
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2203      	movs	r2, #3
 8005c3a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e173      	b.n	8005f28 <HAL_DAC_ConfigChannel+0x6a0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1df      	bne.n	8005c0e <HAL_DAC_ConfigChannel+0x386>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c56:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c58:	e020      	b.n	8005c9c <HAL_DAC_ConfigChannel+0x414>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005c5a:	f7fc fd87 	bl	800276c <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d90f      	bls.n	8005c88 <HAL_DAC_ConfigChannel+0x400>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	da0a      	bge.n	8005c88 <HAL_DAC_ConfigChannel+0x400>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f043 0208 	orr.w	r2, r3, #8
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2203      	movs	r2, #3
 8005c82:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e14f      	b.n	8005f28 <HAL_DAC_ConfigChannel+0x6a0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	dbe3      	blt.n	8005c5a <HAL_DAC_ConfigChannel+0x3d2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c9a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f003 0310 	and.w	r3, r3, #16
 8005ca8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005cac:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	ea02 0103 	and.w	r1, r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f003 0310 	and.w	r3, r3, #16
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f003 0310 	and.w	r3, r3, #16
 8005cd6:	21ff      	movs	r1, #255	@ 0xff
 8005cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	ea02 0103 	and.w	r1, r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f003 0310 	and.w	r3, r3, #16
 8005cec:	409a      	lsls	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d11d      	bne.n	8005d3a <HAL_DAC_ConfigChannel+0x4b2>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d04:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	221f      	movs	r2, #31
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	43db      	mvns	r3, r3
 8005d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d16:	4013      	ands	r3, r2
 8005d18:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f003 0310 	and.w	r3, r3, #16
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d38:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d40:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	2207      	movs	r2, #7
 8005d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4e:	43db      	mvns	r3, r3
 8005d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d52:	4013      	ands	r3, r2
 8005d54:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d102      	bne.n	8005d64 <HAL_DAC_ConfigChannel+0x4dc>
  {
    connectOnChip = 0x00000000UL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	623b      	str	r3, [r7, #32]
 8005d62:	e014      	b.n	8005d8e <HAL_DAC_ConfigChannel+0x506>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d107      	bne.n	8005d7c <HAL_DAC_ConfigChannel+0x4f4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	623b      	str	r3, [r7, #32]
 8005d70:	e00d      	b.n	8005d8e <HAL_DAC_ConfigChannel+0x506>
 8005d72:	bf00      	nop
 8005d74:	08014090 	.word	0x08014090
 8005d78:	50000c00 	.word	0x50000c00
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d102      	bne.n	8005d8a <HAL_DAC_ConfigChannel+0x502>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005d84:	2301      	movs	r3, #1
 8005d86:	623b      	str	r3, [r7, #32]
 8005d88:	e001      	b.n	8005d8e <HAL_DAC_ConfigChannel+0x506>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	6a3a      	ldr	r2, [r7, #32]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	43db      	mvns	r3, r3
 8005dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005db0:	4013      	ands	r3, r2
 8005db2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	791b      	ldrb	r3, [r3, #4]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d102      	bne.n	8005dc2 <HAL_DAC_ConfigChannel+0x53a>
 8005dbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005dc0:	e000      	b.n	8005dc4 <HAL_DAC_ConfigChannel+0x53c>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f003 0310 	and.w	r3, r3, #16
 8005dd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ddc:	4013      	ands	r3, r2
 8005dde:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	795b      	ldrb	r3, [r3, #5]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d102      	bne.n	8005dee <HAL_DAC_ConfigChannel+0x566>
 8005de8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005dec:	e000      	b.n	8005df0 <HAL_DAC_ConfigChannel+0x568>
 8005dee:	2300      	movs	r3, #0
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d114      	bne.n	8005e30 <HAL_DAC_ConfigChannel+0x5a8>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005e06:	f004 fc8b 	bl	800a720 <HAL_RCC_GetHCLKFreq>
 8005e0a:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	4a48      	ldr	r2, [pc, #288]	@ (8005f30 <HAL_DAC_ConfigChannel+0x6a8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d904      	bls.n	8005e1e <HAL_DAC_ConfigChannel+0x596>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e1c:	e00f      	b.n	8005e3e <HAL_DAC_ConfigChannel+0x5b6>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	4a44      	ldr	r2, [pc, #272]	@ (8005f34 <HAL_DAC_ConfigChannel+0x6ac>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d90a      	bls.n	8005e3c <HAL_DAC_ConfigChannel+0x5b4>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e2e:	e006      	b.n	8005e3e <HAL_DAC_ConfigChannel+0x5b6>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e36:	4313      	orrs	r3, r2
 8005e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e3a:	e000      	b.n	8005e3e <HAL_DAC_ConfigChannel+0x5b6>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005e3c:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f003 0310 	and.w	r3, r3, #16
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e56:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6819      	ldr	r1, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	43da      	mvns	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	400a      	ands	r2, r1
 8005e74:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f003 0310 	and.w	r3, r3, #16
 8005e84:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e90:	4013      	ands	r3, r2
 8005e92:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f003 0310 	and.w	r3, r3, #16
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6819      	ldr	r1, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f003 0310 	and.w	r3, r3, #16
 8005ec0:	22c0      	movs	r2, #192	@ 0xc0
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	43da      	mvns	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	400a      	ands	r2, r1
 8005ece:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	089b      	lsrs	r3, r3, #2
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	089b      	lsrs	r3, r3, #2
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f003 0310 	and.w	r3, r3, #16
 8005efa:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8005efe:	fa01 f303 	lsl.w	r3, r1, r3
 8005f02:	43db      	mvns	r3, r3
 8005f04:	ea02 0103 	and.w	r1, r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f003 0310 	and.w	r3, r3, #16
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	409a      	lsls	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005f26:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3728      	adds	r7, #40	@ 0x28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	09896800 	.word	0x09896800
 8005f34:	04c4b400 	.word	0x04c4b400

08005f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005f4c:	d01b      	beq.n	8005f86 <HAL_GPIO_Init+0x4e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a37      	ldr	r2, [pc, #220]	@ (8006030 <HAL_GPIO_Init+0xf8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d017      	beq.n	8005f86 <HAL_GPIO_Init+0x4e>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a36      	ldr	r2, [pc, #216]	@ (8006034 <HAL_GPIO_Init+0xfc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d013      	beq.n	8005f86 <HAL_GPIO_Init+0x4e>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a35      	ldr	r2, [pc, #212]	@ (8006038 <HAL_GPIO_Init+0x100>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00f      	beq.n	8005f86 <HAL_GPIO_Init+0x4e>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a34      	ldr	r2, [pc, #208]	@ (800603c <HAL_GPIO_Init+0x104>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00b      	beq.n	8005f86 <HAL_GPIO_Init+0x4e>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a33      	ldr	r2, [pc, #204]	@ (8006040 <HAL_GPIO_Init+0x108>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d007      	beq.n	8005f86 <HAL_GPIO_Init+0x4e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a32      	ldr	r2, [pc, #200]	@ (8006044 <HAL_GPIO_Init+0x10c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d003      	beq.n	8005f86 <HAL_GPIO_Init+0x4e>
 8005f7e:	21a9      	movs	r1, #169	@ 0xa9
 8005f80:	4831      	ldr	r0, [pc, #196]	@ (8006048 <HAL_GPIO_Init+0x110>)
 8005f82:	f7fc f94f 	bl	8002224 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d004      	beq.n	8005f9a <HAL_GPIO_Init+0x62>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f98:	d303      	bcc.n	8005fa2 <HAL_GPIO_Init+0x6a>
 8005f9a:	21aa      	movs	r1, #170	@ 0xaa
 8005f9c:	482a      	ldr	r0, [pc, #168]	@ (8006048 <HAL_GPIO_Init+0x110>)
 8005f9e:	f7fc f941 	bl	8002224 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 8209 	beq.w	80063be <HAL_GPIO_Init+0x486>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	f000 8204 	beq.w	80063be <HAL_GPIO_Init+0x486>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b11      	cmp	r3, #17
 8005fbc:	f000 81ff 	beq.w	80063be <HAL_GPIO_Init+0x486>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	f000 81fa 	beq.w	80063be <HAL_GPIO_Init+0x486>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b12      	cmp	r3, #18
 8005fd0:	f000 81f5 	beq.w	80063be <HAL_GPIO_Init+0x486>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8005fdc:	f000 81ef 	beq.w	80063be <HAL_GPIO_Init+0x486>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005fe8:	f000 81e9 	beq.w	80063be <HAL_GPIO_Init+0x486>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8005ff4:	f000 81e3 	beq.w	80063be <HAL_GPIO_Init+0x486>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8006000:	f000 81dd 	beq.w	80063be <HAL_GPIO_Init+0x486>
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 800600c:	f000 81d7 	beq.w	80063be <HAL_GPIO_Init+0x486>
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8006018:	f000 81d1 	beq.w	80063be <HAL_GPIO_Init+0x486>
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b03      	cmp	r3, #3
 8006022:	f000 81cc 	beq.w	80063be <HAL_GPIO_Init+0x486>
 8006026:	21ab      	movs	r1, #171	@ 0xab
 8006028:	4807      	ldr	r0, [pc, #28]	@ (8006048 <HAL_GPIO_Init+0x110>)
 800602a:	f7fc f8fb 	bl	8002224 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800602e:	e1c6      	b.n	80063be <HAL_GPIO_Init+0x486>
 8006030:	48000400 	.word	0x48000400
 8006034:	48000800 	.word	0x48000800
 8006038:	48000c00 	.word	0x48000c00
 800603c:	48001000 	.word	0x48001000
 8006040:	48001400 	.word	0x48001400
 8006044:	48001800 	.word	0x48001800
 8006048:	08014100 	.word	0x08014100
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	2101      	movs	r1, #1
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	fa01 f303 	lsl.w	r3, r1, r3
 8006058:	4013      	ands	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 81aa 	beq.w	80063b8 <HAL_GPIO_Init+0x480>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f003 0303 	and.w	r3, r3, #3
 800606c:	2b01      	cmp	r3, #1
 800606e:	d005      	beq.n	800607c <HAL_GPIO_Init+0x144>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006078:	2b02      	cmp	r3, #2
 800607a:	d144      	bne.n	8006106 <HAL_GPIO_Init+0x1ce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00f      	beq.n	80060a4 <HAL_GPIO_Init+0x16c>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d00b      	beq.n	80060a4 <HAL_GPIO_Init+0x16c>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	2b02      	cmp	r3, #2
 8006092:	d007      	beq.n	80060a4 <HAL_GPIO_Init+0x16c>
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	2b03      	cmp	r3, #3
 800609a:	d003      	beq.n	80060a4 <HAL_GPIO_Init+0x16c>
 800609c:	21bb      	movs	r1, #187	@ 0xbb
 800609e:	488b      	ldr	r0, [pc, #556]	@ (80062cc <HAL_GPIO_Init+0x394>)
 80060a0:	f7fc f8c0 	bl	8002224 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	2203      	movs	r2, #3
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	43db      	mvns	r3, r3
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4013      	ands	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060da:	2201      	movs	r2, #1
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	fa02 f303 	lsl.w	r3, r2, r3
 80060e2:	43db      	mvns	r3, r3
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4013      	ands	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	091b      	lsrs	r3, r3, #4
 80060f0:	f003 0201 	and.w	r2, r3, #1
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	2b03      	cmp	r3, #3
 8006110:	d027      	beq.n	8006162 <HAL_GPIO_Init+0x22a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00b      	beq.n	8006132 <HAL_GPIO_Init+0x1fa>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d007      	beq.n	8006132 <HAL_GPIO_Init+0x1fa>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	2b02      	cmp	r3, #2
 8006128:	d003      	beq.n	8006132 <HAL_GPIO_Init+0x1fa>
 800612a:	21cc      	movs	r1, #204	@ 0xcc
 800612c:	4867      	ldr	r0, [pc, #412]	@ (80062cc <HAL_GPIO_Init+0x394>)
 800612e:	f7fc f879 	bl	8002224 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	2203      	movs	r2, #3
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	43db      	mvns	r3, r3
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4013      	ands	r3, r2
 8006148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d14b      	bne.n	8006206 <HAL_GPIO_Init+0x2ce>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006174:	d01b      	beq.n	80061ae <HAL_GPIO_Init+0x276>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a55      	ldr	r2, [pc, #340]	@ (80062d0 <HAL_GPIO_Init+0x398>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d017      	beq.n	80061ae <HAL_GPIO_Init+0x276>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a54      	ldr	r2, [pc, #336]	@ (80062d4 <HAL_GPIO_Init+0x39c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <HAL_GPIO_Init+0x276>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a53      	ldr	r2, [pc, #332]	@ (80062d8 <HAL_GPIO_Init+0x3a0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00f      	beq.n	80061ae <HAL_GPIO_Init+0x276>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a52      	ldr	r2, [pc, #328]	@ (80062dc <HAL_GPIO_Init+0x3a4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00b      	beq.n	80061ae <HAL_GPIO_Init+0x276>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a51      	ldr	r2, [pc, #324]	@ (80062e0 <HAL_GPIO_Init+0x3a8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d007      	beq.n	80061ae <HAL_GPIO_Init+0x276>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a50      	ldr	r2, [pc, #320]	@ (80062e4 <HAL_GPIO_Init+0x3ac>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d003      	beq.n	80061ae <HAL_GPIO_Init+0x276>
 80061a6:	21d9      	movs	r1, #217	@ 0xd9
 80061a8:	4848      	ldr	r0, [pc, #288]	@ (80062cc <HAL_GPIO_Init+0x394>)
 80061aa:	f7fc f83b 	bl	8002224 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	2b0f      	cmp	r3, #15
 80061b4:	d903      	bls.n	80061be <HAL_GPIO_Init+0x286>
 80061b6:	21da      	movs	r1, #218	@ 0xda
 80061b8:	4844      	ldr	r0, [pc, #272]	@ (80062cc <HAL_GPIO_Init+0x394>)
 80061ba:	f7fc f833 	bl	8002224 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	08da      	lsrs	r2, r3, #3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3208      	adds	r2, #8
 80061c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	220f      	movs	r2, #15
 80061d6:	fa02 f303 	lsl.w	r3, r2, r3
 80061da:	43db      	mvns	r3, r3
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4013      	ands	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	08da      	lsrs	r2, r3, #3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3208      	adds	r2, #8
 8006200:	6939      	ldr	r1, [r7, #16]
 8006202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	2203      	movs	r2, #3
 8006212:	fa02 f303 	lsl.w	r3, r2, r3
 8006216:	43db      	mvns	r3, r3
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4013      	ands	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f003 0203 	and.w	r2, r3, #3
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 80b8 	beq.w	80063b8 <HAL_GPIO_Init+0x480>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006248:	4b27      	ldr	r3, [pc, #156]	@ (80062e8 <HAL_GPIO_Init+0x3b0>)
 800624a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800624c:	4a26      	ldr	r2, [pc, #152]	@ (80062e8 <HAL_GPIO_Init+0x3b0>)
 800624e:	f043 0301 	orr.w	r3, r3, #1
 8006252:	6613      	str	r3, [r2, #96]	@ 0x60
 8006254:	4b24      	ldr	r3, [pc, #144]	@ (80062e8 <HAL_GPIO_Init+0x3b0>)
 8006256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	60bb      	str	r3, [r7, #8]
 800625e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006260:	4a22      	ldr	r2, [pc, #136]	@ (80062ec <HAL_GPIO_Init+0x3b4>)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	089b      	lsrs	r3, r3, #2
 8006266:	3302      	adds	r3, #2
 8006268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800626c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f003 0303 	and.w	r3, r3, #3
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	220f      	movs	r2, #15
 8006278:	fa02 f303 	lsl.w	r3, r2, r3
 800627c:	43db      	mvns	r3, r3
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4013      	ands	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800628a:	d031      	beq.n	80062f0 <HAL_GPIO_Init+0x3b8>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a10      	ldr	r2, [pc, #64]	@ (80062d0 <HAL_GPIO_Init+0x398>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d019      	beq.n	80062c8 <HAL_GPIO_Init+0x390>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a0f      	ldr	r2, [pc, #60]	@ (80062d4 <HAL_GPIO_Init+0x39c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d013      	beq.n	80062c4 <HAL_GPIO_Init+0x38c>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a0e      	ldr	r2, [pc, #56]	@ (80062d8 <HAL_GPIO_Init+0x3a0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00d      	beq.n	80062c0 <HAL_GPIO_Init+0x388>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a0d      	ldr	r2, [pc, #52]	@ (80062dc <HAL_GPIO_Init+0x3a4>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d007      	beq.n	80062bc <HAL_GPIO_Init+0x384>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a0c      	ldr	r2, [pc, #48]	@ (80062e0 <HAL_GPIO_Init+0x3a8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d101      	bne.n	80062b8 <HAL_GPIO_Init+0x380>
 80062b4:	2305      	movs	r3, #5
 80062b6:	e01c      	b.n	80062f2 <HAL_GPIO_Init+0x3ba>
 80062b8:	2306      	movs	r3, #6
 80062ba:	e01a      	b.n	80062f2 <HAL_GPIO_Init+0x3ba>
 80062bc:	2304      	movs	r3, #4
 80062be:	e018      	b.n	80062f2 <HAL_GPIO_Init+0x3ba>
 80062c0:	2303      	movs	r3, #3
 80062c2:	e016      	b.n	80062f2 <HAL_GPIO_Init+0x3ba>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e014      	b.n	80062f2 <HAL_GPIO_Init+0x3ba>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e012      	b.n	80062f2 <HAL_GPIO_Init+0x3ba>
 80062cc:	08014100 	.word	0x08014100
 80062d0:	48000400 	.word	0x48000400
 80062d4:	48000800 	.word	0x48000800
 80062d8:	48000c00 	.word	0x48000c00
 80062dc:	48001000 	.word	0x48001000
 80062e0:	48001400 	.word	0x48001400
 80062e4:	48001800 	.word	0x48001800
 80062e8:	40021000 	.word	0x40021000
 80062ec:	40010000 	.word	0x40010000
 80062f0:	2300      	movs	r3, #0
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	f002 0203 	and.w	r2, r2, #3
 80062f8:	0092      	lsls	r2, r2, #2
 80062fa:	4093      	lsls	r3, r2
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006302:	4935      	ldr	r1, [pc, #212]	@ (80063d8 <HAL_GPIO_Init+0x4a0>)
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	089b      	lsrs	r3, r3, #2
 8006308:	3302      	adds	r3, #2
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006310:	4b32      	ldr	r3, [pc, #200]	@ (80063dc <HAL_GPIO_Init+0x4a4>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	43db      	mvns	r3, r3
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4013      	ands	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <HAL_GPIO_Init+0x3fc>
        {
          temp |= iocurrent;
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4313      	orrs	r3, r2
 8006332:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006334:	4a29      	ldr	r2, [pc, #164]	@ (80063dc <HAL_GPIO_Init+0x4a4>)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800633a:	4b28      	ldr	r3, [pc, #160]	@ (80063dc <HAL_GPIO_Init+0x4a4>)
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	43db      	mvns	r3, r3
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4013      	ands	r3, r2
 8006348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_GPIO_Init+0x426>
        {
          temp |= iocurrent;
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800635e:	4a1f      	ldr	r2, [pc, #124]	@ (80063dc <HAL_GPIO_Init+0x4a4>)
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006364:	4b1d      	ldr	r3, [pc, #116]	@ (80063dc <HAL_GPIO_Init+0x4a4>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	43db      	mvns	r3, r3
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4013      	ands	r3, r2
 8006372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <HAL_GPIO_Init+0x450>
        {
          temp |= iocurrent;
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4313      	orrs	r3, r2
 8006386:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006388:	4a14      	ldr	r2, [pc, #80]	@ (80063dc <HAL_GPIO_Init+0x4a4>)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800638e:	4b13      	ldr	r3, [pc, #76]	@ (80063dc <HAL_GPIO_Init+0x4a4>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	43db      	mvns	r3, r3
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	4013      	ands	r3, r2
 800639c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_GPIO_Init+0x47a>
        {
          temp |= iocurrent;
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80063b2:	4a0a      	ldr	r2, [pc, #40]	@ (80063dc <HAL_GPIO_Init+0x4a4>)
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	3301      	adds	r3, #1
 80063bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	fa22 f303 	lsr.w	r3, r2, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f47f ae3f 	bne.w	800604c <HAL_GPIO_Init+0x114>
  }
}
 80063ce:	bf00      	nop
 80063d0:	bf00      	nop
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40010000 	.word	0x40010000
 80063dc:	40010400 	.word	0x40010400

080063e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	807b      	strh	r3, [r7, #2]
 80063ec:	4613      	mov	r3, r2
 80063ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80063f0:	887b      	ldrh	r3, [r7, #2]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d104      	bne.n	8006400 <HAL_GPIO_WritePin+0x20>
 80063f6:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 80063fa:	480e      	ldr	r0, [pc, #56]	@ (8006434 <HAL_GPIO_WritePin+0x54>)
 80063fc:	f7fb ff12 	bl	8002224 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006400:	787b      	ldrb	r3, [r7, #1]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d007      	beq.n	8006416 <HAL_GPIO_WritePin+0x36>
 8006406:	787b      	ldrb	r3, [r7, #1]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d004      	beq.n	8006416 <HAL_GPIO_WritePin+0x36>
 800640c:	f240 119b 	movw	r1, #411	@ 0x19b
 8006410:	4808      	ldr	r0, [pc, #32]	@ (8006434 <HAL_GPIO_WritePin+0x54>)
 8006412:	f7fb ff07 	bl	8002224 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8006416:	787b      	ldrb	r3, [r7, #1]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800641c:	887a      	ldrh	r2, [r7, #2]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006422:	e002      	b.n	800642a <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006424:	887a      	ldrh	r2, [r7, #2]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800642a:	bf00      	nop
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	08014100 	.word	0x08014100

08006438 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006444:	887b      	ldrh	r3, [r7, #2]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d104      	bne.n	8006454 <HAL_GPIO_TogglePin+0x1c>
 800644a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800644e:	480a      	ldr	r0, [pc, #40]	@ (8006478 <HAL_GPIO_TogglePin+0x40>)
 8006450:	f7fb fee8 	bl	8002224 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800645a:	887a      	ldrh	r2, [r7, #2]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4013      	ands	r3, r2
 8006460:	041a      	lsls	r2, r3, #16
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	43d9      	mvns	r1, r3
 8006466:	887b      	ldrh	r3, [r7, #2]
 8006468:	400b      	ands	r3, r1
 800646a:	431a      	orrs	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	619a      	str	r2, [r3, #24]
}
 8006470:	bf00      	nop
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	08014100 	.word	0x08014100

0800647c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e113      	b.n	80066b6 <HAL_HRTIM_Init+0x23a>
  }

  /* Check the parameters */
  assert_param(IS_HRTIM_ALL_INSTANCE(hhrtim->Instance));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a8b      	ldr	r2, [pc, #556]	@ (80066c0 <HAL_HRTIM_Init+0x244>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d004      	beq.n	80064a2 <HAL_HRTIM_Init+0x26>
 8006498:	f44f 710d 	mov.w	r1, #564	@ 0x234
 800649c:	4889      	ldr	r0, [pc, #548]	@ (80066c4 <HAL_HRTIM_Init+0x248>)
 800649e:	f7fb fec1 	bl	8002224 <assert_failed>
  assert_param(IS_HRTIM_IT(hhrtim->Init.HRTIMInterruptResquests));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80064aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d004      	beq.n	80064bc <HAL_HRTIM_Init+0x40>
 80064b2:	f240 2135 	movw	r1, #565	@ 0x235
 80064b6:	4883      	ldr	r0, [pc, #524]	@ (80066c4 <HAL_HRTIM_Init+0x248>)
 80064b8:	f7fb feb4 	bl	8002224 <assert_failed>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d059      	beq.n	80065bc <HAL_HRTIM_Init+0x140>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCOUTPUTSOURCE(hhrtim->Init.SyncOutputSource));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d013      	beq.n	8006538 <HAL_HRTIM_Init+0xbc>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006518:	d00e      	beq.n	8006538 <HAL_HRTIM_Init+0xbc>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006522:	d009      	beq.n	8006538 <HAL_HRTIM_Init+0xbc>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800652c:	d004      	beq.n	8006538 <HAL_HRTIM_Init+0xbc>
 800652e:	f240 216d 	movw	r1, #621	@ 0x26d
 8006532:	4864      	ldr	r0, [pc, #400]	@ (80066c4 <HAL_HRTIM_Init+0x248>)
 8006534:	f7fb fe76 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00e      	beq.n	800655e <HAL_HRTIM_Init+0xe2>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006548:	d009      	beq.n	800655e <HAL_HRTIM_Init+0xe2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006552:	d004      	beq.n	800655e <HAL_HRTIM_Init+0xe2>
 8006554:	f240 216e 	movw	r1, #622	@ 0x26e
 8006558:	485a      	ldr	r0, [pc, #360]	@ (80066c4 <HAL_HRTIM_Init+0x248>)
 800655a:	f7fb fe63 	bl	8002224 <assert_failed>

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a57      	ldr	r2, [pc, #348]	@ (80066c0 <HAL_HRTIM_Init+0x244>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d10b      	bne.n	8006580 <HAL_HRTIM_Init+0x104>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8006568:	4b57      	ldr	r3, [pc, #348]	@ (80066c8 <HAL_HRTIM_Init+0x24c>)
 800656a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800656c:	4a56      	ldr	r2, [pc, #344]	@ (80066c8 <HAL_HRTIM_Init+0x24c>)
 800656e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006572:	6613      	str	r3, [r2, #96]	@ 0x60
 8006574:	4b54      	ldr	r3, [pc, #336]	@ (80066c8 <HAL_HRTIM_Init+0x24c>)
 8006576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006578:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800658e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80065a4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7fb fa25 	bl	8001a0c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d025      	beq.n	800661a <HAL_HRTIM_Init+0x19e>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00e      	beq.n	80065f4 <HAL_HRTIM_Init+0x178>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065de:	d009      	beq.n	80065f4 <HAL_HRTIM_Init+0x178>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065e8:	d004      	beq.n	80065f4 <HAL_HRTIM_Init+0x178>
 80065ea:	f240 2192 	movw	r1, #658	@ 0x292
 80065ee:	4835      	ldr	r0, [pc, #212]	@ (80066c4 <HAL_HRTIM_Init+0x248>)
 80065f0:	f7fb fe18 	bl	8002224 <assert_failed>

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006602:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	4313      	orrs	r3, r2
 8006610:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800662a:	2300      	movs	r3, #0
 800662c:	75fb      	strb	r3, [r7, #23]
 800662e:	e03e      	b.n	80066ae <HAL_HRTIM_Init+0x232>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8006630:	7dfa      	ldrb	r2, [r7, #23]
 8006632:	6879      	ldr	r1, [r7, #4]
 8006634:	4613      	mov	r3, r2
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	1a9b      	subs	r3, r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	3318      	adds	r3, #24
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8006644:	7dfa      	ldrb	r2, [r7, #23]
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	4613      	mov	r3, r2
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	1a9b      	subs	r3, r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	440b      	add	r3, r1
 8006652:	331c      	adds	r3, #28
 8006654:	2200      	movs	r2, #0
 8006656:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8006658:	7dfa      	ldrb	r2, [r7, #23]
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	4613      	mov	r3, r2
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	1a9b      	subs	r3, r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	440b      	add	r3, r1
 8006666:	3320      	adds	r3, #32
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800666c:	7dfa      	ldrb	r2, [r7, #23]
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	4613      	mov	r3, r2
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	440b      	add	r3, r1
 800667a:	3324      	adds	r3, #36	@ 0x24
 800667c:	2200      	movs	r2, #0
 800667e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8006680:	7dfa      	ldrb	r2, [r7, #23]
 8006682:	6879      	ldr	r1, [r7, #4]
 8006684:	4613      	mov	r3, r2
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	1a9b      	subs	r3, r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	3328      	adds	r3, #40	@ 0x28
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8006694:	7dfa      	ldrb	r2, [r7, #23]
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	4613      	mov	r3, r2
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	1a9b      	subs	r3, r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	440b      	add	r3, r1
 80066a2:	3330      	adds	r3, #48	@ 0x30
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
 80066aa:	3301      	adds	r3, #1
 80066ac:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
 80066b0:	2b06      	cmp	r3, #6
 80066b2:	d9bd      	bls.n	8006630 <HAL_HRTIM_Init+0x1b4>
  }

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	40016800 	.word	0x40016800
 80066c4:	08014174 	.word	0x08014174
 80066c8:	40021000 	.word	0x40021000

080066cc <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066dc:	d010      	beq.n	8006700 <HAL_HRTIM_DLLCalibrationStart+0x34>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00d      	beq.n	8006700 <HAL_HRTIM_DLLCalibrationStart+0x34>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d00a      	beq.n	8006700 <HAL_HRTIM_DLLCalibrationStart+0x34>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d007      	beq.n	8006700 <HAL_HRTIM_DLLCalibrationStart+0x34>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b0c      	cmp	r3, #12
 80066f4:	d004      	beq.n	8006700 <HAL_HRTIM_DLLCalibrationStart+0x34>
 80066f6:	f240 3109 	movw	r1, #777	@ 0x309
 80066fa:	482a      	ldr	r0, [pc, #168]	@ (80067a4 <HAL_HRTIM_DLLCalibrationStart+0xd8>)
 80066fc:	f7fb fd92 	bl	8002224 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006706:	2b01      	cmp	r3, #1
 8006708:	d101      	bne.n	800670e <HAL_HRTIM_DLLCalibrationStart+0x42>
 800670a:	2302      	movs	r3, #2
 800670c:	e045      	b.n	800679a <HAL_HRTIM_DLLCalibrationStart+0xce>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006724:	d114      	bne.n	8006750 <HAL_HRTIM_DLLCalibrationStart+0x84>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0202 	bic.w	r2, r2, #2
 8006736:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0201 	orr.w	r2, r2, #1
 800674a:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 800674e:	e01f      	b.n	8006790 <HAL_HRTIM_DLLCalibrationStart+0xc4>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f042 0202 	orr.w	r2, r2, #2
 8006760:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800676c:	f023 010c 	bic.w	r1, r3, #12
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f042 0201 	orr.w	r2, r2, #1
 800678c:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	08014174 	.word	0x08014174

080067a8 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80067b2:	f7fb ffdb 	bl	800276c <HAL_GetTick>
 80067b6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80067b8:	e014      	b.n	80067e4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c0:	d010      	beq.n	80067e4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80067c2:	f7fb ffd3 	bl	800276c <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d302      	bcc.n	80067d8 <HAL_HRTIM_PollForDLLCalibration+0x30>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d105      	bne.n	80067e4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2207      	movs	r2, #7
 80067dc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e011      	b.n	8006808 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80067ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067f4:	d1e1      	bne.n	80067ba <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2b06      	cmp	r3, #6
 8006820:	d016      	beq.n	8006850 <HAL_HRTIM_TimeBaseConfig+0x40>
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d013      	beq.n	8006850 <HAL_HRTIM_TimeBaseConfig+0x40>
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d010      	beq.n	8006850 <HAL_HRTIM_TimeBaseConfig+0x40>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d00d      	beq.n	8006850 <HAL_HRTIM_TimeBaseConfig+0x40>
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b03      	cmp	r3, #3
 8006838:	d00a      	beq.n	8006850 <HAL_HRTIM_TimeBaseConfig+0x40>
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b04      	cmp	r3, #4
 800683e:	d007      	beq.n	8006850 <HAL_HRTIM_TimeBaseConfig+0x40>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2b05      	cmp	r3, #5
 8006844:	d004      	beq.n	8006850 <HAL_HRTIM_TimeBaseConfig+0x40>
 8006846:	f240 3197 	movw	r1, #919	@ 0x397
 800684a:	482d      	ldr	r0, [pc, #180]	@ (8006900 <HAL_HRTIM_TimeBaseConfig+0xf0>)
 800684c:	f7fb fcea 	bl	8002224 <assert_failed>
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d020      	beq.n	800689a <HAL_HRTIM_TimeBaseConfig+0x8a>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d01c      	beq.n	800689a <HAL_HRTIM_TimeBaseConfig+0x8a>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	2b02      	cmp	r3, #2
 8006866:	d018      	beq.n	800689a <HAL_HRTIM_TimeBaseConfig+0x8a>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	2b03      	cmp	r3, #3
 800686e:	d014      	beq.n	800689a <HAL_HRTIM_TimeBaseConfig+0x8a>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	2b04      	cmp	r3, #4
 8006876:	d010      	beq.n	800689a <HAL_HRTIM_TimeBaseConfig+0x8a>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	2b05      	cmp	r3, #5
 800687e:	d00c      	beq.n	800689a <HAL_HRTIM_TimeBaseConfig+0x8a>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	2b06      	cmp	r3, #6
 8006886:	d008      	beq.n	800689a <HAL_HRTIM_TimeBaseConfig+0x8a>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2b07      	cmp	r3, #7
 800688e:	d004      	beq.n	800689a <HAL_HRTIM_TimeBaseConfig+0x8a>
 8006890:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8006894:	481a      	ldr	r0, [pc, #104]	@ (8006900 <HAL_HRTIM_TimeBaseConfig+0xf0>)
 8006896:	f7fb fcc5 	bl	8002224 <assert_failed>
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	2b08      	cmp	r3, #8
 80068a0:	d00c      	beq.n	80068bc <HAL_HRTIM_TimeBaseConfig+0xac>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d008      	beq.n	80068bc <HAL_HRTIM_TimeBaseConfig+0xac>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	2b10      	cmp	r3, #16
 80068b0:	d004      	beq.n	80068bc <HAL_HRTIM_TimeBaseConfig+0xac>
 80068b2:	f240 3199 	movw	r1, #921	@ 0x399
 80068b6:	4812      	ldr	r0, [pc, #72]	@ (8006900 <HAL_HRTIM_TimeBaseConfig+0xf0>)
 80068b8:	f7fb fcb4 	bl	8002224 <assert_failed>

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d101      	bne.n	80068cc <HAL_HRTIM_TimeBaseConfig+0xbc>
  {
     return HAL_BUSY;
 80068c8:	2302      	movs	r3, #2
 80068ca:	e015      	b.n	80068f8 <HAL_HRTIM_TimeBaseConfig+0xe8>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b06      	cmp	r3, #6
 80068d8:	d104      	bne.n	80068e4 <HAL_HRTIM_TimeBaseConfig+0xd4>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fc0f 	bl	8007100 <HRTIM_MasterBase_Config>
 80068e2:	e004      	b.n	80068ee <HAL_HRTIM_TimeBaseConfig+0xde>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	68b9      	ldr	r1, [r7, #8]
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 fc38 	bl	800715e <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	08014174 	.word	0x08014174

08006904 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b06      	cmp	r3, #6
 8006914:	d016      	beq.n	8006944 <HAL_HRTIM_WaveformTimerConfig+0x40>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d013      	beq.n	8006944 <HAL_HRTIM_WaveformTimerConfig+0x40>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d010      	beq.n	8006944 <HAL_HRTIM_WaveformTimerConfig+0x40>
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b02      	cmp	r3, #2
 8006926:	d00d      	beq.n	8006944 <HAL_HRTIM_WaveformTimerConfig+0x40>
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b03      	cmp	r3, #3
 800692c:	d00a      	beq.n	8006944 <HAL_HRTIM_WaveformTimerConfig+0x40>
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b04      	cmp	r3, #4
 8006932:	d007      	beq.n	8006944 <HAL_HRTIM_WaveformTimerConfig+0x40>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b05      	cmp	r3, #5
 8006938:	d004      	beq.n	8006944 <HAL_HRTIM_WaveformTimerConfig+0x40>
 800693a:	f241 3164 	movw	r1, #4964	@ 0x1364
 800693e:	4868      	ldr	r0, [pc, #416]	@ (8006ae0 <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8006940:	f7fb fc70 	bl	8002224 <assert_failed>

  /* Relevant for all HRTIM timers, including the master */
  assert_param(IS_HRTIM_HALFMODE(pTimerCfg->HalfModeEnable));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d008      	beq.n	800695e <HAL_HRTIM_WaveformTimerConfig+0x5a>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	2b20      	cmp	r3, #32
 8006952:	d004      	beq.n	800695e <HAL_HRTIM_WaveformTimerConfig+0x5a>
 8006954:	f241 3167 	movw	r1, #4967	@ 0x1367
 8006958:	4861      	ldr	r0, [pc, #388]	@ (8006ae0 <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 800695a:	f7fb fc63 	bl	8002224 <assert_failed>
  assert_param(IS_HRTIM_INTERLEAVEDMODE(pTimerCfg->InterleavedMode));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d018      	beq.n	8006998 <HAL_HRTIM_WaveformTimerConfig+0x94>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	2b02      	cmp	r3, #2
 800696c:	d014      	beq.n	8006998 <HAL_HRTIM_WaveformTimerConfig+0x94>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d010      	beq.n	8006998 <HAL_HRTIM_WaveformTimerConfig+0x94>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	2b03      	cmp	r3, #3
 800697c:	d00c      	beq.n	8006998 <HAL_HRTIM_WaveformTimerConfig+0x94>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d008      	beq.n	8006998 <HAL_HRTIM_WaveformTimerConfig+0x94>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	2b04      	cmp	r3, #4
 800698c:	d004      	beq.n	8006998 <HAL_HRTIM_WaveformTimerConfig+0x94>
 800698e:	f241 3168 	movw	r1, #4968	@ 0x1368
 8006992:	4853      	ldr	r0, [pc, #332]	@ (8006ae0 <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8006994:	f7fb fc46 	bl	8002224 <assert_failed>
  assert_param(IS_HRTIM_SYNCSTART(pTimerCfg->StartOnSync));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d009      	beq.n	80069b4 <HAL_HRTIM_WaveformTimerConfig+0xb0>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069a8:	d004      	beq.n	80069b4 <HAL_HRTIM_WaveformTimerConfig+0xb0>
 80069aa:	f241 3169 	movw	r1, #4969	@ 0x1369
 80069ae:	484c      	ldr	r0, [pc, #304]	@ (8006ae0 <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 80069b0:	f7fb fc38 	bl	8002224 <assert_failed>
  assert_param(IS_HRTIM_SYNCRESET(pTimerCfg->ResetOnSync));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d009      	beq.n	80069d0 <HAL_HRTIM_WaveformTimerConfig+0xcc>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069c4:	d004      	beq.n	80069d0 <HAL_HRTIM_WaveformTimerConfig+0xcc>
 80069c6:	f241 316a 	movw	r1, #4970	@ 0x136a
 80069ca:	4845      	ldr	r0, [pc, #276]	@ (8006ae0 <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 80069cc:	f7fb fc2a 	bl	8002224 <assert_failed>
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d013      	beq.n	8006a00 <HAL_HRTIM_WaveformTimerConfig+0xfc>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069e0:	d00e      	beq.n	8006a00 <HAL_HRTIM_WaveformTimerConfig+0xfc>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069ea:	d009      	beq.n	8006a00 <HAL_HRTIM_WaveformTimerConfig+0xfc>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f0:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 80069f4:	d004      	beq.n	8006a00 <HAL_HRTIM_WaveformTimerConfig+0xfc>
 80069f6:	f241 316b 	movw	r1, #4971	@ 0x136b
 80069fa:	4839      	ldr	r0, [pc, #228]	@ (8006ae0 <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 80069fc:	f7fb fc12 	bl	8002224 <assert_failed>
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d009      	beq.n	8006a1c <HAL_HRTIM_WaveformTimerConfig+0x118>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a10:	d004      	beq.n	8006a1c <HAL_HRTIM_WaveformTimerConfig+0x118>
 8006a12:	f241 316c 	movw	r1, #4972	@ 0x136c
 8006a16:	4832      	ldr	r0, [pc, #200]	@ (8006ae0 <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8006a18:	f7fb fc04 	bl	8002224 <assert_failed>
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <HAL_HRTIM_WaveformTimerConfig+0x134>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a2c:	d004      	beq.n	8006a38 <HAL_HRTIM_WaveformTimerConfig+0x134>
 8006a2e:	f241 316d 	movw	r1, #4973	@ 0x136d
 8006a32:	482b      	ldr	r0, [pc, #172]	@ (8006ae0 <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8006a34:	f7fb fbf6 	bl	8002224 <assert_failed>
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d009      	beq.n	8006a54 <HAL_HRTIM_WaveformTimerConfig+0x150>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a48:	d004      	beq.n	8006a54 <HAL_HRTIM_WaveformTimerConfig+0x150>
 8006a4a:	f241 316e 	movw	r1, #4974	@ 0x136e
 8006a4e:	4824      	ldr	r0, [pc, #144]	@ (8006ae0 <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8006a50:	f7fb fbe8 	bl	8002224 <assert_failed>

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d101      	bne.n	8006a64 <HAL_HRTIM_WaveformTimerConfig+0x160>
  {
     return HAL_BUSY;
 8006a60:	2302      	movs	r3, #2
 8006a62:	e18b      	b.n	8006d7c <HAL_HRTIM_WaveformTimerConfig+0x478>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <HAL_HRTIM_WaveformTimerConfig+0x16e>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	e184      	b.n	8006d7c <HAL_HRTIM_WaveformTimerConfig+0x478>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2b06      	cmp	r3, #6
 8006a86:	d12d      	bne.n	8006ae4 <HAL_HRTIM_WaveformTimerConfig+0x1e0>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00e      	beq.n	8006aae <HAL_HRTIM_WaveformTimerConfig+0x1aa>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a98:	d009      	beq.n	8006aae <HAL_HRTIM_WaveformTimerConfig+0x1aa>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aa2:	d004      	beq.n	8006aae <HAL_HRTIM_WaveformTimerConfig+0x1aa>
 8006aa4:	f241 317d 	movw	r1, #4989	@ 0x137d
 8006aa8:	480d      	ldr	r0, [pc, #52]	@ (8006ae0 <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8006aaa:	f7fb fbbb 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ab4:	d904      	bls.n	8006ac0 <HAL_HRTIM_WaveformTimerConfig+0x1bc>
 8006ab6:	f241 317e 	movw	r1, #4990	@ 0x137e
 8006aba:	4809      	ldr	r0, [pc, #36]	@ (8006ae0 <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8006abc:	f7fb fbb2 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d004      	beq.n	8006ad6 <HAL_HRTIM_WaveformTimerConfig+0x1d2>
 8006acc:	f241 317f 	movw	r1, #4991	@ 0x137f
 8006ad0:	4803      	ldr	r0, [pc, #12]	@ (8006ae0 <HAL_HRTIM_WaveformTimerConfig+0x1dc>)
 8006ad2:	f7fb fba7 	bl	8002224 <assert_failed>

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fb80 	bl	80071de <HRTIM_MasterWaveform_Config>
 8006ade:	e0ee      	b.n	8006cbe <HAL_HRTIM_WaveformTimerConfig+0x3ba>
 8006ae0:	08014174 	.word	0x08014174
  }
  else
  {
    /* Check parameters */
    assert_param(IS_HRTIM_UPDATEGATING_TIM(pTimerCfg->UpdateGating));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d02c      	beq.n	8006b46 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006af4:	d027      	beq.n	8006b46 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006afe:	d022      	beq.n	8006b46 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b08:	d01d      	beq.n	8006b46 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b12:	d018      	beq.n	8006b46 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b1c:	d013      	beq.n	8006b46 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b22:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006b26:	d00e      	beq.n	8006b46 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2c:	f1b3 4fe0 	cmp.w	r3, #1879048192	@ 0x70000000
 8006b30:	d009      	beq.n	8006b46 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b3a:	d004      	beq.n	8006b46 <HAL_HRTIM_WaveformTimerConfig+0x242>
 8006b3c:	f241 3187 	movw	r1, #4999	@ 0x1387
 8006b40:	4890      	ldr	r0, [pc, #576]	@ (8006d84 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8006b42:	f7fb fb6f 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_TIM_IT(pTimerCfg->InterruptRequests));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006b4e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d004      	beq.n	8006b60 <HAL_HRTIM_WaveformTimerConfig+0x25c>
 8006b56:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006b5a:	488a      	ldr	r0, [pc, #552]	@ (8006d84 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8006b5c:	f7fb fb62 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_TIM_DMA(pTimerCfg->DMARequests));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006b68:	f423 03be 	bic.w	r3, r3, #6225920	@ 0x5f0000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d004      	beq.n	8006b7a <HAL_HRTIM_WaveformTimerConfig+0x276>
 8006b70:	f241 3189 	movw	r1, #5001	@ 0x1389
 8006b74:	4883      	ldr	r0, [pc, #524]	@ (8006d84 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8006b76:	f7fb fb55 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_TIMPUSHPULLMODE(pTimerCfg->PushPull));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d008      	beq.n	8006b94 <HAL_HRTIM_WaveformTimerConfig+0x290>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b86:	2b40      	cmp	r3, #64	@ 0x40
 8006b88:	d004      	beq.n	8006b94 <HAL_HRTIM_WaveformTimerConfig+0x290>
 8006b8a:	f241 318a 	movw	r1, #5002	@ 0x138a
 8006b8e:	487d      	ldr	r0, [pc, #500]	@ (8006d84 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8006b90:	f7fb fb48 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_TIMFAULTENABLE(pTimerCfg->FaultEnable));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b98:	2b3f      	cmp	r3, #63	@ 0x3f
 8006b9a:	d904      	bls.n	8006ba6 <HAL_HRTIM_WaveformTimerConfig+0x2a2>
 8006b9c:	f241 318b 	movw	r1, #5003	@ 0x138b
 8006ba0:	4878      	ldr	r0, [pc, #480]	@ (8006d84 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8006ba2:	f7fb fb3f 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_TIMFAULTLOCK(pTimerCfg->FaultLock));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d009      	beq.n	8006bc2 <HAL_HRTIM_WaveformTimerConfig+0x2be>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bb6:	d004      	beq.n	8006bc2 <HAL_HRTIM_WaveformTimerConfig+0x2be>
 8006bb8:	f241 318c 	movw	r1, #5004	@ 0x138c
 8006bbc:	4871      	ldr	r0, [pc, #452]	@ (8006d84 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8006bbe:	f7fb fb31 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_TIMDEADTIMEINSERTION(pTimerCfg->PushPull,
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d009      	beq.n	8006bde <HAL_HRTIM_WaveformTimerConfig+0x2da>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bd2:	d004      	beq.n	8006bde <HAL_HRTIM_WaveformTimerConfig+0x2da>
 8006bd4:	f241 318d 	movw	r1, #5005	@ 0x138d
 8006bd8:	486a      	ldr	r0, [pc, #424]	@ (8006d84 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8006bda:	f7fb fb23 	bl	8002224 <assert_failed>
                                               pTimerCfg->DeadTimeInsertion));
    assert_param(IS_HRTIM_TIMDELAYEDPROTECTION(pTimerCfg->PushPull,
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d030      	beq.n	8006c48 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bee:	d02b      	beq.n	8006c48 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bf4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006bf8:	d026      	beq.n	8006c48 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bfe:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006c02:	d021      	beq.n	8006c48 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c08:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8006c0c:	d01c      	beq.n	8006c48 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c12:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
 8006c16:	d017      	beq.n	8006c48 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c1c:	f5b3 5fd0 	cmp.w	r3, #6656	@ 0x1a00
 8006c20:	d012      	beq.n	8006c48 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c26:	2b40      	cmp	r3, #64	@ 0x40
 8006c28:	d109      	bne.n	8006c3e <HAL_HRTIM_WaveformTimerConfig+0x33a>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c2e:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8006c32:	d009      	beq.n	8006c48 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c38:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8006c3c:	d004      	beq.n	8006c48 <HAL_HRTIM_WaveformTimerConfig+0x344>
 8006c3e:	f241 318f 	movw	r1, #5007	@ 0x138f
 8006c42:	4850      	ldr	r0, [pc, #320]	@ (8006d84 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8006c44:	f7fb faee 	bl	8002224 <assert_failed>
                                               pTimerCfg->DelayedProtectionMode));
    assert_param(IS_HRTIM_OUTPUTBALANCEDIDLE(pTimerCfg->BalancedIdleAutomaticResume));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d009      	beq.n	8006c64 <HAL_HRTIM_WaveformTimerConfig+0x360>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c58:	d004      	beq.n	8006c64 <HAL_HRTIM_WaveformTimerConfig+0x360>
 8006c5a:	f241 3191 	movw	r1, #5009	@ 0x1391
 8006c5e:	4849      	ldr	r0, [pc, #292]	@ (8006d84 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8006c60:	f7fb fae0 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c68:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8006c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <HAL_HRTIM_WaveformTimerConfig+0x37a>
 8006c74:	f241 3192 	movw	r1, #5010	@ 0x1392
 8006c78:	4842      	ldr	r0, [pc, #264]	@ (8006d84 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8006c7a:	f7fb fad3 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <HAL_HRTIM_WaveformTimerConfig+0x396>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c8e:	d004      	beq.n	8006c9a <HAL_HRTIM_WaveformTimerConfig+0x396>
 8006c90:	f241 3194 	movw	r1, #5012	@ 0x1394
 8006c94:	483b      	ldr	r0, [pc, #236]	@ (8006d84 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8006c96:	f7fb fac5 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d008      	beq.n	8006cb4 <HAL_HRTIM_WaveformTimerConfig+0x3b0>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d004      	beq.n	8006cb4 <HAL_HRTIM_WaveformTimerConfig+0x3b0>
 8006caa:	f241 3195 	movw	r1, #5013	@ 0x1395
 8006cae:	4835      	ldr	r0, [pc, #212]	@ (8006d84 <HAL_HRTIM_WaveformTimerConfig+0x480>)
 8006cb0:	f7fb fab8 	bl	8002224 <assert_failed>

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 fb2d 	bl	8007318 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6819      	ldr	r1, [r3, #0]
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	00db      	lsls	r3, r3, #3
 8006cca:	1a9b      	subs	r3, r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4403      	add	r3, r0
 8006cd0:	3320      	adds	r3, #32
 8006cd2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6859      	ldr	r1, [r3, #4]
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4403      	add	r3, r0
 8006ce6:	3324      	adds	r3, #36	@ 0x24
 8006ce8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6899      	ldr	r1, [r3, #8]
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	1a9b      	subs	r3, r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4403      	add	r3, r0
 8006cfc:	3328      	adds	r3, #40	@ 0x28
 8006cfe:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68d9      	ldr	r1, [r3, #12]
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	1a9b      	subs	r3, r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4403      	add	r3, r0
 8006d12:	332c      	adds	r3, #44	@ 0x2c
 8006d14:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6919      	ldr	r1, [r3, #16]
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	1a9b      	subs	r3, r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4403      	add	r3, r0
 8006d28:	3330      	adds	r3, #48	@ 0x30
 8006d2a:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8006d2c:	68b9      	ldr	r1, [r7, #8]
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 fcd8 	bl	80076e4 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b06      	cmp	r3, #6
 8006d38:	d017      	beq.n	8006d6a <HAL_HRTIM_WaveformTimerConfig+0x466>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d113      	bne.n	8006d6a <HAL_HRTIM_WaveformTimerConfig+0x466>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	01db      	lsls	r3, r3, #7
 8006d4c:	4413      	add	r3, r2
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d58:	025b      	lsls	r3, r3, #9
 8006d5a:	68f9      	ldr	r1, [r7, #12]
 8006d5c:	6809      	ldr	r1, [r1, #0]
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	3301      	adds	r3, #1
 8006d64:	01db      	lsls	r3, r3, #7
 8006d66:	440b      	add	r3, r1
 8006d68:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	08014174 	.word	0x08014174

08006d88 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
    /* Check parameters */
    assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2b06      	cmp	r3, #6
 8006d98:	d016      	beq.n	8006dc8 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d013      	beq.n	8006dc8 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d010      	beq.n	8006dc8 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d00d      	beq.n	8006dc8 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d00a      	beq.n	8006dc8 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d007      	beq.n	8006dc8 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b05      	cmp	r3, #5
 8006dbc:	d004      	beq.n	8006dc8 <HAL_HRTIM_WaveformTimerControl+0x40>
 8006dbe:	f241 31cc 	movw	r1, #5068	@ 0x13cc
 8006dc2:	4847      	ldr	r0, [pc, #284]	@ (8006ee0 <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006dc4:	f7fb fa2e 	bl	8002224 <assert_failed>
    /* Relevant for all A..F HRTIM timers */
    assert_param(IS_HRTIM_TIMERUPDOWNMODE(pTimerCtl->UpDownMode));
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d008      	beq.n	8006de2 <HAL_HRTIM_WaveformTimerControl+0x5a>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d004      	beq.n	8006de2 <HAL_HRTIM_WaveformTimerControl+0x5a>
 8006dd8:	f241 31ce 	movw	r1, #5070	@ 0x13ce
 8006ddc:	4840      	ldr	r0, [pc, #256]	@ (8006ee0 <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006dde:	f7fb fa21 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_TIMERTRGHLFMODE(pTimerCtl->TrigHalf));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d009      	beq.n	8006dfe <HAL_HRTIM_WaveformTimerControl+0x76>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006df2:	d004      	beq.n	8006dfe <HAL_HRTIM_WaveformTimerControl+0x76>
 8006df4:	f241 31cf 	movw	r1, #5071	@ 0x13cf
 8006df8:	4839      	ldr	r0, [pc, #228]	@ (8006ee0 <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006dfa:	f7fb fa13 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_TIMERGTCMP3(pTimerCtl->GreaterCMP3));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d009      	beq.n	8006e1a <HAL_HRTIM_WaveformTimerControl+0x92>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e0e:	d004      	beq.n	8006e1a <HAL_HRTIM_WaveformTimerControl+0x92>
 8006e10:	f241 31d0 	movw	r1, #5072	@ 0x13d0
 8006e14:	4832      	ldr	r0, [pc, #200]	@ (8006ee0 <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006e16:	f7fb fa05 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d009      	beq.n	8006e36 <HAL_HRTIM_WaveformTimerControl+0xae>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e2a:	d004      	beq.n	8006e36 <HAL_HRTIM_WaveformTimerControl+0xae>
 8006e2c:	f241 31d1 	movw	r1, #5073	@ 0x13d1
 8006e30:	482b      	ldr	r0, [pc, #172]	@ (8006ee0 <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006e32:	f7fb f9f7 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d008      	beq.n	8006e50 <HAL_HRTIM_WaveformTimerControl+0xc8>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d004      	beq.n	8006e50 <HAL_HRTIM_WaveformTimerControl+0xc8>
 8006e46:	f241 31d2 	movw	r1, #5074	@ 0x13d2
 8006e4a:	4825      	ldr	r0, [pc, #148]	@ (8006ee0 <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006e4c:	f7fb f9ea 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d008      	beq.n	8006e6a <HAL_HRTIM_WaveformTimerControl+0xe2>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d004      	beq.n	8006e6a <HAL_HRTIM_WaveformTimerControl+0xe2>
 8006e60:	f241 31d3 	movw	r1, #5075	@ 0x13d3
 8006e64:	481e      	ldr	r0, [pc, #120]	@ (8006ee0 <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006e66:	f7fb f9dd 	bl	8002224 <assert_failed>
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d008      	beq.n	8006e84 <HAL_HRTIM_WaveformTimerControl+0xfc>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d004      	beq.n	8006e84 <HAL_HRTIM_WaveformTimerControl+0xfc>
 8006e7a:	f241 31d4 	movw	r1, #5076	@ 0x13d4
 8006e7e:	4818      	ldr	r0, [pc, #96]	@ (8006ee0 <HAL_HRTIM_WaveformTimerControl+0x158>)
 8006e80:	f7fb f9d0 	bl	8002224 <assert_failed>

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d101      	bne.n	8006e94 <HAL_HRTIM_WaveformTimerControl+0x10c>
    {
       return HAL_BUSY;
 8006e90:	2302      	movs	r3, #2
 8006e92:	e020      	b.n	8006ed6 <HAL_HRTIM_WaveformTimerControl+0x14e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d101      	bne.n	8006ea2 <HAL_HRTIM_WaveformTimerControl+0x11a>
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	e019      	b.n	8006ed6 <HAL_HRTIM_WaveformTimerControl+0x14e>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2202      	movs	r2, #2
 8006eae:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	68b9      	ldr	r1, [r7, #8]
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 fbb4 	bl	8007624 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 fc10 	bl	80076e4 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	08014174 	.word	0x08014174

08006ee4 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2bff      	cmp	r3, #255	@ 0xff
 8006ef2:	d103      	bne.n	8006efc <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fc63 	bl	80077c0 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8006efa:	e00a      	b.n	8006f12 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b06      	cmp	r3, #6
 8006f00:	d103      	bne.n	8006f0a <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fcec 	bl	80078e0 <HRTIM_Master_ISR>
}
 8006f08:	e003      	b.n	8006f12 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fdac 	bl	8007a6a <HRTIM_Timer_ISR>
}
 8006f12:	bf00      	nop
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8006f22:	bf00      	nop
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b083      	sub	sp, #12
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b083      	sub	sp, #12
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 8006fae:	bf00      	nop
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8006fc2:	bf00      	nop
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8007002:	bf00      	nop
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 800702e:	bf00      	nop
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800703a:	b480      	push	{r7}
 800703c:	b083      	sub	sp, #12
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 800705a:	bf00      	nop
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 80070b2:	bf00      	nop
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b083      	sub	sp, #12
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f023 0307 	bic.w	r3, r3, #7
 8007118:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 0318 	bic.w	r3, r3, #24
 800712a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	4313      	orrs	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	6812      	ldr	r2, [r2, #0]
 8007146:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	6852      	ldr	r2, [r2, #4]
 8007150:	619a      	str	r2, [r3, #24]
}
 8007152:	bf00      	nop
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800715e:	b480      	push	{r7}
 8007160:	b087      	sub	sp, #28
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	3301      	adds	r3, #1
 8007172:	01db      	lsls	r3, r3, #7
 8007174:	4413      	add	r3, r2
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f023 0307 	bic.w	r3, r3, #7
 8007180:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	4313      	orrs	r3, r2
 800718a:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f023 0318 	bic.w	r3, r3, #24
 8007192:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	4313      	orrs	r3, r2
 800719c:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	3301      	adds	r3, #1
 80071a6:	01db      	lsls	r3, r3, #7
 80071a8:	4413      	add	r3, r2
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6819      	ldr	r1, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	01db      	lsls	r3, r3, #7
 80071ba:	440b      	add	r3, r1
 80071bc:	3394      	adds	r3, #148	@ 0x94
 80071be:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6819      	ldr	r1, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	01db      	lsls	r3, r3, #7
 80071cc:	440b      	add	r3, r1
 80071ce:	3398      	adds	r3, #152	@ 0x98
 80071d0:	601a      	str	r2, [r3, #0]
}
 80071d2:	bf00      	nop
 80071d4:	371c      	adds	r7, #28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80071de:	b480      	push	{r7}
 80071e0:	b085      	sub	sp, #20
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80071f8:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f023 0320 	bic.w	r3, r3, #32
 8007200:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	4313      	orrs	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007212:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	2b20      	cmp	r3, #32
 800721a:	d003      	beq.n	8007224 <HRTIM_MasterWaveform_Config+0x46>
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	2b02      	cmp	r3, #2
 8007222:	d108      	bne.n	8007236 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800722a:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f043 0320 	orr.w	r3, r3, #32
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	e021      	b.n	800727a <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	2b03      	cmp	r3, #3
 800723c:	d108      	bne.n	8007250 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007244:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	e014      	b.n	800727a <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	2b04      	cmp	r3, #4
 8007256:	d108      	bne.n	800726a <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800725e:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	e007      	b.n	800727a <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f023 0320 	bic.w	r3, r3, #32
 8007270:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007278:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007280:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007292:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80072a4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80072b6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80072c8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80072dc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072ee:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 800730c:	bf00      	nop
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007318:	b480      	push	{r7}
 800731a:	b08b      	sub	sp, #44	@ 0x2c
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	3301      	adds	r3, #1
 800732c:	01db      	lsls	r3, r3, #7
 800732e:	4413      	add	r3, r2
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	6811      	ldr	r1, [r2, #0]
 8007336:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	3301      	adds	r3, #1
 800733e:	01db      	lsls	r3, r3, #7
 8007340:	440b      	add	r3, r1
 8007342:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	3301      	adds	r3, #1
 800734c:	01db      	lsls	r3, r3, #7
 800734e:	4413      	add	r3, r2
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	01db      	lsls	r3, r3, #7
 800735c:	4413      	add	r3, r2
 800735e:	33e8      	adds	r3, #232	@ 0xe8
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	01db      	lsls	r3, r3, #7
 800736c:	4413      	add	r3, r2
 800736e:	33e4      	adds	r3, #228	@ 0xe4
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 800737c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	f023 0320 	bic.w	r3, r3, #32
 8007384:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800738c:	4313      	orrs	r3, r2
 800738e:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	2b20      	cmp	r3, #32
 8007396:	d003      	beq.n	80073a0 <HRTIM_TimingUnitWaveform_Config+0x88>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	2b02      	cmp	r3, #2
 800739e:	d108      	bne.n	80073b2 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80073a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a2:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 80073a6:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 80073a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073aa:	f043 0320 	orr.w	r3, r3, #32
 80073ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80073b0:	e021      	b.n	80073f6 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d108      	bne.n	80073cc <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c0:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 80073c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80073ca:	e014      	b.n	80073f6 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	2b04      	cmp	r3, #4
 80073d2:	d108      	bne.n	80073e6 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 80073d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073da:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 80073dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80073e4:	e007      	b.n	80073f6 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	f023 0320 	bic.w	r3, r3, #32
 80073ec:	627b      	str	r3, [r7, #36]	@ 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 80073f4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073fc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007404:	4313      	orrs	r3, r2
 8007406:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8007408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800740e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007416:	4313      	orrs	r3, r2
 8007418:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800741a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007420:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007428:	4313      	orrs	r3, r2
 800742a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800742c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8007432:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800743a:	4313      	orrs	r3, r2
 800743c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007444:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800744a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800744c:	4313      	orrs	r3, r2
 800744e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8007450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007452:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007456:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800745c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007460:	d103      	bne.n	800746a <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007468:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007478:	4313      	orrs	r3, r2
 800747a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 800747c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007482:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800748a:	4313      	orrs	r3, r2
 800748c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8007494:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007498:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800749e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074a0:	4313      	orrs	r3, r2
 80074a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80074aa:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074c0:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074d2:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d8:	6a3a      	ldr	r2, [r7, #32]
 80074da:	4313      	orrs	r3, r2
 80074dc:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074e2:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80074e6:	d004      	beq.n	80074f2 <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074ec:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 80074f0:	d103      	bne.n	80074fa <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f6:	2b40      	cmp	r3, #64	@ 0x40
 80074f8:	d108      	bne.n	800750c <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8007500:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007506:	6a3a      	ldr	r2, [r7, #32]
 8007508:	4313      	orrs	r3, r2
 800750a:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007512:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007518:	6a3a      	ldr	r2, [r7, #32]
 800751a:	4313      	orrs	r3, r2
 800751c:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007522:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b05      	cmp	r3, #5
 8007528:	d850      	bhi.n	80075cc <HRTIM_TimingUnitWaveform_Config+0x2b4>
 800752a:	a201      	add	r2, pc, #4	@ (adr r2, 8007530 <HRTIM_TimingUnitWaveform_Config+0x218>)
 800752c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007530:	08007549 	.word	0x08007549
 8007534:	0800755f 	.word	0x0800755f
 8007538:	08007575 	.word	0x08007575
 800753c:	0800758b 	.word	0x0800758b
 8007540:	080075a1 	.word	0x080075a1
 8007544:	080075b7 	.word	0x080075b7
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800754e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	69fa      	ldr	r2, [r7, #28]
 8007558:	4313      	orrs	r3, r2
 800755a:	61fb      	str	r3, [r7, #28]
      break;
 800755c:	e037      	b.n	80075ce <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007564:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	69fa      	ldr	r2, [r7, #28]
 800756e:	4313      	orrs	r3, r2
 8007570:	61fb      	str	r3, [r7, #28]
      break;
 8007572:	e02c      	b.n	80075ce <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800757a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	4313      	orrs	r3, r2
 8007586:	61fb      	str	r3, [r7, #28]
      break;
 8007588:	e021      	b.n	80075ce <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007590:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007596:	011b      	lsls	r3, r3, #4
 8007598:	69fa      	ldr	r2, [r7, #28]
 800759a:	4313      	orrs	r3, r2
 800759c:	61fb      	str	r3, [r7, #28]
      break;
 800759e:	e016      	b.n	80075ce <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075a6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ac:	015b      	lsls	r3, r3, #5
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	61fb      	str	r3, [r7, #28]
      break;
 80075b4:	e00b      	b.n	80075ce <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80075bc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c2:	019b      	lsls	r3, r3, #6
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	61fb      	str	r3, [r7, #28]
      break;
 80075ca:	e000      	b.n	80075ce <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 80075cc:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	3301      	adds	r3, #1
 80075d6:	01db      	lsls	r3, r3, #7
 80075d8:	4413      	add	r3, r2
 80075da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075dc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	01db      	lsls	r3, r3, #7
 80075e6:	4413      	add	r3, r2
 80075e8:	33e8      	adds	r3, #232	@ 0xe8
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	01db      	lsls	r3, r3, #7
 80075f6:	4413      	add	r3, r2
 80075f8:	33e4      	adds	r3, #228	@ 0xe4
 80075fa:	6a3a      	ldr	r2, [r7, #32]
 80075fc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	01db      	lsls	r3, r3, #7
 8007606:	4413      	add	r3, r2
 8007608:	33d4      	adds	r3, #212	@ 0xd4
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69fa      	ldr	r2, [r7, #28]
 8007614:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8007618:	bf00      	nop
 800761a:	372c      	adds	r7, #44	@ 0x2c
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	01db      	lsls	r3, r3, #7
 8007638:	4413      	add	r3, r2
 800763a:	33ec      	adds	r3, #236	@ 0xec
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f023 0310 	bic.w	r3, r3, #16
 8007646:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	011b      	lsls	r3, r3, #4
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800765a:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	4313      	orrs	r3, r2
 8007664:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800766c:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	4313      	orrs	r3, r2
 8007676:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800767e:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	4313      	orrs	r3, r2
 8007688:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d11a      	bne.n	80076c8 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f023 0304 	bic.w	r3, r3, #4
 8007698:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f023 0302 	bic.w	r3, r3, #2
 80076aa:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f023 0301 	bic.w	r3, r3, #1
 80076bc:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	01db      	lsls	r3, r3, #7
 80076d0:	4413      	add	r3, r2
 80076d2:	33ec      	adds	r3, #236	@ 0xec
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	601a      	str	r2, [r3, #0]

}
 80076d8:	bf00      	nop
 80076da:	371c      	adds	r7, #28
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b06      	cmp	r3, #6
 80076f2:	d85e      	bhi.n	80077b2 <HRTIM_ForceRegistersUpdate+0xce>
 80076f4:	a201      	add	r2, pc, #4	@ (adr r2, 80076fc <HRTIM_ForceRegistersUpdate+0x18>)
 80076f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fa:	bf00      	nop
 80076fc:	0800772f 	.word	0x0800772f
 8007700:	08007745 	.word	0x08007745
 8007704:	0800775b 	.word	0x0800775b
 8007708:	08007771 	.word	0x08007771
 800770c:	08007787 	.word	0x08007787
 8007710:	0800779d 	.word	0x0800779d
 8007714:	08007719 	.word	0x08007719
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f042 0201 	orr.w	r2, r2, #1
 8007728:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800772c:	e042      	b.n	80077b4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 0202 	orr.w	r2, r2, #2
 800773e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8007742:	e037      	b.n	80077b4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f042 0204 	orr.w	r2, r2, #4
 8007754:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8007758:	e02c      	b.n	80077b4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0208 	orr.w	r2, r2, #8
 800776a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800776e:	e021      	b.n	80077b4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f042 0210 	orr.w	r2, r2, #16
 8007780:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8007784:	e016      	b.n	80077b4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0220 	orr.w	r2, r2, #32
 8007796:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800779a:	e00b      	b.n	80077b4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077ac:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80077b0:	e000      	b.n	80077b4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 80077b2:	bf00      	nop
  }
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80077d0:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80077da:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00c      	beq.n	8007800 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d007      	beq.n	8007800 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7ff fb8d 	bl	8006f1a <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00c      	beq.n	8007824 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f003 0302 	and.w	r3, r3, #2
 8007810:	2b00      	cmp	r3, #0
 8007812:	d007      	beq.n	8007824 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2202      	movs	r2, #2
 800781a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7ff fb85 	bl	8006f2e <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f003 0304 	and.w	r3, r3, #4
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00c      	beq.n	8007848 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b00      	cmp	r3, #0
 8007836:	d007      	beq.n	8007848 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2204      	movs	r2, #4
 800783e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff fb7d 	bl	8006f42 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f003 0308 	and.w	r3, r3, #8
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00c      	beq.n	800786c <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	f003 0308 	and.w	r3, r3, #8
 8007858:	2b00      	cmp	r3, #0
 800785a:	d007      	beq.n	800786c <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2208      	movs	r2, #8
 8007862:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7ff fb75 	bl	8006f56 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f003 0310 	and.w	r3, r3, #16
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00c      	beq.n	8007890 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	f003 0310 	and.w	r3, r3, #16
 800787c:	2b00      	cmp	r3, #0
 800787e:	d007      	beq.n	8007890 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2210      	movs	r2, #16
 8007886:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff fb6d 	bl	8006f6a <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00c      	beq.n	80078b4 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d007      	beq.n	80078b4 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2240      	movs	r2, #64	@ 0x40
 80078aa:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff fb65 	bl	8006f7e <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f003 0320 	and.w	r3, r3, #32
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00c      	beq.n	80078d8 <HRTIM_HRTIM_ISR+0x118>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	f003 0320 	and.w	r3, r3, #32
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d007      	beq.n	80078d8 <HRTIM_HRTIM_ISR+0x118>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2220      	movs	r2, #32
 80078ce:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7ff fb5d 	bl	8006f92 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80078d8:	bf00      	nop
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80078f0:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80078fa:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	60bb      	str	r3, [r7, #8]

  /* DLL calibration ready event */
  if((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d015      	beq.n	8007942 <HRTIM_Master_ISR+0x62>
  {
    if((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d010      	beq.n	8007942 <HRTIM_Master_ISR+0x62>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007928:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7ff fb32 	bl	8006fa6 <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00d      	beq.n	8007968 <HRTIM_Master_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d008      	beq.n	8007968 <HRTIM_Master_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800795e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff fb29 	bl	8006fba <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00c      	beq.n	800798c <HRTIM_Master_ISR+0xac>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d007      	beq.n	800798c <HRTIM_Master_ISR+0xac>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2201      	movs	r2, #1
 8007982:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8007984:	2106      	movs	r1, #6
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff fb36 	bl	8006ff8 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00c      	beq.n	80079b0 <HRTIM_Master_ISR+0xd0>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d007      	beq.n	80079b0 <HRTIM_Master_ISR+0xd0>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2202      	movs	r2, #2
 80079a6:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80079a8:	2106      	movs	r1, #6
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff fb2f 	bl	800700e <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f003 0304 	and.w	r3, r3, #4
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00c      	beq.n	80079d4 <HRTIM_Master_ISR+0xf4>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d007      	beq.n	80079d4 <HRTIM_Master_ISR+0xf4>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2204      	movs	r2, #4
 80079ca:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80079cc:	2106      	movs	r1, #6
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff fb28 	bl	8007024 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f003 0308 	and.w	r3, r3, #8
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00c      	beq.n	80079f8 <HRTIM_Master_ISR+0x118>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f003 0308 	and.w	r3, r3, #8
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d007      	beq.n	80079f8 <HRTIM_Master_ISR+0x118>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2208      	movs	r2, #8
 80079ee:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80079f0:	2106      	movs	r1, #6
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff fb21 	bl	800703a <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f003 0310 	and.w	r3, r3, #16
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00c      	beq.n	8007a1c <HRTIM_Master_ISR+0x13c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f003 0310 	and.w	r3, r3, #16
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d007      	beq.n	8007a1c <HRTIM_Master_ISR+0x13c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2210      	movs	r2, #16
 8007a12:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8007a14:	2106      	movs	r1, #6
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7fa fa20 	bl	8001e5c <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f003 0320 	and.w	r3, r3, #32
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00b      	beq.n	8007a3e <HRTIM_Master_ISR+0x15e>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	f003 0320 	and.w	r3, r3, #32
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d006      	beq.n	8007a3e <HRTIM_Master_ISR+0x15e>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2220      	movs	r2, #32
 8007a36:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7ff fac8 	bl	8006fce <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00c      	beq.n	8007a62 <HRTIM_Master_ISR+0x182>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d007      	beq.n	8007a62 <HRTIM_Master_ISR+0x182>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2240      	movs	r2, #64	@ 0x40
 8007a58:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8007a5a:	2106      	movs	r1, #6
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f7ff fac0 	bl	8006fe2 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a62:	bf00      	nop
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	01db      	lsls	r3, r3, #7
 8007a7e:	4413      	add	r3, r2
 8007a80:	3304      	adds	r3, #4
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	01db      	lsls	r3, r3, #7
 8007a8e:	4413      	add	r3, r2
 8007a90:	338c      	adds	r3, #140	@ 0x8c
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d010      	beq.n	8007ac2 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00b      	beq.n	8007ac2 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	01db      	lsls	r3, r3, #7
 8007ab2:	4413      	add	r3, r2
 8007ab4:	3388      	adds	r3, #136	@ 0x88
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff fa9b 	bl	8006ff8 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f003 0302 	and.w	r3, r3, #2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d010      	beq.n	8007aee <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00b      	beq.n	8007aee <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	01db      	lsls	r3, r3, #7
 8007ade:	4413      	add	r3, r2
 8007ae0:	3388      	adds	r3, #136	@ 0x88
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff fa90 	bl	800700e <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d010      	beq.n	8007b1a <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f003 0304 	and.w	r3, r3, #4
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00b      	beq.n	8007b1a <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	01db      	lsls	r3, r3, #7
 8007b0a:	4413      	add	r3, r2
 8007b0c:	3388      	adds	r3, #136	@ 0x88
 8007b0e:	2204      	movs	r2, #4
 8007b10:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7ff fa85 	bl	8007024 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f003 0308 	and.w	r3, r3, #8
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d010      	beq.n	8007b46 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f003 0308 	and.w	r3, r3, #8
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00b      	beq.n	8007b46 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	01db      	lsls	r3, r3, #7
 8007b36:	4413      	add	r3, r2
 8007b38:	3388      	adds	r3, #136	@ 0x88
 8007b3a:	2208      	movs	r2, #8
 8007b3c:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7ff fa7a 	bl	800703a <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f003 0310 	and.w	r3, r3, #16
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d010      	beq.n	8007b72 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f003 0310 	and.w	r3, r3, #16
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00b      	beq.n	8007b72 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	01db      	lsls	r3, r3, #7
 8007b62:	4413      	add	r3, r2
 8007b64:	3388      	adds	r3, #136	@ 0x88
 8007b66:	2210      	movs	r2, #16
 8007b68:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7fa f975 	bl	8001e5c <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d010      	beq.n	8007b9e <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00b      	beq.n	8007b9e <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	01db      	lsls	r3, r3, #7
 8007b8e:	4413      	add	r3, r2
 8007b90:	3388      	adds	r3, #136	@ 0x88
 8007b92:	2240      	movs	r2, #64	@ 0x40
 8007b94:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7ff fa22 	bl	8006fe2 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d010      	beq.n	8007bca <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00b      	beq.n	8007bca <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	01db      	lsls	r3, r3, #7
 8007bba:	4413      	add	r3, r2
 8007bbc:	3388      	adds	r3, #136	@ 0x88
 8007bbe:	2280      	movs	r2, #128	@ 0x80
 8007bc0:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7ff fa43 	bl	8007050 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d011      	beq.n	8007bf8 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00c      	beq.n	8007bf8 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	01db      	lsls	r3, r3, #7
 8007be6:	4413      	add	r3, r2
 8007be8:	3388      	adds	r3, #136	@ 0x88
 8007bea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bee:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7ff fa37 	bl	8007066 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d011      	beq.n	8007c26 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00c      	beq.n	8007c26 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	01db      	lsls	r3, r3, #7
 8007c14:	4413      	add	r3, r2
 8007c16:	3388      	adds	r3, #136	@ 0x88
 8007c18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c1c:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7ff fa41 	bl	80070a8 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d011      	beq.n	8007c54 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00c      	beq.n	8007c54 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	01db      	lsls	r3, r3, #7
 8007c42:	4413      	add	r3, r2
 8007c44:	3388      	adds	r3, #136	@ 0x88
 8007c46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007c4a:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7ff fa35 	bl	80070be <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d011      	beq.n	8007c82 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00c      	beq.n	8007c82 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	01db      	lsls	r3, r3, #7
 8007c70:	4413      	add	r3, r2
 8007c72:	3388      	adds	r3, #136	@ 0x88
 8007c74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c78:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff fa29 	bl	80070d4 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d011      	beq.n	8007cb0 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00c      	beq.n	8007cb0 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	01db      	lsls	r3, r3, #7
 8007c9e:	4413      	add	r3, r2
 8007ca0:	3388      	adds	r3, #136	@ 0x88
 8007ca2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007ca6:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7ff fa1d 	bl	80070ea <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d011      	beq.n	8007cde <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00c      	beq.n	8007cde <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	01db      	lsls	r3, r3, #7
 8007ccc:	4413      	add	r3, r2
 8007cce:	3388      	adds	r3, #136	@ 0x88
 8007cd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007cd4:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff f9da 	bl	8007092 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d011      	beq.n	8007d0c <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00c      	beq.n	8007d0c <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	01db      	lsls	r3, r3, #7
 8007cfa:	4413      	add	r3, r2
 8007cfc:	3388      	adds	r3, #136	@ 0x88
 8007cfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007d02:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff f9b8 	bl	800707c <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d0c:	bf00      	nop
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e0c9      	b.n	8007eba <HAL_PCD_Init+0x1a6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a66      	ldr	r2, [pc, #408]	@ (8007ec4 <HAL_PCD_Init+0x1b0>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d003      	beq.n	8007d38 <HAL_PCD_Init+0x24>
 8007d30:	2187      	movs	r1, #135	@ 0x87
 8007d32:	4865      	ldr	r0, [pc, #404]	@ (8007ec8 <HAL_PCD_Init+0x1b4>)
 8007d34:	f7fa fa76 	bl	8002224 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d106      	bne.n	8007d52 <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f00a fbcd 	bl	80124ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2203      	movs	r2, #3
 8007d56:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f006 fa17 	bl	800e192 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d64:	2300      	movs	r3, #0
 8007d66:	73fb      	strb	r3, [r7, #15]
 8007d68:	e03e      	b.n	8007de8 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007d6a:	7bfa      	ldrb	r2, [r7, #15]
 8007d6c:	6879      	ldr	r1, [r7, #4]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	00db      	lsls	r3, r3, #3
 8007d76:	440b      	add	r3, r1
 8007d78:	3311      	adds	r3, #17
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007d7e:	7bfa      	ldrb	r2, [r7, #15]
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	4613      	mov	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	440b      	add	r3, r1
 8007d8c:	3310      	adds	r3, #16
 8007d8e:	7bfa      	ldrb	r2, [r7, #15]
 8007d90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007d92:	7bfa      	ldrb	r2, [r7, #15]
 8007d94:	6879      	ldr	r1, [r7, #4]
 8007d96:	4613      	mov	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	00db      	lsls	r3, r3, #3
 8007d9e:	440b      	add	r3, r1
 8007da0:	3313      	adds	r3, #19
 8007da2:	2200      	movs	r2, #0
 8007da4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007da6:	7bfa      	ldrb	r2, [r7, #15]
 8007da8:	6879      	ldr	r1, [r7, #4]
 8007daa:	4613      	mov	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	00db      	lsls	r3, r3, #3
 8007db2:	440b      	add	r3, r1
 8007db4:	3320      	adds	r3, #32
 8007db6:	2200      	movs	r2, #0
 8007db8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007dba:	7bfa      	ldrb	r2, [r7, #15]
 8007dbc:	6879      	ldr	r1, [r7, #4]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	00db      	lsls	r3, r3, #3
 8007dc6:	440b      	add	r3, r1
 8007dc8:	3324      	adds	r3, #36	@ 0x24
 8007dca:	2200      	movs	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	6879      	ldr	r1, [r7, #4]
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	440b      	add	r3, r1
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	3301      	adds	r3, #1
 8007de6:	73fb      	strb	r3, [r7, #15]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	791b      	ldrb	r3, [r3, #4]
 8007dec:	7bfa      	ldrb	r2, [r7, #15]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d3bb      	bcc.n	8007d6a <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007df2:	2300      	movs	r3, #0
 8007df4:	73fb      	strb	r3, [r7, #15]
 8007df6:	e044      	b.n	8007e82 <HAL_PCD_Init+0x16e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007df8:	7bfa      	ldrb	r2, [r7, #15]
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	440b      	add	r3, r1
 8007e06:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007e0e:	7bfa      	ldrb	r2, [r7, #15]
 8007e10:	6879      	ldr	r1, [r7, #4]
 8007e12:	4613      	mov	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	00db      	lsls	r3, r3, #3
 8007e1a:	440b      	add	r3, r1
 8007e1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e20:	7bfa      	ldrb	r2, [r7, #15]
 8007e22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007e24:	7bfa      	ldrb	r2, [r7, #15]
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	440b      	add	r3, r1
 8007e32:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8007e36:	2200      	movs	r2, #0
 8007e38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007e3a:	7bfa      	ldrb	r2, [r7, #15]
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	00db      	lsls	r3, r3, #3
 8007e46:	440b      	add	r3, r1
 8007e48:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007e50:	7bfa      	ldrb	r2, [r7, #15]
 8007e52:	6879      	ldr	r1, [r7, #4]
 8007e54:	4613      	mov	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	00db      	lsls	r3, r3, #3
 8007e5c:	440b      	add	r3, r1
 8007e5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007e66:	7bfa      	ldrb	r2, [r7, #15]
 8007e68:	6879      	ldr	r1, [r7, #4]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	00db      	lsls	r3, r3, #3
 8007e72:	440b      	add	r3, r1
 8007e74:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	73fb      	strb	r3, [r7, #15]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	791b      	ldrb	r3, [r3, #4]
 8007e86:	7bfa      	ldrb	r2, [r7, #15]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d3b5      	bcc.n	8007df8 <HAL_PCD_Init+0xe4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6818      	ldr	r0, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3304      	adds	r3, #4
 8007e94:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007e98:	f006 f996 	bl	800e1c8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	7a9b      	ldrb	r3, [r3, #10]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d102      	bne.n	8007eb8 <HAL_PCD_Init+0x1a4>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 fc45 	bl	8009742 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	40005c00 	.word	0x40005c00
 8007ec8:	080141e8 	.word	0x080141e8

08007ecc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d101      	bne.n	8007ee2 <HAL_PCD_Start+0x16>
 8007ede:	2302      	movs	r3, #2
 8007ee0:	e012      	b.n	8007f08 <HAL_PCD_Start+0x3c>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f006 f938 	bl	800e164 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f008 fbf8 	bl	80106ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f008 fbfd 	bl	801071c <USB_ReadInterrupts>
 8007f22:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fb04 	bl	800853c <PCD_EP_ISR_Handler>

    return;
 8007f34:	e110      	b.n	8008158 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d013      	beq.n	8007f68 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f52:	b292      	uxth	r2, r2
 8007f54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f00a fb58 	bl	801260e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007f5e:	2100      	movs	r1, #0
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f8fc 	bl	800815e <HAL_PCD_SetAddress>

    return;
 8007f66:	e0f7      	b.n	8008158 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00c      	beq.n	8007f8c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007f84:	b292      	uxth	r2, r2
 8007f86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007f8a:	e0e5      	b.n	8008158 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00c      	beq.n	8007fb0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007fa8:	b292      	uxth	r2, r2
 8007faa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007fae:	e0d3      	b.n	8008158 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d034      	beq.n	8008024 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 0204 	bic.w	r2, r2, #4
 8007fcc:	b292      	uxth	r2, r2
 8007fce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0208 	bic.w	r2, r2, #8
 8007fe4:	b292      	uxth	r2, r2
 8007fe6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d107      	bne.n	8008004 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f00a fcf8 	bl	80129f4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f00a fb3b 	bl	8012680 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008012:	b29a      	uxth	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800801c:	b292      	uxth	r2, r2
 800801e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008022:	e099      	b.n	8008158 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800802a:	2b00      	cmp	r3, #0
 800802c:	d027      	beq.n	800807e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008036:	b29a      	uxth	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f042 0208 	orr.w	r2, r2, #8
 8008040:	b292      	uxth	r2, r2
 8008042:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800804e:	b29a      	uxth	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008058:	b292      	uxth	r2, r2
 800805a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008066:	b29a      	uxth	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f042 0204 	orr.w	r2, r2, #4
 8008070:	b292      	uxth	r2, r2
 8008072:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f00a fae8 	bl	801264c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800807c:	e06c      	b.n	8008158 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008084:	2b00      	cmp	r3, #0
 8008086:	d040      	beq.n	800810a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008090:	b29a      	uxth	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800809a:	b292      	uxth	r2, r2
 800809c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d12b      	bne.n	8008102 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f042 0204 	orr.w	r2, r2, #4
 80080bc:	b292      	uxth	r2, r2
 80080be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f042 0208 	orr.w	r2, r2, #8
 80080d4:	b292      	uxth	r2, r2
 80080d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	089b      	lsrs	r3, r3, #2
 80080ee:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80080f8:	2101      	movs	r1, #1
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f00a fc7a 	bl	80129f4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008100:	e02a      	b.n	8008158 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f00a faa2 	bl	801264c <HAL_PCD_SuspendCallback>
    return;
 8008108:	e026      	b.n	8008158 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00f      	beq.n	8008134 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800811c:	b29a      	uxth	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008126:	b292      	uxth	r2, r2
 8008128:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f00a fa60 	bl	80125f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008132:	e011      	b.n	8008158 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00c      	beq.n	8008158 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008146:	b29a      	uxth	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008150:	b292      	uxth	r2, r2
 8008152:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008156:	bf00      	nop
  }
}
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	460b      	mov	r3, r1
 8008168:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008170:	2b01      	cmp	r3, #1
 8008172:	d101      	bne.n	8008178 <HAL_PCD_SetAddress+0x1a>
 8008174:	2302      	movs	r3, #2
 8008176:	e012      	b.n	800819e <HAL_PCD_SetAddress+0x40>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	78fa      	ldrb	r2, [r7, #3]
 8008184:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	78fa      	ldrb	r2, [r7, #3]
 800818c:	4611      	mov	r1, r2
 800818e:	4618      	mov	r0, r3
 8008190:	f008 fa99 	bl	80106c6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	4608      	mov	r0, r1
 80081b0:	4611      	mov	r1, r2
 80081b2:	461a      	mov	r2, r3
 80081b4:	4603      	mov	r3, r0
 80081b6:	70fb      	strb	r3, [r7, #3]
 80081b8:	460b      	mov	r3, r1
 80081ba:	803b      	strh	r3, [r7, #0]
 80081bc:	4613      	mov	r3, r2
 80081be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80081c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	da0e      	bge.n	80081ea <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081cc:	78fb      	ldrb	r3, [r7, #3]
 80081ce:	f003 0207 	and.w	r2, r3, #7
 80081d2:	4613      	mov	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	00db      	lsls	r3, r3, #3
 80081da:	3310      	adds	r3, #16
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	4413      	add	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	705a      	strb	r2, [r3, #1]
 80081e8:	e00e      	b.n	8008208 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	f003 0207 	and.w	r2, r3, #7
 80081f0:	4613      	mov	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	4413      	add	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008208:	78fb      	ldrb	r3, [r7, #3]
 800820a:	f003 0307 	and.w	r3, r3, #7
 800820e:	b2da      	uxtb	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008214:	883a      	ldrh	r2, [r7, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	78ba      	ldrb	r2, [r7, #2]
 800821e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008220:	78bb      	ldrb	r3, [r7, #2]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d102      	bne.n	800822c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008232:	2b01      	cmp	r3, #1
 8008234:	d101      	bne.n	800823a <HAL_PCD_EP_Open+0x94>
 8008236:	2302      	movs	r3, #2
 8008238:	e00e      	b.n	8008258 <HAL_PCD_EP_Open+0xb2>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68f9      	ldr	r1, [r7, #12]
 8008248:	4618      	mov	r0, r3
 800824a:	f005 ffdb 	bl	800e204 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8008256:	7afb      	ldrb	r3, [r7, #11]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800826c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008270:	2b00      	cmp	r3, #0
 8008272:	da0e      	bge.n	8008292 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	f003 0207 	and.w	r2, r3, #7
 800827a:	4613      	mov	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	3310      	adds	r3, #16
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	4413      	add	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2201      	movs	r2, #1
 800828e:	705a      	strb	r2, [r3, #1]
 8008290:	e00e      	b.n	80082b0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008292:	78fb      	ldrb	r3, [r7, #3]
 8008294:	f003 0207 	and.w	r2, r3, #7
 8008298:	4613      	mov	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	4413      	add	r3, r2
 80082a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80082b0:	78fb      	ldrb	r3, [r7, #3]
 80082b2:	f003 0307 	and.w	r3, r3, #7
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d101      	bne.n	80082ca <HAL_PCD_EP_Close+0x6a>
 80082c6:	2302      	movs	r3, #2
 80082c8:	e00e      	b.n	80082e8 <HAL_PCD_EP_Close+0x88>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68f9      	ldr	r1, [r7, #12]
 80082d8:	4618      	mov	r0, r3
 80082da:	f006 fb57 	bl	800e98c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	607a      	str	r2, [r7, #4]
 80082fa:	603b      	str	r3, [r7, #0]
 80082fc:	460b      	mov	r3, r1
 80082fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008300:	7afb      	ldrb	r3, [r7, #11]
 8008302:	f003 0207 	and.w	r2, r3, #7
 8008306:	4613      	mov	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	00db      	lsls	r3, r3, #3
 800830e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	4413      	add	r3, r2
 8008316:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2200      	movs	r2, #0
 8008328:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2200      	movs	r2, #0
 800832e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008330:	7afb      	ldrb	r3, [r7, #11]
 8008332:	f003 0307 	and.w	r3, r3, #7
 8008336:	b2da      	uxtb	r2, r3
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6979      	ldr	r1, [r7, #20]
 8008342:	4618      	mov	r0, r3
 8008344:	f006 fd0f 	bl	800ed66 <USB_EPStartXfer>

  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008352:	b480      	push	{r7}
 8008354:	b083      	sub	sp, #12
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	460b      	mov	r3, r1
 800835c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800835e:	78fb      	ldrb	r3, [r7, #3]
 8008360:	f003 0207 	and.w	r2, r3, #7
 8008364:	6879      	ldr	r1, [r7, #4]
 8008366:	4613      	mov	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	00db      	lsls	r3, r3, #3
 800836e:	440b      	add	r3, r1
 8008370:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8008374:	681b      	ldr	r3, [r3, #0]
}
 8008376:	4618      	mov	r0, r3
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b086      	sub	sp, #24
 8008386:	af00      	add	r7, sp, #0
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
 800838e:	460b      	mov	r3, r1
 8008390:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008392:	7afb      	ldrb	r3, [r7, #11]
 8008394:	f003 0207 	and.w	r2, r3, #7
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	00db      	lsls	r3, r3, #3
 80083a0:	3310      	adds	r3, #16
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	4413      	add	r3, r2
 80083a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2200      	movs	r2, #0
 80083c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2201      	movs	r2, #1
 80083cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80083ce:	7afb      	ldrb	r3, [r7, #11]
 80083d0:	f003 0307 	and.w	r3, r3, #7
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	6979      	ldr	r1, [r7, #20]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f006 fcc0 	bl	800ed66 <USB_EPStartXfer>

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80083fc:	78fb      	ldrb	r3, [r7, #3]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	7912      	ldrb	r2, [r2, #4]
 8008406:	4293      	cmp	r3, r2
 8008408:	d901      	bls.n	800840e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e03e      	b.n	800848c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800840e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008412:	2b00      	cmp	r3, #0
 8008414:	da0e      	bge.n	8008434 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008416:	78fb      	ldrb	r3, [r7, #3]
 8008418:	f003 0207 	and.w	r2, r3, #7
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	3310      	adds	r3, #16
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	4413      	add	r3, r2
 800842a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	705a      	strb	r2, [r3, #1]
 8008432:	e00c      	b.n	800844e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008434:	78fa      	ldrb	r2, [r7, #3]
 8008436:	4613      	mov	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	00db      	lsls	r3, r3, #3
 800843e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	4413      	add	r3, r2
 8008446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2201      	movs	r2, #1
 8008452:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008454:	78fb      	ldrb	r3, [r7, #3]
 8008456:	f003 0307 	and.w	r3, r3, #7
 800845a:	b2da      	uxtb	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008466:	2b01      	cmp	r3, #1
 8008468:	d101      	bne.n	800846e <HAL_PCD_EP_SetStall+0x7e>
 800846a:	2302      	movs	r3, #2
 800846c:	e00e      	b.n	800848c <HAL_PCD_EP_SetStall+0x9c>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68f9      	ldr	r1, [r7, #12]
 800847c:	4618      	mov	r0, r3
 800847e:	f008 f823 	bl	80104c8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	460b      	mov	r3, r1
 800849e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80084a0:	78fb      	ldrb	r3, [r7, #3]
 80084a2:	f003 030f 	and.w	r3, r3, #15
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	7912      	ldrb	r2, [r2, #4]
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d901      	bls.n	80084b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e040      	b.n	8008534 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80084b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	da0e      	bge.n	80084d8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084ba:	78fb      	ldrb	r3, [r7, #3]
 80084bc:	f003 0207 	and.w	r2, r3, #7
 80084c0:	4613      	mov	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	3310      	adds	r3, #16
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	4413      	add	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	705a      	strb	r2, [r3, #1]
 80084d6:	e00e      	b.n	80084f6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084d8:	78fb      	ldrb	r3, [r7, #3]
 80084da:	f003 0207 	and.w	r2, r3, #7
 80084de:	4613      	mov	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4413      	add	r3, r2
 80084e4:	00db      	lsls	r3, r3, #3
 80084e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	4413      	add	r3, r2
 80084ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084fc:	78fb      	ldrb	r3, [r7, #3]
 80084fe:	f003 0307 	and.w	r3, r3, #7
 8008502:	b2da      	uxtb	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800850e:	2b01      	cmp	r3, #1
 8008510:	d101      	bne.n	8008516 <HAL_PCD_EP_ClrStall+0x82>
 8008512:	2302      	movs	r3, #2
 8008514:	e00e      	b.n	8008534 <HAL_PCD_EP_ClrStall+0xa0>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68f9      	ldr	r1, [r7, #12]
 8008524:	4618      	mov	r0, r3
 8008526:	f008 f820 	bl	801056a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b096      	sub	sp, #88	@ 0x58
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008544:	e3ad      	b.n	8008ca2 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800854e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8008552:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008556:	b2db      	uxtb	r3, r3
 8008558:	f003 030f 	and.w	r3, r3, #15
 800855c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8008560:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8008564:	2b00      	cmp	r3, #0
 8008566:	f040 816f 	bne.w	8008848 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800856a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800856e:	f003 0310 	and.w	r3, r3, #16
 8008572:	2b00      	cmp	r3, #0
 8008574:	d14c      	bne.n	8008610 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	b29b      	uxth	r3, r3
 800857e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8008582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008586:	81fb      	strh	r3, [r7, #14]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	89fb      	ldrh	r3, [r7, #14]
 800858e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008596:	b29b      	uxth	r3, r3
 8008598:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	3310      	adds	r3, #16
 800859e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	461a      	mov	r2, r3
 80085ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	00db      	lsls	r3, r3, #3
 80085b2:	4413      	add	r3, r2
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	6812      	ldr	r2, [r2, #0]
 80085b8:	4413      	add	r3, r2
 80085ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80085c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80085c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085ca:	695a      	ldr	r2, [r3, #20]
 80085cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	441a      	add	r2, r3
 80085d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085d4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80085d6:	2100      	movs	r1, #0
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f009 fff0 	bl	80125be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	7b1b      	ldrb	r3, [r3, #12]
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 835c 	beq.w	8008ca2 <PCD_EP_ISR_Handler+0x766>
 80085ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f040 8357 	bne.w	8008ca2 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	7b1b      	ldrb	r3, [r3, #12]
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	731a      	strb	r2, [r3, #12]
 800860e:	e348      	b.n	8008ca2 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008616:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008622:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008626:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800862a:	2b00      	cmp	r3, #0
 800862c:	d032      	beq.n	8008694 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008636:	b29b      	uxth	r3, r3
 8008638:	461a      	mov	r2, r3
 800863a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	4413      	add	r3, r2
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	6812      	ldr	r2, [r2, #0]
 8008646:	4413      	add	r3, r2
 8008648:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008654:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6818      	ldr	r0, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8008660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008662:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008666:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008668:	b29b      	uxth	r3, r3
 800866a:	f008 f8a9 	bl	80107c0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	b29a      	uxth	r2, r3
 8008676:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800867a:	4013      	ands	r3, r2
 800867c:	823b      	strh	r3, [r7, #16]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	8a3a      	ldrh	r2, [r7, #16]
 8008684:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008688:	b292      	uxth	r2, r2
 800868a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f009 ff69 	bl	8012564 <HAL_PCD_SetupStageCallback>
 8008692:	e306      	b.n	8008ca2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008694:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8008698:	2b00      	cmp	r3, #0
 800869a:	f280 8302 	bge.w	8008ca2 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80086aa:	4013      	ands	r3, r2
 80086ac:	83fb      	strh	r3, [r7, #30]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	8bfa      	ldrh	r2, [r7, #30]
 80086b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80086b8:	b292      	uxth	r2, r2
 80086ba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	461a      	mov	r2, r3
 80086c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	4413      	add	r3, r2
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	6812      	ldr	r2, [r2, #0]
 80086d4:	4413      	add	r3, r2
 80086d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80086e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086e2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80086e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d019      	beq.n	8008720 <PCD_EP_ISR_Handler+0x1e4>
 80086ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d015      	beq.n	8008720 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6818      	ldr	r0, [r3, #0]
 80086f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086fa:	6959      	ldr	r1, [r3, #20]
 80086fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086fe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8008700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008702:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008704:	b29b      	uxth	r3, r3
 8008706:	f008 f85b 	bl	80107c0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800870a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800870c:	695a      	ldr	r2, [r3, #20]
 800870e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	441a      	add	r2, r3
 8008714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008716:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008718:	2100      	movs	r1, #0
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f009 ff34 	bl	8012588 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800872a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800872e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008732:	2b00      	cmp	r3, #0
 8008734:	f040 82b5 	bne.w	8008ca2 <PCD_EP_ISR_Handler+0x766>
 8008738:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800873c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008740:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008744:	f000 82ad 	beq.w	8008ca2 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	61bb      	str	r3, [r7, #24]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008756:	b29b      	uxth	r3, r3
 8008758:	461a      	mov	r2, r3
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	4413      	add	r3, r2
 800875e:	61bb      	str	r3, [r7, #24]
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008766:	617b      	str	r3, [r7, #20]
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	881b      	ldrh	r3, [r3, #0]
 800876c:	b29b      	uxth	r3, r3
 800876e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008772:	b29a      	uxth	r2, r3
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	801a      	strh	r2, [r3, #0]
 8008778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	2b3e      	cmp	r3, #62	@ 0x3e
 800877e:	d91d      	bls.n	80087bc <PCD_EP_ISR_Handler+0x280>
 8008780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	095b      	lsrs	r3, r3, #5
 8008786:	647b      	str	r3, [r7, #68]	@ 0x44
 8008788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	f003 031f 	and.w	r3, r3, #31
 8008790:	2b00      	cmp	r3, #0
 8008792:	d102      	bne.n	800879a <PCD_EP_ISR_Handler+0x25e>
 8008794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008796:	3b01      	subs	r3, #1
 8008798:	647b      	str	r3, [r7, #68]	@ 0x44
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	b29a      	uxth	r2, r3
 80087a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	029b      	lsls	r3, r3, #10
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	4313      	orrs	r3, r2
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	801a      	strh	r2, [r3, #0]
 80087ba:	e026      	b.n	800880a <PCD_EP_ISR_Handler+0x2ce>
 80087bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <PCD_EP_ISR_Handler+0x29e>
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	801a      	strh	r2, [r3, #0]
 80087d8:	e017      	b.n	800880a <PCD_EP_ISR_Handler+0x2ce>
 80087da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	085b      	lsrs	r3, r3, #1
 80087e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80087e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <PCD_EP_ISR_Handler+0x2b8>
 80087ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087f0:	3301      	adds	r3, #1
 80087f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	029b      	lsls	r3, r3, #10
 8008800:	b29b      	uxth	r3, r3
 8008802:	4313      	orrs	r3, r2
 8008804:	b29a      	uxth	r2, r3
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	b29b      	uxth	r3, r3
 8008812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800881a:	827b      	strh	r3, [r7, #18]
 800881c:	8a7b      	ldrh	r3, [r7, #18]
 800881e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008822:	827b      	strh	r3, [r7, #18]
 8008824:	8a7b      	ldrh	r3, [r7, #18]
 8008826:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800882a:	827b      	strh	r3, [r7, #18]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	8a7b      	ldrh	r3, [r7, #18]
 8008832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800883a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800883e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008842:	b29b      	uxth	r3, r3
 8008844:	8013      	strh	r3, [r2, #0]
 8008846:	e22c      	b.n	8008ca2 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	461a      	mov	r2, r3
 800884e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800885c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8008860:	2b00      	cmp	r3, #0
 8008862:	f280 80f6 	bge.w	8008a52 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	b29a      	uxth	r2, r3
 8008878:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800887c:	4013      	ands	r3, r2
 800887e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4413      	add	r3, r2
 8008890:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8008894:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008898:	b292      	uxth	r2, r2
 800889a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800889c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80088a0:	4613      	mov	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	00db      	lsls	r3, r3, #3
 80088a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	4413      	add	r3, r2
 80088b0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80088b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088b4:	7b1b      	ldrb	r3, [r3, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d123      	bne.n	8008902 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	461a      	mov	r2, r3
 80088c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	00db      	lsls	r3, r3, #3
 80088cc:	4413      	add	r3, r2
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	6812      	ldr	r2, [r2, #0]
 80088d2:	4413      	add	r3, r2
 80088d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80088d8:	881b      	ldrh	r3, [r3, #0]
 80088da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088de:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80088e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 808e 	beq.w	8008a08 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6818      	ldr	r0, [r3, #0]
 80088f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088f2:	6959      	ldr	r1, [r3, #20]
 80088f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088f6:	88da      	ldrh	r2, [r3, #6]
 80088f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80088fc:	f007 ff60 	bl	80107c0 <USB_ReadPMA>
 8008900:	e082      	b.n	8008a08 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008904:	78db      	ldrb	r3, [r3, #3]
 8008906:	2b02      	cmp	r3, #2
 8008908:	d10a      	bne.n	8008920 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800890a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800890e:	461a      	mov	r2, r3
 8008910:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f9d3 	bl	8008cbe <HAL_PCD_EP_DB_Receive>
 8008918:	4603      	mov	r3, r0
 800891a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800891e:	e073      	b.n	8008a08 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	461a      	mov	r2, r3
 8008926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4413      	add	r3, r2
 800892e:	881b      	ldrh	r3, [r3, #0]
 8008930:	b29b      	uxth	r3, r3
 8008932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800893a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	461a      	mov	r2, r3
 8008944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	441a      	add	r2, r3
 800894c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8008950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800895c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008960:	b29b      	uxth	r3, r3
 8008962:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	461a      	mov	r2, r3
 800896a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	b29b      	uxth	r3, r3
 8008976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d022      	beq.n	80089c4 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008986:	b29b      	uxth	r3, r3
 8008988:	461a      	mov	r2, r3
 800898a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	00db      	lsls	r3, r3, #3
 8008990:	4413      	add	r3, r2
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	6812      	ldr	r2, [r2, #0]
 8008996:	4413      	add	r3, r2
 8008998:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089a2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80089a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d02c      	beq.n	8008a08 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6818      	ldr	r0, [r3, #0]
 80089b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089b4:	6959      	ldr	r1, [r3, #20]
 80089b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089b8:	891a      	ldrh	r2, [r3, #8]
 80089ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80089be:	f007 feff 	bl	80107c0 <USB_ReadPMA>
 80089c2:	e021      	b.n	8008a08 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	461a      	mov	r2, r3
 80089d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	00db      	lsls	r3, r3, #3
 80089d6:	4413      	add	r3, r2
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	6812      	ldr	r2, [r2, #0]
 80089dc:	4413      	add	r3, r2
 80089de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089e8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80089ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d009      	beq.n	8008a08 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6818      	ldr	r0, [r3, #0]
 80089f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089fa:	6959      	ldr	r1, [r3, #20]
 80089fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089fe:	895a      	ldrh	r2, [r3, #10]
 8008a00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008a04:	f007 fedc 	bl	80107c0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a0a:	69da      	ldr	r2, [r3, #28]
 8008a0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008a10:	441a      	add	r2, r3
 8008a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a14:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8008a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a18:	695a      	ldr	r2, [r3, #20]
 8008a1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008a1e:	441a      	add	r2, r3
 8008a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a22:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d005      	beq.n	8008a38 <PCD_EP_ISR_Handler+0x4fc>
 8008a2c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8008a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d206      	bcs.n	8008a46 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f009 fda2 	bl	8012588 <HAL_PCD_DataOutStageCallback>
 8008a44:	e005      	b.n	8008a52 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f006 f98a 	bl	800ed66 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8008a52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 8121 	beq.w	8008ca2 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8008a60:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8008a64:	4613      	mov	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4413      	add	r3, r2
 8008a6a:	00db      	lsls	r3, r3, #3
 8008a6c:	3310      	adds	r3, #16
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	4413      	add	r3, r2
 8008a72:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4413      	add	r3, r2
 8008a82:	881b      	ldrh	r3, [r3, #0]
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8008a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a8e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	461a      	mov	r2, r3
 8008a98:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	441a      	add	r2, r3
 8008aa0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ab2:	78db      	ldrb	r3, [r3, #3]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	f040 80a2 	bne.w	8008bfe <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8008aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008abc:	2200      	movs	r2, #0
 8008abe:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ac2:	7b1b      	ldrb	r3, [r3, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 8093 	beq.w	8008bf0 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008aca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d046      	beq.n	8008b64 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ad8:	785b      	ldrb	r3, [r3, #1]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d126      	bne.n	8008b2c <PCD_EP_ISR_Handler+0x5f0>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	461a      	mov	r2, r3
 8008af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af2:	4413      	add	r3, r2
 8008af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	00da      	lsls	r2, r3, #3
 8008afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afe:	4413      	add	r3, r2
 8008b00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b04:	623b      	str	r3, [r7, #32]
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	6a3b      	ldr	r3, [r7, #32]
 8008b14:	801a      	strh	r2, [r3, #0]
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	801a      	strh	r2, [r3, #0]
 8008b2a:	e061      	b.n	8008bf0 <PCD_EP_ISR_Handler+0x6b4>
 8008b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b2e:	785b      	ldrb	r3, [r3, #1]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d15d      	bne.n	8008bf0 <PCD_EP_ISR_Handler+0x6b4>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	461a      	mov	r2, r3
 8008b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b48:	4413      	add	r3, r2
 8008b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	00da      	lsls	r2, r3, #3
 8008b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b54:	4413      	add	r3, r2
 8008b56:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5e:	2200      	movs	r2, #0
 8008b60:	801a      	strh	r2, [r3, #0]
 8008b62:	e045      	b.n	8008bf0 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b6c:	785b      	ldrb	r3, [r3, #1]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d126      	bne.n	8008bc0 <PCD_EP_ISR_Handler+0x684>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	461a      	mov	r2, r3
 8008b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b86:	4413      	add	r3, r2
 8008b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	00da      	lsls	r2, r3, #3
 8008b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b92:	4413      	add	r3, r2
 8008b94:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9c:	881b      	ldrh	r3, [r3, #0]
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba8:	801a      	strh	r2, [r3, #0]
 8008baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bac:	881b      	ldrh	r3, [r3, #0]
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbc:	801a      	strh	r2, [r3, #0]
 8008bbe:	e017      	b.n	8008bf0 <PCD_EP_ISR_Handler+0x6b4>
 8008bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bc2:	785b      	ldrb	r3, [r3, #1]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d113      	bne.n	8008bf0 <PCD_EP_ISR_Handler+0x6b4>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bd6:	4413      	add	r3, r2
 8008bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	00da      	lsls	r2, r3, #3
 8008be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008be2:	4413      	add	r3, r2
 8008be4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008be8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bec:	2200      	movs	r2, #0
 8008bee:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f009 fce1 	bl	80125be <HAL_PCD_DataInStageCallback>
 8008bfc:	e051      	b.n	8008ca2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008bfe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d144      	bne.n	8008c94 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	461a      	mov	r2, r3
 8008c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	4413      	add	r3, r2
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	6812      	ldr	r2, [r2, #0]
 8008c22:	4413      	add	r3, r2
 8008c24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c2e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8008c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c34:	699a      	ldr	r2, [r3, #24]
 8008c36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d907      	bls.n	8008c4e <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8008c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c40:	699a      	ldr	r2, [r3, #24]
 8008c42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008c46:	1ad2      	subs	r2, r2, r3
 8008c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c4a:	619a      	str	r2, [r3, #24]
 8008c4c:	e002      	b.n	8008c54 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8008c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c50:	2200      	movs	r2, #0
 8008c52:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d106      	bne.n	8008c6a <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f009 fcab 	bl	80125be <HAL_PCD_DataInStageCallback>
 8008c68:	e01b      	b.n	8008ca2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c6c:	695a      	ldr	r2, [r3, #20]
 8008c6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008c72:	441a      	add	r2, r3
 8008c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c76:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c7a:	69da      	ldr	r2, [r3, #28]
 8008c7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008c80:	441a      	add	r2, r3
 8008c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c84:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f006 f86a 	bl	800ed66 <USB_EPStartXfer>
 8008c92:	e006      	b.n	8008ca2 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008c94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008c98:	461a      	mov	r2, r3
 8008c9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f917 	bl	8008ed0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	b21b      	sxth	r3, r3
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f6ff ac49 	blt.w	8008546 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3758      	adds	r7, #88	@ 0x58
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b088      	sub	sp, #32
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	4613      	mov	r3, r2
 8008cca:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008ccc:	88fb      	ldrh	r3, [r7, #6]
 8008cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d07c      	beq.n	8008dd0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	4413      	add	r3, r2
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	6812      	ldr	r2, [r2, #0]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cfa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	699a      	ldr	r2, [r3, #24]
 8008d00:	8b7b      	ldrh	r3, [r7, #26]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d306      	bcc.n	8008d14 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	699a      	ldr	r2, [r3, #24]
 8008d0a:	8b7b      	ldrh	r3, [r7, #26]
 8008d0c:	1ad2      	subs	r2, r2, r3
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	619a      	str	r2, [r3, #24]
 8008d12:	e002      	b.n	8008d1a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	2200      	movs	r2, #0
 8008d18:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d123      	bne.n	8008d6a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d3c:	833b      	strh	r3, [r7, #24]
 8008d3e:	8b3b      	ldrh	r3, [r7, #24]
 8008d40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d44:	833b      	strh	r3, [r7, #24]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	441a      	add	r2, r3
 8008d54:	8b3b      	ldrh	r3, [r7, #24]
 8008d56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008d6a:	88fb      	ldrh	r3, [r7, #6]
 8008d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d01f      	beq.n	8008db4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	881b      	ldrh	r3, [r3, #0]
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d8e:	82fb      	strh	r3, [r7, #22]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	461a      	mov	r2, r3
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	441a      	add	r2, r3
 8008d9e:	8afb      	ldrh	r3, [r7, #22]
 8008da0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008da4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008da8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008db4:	8b7b      	ldrh	r3, [r7, #26]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 8085 	beq.w	8008ec6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6818      	ldr	r0, [r3, #0]
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	6959      	ldr	r1, [r3, #20]
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	891a      	ldrh	r2, [r3, #8]
 8008dc8:	8b7b      	ldrh	r3, [r7, #26]
 8008dca:	f007 fcf9 	bl	80107c0 <USB_ReadPMA>
 8008dce:	e07a      	b.n	8008ec6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	461a      	mov	r2, r3
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	00db      	lsls	r3, r3, #3
 8008de2:	4413      	add	r3, r2
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	6812      	ldr	r2, [r2, #0]
 8008de8:	4413      	add	r3, r2
 8008dea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008df4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	699a      	ldr	r2, [r3, #24]
 8008dfa:	8b7b      	ldrh	r3, [r7, #26]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d306      	bcc.n	8008e0e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	699a      	ldr	r2, [r3, #24]
 8008e04:	8b7b      	ldrh	r3, [r7, #26]
 8008e06:	1ad2      	subs	r2, r2, r3
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	619a      	str	r2, [r3, #24]
 8008e0c:	e002      	b.n	8008e14 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2200      	movs	r2, #0
 8008e12:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d123      	bne.n	8008e64 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	461a      	mov	r2, r3
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	881b      	ldrh	r3, [r3, #0]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e36:	83fb      	strh	r3, [r7, #30]
 8008e38:	8bfb      	ldrh	r3, [r7, #30]
 8008e3a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008e3e:	83fb      	strh	r3, [r7, #30]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	461a      	mov	r2, r3
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	441a      	add	r2, r3
 8008e4e:	8bfb      	ldrh	r3, [r7, #30]
 8008e50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008e64:	88fb      	ldrh	r3, [r7, #6]
 8008e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d11f      	bne.n	8008eae <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e88:	83bb      	strh	r3, [r7, #28]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	441a      	add	r2, r3
 8008e98:	8bbb      	ldrh	r3, [r7, #28]
 8008e9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ea6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008eae:	8b7b      	ldrh	r3, [r7, #26]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d008      	beq.n	8008ec6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	6959      	ldr	r1, [r3, #20]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	895a      	ldrh	r2, [r3, #10]
 8008ec0:	8b7b      	ldrh	r3, [r7, #26]
 8008ec2:	f007 fc7d 	bl	80107c0 <USB_ReadPMA>
    }
  }

  return count;
 8008ec6:	8b7b      	ldrh	r3, [r7, #26]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3720      	adds	r7, #32
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b0a4      	sub	sp, #144	@ 0x90
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	4613      	mov	r3, r2
 8008edc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008ede:	88fb      	ldrh	r3, [r7, #6]
 8008ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 81db 	beq.w	80092a0 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	4413      	add	r3, r2
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	6812      	ldr	r2, [r2, #0]
 8008f02:	4413      	add	r3, r2
 8008f04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f0e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	699a      	ldr	r2, [r3, #24]
 8008f16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d907      	bls.n	8008f2e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	699a      	ldr	r2, [r3, #24]
 8008f22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008f26:	1ad2      	subs	r2, r2, r3
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	619a      	str	r2, [r3, #24]
 8008f2c:	e002      	b.n	8008f34 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2200      	movs	r2, #0
 8008f32:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f040 80b9 	bne.w	80090b0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	785b      	ldrb	r3, [r3, #1]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d126      	bne.n	8008f94 <HAL_PCD_EP_DB_Transmit+0xc4>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	461a      	mov	r2, r3
 8008f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5a:	4413      	add	r3, r2
 8008f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	00da      	lsls	r2, r3, #3
 8008f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f66:	4413      	add	r3, r2
 8008f68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f7c:	801a      	strh	r2, [r3, #0]
 8008f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f90:	801a      	strh	r2, [r3, #0]
 8008f92:	e01a      	b.n	8008fca <HAL_PCD_EP_DB_Transmit+0xfa>
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	785b      	ldrb	r3, [r3, #1]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d116      	bne.n	8008fca <HAL_PCD_EP_DB_Transmit+0xfa>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	461a      	mov	r2, r3
 8008fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fb0:	4413      	add	r3, r2
 8008fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	00da      	lsls	r2, r3, #3
 8008fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fbc:	4413      	add	r3, r2
 8008fbe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008fc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	785b      	ldrb	r3, [r3, #1]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d126      	bne.n	8009026 <HAL_PCD_EP_DB_Transmit+0x156>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	61fb      	str	r3, [r7, #28]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	461a      	mov	r2, r3
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	4413      	add	r3, r2
 8008fee:	61fb      	str	r3, [r7, #28]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	00da      	lsls	r2, r3, #3
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008ffe:	61bb      	str	r3, [r7, #24]
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	b29b      	uxth	r3, r3
 8009006:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800900a:	b29a      	uxth	r2, r3
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	801a      	strh	r2, [r3, #0]
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	b29b      	uxth	r3, r3
 8009016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800901a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800901e:	b29a      	uxth	r2, r3
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	801a      	strh	r2, [r3, #0]
 8009024:	e017      	b.n	8009056 <HAL_PCD_EP_DB_Transmit+0x186>
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	785b      	ldrb	r3, [r3, #1]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d113      	bne.n	8009056 <HAL_PCD_EP_DB_Transmit+0x186>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009036:	b29b      	uxth	r3, r3
 8009038:	461a      	mov	r2, r3
 800903a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903c:	4413      	add	r3, r2
 800903e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	00da      	lsls	r2, r3, #3
 8009046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009048:	4413      	add	r3, r2
 800904a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800904e:	623b      	str	r3, [r7, #32]
 8009050:	6a3b      	ldr	r3, [r7, #32]
 8009052:	2200      	movs	r2, #0
 8009054:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	4619      	mov	r1, r3
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f009 faae 	bl	80125be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009062:	88fb      	ldrh	r3, [r7, #6]
 8009064:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009068:	2b00      	cmp	r3, #0
 800906a:	f000 82fa 	beq.w	8009662 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	461a      	mov	r2, r3
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	b29b      	uxth	r3, r3
 8009080:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009088:	82fb      	strh	r3, [r7, #22]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	441a      	add	r2, r3
 8009098:	8afb      	ldrh	r3, [r7, #22]
 800909a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800909e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	8013      	strh	r3, [r2, #0]
 80090ae:	e2d8      	b.n	8009662 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80090b0:	88fb      	ldrh	r3, [r7, #6]
 80090b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d021      	beq.n	80090fe <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	461a      	mov	r2, r3
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	441a      	add	r2, r3
 80090e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80090ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009104:	2b01      	cmp	r3, #1
 8009106:	f040 82ac 	bne.w	8009662 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	695a      	ldr	r2, [r3, #20]
 800910e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009112:	441a      	add	r2, r3
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	69da      	ldr	r2, [r3, #28]
 800911c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009120:	441a      	add	r2, r3
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	6a1a      	ldr	r2, [r3, #32]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	429a      	cmp	r2, r3
 8009130:	d30b      	bcc.n	800914a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	6a1a      	ldr	r2, [r3, #32]
 800913e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009142:	1ad2      	subs	r2, r2, r3
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	621a      	str	r2, [r3, #32]
 8009148:	e017      	b.n	800917a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d108      	bne.n	8009164 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8009152:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009156:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009162:	e00a      	b.n	800917a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	6a1b      	ldr	r3, [r3, #32]
 8009170:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2200      	movs	r2, #0
 8009178:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	785b      	ldrb	r3, [r3, #1]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d165      	bne.n	800924e <HAL_PCD_EP_DB_Transmit+0x37e>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009190:	b29b      	uxth	r3, r3
 8009192:	461a      	mov	r2, r3
 8009194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009196:	4413      	add	r3, r2
 8009198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	00da      	lsls	r2, r3, #3
 80091a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a2:	4413      	add	r3, r2
 80091a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80091a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80091aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ac:	881b      	ldrh	r3, [r3, #0]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b8:	801a      	strh	r2, [r3, #0]
 80091ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091be:	2b3e      	cmp	r3, #62	@ 0x3e
 80091c0:	d91d      	bls.n	80091fe <HAL_PCD_EP_DB_Transmit+0x32e>
 80091c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091c6:	095b      	lsrs	r3, r3, #5
 80091c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091ce:	f003 031f 	and.w	r3, r3, #31
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d102      	bne.n	80091dc <HAL_PCD_EP_DB_Transmit+0x30c>
 80091d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091d8:	3b01      	subs	r3, #1
 80091da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	029b      	lsls	r3, r3, #10
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	4313      	orrs	r3, r2
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fa:	801a      	strh	r2, [r3, #0]
 80091fc:	e044      	b.n	8009288 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80091fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10a      	bne.n	800921c <HAL_PCD_EP_DB_Transmit+0x34c>
 8009206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	b29b      	uxth	r3, r3
 800920c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009214:	b29a      	uxth	r2, r3
 8009216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009218:	801a      	strh	r2, [r3, #0]
 800921a:	e035      	b.n	8009288 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800921c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009220:	085b      	lsrs	r3, r3, #1
 8009222:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009224:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <HAL_PCD_EP_DB_Transmit+0x366>
 8009230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009232:	3301      	adds	r3, #1
 8009234:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	b29a      	uxth	r2, r3
 800923c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800923e:	b29b      	uxth	r3, r3
 8009240:	029b      	lsls	r3, r3, #10
 8009242:	b29b      	uxth	r3, r3
 8009244:	4313      	orrs	r3, r2
 8009246:	b29a      	uxth	r2, r3
 8009248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924a:	801a      	strh	r2, [r3, #0]
 800924c:	e01c      	b.n	8009288 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	785b      	ldrb	r3, [r3, #1]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d118      	bne.n	8009288 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	647b      	str	r3, [r7, #68]	@ 0x44
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009264:	b29b      	uxth	r3, r3
 8009266:	461a      	mov	r2, r3
 8009268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800926a:	4413      	add	r3, r2
 800926c:	647b      	str	r3, [r7, #68]	@ 0x44
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	00da      	lsls	r2, r3, #3
 8009274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009276:	4413      	add	r3, r2
 8009278:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800927c:	643b      	str	r3, [r7, #64]	@ 0x40
 800927e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009282:	b29a      	uxth	r2, r3
 8009284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009286:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6818      	ldr	r0, [r3, #0]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	6959      	ldr	r1, [r3, #20]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	891a      	ldrh	r2, [r3, #8]
 8009294:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009298:	b29b      	uxth	r3, r3
 800929a:	f007 fa4f 	bl	801073c <USB_WritePMA>
 800929e:	e1e0      	b.n	8009662 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	461a      	mov	r2, r3
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	4413      	add	r3, r2
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	6812      	ldr	r2, [r2, #0]
 80092b8:	4413      	add	r3, r2
 80092ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80092be:	881b      	ldrh	r3, [r3, #0]
 80092c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092c4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	699a      	ldr	r2, [r3, #24]
 80092cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d307      	bcc.n	80092e4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	699a      	ldr	r2, [r3, #24]
 80092d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80092dc:	1ad2      	subs	r2, r2, r3
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	619a      	str	r2, [r3, #24]
 80092e2:	e002      	b.n	80092ea <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2200      	movs	r2, #0
 80092e8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f040 80c0 	bne.w	8009474 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	785b      	ldrb	r3, [r3, #1]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d126      	bne.n	800934a <HAL_PCD_EP_DB_Transmit+0x47a>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800930a:	b29b      	uxth	r3, r3
 800930c:	461a      	mov	r2, r3
 800930e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009310:	4413      	add	r3, r2
 8009312:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	00da      	lsls	r2, r3, #3
 800931a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800931c:	4413      	add	r3, r2
 800931e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009322:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	b29b      	uxth	r3, r3
 800932a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800932e:	b29a      	uxth	r2, r3
 8009330:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009332:	801a      	strh	r2, [r3, #0]
 8009334:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	b29b      	uxth	r3, r3
 800933a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800933e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009342:	b29a      	uxth	r2, r3
 8009344:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009346:	801a      	strh	r2, [r3, #0]
 8009348:	e01a      	b.n	8009380 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	785b      	ldrb	r3, [r3, #1]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d116      	bne.n	8009380 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	667b      	str	r3, [r7, #100]	@ 0x64
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009360:	b29b      	uxth	r3, r3
 8009362:	461a      	mov	r2, r3
 8009364:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009366:	4413      	add	r3, r2
 8009368:	667b      	str	r3, [r7, #100]	@ 0x64
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	00da      	lsls	r2, r3, #3
 8009370:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009372:	4413      	add	r3, r2
 8009374:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009378:	663b      	str	r3, [r7, #96]	@ 0x60
 800937a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800937c:	2200      	movs	r2, #0
 800937e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	677b      	str	r3, [r7, #116]	@ 0x74
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	785b      	ldrb	r3, [r3, #1]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d12b      	bne.n	80093e6 <HAL_PCD_EP_DB_Transmit+0x516>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800939c:	b29b      	uxth	r3, r3
 800939e:	461a      	mov	r2, r3
 80093a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093a2:	4413      	add	r3, r2
 80093a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	00da      	lsls	r2, r3, #3
 80093ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093ae:	4413      	add	r3, r2
 80093b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80093b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	b29b      	uxth	r3, r3
 80093c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80093ca:	801a      	strh	r2, [r3, #0]
 80093cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093dc:	b29a      	uxth	r2, r3
 80093de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80093e2:	801a      	strh	r2, [r3, #0]
 80093e4:	e017      	b.n	8009416 <HAL_PCD_EP_DB_Transmit+0x546>
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	785b      	ldrb	r3, [r3, #1]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d113      	bne.n	8009416 <HAL_PCD_EP_DB_Transmit+0x546>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	461a      	mov	r2, r3
 80093fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093fc:	4413      	add	r3, r2
 80093fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	00da      	lsls	r2, r3, #3
 8009406:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009408:	4413      	add	r3, r2
 800940a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800940e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009410:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009412:	2200      	movs	r2, #0
 8009414:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	4619      	mov	r1, r3
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f009 f8ce 	bl	80125be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009422:	88fb      	ldrh	r3, [r7, #6]
 8009424:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009428:	2b00      	cmp	r3, #0
 800942a:	f040 811a 	bne.w	8009662 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	461a      	mov	r2, r3
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	b29b      	uxth	r3, r3
 8009440:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009448:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	461a      	mov	r2, r3
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	441a      	add	r2, r3
 800945a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800945e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009466:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800946a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800946e:	b29b      	uxth	r3, r3
 8009470:	8013      	strh	r3, [r2, #0]
 8009472:	e0f6      	b.n	8009662 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009474:	88fb      	ldrh	r3, [r7, #6]
 8009476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800947a:	2b00      	cmp	r3, #0
 800947c:	d121      	bne.n	80094c2 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	4413      	add	r3, r2
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	b29b      	uxth	r3, r3
 8009490:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009498:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	461a      	mov	r2, r3
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	441a      	add	r2, r3
 80094aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80094ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80094ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094be:	b29b      	uxth	r3, r3
 80094c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	f040 80ca 	bne.w	8009662 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	695a      	ldr	r2, [r3, #20]
 80094d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80094d6:	441a      	add	r2, r3
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	69da      	ldr	r2, [r3, #28]
 80094e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80094e4:	441a      	add	r2, r3
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	6a1a      	ldr	r2, [r3, #32]
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d30b      	bcc.n	800950e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	6a1a      	ldr	r2, [r3, #32]
 8009502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009506:	1ad2      	subs	r2, r2, r3
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	621a      	str	r2, [r3, #32]
 800950c:	e017      	b.n	800953e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	6a1b      	ldr	r3, [r3, #32]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d108      	bne.n	8009528 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8009516:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800951a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009526:	e00a      	b.n	800953e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	2200      	movs	r2, #0
 8009534:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	657b      	str	r3, [r7, #84]	@ 0x54
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	785b      	ldrb	r3, [r3, #1]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d165      	bne.n	8009618 <HAL_PCD_EP_DB_Transmit+0x748>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800955a:	b29b      	uxth	r3, r3
 800955c:	461a      	mov	r2, r3
 800955e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009560:	4413      	add	r3, r2
 8009562:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	00da      	lsls	r2, r3, #3
 800956a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800956c:	4413      	add	r3, r2
 800956e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009572:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009574:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009576:	881b      	ldrh	r3, [r3, #0]
 8009578:	b29b      	uxth	r3, r3
 800957a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800957e:	b29a      	uxth	r2, r3
 8009580:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009582:	801a      	strh	r2, [r3, #0]
 8009584:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009588:	2b3e      	cmp	r3, #62	@ 0x3e
 800958a:	d91d      	bls.n	80095c8 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800958c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009590:	095b      	lsrs	r3, r3, #5
 8009592:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009594:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009598:	f003 031f 	and.w	r3, r3, #31
 800959c:	2b00      	cmp	r3, #0
 800959e:	d102      	bne.n	80095a6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80095a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80095a2:	3b01      	subs	r3, #1
 80095a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095a8:	881b      	ldrh	r3, [r3, #0]
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	029b      	lsls	r3, r3, #10
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	4313      	orrs	r3, r2
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095c4:	801a      	strh	r2, [r3, #0]
 80095c6:	e041      	b.n	800964c <HAL_PCD_EP_DB_Transmit+0x77c>
 80095c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <HAL_PCD_EP_DB_Transmit+0x716>
 80095d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095de:	b29a      	uxth	r2, r3
 80095e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095e2:	801a      	strh	r2, [r3, #0]
 80095e4:	e032      	b.n	800964c <HAL_PCD_EP_DB_Transmit+0x77c>
 80095e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095ea:	085b      	lsrs	r3, r3, #1
 80095ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d002      	beq.n	8009600 <HAL_PCD_EP_DB_Transmit+0x730>
 80095fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80095fc:	3301      	adds	r3, #1
 80095fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009600:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	b29a      	uxth	r2, r3
 8009606:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009608:	b29b      	uxth	r3, r3
 800960a:	029b      	lsls	r3, r3, #10
 800960c:	b29b      	uxth	r3, r3
 800960e:	4313      	orrs	r3, r2
 8009610:	b29a      	uxth	r2, r3
 8009612:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009614:	801a      	strh	r2, [r3, #0]
 8009616:	e019      	b.n	800964c <HAL_PCD_EP_DB_Transmit+0x77c>
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	785b      	ldrb	r3, [r3, #1]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d115      	bne.n	800964c <HAL_PCD_EP_DB_Transmit+0x77c>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009628:	b29b      	uxth	r3, r3
 800962a:	461a      	mov	r2, r3
 800962c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800962e:	4413      	add	r3, r2
 8009630:	657b      	str	r3, [r7, #84]	@ 0x54
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	00da      	lsls	r2, r3, #3
 8009638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800963a:	4413      	add	r3, r2
 800963c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009640:	653b      	str	r3, [r7, #80]	@ 0x50
 8009642:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009646:	b29a      	uxth	r2, r3
 8009648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800964a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6818      	ldr	r0, [r3, #0]
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	6959      	ldr	r1, [r3, #20]
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	895a      	ldrh	r2, [r3, #10]
 8009658:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800965c:	b29b      	uxth	r3, r3
 800965e:	f007 f86d 	bl	801073c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	b29b      	uxth	r3, r3
 8009674:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009678:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800967c:	82bb      	strh	r3, [r7, #20]
 800967e:	8abb      	ldrh	r3, [r7, #20]
 8009680:	f083 0310 	eor.w	r3, r3, #16
 8009684:	82bb      	strh	r3, [r7, #20]
 8009686:	8abb      	ldrh	r3, [r7, #20]
 8009688:	f083 0320 	eor.w	r3, r3, #32
 800968c:	82bb      	strh	r3, [r7, #20]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	441a      	add	r2, r3
 800969c:	8abb      	ldrh	r3, [r7, #20]
 800969e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3790      	adds	r7, #144	@ 0x90
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	607b      	str	r3, [r7, #4]
 80096c6:	460b      	mov	r3, r1
 80096c8:	817b      	strh	r3, [r7, #10]
 80096ca:	4613      	mov	r3, r2
 80096cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80096ce:	897b      	ldrh	r3, [r7, #10]
 80096d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00b      	beq.n	80096f2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096da:	897b      	ldrh	r3, [r7, #10]
 80096dc:	f003 0207 	and.w	r2, r3, #7
 80096e0:	4613      	mov	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	00db      	lsls	r3, r3, #3
 80096e8:	3310      	adds	r3, #16
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	4413      	add	r3, r2
 80096ee:	617b      	str	r3, [r7, #20]
 80096f0:	e009      	b.n	8009706 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80096f2:	897a      	ldrh	r2, [r7, #10]
 80096f4:	4613      	mov	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	4413      	add	r3, r2
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	4413      	add	r3, r2
 8009704:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8009706:	893b      	ldrh	r3, [r7, #8]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d107      	bne.n	800971c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	2200      	movs	r2, #0
 8009710:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	b29a      	uxth	r2, r3
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	80da      	strh	r2, [r3, #6]
 800971a:	e00b      	b.n	8009734 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2201      	movs	r2, #1
 8009720:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	b29a      	uxth	r2, r3
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	0c1b      	lsrs	r3, r3, #16
 800972e:	b29a      	uxth	r2, r3
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	371c      	adds	r7, #28
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr

08009742 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009742:	b480      	push	{r7}
 8009744:	b085      	sub	sp, #20
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009766:	b29b      	uxth	r3, r3
 8009768:	f043 0301 	orr.w	r3, r3, #1
 800976c:	b29a      	uxth	r2, r3
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800977a:	b29b      	uxth	r3, r3
 800977c:	f043 0302 	orr.w	r3, r3, #2
 8009780:	b29a      	uxth	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
	...

08009798 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00b      	beq.n	80097be <HAL_PWREx_ControlVoltageScaling+0x26>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097ac:	d007      	beq.n	80097be <HAL_PWREx_ControlVoltageScaling+0x26>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097b4:	d003      	beq.n	80097be <HAL_PWREx_ControlVoltageScaling+0x26>
 80097b6:	219d      	movs	r1, #157	@ 0x9d
 80097b8:	484d      	ldr	r0, [pc, #308]	@ (80098f0 <HAL_PWREx_ControlVoltageScaling+0x158>)
 80097ba:	f7f8 fd33 	bl	8002224 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d141      	bne.n	8009848 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80097c4:	4b4b      	ldr	r3, [pc, #300]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80097cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097d0:	d131      	bne.n	8009836 <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80097d2:	4b48      	ldr	r3, [pc, #288]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80097d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097d8:	4a46      	ldr	r2, [pc, #280]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80097da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097de:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80097e2:	4b44      	ldr	r3, [pc, #272]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80097ea:	4a42      	ldr	r2, [pc, #264]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80097ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80097f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80097f2:	4b41      	ldr	r3, [pc, #260]	@ (80098f8 <HAL_PWREx_ControlVoltageScaling+0x160>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2232      	movs	r2, #50	@ 0x32
 80097f8:	fb02 f303 	mul.w	r3, r2, r3
 80097fc:	4a3f      	ldr	r2, [pc, #252]	@ (80098fc <HAL_PWREx_ControlVoltageScaling+0x164>)
 80097fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009802:	0c9b      	lsrs	r3, r3, #18
 8009804:	3301      	adds	r3, #1
 8009806:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009808:	e002      	b.n	8009810 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	3b01      	subs	r3, #1
 800980e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009810:	4b38      	ldr	r3, [pc, #224]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009818:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800981c:	d102      	bne.n	8009824 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1f2      	bne.n	800980a <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009824:	4b33      	ldr	r3, [pc, #204]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800982c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009830:	d158      	bne.n	80098e4 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e057      	b.n	80098e6 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009836:	4b2f      	ldr	r3, [pc, #188]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800983c:	4a2d      	ldr	r2, [pc, #180]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800983e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009842:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009846:	e04d      	b.n	80098e4 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800984e:	d141      	bne.n	80098d4 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009850:	4b28      	ldr	r3, [pc, #160]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800985c:	d131      	bne.n	80098c2 <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800985e:	4b25      	ldr	r3, [pc, #148]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009864:	4a23      	ldr	r2, [pc, #140]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800986a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800986e:	4b21      	ldr	r3, [pc, #132]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009876:	4a1f      	ldr	r2, [pc, #124]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8009878:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800987c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800987e:	4b1e      	ldr	r3, [pc, #120]	@ (80098f8 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2232      	movs	r2, #50	@ 0x32
 8009884:	fb02 f303 	mul.w	r3, r2, r3
 8009888:	4a1c      	ldr	r2, [pc, #112]	@ (80098fc <HAL_PWREx_ControlVoltageScaling+0x164>)
 800988a:	fba2 2303 	umull	r2, r3, r2, r3
 800988e:	0c9b      	lsrs	r3, r3, #18
 8009890:	3301      	adds	r3, #1
 8009892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009894:	e002      	b.n	800989c <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	3b01      	subs	r3, #1
 800989a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800989c:	4b15      	ldr	r3, [pc, #84]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800989e:	695b      	ldr	r3, [r3, #20]
 80098a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098a8:	d102      	bne.n	80098b0 <HAL_PWREx_ControlVoltageScaling+0x118>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1f2      	bne.n	8009896 <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80098b0:	4b10      	ldr	r3, [pc, #64]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098bc:	d112      	bne.n	80098e4 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e011      	b.n	80098e6 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80098c2:	4b0c      	ldr	r3, [pc, #48]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80098c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098c8:	4a0a      	ldr	r2, [pc, #40]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80098ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098ce:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80098d2:	e007      	b.n	80098e4 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80098d4:	4b07      	ldr	r3, [pc, #28]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80098dc:	4a05      	ldr	r2, [pc, #20]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80098de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80098e2:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	08014258 	.word	0x08014258
 80098f4:	40007000 	.word	0x40007000
 80098f8:	20000000 	.word	0x20000000
 80098fc:	431bde83 	.word	0x431bde83

08009900 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009900:	b480      	push	{r7}
 8009902:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009904:	4b05      	ldr	r3, [pc, #20]	@ (800991c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	4a04      	ldr	r2, [pc, #16]	@ (800991c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800990a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800990e:	6093      	str	r3, [r2, #8]
}
 8009910:	bf00      	nop
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	40007000 	.word	0x40007000

08009920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b088      	sub	sp, #32
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d101      	bne.n	8009932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e3fc      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d022      	beq.n	8009980 <HAL_RCC_OscConfig+0x60>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 0301 	and.w	r3, r3, #1
 8009942:	2b00      	cmp	r3, #0
 8009944:	d11c      	bne.n	8009980 <HAL_RCC_OscConfig+0x60>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 0302 	and.w	r3, r3, #2
 800994e:	2b00      	cmp	r3, #0
 8009950:	d116      	bne.n	8009980 <HAL_RCC_OscConfig+0x60>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0320 	and.w	r3, r3, #32
 800995a:	2b00      	cmp	r3, #0
 800995c:	d110      	bne.n	8009980 <HAL_RCC_OscConfig+0x60>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 0308 	and.w	r3, r3, #8
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10a      	bne.n	8009980 <HAL_RCC_OscConfig+0x60>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0304 	and.w	r3, r3, #4
 8009972:	2b00      	cmp	r3, #0
 8009974:	d104      	bne.n	8009980 <HAL_RCC_OscConfig+0x60>
 8009976:	f240 1145 	movw	r1, #325	@ 0x145
 800997a:	4893      	ldr	r0, [pc, #588]	@ (8009bc8 <HAL_RCC_OscConfig+0x2a8>)
 800997c:	f7f8 fc52 	bl	8002224 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 0301 	and.w	r3, r3, #1
 8009988:	2b00      	cmp	r3, #0
 800998a:	f000 8089 	beq.w	8009aa0 <HAL_RCC_OscConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00e      	beq.n	80099b4 <HAL_RCC_OscConfig+0x94>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800999e:	d009      	beq.n	80099b4 <HAL_RCC_OscConfig+0x94>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80099a8:	d004      	beq.n	80099b4 <HAL_RCC_OscConfig+0x94>
 80099aa:	f240 114b 	movw	r1, #331	@ 0x14b
 80099ae:	4886      	ldr	r0, [pc, #536]	@ (8009bc8 <HAL_RCC_OscConfig+0x2a8>)
 80099b0:	f7f8 fc38 	bl	8002224 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099b4:	4b85      	ldr	r3, [pc, #532]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f003 030c 	and.w	r3, r3, #12
 80099bc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099be:	4b83      	ldr	r3, [pc, #524]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	f003 0303 	and.w	r3, r3, #3
 80099c6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	2b0c      	cmp	r3, #12
 80099cc:	d102      	bne.n	80099d4 <HAL_RCC_OscConfig+0xb4>
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2b03      	cmp	r3, #3
 80099d2:	d002      	beq.n	80099da <HAL_RCC_OscConfig+0xba>
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	2b08      	cmp	r3, #8
 80099d8:	d10b      	bne.n	80099f2 <HAL_RCC_OscConfig+0xd2>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099da:	4b7c      	ldr	r3, [pc, #496]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d05b      	beq.n	8009a9e <HAL_RCC_OscConfig+0x17e>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d157      	bne.n	8009a9e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e39c      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099fa:	d106      	bne.n	8009a0a <HAL_RCC_OscConfig+0xea>
 80099fc:	4b73      	ldr	r3, [pc, #460]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a72      	ldr	r2, [pc, #456]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009a02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a06:	6013      	str	r3, [r2, #0]
 8009a08:	e01d      	b.n	8009a46 <HAL_RCC_OscConfig+0x126>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009a12:	d10c      	bne.n	8009a2e <HAL_RCC_OscConfig+0x10e>
 8009a14:	4b6d      	ldr	r3, [pc, #436]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a6c      	ldr	r2, [pc, #432]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009a1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	4b6a      	ldr	r3, [pc, #424]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a69      	ldr	r2, [pc, #420]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009a26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a2a:	6013      	str	r3, [r2, #0]
 8009a2c:	e00b      	b.n	8009a46 <HAL_RCC_OscConfig+0x126>
 8009a2e:	4b67      	ldr	r3, [pc, #412]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a66      	ldr	r2, [pc, #408]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009a34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a38:	6013      	str	r3, [r2, #0]
 8009a3a:	4b64      	ldr	r3, [pc, #400]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a63      	ldr	r2, [pc, #396]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009a40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d013      	beq.n	8009a76 <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a4e:	f7f8 fe8d 	bl	800276c <HAL_GetTick>
 8009a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a54:	e008      	b.n	8009a68 <HAL_RCC_OscConfig+0x148>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a56:	f7f8 fe89 	bl	800276c <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	2b64      	cmp	r3, #100	@ 0x64
 8009a62:	d901      	bls.n	8009a68 <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e361      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a68:	4b58      	ldr	r3, [pc, #352]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d0f0      	beq.n	8009a56 <HAL_RCC_OscConfig+0x136>
 8009a74:	e014      	b.n	8009aa0 <HAL_RCC_OscConfig+0x180>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a76:	f7f8 fe79 	bl	800276c <HAL_GetTick>
 8009a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009a7c:	e008      	b.n	8009a90 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a7e:	f7f8 fe75 	bl	800276c <HAL_GetTick>
 8009a82:	4602      	mov	r2, r0
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	2b64      	cmp	r3, #100	@ 0x64
 8009a8a:	d901      	bls.n	8009a90 <HAL_RCC_OscConfig+0x170>
          {
            return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e34d      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009a90:	4b4e      	ldr	r3, [pc, #312]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1f0      	bne.n	8009a7e <HAL_RCC_OscConfig+0x15e>
 8009a9c:	e000      	b.n	8009aa0 <HAL_RCC_OscConfig+0x180>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a9e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0302 	and.w	r3, r3, #2
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f000 8094 	beq.w	8009bd6 <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d009      	beq.n	8009aca <HAL_RCC_OscConfig+0x1aa>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009abe:	d004      	beq.n	8009aca <HAL_RCC_OscConfig+0x1aa>
 8009ac0:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8009ac4:	4840      	ldr	r0, [pc, #256]	@ (8009bc8 <HAL_RCC_OscConfig+0x2a8>)
 8009ac6:	f7f8 fbad 	bl	8002224 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ad0:	d904      	bls.n	8009adc <HAL_RCC_OscConfig+0x1bc>
 8009ad2:	f240 1181 	movw	r1, #385	@ 0x181
 8009ad6:	483c      	ldr	r0, [pc, #240]	@ (8009bc8 <HAL_RCC_OscConfig+0x2a8>)
 8009ad8:	f7f8 fba4 	bl	8002224 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009adc:	4b3b      	ldr	r3, [pc, #236]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f003 030c 	and.w	r3, r3, #12
 8009ae4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ae6:	4b39      	ldr	r3, [pc, #228]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	f003 0303 	and.w	r3, r3, #3
 8009aee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	2b0c      	cmp	r3, #12
 8009af4:	d102      	bne.n	8009afc <HAL_RCC_OscConfig+0x1dc>
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d002      	beq.n	8009b02 <HAL_RCC_OscConfig+0x1e2>
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	2b04      	cmp	r3, #4
 8009b00:	d11f      	bne.n	8009b42 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b02:	4b32      	ldr	r3, [pc, #200]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d005      	beq.n	8009b1a <HAL_RCC_OscConfig+0x1fa>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <HAL_RCC_OscConfig+0x1fa>
      {
        return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e308      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	061b      	lsls	r3, r3, #24
 8009b28:	4928      	ldr	r1, [pc, #160]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009b2e:	4b28      	ldr	r3, [pc, #160]	@ (8009bd0 <HAL_RCC_OscConfig+0x2b0>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7f8 fdce 	bl	80026d4 <HAL_InitTick>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d04a      	beq.n	8009bd4 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e2f4      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d023      	beq.n	8009b92 <HAL_RCC_OscConfig+0x272>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b4a:	4b20      	ldr	r3, [pc, #128]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b56:	f7f8 fe09 	bl	800276c <HAL_GetTick>
 8009b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b5c:	e008      	b.n	8009b70 <HAL_RCC_OscConfig+0x250>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b5e:	f7f8 fe05 	bl	800276c <HAL_GetTick>
 8009b62:	4602      	mov	r2, r0
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d901      	bls.n	8009b70 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	e2dd      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b70:	4b16      	ldr	r3, [pc, #88]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d0f0      	beq.n	8009b5e <HAL_RCC_OscConfig+0x23e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b7c:	4b13      	ldr	r3, [pc, #76]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	061b      	lsls	r3, r3, #24
 8009b8a:	4910      	ldr	r1, [pc, #64]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	604b      	str	r3, [r1, #4]
 8009b90:	e021      	b.n	8009bd6 <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b92:	4b0e      	ldr	r3, [pc, #56]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a0d      	ldr	r2, [pc, #52]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009b98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b9e:	f7f8 fde5 	bl	800276c <HAL_GetTick>
 8009ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ba4:	e008      	b.n	8009bb8 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ba6:	f7f8 fde1 	bl	800276c <HAL_GetTick>
 8009baa:	4602      	mov	r2, r0
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d901      	bls.n	8009bb8 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	e2b9      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009bb8:	4b04      	ldr	r3, [pc, #16]	@ (8009bcc <HAL_RCC_OscConfig+0x2ac>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1f0      	bne.n	8009ba6 <HAL_RCC_OscConfig+0x286>
 8009bc4:	e007      	b.n	8009bd6 <HAL_RCC_OscConfig+0x2b6>
 8009bc6:	bf00      	nop
 8009bc8:	080142cc 	.word	0x080142cc
 8009bcc:	40021000 	.word	0x40021000
 8009bd0:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 0308 	and.w	r3, r3, #8
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d049      	beq.n	8009c76 <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	695b      	ldr	r3, [r3, #20]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d008      	beq.n	8009bfc <HAL_RCC_OscConfig+0x2dc>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	695b      	ldr	r3, [r3, #20]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d004      	beq.n	8009bfc <HAL_RCC_OscConfig+0x2dc>
 8009bf2:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 8009bf6:	48a3      	ldr	r0, [pc, #652]	@ (8009e84 <HAL_RCC_OscConfig+0x564>)
 8009bf8:	f7f8 fb14 	bl	8002224 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d01c      	beq.n	8009c3e <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c04:	4ba0      	ldr	r3, [pc, #640]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c0a:	4a9f      	ldr	r2, [pc, #636]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009c0c:	f043 0301 	orr.w	r3, r3, #1
 8009c10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c14:	f7f8 fdaa 	bl	800276c <HAL_GetTick>
 8009c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009c1a:	e008      	b.n	8009c2e <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c1c:	f7f8 fda6 	bl	800276c <HAL_GetTick>
 8009c20:	4602      	mov	r2, r0
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d901      	bls.n	8009c2e <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e27e      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009c2e:	4b96      	ldr	r3, [pc, #600]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c34:	f003 0302 	and.w	r3, r3, #2
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d0ef      	beq.n	8009c1c <HAL_RCC_OscConfig+0x2fc>
 8009c3c:	e01b      	b.n	8009c76 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c3e:	4b92      	ldr	r3, [pc, #584]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c44:	4a90      	ldr	r2, [pc, #576]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009c46:	f023 0301 	bic.w	r3, r3, #1
 8009c4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c4e:	f7f8 fd8d 	bl	800276c <HAL_GetTick>
 8009c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009c54:	e008      	b.n	8009c68 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c56:	f7f8 fd89 	bl	800276c <HAL_GetTick>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d901      	bls.n	8009c68 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e261      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009c68:	4b87      	ldr	r3, [pc, #540]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c6e:	f003 0302 	and.w	r3, r3, #2
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1ef      	bne.n	8009c56 <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f003 0304 	and.w	r3, r3, #4
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 80b7 	beq.w	8009df2 <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c84:	2300      	movs	r3, #0
 8009c86:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00c      	beq.n	8009caa <HAL_RCC_OscConfig+0x38a>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d008      	beq.n	8009caa <HAL_RCC_OscConfig+0x38a>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	2b05      	cmp	r3, #5
 8009c9e:	d004      	beq.n	8009caa <HAL_RCC_OscConfig+0x38a>
 8009ca0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8009ca4:	4877      	ldr	r0, [pc, #476]	@ (8009e84 <HAL_RCC_OscConfig+0x564>)
 8009ca6:	f7f8 fabd 	bl	8002224 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009caa:	4b77      	ldr	r3, [pc, #476]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d101      	bne.n	8009cba <HAL_RCC_OscConfig+0x39a>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e000      	b.n	8009cbc <HAL_RCC_OscConfig+0x39c>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00d      	beq.n	8009cdc <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cc0:	4b71      	ldr	r3, [pc, #452]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cc4:	4a70      	ldr	r2, [pc, #448]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cca:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ccc:	4b6e      	ldr	r3, [pc, #440]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cd4:	60fb      	str	r3, [r7, #12]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cdc:	4b6b      	ldr	r3, [pc, #428]	@ (8009e8c <HAL_RCC_OscConfig+0x56c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d118      	bne.n	8009d1a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ce8:	4b68      	ldr	r3, [pc, #416]	@ (8009e8c <HAL_RCC_OscConfig+0x56c>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a67      	ldr	r2, [pc, #412]	@ (8009e8c <HAL_RCC_OscConfig+0x56c>)
 8009cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009cf4:	f7f8 fd3a 	bl	800276c <HAL_GetTick>
 8009cf8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cfa:	e008      	b.n	8009d0e <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cfc:	f7f8 fd36 	bl	800276c <HAL_GetTick>
 8009d00:	4602      	mov	r2, r0
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d901      	bls.n	8009d0e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	e20e      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d0e:	4b5f      	ldr	r3, [pc, #380]	@ (8009e8c <HAL_RCC_OscConfig+0x56c>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d0f0      	beq.n	8009cfc <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d108      	bne.n	8009d34 <HAL_RCC_OscConfig+0x414>
 8009d22:	4b59      	ldr	r3, [pc, #356]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d28:	4a57      	ldr	r2, [pc, #348]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009d2a:	f043 0301 	orr.w	r3, r3, #1
 8009d2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009d32:	e024      	b.n	8009d7e <HAL_RCC_OscConfig+0x45e>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	2b05      	cmp	r3, #5
 8009d3a:	d110      	bne.n	8009d5e <HAL_RCC_OscConfig+0x43e>
 8009d3c:	4b52      	ldr	r3, [pc, #328]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d42:	4a51      	ldr	r2, [pc, #324]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009d44:	f043 0304 	orr.w	r3, r3, #4
 8009d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009d4c:	4b4e      	ldr	r3, [pc, #312]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d52:	4a4d      	ldr	r2, [pc, #308]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009d54:	f043 0301 	orr.w	r3, r3, #1
 8009d58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009d5c:	e00f      	b.n	8009d7e <HAL_RCC_OscConfig+0x45e>
 8009d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d64:	4a48      	ldr	r2, [pc, #288]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009d66:	f023 0301 	bic.w	r3, r3, #1
 8009d6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009d6e:	4b46      	ldr	r3, [pc, #280]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d74:	4a44      	ldr	r2, [pc, #272]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009d76:	f023 0304 	bic.w	r3, r3, #4
 8009d7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d016      	beq.n	8009db4 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d86:	f7f8 fcf1 	bl	800276c <HAL_GetTick>
 8009d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d8c:	e00a      	b.n	8009da4 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d8e:	f7f8 fced 	bl	800276c <HAL_GetTick>
 8009d92:	4602      	mov	r2, r0
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d901      	bls.n	8009da4 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8009da0:	2303      	movs	r3, #3
 8009da2:	e1c3      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009da4:	4b38      	ldr	r3, [pc, #224]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009daa:	f003 0302 	and.w	r3, r3, #2
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d0ed      	beq.n	8009d8e <HAL_RCC_OscConfig+0x46e>
 8009db2:	e015      	b.n	8009de0 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009db4:	f7f8 fcda 	bl	800276c <HAL_GetTick>
 8009db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009dba:	e00a      	b.n	8009dd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dbc:	f7f8 fcd6 	bl	800276c <HAL_GetTick>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d901      	bls.n	8009dd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009dce:	2303      	movs	r3, #3
 8009dd0:	e1ac      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dd8:	f003 0302 	and.w	r3, r3, #2
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1ed      	bne.n	8009dbc <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009de0:	7ffb      	ldrb	r3, [r7, #31]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d105      	bne.n	8009df2 <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009de6:	4b28      	ldr	r3, [pc, #160]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dea:	4a27      	ldr	r2, [pc, #156]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009dec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009df0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0320 	and.w	r3, r3, #32
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d04f      	beq.n	8009e9e <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d008      	beq.n	8009e18 <HAL_RCC_OscConfig+0x4f8>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d004      	beq.n	8009e18 <HAL_RCC_OscConfig+0x4f8>
 8009e0e:	f240 213b 	movw	r1, #571	@ 0x23b
 8009e12:	481c      	ldr	r0, [pc, #112]	@ (8009e84 <HAL_RCC_OscConfig+0x564>)
 8009e14:	f7f8 fa06 	bl	8002224 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d01c      	beq.n	8009e5a <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009e20:	4b19      	ldr	r3, [pc, #100]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e26:	4a18      	ldr	r2, [pc, #96]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009e28:	f043 0301 	orr.w	r3, r3, #1
 8009e2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e30:	f7f8 fc9c 	bl	800276c <HAL_GetTick>
 8009e34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009e36:	e008      	b.n	8009e4a <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e38:	f7f8 fc98 	bl	800276c <HAL_GetTick>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d901      	bls.n	8009e4a <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 8009e46:	2303      	movs	r3, #3
 8009e48:	e170      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e50:	f003 0302 	and.w	r3, r3, #2
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d0ef      	beq.n	8009e38 <HAL_RCC_OscConfig+0x518>
 8009e58:	e021      	b.n	8009e9e <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009e5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e60:	4a09      	ldr	r2, [pc, #36]	@ (8009e88 <HAL_RCC_OscConfig+0x568>)
 8009e62:	f023 0301 	bic.w	r3, r3, #1
 8009e66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e6a:	f7f8 fc7f 	bl	800276c <HAL_GetTick>
 8009e6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009e70:	e00e      	b.n	8009e90 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e72:	f7f8 fc7b 	bl	800276c <HAL_GetTick>
 8009e76:	4602      	mov	r2, r0
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	1ad3      	subs	r3, r2, r3
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d907      	bls.n	8009e90 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8009e80:	2303      	movs	r3, #3
 8009e82:	e153      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
 8009e84:	080142cc 	.word	0x080142cc
 8009e88:	40021000 	.word	0x40021000
 8009e8c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009e90:	4b85      	ldr	r3, [pc, #532]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 8009e92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e96:	f003 0302 	and.w	r3, r3, #2
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1e9      	bne.n	8009e72 <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	69db      	ldr	r3, [r3, #28]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00c      	beq.n	8009ec0 <HAL_RCC_OscConfig+0x5a0>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d008      	beq.n	8009ec0 <HAL_RCC_OscConfig+0x5a0>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d004      	beq.n	8009ec0 <HAL_RCC_OscConfig+0x5a0>
 8009eb6:	f44f 7119 	mov.w	r1, #612	@ 0x264
 8009eba:	487c      	ldr	r0, [pc, #496]	@ (800a0ac <HAL_RCC_OscConfig+0x78c>)
 8009ebc:	f7f8 f9b2 	bl	8002224 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	69db      	ldr	r3, [r3, #28]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f000 8130 	beq.w	800a12a <HAL_RCC_OscConfig+0x80a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009eca:	4b77      	ldr	r3, [pc, #476]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	f003 030c 	and.w	r3, r3, #12
 8009ed2:	2b0c      	cmp	r3, #12
 8009ed4:	f000 80e2 	beq.w	800a09c <HAL_RCC_OscConfig+0x77c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	69db      	ldr	r3, [r3, #28]
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	f040 80bd 	bne.w	800a05c <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00c      	beq.n	8009f04 <HAL_RCC_OscConfig+0x5e4>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d008      	beq.n	8009f04 <HAL_RCC_OscConfig+0x5e4>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	2b03      	cmp	r3, #3
 8009ef8:	d004      	beq.n	8009f04 <HAL_RCC_OscConfig+0x5e4>
 8009efa:	f240 216e 	movw	r1, #622	@ 0x26e
 8009efe:	486b      	ldr	r0, [pc, #428]	@ (800a0ac <HAL_RCC_OscConfig+0x78c>)
 8009f00:	f7f8 f990 	bl	8002224 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d003      	beq.n	8009f14 <HAL_RCC_OscConfig+0x5f4>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f10:	2b10      	cmp	r3, #16
 8009f12:	d904      	bls.n	8009f1e <HAL_RCC_OscConfig+0x5fe>
 8009f14:	f240 216f 	movw	r1, #623	@ 0x26f
 8009f18:	4864      	ldr	r0, [pc, #400]	@ (800a0ac <HAL_RCC_OscConfig+0x78c>)
 8009f1a:	f7f8 f983 	bl	8002224 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f22:	2b07      	cmp	r3, #7
 8009f24:	d903      	bls.n	8009f2e <HAL_RCC_OscConfig+0x60e>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f2c:	d904      	bls.n	8009f38 <HAL_RCC_OscConfig+0x618>
 8009f2e:	f44f 711c 	mov.w	r1, #624	@ 0x270
 8009f32:	485e      	ldr	r0, [pc, #376]	@ (800a0ac <HAL_RCC_OscConfig+0x78c>)
 8009f34:	f7f8 f976 	bl	8002224 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d903      	bls.n	8009f48 <HAL_RCC_OscConfig+0x628>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f44:	2b1f      	cmp	r3, #31
 8009f46:	d904      	bls.n	8009f52 <HAL_RCC_OscConfig+0x632>
 8009f48:	f240 2171 	movw	r1, #625	@ 0x271
 8009f4c:	4857      	ldr	r0, [pc, #348]	@ (800a0ac <HAL_RCC_OscConfig+0x78c>)
 8009f4e:	f7f8 f969 	bl	8002224 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d010      	beq.n	8009f7c <HAL_RCC_OscConfig+0x65c>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f5e:	2b04      	cmp	r3, #4
 8009f60:	d00c      	beq.n	8009f7c <HAL_RCC_OscConfig+0x65c>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f66:	2b06      	cmp	r3, #6
 8009f68:	d008      	beq.n	8009f7c <HAL_RCC_OscConfig+0x65c>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f6e:	2b08      	cmp	r3, #8
 8009f70:	d004      	beq.n	8009f7c <HAL_RCC_OscConfig+0x65c>
 8009f72:	f240 2172 	movw	r1, #626	@ 0x272
 8009f76:	484d      	ldr	r0, [pc, #308]	@ (800a0ac <HAL_RCC_OscConfig+0x78c>)
 8009f78:	f7f8 f954 	bl	8002224 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d010      	beq.n	8009fa6 <HAL_RCC_OscConfig+0x686>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f88:	2b04      	cmp	r3, #4
 8009f8a:	d00c      	beq.n	8009fa6 <HAL_RCC_OscConfig+0x686>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f90:	2b06      	cmp	r3, #6
 8009f92:	d008      	beq.n	8009fa6 <HAL_RCC_OscConfig+0x686>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f98:	2b08      	cmp	r3, #8
 8009f9a:	d004      	beq.n	8009fa6 <HAL_RCC_OscConfig+0x686>
 8009f9c:	f240 2173 	movw	r1, #627	@ 0x273
 8009fa0:	4842      	ldr	r0, [pc, #264]	@ (800a0ac <HAL_RCC_OscConfig+0x78c>)
 8009fa2:	f7f8 f93f 	bl	8002224 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fa6:	4b40      	ldr	r3, [pc, #256]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a3f      	ldr	r2, [pc, #252]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 8009fac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fb2:	f7f8 fbdb 	bl	800276c <HAL_GetTick>
 8009fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009fb8:	e008      	b.n	8009fcc <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fba:	f7f8 fbd7 	bl	800276c <HAL_GetTick>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d901      	bls.n	8009fcc <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e0af      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009fcc:	4b36      	ldr	r3, [pc, #216]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d1f0      	bne.n	8009fba <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fd8:	4b33      	ldr	r3, [pc, #204]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 8009fda:	68da      	ldr	r2, [r3, #12]
 8009fdc:	4b34      	ldr	r3, [pc, #208]	@ (800a0b0 <HAL_RCC_OscConfig+0x790>)
 8009fde:	4013      	ands	r3, r2
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	6a11      	ldr	r1, [r2, #32]
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009fe8:	3a01      	subs	r2, #1
 8009fea:	0112      	lsls	r2, r2, #4
 8009fec:	4311      	orrs	r1, r2
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009ff2:	0212      	lsls	r2, r2, #8
 8009ff4:	4311      	orrs	r1, r2
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009ffa:	0852      	lsrs	r2, r2, #1
 8009ffc:	3a01      	subs	r2, #1
 8009ffe:	0552      	lsls	r2, r2, #21
 800a000:	4311      	orrs	r1, r2
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a006:	0852      	lsrs	r2, r2, #1
 800a008:	3a01      	subs	r2, #1
 800a00a:	0652      	lsls	r2, r2, #25
 800a00c:	4311      	orrs	r1, r2
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a012:	06d2      	lsls	r2, r2, #27
 800a014:	430a      	orrs	r2, r1
 800a016:	4924      	ldr	r1, [pc, #144]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 800a018:	4313      	orrs	r3, r2
 800a01a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a01c:	4b22      	ldr	r3, [pc, #136]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a21      	ldr	r2, [pc, #132]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 800a022:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a026:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a028:	4b1f      	ldr	r3, [pc, #124]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	4a1e      	ldr	r2, [pc, #120]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 800a02e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a032:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a034:	f7f8 fb9a 	bl	800276c <HAL_GetTick>
 800a038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a03a:	e008      	b.n	800a04e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a03c:	f7f8 fb96 	bl	800276c <HAL_GetTick>
 800a040:	4602      	mov	r2, r0
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	2b02      	cmp	r3, #2
 800a048:	d901      	bls.n	800a04e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e06e      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a04e:	4b16      	ldr	r3, [pc, #88]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a056:	2b00      	cmp	r3, #0
 800a058:	d0f0      	beq.n	800a03c <HAL_RCC_OscConfig+0x71c>
 800a05a:	e066      	b.n	800a12a <HAL_RCC_OscConfig+0x80a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a05c:	4b12      	ldr	r3, [pc, #72]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a11      	ldr	r2, [pc, #68]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 800a062:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a068:	f7f8 fb80 	bl	800276c <HAL_GetTick>
 800a06c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a06e:	e008      	b.n	800a082 <HAL_RCC_OscConfig+0x762>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a070:	f7f8 fb7c 	bl	800276c <HAL_GetTick>
 800a074:	4602      	mov	r2, r0
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d901      	bls.n	800a082 <HAL_RCC_OscConfig+0x762>
          {
            return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e054      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a082:	4b09      	ldr	r3, [pc, #36]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d1f0      	bne.n	800a070 <HAL_RCC_OscConfig+0x750>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a08e:	4b06      	ldr	r3, [pc, #24]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 800a090:	68da      	ldr	r2, [r3, #12]
 800a092:	4905      	ldr	r1, [pc, #20]	@ (800a0a8 <HAL_RCC_OscConfig+0x788>)
 800a094:	4b07      	ldr	r3, [pc, #28]	@ (800a0b4 <HAL_RCC_OscConfig+0x794>)
 800a096:	4013      	ands	r3, r2
 800a098:	60cb      	str	r3, [r1, #12]
 800a09a:	e046      	b.n	800a12a <HAL_RCC_OscConfig+0x80a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	69db      	ldr	r3, [r3, #28]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d109      	bne.n	800a0b8 <HAL_RCC_OscConfig+0x798>
      {
        return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e041      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
 800a0a8:	40021000 	.word	0x40021000
 800a0ac:	080142cc 	.word	0x080142cc
 800a0b0:	019f800c 	.word	0x019f800c
 800a0b4:	feeefffc 	.word	0xfeeefffc
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a0b8:	4b1e      	ldr	r3, [pc, #120]	@ (800a134 <HAL_RCC_OscConfig+0x814>)
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f003 0203 	and.w	r2, r3, #3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a1b      	ldr	r3, [r3, #32]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d12c      	bne.n	800a126 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d123      	bne.n	800a126 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d11b      	bne.n	800a126 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d113      	bne.n	800a126 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a108:	085b      	lsrs	r3, r3, #1
 800a10a:	3b01      	subs	r3, #1
 800a10c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a10e:	429a      	cmp	r2, r3
 800a110:	d109      	bne.n	800a126 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a11c:	085b      	lsrs	r3, r3, #1
 800a11e:	3b01      	subs	r3, #1
 800a120:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a122:	429a      	cmp	r2, r3
 800a124:	d001      	beq.n	800a12a <HAL_RCC_OscConfig+0x80a>
      {
        return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	e000      	b.n	800a12c <HAL_RCC_OscConfig+0x80c>
      }
    }
  }
  }

  return HAL_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3720      	adds	r7, #32
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	40021000 	.word	0x40021000

0800a138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a142:	2300      	movs	r3, #0
 800a144:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d101      	bne.n	800a150 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e1e0      	b.n	800a512 <HAL_RCC_ClockConfig+0x3da>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 030f 	and.w	r3, r3, #15
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d003      	beq.n	800a164 <HAL_RCC_ClockConfig+0x2c>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b0f      	cmp	r3, #15
 800a162:	d904      	bls.n	800a16e <HAL_RCC_ClockConfig+0x36>
 800a164:	f240 310b 	movw	r1, #779	@ 0x30b
 800a168:	4869      	ldr	r0, [pc, #420]	@ (800a310 <HAL_RCC_ClockConfig+0x1d8>)
 800a16a:	f7f8 f85b 	bl	8002224 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d031      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xa0>
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	2b01      	cmp	r3, #1
 800a178:	d02e      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xa0>
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d02b      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xa0>
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	2b03      	cmp	r3, #3
 800a184:	d028      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xa0>
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	2b04      	cmp	r3, #4
 800a18a:	d025      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xa0>
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2b05      	cmp	r3, #5
 800a190:	d022      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xa0>
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2b06      	cmp	r3, #6
 800a196:	d01f      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xa0>
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	2b07      	cmp	r3, #7
 800a19c:	d01c      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xa0>
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	2b08      	cmp	r3, #8
 800a1a2:	d019      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xa0>
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	2b09      	cmp	r3, #9
 800a1a8:	d016      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xa0>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b0a      	cmp	r3, #10
 800a1ae:	d013      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xa0>
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2b0b      	cmp	r3, #11
 800a1b4:	d010      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xa0>
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b0c      	cmp	r3, #12
 800a1ba:	d00d      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xa0>
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	2b0d      	cmp	r3, #13
 800a1c0:	d00a      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xa0>
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	2b0e      	cmp	r3, #14
 800a1c6:	d007      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xa0>
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	2b0f      	cmp	r3, #15
 800a1cc:	d004      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xa0>
 800a1ce:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 800a1d2:	484f      	ldr	r0, [pc, #316]	@ (800a310 <HAL_RCC_ClockConfig+0x1d8>)
 800a1d4:	f7f8 f826 	bl	8002224 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a1d8:	4b4e      	ldr	r3, [pc, #312]	@ (800a314 <HAL_RCC_ClockConfig+0x1dc>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 030f 	and.w	r3, r3, #15
 800a1e0:	683a      	ldr	r2, [r7, #0]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d910      	bls.n	800a208 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1e6:	4b4b      	ldr	r3, [pc, #300]	@ (800a314 <HAL_RCC_ClockConfig+0x1dc>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f023 020f 	bic.w	r2, r3, #15
 800a1ee:	4949      	ldr	r1, [pc, #292]	@ (800a314 <HAL_RCC_ClockConfig+0x1dc>)
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1f6:	4b47      	ldr	r3, [pc, #284]	@ (800a314 <HAL_RCC_ClockConfig+0x1dc>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 030f 	and.w	r3, r3, #15
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	429a      	cmp	r2, r3
 800a202:	d001      	beq.n	800a208 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e184      	b.n	800a512 <HAL_RCC_ClockConfig+0x3da>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0301 	and.w	r3, r3, #1
 800a210:	2b00      	cmp	r3, #0
 800a212:	f000 808e 	beq.w	800a332 <HAL_RCC_ClockConfig+0x1fa>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d00c      	beq.n	800a238 <HAL_RCC_ClockConfig+0x100>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	2b02      	cmp	r3, #2
 800a224:	d008      	beq.n	800a238 <HAL_RCC_ClockConfig+0x100>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	2b03      	cmp	r3, #3
 800a22c:	d004      	beq.n	800a238 <HAL_RCC_ClockConfig+0x100>
 800a22e:	f240 3123 	movw	r1, #803	@ 0x323
 800a232:	4837      	ldr	r0, [pc, #220]	@ (800a310 <HAL_RCC_ClockConfig+0x1d8>)
 800a234:	f7f7 fff6 	bl	8002224 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	2b03      	cmp	r3, #3
 800a23e:	d129      	bne.n	800a294 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a240:	4b35      	ldr	r3, [pc, #212]	@ (800a318 <HAL_RCC_ClockConfig+0x1e0>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d101      	bne.n	800a250 <HAL_RCC_ClockConfig+0x118>
      {
        return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e160      	b.n	800a512 <HAL_RCC_ClockConfig+0x3da>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a250:	f000 fa9e 	bl	800a790 <RCC_GetSysClockFreqFromPLLSource>
 800a254:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	4a30      	ldr	r2, [pc, #192]	@ (800a31c <HAL_RCC_ClockConfig+0x1e4>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d93f      	bls.n	800a2de <HAL_RCC_ClockConfig+0x1a6>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a25e:	4b2e      	ldr	r3, [pc, #184]	@ (800a318 <HAL_RCC_ClockConfig+0x1e0>)
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d009      	beq.n	800a27e <HAL_RCC_ClockConfig+0x146>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a272:	2b00      	cmp	r3, #0
 800a274:	d033      	beq.n	800a2de <HAL_RCC_ClockConfig+0x1a6>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d12f      	bne.n	800a2de <HAL_RCC_ClockConfig+0x1a6>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a27e:	4b26      	ldr	r3, [pc, #152]	@ (800a318 <HAL_RCC_ClockConfig+0x1e0>)
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a286:	4a24      	ldr	r2, [pc, #144]	@ (800a318 <HAL_RCC_ClockConfig+0x1e0>)
 800a288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a28c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a28e:	2380      	movs	r3, #128	@ 0x80
 800a290:	617b      	str	r3, [r7, #20]
 800a292:	e024      	b.n	800a2de <HAL_RCC_ClockConfig+0x1a6>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d107      	bne.n	800a2ac <HAL_RCC_ClockConfig+0x174>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a29c:	4b1e      	ldr	r3, [pc, #120]	@ (800a318 <HAL_RCC_ClockConfig+0x1e0>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d109      	bne.n	800a2bc <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e132      	b.n	800a512 <HAL_RCC_ClockConfig+0x3da>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a2ac:	4b1a      	ldr	r3, [pc, #104]	@ (800a318 <HAL_RCC_ClockConfig+0x1e0>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d101      	bne.n	800a2bc <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e12a      	b.n	800a512 <HAL_RCC_ClockConfig+0x3da>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a2bc:	f000 f9ce 	bl	800a65c <HAL_RCC_GetSysClockFreq>
 800a2c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	4a15      	ldr	r2, [pc, #84]	@ (800a31c <HAL_RCC_ClockConfig+0x1e4>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d909      	bls.n	800a2de <HAL_RCC_ClockConfig+0x1a6>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a2ca:	4b13      	ldr	r3, [pc, #76]	@ (800a318 <HAL_RCC_ClockConfig+0x1e0>)
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a2d2:	4a11      	ldr	r2, [pc, #68]	@ (800a318 <HAL_RCC_ClockConfig+0x1e0>)
 800a2d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a2da:	2380      	movs	r3, #128	@ 0x80
 800a2dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a2de:	4b0e      	ldr	r3, [pc, #56]	@ (800a318 <HAL_RCC_ClockConfig+0x1e0>)
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f023 0203 	bic.w	r2, r3, #3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	490b      	ldr	r1, [pc, #44]	@ (800a318 <HAL_RCC_ClockConfig+0x1e0>)
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2f0:	f7f8 fa3c 	bl	800276c <HAL_GetTick>
 800a2f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2f6:	e013      	b.n	800a320 <HAL_RCC_ClockConfig+0x1e8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2f8:	f7f8 fa38 	bl	800276c <HAL_GetTick>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a306:	4293      	cmp	r3, r2
 800a308:	d90a      	bls.n	800a320 <HAL_RCC_ClockConfig+0x1e8>
      {
        return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e101      	b.n	800a512 <HAL_RCC_ClockConfig+0x3da>
 800a30e:	bf00      	nop
 800a310:	080142cc 	.word	0x080142cc
 800a314:	40022000 	.word	0x40022000
 800a318:	40021000 	.word	0x40021000
 800a31c:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a320:	4b7e      	ldr	r3, [pc, #504]	@ (800a51c <HAL_RCC_ClockConfig+0x3e4>)
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	f003 020c 	and.w	r2, r3, #12
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	429a      	cmp	r2, r3
 800a330:	d1e2      	bne.n	800a2f8 <HAL_RCC_ClockConfig+0x1c0>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f003 0302 	and.w	r3, r3, #2
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d04c      	beq.n	800a3d8 <HAL_RCC_ClockConfig+0x2a0>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 0304 	and.w	r3, r3, #4
 800a346:	2b00      	cmp	r3, #0
 800a348:	d005      	beq.n	800a356 <HAL_RCC_ClockConfig+0x21e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a34a:	4b74      	ldr	r3, [pc, #464]	@ (800a51c <HAL_RCC_ClockConfig+0x3e4>)
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	4a73      	ldr	r2, [pc, #460]	@ (800a51c <HAL_RCC_ClockConfig+0x3e4>)
 800a350:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a354:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 0308 	and.w	r3, r3, #8
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d007      	beq.n	800a372 <HAL_RCC_ClockConfig+0x23a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a362:	4b6e      	ldr	r3, [pc, #440]	@ (800a51c <HAL_RCC_ClockConfig+0x3e4>)
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a36a:	4a6c      	ldr	r2, [pc, #432]	@ (800a51c <HAL_RCC_ClockConfig+0x3e4>)
 800a36c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a370:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d024      	beq.n	800a3c4 <HAL_RCC_ClockConfig+0x28c>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	2b80      	cmp	r3, #128	@ 0x80
 800a380:	d020      	beq.n	800a3c4 <HAL_RCC_ClockConfig+0x28c>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	2b90      	cmp	r3, #144	@ 0x90
 800a388:	d01c      	beq.n	800a3c4 <HAL_RCC_ClockConfig+0x28c>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	2ba0      	cmp	r3, #160	@ 0xa0
 800a390:	d018      	beq.n	800a3c4 <HAL_RCC_ClockConfig+0x28c>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	2bb0      	cmp	r3, #176	@ 0xb0
 800a398:	d014      	beq.n	800a3c4 <HAL_RCC_ClockConfig+0x28c>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3a0:	d010      	beq.n	800a3c4 <HAL_RCC_ClockConfig+0x28c>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	2bd0      	cmp	r3, #208	@ 0xd0
 800a3a8:	d00c      	beq.n	800a3c4 <HAL_RCC_ClockConfig+0x28c>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	2be0      	cmp	r3, #224	@ 0xe0
 800a3b0:	d008      	beq.n	800a3c4 <HAL_RCC_ClockConfig+0x28c>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	2bf0      	cmp	r3, #240	@ 0xf0
 800a3b8:	d004      	beq.n	800a3c4 <HAL_RCC_ClockConfig+0x28c>
 800a3ba:	f240 317a 	movw	r1, #890	@ 0x37a
 800a3be:	4858      	ldr	r0, [pc, #352]	@ (800a520 <HAL_RCC_ClockConfig+0x3e8>)
 800a3c0:	f7f7 ff30 	bl	8002224 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3c4:	4b55      	ldr	r3, [pc, #340]	@ (800a51c <HAL_RCC_ClockConfig+0x3e4>)
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	4952      	ldr	r1, [pc, #328]	@ (800a51c <HAL_RCC_ClockConfig+0x3e4>)
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	608b      	str	r3, [r1, #8]
 800a3d6:	e008      	b.n	800a3ea <HAL_RCC_ClockConfig+0x2b2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	2b80      	cmp	r3, #128	@ 0x80
 800a3dc:	d105      	bne.n	800a3ea <HAL_RCC_ClockConfig+0x2b2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a3de:	4b4f      	ldr	r3, [pc, #316]	@ (800a51c <HAL_RCC_ClockConfig+0x3e4>)
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	4a4e      	ldr	r2, [pc, #312]	@ (800a51c <HAL_RCC_ClockConfig+0x3e4>)
 800a3e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a3e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a3ea:	4b4e      	ldr	r3, [pc, #312]	@ (800a524 <HAL_RCC_ClockConfig+0x3ec>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f003 030f 	and.w	r3, r3, #15
 800a3f2:	683a      	ldr	r2, [r7, #0]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d21d      	bcs.n	800a434 <HAL_RCC_ClockConfig+0x2fc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3f8:	4b4a      	ldr	r3, [pc, #296]	@ (800a524 <HAL_RCC_ClockConfig+0x3ec>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f023 020f 	bic.w	r2, r3, #15
 800a400:	4948      	ldr	r1, [pc, #288]	@ (800a524 <HAL_RCC_ClockConfig+0x3ec>)
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	4313      	orrs	r3, r2
 800a406:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a408:	f7f8 f9b0 	bl	800276c <HAL_GetTick>
 800a40c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a40e:	e00a      	b.n	800a426 <HAL_RCC_ClockConfig+0x2ee>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a410:	f7f8 f9ac 	bl	800276c <HAL_GetTick>
 800a414:	4602      	mov	r2, r0
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a41e:	4293      	cmp	r3, r2
 800a420:	d901      	bls.n	800a426 <HAL_RCC_ClockConfig+0x2ee>
      {
        return HAL_TIMEOUT;
 800a422:	2303      	movs	r3, #3
 800a424:	e075      	b.n	800a512 <HAL_RCC_ClockConfig+0x3da>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a426:	4b3f      	ldr	r3, [pc, #252]	@ (800a524 <HAL_RCC_ClockConfig+0x3ec>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 030f 	and.w	r3, r3, #15
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	429a      	cmp	r2, r3
 800a432:	d1ed      	bne.n	800a410 <HAL_RCC_ClockConfig+0x2d8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d025      	beq.n	800a48c <HAL_RCC_ClockConfig+0x354>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d018      	beq.n	800a47a <HAL_RCC_ClockConfig+0x342>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a450:	d013      	beq.n	800a47a <HAL_RCC_ClockConfig+0x342>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a45a:	d00e      	beq.n	800a47a <HAL_RCC_ClockConfig+0x342>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a464:	d009      	beq.n	800a47a <HAL_RCC_ClockConfig+0x342>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a46e:	d004      	beq.n	800a47a <HAL_RCC_ClockConfig+0x342>
 800a470:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 800a474:	482a      	ldr	r0, [pc, #168]	@ (800a520 <HAL_RCC_ClockConfig+0x3e8>)
 800a476:	f7f7 fed5 	bl	8002224 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a47a:	4b28      	ldr	r3, [pc, #160]	@ (800a51c <HAL_RCC_ClockConfig+0x3e4>)
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	4925      	ldr	r1, [pc, #148]	@ (800a51c <HAL_RCC_ClockConfig+0x3e4>)
 800a488:	4313      	orrs	r3, r2
 800a48a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0308 	and.w	r3, r3, #8
 800a494:	2b00      	cmp	r3, #0
 800a496:	d026      	beq.n	800a4e6 <HAL_RCC_ClockConfig+0x3ae>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d018      	beq.n	800a4d2 <HAL_RCC_ClockConfig+0x39a>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4a8:	d013      	beq.n	800a4d2 <HAL_RCC_ClockConfig+0x39a>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a4b2:	d00e      	beq.n	800a4d2 <HAL_RCC_ClockConfig+0x39a>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a4bc:	d009      	beq.n	800a4d2 <HAL_RCC_ClockConfig+0x39a>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a4c6:	d004      	beq.n	800a4d2 <HAL_RCC_ClockConfig+0x39a>
 800a4c8:	f240 31a3 	movw	r1, #931	@ 0x3a3
 800a4cc:	4814      	ldr	r0, [pc, #80]	@ (800a520 <HAL_RCC_ClockConfig+0x3e8>)
 800a4ce:	f7f7 fea9 	bl	8002224 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a4d2:	4b12      	ldr	r3, [pc, #72]	@ (800a51c <HAL_RCC_ClockConfig+0x3e4>)
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	00db      	lsls	r3, r3, #3
 800a4e0:	490e      	ldr	r1, [pc, #56]	@ (800a51c <HAL_RCC_ClockConfig+0x3e4>)
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a4e6:	f000 f8b9 	bl	800a65c <HAL_RCC_GetSysClockFreq>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	4b0b      	ldr	r3, [pc, #44]	@ (800a51c <HAL_RCC_ClockConfig+0x3e4>)
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	091b      	lsrs	r3, r3, #4
 800a4f2:	f003 030f 	and.w	r3, r3, #15
 800a4f6:	490c      	ldr	r1, [pc, #48]	@ (800a528 <HAL_RCC_ClockConfig+0x3f0>)
 800a4f8:	5ccb      	ldrb	r3, [r1, r3]
 800a4fa:	f003 031f 	and.w	r3, r3, #31
 800a4fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a502:	4a0a      	ldr	r2, [pc, #40]	@ (800a52c <HAL_RCC_ClockConfig+0x3f4>)
 800a504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a506:	4b0a      	ldr	r3, [pc, #40]	@ (800a530 <HAL_RCC_ClockConfig+0x3f8>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7f8 f8e2 	bl	80026d4 <HAL_InitTick>
 800a510:	4603      	mov	r3, r0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3718      	adds	r7, #24
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	40021000 	.word	0x40021000
 800a520:	080142cc 	.word	0x080142cc
 800a524:	40022000 	.word	0x40022000
 800a528:	080144dc 	.word	0x080144dc
 800a52c:	20000000 	.word	0x20000000
 800a530:	20000004 	.word	0x20000004

0800a534 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b08c      	sub	sp, #48	@ 0x30
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
  uint32_t mcoindex;
  uint32_t mco_gpio_index;
  GPIO_TypeDef * mco_gpio_port;

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a546:	d008      	beq.n	800a55a <HAL_RCC_MCOConfig+0x26>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	4a41      	ldr	r2, [pc, #260]	@ (800a650 <HAL_RCC_MCOConfig+0x11c>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d004      	beq.n	800a55a <HAL_RCC_MCOConfig+0x26>
 800a550:	f240 31ea 	movw	r1, #1002	@ 0x3ea
 800a554:	483f      	ldr	r0, [pc, #252]	@ (800a654 <HAL_RCC_MCOConfig+0x120>)
 800a556:	f7f7 fe65 	bl	8002224 <assert_failed>

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 800a55a:	2302      	movs	r3, #2
 800a55c:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a55e:	2303      	movs	r3, #3
 800a560:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 800a562:	2300      	movs	r3, #0
 800a564:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a56c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	0c1b      	lsrs	r3, r3, #16
 800a572:	f003 030f 	and.w	r3, r3, #15
 800a576:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 800a57a:	029b      	lsls	r3, r3, #10
 800a57c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	0c1b      	lsrs	r3, r3, #16
 800a582:	f003 030f 	and.w	r3, r3, #15
 800a586:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800a588:	4b33      	ldr	r3, [pc, #204]	@ (800a658 <HAL_RCC_MCOConfig+0x124>)
 800a58a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a58c:	2101      	movs	r1, #1
 800a58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a590:	fa01 f303 	lsl.w	r3, r1, r3
 800a594:	4930      	ldr	r1, [pc, #192]	@ (800a658 <HAL_RCC_MCOConfig+0x124>)
 800a596:	4313      	orrs	r3, r2
 800a598:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	0d1b      	lsrs	r3, r3, #20
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800a5a8:	f107 0310 	add.w	r3, r7, #16
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5b0:	f7fb fcc2 	bl	8005f38 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 800a5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d145      	bne.n	800a646 <HAL_RCC_MCOConfig+0x112>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d014      	beq.n	800a5ea <HAL_RCC_MCOConfig+0xb6>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5c6:	d010      	beq.n	800a5ea <HAL_RCC_MCOConfig+0xb6>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5ce:	d00c      	beq.n	800a5ea <HAL_RCC_MCOConfig+0xb6>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a5d6:	d008      	beq.n	800a5ea <HAL_RCC_MCOConfig+0xb6>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5de:	d004      	beq.n	800a5ea <HAL_RCC_MCOConfig+0xb6>
 800a5e0:	f240 4102 	movw	r1, #1026	@ 0x402
 800a5e4:	481b      	ldr	r0, [pc, #108]	@ (800a654 <HAL_RCC_MCOConfig+0x120>)
 800a5e6:	f7f7 fe1d 	bl	8002224 <assert_failed>
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d020      	beq.n	800a632 <HAL_RCC_MCOConfig+0xfe>
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a5f6:	d01c      	beq.n	800a632 <HAL_RCC_MCOConfig+0xfe>
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a5fe:	d018      	beq.n	800a632 <HAL_RCC_MCOConfig+0xfe>
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a606:	d014      	beq.n	800a632 <HAL_RCC_MCOConfig+0xfe>
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a60e:	d010      	beq.n	800a632 <HAL_RCC_MCOConfig+0xfe>
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 800a616:	d00c      	beq.n	800a632 <HAL_RCC_MCOConfig+0xfe>
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 800a61e:	d008      	beq.n	800a632 <HAL_RCC_MCOConfig+0xfe>
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a626:	d004      	beq.n	800a632 <HAL_RCC_MCOConfig+0xfe>
 800a628:	f240 4103 	movw	r1, #1027	@ 0x403
 800a62c:	4809      	ldr	r0, [pc, #36]	@ (800a654 <HAL_RCC_MCOConfig+0x120>)
 800a62e:	f7f7 fdf9 	bl	8002224 <assert_failed>
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 800a632:	4b09      	ldr	r3, [pc, #36]	@ (800a658 <HAL_RCC_MCOConfig+0x124>)
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a63a:	68b9      	ldr	r1, [r7, #8]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	430b      	orrs	r3, r1
 800a640:	4905      	ldr	r1, [pc, #20]	@ (800a658 <HAL_RCC_MCOConfig+0x124>)
 800a642:	4313      	orrs	r3, r2
 800a644:	608b      	str	r3, [r1, #8]
  }
}
 800a646:	bf00      	nop
 800a648:	3730      	adds	r7, #48	@ 0x30
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	00060400 	.word	0x00060400
 800a654:	080142cc 	.word	0x080142cc
 800a658:	40021000 	.word	0x40021000

0800a65c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b087      	sub	sp, #28
 800a660:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a662:	4b2c      	ldr	r3, [pc, #176]	@ (800a714 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	f003 030c 	and.w	r3, r3, #12
 800a66a:	2b04      	cmp	r3, #4
 800a66c:	d102      	bne.n	800a674 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a66e:	4b2a      	ldr	r3, [pc, #168]	@ (800a718 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a670:	613b      	str	r3, [r7, #16]
 800a672:	e047      	b.n	800a704 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a674:	4b27      	ldr	r3, [pc, #156]	@ (800a714 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	f003 030c 	and.w	r3, r3, #12
 800a67c:	2b08      	cmp	r3, #8
 800a67e:	d102      	bne.n	800a686 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a680:	4b26      	ldr	r3, [pc, #152]	@ (800a71c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a682:	613b      	str	r3, [r7, #16]
 800a684:	e03e      	b.n	800a704 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a686:	4b23      	ldr	r3, [pc, #140]	@ (800a714 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	f003 030c 	and.w	r3, r3, #12
 800a68e:	2b0c      	cmp	r3, #12
 800a690:	d136      	bne.n	800a700 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a692:	4b20      	ldr	r3, [pc, #128]	@ (800a714 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	f003 0303 	and.w	r3, r3, #3
 800a69a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a69c:	4b1d      	ldr	r3, [pc, #116]	@ (800a714 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	091b      	lsrs	r3, r3, #4
 800a6a2:	f003 030f 	and.w	r3, r3, #15
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2b03      	cmp	r3, #3
 800a6ae:	d10c      	bne.n	800a6ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a6b0:	4a1a      	ldr	r2, [pc, #104]	@ (800a71c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6b8:	4a16      	ldr	r2, [pc, #88]	@ (800a714 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a6ba:	68d2      	ldr	r2, [r2, #12]
 800a6bc:	0a12      	lsrs	r2, r2, #8
 800a6be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a6c2:	fb02 f303 	mul.w	r3, r2, r3
 800a6c6:	617b      	str	r3, [r7, #20]
      break;
 800a6c8:	e00c      	b.n	800a6e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a6ca:	4a13      	ldr	r2, [pc, #76]	@ (800a718 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6d2:	4a10      	ldr	r2, [pc, #64]	@ (800a714 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a6d4:	68d2      	ldr	r2, [r2, #12]
 800a6d6:	0a12      	lsrs	r2, r2, #8
 800a6d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a6dc:	fb02 f303 	mul.w	r3, r2, r3
 800a6e0:	617b      	str	r3, [r7, #20]
      break;
 800a6e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a6e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a714 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	0e5b      	lsrs	r3, r3, #25
 800a6ea:	f003 0303 	and.w	r3, r3, #3
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	005b      	lsls	r3, r3, #1
 800a6f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6fc:	613b      	str	r3, [r7, #16]
 800a6fe:	e001      	b.n	800a704 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a700:	2300      	movs	r3, #0
 800a702:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a704:	693b      	ldr	r3, [r7, #16]
}
 800a706:	4618      	mov	r0, r3
 800a708:	371c      	adds	r7, #28
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	40021000 	.word	0x40021000
 800a718:	00f42400 	.word	0x00f42400
 800a71c:	02dc6c00 	.word	0x02dc6c00

0800a720 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a720:	b480      	push	{r7}
 800a722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a724:	4b03      	ldr	r3, [pc, #12]	@ (800a734 <HAL_RCC_GetHCLKFreq+0x14>)
 800a726:	681b      	ldr	r3, [r3, #0]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	20000000 	.word	0x20000000

0800a738 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a738:	b480      	push	{r7}
 800a73a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800a73c:	4b05      	ldr	r3, [pc, #20]	@ (800a754 <HAL_RCC_EnableCSS+0x1c>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a04      	ldr	r2, [pc, #16]	@ (800a754 <HAL_RCC_EnableCSS+0x1c>)
 800a742:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a746:	6013      	str	r3, [r2, #0]
}
 800a748:	bf00      	nop
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	40021000 	.word	0x40021000

0800a758 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a75c:	4b07      	ldr	r3, [pc, #28]	@ (800a77c <HAL_RCC_NMI_IRQHandler+0x24>)
 800a75e:	69db      	ldr	r3, [r3, #28]
 800a760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a768:	d105      	bne.n	800a776 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a76a:	f000 f809 	bl	800a780 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a76e:	4b03      	ldr	r3, [pc, #12]	@ (800a77c <HAL_RCC_NMI_IRQHandler+0x24>)
 800a770:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a774:	621a      	str	r2, [r3, #32]
  }
}
 800a776:	bf00      	nop
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	40021000 	.word	0x40021000

0800a780 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a780:	b480      	push	{r7}
 800a782:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800a784:	bf00      	nop
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
	...

0800a790 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a790:	b480      	push	{r7}
 800a792:	b087      	sub	sp, #28
 800a794:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a796:	4b1e      	ldr	r3, [pc, #120]	@ (800a810 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	f003 0303 	and.w	r3, r3, #3
 800a79e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a7a0:	4b1b      	ldr	r3, [pc, #108]	@ (800a810 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	091b      	lsrs	r3, r3, #4
 800a7a6:	f003 030f 	and.w	r3, r3, #15
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	2b03      	cmp	r3, #3
 800a7b2:	d10c      	bne.n	800a7ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a7b4:	4a17      	ldr	r2, [pc, #92]	@ (800a814 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7bc:	4a14      	ldr	r2, [pc, #80]	@ (800a810 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a7be:	68d2      	ldr	r2, [r2, #12]
 800a7c0:	0a12      	lsrs	r2, r2, #8
 800a7c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a7c6:	fb02 f303 	mul.w	r3, r2, r3
 800a7ca:	617b      	str	r3, [r7, #20]
    break;
 800a7cc:	e00c      	b.n	800a7e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a7ce:	4a12      	ldr	r2, [pc, #72]	@ (800a818 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7d6:	4a0e      	ldr	r2, [pc, #56]	@ (800a810 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a7d8:	68d2      	ldr	r2, [r2, #12]
 800a7da:	0a12      	lsrs	r2, r2, #8
 800a7dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a7e0:	fb02 f303 	mul.w	r3, r2, r3
 800a7e4:	617b      	str	r3, [r7, #20]
    break;
 800a7e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a7e8:	4b09      	ldr	r3, [pc, #36]	@ (800a810 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	0e5b      	lsrs	r3, r3, #25
 800a7ee:	f003 0303 	and.w	r3, r3, #3
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a7f8:	697a      	ldr	r2, [r7, #20]
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a800:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a802:	687b      	ldr	r3, [r7, #4]
}
 800a804:	4618      	mov	r0, r3
 800a806:	371c      	adds	r7, #28
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr
 800a810:	40021000 	.word	0x40021000
 800a814:	02dc6c00 	.word	0x02dc6c00
 800a818:	00f42400 	.word	0x00f42400

0800a81c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a824:	2300      	movs	r3, #0
 800a826:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a828:	2300      	movs	r3, #0
 800a82a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 0301 	and.w	r3, r3, #1
 800a834:	2b00      	cmp	r3, #0
 800a836:	d175      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 0302 	and.w	r3, r3, #2
 800a840:	2b00      	cmp	r3, #0
 800a842:	d16f      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d169      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 0308 	and.w	r3, r3, #8
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d163      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0310 	and.w	r3, r3, #16
 800a864:	2b00      	cmp	r3, #0
 800a866:	d15d      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 0320 	and.w	r3, r3, #32
 800a870:	2b00      	cmp	r3, #0
 800a872:	d157      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d151      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d14b      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a894:	2b00      	cmp	r3, #0
 800a896:	d145      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d13f      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d139      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d133      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d12d      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d127      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d121      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d11b      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d115      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10f      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d109      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d103      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800a91c:	2183      	movs	r1, #131	@ 0x83
 800a91e:	4855      	ldr	r0, [pc, #340]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a920:	f7f7 fc80 	bl	8002224 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f000 80b2 	beq.w	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a932:	2300      	movs	r3, #0
 800a934:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d012      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a946:	d00d      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a94c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a950:	d008      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a956:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a95a:	d003      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800a95c:	218b      	movs	r1, #139	@ 0x8b
 800a95e:	4845      	ldr	r0, [pc, #276]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a960:	f7f7 fc60 	bl	8002224 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a964:	4b44      	ldr	r3, [pc, #272]	@ (800aa78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10d      	bne.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a970:	4b41      	ldr	r3, [pc, #260]	@ (800aa78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a974:	4a40      	ldr	r2, [pc, #256]	@ (800aa78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a97a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a97c:	4b3e      	ldr	r3, [pc, #248]	@ (800aa78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a97e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a984:	60bb      	str	r3, [r7, #8]
 800a986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a988:	2301      	movs	r3, #1
 800a98a:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a98c:	4b3b      	ldr	r3, [pc, #236]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a3a      	ldr	r2, [pc, #232]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a996:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a998:	f7f7 fee8 	bl	800276c <HAL_GetTick>
 800a99c:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a99e:	e009      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9a0:	f7f7 fee4 	bl	800276c <HAL_GetTick>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	d902      	bls.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        ret = HAL_TIMEOUT;
 800a9ae:	2303      	movs	r3, #3
 800a9b0:	74fb      	strb	r3, [r7, #19]
        break;
 800a9b2:	e005      	b.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9b4:	4b31      	ldr	r3, [pc, #196]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d0ef      	beq.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x184>
      }
    }

    if(ret == HAL_OK)
 800a9c0:	7cfb      	ldrb	r3, [r7, #19]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d15c      	bne.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x264>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a9c6:	4b2c      	ldr	r3, [pc, #176]	@ (800aa78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a9c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9d0:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d01e      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9dc:	697a      	ldr	r2, [r7, #20]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d019      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a9e2:	4b25      	ldr	r3, [pc, #148]	@ (800aa78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a9ee:	4b22      	ldr	r3, [pc, #136]	@ (800aa78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9f4:	4a20      	ldr	r2, [pc, #128]	@ (800aa78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a9f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a9fe:	4b1e      	ldr	r3, [pc, #120]	@ (800aa78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800aa00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa04:	4a1c      	ldr	r2, [pc, #112]	@ (800aa78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800aa06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aa0e:	4a1a      	ldr	r2, [pc, #104]	@ (800aa78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d016      	beq.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa20:	f7f7 fea4 	bl	800276c <HAL_GetTick>
 800aa24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa26:	e00b      	b.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa28:	f7f7 fea0 	bl	800276c <HAL_GetTick>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d902      	bls.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	74fb      	strb	r3, [r7, #19]
            break;
 800aa3e:	e006      	b.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa40:	4b0d      	ldr	r3, [pc, #52]	@ (800aa78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800aa42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa46:	f003 0302 	and.w	r3, r3, #2
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d0ec      	beq.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }
      
      if(ret == HAL_OK)
 800aa4e:	7cfb      	ldrb	r3, [r7, #19]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d10b      	bne.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa54:	4b08      	ldr	r3, [pc, #32]	@ (800aa78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800aa56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa5a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa62:	4905      	ldr	r1, [pc, #20]	@ (800aa78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800aa64:	4313      	orrs	r3, r2
 800aa66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800aa6a:	e00b      	b.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x268>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aa6c:	7cfb      	ldrb	r3, [r7, #19]
 800aa6e:	74bb      	strb	r3, [r7, #18]
 800aa70:	e008      	b.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800aa72:	bf00      	nop
 800aa74:	0801433c 	.word	0x0801433c
 800aa78:	40021000 	.word	0x40021000
 800aa7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa80:	7cfb      	ldrb	r3, [r7, #19]
 800aa82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa84:	7c7b      	ldrb	r3, [r7, #17]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d105      	bne.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa8a:	4b9a      	ldr	r3, [pc, #616]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800aa8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa8e:	4a99      	ldr	r2, [pc, #612]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800aa90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa94:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f003 0301 	and.w	r3, r3, #1
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d01e      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00f      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d00b      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	2b03      	cmp	r3, #3
 800aab8:	d007      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	d003      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800aac2:	21e0      	movs	r1, #224	@ 0xe0
 800aac4:	488c      	ldr	r0, [pc, #560]	@ (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800aac6:	f7f7 fbad 	bl	8002224 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aaca:	4b8a      	ldr	r3, [pc, #552]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800aacc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aad0:	f023 0203 	bic.w	r2, r3, #3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	4986      	ldr	r1, [pc, #536]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800aada:	4313      	orrs	r3, r2
 800aadc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 0302 	and.w	r3, r3, #2
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d01e      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00f      	beq.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	2b04      	cmp	r3, #4
 800aafa:	d00b      	beq.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	2b0c      	cmp	r3, #12
 800ab02:	d007      	beq.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	2b08      	cmp	r3, #8
 800ab0a:	d003      	beq.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800ab0c:	21ea      	movs	r1, #234	@ 0xea
 800ab0e:	487a      	ldr	r0, [pc, #488]	@ (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800ab10:	f7f7 fb88 	bl	8002224 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ab14:	4b77      	ldr	r3, [pc, #476]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800ab16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab1a:	f023 020c 	bic.w	r2, r3, #12
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	4974      	ldr	r1, [pc, #464]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800ab24:	4313      	orrs	r3, r2
 800ab26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f003 0304 	and.w	r3, r3, #4
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d01e      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00f      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	2b10      	cmp	r3, #16
 800ab44:	d00b      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	2b30      	cmp	r3, #48	@ 0x30
 800ab4c:	d007      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	2b20      	cmp	r3, #32
 800ab54:	d003      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ab56:	21f4      	movs	r1, #244	@ 0xf4
 800ab58:	4867      	ldr	r0, [pc, #412]	@ (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800ab5a:	f7f7 fb63 	bl	8002224 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ab5e:	4b65      	ldr	r3, [pc, #404]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800ab60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab64:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	4961      	ldr	r1, [pc, #388]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 0308 	and.w	r3, r3, #8
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d01e      	beq.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x3a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00f      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	2b40      	cmp	r3, #64	@ 0x40
 800ab8e:	d00b      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab96:	d007      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	2b80      	cmp	r3, #128	@ 0x80
 800ab9e:	d003      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800aba0:	21ff      	movs	r1, #255	@ 0xff
 800aba2:	4855      	ldr	r0, [pc, #340]	@ (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800aba4:	f7f7 fb3e 	bl	8002224 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800aba8:	4b52      	ldr	r3, [pc, #328]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800abaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	494f      	ldr	r1, [pc, #316]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800abb8:	4313      	orrs	r3, r2
 800abba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 0310 	and.w	r3, r3, #16
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d022      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d013      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	695b      	ldr	r3, [r3, #20]
 800abd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abda:	d00e      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	695b      	ldr	r3, [r3, #20]
 800abe0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abe4:	d009      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	695b      	ldr	r3, [r3, #20]
 800abea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abee:	d004      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800abf0:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800abf4:	4840      	ldr	r0, [pc, #256]	@ (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800abf6:	f7f7 fb15 	bl	8002224 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800abfa:	4b3e      	ldr	r3, [pc, #248]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800abfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	695b      	ldr	r3, [r3, #20]
 800ac08:	493a      	ldr	r1, [pc, #232]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0320 	and.w	r3, r3, #32
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d022      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	699b      	ldr	r3, [r3, #24]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d013      	beq.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	699b      	ldr	r3, [r3, #24]
 800ac28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac2c:	d00e      	beq.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	699b      	ldr	r3, [r3, #24]
 800ac32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ac36:	d009      	beq.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	699b      	ldr	r3, [r3, #24]
 800ac3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac40:	d004      	beq.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800ac42:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800ac46:	482c      	ldr	r0, [pc, #176]	@ (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800ac48:	f7f7 faec 	bl	8002224 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ac4c:	4b29      	ldr	r3, [pc, #164]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800ac4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	699b      	ldr	r3, [r3, #24]
 800ac5a:	4926      	ldr	r1, [pc, #152]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d01d      	beq.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	69db      	ldr	r3, [r3, #28]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00e      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	69db      	ldr	r3, [r3, #28]
 800ac7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac7e:	d009      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	69db      	ldr	r3, [r3, #28]
 800ac84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac88:	d004      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ac8a:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800ac8e:	481a      	ldr	r0, [pc, #104]	@ (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800ac90:	f7f7 fac8 	bl	8002224 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ac94:	4b17      	ldr	r3, [pc, #92]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800ac96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac9a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	69db      	ldr	r3, [r3, #28]
 800aca2:	4914      	ldr	r1, [pc, #80]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800aca4:	4313      	orrs	r3, r2
 800aca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d022      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00e      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800acc6:	d009      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6a1b      	ldr	r3, [r3, #32]
 800accc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800acd0:	d004      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800acd2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800acd6:	4808      	ldr	r0, [pc, #32]	@ (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800acd8:	f7f7 faa4 	bl	8002224 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800acdc:	4b05      	ldr	r3, [pc, #20]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800acde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ace2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a1b      	ldr	r3, [r3, #32]
 800acea:	4902      	ldr	r1, [pc, #8]	@ (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800acec:	4313      	orrs	r3, r2
 800acee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800acf2:	e003      	b.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800acf4:	40021000 	.word	0x40021000
 800acf8:	0801433c 	.word	0x0801433c
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d01d      	beq.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00e      	beq.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x512>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad18:	d009      	beq.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x512>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad22:	d004      	beq.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x512>
 800ad24:	f44f 719b 	mov.w	r1, #310	@ 0x136
 800ad28:	489e      	ldr	r0, [pc, #632]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ad2a:	f7f7 fa7b 	bl	8002224 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ad2e:	4b9e      	ldr	r3, [pc, #632]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800ad30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad3c:	499a      	ldr	r1, [pc, #616]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d01b      	beq.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x56c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00c      	beq.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d008      	beq.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	d004      	beq.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800ad68:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 800ad6c:	488d      	ldr	r0, [pc, #564]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ad6e:	f7f7 fa59 	bl	8002224 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ad72:	4b8d      	ldr	r3, [pc, #564]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800ad74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ad78:	f023 0203 	bic.w	r2, r3, #3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad80:	4989      	ldr	r1, [pc, #548]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800ad82:	4313      	orrs	r3, r2
 800ad84:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d022      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d013      	beq.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ada4:	d00e      	beq.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adaa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800adae:	d009      	beq.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800adb8:	d004      	beq.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800adba:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 800adbe:	4879      	ldr	r0, [pc, #484]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800adc0:	f7f7 fa30 	bl	8002224 <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800adc4:	4b78      	ldr	r3, [pc, #480]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800adc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adca:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800add2:	4975      	ldr	r1, [pc, #468]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800add4:	4313      	orrs	r3, r2
 800add6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d02d      	beq.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adea:	2b00      	cmp	r3, #0
 800adec:	d013      	beq.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800adf6:	d00e      	beq.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae00:	d009      	beq.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ae0a:	d004      	beq.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800ae0c:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 800ae10:	4864      	ldr	r0, [pc, #400]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ae12:	f7f7 fa07 	bl	8002224 <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae16:	4b64      	ldr	r3, [pc, #400]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800ae18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae1c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae24:	4960      	ldr	r1, [pc, #384]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800ae26:	4313      	orrs	r3, r2
 800ae28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae34:	d105      	bne.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x626>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ae36:	4b5c      	ldr	r3, [pc, #368]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	4a5b      	ldr	r2, [pc, #364]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800ae3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae40:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d02d      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x68e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d013      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae5e:	d00e      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae68:	d009      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae6e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ae72:	d004      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ae74:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800ae78:	484a      	ldr	r0, [pc, #296]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ae7a:	f7f7 f9d3 	bl	8002224 <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ae7e:	4b4a      	ldr	r3, [pc, #296]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800ae80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae84:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae8c:	4946      	ldr	r1, [pc, #280]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae9c:	d105      	bne.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ae9e:	4b42      	ldr	r3, [pc, #264]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	4a41      	ldr	r2, [pc, #260]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800aea4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aea8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d028      	beq.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00e      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aec2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aec6:	d009      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aecc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aed0:	d004      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800aed2:	f240 1179 	movw	r1, #377	@ 0x179
 800aed6:	4833      	ldr	r0, [pc, #204]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800aed8:	f7f7 f9a4 	bl	8002224 <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aedc:	4b32      	ldr	r3, [pc, #200]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800aede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aee2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeea:	492f      	ldr	r1, [pc, #188]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800aeec:	4313      	orrs	r3, r2
 800aeee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aefa:	d105      	bne.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aefc:	4b2a      	ldr	r3, [pc, #168]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	4a29      	ldr	r2, [pc, #164]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800af02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af10:	2b00      	cmp	r3, #0
 800af12:	d023      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x740>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d009      	beq.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af24:	d004      	beq.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800af26:	f240 118b 	movw	r1, #395	@ 0x18b
 800af2a:	481e      	ldr	r0, [pc, #120]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800af2c:	f7f7 f97a 	bl	8002224 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800af30:	4b1d      	ldr	r3, [pc, #116]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800af32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af3e:	491a      	ldr	r1, [pc, #104]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800af40:	4313      	orrs	r3, r2
 800af42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af4e:	d105      	bne.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af50:	4b15      	ldr	r3, [pc, #84]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	4a14      	ldr	r2, [pc, #80]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800af56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af5a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af64:	2b00      	cmp	r3, #0
 800af66:	d028      	beq.n	800afba <HAL_RCCEx_PeriphCLKConfig+0x79e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d009      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af78:	d004      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800af7a:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800af7e:	4809      	ldr	r0, [pc, #36]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800af80:	f7f7 f950 	bl	8002224 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800af84:	4b08      	ldr	r3, [pc, #32]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800af86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af92:	4905      	ldr	r1, [pc, #20]	@ (800afa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800af94:	4313      	orrs	r3, r2
 800af96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800afa2:	e003      	b.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x790>
 800afa4:	0801433c 	.word	0x0801433c
 800afa8:	40021000 	.word	0x40021000
 800afac:	d105      	bne.n	800afba <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800afae:	4b4c      	ldr	r3, [pc, #304]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	4a4b      	ldr	r2, [pc, #300]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800afb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800afb8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d028      	beq.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00e      	beq.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afd6:	d009      	beq.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afe0:	d004      	beq.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800afe2:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 800afe6:	483f      	ldr	r0, [pc, #252]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800afe8:	f7f7 f91c 	bl	8002224 <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800afec:	4b3c      	ldr	r3, [pc, #240]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800afee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aff2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800affa:	4939      	ldr	r1, [pc, #228]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800affc:	4313      	orrs	r3, r2
 800affe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b006:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b00a:	d105      	bne.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b00c:	4b34      	ldr	r3, [pc, #208]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	4a33      	ldr	r2, [pc, #204]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b016:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b020:	2b00      	cmp	r3, #0
 800b022:	d028      	beq.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x85a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00e      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b034:	d009      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b03a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b03e:	d004      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800b040:	f240 11b9 	movw	r1, #441	@ 0x1b9
 800b044:	4827      	ldr	r0, [pc, #156]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800b046:	f7f7 f8ed 	bl	8002224 <assert_failed>

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b04a:	4b25      	ldr	r3, [pc, #148]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b050:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b058:	4921      	ldr	r1, [pc, #132]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b05a:	4313      	orrs	r3, r2
 800b05c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b068:	d105      	bne.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b06a:	4b1d      	ldr	r3, [pc, #116]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	4a1c      	ldr	r2, [pc, #112]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b074:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d028      	beq.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b086:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b08a:	d00d      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b090:	2b00      	cmp	r3, #0
 800b092:	d009      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b098:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b09c:	d004      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800b09e:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 800b0a2:	4810      	ldr	r0, [pc, #64]	@ (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800b0a4:	f7f7 f8be 	bl	8002224 <assert_failed>

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b0a8:	4b0d      	ldr	r3, [pc, #52]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b0aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b0ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0b6:	490a      	ldr	r1, [pc, #40]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b0c6:	d105      	bne.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b0c8:	4b05      	ldr	r3, [pc, #20]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	4a04      	ldr	r2, [pc, #16]	@ (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b0ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b0d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b0d4:	7cbb      	ldrb	r3, [r7, #18]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3718      	adds	r7, #24
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	40021000 	.word	0x40021000
 800b0e4:	0801433c 	.word	0x0801433c

0800b0e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e0eb      	b.n	800b2d2 <HAL_TIM_Base_Init+0x1ea>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a77      	ldr	r2, [pc, #476]	@ (800b2dc <HAL_TIM_Base_Init+0x1f4>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d03b      	beq.n	800b17c <HAL_TIM_Base_Init+0x94>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b10c:	d036      	beq.n	800b17c <HAL_TIM_Base_Init+0x94>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a73      	ldr	r2, [pc, #460]	@ (800b2e0 <HAL_TIM_Base_Init+0x1f8>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d031      	beq.n	800b17c <HAL_TIM_Base_Init+0x94>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a71      	ldr	r2, [pc, #452]	@ (800b2e4 <HAL_TIM_Base_Init+0x1fc>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d02c      	beq.n	800b17c <HAL_TIM_Base_Init+0x94>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a70      	ldr	r2, [pc, #448]	@ (800b2e8 <HAL_TIM_Base_Init+0x200>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d027      	beq.n	800b17c <HAL_TIM_Base_Init+0x94>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a6e      	ldr	r2, [pc, #440]	@ (800b2ec <HAL_TIM_Base_Init+0x204>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d022      	beq.n	800b17c <HAL_TIM_Base_Init+0x94>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a6d      	ldr	r2, [pc, #436]	@ (800b2f0 <HAL_TIM_Base_Init+0x208>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d01d      	beq.n	800b17c <HAL_TIM_Base_Init+0x94>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a6b      	ldr	r2, [pc, #428]	@ (800b2f4 <HAL_TIM_Base_Init+0x20c>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d018      	beq.n	800b17c <HAL_TIM_Base_Init+0x94>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a6a      	ldr	r2, [pc, #424]	@ (800b2f8 <HAL_TIM_Base_Init+0x210>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d013      	beq.n	800b17c <HAL_TIM_Base_Init+0x94>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a68      	ldr	r2, [pc, #416]	@ (800b2fc <HAL_TIM_Base_Init+0x214>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d00e      	beq.n	800b17c <HAL_TIM_Base_Init+0x94>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a67      	ldr	r2, [pc, #412]	@ (800b300 <HAL_TIM_Base_Init+0x218>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d009      	beq.n	800b17c <HAL_TIM_Base_Init+0x94>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a65      	ldr	r2, [pc, #404]	@ (800b304 <HAL_TIM_Base_Init+0x21c>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d004      	beq.n	800b17c <HAL_TIM_Base_Init+0x94>
 800b172:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800b176:	4864      	ldr	r0, [pc, #400]	@ (800b308 <HAL_TIM_Base_Init+0x220>)
 800b178:	f7f7 f854 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d014      	beq.n	800b1ae <HAL_TIM_Base_Init+0xc6>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	2b10      	cmp	r3, #16
 800b18a:	d010      	beq.n	800b1ae <HAL_TIM_Base_Init+0xc6>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	2b20      	cmp	r3, #32
 800b192:	d00c      	beq.n	800b1ae <HAL_TIM_Base_Init+0xc6>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	2b40      	cmp	r3, #64	@ 0x40
 800b19a:	d008      	beq.n	800b1ae <HAL_TIM_Base_Init+0xc6>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	2b60      	cmp	r3, #96	@ 0x60
 800b1a2:	d004      	beq.n	800b1ae <HAL_TIM_Base_Init+0xc6>
 800b1a4:	f240 1123 	movw	r1, #291	@ 0x123
 800b1a8:	4857      	ldr	r0, [pc, #348]	@ (800b308 <HAL_TIM_Base_Init+0x220>)
 800b1aa:	f7f7 f83b 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00e      	beq.n	800b1d4 <HAL_TIM_Base_Init+0xec>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1be:	d009      	beq.n	800b1d4 <HAL_TIM_Base_Init+0xec>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	691b      	ldr	r3, [r3, #16]
 800b1c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1c8:	d004      	beq.n	800b1d4 <HAL_TIM_Base_Init+0xec>
 800b1ca:	f44f 7192 	mov.w	r1, #292	@ 0x124
 800b1ce:	484e      	ldr	r0, [pc, #312]	@ (800b308 <HAL_TIM_Base_Init+0x220>)
 800b1d0:	f7f7 f828 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1dc:	d004      	beq.n	800b1e8 <HAL_TIM_Base_Init+0x100>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a41      	ldr	r2, [pc, #260]	@ (800b2e8 <HAL_TIM_Base_Init+0x200>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d107      	bne.n	800b1f8 <HAL_TIM_Base_Init+0x110>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	bf14      	ite	ne
 800b1f0:	2301      	movne	r3, #1
 800b1f2:	2300      	moveq	r3, #0
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	e00e      	b.n	800b216 <HAL_TIM_Base_Init+0x12e>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d006      	beq.n	800b20e <HAL_TIM_Base_Init+0x126>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b208:	d201      	bcs.n	800b20e <HAL_TIM_Base_Init+0x126>
 800b20a:	2301      	movs	r3, #1
 800b20c:	e000      	b.n	800b210 <HAL_TIM_Base_Init+0x128>
 800b20e:	2300      	movs	r3, #0
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	b2db      	uxtb	r3, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	d104      	bne.n	800b224 <HAL_TIM_Base_Init+0x13c>
 800b21a:	f240 1125 	movw	r1, #293	@ 0x125
 800b21e:	483a      	ldr	r0, [pc, #232]	@ (800b308 <HAL_TIM_Base_Init+0x220>)
 800b220:	f7f7 f800 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	699b      	ldr	r3, [r3, #24]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d008      	beq.n	800b23e <HAL_TIM_Base_Init+0x156>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	2b80      	cmp	r3, #128	@ 0x80
 800b232:	d004      	beq.n	800b23e <HAL_TIM_Base_Init+0x156>
 800b234:	f44f 7193 	mov.w	r1, #294	@ 0x126
 800b238:	4833      	ldr	r0, [pc, #204]	@ (800b308 <HAL_TIM_Base_Init+0x220>)
 800b23a:	f7f6 fff3 	bl	8002224 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b244:	b2db      	uxtb	r3, r3
 800b246:	2b00      	cmp	r3, #0
 800b248:	d106      	bne.n	800b258 <HAL_TIM_Base_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7f7 f9d8 	bl	8002608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2202      	movs	r2, #2
 800b25c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3304      	adds	r3, #4
 800b268:	4619      	mov	r1, r3
 800b26a:	4610      	mov	r0, r2
 800b26c:	f001 feb2 	bl	800cfd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2201      	movs	r2, #1
 800b284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3708      	adds	r7, #8
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	40012c00 	.word	0x40012c00
 800b2e0:	40000400 	.word	0x40000400
 800b2e4:	40000800 	.word	0x40000800
 800b2e8:	40000c00 	.word	0x40000c00
 800b2ec:	40001000 	.word	0x40001000
 800b2f0:	40001400 	.word	0x40001400
 800b2f4:	40013400 	.word	0x40013400
 800b2f8:	40014000 	.word	0x40014000
 800b2fc:	40014400 	.word	0x40014400
 800b300:	40014800 	.word	0x40014800
 800b304:	40015000 	.word	0x40015000
 800b308:	080143b0 	.word	0x080143b0

0800b30c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a4f      	ldr	r2, [pc, #316]	@ (800b458 <HAL_TIM_Base_Start_IT+0x14c>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d03b      	beq.n	800b396 <HAL_TIM_Base_Start_IT+0x8a>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b326:	d036      	beq.n	800b396 <HAL_TIM_Base_Start_IT+0x8a>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a4b      	ldr	r2, [pc, #300]	@ (800b45c <HAL_TIM_Base_Start_IT+0x150>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d031      	beq.n	800b396 <HAL_TIM_Base_Start_IT+0x8a>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a4a      	ldr	r2, [pc, #296]	@ (800b460 <HAL_TIM_Base_Start_IT+0x154>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d02c      	beq.n	800b396 <HAL_TIM_Base_Start_IT+0x8a>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a48      	ldr	r2, [pc, #288]	@ (800b464 <HAL_TIM_Base_Start_IT+0x158>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d027      	beq.n	800b396 <HAL_TIM_Base_Start_IT+0x8a>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a47      	ldr	r2, [pc, #284]	@ (800b468 <HAL_TIM_Base_Start_IT+0x15c>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d022      	beq.n	800b396 <HAL_TIM_Base_Start_IT+0x8a>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a45      	ldr	r2, [pc, #276]	@ (800b46c <HAL_TIM_Base_Start_IT+0x160>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d01d      	beq.n	800b396 <HAL_TIM_Base_Start_IT+0x8a>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a44      	ldr	r2, [pc, #272]	@ (800b470 <HAL_TIM_Base_Start_IT+0x164>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d018      	beq.n	800b396 <HAL_TIM_Base_Start_IT+0x8a>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a42      	ldr	r2, [pc, #264]	@ (800b474 <HAL_TIM_Base_Start_IT+0x168>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d013      	beq.n	800b396 <HAL_TIM_Base_Start_IT+0x8a>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a41      	ldr	r2, [pc, #260]	@ (800b478 <HAL_TIM_Base_Start_IT+0x16c>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d00e      	beq.n	800b396 <HAL_TIM_Base_Start_IT+0x8a>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a3f      	ldr	r2, [pc, #252]	@ (800b47c <HAL_TIM_Base_Start_IT+0x170>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d009      	beq.n	800b396 <HAL_TIM_Base_Start_IT+0x8a>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a3e      	ldr	r2, [pc, #248]	@ (800b480 <HAL_TIM_Base_Start_IT+0x174>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d004      	beq.n	800b396 <HAL_TIM_Base_Start_IT+0x8a>
 800b38c:	f240 11df 	movw	r1, #479	@ 0x1df
 800b390:	483c      	ldr	r0, [pc, #240]	@ (800b484 <HAL_TIM_Base_Start_IT+0x178>)
 800b392:	f7f6 ff47 	bl	8002224 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d001      	beq.n	800b3a6 <HAL_TIM_Base_Start_IT+0x9a>
  {
    return HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e054      	b.n	800b450 <HAL_TIM_Base_Start_IT+0x144>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2202      	movs	r2, #2
 800b3aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68da      	ldr	r2, [r3, #12]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f042 0201 	orr.w	r2, r2, #1
 800b3bc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a25      	ldr	r2, [pc, #148]	@ (800b458 <HAL_TIM_Base_Start_IT+0x14c>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d022      	beq.n	800b40e <HAL_TIM_Base_Start_IT+0x102>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3d0:	d01d      	beq.n	800b40e <HAL_TIM_Base_Start_IT+0x102>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a21      	ldr	r2, [pc, #132]	@ (800b45c <HAL_TIM_Base_Start_IT+0x150>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d018      	beq.n	800b40e <HAL_TIM_Base_Start_IT+0x102>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a1f      	ldr	r2, [pc, #124]	@ (800b460 <HAL_TIM_Base_Start_IT+0x154>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d013      	beq.n	800b40e <HAL_TIM_Base_Start_IT+0x102>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a1e      	ldr	r2, [pc, #120]	@ (800b464 <HAL_TIM_Base_Start_IT+0x158>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d00e      	beq.n	800b40e <HAL_TIM_Base_Start_IT+0x102>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a1e      	ldr	r2, [pc, #120]	@ (800b470 <HAL_TIM_Base_Start_IT+0x164>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d009      	beq.n	800b40e <HAL_TIM_Base_Start_IT+0x102>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a1d      	ldr	r2, [pc, #116]	@ (800b474 <HAL_TIM_Base_Start_IT+0x168>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d004      	beq.n	800b40e <HAL_TIM_Base_Start_IT+0x102>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a1d      	ldr	r2, [pc, #116]	@ (800b480 <HAL_TIM_Base_Start_IT+0x174>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d115      	bne.n	800b43a <HAL_TIM_Base_Start_IT+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	689a      	ldr	r2, [r3, #8]
 800b414:	4b1c      	ldr	r3, [pc, #112]	@ (800b488 <HAL_TIM_Base_Start_IT+0x17c>)
 800b416:	4013      	ands	r3, r2
 800b418:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2b06      	cmp	r3, #6
 800b41e:	d015      	beq.n	800b44c <HAL_TIM_Base_Start_IT+0x140>
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b426:	d011      	beq.n	800b44c <HAL_TIM_Base_Start_IT+0x140>
    {
      __HAL_TIM_ENABLE(htim);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f042 0201 	orr.w	r2, r2, #1
 800b436:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b438:	e008      	b.n	800b44c <HAL_TIM_Base_Start_IT+0x140>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f042 0201 	orr.w	r2, r2, #1
 800b448:	601a      	str	r2, [r3, #0]
 800b44a:	e000      	b.n	800b44e <HAL_TIM_Base_Start_IT+0x142>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b44c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	40012c00 	.word	0x40012c00
 800b45c:	40000400 	.word	0x40000400
 800b460:	40000800 	.word	0x40000800
 800b464:	40000c00 	.word	0x40000c00
 800b468:	40001000 	.word	0x40001000
 800b46c:	40001400 	.word	0x40001400
 800b470:	40013400 	.word	0x40013400
 800b474:	40014000 	.word	0x40014000
 800b478:	40014400 	.word	0x40014400
 800b47c:	40014800 	.word	0x40014800
 800b480:	40015000 	.word	0x40015000
 800b484:	080143b0 	.word	0x080143b0
 800b488:	00010007 	.word	0x00010007

0800b48c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d101      	bne.n	800b49e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	e0eb      	b.n	800b676 <HAL_TIM_PWM_Init+0x1ea>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a77      	ldr	r2, [pc, #476]	@ (800b680 <HAL_TIM_PWM_Init+0x1f4>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d03b      	beq.n	800b520 <HAL_TIM_PWM_Init+0x94>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4b0:	d036      	beq.n	800b520 <HAL_TIM_PWM_Init+0x94>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a73      	ldr	r2, [pc, #460]	@ (800b684 <HAL_TIM_PWM_Init+0x1f8>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d031      	beq.n	800b520 <HAL_TIM_PWM_Init+0x94>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a71      	ldr	r2, [pc, #452]	@ (800b688 <HAL_TIM_PWM_Init+0x1fc>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d02c      	beq.n	800b520 <HAL_TIM_PWM_Init+0x94>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a70      	ldr	r2, [pc, #448]	@ (800b68c <HAL_TIM_PWM_Init+0x200>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d027      	beq.n	800b520 <HAL_TIM_PWM_Init+0x94>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a6e      	ldr	r2, [pc, #440]	@ (800b690 <HAL_TIM_PWM_Init+0x204>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d022      	beq.n	800b520 <HAL_TIM_PWM_Init+0x94>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a6d      	ldr	r2, [pc, #436]	@ (800b694 <HAL_TIM_PWM_Init+0x208>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d01d      	beq.n	800b520 <HAL_TIM_PWM_Init+0x94>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a6b      	ldr	r2, [pc, #428]	@ (800b698 <HAL_TIM_PWM_Init+0x20c>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d018      	beq.n	800b520 <HAL_TIM_PWM_Init+0x94>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a6a      	ldr	r2, [pc, #424]	@ (800b69c <HAL_TIM_PWM_Init+0x210>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d013      	beq.n	800b520 <HAL_TIM_PWM_Init+0x94>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a68      	ldr	r2, [pc, #416]	@ (800b6a0 <HAL_TIM_PWM_Init+0x214>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d00e      	beq.n	800b520 <HAL_TIM_PWM_Init+0x94>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a67      	ldr	r2, [pc, #412]	@ (800b6a4 <HAL_TIM_PWM_Init+0x218>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d009      	beq.n	800b520 <HAL_TIM_PWM_Init+0x94>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a65      	ldr	r2, [pc, #404]	@ (800b6a8 <HAL_TIM_PWM_Init+0x21c>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d004      	beq.n	800b520 <HAL_TIM_PWM_Init+0x94>
 800b516:	f240 513f 	movw	r1, #1343	@ 0x53f
 800b51a:	4864      	ldr	r0, [pc, #400]	@ (800b6ac <HAL_TIM_PWM_Init+0x220>)
 800b51c:	f7f6 fe82 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d014      	beq.n	800b552 <HAL_TIM_PWM_Init+0xc6>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	2b10      	cmp	r3, #16
 800b52e:	d010      	beq.n	800b552 <HAL_TIM_PWM_Init+0xc6>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	2b20      	cmp	r3, #32
 800b536:	d00c      	beq.n	800b552 <HAL_TIM_PWM_Init+0xc6>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	2b40      	cmp	r3, #64	@ 0x40
 800b53e:	d008      	beq.n	800b552 <HAL_TIM_PWM_Init+0xc6>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	2b60      	cmp	r3, #96	@ 0x60
 800b546:	d004      	beq.n	800b552 <HAL_TIM_PWM_Init+0xc6>
 800b548:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 800b54c:	4857      	ldr	r0, [pc, #348]	@ (800b6ac <HAL_TIM_PWM_Init+0x220>)
 800b54e:	f7f6 fe69 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00e      	beq.n	800b578 <HAL_TIM_PWM_Init+0xec>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b562:	d009      	beq.n	800b578 <HAL_TIM_PWM_Init+0xec>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b56c:	d004      	beq.n	800b578 <HAL_TIM_PWM_Init+0xec>
 800b56e:	f240 5141 	movw	r1, #1345	@ 0x541
 800b572:	484e      	ldr	r0, [pc, #312]	@ (800b6ac <HAL_TIM_PWM_Init+0x220>)
 800b574:	f7f6 fe56 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b580:	d004      	beq.n	800b58c <HAL_TIM_PWM_Init+0x100>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a41      	ldr	r2, [pc, #260]	@ (800b68c <HAL_TIM_PWM_Init+0x200>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d107      	bne.n	800b59c <HAL_TIM_PWM_Init+0x110>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	2b00      	cmp	r3, #0
 800b592:	bf14      	ite	ne
 800b594:	2301      	movne	r3, #1
 800b596:	2300      	moveq	r3, #0
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	e00e      	b.n	800b5ba <HAL_TIM_PWM_Init+0x12e>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d006      	beq.n	800b5b2 <HAL_TIM_PWM_Init+0x126>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5ac:	d201      	bcs.n	800b5b2 <HAL_TIM_PWM_Init+0x126>
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e000      	b.n	800b5b4 <HAL_TIM_PWM_Init+0x128>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	f003 0301 	and.w	r3, r3, #1
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d104      	bne.n	800b5c8 <HAL_TIM_PWM_Init+0x13c>
 800b5be:	f240 5142 	movw	r1, #1346	@ 0x542
 800b5c2:	483a      	ldr	r0, [pc, #232]	@ (800b6ac <HAL_TIM_PWM_Init+0x220>)
 800b5c4:	f7f6 fe2e 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d008      	beq.n	800b5e2 <HAL_TIM_PWM_Init+0x156>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	699b      	ldr	r3, [r3, #24]
 800b5d4:	2b80      	cmp	r3, #128	@ 0x80
 800b5d6:	d004      	beq.n	800b5e2 <HAL_TIM_PWM_Init+0x156>
 800b5d8:	f240 5143 	movw	r1, #1347	@ 0x543
 800b5dc:	4833      	ldr	r0, [pc, #204]	@ (800b6ac <HAL_TIM_PWM_Init+0x220>)
 800b5de:	f7f6 fe21 	bl	8002224 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d106      	bne.n	800b5fc <HAL_TIM_PWM_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7f6 ffe6 	bl	80025c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2202      	movs	r2, #2
 800b600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	3304      	adds	r3, #4
 800b60c:	4619      	mov	r1, r3
 800b60e:	4610      	mov	r0, r2
 800b610:	f001 fce0 	bl	800cfd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2201      	movs	r2, #1
 800b618:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2201      	movs	r2, #1
 800b620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2201      	movs	r2, #1
 800b628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	40012c00 	.word	0x40012c00
 800b684:	40000400 	.word	0x40000400
 800b688:	40000800 	.word	0x40000800
 800b68c:	40000c00 	.word	0x40000c00
 800b690:	40001000 	.word	0x40001000
 800b694:	40001400 	.word	0x40001400
 800b698:	40013400 	.word	0x40013400
 800b69c:	40014000 	.word	0x40014000
 800b6a0:	40014400 	.word	0x40014400
 800b6a4:	40014800 	.word	0x40014800
 800b6a8:	40015000 	.word	0x40015000
 800b6ac:	080143b0 	.word	0x080143b0

0800b6b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a8b      	ldr	r2, [pc, #556]	@ (800b8ec <HAL_TIM_PWM_Start+0x23c>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d117      	bne.n	800b6f4 <HAL_TIM_PWM_Start+0x44>
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f000 80aa 	beq.w	800b820 <HAL_TIM_PWM_Start+0x170>
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2b04      	cmp	r3, #4
 800b6d0:	f000 80a6 	beq.w	800b820 <HAL_TIM_PWM_Start+0x170>
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2b08      	cmp	r3, #8
 800b6d8:	f000 80a2 	beq.w	800b820 <HAL_TIM_PWM_Start+0x170>
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	2b0c      	cmp	r3, #12
 800b6e0:	f000 809e 	beq.w	800b820 <HAL_TIM_PWM_Start+0x170>
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	2b10      	cmp	r3, #16
 800b6e8:	f000 809a 	beq.w	800b820 <HAL_TIM_PWM_Start+0x170>
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	2b14      	cmp	r3, #20
 800b6f0:	f000 8096 	beq.w	800b820 <HAL_TIM_PWM_Start+0x170>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6fc:	d10f      	bne.n	800b71e <HAL_TIM_PWM_Start+0x6e>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	f000 808d 	beq.w	800b820 <HAL_TIM_PWM_Start+0x170>
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	2b04      	cmp	r3, #4
 800b70a:	f000 8089 	beq.w	800b820 <HAL_TIM_PWM_Start+0x170>
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	2b08      	cmp	r3, #8
 800b712:	f000 8085 	beq.w	800b820 <HAL_TIM_PWM_Start+0x170>
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	2b0c      	cmp	r3, #12
 800b71a:	f000 8081 	beq.w	800b820 <HAL_TIM_PWM_Start+0x170>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a73      	ldr	r2, [pc, #460]	@ (800b8f0 <HAL_TIM_PWM_Start+0x240>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d10b      	bne.n	800b740 <HAL_TIM_PWM_Start+0x90>
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d078      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b04      	cmp	r3, #4
 800b732:	d075      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	2b08      	cmp	r3, #8
 800b738:	d072      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	2b0c      	cmp	r3, #12
 800b73e:	d06f      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a6b      	ldr	r2, [pc, #428]	@ (800b8f4 <HAL_TIM_PWM_Start+0x244>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d10b      	bne.n	800b762 <HAL_TIM_PWM_Start+0xb2>
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d067      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	2b04      	cmp	r3, #4
 800b754:	d064      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	2b08      	cmp	r3, #8
 800b75a:	d061      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2b0c      	cmp	r3, #12
 800b760:	d05e      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a64      	ldr	r2, [pc, #400]	@ (800b8f8 <HAL_TIM_PWM_Start+0x248>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d10b      	bne.n	800b784 <HAL_TIM_PWM_Start+0xd4>
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d056      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	2b04      	cmp	r3, #4
 800b776:	d053      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	2b08      	cmp	r3, #8
 800b77c:	d050      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	2b0c      	cmp	r3, #12
 800b782:	d04d      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a5c      	ldr	r2, [pc, #368]	@ (800b8fc <HAL_TIM_PWM_Start+0x24c>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d111      	bne.n	800b7b2 <HAL_TIM_PWM_Start+0x102>
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d045      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	2b04      	cmp	r3, #4
 800b798:	d042      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	2b08      	cmp	r3, #8
 800b79e:	d03f      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	2b0c      	cmp	r3, #12
 800b7a4:	d03c      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	2b10      	cmp	r3, #16
 800b7aa:	d039      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	2b14      	cmp	r3, #20
 800b7b0:	d036      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a52      	ldr	r2, [pc, #328]	@ (800b900 <HAL_TIM_PWM_Start+0x250>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d105      	bne.n	800b7c8 <HAL_TIM_PWM_Start+0x118>
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d02e      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	2b04      	cmp	r3, #4
 800b7c6:	d02b      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a4d      	ldr	r2, [pc, #308]	@ (800b904 <HAL_TIM_PWM_Start+0x254>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d102      	bne.n	800b7d8 <HAL_TIM_PWM_Start+0x128>
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d023      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a4a      	ldr	r2, [pc, #296]	@ (800b908 <HAL_TIM_PWM_Start+0x258>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d102      	bne.n	800b7e8 <HAL_TIM_PWM_Start+0x138>
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d01b      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a47      	ldr	r2, [pc, #284]	@ (800b90c <HAL_TIM_PWM_Start+0x25c>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d111      	bne.n	800b816 <HAL_TIM_PWM_Start+0x166>
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d013      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	2b04      	cmp	r3, #4
 800b7fc:	d010      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2b08      	cmp	r3, #8
 800b802:	d00d      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	2b0c      	cmp	r3, #12
 800b808:	d00a      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2b10      	cmp	r3, #16
 800b80e:	d007      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	2b14      	cmp	r3, #20
 800b814:	d004      	beq.n	800b820 <HAL_TIM_PWM_Start+0x170>
 800b816:	f44f 61b9 	mov.w	r1, #1480	@ 0x5c8
 800b81a:	483d      	ldr	r0, [pc, #244]	@ (800b910 <HAL_TIM_PWM_Start+0x260>)
 800b81c:	f7f6 fd02 	bl	8002224 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d109      	bne.n	800b83a <HAL_TIM_PWM_Start+0x18a>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	2b01      	cmp	r3, #1
 800b830:	bf14      	ite	ne
 800b832:	2301      	movne	r3, #1
 800b834:	2300      	moveq	r3, #0
 800b836:	b2db      	uxtb	r3, r3
 800b838:	e03c      	b.n	800b8b4 <HAL_TIM_PWM_Start+0x204>
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b04      	cmp	r3, #4
 800b83e:	d109      	bne.n	800b854 <HAL_TIM_PWM_Start+0x1a4>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b846:	b2db      	uxtb	r3, r3
 800b848:	2b01      	cmp	r3, #1
 800b84a:	bf14      	ite	ne
 800b84c:	2301      	movne	r3, #1
 800b84e:	2300      	moveq	r3, #0
 800b850:	b2db      	uxtb	r3, r3
 800b852:	e02f      	b.n	800b8b4 <HAL_TIM_PWM_Start+0x204>
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	2b08      	cmp	r3, #8
 800b858:	d109      	bne.n	800b86e <HAL_TIM_PWM_Start+0x1be>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b01      	cmp	r3, #1
 800b864:	bf14      	ite	ne
 800b866:	2301      	movne	r3, #1
 800b868:	2300      	moveq	r3, #0
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	e022      	b.n	800b8b4 <HAL_TIM_PWM_Start+0x204>
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	2b0c      	cmp	r3, #12
 800b872:	d109      	bne.n	800b888 <HAL_TIM_PWM_Start+0x1d8>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	bf14      	ite	ne
 800b880:	2301      	movne	r3, #1
 800b882:	2300      	moveq	r3, #0
 800b884:	b2db      	uxtb	r3, r3
 800b886:	e015      	b.n	800b8b4 <HAL_TIM_PWM_Start+0x204>
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	2b10      	cmp	r3, #16
 800b88c:	d109      	bne.n	800b8a2 <HAL_TIM_PWM_Start+0x1f2>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b894:	b2db      	uxtb	r3, r3
 800b896:	2b01      	cmp	r3, #1
 800b898:	bf14      	ite	ne
 800b89a:	2301      	movne	r3, #1
 800b89c:	2300      	moveq	r3, #0
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	e008      	b.n	800b8b4 <HAL_TIM_PWM_Start+0x204>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	bf14      	ite	ne
 800b8ae:	2301      	movne	r3, #1
 800b8b0:	2300      	moveq	r3, #0
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d001      	beq.n	800b8bc <HAL_TIM_PWM_Start+0x20c>
  {
    return HAL_ERROR;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	e0ba      	b.n	800ba32 <HAL_TIM_PWM_Start+0x382>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d104      	bne.n	800b8cc <HAL_TIM_PWM_Start+0x21c>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b8ca:	e037      	b.n	800b93c <HAL_TIM_PWM_Start+0x28c>
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	2b04      	cmp	r3, #4
 800b8d0:	d104      	bne.n	800b8dc <HAL_TIM_PWM_Start+0x22c>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2202      	movs	r2, #2
 800b8d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b8da:	e02f      	b.n	800b93c <HAL_TIM_PWM_Start+0x28c>
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	2b08      	cmp	r3, #8
 800b8e0:	d118      	bne.n	800b914 <HAL_TIM_PWM_Start+0x264>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2202      	movs	r2, #2
 800b8e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b8ea:	e027      	b.n	800b93c <HAL_TIM_PWM_Start+0x28c>
 800b8ec:	40012c00 	.word	0x40012c00
 800b8f0:	40000400 	.word	0x40000400
 800b8f4:	40000800 	.word	0x40000800
 800b8f8:	40000c00 	.word	0x40000c00
 800b8fc:	40013400 	.word	0x40013400
 800b900:	40014000 	.word	0x40014000
 800b904:	40014400 	.word	0x40014400
 800b908:	40014800 	.word	0x40014800
 800b90c:	40015000 	.word	0x40015000
 800b910:	080143b0 	.word	0x080143b0
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	2b0c      	cmp	r3, #12
 800b918:	d104      	bne.n	800b924 <HAL_TIM_PWM_Start+0x274>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2202      	movs	r2, #2
 800b91e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b922:	e00b      	b.n	800b93c <HAL_TIM_PWM_Start+0x28c>
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	2b10      	cmp	r3, #16
 800b928:	d104      	bne.n	800b934 <HAL_TIM_PWM_Start+0x284>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2202      	movs	r2, #2
 800b92e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b932:	e003      	b.n	800b93c <HAL_TIM_PWM_Start+0x28c>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2202      	movs	r2, #2
 800b938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2201      	movs	r2, #1
 800b942:	6839      	ldr	r1, [r7, #0]
 800b944:	4618      	mov	r0, r3
 800b946:	f002 f863 	bl	800da10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a3b      	ldr	r2, [pc, #236]	@ (800ba3c <HAL_TIM_PWM_Start+0x38c>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d018      	beq.n	800b986 <HAL_TIM_PWM_Start+0x2d6>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a39      	ldr	r2, [pc, #228]	@ (800ba40 <HAL_TIM_PWM_Start+0x390>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d013      	beq.n	800b986 <HAL_TIM_PWM_Start+0x2d6>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a38      	ldr	r2, [pc, #224]	@ (800ba44 <HAL_TIM_PWM_Start+0x394>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d00e      	beq.n	800b986 <HAL_TIM_PWM_Start+0x2d6>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a36      	ldr	r2, [pc, #216]	@ (800ba48 <HAL_TIM_PWM_Start+0x398>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d009      	beq.n	800b986 <HAL_TIM_PWM_Start+0x2d6>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a35      	ldr	r2, [pc, #212]	@ (800ba4c <HAL_TIM_PWM_Start+0x39c>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d004      	beq.n	800b986 <HAL_TIM_PWM_Start+0x2d6>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a33      	ldr	r2, [pc, #204]	@ (800ba50 <HAL_TIM_PWM_Start+0x3a0>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d101      	bne.n	800b98a <HAL_TIM_PWM_Start+0x2da>
 800b986:	2301      	movs	r3, #1
 800b988:	e000      	b.n	800b98c <HAL_TIM_PWM_Start+0x2dc>
 800b98a:	2300      	movs	r3, #0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d007      	beq.n	800b9a0 <HAL_TIM_PWM_Start+0x2f0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b99e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a25      	ldr	r2, [pc, #148]	@ (800ba3c <HAL_TIM_PWM_Start+0x38c>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d022      	beq.n	800b9f0 <HAL_TIM_PWM_Start+0x340>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9b2:	d01d      	beq.n	800b9f0 <HAL_TIM_PWM_Start+0x340>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a26      	ldr	r2, [pc, #152]	@ (800ba54 <HAL_TIM_PWM_Start+0x3a4>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d018      	beq.n	800b9f0 <HAL_TIM_PWM_Start+0x340>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4a25      	ldr	r2, [pc, #148]	@ (800ba58 <HAL_TIM_PWM_Start+0x3a8>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d013      	beq.n	800b9f0 <HAL_TIM_PWM_Start+0x340>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a23      	ldr	r2, [pc, #140]	@ (800ba5c <HAL_TIM_PWM_Start+0x3ac>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d00e      	beq.n	800b9f0 <HAL_TIM_PWM_Start+0x340>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4a1a      	ldr	r2, [pc, #104]	@ (800ba40 <HAL_TIM_PWM_Start+0x390>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d009      	beq.n	800b9f0 <HAL_TIM_PWM_Start+0x340>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a18      	ldr	r2, [pc, #96]	@ (800ba44 <HAL_TIM_PWM_Start+0x394>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d004      	beq.n	800b9f0 <HAL_TIM_PWM_Start+0x340>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a19      	ldr	r2, [pc, #100]	@ (800ba50 <HAL_TIM_PWM_Start+0x3a0>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d115      	bne.n	800ba1c <HAL_TIM_PWM_Start+0x36c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	689a      	ldr	r2, [r3, #8]
 800b9f6:	4b1a      	ldr	r3, [pc, #104]	@ (800ba60 <HAL_TIM_PWM_Start+0x3b0>)
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2b06      	cmp	r3, #6
 800ba00:	d015      	beq.n	800ba2e <HAL_TIM_PWM_Start+0x37e>
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba08:	d011      	beq.n	800ba2e <HAL_TIM_PWM_Start+0x37e>
    {
      __HAL_TIM_ENABLE(htim);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f042 0201 	orr.w	r2, r2, #1
 800ba18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba1a:	e008      	b.n	800ba2e <HAL_TIM_PWM_Start+0x37e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f042 0201 	orr.w	r2, r2, #1
 800ba2a:	601a      	str	r2, [r3, #0]
 800ba2c:	e000      	b.n	800ba30 <HAL_TIM_PWM_Start+0x380>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	40012c00 	.word	0x40012c00
 800ba40:	40013400 	.word	0x40013400
 800ba44:	40014000 	.word	0x40014000
 800ba48:	40014400 	.word	0x40014400
 800ba4c:	40014800 	.word	0x40014800
 800ba50:	40015000 	.word	0x40015000
 800ba54:	40000400 	.word	0x40000400
 800ba58:	40000800 	.word	0x40000800
 800ba5c:	40000c00 	.word	0x40000c00
 800ba60:	00010007 	.word	0x00010007

0800ba64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	f003 0302 	and.w	r3, r3, #2
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d020      	beq.n	800bac8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f003 0302 	and.w	r3, r3, #2
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d01b      	beq.n	800bac8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f06f 0202 	mvn.w	r2, #2
 800ba98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	699b      	ldr	r3, [r3, #24]
 800baa6:	f003 0303 	and.w	r3, r3, #3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d003      	beq.n	800bab6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f001 fa72 	bl	800cf98 <HAL_TIM_IC_CaptureCallback>
 800bab4:	e005      	b.n	800bac2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f001 fa64 	bl	800cf84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f001 fa75 	bl	800cfac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	f003 0304 	and.w	r3, r3, #4
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d020      	beq.n	800bb14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f003 0304 	and.w	r3, r3, #4
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d01b      	beq.n	800bb14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f06f 0204 	mvn.w	r2, #4
 800bae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2202      	movs	r2, #2
 800baea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	699b      	ldr	r3, [r3, #24]
 800baf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d003      	beq.n	800bb02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f001 fa4c 	bl	800cf98 <HAL_TIM_IC_CaptureCallback>
 800bb00:	e005      	b.n	800bb0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f001 fa3e 	bl	800cf84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f001 fa4f 	bl	800cfac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	f003 0308 	and.w	r3, r3, #8
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d020      	beq.n	800bb60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f003 0308 	and.w	r3, r3, #8
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d01b      	beq.n	800bb60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f06f 0208 	mvn.w	r2, #8
 800bb30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2204      	movs	r2, #4
 800bb36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	69db      	ldr	r3, [r3, #28]
 800bb3e:	f003 0303 	and.w	r3, r3, #3
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d003      	beq.n	800bb4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f001 fa26 	bl	800cf98 <HAL_TIM_IC_CaptureCallback>
 800bb4c:	e005      	b.n	800bb5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f001 fa18 	bl	800cf84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f001 fa29 	bl	800cfac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	f003 0310 	and.w	r3, r3, #16
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d020      	beq.n	800bbac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f003 0310 	and.w	r3, r3, #16
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d01b      	beq.n	800bbac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f06f 0210 	mvn.w	r2, #16
 800bb7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2208      	movs	r2, #8
 800bb82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	69db      	ldr	r3, [r3, #28]
 800bb8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d003      	beq.n	800bb9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f001 fa00 	bl	800cf98 <HAL_TIM_IC_CaptureCallback>
 800bb98:	e005      	b.n	800bba6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f001 f9f2 	bl	800cf84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f001 fa03 	bl	800cfac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	f003 0301 	and.w	r3, r3, #1
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00c      	beq.n	800bbd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f003 0301 	and.w	r3, r3, #1
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d007      	beq.n	800bbd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f06f 0201 	mvn.w	r2, #1
 800bbc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f7f6 f90c 	bl	8001de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d104      	bne.n	800bbe4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00c      	beq.n	800bbfe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d007      	beq.n	800bbfe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bbf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f002 fa77 	bl	800e0ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00c      	beq.n	800bc22 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d007      	beq.n	800bc22 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bc1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f002 fa6f 	bl	800e100 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00c      	beq.n	800bc46 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d007      	beq.n	800bc46 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bc3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f001 f9bd 	bl	800cfc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	f003 0320 	and.w	r3, r3, #32
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00c      	beq.n	800bc6a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f003 0320 	and.w	r3, r3, #32
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d007      	beq.n	800bc6a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f06f 0220 	mvn.w	r2, #32
 800bc62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f002 fa37 	bl	800e0d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d00c      	beq.n	800bc8e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d007      	beq.n	800bc8e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800bc86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f002 fa43 	bl	800e114 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00c      	beq.n	800bcb2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d007      	beq.n	800bcb2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800bcaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f002 fa3b 	bl	800e128 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d00c      	beq.n	800bcd6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d007      	beq.n	800bcd6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800bcce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f002 fa33 	bl	800e13c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00c      	beq.n	800bcfa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d007      	beq.n	800bcfa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800bcf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f002 fa2b 	bl	800e150 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcfa:	bf00      	nop
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
	...

0800bd04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b086      	sub	sp, #24
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd10:	2300      	movs	r3, #0
 800bd12:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d016      	beq.n	800bd48 <HAL_TIM_PWM_ConfigChannel+0x44>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2b04      	cmp	r3, #4
 800bd1e:	d013      	beq.n	800bd48 <HAL_TIM_PWM_ConfigChannel+0x44>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2b08      	cmp	r3, #8
 800bd24:	d010      	beq.n	800bd48 <HAL_TIM_PWM_ConfigChannel+0x44>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2b0c      	cmp	r3, #12
 800bd2a:	d00d      	beq.n	800bd48 <HAL_TIM_PWM_ConfigChannel+0x44>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b10      	cmp	r3, #16
 800bd30:	d00a      	beq.n	800bd48 <HAL_TIM_PWM_ConfigChannel+0x44>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2b14      	cmp	r3, #20
 800bd36:	d007      	beq.n	800bd48 <HAL_TIM_PWM_ConfigChannel+0x44>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b3c      	cmp	r3, #60	@ 0x3c
 800bd3c:	d004      	beq.n	800bd48 <HAL_TIM_PWM_ConfigChannel+0x44>
 800bd3e:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 800bd42:	4890      	ldr	r0, [pc, #576]	@ (800bf84 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bd44:	f7f6 fa6e 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b60      	cmp	r3, #96	@ 0x60
 800bd4e:	d01c      	beq.n	800bd8a <HAL_TIM_PWM_ConfigChannel+0x86>
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b70      	cmp	r3, #112	@ 0x70
 800bd56:	d018      	beq.n	800bd8a <HAL_TIM_PWM_ConfigChannel+0x86>
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a8a      	ldr	r2, [pc, #552]	@ (800bf88 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d013      	beq.n	800bd8a <HAL_TIM_PWM_ConfigChannel+0x86>
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a89      	ldr	r2, [pc, #548]	@ (800bf8c <HAL_TIM_PWM_ConfigChannel+0x288>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d00e      	beq.n	800bd8a <HAL_TIM_PWM_ConfigChannel+0x86>
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a87      	ldr	r2, [pc, #540]	@ (800bf90 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d009      	beq.n	800bd8a <HAL_TIM_PWM_ConfigChannel+0x86>
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a86      	ldr	r2, [pc, #536]	@ (800bf94 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d004      	beq.n	800bd8a <HAL_TIM_PWM_ConfigChannel+0x86>
 800bd80:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 800bd84:	487f      	ldr	r0, [pc, #508]	@ (800bf84 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bd86:	f7f6 fa4d 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d008      	beq.n	800bda4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	d004      	beq.n	800bda4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800bd9a:	f241 01f5 	movw	r1, #4341	@ 0x10f5
 800bd9e:	4879      	ldr	r0, [pc, #484]	@ (800bf84 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bda0:	f7f6 fa40 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d008      	beq.n	800bdbe <HAL_TIM_PWM_ConfigChannel+0xba>
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	2b04      	cmp	r3, #4
 800bdb2:	d004      	beq.n	800bdbe <HAL_TIM_PWM_ConfigChannel+0xba>
 800bdb4:	f241 01f6 	movw	r1, #4342	@ 0x10f6
 800bdb8:	4872      	ldr	r0, [pc, #456]	@ (800bf84 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bdba:	f7f6 fa33 	bl	8002224 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d101      	bne.n	800bdcc <HAL_TIM_PWM_ConfigChannel+0xc8>
 800bdc8:	2302      	movs	r3, #2
 800bdca:	e1f9      	b.n	800c1c0 <HAL_TIM_PWM_ConfigChannel+0x4bc>
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2b14      	cmp	r3, #20
 800bdd8:	f200 81ea 	bhi.w	800c1b0 <HAL_TIM_PWM_ConfigChannel+0x4ac>
 800bddc:	a201      	add	r2, pc, #4	@ (adr r2, 800bde4 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800bdde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde2:	bf00      	nop
 800bde4:	0800be39 	.word	0x0800be39
 800bde8:	0800c1b1 	.word	0x0800c1b1
 800bdec:	0800c1b1 	.word	0x0800c1b1
 800bdf0:	0800c1b1 	.word	0x0800c1b1
 800bdf4:	0800bee7 	.word	0x0800bee7
 800bdf8:	0800c1b1 	.word	0x0800c1b1
 800bdfc:	0800c1b1 	.word	0x0800c1b1
 800be00:	0800c1b1 	.word	0x0800c1b1
 800be04:	0800bfbd 	.word	0x0800bfbd
 800be08:	0800c1b1 	.word	0x0800c1b1
 800be0c:	0800c1b1 	.word	0x0800c1b1
 800be10:	0800c1b1 	.word	0x0800c1b1
 800be14:	0800c04d 	.word	0x0800c04d
 800be18:	0800c1b1 	.word	0x0800c1b1
 800be1c:	0800c1b1 	.word	0x0800c1b1
 800be20:	0800c1b1 	.word	0x0800c1b1
 800be24:	0800c0df 	.word	0x0800c0df
 800be28:	0800c1b1 	.word	0x0800c1b1
 800be2c:	0800c1b1 	.word	0x0800c1b1
 800be30:	0800c1b1 	.word	0x0800c1b1
 800be34:	0800c147 	.word	0x0800c147
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a56      	ldr	r2, [pc, #344]	@ (800bf98 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d031      	beq.n	800bea6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be4a:	d02c      	beq.n	800bea6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a52      	ldr	r2, [pc, #328]	@ (800bf9c <HAL_TIM_PWM_ConfigChannel+0x298>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d027      	beq.n	800bea6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a51      	ldr	r2, [pc, #324]	@ (800bfa0 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d022      	beq.n	800bea6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a4f      	ldr	r2, [pc, #316]	@ (800bfa4 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d01d      	beq.n	800bea6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a4e      	ldr	r2, [pc, #312]	@ (800bfa8 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d018      	beq.n	800bea6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a4c      	ldr	r2, [pc, #304]	@ (800bfac <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d013      	beq.n	800bea6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a4b      	ldr	r2, [pc, #300]	@ (800bfb0 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d00e      	beq.n	800bea6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a49      	ldr	r2, [pc, #292]	@ (800bfb4 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d009      	beq.n	800bea6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a48      	ldr	r2, [pc, #288]	@ (800bfb8 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d004      	beq.n	800bea6 <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800be9c:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 800bea0:	4838      	ldr	r0, [pc, #224]	@ (800bf84 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bea2:	f7f6 f9bf 	bl	8002224 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	68b9      	ldr	r1, [r7, #8]
 800beac:	4618      	mov	r0, r3
 800beae:	f001 f945 	bl	800d13c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	699a      	ldr	r2, [r3, #24]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f042 0208 	orr.w	r2, r2, #8
 800bec0:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	699a      	ldr	r2, [r3, #24]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f022 0204 	bic.w	r2, r2, #4
 800bed0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	6999      	ldr	r1, [r3, #24]
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	691a      	ldr	r2, [r3, #16]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	430a      	orrs	r2, r1
 800bee2:	619a      	str	r2, [r3, #24]
      break;
 800bee4:	e167      	b.n	800c1b6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a2b      	ldr	r2, [pc, #172]	@ (800bf98 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d027      	beq.n	800bf40 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bef8:	d022      	beq.n	800bf40 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4a27      	ldr	r2, [pc, #156]	@ (800bf9c <HAL_TIM_PWM_ConfigChannel+0x298>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d01d      	beq.n	800bf40 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a25      	ldr	r2, [pc, #148]	@ (800bfa0 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d018      	beq.n	800bf40 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a24      	ldr	r2, [pc, #144]	@ (800bfa4 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d013      	beq.n	800bf40 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a22      	ldr	r2, [pc, #136]	@ (800bfa8 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d00e      	beq.n	800bf40 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a21      	ldr	r2, [pc, #132]	@ (800bfac <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d009      	beq.n	800bf40 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a21      	ldr	r2, [pc, #132]	@ (800bfb8 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d004      	beq.n	800bf40 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800bf36:	f241 1111 	movw	r1, #4369	@ 0x1111
 800bf3a:	4812      	ldr	r0, [pc, #72]	@ (800bf84 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bf3c:	f7f6 f972 	bl	8002224 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	68b9      	ldr	r1, [r7, #8]
 800bf46:	4618      	mov	r0, r3
 800bf48:	f001 f9bc 	bl	800d2c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	699a      	ldr	r2, [r3, #24]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	699a      	ldr	r2, [r3, #24]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	6999      	ldr	r1, [r3, #24]
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	021a      	lsls	r2, r3, #8
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	430a      	orrs	r2, r1
 800bf7e:	619a      	str	r2, [r3, #24]
      break;
 800bf80:	e119      	b.n	800c1b6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
 800bf82:	bf00      	nop
 800bf84:	080143b0 	.word	0x080143b0
 800bf88:	00010040 	.word	0x00010040
 800bf8c:	00010050 	.word	0x00010050
 800bf90:	00010060 	.word	0x00010060
 800bf94:	00010070 	.word	0x00010070
 800bf98:	40012c00 	.word	0x40012c00
 800bf9c:	40000400 	.word	0x40000400
 800bfa0:	40000800 	.word	0x40000800
 800bfa4:	40000c00 	.word	0x40000c00
 800bfa8:	40013400 	.word	0x40013400
 800bfac:	40014000 	.word	0x40014000
 800bfb0:	40014400 	.word	0x40014400
 800bfb4:	40014800 	.word	0x40014800
 800bfb8:	40015000 	.word	0x40015000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a81      	ldr	r2, [pc, #516]	@ (800c1c8 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d022      	beq.n	800c00c <HAL_TIM_PWM_ConfigChannel+0x308>
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfce:	d01d      	beq.n	800c00c <HAL_TIM_PWM_ConfigChannel+0x308>
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a7d      	ldr	r2, [pc, #500]	@ (800c1cc <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d018      	beq.n	800c00c <HAL_TIM_PWM_ConfigChannel+0x308>
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a7c      	ldr	r2, [pc, #496]	@ (800c1d0 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d013      	beq.n	800c00c <HAL_TIM_PWM_ConfigChannel+0x308>
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a7a      	ldr	r2, [pc, #488]	@ (800c1d4 <HAL_TIM_PWM_ConfigChannel+0x4d0>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d00e      	beq.n	800c00c <HAL_TIM_PWM_ConfigChannel+0x308>
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4a79      	ldr	r2, [pc, #484]	@ (800c1d8 <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d009      	beq.n	800c00c <HAL_TIM_PWM_ConfigChannel+0x308>
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a77      	ldr	r2, [pc, #476]	@ (800c1dc <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d004      	beq.n	800c00c <HAL_TIM_PWM_ConfigChannel+0x308>
 800c002:	f241 1122 	movw	r1, #4386	@ 0x1122
 800c006:	4876      	ldr	r0, [pc, #472]	@ (800c1e0 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800c008:	f7f6 f90c 	bl	8002224 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	68b9      	ldr	r1, [r7, #8]
 800c012:	4618      	mov	r0, r3
 800c014:	f001 fa12 	bl	800d43c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	69da      	ldr	r2, [r3, #28]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f042 0208 	orr.w	r2, r2, #8
 800c026:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	69da      	ldr	r2, [r3, #28]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f022 0204 	bic.w	r2, r2, #4
 800c036:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	69d9      	ldr	r1, [r3, #28]
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	691a      	ldr	r2, [r3, #16]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	430a      	orrs	r2, r1
 800c048:	61da      	str	r2, [r3, #28]
      break;
 800c04a:	e0b4      	b.n	800c1b6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a5d      	ldr	r2, [pc, #372]	@ (800c1c8 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d022      	beq.n	800c09c <HAL_TIM_PWM_ConfigChannel+0x398>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c05e:	d01d      	beq.n	800c09c <HAL_TIM_PWM_ConfigChannel+0x398>
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a59      	ldr	r2, [pc, #356]	@ (800c1cc <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d018      	beq.n	800c09c <HAL_TIM_PWM_ConfigChannel+0x398>
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a58      	ldr	r2, [pc, #352]	@ (800c1d0 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d013      	beq.n	800c09c <HAL_TIM_PWM_ConfigChannel+0x398>
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a56      	ldr	r2, [pc, #344]	@ (800c1d4 <HAL_TIM_PWM_ConfigChannel+0x4d0>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d00e      	beq.n	800c09c <HAL_TIM_PWM_ConfigChannel+0x398>
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a55      	ldr	r2, [pc, #340]	@ (800c1d8 <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d009      	beq.n	800c09c <HAL_TIM_PWM_ConfigChannel+0x398>
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a53      	ldr	r2, [pc, #332]	@ (800c1dc <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d004      	beq.n	800c09c <HAL_TIM_PWM_ConfigChannel+0x398>
 800c092:	f241 1133 	movw	r1, #4403	@ 0x1133
 800c096:	4852      	ldr	r0, [pc, #328]	@ (800c1e0 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800c098:	f7f6 f8c4 	bl	8002224 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68b9      	ldr	r1, [r7, #8]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f001 fa86 	bl	800d5b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	69da      	ldr	r2, [r3, #28]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c0b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	69da      	ldr	r2, [r3, #28]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c0c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	69d9      	ldr	r1, [r3, #28]
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	691b      	ldr	r3, [r3, #16]
 800c0d2:	021a      	lsls	r2, r3, #8
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	430a      	orrs	r2, r1
 800c0da:	61da      	str	r2, [r3, #28]
      break;
 800c0dc:	e06b      	b.n	800c1b6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4a39      	ldr	r2, [pc, #228]	@ (800c1c8 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d00e      	beq.n	800c106 <HAL_TIM_PWM_ConfigChannel+0x402>
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a3a      	ldr	r2, [pc, #232]	@ (800c1d8 <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d009      	beq.n	800c106 <HAL_TIM_PWM_ConfigChannel+0x402>
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a39      	ldr	r2, [pc, #228]	@ (800c1dc <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d004      	beq.n	800c106 <HAL_TIM_PWM_ConfigChannel+0x402>
 800c0fc:	f241 1144 	movw	r1, #4420	@ 0x1144
 800c100:	4837      	ldr	r0, [pc, #220]	@ (800c1e0 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800c102:	f7f6 f88f 	bl	8002224 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68b9      	ldr	r1, [r7, #8]
 800c10c:	4618      	mov	r0, r3
 800c10e:	f001 fb0d 	bl	800d72c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f042 0208 	orr.w	r2, r2, #8
 800c120:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f022 0204 	bic.w	r2, r2, #4
 800c130:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	691a      	ldr	r2, [r3, #16]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	430a      	orrs	r2, r1
 800c142:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c144:	e037      	b.n	800c1b6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a1f      	ldr	r2, [pc, #124]	@ (800c1c8 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d00e      	beq.n	800c16e <HAL_TIM_PWM_ConfigChannel+0x46a>
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a20      	ldr	r2, [pc, #128]	@ (800c1d8 <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d009      	beq.n	800c16e <HAL_TIM_PWM_ConfigChannel+0x46a>
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a1f      	ldr	r2, [pc, #124]	@ (800c1dc <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d004      	beq.n	800c16e <HAL_TIM_PWM_ConfigChannel+0x46a>
 800c164:	f241 1155 	movw	r1, #4437	@ 0x1155
 800c168:	481d      	ldr	r0, [pc, #116]	@ (800c1e0 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800c16a:	f7f6 f85b 	bl	8002224 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68b9      	ldr	r1, [r7, #8]
 800c174:	4618      	mov	r0, r3
 800c176:	f001 fb43 	bl	800d800 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c188:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c198:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	691b      	ldr	r3, [r3, #16]
 800c1a4:	021a      	lsls	r2, r3, #8
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	430a      	orrs	r2, r1
 800c1ac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c1ae:	e002      	b.n	800c1b6 <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    default:
      status = HAL_ERROR;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	75fb      	strb	r3, [r7, #23]
      break;
 800c1b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c1be:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3718      	adds	r7, #24
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	40012c00 	.word	0x40012c00
 800c1cc:	40000400 	.word	0x40000400
 800c1d0:	40000800 	.word	0x40000800
 800c1d4:	40000c00 	.word	0x40000c00
 800c1d8:	40013400 	.word	0x40013400
 800c1dc:	40015000 	.word	0x40015000
 800c1e0:	080143b0 	.word	0x080143b0

0800c1e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d102      	bne.n	800c202 <HAL_TIM_ConfigClockSource+0x1e>
 800c1fc:	2302      	movs	r3, #2
 800c1fe:	f000 beb3 	b.w	800cf68 <HAL_TIM_ConfigClockSource+0xd84>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2201      	movs	r2, #1
 800c206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2202      	movs	r2, #2
 800c20e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c21a:	d051      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b70      	cmp	r3, #112	@ 0x70
 800c222:	d04d      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c22c:	d048      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2b40      	cmp	r3, #64	@ 0x40
 800c234:	d044      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2b50      	cmp	r3, #80	@ 0x50
 800c23c:	d040      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2b60      	cmp	r3, #96	@ 0x60
 800c244:	d03c      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d038      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b10      	cmp	r3, #16
 800c254:	d034      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b20      	cmp	r3, #32
 800c25c:	d030      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2b30      	cmp	r3, #48	@ 0x30
 800c264:	d02c      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c26e:	d027      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c278:	d022      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a7f      	ldr	r2, [pc, #508]	@ (800c47c <HAL_TIM_ConfigClockSource+0x298>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d01d      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a7d      	ldr	r2, [pc, #500]	@ (800c480 <HAL_TIM_ConfigClockSource+0x29c>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d018      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4a7c      	ldr	r2, [pc, #496]	@ (800c484 <HAL_TIM_ConfigClockSource+0x2a0>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d013      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a7a      	ldr	r2, [pc, #488]	@ (800c488 <HAL_TIM_ConfigClockSource+0x2a4>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d00e      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a79      	ldr	r2, [pc, #484]	@ (800c48c <HAL_TIM_ConfigClockSource+0x2a8>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d009      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a77      	ldr	r2, [pc, #476]	@ (800c490 <HAL_TIM_ConfigClockSource+0x2ac>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d004      	beq.n	800c2c0 <HAL_TIM_ConfigClockSource+0xdc>
 800c2b6:	f241 51c5 	movw	r1, #5573	@ 0x15c5
 800c2ba:	4876      	ldr	r0, [pc, #472]	@ (800c494 <HAL_TIM_ConfigClockSource+0x2b0>)
 800c2bc:	f7f5 ffb2 	bl	8002224 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c2ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c2d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c2da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	68ba      	ldr	r2, [r7, #8]
 800c2e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a69      	ldr	r2, [pc, #420]	@ (800c490 <HAL_TIM_ConfigClockSource+0x2ac>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	f000 832a 	beq.w	800c944 <HAL_TIM_ConfigClockSource+0x760>
 800c2f0:	4a67      	ldr	r2, [pc, #412]	@ (800c490 <HAL_TIM_ConfigClockSource+0x2ac>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	f200 862b 	bhi.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
 800c2f8:	4a64      	ldr	r2, [pc, #400]	@ (800c48c <HAL_TIM_ConfigClockSource+0x2a8>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	f000 8322 	beq.w	800c944 <HAL_TIM_ConfigClockSource+0x760>
 800c300:	4a62      	ldr	r2, [pc, #392]	@ (800c48c <HAL_TIM_ConfigClockSource+0x2a8>)
 800c302:	4293      	cmp	r3, r2
 800c304:	f200 8623 	bhi.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
 800c308:	4a5f      	ldr	r2, [pc, #380]	@ (800c488 <HAL_TIM_ConfigClockSource+0x2a4>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	f000 831a 	beq.w	800c944 <HAL_TIM_ConfigClockSource+0x760>
 800c310:	4a5d      	ldr	r2, [pc, #372]	@ (800c488 <HAL_TIM_ConfigClockSource+0x2a4>)
 800c312:	4293      	cmp	r3, r2
 800c314:	f200 861b 	bhi.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
 800c318:	4a5a      	ldr	r2, [pc, #360]	@ (800c484 <HAL_TIM_ConfigClockSource+0x2a0>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	f000 8312 	beq.w	800c944 <HAL_TIM_ConfigClockSource+0x760>
 800c320:	4a58      	ldr	r2, [pc, #352]	@ (800c484 <HAL_TIM_ConfigClockSource+0x2a0>)
 800c322:	4293      	cmp	r3, r2
 800c324:	f200 8613 	bhi.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
 800c328:	4a55      	ldr	r2, [pc, #340]	@ (800c480 <HAL_TIM_ConfigClockSource+0x29c>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	f000 830a 	beq.w	800c944 <HAL_TIM_ConfigClockSource+0x760>
 800c330:	4a53      	ldr	r2, [pc, #332]	@ (800c480 <HAL_TIM_ConfigClockSource+0x29c>)
 800c332:	4293      	cmp	r3, r2
 800c334:	f200 860b 	bhi.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
 800c338:	4a50      	ldr	r2, [pc, #320]	@ (800c47c <HAL_TIM_ConfigClockSource+0x298>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	f000 8302 	beq.w	800c944 <HAL_TIM_ConfigClockSource+0x760>
 800c340:	4a4e      	ldr	r2, [pc, #312]	@ (800c47c <HAL_TIM_ConfigClockSource+0x298>)
 800c342:	4293      	cmp	r3, r2
 800c344:	f200 8603 	bhi.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
 800c348:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c34c:	f000 82fa 	beq.w	800c944 <HAL_TIM_ConfigClockSource+0x760>
 800c350:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c354:	f200 85fb 	bhi.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
 800c358:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c35c:	f000 82f2 	beq.w	800c944 <HAL_TIM_ConfigClockSource+0x760>
 800c360:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c364:	f200 85f3 	bhi.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
 800c368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c36c:	f000 8125 	beq.w	800c5ba <HAL_TIM_ConfigClockSource+0x3d6>
 800c370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c374:	f200 85eb 	bhi.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
 800c378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c37c:	d02f      	beq.n	800c3de <HAL_TIM_ConfigClockSource+0x1fa>
 800c37e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c382:	f200 85e4 	bhi.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
 800c386:	2b70      	cmp	r3, #112	@ 0x70
 800c388:	f000 809c 	beq.w	800c4c4 <HAL_TIM_ConfigClockSource+0x2e0>
 800c38c:	2b70      	cmp	r3, #112	@ 0x70
 800c38e:	f200 85de 	bhi.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
 800c392:	2b60      	cmp	r3, #96	@ 0x60
 800c394:	f000 81f6 	beq.w	800c784 <HAL_TIM_ConfigClockSource+0x5a0>
 800c398:	2b60      	cmp	r3, #96	@ 0x60
 800c39a:	f200 85d8 	bhi.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
 800c39e:	2b50      	cmp	r3, #80	@ 0x50
 800c3a0:	f000 8190 	beq.w	800c6c4 <HAL_TIM_ConfigClockSource+0x4e0>
 800c3a4:	2b50      	cmp	r3, #80	@ 0x50
 800c3a6:	f200 85d2 	bhi.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
 800c3aa:	2b40      	cmp	r3, #64	@ 0x40
 800c3ac:	f000 825a 	beq.w	800c864 <HAL_TIM_ConfigClockSource+0x680>
 800c3b0:	2b40      	cmp	r3, #64	@ 0x40
 800c3b2:	f200 85cc 	bhi.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
 800c3b6:	2b30      	cmp	r3, #48	@ 0x30
 800c3b8:	f000 82c4 	beq.w	800c944 <HAL_TIM_ConfigClockSource+0x760>
 800c3bc:	2b30      	cmp	r3, #48	@ 0x30
 800c3be:	f200 85c6 	bhi.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
 800c3c2:	2b20      	cmp	r3, #32
 800c3c4:	f000 82be 	beq.w	800c944 <HAL_TIM_ConfigClockSource+0x760>
 800c3c8:	2b20      	cmp	r3, #32
 800c3ca:	f200 85c0 	bhi.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	f000 82b8 	beq.w	800c944 <HAL_TIM_ConfigClockSource+0x760>
 800c3d4:	2b10      	cmp	r3, #16
 800c3d6:	f000 82b5 	beq.w	800c944 <HAL_TIM_ConfigClockSource+0x760>
 800c3da:	f000 bdb8 	b.w	800cf4e <HAL_TIM_ConfigClockSource+0xd6a>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a2d      	ldr	r2, [pc, #180]	@ (800c498 <HAL_TIM_ConfigClockSource+0x2b4>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	f000 85b5 	beq.w	800cf54 <HAL_TIM_ConfigClockSource+0xd70>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3f2:	f000 85af 	beq.w	800cf54 <HAL_TIM_ConfigClockSource+0xd70>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a28      	ldr	r2, [pc, #160]	@ (800c49c <HAL_TIM_ConfigClockSource+0x2b8>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	f000 85a9 	beq.w	800cf54 <HAL_TIM_ConfigClockSource+0xd70>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a26      	ldr	r2, [pc, #152]	@ (800c4a0 <HAL_TIM_ConfigClockSource+0x2bc>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	f000 85a3 	beq.w	800cf54 <HAL_TIM_ConfigClockSource+0xd70>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a24      	ldr	r2, [pc, #144]	@ (800c4a4 <HAL_TIM_ConfigClockSource+0x2c0>)
 800c414:	4293      	cmp	r3, r2
 800c416:	f000 859d 	beq.w	800cf54 <HAL_TIM_ConfigClockSource+0xd70>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a22      	ldr	r2, [pc, #136]	@ (800c4a8 <HAL_TIM_ConfigClockSource+0x2c4>)
 800c420:	4293      	cmp	r3, r2
 800c422:	f000 8597 	beq.w	800cf54 <HAL_TIM_ConfigClockSource+0xd70>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a20      	ldr	r2, [pc, #128]	@ (800c4ac <HAL_TIM_ConfigClockSource+0x2c8>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	f000 8591 	beq.w	800cf54 <HAL_TIM_ConfigClockSource+0xd70>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a1e      	ldr	r2, [pc, #120]	@ (800c4b0 <HAL_TIM_ConfigClockSource+0x2cc>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	f000 858b 	beq.w	800cf54 <HAL_TIM_ConfigClockSource+0xd70>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a1c      	ldr	r2, [pc, #112]	@ (800c4b4 <HAL_TIM_ConfigClockSource+0x2d0>)
 800c444:	4293      	cmp	r3, r2
 800c446:	f000 8585 	beq.w	800cf54 <HAL_TIM_ConfigClockSource+0xd70>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a1a      	ldr	r2, [pc, #104]	@ (800c4b8 <HAL_TIM_ConfigClockSource+0x2d4>)
 800c450:	4293      	cmp	r3, r2
 800c452:	f000 857f 	beq.w	800cf54 <HAL_TIM_ConfigClockSource+0xd70>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a18      	ldr	r2, [pc, #96]	@ (800c4bc <HAL_TIM_ConfigClockSource+0x2d8>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	f000 8579 	beq.w	800cf54 <HAL_TIM_ConfigClockSource+0xd70>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a16      	ldr	r2, [pc, #88]	@ (800c4c0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	f000 8573 	beq.w	800cf54 <HAL_TIM_ConfigClockSource+0xd70>
 800c46e:	f241 51d1 	movw	r1, #5585	@ 0x15d1
 800c472:	4808      	ldr	r0, [pc, #32]	@ (800c494 <HAL_TIM_ConfigClockSource+0x2b0>)
 800c474:	f7f5 fed6 	bl	8002224 <assert_failed>
      break;
 800c478:	f000 bd6c 	b.w	800cf54 <HAL_TIM_ConfigClockSource+0xd70>
 800c47c:	00100020 	.word	0x00100020
 800c480:	00100030 	.word	0x00100030
 800c484:	00100040 	.word	0x00100040
 800c488:	00100050 	.word	0x00100050
 800c48c:	00100060 	.word	0x00100060
 800c490:	00100070 	.word	0x00100070
 800c494:	080143b0 	.word	0x080143b0
 800c498:	40012c00 	.word	0x40012c00
 800c49c:	40000400 	.word	0x40000400
 800c4a0:	40000800 	.word	0x40000800
 800c4a4:	40000c00 	.word	0x40000c00
 800c4a8:	40001000 	.word	0x40001000
 800c4ac:	40001400 	.word	0x40001400
 800c4b0:	40013400 	.word	0x40013400
 800c4b4:	40014000 	.word	0x40014000
 800c4b8:	40014400 	.word	0x40014400
 800c4bc:	40014800 	.word	0x40014800
 800c4c0:	40015000 	.word	0x40015000
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a77      	ldr	r2, [pc, #476]	@ (800c6a8 <HAL_TIM_ConfigClockSource+0x4c4>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d022      	beq.n	800c514 <HAL_TIM_ConfigClockSource+0x330>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4d6:	d01d      	beq.n	800c514 <HAL_TIM_ConfigClockSource+0x330>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a73      	ldr	r2, [pc, #460]	@ (800c6ac <HAL_TIM_ConfigClockSource+0x4c8>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d018      	beq.n	800c514 <HAL_TIM_ConfigClockSource+0x330>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a72      	ldr	r2, [pc, #456]	@ (800c6b0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d013      	beq.n	800c514 <HAL_TIM_ConfigClockSource+0x330>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a70      	ldr	r2, [pc, #448]	@ (800c6b4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d00e      	beq.n	800c514 <HAL_TIM_ConfigClockSource+0x330>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a6f      	ldr	r2, [pc, #444]	@ (800c6b8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d009      	beq.n	800c514 <HAL_TIM_ConfigClockSource+0x330>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a6d      	ldr	r2, [pc, #436]	@ (800c6bc <HAL_TIM_ConfigClockSource+0x4d8>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d004      	beq.n	800c514 <HAL_TIM_ConfigClockSource+0x330>
 800c50a:	f241 51d8 	movw	r1, #5592	@ 0x15d8
 800c50e:	486c      	ldr	r0, [pc, #432]	@ (800c6c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800c510:	f7f5 fe88 	bl	8002224 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d013      	beq.n	800c544 <HAL_TIM_ConfigClockSource+0x360>
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c524:	d00e      	beq.n	800c544 <HAL_TIM_ConfigClockSource+0x360>
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c52e:	d009      	beq.n	800c544 <HAL_TIM_ConfigClockSource+0x360>
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c538:	d004      	beq.n	800c544 <HAL_TIM_ConfigClockSource+0x360>
 800c53a:	f241 51db 	movw	r1, #5595	@ 0x15db
 800c53e:	4860      	ldr	r0, [pc, #384]	@ (800c6c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800c540:	f7f5 fe70 	bl	8002224 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c54c:	d014      	beq.n	800c578 <HAL_TIM_ConfigClockSource+0x394>
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d010      	beq.n	800c578 <HAL_TIM_ConfigClockSource+0x394>
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00c      	beq.n	800c578 <HAL_TIM_ConfigClockSource+0x394>
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	2b02      	cmp	r3, #2
 800c564:	d008      	beq.n	800c578 <HAL_TIM_ConfigClockSource+0x394>
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	2b0a      	cmp	r3, #10
 800c56c:	d004      	beq.n	800c578 <HAL_TIM_ConfigClockSource+0x394>
 800c56e:	f241 51dc 	movw	r1, #5596	@ 0x15dc
 800c572:	4853      	ldr	r0, [pc, #332]	@ (800c6c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800c574:	f7f5 fe56 	bl	8002224 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	2b0f      	cmp	r3, #15
 800c57e:	d904      	bls.n	800c58a <HAL_TIM_ConfigClockSource+0x3a6>
 800c580:	f241 51dd 	movw	r1, #5597	@ 0x15dd
 800c584:	484e      	ldr	r0, [pc, #312]	@ (800c6c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800c586:	f7f5 fe4d 	bl	8002224 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c59a:	f001 fa19 	bl	800d9d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c5ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	609a      	str	r2, [r3, #8]
      break;
 800c5b6:	f000 bcce 	b.w	800cf56 <HAL_TIM_ConfigClockSource+0xd72>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a3a      	ldr	r2, [pc, #232]	@ (800c6a8 <HAL_TIM_ConfigClockSource+0x4c4>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d022      	beq.n	800c60a <HAL_TIM_ConfigClockSource+0x426>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5cc:	d01d      	beq.n	800c60a <HAL_TIM_ConfigClockSource+0x426>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a36      	ldr	r2, [pc, #216]	@ (800c6ac <HAL_TIM_ConfigClockSource+0x4c8>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d018      	beq.n	800c60a <HAL_TIM_ConfigClockSource+0x426>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a34      	ldr	r2, [pc, #208]	@ (800c6b0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d013      	beq.n	800c60a <HAL_TIM_ConfigClockSource+0x426>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4a33      	ldr	r2, [pc, #204]	@ (800c6b4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d00e      	beq.n	800c60a <HAL_TIM_ConfigClockSource+0x426>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a31      	ldr	r2, [pc, #196]	@ (800c6b8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d009      	beq.n	800c60a <HAL_TIM_ConfigClockSource+0x426>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a30      	ldr	r2, [pc, #192]	@ (800c6bc <HAL_TIM_ConfigClockSource+0x4d8>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d004      	beq.n	800c60a <HAL_TIM_ConfigClockSource+0x426>
 800c600:	f241 51f0 	movw	r1, #5616	@ 0x15f0
 800c604:	482e      	ldr	r0, [pc, #184]	@ (800c6c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800c606:	f7f5 fe0d 	bl	8002224 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d013      	beq.n	800c63a <HAL_TIM_ConfigClockSource+0x456>
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c61a:	d00e      	beq.n	800c63a <HAL_TIM_ConfigClockSource+0x456>
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	689b      	ldr	r3, [r3, #8]
 800c620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c624:	d009      	beq.n	800c63a <HAL_TIM_ConfigClockSource+0x456>
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c62e:	d004      	beq.n	800c63a <HAL_TIM_ConfigClockSource+0x456>
 800c630:	f241 51f3 	movw	r1, #5619	@ 0x15f3
 800c634:	4822      	ldr	r0, [pc, #136]	@ (800c6c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800c636:	f7f5 fdf5 	bl	8002224 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c642:	d014      	beq.n	800c66e <HAL_TIM_ConfigClockSource+0x48a>
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d010      	beq.n	800c66e <HAL_TIM_ConfigClockSource+0x48a>
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00c      	beq.n	800c66e <HAL_TIM_ConfigClockSource+0x48a>
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	2b02      	cmp	r3, #2
 800c65a:	d008      	beq.n	800c66e <HAL_TIM_ConfigClockSource+0x48a>
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	2b0a      	cmp	r3, #10
 800c662:	d004      	beq.n	800c66e <HAL_TIM_ConfigClockSource+0x48a>
 800c664:	f241 51f4 	movw	r1, #5620	@ 0x15f4
 800c668:	4815      	ldr	r0, [pc, #84]	@ (800c6c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800c66a:	f7f5 fddb 	bl	8002224 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	68db      	ldr	r3, [r3, #12]
 800c672:	2b0f      	cmp	r3, #15
 800c674:	d904      	bls.n	800c680 <HAL_TIM_ConfigClockSource+0x49c>
 800c676:	f241 51f5 	movw	r1, #5621	@ 0x15f5
 800c67a:	4811      	ldr	r0, [pc, #68]	@ (800c6c0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800c67c:	f7f5 fdd2 	bl	8002224 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c690:	f001 f99e 	bl	800d9d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	689a      	ldr	r2, [r3, #8]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c6a2:	609a      	str	r2, [r3, #8]
      break;
 800c6a4:	f000 bc57 	b.w	800cf56 <HAL_TIM_ConfigClockSource+0xd72>
 800c6a8:	40012c00 	.word	0x40012c00
 800c6ac:	40000400 	.word	0x40000400
 800c6b0:	40000800 	.word	0x40000800
 800c6b4:	40000c00 	.word	0x40000c00
 800c6b8:	40013400 	.word	0x40013400
 800c6bc:	40015000 	.word	0x40015000
 800c6c0:	080143b0 	.word	0x080143b0
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a5e      	ldr	r2, [pc, #376]	@ (800c844 <HAL_TIM_ConfigClockSource+0x660>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d027      	beq.n	800c71e <HAL_TIM_ConfigClockSource+0x53a>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6d6:	d022      	beq.n	800c71e <HAL_TIM_ConfigClockSource+0x53a>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a5a      	ldr	r2, [pc, #360]	@ (800c848 <HAL_TIM_ConfigClockSource+0x664>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d01d      	beq.n	800c71e <HAL_TIM_ConfigClockSource+0x53a>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a59      	ldr	r2, [pc, #356]	@ (800c84c <HAL_TIM_ConfigClockSource+0x668>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d018      	beq.n	800c71e <HAL_TIM_ConfigClockSource+0x53a>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a57      	ldr	r2, [pc, #348]	@ (800c850 <HAL_TIM_ConfigClockSource+0x66c>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d013      	beq.n	800c71e <HAL_TIM_ConfigClockSource+0x53a>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a56      	ldr	r2, [pc, #344]	@ (800c854 <HAL_TIM_ConfigClockSource+0x670>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d00e      	beq.n	800c71e <HAL_TIM_ConfigClockSource+0x53a>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4a54      	ldr	r2, [pc, #336]	@ (800c858 <HAL_TIM_ConfigClockSource+0x674>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d009      	beq.n	800c71e <HAL_TIM_ConfigClockSource+0x53a>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a53      	ldr	r2, [pc, #332]	@ (800c85c <HAL_TIM_ConfigClockSource+0x678>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d004      	beq.n	800c71e <HAL_TIM_ConfigClockSource+0x53a>
 800c714:	f241 6104 	movw	r1, #5636	@ 0x1604
 800c718:	4851      	ldr	r0, [pc, #324]	@ (800c860 <HAL_TIM_ConfigClockSource+0x67c>)
 800c71a:	f7f5 fd83 	bl	8002224 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c726:	d014      	beq.n	800c752 <HAL_TIM_ConfigClockSource+0x56e>
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d010      	beq.n	800c752 <HAL_TIM_ConfigClockSource+0x56e>
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d00c      	beq.n	800c752 <HAL_TIM_ConfigClockSource+0x56e>
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	d008      	beq.n	800c752 <HAL_TIM_ConfigClockSource+0x56e>
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	2b0a      	cmp	r3, #10
 800c746:	d004      	beq.n	800c752 <HAL_TIM_ConfigClockSource+0x56e>
 800c748:	f241 6107 	movw	r1, #5639	@ 0x1607
 800c74c:	4844      	ldr	r0, [pc, #272]	@ (800c860 <HAL_TIM_ConfigClockSource+0x67c>)
 800c74e:	f7f5 fd69 	bl	8002224 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	2b0f      	cmp	r3, #15
 800c758:	d904      	bls.n	800c764 <HAL_TIM_ConfigClockSource+0x580>
 800c75a:	f241 6108 	movw	r1, #5640	@ 0x1608
 800c75e:	4840      	ldr	r0, [pc, #256]	@ (800c860 <HAL_TIM_ConfigClockSource+0x67c>)
 800c760:	f7f5 fd60 	bl	8002224 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c770:	461a      	mov	r2, r3
 800c772:	f001 f8b1 	bl	800d8d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2150      	movs	r1, #80	@ 0x50
 800c77c:	4618      	mov	r0, r3
 800c77e:	f001 f90a 	bl	800d996 <TIM_ITRx_SetConfig>
      break;
 800c782:	e3e8      	b.n	800cf56 <HAL_TIM_ConfigClockSource+0xd72>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a2e      	ldr	r2, [pc, #184]	@ (800c844 <HAL_TIM_ConfigClockSource+0x660>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d027      	beq.n	800c7de <HAL_TIM_ConfigClockSource+0x5fa>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c796:	d022      	beq.n	800c7de <HAL_TIM_ConfigClockSource+0x5fa>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a2a      	ldr	r2, [pc, #168]	@ (800c848 <HAL_TIM_ConfigClockSource+0x664>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d01d      	beq.n	800c7de <HAL_TIM_ConfigClockSource+0x5fa>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a29      	ldr	r2, [pc, #164]	@ (800c84c <HAL_TIM_ConfigClockSource+0x668>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d018      	beq.n	800c7de <HAL_TIM_ConfigClockSource+0x5fa>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a27      	ldr	r2, [pc, #156]	@ (800c850 <HAL_TIM_ConfigClockSource+0x66c>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d013      	beq.n	800c7de <HAL_TIM_ConfigClockSource+0x5fa>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a26      	ldr	r2, [pc, #152]	@ (800c854 <HAL_TIM_ConfigClockSource+0x670>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d00e      	beq.n	800c7de <HAL_TIM_ConfigClockSource+0x5fa>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a24      	ldr	r2, [pc, #144]	@ (800c858 <HAL_TIM_ConfigClockSource+0x674>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d009      	beq.n	800c7de <HAL_TIM_ConfigClockSource+0x5fa>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4a23      	ldr	r2, [pc, #140]	@ (800c85c <HAL_TIM_ConfigClockSource+0x678>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d004      	beq.n	800c7de <HAL_TIM_ConfigClockSource+0x5fa>
 800c7d4:	f241 6114 	movw	r1, #5652	@ 0x1614
 800c7d8:	4821      	ldr	r0, [pc, #132]	@ (800c860 <HAL_TIM_ConfigClockSource+0x67c>)
 800c7da:	f7f5 fd23 	bl	8002224 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c7e6:	d014      	beq.n	800c812 <HAL_TIM_ConfigClockSource+0x62e>
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d010      	beq.n	800c812 <HAL_TIM_ConfigClockSource+0x62e>
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d00c      	beq.n	800c812 <HAL_TIM_ConfigClockSource+0x62e>
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	d008      	beq.n	800c812 <HAL_TIM_ConfigClockSource+0x62e>
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	2b0a      	cmp	r3, #10
 800c806:	d004      	beq.n	800c812 <HAL_TIM_ConfigClockSource+0x62e>
 800c808:	f241 6117 	movw	r1, #5655	@ 0x1617
 800c80c:	4814      	ldr	r0, [pc, #80]	@ (800c860 <HAL_TIM_ConfigClockSource+0x67c>)
 800c80e:	f7f5 fd09 	bl	8002224 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	2b0f      	cmp	r3, #15
 800c818:	d904      	bls.n	800c824 <HAL_TIM_ConfigClockSource+0x640>
 800c81a:	f241 6118 	movw	r1, #5656	@ 0x1618
 800c81e:	4810      	ldr	r0, [pc, #64]	@ (800c860 <HAL_TIM_ConfigClockSource+0x67c>)
 800c820:	f7f5 fd00 	bl	8002224 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c830:	461a      	mov	r2, r3
 800c832:	f001 f880 	bl	800d936 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2160      	movs	r1, #96	@ 0x60
 800c83c:	4618      	mov	r0, r3
 800c83e:	f001 f8aa 	bl	800d996 <TIM_ITRx_SetConfig>
      break;
 800c842:	e388      	b.n	800cf56 <HAL_TIM_ConfigClockSource+0xd72>
 800c844:	40012c00 	.word	0x40012c00
 800c848:	40000400 	.word	0x40000400
 800c84c:	40000800 	.word	0x40000800
 800c850:	40000c00 	.word	0x40000c00
 800c854:	40013400 	.word	0x40013400
 800c858:	40014000 	.word	0x40014000
 800c85c:	40015000 	.word	0x40015000
 800c860:	080143b0 	.word	0x080143b0
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a2e      	ldr	r2, [pc, #184]	@ (800c924 <HAL_TIM_ConfigClockSource+0x740>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d027      	beq.n	800c8be <HAL_TIM_ConfigClockSource+0x6da>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c876:	d022      	beq.n	800c8be <HAL_TIM_ConfigClockSource+0x6da>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a2a      	ldr	r2, [pc, #168]	@ (800c928 <HAL_TIM_ConfigClockSource+0x744>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d01d      	beq.n	800c8be <HAL_TIM_ConfigClockSource+0x6da>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a29      	ldr	r2, [pc, #164]	@ (800c92c <HAL_TIM_ConfigClockSource+0x748>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d018      	beq.n	800c8be <HAL_TIM_ConfigClockSource+0x6da>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a27      	ldr	r2, [pc, #156]	@ (800c930 <HAL_TIM_ConfigClockSource+0x74c>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d013      	beq.n	800c8be <HAL_TIM_ConfigClockSource+0x6da>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a26      	ldr	r2, [pc, #152]	@ (800c934 <HAL_TIM_ConfigClockSource+0x750>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d00e      	beq.n	800c8be <HAL_TIM_ConfigClockSource+0x6da>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a24      	ldr	r2, [pc, #144]	@ (800c938 <HAL_TIM_ConfigClockSource+0x754>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d009      	beq.n	800c8be <HAL_TIM_ConfigClockSource+0x6da>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a23      	ldr	r2, [pc, #140]	@ (800c93c <HAL_TIM_ConfigClockSource+0x758>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d004      	beq.n	800c8be <HAL_TIM_ConfigClockSource+0x6da>
 800c8b4:	f241 6124 	movw	r1, #5668	@ 0x1624
 800c8b8:	4821      	ldr	r0, [pc, #132]	@ (800c940 <HAL_TIM_ConfigClockSource+0x75c>)
 800c8ba:	f7f5 fcb3 	bl	8002224 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c8c6:	d014      	beq.n	800c8f2 <HAL_TIM_ConfigClockSource+0x70e>
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d010      	beq.n	800c8f2 <HAL_TIM_ConfigClockSource+0x70e>
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00c      	beq.n	800c8f2 <HAL_TIM_ConfigClockSource+0x70e>
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d008      	beq.n	800c8f2 <HAL_TIM_ConfigClockSource+0x70e>
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	2b0a      	cmp	r3, #10
 800c8e6:	d004      	beq.n	800c8f2 <HAL_TIM_ConfigClockSource+0x70e>
 800c8e8:	f241 6127 	movw	r1, #5671	@ 0x1627
 800c8ec:	4814      	ldr	r0, [pc, #80]	@ (800c940 <HAL_TIM_ConfigClockSource+0x75c>)
 800c8ee:	f7f5 fc99 	bl	8002224 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	2b0f      	cmp	r3, #15
 800c8f8:	d904      	bls.n	800c904 <HAL_TIM_ConfigClockSource+0x720>
 800c8fa:	f241 6128 	movw	r1, #5672	@ 0x1628
 800c8fe:	4810      	ldr	r0, [pc, #64]	@ (800c940 <HAL_TIM_ConfigClockSource+0x75c>)
 800c900:	f7f5 fc90 	bl	8002224 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c910:	461a      	mov	r2, r3
 800c912:	f000 ffe1 	bl	800d8d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2140      	movs	r1, #64	@ 0x40
 800c91c:	4618      	mov	r0, r3
 800c91e:	f001 f83a 	bl	800d996 <TIM_ITRx_SetConfig>
      break;
 800c922:	e318      	b.n	800cf56 <HAL_TIM_ConfigClockSource+0xd72>
 800c924:	40012c00 	.word	0x40012c00
 800c928:	40000400 	.word	0x40000400
 800c92c:	40000800 	.word	0x40000800
 800c930:	40000c00 	.word	0x40000c00
 800c934:	40013400 	.word	0x40013400
 800c938:	40014000 	.word	0x40014000
 800c93c:	40015000 	.word	0x40015000
 800c940:	080143b0 	.word	0x080143b0
    case TIM_CLOCKSOURCE_ITR10:
#endif /* HRTIM1 */
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a9c      	ldr	r2, [pc, #624]	@ (800cbbc <HAL_TIM_ConfigClockSource+0x9d8>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d158      	bne.n	800ca00 <HAL_TIM_ConfigClockSource+0x81c>
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c956:	f000 82f1 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2b70      	cmp	r3, #112	@ 0x70
 800c960:	f000 82ec 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c96c:	f000 82e6 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2b40      	cmp	r3, #64	@ 0x40
 800c976:	f000 82e1 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2b50      	cmp	r3, #80	@ 0x50
 800c980:	f000 82dc 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2b60      	cmp	r3, #96	@ 0x60
 800c98a:	f000 82d7 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2b10      	cmp	r3, #16
 800c994:	f000 82d2 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2b20      	cmp	r3, #32
 800c99e:	f000 82cd 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	2b30      	cmp	r3, #48	@ 0x30
 800c9a8:	f000 82c8 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c9b4:	f000 82c2 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c9c0:	f000 82bc 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a7d      	ldr	r2, [pc, #500]	@ (800cbc0 <HAL_TIM_ConfigClockSource+0x9dc>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	f000 82b6 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a7b      	ldr	r2, [pc, #492]	@ (800cbc4 <HAL_TIM_ConfigClockSource+0x9e0>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	f000 82b0 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a79      	ldr	r2, [pc, #484]	@ (800cbc8 <HAL_TIM_ConfigClockSource+0x9e4>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	f000 82aa 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a77      	ldr	r2, [pc, #476]	@ (800cbcc <HAL_TIM_ConfigClockSource+0x9e8>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	f000 82a4 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a75      	ldr	r2, [pc, #468]	@ (800cbd0 <HAL_TIM_ConfigClockSource+0x9ec>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	f000 829e 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca08:	d15e      	bne.n	800cac8 <HAL_TIM_ConfigClockSource+0x8e4>
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca12:	f000 8293 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2b70      	cmp	r3, #112	@ 0x70
 800ca1c:	f000 828e 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca28:	f000 8288 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2b40      	cmp	r3, #64	@ 0x40
 800ca32:	f000 8283 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2b50      	cmp	r3, #80	@ 0x50
 800ca3c:	f000 827e 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b60      	cmp	r3, #96	@ 0x60
 800ca46:	f000 8279 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f000 8274 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b20      	cmp	r3, #32
 800ca5a:	f000 826f 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2b30      	cmp	r3, #48	@ 0x30
 800ca64:	f000 826a 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca70:	f000 8264 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ca7c:	f000 825e 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a4e      	ldr	r2, [pc, #312]	@ (800cbc0 <HAL_TIM_ConfigClockSource+0x9dc>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	f000 8258 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a4c      	ldr	r2, [pc, #304]	@ (800cbc4 <HAL_TIM_ConfigClockSource+0x9e0>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	f000 8252 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a4a      	ldr	r2, [pc, #296]	@ (800cbc8 <HAL_TIM_ConfigClockSource+0x9e4>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	f000 824c 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a48      	ldr	r2, [pc, #288]	@ (800cbcc <HAL_TIM_ConfigClockSource+0x9e8>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	f000 8246 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a46      	ldr	r2, [pc, #280]	@ (800cbd0 <HAL_TIM_ConfigClockSource+0x9ec>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	f000 8240 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a44      	ldr	r2, [pc, #272]	@ (800cbd4 <HAL_TIM_ConfigClockSource+0x9f0>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	f000 823a 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a42      	ldr	r2, [pc, #264]	@ (800cbd8 <HAL_TIM_ConfigClockSource+0x9f4>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d158      	bne.n	800cb84 <HAL_TIM_ConfigClockSource+0x9a0>
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cada:	f000 822f 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b70      	cmp	r3, #112	@ 0x70
 800cae4:	f000 822a 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800caf0:	f000 8224 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2b40      	cmp	r3, #64	@ 0x40
 800cafa:	f000 821f 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2b50      	cmp	r3, #80	@ 0x50
 800cb04:	f000 821a 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b60      	cmp	r3, #96	@ 0x60
 800cb0e:	f000 8215 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 8210 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2b10      	cmp	r3, #16
 800cb22:	f000 820b 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2b30      	cmp	r3, #48	@ 0x30
 800cb2c:	f000 8206 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb38:	f000 8200 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cb44:	f000 81fa 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a1c      	ldr	r2, [pc, #112]	@ (800cbc0 <HAL_TIM_ConfigClockSource+0x9dc>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	f000 81f4 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a1a      	ldr	r2, [pc, #104]	@ (800cbc4 <HAL_TIM_ConfigClockSource+0x9e0>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	f000 81ee 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4a18      	ldr	r2, [pc, #96]	@ (800cbc8 <HAL_TIM_ConfigClockSource+0x9e4>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	f000 81e8 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a16      	ldr	r2, [pc, #88]	@ (800cbcc <HAL_TIM_ConfigClockSource+0x9e8>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	f000 81e2 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a14      	ldr	r2, [pc, #80]	@ (800cbd0 <HAL_TIM_ConfigClockSource+0x9ec>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	f000 81dc 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a14      	ldr	r2, [pc, #80]	@ (800cbdc <HAL_TIM_ConfigClockSource+0x9f8>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d16b      	bne.n	800cc66 <HAL_TIM_ConfigClockSource+0xa82>
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb96:	f000 81d1 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2b70      	cmp	r3, #112	@ 0x70
 800cba0:	f000 81cc 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbac:	f000 81c6 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2b40      	cmp	r3, #64	@ 0x40
 800cbb6:	f000 81c1 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cbba:	e011      	b.n	800cbe0 <HAL_TIM_ConfigClockSource+0x9fc>
 800cbbc:	40012c00 	.word	0x40012c00
 800cbc0:	00100020 	.word	0x00100020
 800cbc4:	00100030 	.word	0x00100030
 800cbc8:	00100040 	.word	0x00100040
 800cbcc:	00100050 	.word	0x00100050
 800cbd0:	00100060 	.word	0x00100060
 800cbd4:	00100070 	.word	0x00100070
 800cbd8:	40000400 	.word	0x40000400
 800cbdc:	40000800 	.word	0x40000800
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2b50      	cmp	r3, #80	@ 0x50
 800cbe6:	f000 81a9 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2b60      	cmp	r3, #96	@ 0x60
 800cbf0:	f000 81a4 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	f000 819f 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2b10      	cmp	r3, #16
 800cc04:	f000 819a 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b20      	cmp	r3, #32
 800cc0e:	f000 8195 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc1a:	f000 818f 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cc26:	f000 8189 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4a98      	ldr	r2, [pc, #608]	@ (800ce90 <HAL_TIM_ConfigClockSource+0xcac>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	f000 8183 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a96      	ldr	r2, [pc, #600]	@ (800ce94 <HAL_TIM_ConfigClockSource+0xcb0>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	f000 817d 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a94      	ldr	r2, [pc, #592]	@ (800ce98 <HAL_TIM_ConfigClockSource+0xcb4>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	f000 8177 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a92      	ldr	r2, [pc, #584]	@ (800ce9c <HAL_TIM_ConfigClockSource+0xcb8>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	f000 8171 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a90      	ldr	r2, [pc, #576]	@ (800cea0 <HAL_TIM_ConfigClockSource+0xcbc>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	f000 816b 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4a8e      	ldr	r2, [pc, #568]	@ (800cea4 <HAL_TIM_ConfigClockSource+0xcc0>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d157      	bne.n	800cd20 <HAL_TIM_ConfigClockSource+0xb3c>
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc78:	f000 8160 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b70      	cmp	r3, #112	@ 0x70
 800cc82:	f000 815b 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc8e:	f000 8155 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b40      	cmp	r3, #64	@ 0x40
 800cc98:	f000 8150 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2b50      	cmp	r3, #80	@ 0x50
 800cca2:	f000 814b 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b60      	cmp	r3, #96	@ 0x60
 800ccac:	f000 8146 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f000 8141 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2b10      	cmp	r3, #16
 800ccc0:	f000 813c 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2b20      	cmp	r3, #32
 800ccca:	f000 8137 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2b30      	cmp	r3, #48	@ 0x30
 800ccd4:	f000 8132 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cce0:	f000 812c 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a69      	ldr	r2, [pc, #420]	@ (800ce90 <HAL_TIM_ConfigClockSource+0xcac>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	f000 8126 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a67      	ldr	r2, [pc, #412]	@ (800ce94 <HAL_TIM_ConfigClockSource+0xcb0>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	f000 8120 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a65      	ldr	r2, [pc, #404]	@ (800ce98 <HAL_TIM_ConfigClockSource+0xcb4>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	f000 811a 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a63      	ldr	r2, [pc, #396]	@ (800ce9c <HAL_TIM_ConfigClockSource+0xcb8>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	f000 8114 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a61      	ldr	r2, [pc, #388]	@ (800cea0 <HAL_TIM_ConfigClockSource+0xcbc>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	f000 810e 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a60      	ldr	r2, [pc, #384]	@ (800cea8 <HAL_TIM_ConfigClockSource+0xcc4>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d157      	bne.n	800cdda <HAL_TIM_ConfigClockSource+0xbf6>
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd32:	f000 8103 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2b70      	cmp	r3, #112	@ 0x70
 800cd3c:	f000 80fe 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd48:	f000 80f8 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2b40      	cmp	r3, #64	@ 0x40
 800cd52:	f000 80f3 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b50      	cmp	r3, #80	@ 0x50
 800cd5c:	f000 80ee 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2b60      	cmp	r3, #96	@ 0x60
 800cd66:	f000 80e9 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f000 80e4 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2b10      	cmp	r3, #16
 800cd7a:	f000 80df 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2b20      	cmp	r3, #32
 800cd84:	f000 80da 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b30      	cmp	r3, #48	@ 0x30
 800cd8e:	f000 80d5 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cd9a:	f000 80cf 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4a3b      	ldr	r2, [pc, #236]	@ (800ce90 <HAL_TIM_ConfigClockSource+0xcac>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	f000 80c9 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	4a39      	ldr	r2, [pc, #228]	@ (800ce94 <HAL_TIM_ConfigClockSource+0xcb0>)
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	f000 80c3 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a37      	ldr	r2, [pc, #220]	@ (800ce98 <HAL_TIM_ConfigClockSource+0xcb4>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	f000 80bd 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a35      	ldr	r2, [pc, #212]	@ (800ce9c <HAL_TIM_ConfigClockSource+0xcb8>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	f000 80b7 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a33      	ldr	r2, [pc, #204]	@ (800cea0 <HAL_TIM_ConfigClockSource+0xcbc>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	f000 80b1 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a33      	ldr	r2, [pc, #204]	@ (800ceac <HAL_TIM_ConfigClockSource+0xcc8>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d146      	bne.n	800ce72 <HAL_TIM_ConfigClockSource+0xc8e>
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cdec:	f000 80a6 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2b40      	cmp	r3, #64	@ 0x40
 800cdf6:	f000 80a1 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2b50      	cmp	r3, #80	@ 0x50
 800ce00:	f000 809c 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2b60      	cmp	r3, #96	@ 0x60
 800ce0a:	f000 8097 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	f000 8092 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b10      	cmp	r3, #16
 800ce1e:	f000 808d 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2b20      	cmp	r3, #32
 800ce28:	f000 8088 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2b30      	cmp	r3, #48	@ 0x30
 800ce32:	f000 8083 	beq.w	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ce3e:	d07d      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ce48:	d078      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a11      	ldr	r2, [pc, #68]	@ (800ce94 <HAL_TIM_ConfigClockSource+0xcb0>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d073      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a0f      	ldr	r2, [pc, #60]	@ (800ce98 <HAL_TIM_ConfigClockSource+0xcb4>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d06e      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a0e      	ldr	r2, [pc, #56]	@ (800ce9c <HAL_TIM_ConfigClockSource+0xcb8>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d069      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4a0c      	ldr	r2, [pc, #48]	@ (800cea0 <HAL_TIM_ConfigClockSource+0xcbc>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d064      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a0e      	ldr	r2, [pc, #56]	@ (800ceb0 <HAL_TIM_ConfigClockSource+0xccc>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d15a      	bne.n	800cf32 <HAL_TIM_ConfigClockSource+0xd4e>
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce84:	d05a      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2b70      	cmp	r3, #112	@ 0x70
 800ce8c:	d056      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ce8e:	e011      	b.n	800ceb4 <HAL_TIM_ConfigClockSource+0xcd0>
 800ce90:	00100020 	.word	0x00100020
 800ce94:	00100030 	.word	0x00100030
 800ce98:	00100040 	.word	0x00100040
 800ce9c:	00100050 	.word	0x00100050
 800cea0:	00100060 	.word	0x00100060
 800cea4:	40000c00 	.word	0x40000c00
 800cea8:	40013400 	.word	0x40013400
 800ceac:	40014000 	.word	0x40014000
 800ceb0:	40015000 	.word	0x40015000
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cebc:	d03e      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b40      	cmp	r3, #64	@ 0x40
 800cec4:	d03a      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2b50      	cmp	r3, #80	@ 0x50
 800cecc:	d036      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2b60      	cmp	r3, #96	@ 0x60
 800ced4:	d032      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d02e      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	2b10      	cmp	r3, #16
 800cee4:	d02a      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2b20      	cmp	r3, #32
 800ceec:	d026      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2b30      	cmp	r3, #48	@ 0x30
 800cef4:	d022      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cefe:	d01d      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cf08:	d018      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	4a18      	ldr	r2, [pc, #96]	@ (800cf70 <HAL_TIM_ConfigClockSource+0xd8c>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d013      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4a16      	ldr	r2, [pc, #88]	@ (800cf74 <HAL_TIM_ConfigClockSource+0xd90>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d00e      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	4a15      	ldr	r2, [pc, #84]	@ (800cf78 <HAL_TIM_ConfigClockSource+0xd94>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d009      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4a13      	ldr	r2, [pc, #76]	@ (800cf7c <HAL_TIM_ConfigClockSource+0xd98>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d004      	beq.n	800cf3c <HAL_TIM_ConfigClockSource+0xd58>
 800cf32:	f241 6145 	movw	r1, #5701	@ 0x1645
 800cf36:	4812      	ldr	r0, [pc, #72]	@ (800cf80 <HAL_TIM_ConfigClockSource+0xd9c>)
 800cf38:	f7f5 f974 	bl	8002224 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4619      	mov	r1, r3
 800cf46:	4610      	mov	r0, r2
 800cf48:	f000 fd25 	bl	800d996 <TIM_ITRx_SetConfig>
      break;
 800cf4c:	e003      	b.n	800cf56 <HAL_TIM_ConfigClockSource+0xd72>
    }

    default:
      status = HAL_ERROR;
 800cf4e:	2301      	movs	r3, #1
 800cf50:	73fb      	strb	r3, [r7, #15]
      break;
 800cf52:	e000      	b.n	800cf56 <HAL_TIM_ConfigClockSource+0xd72>
      break;
 800cf54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cf66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3710      	adds	r7, #16
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	00100020 	.word	0x00100020
 800cf74:	00100030 	.word	0x00100030
 800cf78:	00100040 	.word	0x00100040
 800cf7c:	00100060 	.word	0x00100060
 800cf80:	080143b0 	.word	0x080143b0

0800cf84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf8c:	bf00      	nop
 800cf8e:	370c      	adds	r7, #12
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr

0800cf98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b083      	sub	sp, #12
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cfa0:	bf00      	nop
 800cfa2:	370c      	adds	r7, #12
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr

0800cfac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cfb4:	bf00      	nop
 800cfb6:	370c      	adds	r7, #12
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cfc8:	bf00      	nop
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	4a4c      	ldr	r2, [pc, #304]	@ (800d118 <TIM_Base_SetConfig+0x144>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d017      	beq.n	800d01c <TIM_Base_SetConfig+0x48>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cff2:	d013      	beq.n	800d01c <TIM_Base_SetConfig+0x48>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	4a49      	ldr	r2, [pc, #292]	@ (800d11c <TIM_Base_SetConfig+0x148>)
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d00f      	beq.n	800d01c <TIM_Base_SetConfig+0x48>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	4a48      	ldr	r2, [pc, #288]	@ (800d120 <TIM_Base_SetConfig+0x14c>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d00b      	beq.n	800d01c <TIM_Base_SetConfig+0x48>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	4a47      	ldr	r2, [pc, #284]	@ (800d124 <TIM_Base_SetConfig+0x150>)
 800d008:	4293      	cmp	r3, r2
 800d00a:	d007      	beq.n	800d01c <TIM_Base_SetConfig+0x48>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	4a46      	ldr	r2, [pc, #280]	@ (800d128 <TIM_Base_SetConfig+0x154>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d003      	beq.n	800d01c <TIM_Base_SetConfig+0x48>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	4a45      	ldr	r2, [pc, #276]	@ (800d12c <TIM_Base_SetConfig+0x158>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d108      	bne.n	800d02e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	4313      	orrs	r3, r2
 800d02c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4a39      	ldr	r2, [pc, #228]	@ (800d118 <TIM_Base_SetConfig+0x144>)
 800d032:	4293      	cmp	r3, r2
 800d034:	d023      	beq.n	800d07e <TIM_Base_SetConfig+0xaa>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d03c:	d01f      	beq.n	800d07e <TIM_Base_SetConfig+0xaa>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	4a36      	ldr	r2, [pc, #216]	@ (800d11c <TIM_Base_SetConfig+0x148>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d01b      	beq.n	800d07e <TIM_Base_SetConfig+0xaa>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	4a35      	ldr	r2, [pc, #212]	@ (800d120 <TIM_Base_SetConfig+0x14c>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d017      	beq.n	800d07e <TIM_Base_SetConfig+0xaa>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4a34      	ldr	r2, [pc, #208]	@ (800d124 <TIM_Base_SetConfig+0x150>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d013      	beq.n	800d07e <TIM_Base_SetConfig+0xaa>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	4a33      	ldr	r2, [pc, #204]	@ (800d128 <TIM_Base_SetConfig+0x154>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d00f      	beq.n	800d07e <TIM_Base_SetConfig+0xaa>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	4a33      	ldr	r2, [pc, #204]	@ (800d130 <TIM_Base_SetConfig+0x15c>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d00b      	beq.n	800d07e <TIM_Base_SetConfig+0xaa>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	4a32      	ldr	r2, [pc, #200]	@ (800d134 <TIM_Base_SetConfig+0x160>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d007      	beq.n	800d07e <TIM_Base_SetConfig+0xaa>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	4a31      	ldr	r2, [pc, #196]	@ (800d138 <TIM_Base_SetConfig+0x164>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d003      	beq.n	800d07e <TIM_Base_SetConfig+0xaa>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4a2c      	ldr	r2, [pc, #176]	@ (800d12c <TIM_Base_SetConfig+0x158>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d108      	bne.n	800d090 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	68db      	ldr	r3, [r3, #12]
 800d08a:	68fa      	ldr	r2, [r7, #12]
 800d08c:	4313      	orrs	r3, r2
 800d08e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	695b      	ldr	r3, [r3, #20]
 800d09a:	4313      	orrs	r3, r2
 800d09c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	689a      	ldr	r2, [r3, #8]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	4a18      	ldr	r2, [pc, #96]	@ (800d118 <TIM_Base_SetConfig+0x144>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d013      	beq.n	800d0e4 <TIM_Base_SetConfig+0x110>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	4a1a      	ldr	r2, [pc, #104]	@ (800d128 <TIM_Base_SetConfig+0x154>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d00f      	beq.n	800d0e4 <TIM_Base_SetConfig+0x110>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	4a1a      	ldr	r2, [pc, #104]	@ (800d130 <TIM_Base_SetConfig+0x15c>)
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d00b      	beq.n	800d0e4 <TIM_Base_SetConfig+0x110>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	4a19      	ldr	r2, [pc, #100]	@ (800d134 <TIM_Base_SetConfig+0x160>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d007      	beq.n	800d0e4 <TIM_Base_SetConfig+0x110>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	4a18      	ldr	r2, [pc, #96]	@ (800d138 <TIM_Base_SetConfig+0x164>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d003      	beq.n	800d0e4 <TIM_Base_SetConfig+0x110>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	4a13      	ldr	r2, [pc, #76]	@ (800d12c <TIM_Base_SetConfig+0x158>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d103      	bne.n	800d0ec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	691a      	ldr	r2, [r3, #16]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	691b      	ldr	r3, [r3, #16]
 800d0f6:	f003 0301 	and.w	r3, r3, #1
 800d0fa:	2b01      	cmp	r3, #1
 800d0fc:	d105      	bne.n	800d10a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	691b      	ldr	r3, [r3, #16]
 800d102:	f023 0201 	bic.w	r2, r3, #1
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	611a      	str	r2, [r3, #16]
  }
}
 800d10a:	bf00      	nop
 800d10c:	3714      	adds	r7, #20
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	40012c00 	.word	0x40012c00
 800d11c:	40000400 	.word	0x40000400
 800d120:	40000800 	.word	0x40000800
 800d124:	40000c00 	.word	0x40000c00
 800d128:	40013400 	.word	0x40013400
 800d12c:	40015000 	.word	0x40015000
 800d130:	40014000 	.word	0x40014000
 800d134:	40014400 	.word	0x40014400
 800d138:	40014800 	.word	0x40014800

0800d13c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b086      	sub	sp, #24
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a1b      	ldr	r3, [r3, #32]
 800d14a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6a1b      	ldr	r3, [r3, #32]
 800d150:	f023 0201 	bic.w	r2, r3, #1
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	699b      	ldr	r3, [r3, #24]
 800d162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d16a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d16e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f023 0303 	bic.w	r3, r3, #3
 800d176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	68fa      	ldr	r2, [r7, #12]
 800d17e:	4313      	orrs	r3, r2
 800d180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	f023 0302 	bic.w	r3, r3, #2
 800d188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	697a      	ldr	r2, [r7, #20]
 800d190:	4313      	orrs	r3, r2
 800d192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	4a44      	ldr	r2, [pc, #272]	@ (800d2a8 <TIM_OC1_SetConfig+0x16c>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d013      	beq.n	800d1c4 <TIM_OC1_SetConfig+0x88>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	4a43      	ldr	r2, [pc, #268]	@ (800d2ac <TIM_OC1_SetConfig+0x170>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d00f      	beq.n	800d1c4 <TIM_OC1_SetConfig+0x88>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	4a42      	ldr	r2, [pc, #264]	@ (800d2b0 <TIM_OC1_SetConfig+0x174>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d00b      	beq.n	800d1c4 <TIM_OC1_SetConfig+0x88>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	4a41      	ldr	r2, [pc, #260]	@ (800d2b4 <TIM_OC1_SetConfig+0x178>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d007      	beq.n	800d1c4 <TIM_OC1_SetConfig+0x88>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4a40      	ldr	r2, [pc, #256]	@ (800d2b8 <TIM_OC1_SetConfig+0x17c>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d003      	beq.n	800d1c4 <TIM_OC1_SetConfig+0x88>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	4a3f      	ldr	r2, [pc, #252]	@ (800d2bc <TIM_OC1_SetConfig+0x180>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d119      	bne.n	800d1f8 <TIM_OC1_SetConfig+0xbc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d008      	beq.n	800d1de <TIM_OC1_SetConfig+0xa2>
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	2b08      	cmp	r3, #8
 800d1d2:	d004      	beq.n	800d1de <TIM_OC1_SetConfig+0xa2>
 800d1d4:	f641 411b 	movw	r1, #7195	@ 0x1c1b
 800d1d8:	4839      	ldr	r0, [pc, #228]	@ (800d2c0 <TIM_OC1_SetConfig+0x184>)
 800d1da:	f7f5 f823 	bl	8002224 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	f023 0308 	bic.w	r3, r3, #8
 800d1e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	f023 0304 	bic.w	r3, r3, #4
 800d1f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a2b      	ldr	r2, [pc, #172]	@ (800d2a8 <TIM_OC1_SetConfig+0x16c>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d013      	beq.n	800d228 <TIM_OC1_SetConfig+0xec>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4a2a      	ldr	r2, [pc, #168]	@ (800d2ac <TIM_OC1_SetConfig+0x170>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d00f      	beq.n	800d228 <TIM_OC1_SetConfig+0xec>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	4a29      	ldr	r2, [pc, #164]	@ (800d2b0 <TIM_OC1_SetConfig+0x174>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d00b      	beq.n	800d228 <TIM_OC1_SetConfig+0xec>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	4a28      	ldr	r2, [pc, #160]	@ (800d2b4 <TIM_OC1_SetConfig+0x178>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d007      	beq.n	800d228 <TIM_OC1_SetConfig+0xec>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	4a27      	ldr	r2, [pc, #156]	@ (800d2b8 <TIM_OC1_SetConfig+0x17c>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d003      	beq.n	800d228 <TIM_OC1_SetConfig+0xec>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	4a26      	ldr	r2, [pc, #152]	@ (800d2bc <TIM_OC1_SetConfig+0x180>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d12d      	bne.n	800d284 <TIM_OC1_SetConfig+0x148>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	699b      	ldr	r3, [r3, #24]
 800d22c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d230:	d008      	beq.n	800d244 <TIM_OC1_SetConfig+0x108>
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	699b      	ldr	r3, [r3, #24]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d004      	beq.n	800d244 <TIM_OC1_SetConfig+0x108>
 800d23a:	f641 4128 	movw	r1, #7208	@ 0x1c28
 800d23e:	4820      	ldr	r0, [pc, #128]	@ (800d2c0 <TIM_OC1_SetConfig+0x184>)
 800d240:	f7f4 fff0 	bl	8002224 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	695b      	ldr	r3, [r3, #20]
 800d248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d24c:	d008      	beq.n	800d260 <TIM_OC1_SetConfig+0x124>
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	695b      	ldr	r3, [r3, #20]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d004      	beq.n	800d260 <TIM_OC1_SetConfig+0x124>
 800d256:	f641 4129 	movw	r1, #7209	@ 0x1c29
 800d25a:	4819      	ldr	r0, [pc, #100]	@ (800d2c0 <TIM_OC1_SetConfig+0x184>)
 800d25c:	f7f4 ffe2 	bl	8002224 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d266:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d26e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	695b      	ldr	r3, [r3, #20]
 800d274:	693a      	ldr	r2, [r7, #16]
 800d276:	4313      	orrs	r3, r2
 800d278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	699b      	ldr	r3, [r3, #24]
 800d27e:	693a      	ldr	r2, [r7, #16]
 800d280:	4313      	orrs	r3, r2
 800d282:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	693a      	ldr	r2, [r7, #16]
 800d288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	68fa      	ldr	r2, [r7, #12]
 800d28e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	685a      	ldr	r2, [r3, #4]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	697a      	ldr	r2, [r7, #20]
 800d29c:	621a      	str	r2, [r3, #32]
}
 800d29e:	bf00      	nop
 800d2a0:	3718      	adds	r7, #24
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	40012c00 	.word	0x40012c00
 800d2ac:	40013400 	.word	0x40013400
 800d2b0:	40014000 	.word	0x40014000
 800d2b4:	40014400 	.word	0x40014400
 800d2b8:	40014800 	.word	0x40014800
 800d2bc:	40015000 	.word	0x40015000
 800d2c0:	080143b0 	.word	0x080143b0

0800d2c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6a1b      	ldr	r3, [r3, #32]
 800d2d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6a1b      	ldr	r3, [r3, #32]
 800d2d8:	f023 0210 	bic.w	r2, r3, #16
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	699b      	ldr	r3, [r3, #24]
 800d2ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d2f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d2f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d2fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	021b      	lsls	r3, r3, #8
 800d306:	68fa      	ldr	r2, [r7, #12]
 800d308:	4313      	orrs	r3, r2
 800d30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	f023 0320 	bic.w	r3, r3, #32
 800d312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	689b      	ldr	r3, [r3, #8]
 800d318:	011b      	lsls	r3, r3, #4
 800d31a:	697a      	ldr	r2, [r7, #20]
 800d31c:	4313      	orrs	r3, r2
 800d31e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	4a3f      	ldr	r2, [pc, #252]	@ (800d420 <TIM_OC2_SetConfig+0x15c>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d007      	beq.n	800d338 <TIM_OC2_SetConfig+0x74>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	4a3e      	ldr	r2, [pc, #248]	@ (800d424 <TIM_OC2_SetConfig+0x160>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d003      	beq.n	800d338 <TIM_OC2_SetConfig+0x74>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4a3d      	ldr	r2, [pc, #244]	@ (800d428 <TIM_OC2_SetConfig+0x164>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d11a      	bne.n	800d36e <TIM_OC2_SetConfig+0xaa>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d008      	beq.n	800d352 <TIM_OC2_SetConfig+0x8e>
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	2b08      	cmp	r3, #8
 800d346:	d004      	beq.n	800d352 <TIM_OC2_SetConfig+0x8e>
 800d348:	f641 4167 	movw	r1, #7271	@ 0x1c67
 800d34c:	4837      	ldr	r0, [pc, #220]	@ (800d42c <TIM_OC2_SetConfig+0x168>)
 800d34e:	f7f4 ff69 	bl	8002224 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	011b      	lsls	r3, r3, #4
 800d360:	697a      	ldr	r2, [r7, #20]
 800d362:	4313      	orrs	r3, r2
 800d364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d36c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	4a2b      	ldr	r2, [pc, #172]	@ (800d420 <TIM_OC2_SetConfig+0x15c>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d013      	beq.n	800d39e <TIM_OC2_SetConfig+0xda>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	4a2a      	ldr	r2, [pc, #168]	@ (800d424 <TIM_OC2_SetConfig+0x160>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d00f      	beq.n	800d39e <TIM_OC2_SetConfig+0xda>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	4a2b      	ldr	r2, [pc, #172]	@ (800d430 <TIM_OC2_SetConfig+0x16c>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d00b      	beq.n	800d39e <TIM_OC2_SetConfig+0xda>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	4a2a      	ldr	r2, [pc, #168]	@ (800d434 <TIM_OC2_SetConfig+0x170>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d007      	beq.n	800d39e <TIM_OC2_SetConfig+0xda>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	4a29      	ldr	r2, [pc, #164]	@ (800d438 <TIM_OC2_SetConfig+0x174>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d003      	beq.n	800d39e <TIM_OC2_SetConfig+0xda>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4a23      	ldr	r2, [pc, #140]	@ (800d428 <TIM_OC2_SetConfig+0x164>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d12f      	bne.n	800d3fe <TIM_OC2_SetConfig+0x13a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	699b      	ldr	r3, [r3, #24]
 800d3a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3a6:	d008      	beq.n	800d3ba <TIM_OC2_SetConfig+0xf6>
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	699b      	ldr	r3, [r3, #24]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d004      	beq.n	800d3ba <TIM_OC2_SetConfig+0xf6>
 800d3b0:	f641 4174 	movw	r1, #7284	@ 0x1c74
 800d3b4:	481d      	ldr	r0, [pc, #116]	@ (800d42c <TIM_OC2_SetConfig+0x168>)
 800d3b6:	f7f4 ff35 	bl	8002224 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	695b      	ldr	r3, [r3, #20]
 800d3be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3c2:	d008      	beq.n	800d3d6 <TIM_OC2_SetConfig+0x112>
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	695b      	ldr	r3, [r3, #20]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d004      	beq.n	800d3d6 <TIM_OC2_SetConfig+0x112>
 800d3cc:	f641 4175 	movw	r1, #7285	@ 0x1c75
 800d3d0:	4816      	ldr	r0, [pc, #88]	@ (800d42c <TIM_OC2_SetConfig+0x168>)
 800d3d2:	f7f4 ff27 	bl	8002224 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d3dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d3e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	695b      	ldr	r3, [r3, #20]
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	693a      	ldr	r2, [r7, #16]
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	699b      	ldr	r3, [r3, #24]
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	693a      	ldr	r2, [r7, #16]
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	693a      	ldr	r2, [r7, #16]
 800d402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	68fa      	ldr	r2, [r7, #12]
 800d408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	685a      	ldr	r2, [r3, #4]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	697a      	ldr	r2, [r7, #20]
 800d416:	621a      	str	r2, [r3, #32]
}
 800d418:	bf00      	nop
 800d41a:	3718      	adds	r7, #24
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	40012c00 	.word	0x40012c00
 800d424:	40013400 	.word	0x40013400
 800d428:	40015000 	.word	0x40015000
 800d42c:	080143b0 	.word	0x080143b0
 800d430:	40014000 	.word	0x40014000
 800d434:	40014400 	.word	0x40014400
 800d438:	40014800 	.word	0x40014800

0800d43c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b086      	sub	sp, #24
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6a1b      	ldr	r3, [r3, #32]
 800d44a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6a1b      	ldr	r3, [r3, #32]
 800d450:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	685b      	ldr	r3, [r3, #4]
 800d45c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	69db      	ldr	r3, [r3, #28]
 800d462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d46a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d46e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f023 0303 	bic.w	r3, r3, #3
 800d476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	68fa      	ldr	r2, [r7, #12]
 800d47e:	4313      	orrs	r3, r2
 800d480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	021b      	lsls	r3, r3, #8
 800d490:	697a      	ldr	r2, [r7, #20]
 800d492:	4313      	orrs	r3, r2
 800d494:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	4a3f      	ldr	r2, [pc, #252]	@ (800d598 <TIM_OC3_SetConfig+0x15c>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d007      	beq.n	800d4ae <TIM_OC3_SetConfig+0x72>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	4a3e      	ldr	r2, [pc, #248]	@ (800d59c <TIM_OC3_SetConfig+0x160>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d003      	beq.n	800d4ae <TIM_OC3_SetConfig+0x72>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	4a3d      	ldr	r2, [pc, #244]	@ (800d5a0 <TIM_OC3_SetConfig+0x164>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d11a      	bne.n	800d4e4 <TIM_OC3_SetConfig+0xa8>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d008      	beq.n	800d4c8 <TIM_OC3_SetConfig+0x8c>
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	68db      	ldr	r3, [r3, #12]
 800d4ba:	2b08      	cmp	r3, #8
 800d4bc:	d004      	beq.n	800d4c8 <TIM_OC3_SetConfig+0x8c>
 800d4be:	f641 41b2 	movw	r1, #7346	@ 0x1cb2
 800d4c2:	4838      	ldr	r0, [pc, #224]	@ (800d5a4 <TIM_OC3_SetConfig+0x168>)
 800d4c4:	f7f4 feae 	bl	8002224 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d4ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	021b      	lsls	r3, r3, #8
 800d4d6:	697a      	ldr	r2, [r7, #20]
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d4e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	4a2c      	ldr	r2, [pc, #176]	@ (800d598 <TIM_OC3_SetConfig+0x15c>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d013      	beq.n	800d514 <TIM_OC3_SetConfig+0xd8>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	4a2b      	ldr	r2, [pc, #172]	@ (800d59c <TIM_OC3_SetConfig+0x160>)
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d00f      	beq.n	800d514 <TIM_OC3_SetConfig+0xd8>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	4a2c      	ldr	r2, [pc, #176]	@ (800d5a8 <TIM_OC3_SetConfig+0x16c>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d00b      	beq.n	800d514 <TIM_OC3_SetConfig+0xd8>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	4a2b      	ldr	r2, [pc, #172]	@ (800d5ac <TIM_OC3_SetConfig+0x170>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d007      	beq.n	800d514 <TIM_OC3_SetConfig+0xd8>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	4a2a      	ldr	r2, [pc, #168]	@ (800d5b0 <TIM_OC3_SetConfig+0x174>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d003      	beq.n	800d514 <TIM_OC3_SetConfig+0xd8>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	4a24      	ldr	r2, [pc, #144]	@ (800d5a0 <TIM_OC3_SetConfig+0x164>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d12f      	bne.n	800d574 <TIM_OC3_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	699b      	ldr	r3, [r3, #24]
 800d518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d51c:	d008      	beq.n	800d530 <TIM_OC3_SetConfig+0xf4>
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	699b      	ldr	r3, [r3, #24]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d004      	beq.n	800d530 <TIM_OC3_SetConfig+0xf4>
 800d526:	f641 41bf 	movw	r1, #7359	@ 0x1cbf
 800d52a:	481e      	ldr	r0, [pc, #120]	@ (800d5a4 <TIM_OC3_SetConfig+0x168>)
 800d52c:	f7f4 fe7a 	bl	8002224 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	695b      	ldr	r3, [r3, #20]
 800d534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d538:	d008      	beq.n	800d54c <TIM_OC3_SetConfig+0x110>
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	695b      	ldr	r3, [r3, #20]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d004      	beq.n	800d54c <TIM_OC3_SetConfig+0x110>
 800d542:	f44f 51e6 	mov.w	r1, #7360	@ 0x1cc0
 800d546:	4817      	ldr	r0, [pc, #92]	@ (800d5a4 <TIM_OC3_SetConfig+0x168>)
 800d548:	f7f4 fe6c 	bl	8002224 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d55a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	695b      	ldr	r3, [r3, #20]
 800d560:	011b      	lsls	r3, r3, #4
 800d562:	693a      	ldr	r2, [r7, #16]
 800d564:	4313      	orrs	r3, r2
 800d566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	699b      	ldr	r3, [r3, #24]
 800d56c:	011b      	lsls	r3, r3, #4
 800d56e:	693a      	ldr	r2, [r7, #16]
 800d570:	4313      	orrs	r3, r2
 800d572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	693a      	ldr	r2, [r7, #16]
 800d578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	68fa      	ldr	r2, [r7, #12]
 800d57e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	685a      	ldr	r2, [r3, #4]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	697a      	ldr	r2, [r7, #20]
 800d58c:	621a      	str	r2, [r3, #32]
}
 800d58e:	bf00      	nop
 800d590:	3718      	adds	r7, #24
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	40012c00 	.word	0x40012c00
 800d59c:	40013400 	.word	0x40013400
 800d5a0:	40015000 	.word	0x40015000
 800d5a4:	080143b0 	.word	0x080143b0
 800d5a8:	40014000 	.word	0x40014000
 800d5ac:	40014400 	.word	0x40014400
 800d5b0:	40014800 	.word	0x40014800

0800d5b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b086      	sub	sp, #24
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6a1b      	ldr	r3, [r3, #32]
 800d5c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6a1b      	ldr	r3, [r3, #32]
 800d5c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	69db      	ldr	r3, [r3, #28]
 800d5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d5e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d5e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d5ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	021b      	lsls	r3, r3, #8
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	031b      	lsls	r3, r3, #12
 800d60a:	697a      	ldr	r2, [r7, #20]
 800d60c:	4313      	orrs	r3, r2
 800d60e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	4a3f      	ldr	r2, [pc, #252]	@ (800d710 <TIM_OC4_SetConfig+0x15c>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d007      	beq.n	800d628 <TIM_OC4_SetConfig+0x74>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	4a3e      	ldr	r2, [pc, #248]	@ (800d714 <TIM_OC4_SetConfig+0x160>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d003      	beq.n	800d628 <TIM_OC4_SetConfig+0x74>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4a3d      	ldr	r2, [pc, #244]	@ (800d718 <TIM_OC4_SetConfig+0x164>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d11a      	bne.n	800d65e <TIM_OC4_SetConfig+0xaa>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	68db      	ldr	r3, [r3, #12]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d008      	beq.n	800d642 <TIM_OC4_SetConfig+0x8e>
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	2b08      	cmp	r3, #8
 800d636:	d004      	beq.n	800d642 <TIM_OC4_SetConfig+0x8e>
 800d638:	f641 41fe 	movw	r1, #7422	@ 0x1cfe
 800d63c:	4837      	ldr	r0, [pc, #220]	@ (800d71c <TIM_OC4_SetConfig+0x168>)
 800d63e:	f7f4 fdf1 	bl	8002224 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d648:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	031b      	lsls	r3, r3, #12
 800d650:	697a      	ldr	r2, [r7, #20]
 800d652:	4313      	orrs	r3, r2
 800d654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d65c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	4a2b      	ldr	r2, [pc, #172]	@ (800d710 <TIM_OC4_SetConfig+0x15c>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d013      	beq.n	800d68e <TIM_OC4_SetConfig+0xda>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	4a2a      	ldr	r2, [pc, #168]	@ (800d714 <TIM_OC4_SetConfig+0x160>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d00f      	beq.n	800d68e <TIM_OC4_SetConfig+0xda>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	4a2b      	ldr	r2, [pc, #172]	@ (800d720 <TIM_OC4_SetConfig+0x16c>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d00b      	beq.n	800d68e <TIM_OC4_SetConfig+0xda>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	4a2a      	ldr	r2, [pc, #168]	@ (800d724 <TIM_OC4_SetConfig+0x170>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d007      	beq.n	800d68e <TIM_OC4_SetConfig+0xda>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	4a29      	ldr	r2, [pc, #164]	@ (800d728 <TIM_OC4_SetConfig+0x174>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d003      	beq.n	800d68e <TIM_OC4_SetConfig+0xda>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	4a23      	ldr	r2, [pc, #140]	@ (800d718 <TIM_OC4_SetConfig+0x164>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d12f      	bne.n	800d6ee <TIM_OC4_SetConfig+0x13a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	699b      	ldr	r3, [r3, #24]
 800d692:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d696:	d008      	beq.n	800d6aa <TIM_OC4_SetConfig+0xf6>
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	699b      	ldr	r3, [r3, #24]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d004      	beq.n	800d6aa <TIM_OC4_SetConfig+0xf6>
 800d6a0:	f641 510b 	movw	r1, #7435	@ 0x1d0b
 800d6a4:	481d      	ldr	r0, [pc, #116]	@ (800d71c <TIM_OC4_SetConfig+0x168>)
 800d6a6:	f7f4 fdbd 	bl	8002224 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	695b      	ldr	r3, [r3, #20]
 800d6ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6b2:	d008      	beq.n	800d6c6 <TIM_OC4_SetConfig+0x112>
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	695b      	ldr	r3, [r3, #20]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d004      	beq.n	800d6c6 <TIM_OC4_SetConfig+0x112>
 800d6bc:	f641 510c 	movw	r1, #7436	@ 0x1d0c
 800d6c0:	4816      	ldr	r0, [pc, #88]	@ (800d71c <TIM_OC4_SetConfig+0x168>)
 800d6c2:	f7f4 fdaf 	bl	8002224 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d6cc:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d6d4:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	695b      	ldr	r3, [r3, #20]
 800d6da:	019b      	lsls	r3, r3, #6
 800d6dc:	693a      	ldr	r2, [r7, #16]
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	699b      	ldr	r3, [r3, #24]
 800d6e6:	019b      	lsls	r3, r3, #6
 800d6e8:	693a      	ldr	r2, [r7, #16]
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	693a      	ldr	r2, [r7, #16]
 800d6f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	68fa      	ldr	r2, [r7, #12]
 800d6f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	685a      	ldr	r2, [r3, #4]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	697a      	ldr	r2, [r7, #20]
 800d706:	621a      	str	r2, [r3, #32]
}
 800d708:	bf00      	nop
 800d70a:	3718      	adds	r7, #24
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	40012c00 	.word	0x40012c00
 800d714:	40013400 	.word	0x40013400
 800d718:	40015000 	.word	0x40015000
 800d71c:	080143b0 	.word	0x080143b0
 800d720:	40014000 	.word	0x40014000
 800d724:	40014400 	.word	0x40014400
 800d728:	40014800 	.word	0x40014800

0800d72c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b087      	sub	sp, #28
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6a1b      	ldr	r3, [r3, #32]
 800d73a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6a1b      	ldr	r3, [r3, #32]
 800d740:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d75a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d75e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	68fa      	ldr	r2, [r7, #12]
 800d766:	4313      	orrs	r3, r2
 800d768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d770:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	689b      	ldr	r3, [r3, #8]
 800d776:	041b      	lsls	r3, r3, #16
 800d778:	693a      	ldr	r2, [r7, #16]
 800d77a:	4313      	orrs	r3, r2
 800d77c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4a19      	ldr	r2, [pc, #100]	@ (800d7e8 <TIM_OC5_SetConfig+0xbc>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d013      	beq.n	800d7ae <TIM_OC5_SetConfig+0x82>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	4a18      	ldr	r2, [pc, #96]	@ (800d7ec <TIM_OC5_SetConfig+0xc0>)
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d00f      	beq.n	800d7ae <TIM_OC5_SetConfig+0x82>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4a17      	ldr	r2, [pc, #92]	@ (800d7f0 <TIM_OC5_SetConfig+0xc4>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d00b      	beq.n	800d7ae <TIM_OC5_SetConfig+0x82>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4a16      	ldr	r2, [pc, #88]	@ (800d7f4 <TIM_OC5_SetConfig+0xc8>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d007      	beq.n	800d7ae <TIM_OC5_SetConfig+0x82>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4a15      	ldr	r2, [pc, #84]	@ (800d7f8 <TIM_OC5_SetConfig+0xcc>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d003      	beq.n	800d7ae <TIM_OC5_SetConfig+0x82>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	4a14      	ldr	r2, [pc, #80]	@ (800d7fc <TIM_OC5_SetConfig+0xd0>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d109      	bne.n	800d7c2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d7b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	695b      	ldr	r3, [r3, #20]
 800d7ba:	021b      	lsls	r3, r3, #8
 800d7bc:	697a      	ldr	r2, [r7, #20]
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	697a      	ldr	r2, [r7, #20]
 800d7c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	685a      	ldr	r2, [r3, #4]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	693a      	ldr	r2, [r7, #16]
 800d7da:	621a      	str	r2, [r3, #32]
}
 800d7dc:	bf00      	nop
 800d7de:	371c      	adds	r7, #28
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr
 800d7e8:	40012c00 	.word	0x40012c00
 800d7ec:	40013400 	.word	0x40013400
 800d7f0:	40014000 	.word	0x40014000
 800d7f4:	40014400 	.word	0x40014400
 800d7f8:	40014800 	.word	0x40014800
 800d7fc:	40015000 	.word	0x40015000

0800d800 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d800:	b480      	push	{r7}
 800d802:	b087      	sub	sp, #28
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6a1b      	ldr	r3, [r3, #32]
 800d80e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6a1b      	ldr	r3, [r3, #32]
 800d814:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d82e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	021b      	lsls	r3, r3, #8
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	4313      	orrs	r3, r2
 800d83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	689b      	ldr	r3, [r3, #8]
 800d84c:	051b      	lsls	r3, r3, #20
 800d84e:	693a      	ldr	r2, [r7, #16]
 800d850:	4313      	orrs	r3, r2
 800d852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4a1a      	ldr	r2, [pc, #104]	@ (800d8c0 <TIM_OC6_SetConfig+0xc0>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d013      	beq.n	800d884 <TIM_OC6_SetConfig+0x84>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	4a19      	ldr	r2, [pc, #100]	@ (800d8c4 <TIM_OC6_SetConfig+0xc4>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d00f      	beq.n	800d884 <TIM_OC6_SetConfig+0x84>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4a18      	ldr	r2, [pc, #96]	@ (800d8c8 <TIM_OC6_SetConfig+0xc8>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d00b      	beq.n	800d884 <TIM_OC6_SetConfig+0x84>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	4a17      	ldr	r2, [pc, #92]	@ (800d8cc <TIM_OC6_SetConfig+0xcc>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d007      	beq.n	800d884 <TIM_OC6_SetConfig+0x84>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4a16      	ldr	r2, [pc, #88]	@ (800d8d0 <TIM_OC6_SetConfig+0xd0>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d003      	beq.n	800d884 <TIM_OC6_SetConfig+0x84>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	4a15      	ldr	r2, [pc, #84]	@ (800d8d4 <TIM_OC6_SetConfig+0xd4>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d109      	bne.n	800d898 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d88a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	695b      	ldr	r3, [r3, #20]
 800d890:	029b      	lsls	r3, r3, #10
 800d892:	697a      	ldr	r2, [r7, #20]
 800d894:	4313      	orrs	r3, r2
 800d896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	697a      	ldr	r2, [r7, #20]
 800d89c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	685a      	ldr	r2, [r3, #4]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	693a      	ldr	r2, [r7, #16]
 800d8b0:	621a      	str	r2, [r3, #32]
}
 800d8b2:	bf00      	nop
 800d8b4:	371c      	adds	r7, #28
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
 800d8be:	bf00      	nop
 800d8c0:	40012c00 	.word	0x40012c00
 800d8c4:	40013400 	.word	0x40013400
 800d8c8:	40014000 	.word	0x40014000
 800d8cc:	40014400 	.word	0x40014400
 800d8d0:	40014800 	.word	0x40014800
 800d8d4:	40015000 	.word	0x40015000

0800d8d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b087      	sub	sp, #28
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	6a1b      	ldr	r3, [r3, #32]
 800d8e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	6a1b      	ldr	r3, [r3, #32]
 800d8ee:	f023 0201 	bic.w	r2, r3, #1
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	699b      	ldr	r3, [r3, #24]
 800d8fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	011b      	lsls	r3, r3, #4
 800d908:	693a      	ldr	r2, [r7, #16]
 800d90a:	4313      	orrs	r3, r2
 800d90c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	f023 030a 	bic.w	r3, r3, #10
 800d914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d916:	697a      	ldr	r2, [r7, #20]
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	4313      	orrs	r3, r2
 800d91c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	693a      	ldr	r2, [r7, #16]
 800d922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	697a      	ldr	r2, [r7, #20]
 800d928:	621a      	str	r2, [r3, #32]
}
 800d92a:	bf00      	nop
 800d92c:	371c      	adds	r7, #28
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr

0800d936 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d936:	b480      	push	{r7}
 800d938:	b087      	sub	sp, #28
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	60f8      	str	r0, [r7, #12]
 800d93e:	60b9      	str	r1, [r7, #8]
 800d940:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	6a1b      	ldr	r3, [r3, #32]
 800d946:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	6a1b      	ldr	r3, [r3, #32]
 800d94c:	f023 0210 	bic.w	r2, r3, #16
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	699b      	ldr	r3, [r3, #24]
 800d958:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d960:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	031b      	lsls	r3, r3, #12
 800d966:	693a      	ldr	r2, [r7, #16]
 800d968:	4313      	orrs	r3, r2
 800d96a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d972:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	011b      	lsls	r3, r3, #4
 800d978:	697a      	ldr	r2, [r7, #20]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	693a      	ldr	r2, [r7, #16]
 800d982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	697a      	ldr	r2, [r7, #20]
 800d988:	621a      	str	r2, [r3, #32]
}
 800d98a:	bf00      	nop
 800d98c:	371c      	adds	r7, #28
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr

0800d996 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d996:	b480      	push	{r7}
 800d998:	b085      	sub	sp, #20
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
 800d99e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	689b      	ldr	r3, [r3, #8]
 800d9a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800d9ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d9b2:	683a      	ldr	r2, [r7, #0]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	f043 0307 	orr.w	r3, r3, #7
 800d9bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	609a      	str	r2, [r3, #8]
}
 800d9c4:	bf00      	nop
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b087      	sub	sp, #28
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	60b9      	str	r1, [r7, #8]
 800d9da:	607a      	str	r2, [r7, #4]
 800d9dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	689b      	ldr	r3, [r3, #8]
 800d9e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d9ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	021a      	lsls	r2, r3, #8
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	431a      	orrs	r2, r3
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	697a      	ldr	r2, [r7, #20]
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	697a      	ldr	r2, [r7, #20]
 800da02:	609a      	str	r2, [r3, #8]
}
 800da04:	bf00      	nop
 800da06:	371c      	adds	r7, #28
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr

0800da10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b086      	sub	sp, #24
 800da14:	af00      	add	r7, sp, #0
 800da16:	60f8      	str	r0, [r7, #12]
 800da18:	60b9      	str	r1, [r7, #8]
 800da1a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	4a31      	ldr	r2, [pc, #196]	@ (800dae4 <TIM_CCxChannelCmd+0xd4>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d028      	beq.n	800da76 <TIM_CCxChannelCmd+0x66>
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da2a:	d024      	beq.n	800da76 <TIM_CCxChannelCmd+0x66>
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	4a2e      	ldr	r2, [pc, #184]	@ (800dae8 <TIM_CCxChannelCmd+0xd8>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d020      	beq.n	800da76 <TIM_CCxChannelCmd+0x66>
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	4a2d      	ldr	r2, [pc, #180]	@ (800daec <TIM_CCxChannelCmd+0xdc>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d01c      	beq.n	800da76 <TIM_CCxChannelCmd+0x66>
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	4a2c      	ldr	r2, [pc, #176]	@ (800daf0 <TIM_CCxChannelCmd+0xe0>)
 800da40:	4293      	cmp	r3, r2
 800da42:	d018      	beq.n	800da76 <TIM_CCxChannelCmd+0x66>
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	4a2b      	ldr	r2, [pc, #172]	@ (800daf4 <TIM_CCxChannelCmd+0xe4>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d014      	beq.n	800da76 <TIM_CCxChannelCmd+0x66>
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	4a2a      	ldr	r2, [pc, #168]	@ (800daf8 <TIM_CCxChannelCmd+0xe8>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d010      	beq.n	800da76 <TIM_CCxChannelCmd+0x66>
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	4a29      	ldr	r2, [pc, #164]	@ (800dafc <TIM_CCxChannelCmd+0xec>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d00c      	beq.n	800da76 <TIM_CCxChannelCmd+0x66>
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	4a28      	ldr	r2, [pc, #160]	@ (800db00 <TIM_CCxChannelCmd+0xf0>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d008      	beq.n	800da76 <TIM_CCxChannelCmd+0x66>
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	4a27      	ldr	r2, [pc, #156]	@ (800db04 <TIM_CCxChannelCmd+0xf4>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d004      	beq.n	800da76 <TIM_CCxChannelCmd+0x66>
 800da6c:	f641 7184 	movw	r1, #8068	@ 0x1f84
 800da70:	4825      	ldr	r0, [pc, #148]	@ (800db08 <TIM_CCxChannelCmd+0xf8>)
 800da72:	f7f4 fbd7 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d016      	beq.n	800daaa <TIM_CCxChannelCmd+0x9a>
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	2b04      	cmp	r3, #4
 800da80:	d013      	beq.n	800daaa <TIM_CCxChannelCmd+0x9a>
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	2b08      	cmp	r3, #8
 800da86:	d010      	beq.n	800daaa <TIM_CCxChannelCmd+0x9a>
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	2b0c      	cmp	r3, #12
 800da8c:	d00d      	beq.n	800daaa <TIM_CCxChannelCmd+0x9a>
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	2b10      	cmp	r3, #16
 800da92:	d00a      	beq.n	800daaa <TIM_CCxChannelCmd+0x9a>
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	2b14      	cmp	r3, #20
 800da98:	d007      	beq.n	800daaa <TIM_CCxChannelCmd+0x9a>
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	2b3c      	cmp	r3, #60	@ 0x3c
 800da9e:	d004      	beq.n	800daaa <TIM_CCxChannelCmd+0x9a>
 800daa0:	f641 7185 	movw	r1, #8069	@ 0x1f85
 800daa4:	4818      	ldr	r0, [pc, #96]	@ (800db08 <TIM_CCxChannelCmd+0xf8>)
 800daa6:	f7f4 fbbd 	bl	8002224 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	f003 031f 	and.w	r3, r3, #31
 800dab0:	2201      	movs	r2, #1
 800dab2:	fa02 f303 	lsl.w	r3, r2, r3
 800dab6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	6a1a      	ldr	r2, [r3, #32]
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	43db      	mvns	r3, r3
 800dac0:	401a      	ands	r2, r3
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	6a1a      	ldr	r2, [r3, #32]
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	f003 031f 	and.w	r3, r3, #31
 800dad0:	6879      	ldr	r1, [r7, #4]
 800dad2:	fa01 f303 	lsl.w	r3, r1, r3
 800dad6:	431a      	orrs	r2, r3
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	621a      	str	r2, [r3, #32]
}
 800dadc:	bf00      	nop
 800dade:	3718      	adds	r7, #24
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	40012c00 	.word	0x40012c00
 800dae8:	40000400 	.word	0x40000400
 800daec:	40000800 	.word	0x40000800
 800daf0:	40000c00 	.word	0x40000c00
 800daf4:	40013400 	.word	0x40013400
 800daf8:	40014000 	.word	0x40014000
 800dafc:	40014400 	.word	0x40014400
 800db00:	40014800 	.word	0x40014800
 800db04:	40015000 	.word	0x40015000
 800db08:	080143b0 	.word	0x080143b0

0800db0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a39      	ldr	r2, [pc, #228]	@ (800dc00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d031      	beq.n	800db84 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db28:	d02c      	beq.n	800db84 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	4a35      	ldr	r2, [pc, #212]	@ (800dc04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800db30:	4293      	cmp	r3, r2
 800db32:	d027      	beq.n	800db84 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a33      	ldr	r2, [pc, #204]	@ (800dc08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d022      	beq.n	800db84 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	4a32      	ldr	r2, [pc, #200]	@ (800dc0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d01d      	beq.n	800db84 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a30      	ldr	r2, [pc, #192]	@ (800dc10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d018      	beq.n	800db84 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4a2f      	ldr	r2, [pc, #188]	@ (800dc14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d013      	beq.n	800db84 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a2d      	ldr	r2, [pc, #180]	@ (800dc18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d00e      	beq.n	800db84 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a2c      	ldr	r2, [pc, #176]	@ (800dc1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d009      	beq.n	800db84 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a2a      	ldr	r2, [pc, #168]	@ (800dc20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d004      	beq.n	800db84 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800db7a:	f640 018b 	movw	r1, #2187	@ 0x88b
 800db7e:	4829      	ldr	r0, [pc, #164]	@ (800dc24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800db80:	f7f4 fb50 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d025      	beq.n	800dbd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2b10      	cmp	r3, #16
 800db92:	d021      	beq.n	800dbd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2b20      	cmp	r3, #32
 800db9a:	d01d      	beq.n	800dbd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	2b30      	cmp	r3, #48	@ 0x30
 800dba2:	d019      	beq.n	800dbd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2b40      	cmp	r3, #64	@ 0x40
 800dbaa:	d015      	beq.n	800dbd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2b50      	cmp	r3, #80	@ 0x50
 800dbb2:	d011      	beq.n	800dbd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2b60      	cmp	r3, #96	@ 0x60
 800dbba:	d00d      	beq.n	800dbd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	2b70      	cmp	r3, #112	@ 0x70
 800dbc2:	d009      	beq.n	800dbd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dbcc:	d004      	beq.n	800dbd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800dbce:	f640 018c 	movw	r1, #2188	@ 0x88c
 800dbd2:	4814      	ldr	r0, [pc, #80]	@ (800dc24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dbd4:	f7f4 fb26 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	2b80      	cmp	r3, #128	@ 0x80
 800dbde:	d008      	beq.n	800dbf2 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d004      	beq.n	800dbf2 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
 800dbe8:	f640 018d 	movw	r1, #2189	@ 0x88d
 800dbec:	480d      	ldr	r0, [pc, #52]	@ (800dc24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dbee:	f7f4 fb19 	bl	8002224 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d115      	bne.n	800dc28 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800dbfc:	2302      	movs	r3, #2
 800dbfe:	e0e1      	b.n	800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0x2b8>
 800dc00:	40012c00 	.word	0x40012c00
 800dc04:	40000400 	.word	0x40000400
 800dc08:	40000800 	.word	0x40000800
 800dc0c:	40000c00 	.word	0x40000c00
 800dc10:	40001000 	.word	0x40001000
 800dc14:	40001400 	.word	0x40001400
 800dc18:	40013400 	.word	0x40013400
 800dc1c:	40014000 	.word	0x40014000
 800dc20:	40015000 	.word	0x40015000
 800dc24:	08014420 	.word	0x08014420
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2202      	movs	r2, #2
 800dc34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	689b      	ldr	r3, [r3, #8]
 800dc46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a5f      	ldr	r2, [pc, #380]	@ (800ddcc <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d009      	beq.n	800dc66 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4a5e      	ldr	r2, [pc, #376]	@ (800ddd0 <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d004      	beq.n	800dc66 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4a5c      	ldr	r2, [pc, #368]	@ (800ddd4 <HAL_TIMEx_MasterConfigSynchronization+0x2c8>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d161      	bne.n	800dd2a <HAL_TIMEx_MasterConfigSynchronization+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d054      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc76:	d04f      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dc80:	d04a      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dc8a:	d045      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dc94:	d040      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800dc9e:	d03b      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dca8:	d036      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dcb2:	d031      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800dcbc:	d02c      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dcc6:	d027      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800dcd0:	d022      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800dcda:	d01d      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800dce4:	d018      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800dcee:	d013      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800dcf8:	d00e      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800dd02:	d009      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800dd0c:	d004      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800dd0e:	f640 019f 	movw	r1, #2207	@ 0x89f
 800dd12:	4831      	ldr	r0, [pc, #196]	@ (800ddd8 <HAL_TIMEx_MasterConfigSynchronization+0x2cc>)
 800dd14:	f7f4 fa86 	bl	8002224 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800dd1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	68fa      	ldr	r2, [r7, #12]
 800dd26:	4313      	orrs	r3, r2
 800dd28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800dd30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	68fa      	ldr	r2, [r7, #12]
 800dd46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a1f      	ldr	r2, [pc, #124]	@ (800ddcc <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d022      	beq.n	800dd98 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd5a:	d01d      	beq.n	800dd98 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a1e      	ldr	r2, [pc, #120]	@ (800dddc <HAL_TIMEx_MasterConfigSynchronization+0x2d0>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d018      	beq.n	800dd98 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a1d      	ldr	r2, [pc, #116]	@ (800dde0 <HAL_TIMEx_MasterConfigSynchronization+0x2d4>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d013      	beq.n	800dd98 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4a1b      	ldr	r2, [pc, #108]	@ (800dde4 <HAL_TIMEx_MasterConfigSynchronization+0x2d8>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d00e      	beq.n	800dd98 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4a14      	ldr	r2, [pc, #80]	@ (800ddd0 <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d009      	beq.n	800dd98 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4a17      	ldr	r2, [pc, #92]	@ (800dde8 <HAL_TIMEx_MasterConfigSynchronization+0x2dc>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d004      	beq.n	800dd98 <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4a10      	ldr	r2, [pc, #64]	@ (800ddd4 <HAL_TIMEx_MasterConfigSynchronization+0x2c8>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d10c      	bne.n	800ddb2 <HAL_TIMEx_MasterConfigSynchronization+0x2a6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	68ba      	ldr	r2, [r7, #8]
 800dda6:	4313      	orrs	r3, r2
 800dda8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	68ba      	ldr	r2, [r7, #8]
 800ddb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ddc2:	2300      	movs	r3, #0
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3710      	adds	r7, #16
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	40012c00 	.word	0x40012c00
 800ddd0:	40013400 	.word	0x40013400
 800ddd4:	40015000 	.word	0x40015000
 800ddd8:	08014420 	.word	0x08014420
 800dddc:	40000400 	.word	0x40000400
 800dde0:	40000800 	.word	0x40000800
 800dde4:	40000c00 	.word	0x40000c00
 800dde8:	40014000 	.word	0x40014000

0800ddec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b084      	sub	sp, #16
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4a53      	ldr	r2, [pc, #332]	@ (800df4c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d01d      	beq.n	800de40 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a51      	ldr	r2, [pc, #324]	@ (800df50 <HAL_TIMEx_ConfigBreakDeadTime+0x164>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d018      	beq.n	800de40 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4a50      	ldr	r2, [pc, #320]	@ (800df54 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d013      	beq.n	800de40 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4a4e      	ldr	r2, [pc, #312]	@ (800df58 <HAL_TIMEx_ConfigBreakDeadTime+0x16c>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d00e      	beq.n	800de40 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4a4d      	ldr	r2, [pc, #308]	@ (800df5c <HAL_TIMEx_ConfigBreakDeadTime+0x170>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d009      	beq.n	800de40 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4a4b      	ldr	r2, [pc, #300]	@ (800df60 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d004      	beq.n	800de40 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800de36:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 800de3a:	484a      	ldr	r0, [pc, #296]	@ (800df64 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800de3c:	f7f4 f9f2 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800de48:	d008      	beq.n	800de5c <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d004      	beq.n	800de5c <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 800de52:	f640 01d5 	movw	r1, #2261	@ 0x8d5
 800de56:	4843      	ldr	r0, [pc, #268]	@ (800df64 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800de58:	f7f4 f9e4 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de64:	d008      	beq.n	800de78 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d004      	beq.n	800de78 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 800de6e:	f640 01d6 	movw	r1, #2262	@ 0x8d6
 800de72:	483c      	ldr	r0, [pc, #240]	@ (800df64 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800de74:	f7f4 f9d6 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d013      	beq.n	800dea8 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	689b      	ldr	r3, [r3, #8]
 800de84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de88:	d00e      	beq.n	800dea8 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	689b      	ldr	r3, [r3, #8]
 800de8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de92:	d009      	beq.n	800dea8 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	689b      	ldr	r3, [r3, #8]
 800de98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800de9c:	d004      	beq.n	800dea8 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 800de9e:	f640 01d7 	movw	r1, #2263	@ 0x8d7
 800dea2:	4830      	ldr	r0, [pc, #192]	@ (800df64 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800dea4:	f7f4 f9be 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	68db      	ldr	r3, [r3, #12]
 800deac:	2bff      	cmp	r3, #255	@ 0xff
 800deae:	d904      	bls.n	800deba <HAL_TIMEx_ConfigBreakDeadTime+0xce>
 800deb0:	f640 01d8 	movw	r1, #2264	@ 0x8d8
 800deb4:	482b      	ldr	r0, [pc, #172]	@ (800df64 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800deb6:	f7f4 f9b5 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	691b      	ldr	r3, [r3, #16]
 800debe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dec2:	d008      	beq.n	800ded6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	691b      	ldr	r3, [r3, #16]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d004      	beq.n	800ded6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 800decc:	f640 01d9 	movw	r1, #2265	@ 0x8d9
 800ded0:	4824      	ldr	r0, [pc, #144]	@ (800df64 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800ded2:	f7f4 f9a7 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	695b      	ldr	r3, [r3, #20]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d009      	beq.n	800def2 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	695b      	ldr	r3, [r3, #20]
 800dee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dee6:	d004      	beq.n	800def2 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 800dee8:	f640 01da 	movw	r1, #2266	@ 0x8da
 800deec:	481d      	ldr	r0, [pc, #116]	@ (800df64 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800deee:	f7f4 f999 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	699b      	ldr	r3, [r3, #24]
 800def6:	2b0f      	cmp	r3, #15
 800def8:	d904      	bls.n	800df04 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800defa:	f640 01db 	movw	r1, #2267	@ 0x8db
 800defe:	4819      	ldr	r0, [pc, #100]	@ (800df64 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800df00:	f7f4 f990 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800df0c:	d008      	beq.n	800df20 <HAL_TIMEx_ConfigBreakDeadTime+0x134>
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df12:	2b00      	cmp	r3, #0
 800df14:	d004      	beq.n	800df20 <HAL_TIMEx_ConfigBreakDeadTime+0x134>
 800df16:	f640 01dc 	movw	r1, #2268	@ 0x8dc
 800df1a:	4812      	ldr	r0, [pc, #72]	@ (800df64 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800df1c:	f7f4 f982 	bl	8002224 <assert_failed>
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	69db      	ldr	r3, [r3, #28]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d009      	beq.n	800df3c <HAL_TIMEx_ConfigBreakDeadTime+0x150>
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	69db      	ldr	r3, [r3, #28]
 800df2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df30:	d004      	beq.n	800df3c <HAL_TIMEx_ConfigBreakDeadTime+0x150>
 800df32:	f640 01dd 	movw	r1, #2269	@ 0x8dd
 800df36:	480b      	ldr	r0, [pc, #44]	@ (800df64 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 800df38:	f7f4 f974 	bl	8002224 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800df42:	2b01      	cmp	r3, #1
 800df44:	d110      	bne.n	800df68 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>
 800df46:	2302      	movs	r3, #2
 800df48:	e0ba      	b.n	800e0c0 <HAL_TIMEx_ConfigBreakDeadTime+0x2d4>
 800df4a:	bf00      	nop
 800df4c:	40012c00 	.word	0x40012c00
 800df50:	40013400 	.word	0x40013400
 800df54:	40014000 	.word	0x40014000
 800df58:	40014400 	.word	0x40014400
 800df5c:	40014800 	.word	0x40014800
 800df60:	40015000 	.word	0x40015000
 800df64:	08014420 	.word	0x08014420
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2201      	movs	r2, #1
 800df6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	68db      	ldr	r3, [r3, #12]
 800df7a:	4313      	orrs	r3, r2
 800df7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	689b      	ldr	r3, [r3, #8]
 800df88:	4313      	orrs	r3, r2
 800df8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	4313      	orrs	r3, r2
 800df98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	691b      	ldr	r3, [r3, #16]
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	695b      	ldr	r3, [r3, #20]
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	699b      	ldr	r3, [r3, #24]
 800dfdc:	041b      	lsls	r3, r3, #16
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	69db      	ldr	r3, [r3, #28]
 800dfec:	4313      	orrs	r3, r2
 800dfee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4a34      	ldr	r2, [pc, #208]	@ (800e0c8 <HAL_TIMEx_ConfigBreakDeadTime+0x2dc>)
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d009      	beq.n	800e00e <HAL_TIMEx_ConfigBreakDeadTime+0x222>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4a33      	ldr	r2, [pc, #204]	@ (800e0cc <HAL_TIMEx_ConfigBreakDeadTime+0x2e0>)
 800e000:	4293      	cmp	r3, r2
 800e002:	d004      	beq.n	800e00e <HAL_TIMEx_ConfigBreakDeadTime+0x222>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	4a31      	ldr	r2, [pc, #196]	@ (800e0d0 <HAL_TIMEx_ConfigBreakDeadTime+0x2e4>)
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d14f      	bne.n	800e0ae <HAL_TIMEx_ConfigBreakDeadTime+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	6a1b      	ldr	r3, [r3, #32]
 800e012:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e016:	d008      	beq.n	800e02a <HAL_TIMEx_ConfigBreakDeadTime+0x23e>
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	6a1b      	ldr	r3, [r3, #32]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d004      	beq.n	800e02a <HAL_TIMEx_ConfigBreakDeadTime+0x23e>
 800e020:	f640 01f3 	movw	r1, #2291	@ 0x8f3
 800e024:	482b      	ldr	r0, [pc, #172]	@ (800e0d4 <HAL_TIMEx_ConfigBreakDeadTime+0x2e8>)
 800e026:	f7f4 f8fd 	bl	8002224 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d009      	beq.n	800e046 <HAL_TIMEx_ConfigBreakDeadTime+0x25a>
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e036:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e03a:	d004      	beq.n	800e046 <HAL_TIMEx_ConfigBreakDeadTime+0x25a>
 800e03c:	f640 01f4 	movw	r1, #2292	@ 0x8f4
 800e040:	4824      	ldr	r0, [pc, #144]	@ (800e0d4 <HAL_TIMEx_ConfigBreakDeadTime+0x2e8>)
 800e042:	f7f4 f8ef 	bl	8002224 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e04a:	2b0f      	cmp	r3, #15
 800e04c:	d904      	bls.n	800e058 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>
 800e04e:	f640 01f5 	movw	r1, #2293	@ 0x8f5
 800e052:	4820      	ldr	r0, [pc, #128]	@ (800e0d4 <HAL_TIMEx_ConfigBreakDeadTime+0x2e8>)
 800e054:	f7f4 f8e6 	bl	8002224 <assert_failed>
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d009      	beq.n	800e074 <HAL_TIMEx_ConfigBreakDeadTime+0x288>
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e064:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e068:	d004      	beq.n	800e074 <HAL_TIMEx_ConfigBreakDeadTime+0x288>
 800e06a:	f640 01f6 	movw	r1, #2294	@ 0x8f6
 800e06e:	4819      	ldr	r0, [pc, #100]	@ (800e0d4 <HAL_TIMEx_ConfigBreakDeadTime+0x2e8>)
 800e070:	f7f4 f8d8 	bl	8002224 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e07e:	051b      	lsls	r3, r3, #20
 800e080:	4313      	orrs	r3, r2
 800e082:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	6a1b      	ldr	r3, [r3, #32]
 800e08e:	4313      	orrs	r3, r2
 800e090:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e09c:	4313      	orrs	r3, r2
 800e09e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0aa:	4313      	orrs	r3, r2
 800e0ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	68fa      	ldr	r2, [r7, #12]
 800e0b4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e0be:	2300      	movs	r3, #0
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3710      	adds	r7, #16
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	40012c00 	.word	0x40012c00
 800e0cc:	40013400 	.word	0x40013400
 800e0d0:	40015000 	.word	0x40015000
 800e0d4:	08014420 	.word	0x08014420

0800e0d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b083      	sub	sp, #12
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e0e0:	bf00      	nop
 800e0e2:	370c      	adds	r7, #12
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr

0800e0ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b083      	sub	sp, #12
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e0f4:	bf00      	nop
 800e0f6:	370c      	adds	r7, #12
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e108:	bf00      	nop
 800e10a:	370c      	adds	r7, #12
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr

0800e114 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800e11c:	bf00      	nop
 800e11e:	370c      	adds	r7, #12
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr

0800e128 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800e128:	b480      	push	{r7}
 800e12a:	b083      	sub	sp, #12
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800e130:	bf00      	nop
 800e132:	370c      	adds	r7, #12
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr

0800e13c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b083      	sub	sp, #12
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800e144:	bf00      	nop
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800e158:	bf00      	nop
 800e15a:	370c      	adds	r7, #12
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800e164:	b480      	push	{r7}
 800e166:	b085      	sub	sp, #20
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2200      	movs	r2, #0
 800e170:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e174:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800e178:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	3714      	adds	r7, #20
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr

0800e192 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800e192:	b480      	push	{r7}
 800e194:	b085      	sub	sp, #20
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e19a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800e19e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e1a6:	b29a      	uxth	r2, r3
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	43db      	mvns	r3, r3
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	4013      	ands	r3, r2
 800e1b2:	b29a      	uxth	r2, r3
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3714      	adds	r7, #20
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr

0800e1c8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b085      	sub	sp, #20
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	1d3b      	adds	r3, r7, #4
 800e1d2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800e1f6:	2300      	movs	r3, #0
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3714      	adds	r7, #20
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr

0800e204 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e204:	b480      	push	{r7}
 800e206:	b09d      	sub	sp, #116	@ 0x74
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800e20e:	2300      	movs	r3, #0
 800e210:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4413      	add	r3, r2
 800e21e:	881b      	ldrh	r3, [r3, #0]
 800e220:	b29b      	uxth	r3, r3
 800e222:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800e226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e22a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	78db      	ldrb	r3, [r3, #3]
 800e232:	2b03      	cmp	r3, #3
 800e234:	d81f      	bhi.n	800e276 <USB_ActivateEndpoint+0x72>
 800e236:	a201      	add	r2, pc, #4	@ (adr r2, 800e23c <USB_ActivateEndpoint+0x38>)
 800e238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e23c:	0800e24d 	.word	0x0800e24d
 800e240:	0800e269 	.word	0x0800e269
 800e244:	0800e27f 	.word	0x0800e27f
 800e248:	0800e25b 	.word	0x0800e25b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800e24c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e250:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e254:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800e258:	e012      	b.n	800e280 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800e25a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e25e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800e262:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800e266:	e00b      	b.n	800e280 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800e268:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e26c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e270:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800e274:	e004      	b.n	800e280 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800e276:	2301      	movs	r3, #1
 800e278:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800e27c:	e000      	b.n	800e280 <USB_ActivateEndpoint+0x7c>
      break;
 800e27e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	781b      	ldrb	r3, [r3, #0]
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	441a      	add	r2, r3
 800e28a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e28e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e292:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e296:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e29a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	009b      	lsls	r3, r3, #2
 800e2aa:	4413      	add	r3, r2
 800e2ac:	881b      	ldrh	r3, [r3, #0]
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	b21b      	sxth	r3, r3
 800e2b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e2b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2ba:	b21a      	sxth	r2, r3
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	b21b      	sxth	r3, r3
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	b21b      	sxth	r3, r3
 800e2c6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	441a      	add	r2, r3
 800e2d4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800e2d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e2dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e2e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	7b1b      	ldrb	r3, [r3, #12]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	f040 8178 	bne.w	800e5e6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	785b      	ldrb	r3, [r3, #1]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	f000 8084 	beq.w	800e408 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	61bb      	str	r3, [r7, #24]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	461a      	mov	r2, r3
 800e30e:	69bb      	ldr	r3, [r7, #24]
 800e310:	4413      	add	r3, r2
 800e312:	61bb      	str	r3, [r7, #24]
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	00da      	lsls	r2, r3, #3
 800e31a:	69bb      	ldr	r3, [r7, #24]
 800e31c:	4413      	add	r3, r2
 800e31e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e322:	617b      	str	r3, [r7, #20]
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	88db      	ldrh	r3, [r3, #6]
 800e328:	085b      	lsrs	r3, r3, #1
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	005b      	lsls	r3, r3, #1
 800e32e:	b29a      	uxth	r2, r3
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	4413      	add	r3, r2
 800e33e:	881b      	ldrh	r3, [r3, #0]
 800e340:	827b      	strh	r3, [r7, #18]
 800e342:	8a7b      	ldrh	r3, [r7, #18]
 800e344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d01b      	beq.n	800e384 <USB_ActivateEndpoint+0x180>
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	4413      	add	r3, r2
 800e356:	881b      	ldrh	r3, [r3, #0]
 800e358:	b29b      	uxth	r3, r3
 800e35a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e35e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e362:	823b      	strh	r3, [r7, #16]
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	441a      	add	r2, r3
 800e36e:	8a3b      	ldrh	r3, [r7, #16]
 800e370:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e374:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e37c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e380:	b29b      	uxth	r3, r3
 800e382:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	78db      	ldrb	r3, [r3, #3]
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d020      	beq.n	800e3ce <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e38c:	687a      	ldr	r2, [r7, #4]
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	4413      	add	r3, r2
 800e396:	881b      	ldrh	r3, [r3, #0]
 800e398:	b29b      	uxth	r3, r3
 800e39a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e39e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e3a2:	81bb      	strh	r3, [r7, #12]
 800e3a4:	89bb      	ldrh	r3, [r7, #12]
 800e3a6:	f083 0320 	eor.w	r3, r3, #32
 800e3aa:	81bb      	strh	r3, [r7, #12]
 800e3ac:	687a      	ldr	r2, [r7, #4]
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	441a      	add	r2, r3
 800e3b6:	89bb      	ldrh	r3, [r7, #12]
 800e3b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	8013      	strh	r3, [r2, #0]
 800e3cc:	e2d5      	b.n	800e97a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	009b      	lsls	r3, r3, #2
 800e3d6:	4413      	add	r3, r2
 800e3d8:	881b      	ldrh	r3, [r3, #0]
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e3e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e3e4:	81fb      	strh	r3, [r7, #14]
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	441a      	add	r2, r3
 800e3f0:	89fb      	ldrh	r3, [r7, #14]
 800e3f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e402:	b29b      	uxth	r3, r3
 800e404:	8013      	strh	r3, [r2, #0]
 800e406:	e2b8      	b.n	800e97a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e412:	b29b      	uxth	r3, r3
 800e414:	461a      	mov	r2, r3
 800e416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e418:	4413      	add	r3, r2
 800e41a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	781b      	ldrb	r3, [r3, #0]
 800e420:	00da      	lsls	r2, r3, #3
 800e422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e424:	4413      	add	r3, r2
 800e426:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800e42a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	88db      	ldrh	r3, [r3, #6]
 800e430:	085b      	lsrs	r3, r3, #1
 800e432:	b29b      	uxth	r3, r3
 800e434:	005b      	lsls	r3, r3, #1
 800e436:	b29a      	uxth	r2, r3
 800e438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e43a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e446:	b29b      	uxth	r3, r3
 800e448:	461a      	mov	r2, r3
 800e44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e44c:	4413      	add	r3, r2
 800e44e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	00da      	lsls	r2, r3, #3
 800e456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e458:	4413      	add	r3, r2
 800e45a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e45e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e462:	881b      	ldrh	r3, [r3, #0]
 800e464:	b29b      	uxth	r3, r3
 800e466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e46e:	801a      	strh	r2, [r3, #0]
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	691b      	ldr	r3, [r3, #16]
 800e474:	2b3e      	cmp	r3, #62	@ 0x3e
 800e476:	d91d      	bls.n	800e4b4 <USB_ActivateEndpoint+0x2b0>
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	691b      	ldr	r3, [r3, #16]
 800e47c:	095b      	lsrs	r3, r3, #5
 800e47e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	691b      	ldr	r3, [r3, #16]
 800e484:	f003 031f 	and.w	r3, r3, #31
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d102      	bne.n	800e492 <USB_ActivateEndpoint+0x28e>
 800e48c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e48e:	3b01      	subs	r3, #1
 800e490:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e494:	881b      	ldrh	r3, [r3, #0]
 800e496:	b29a      	uxth	r2, r3
 800e498:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	029b      	lsls	r3, r3, #10
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e4a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e4ac:	b29a      	uxth	r2, r3
 800e4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4b0:	801a      	strh	r2, [r3, #0]
 800e4b2:	e026      	b.n	800e502 <USB_ActivateEndpoint+0x2fe>
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	691b      	ldr	r3, [r3, #16]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d10a      	bne.n	800e4d2 <USB_ActivateEndpoint+0x2ce>
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4be:	881b      	ldrh	r3, [r3, #0]
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e4c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ce:	801a      	strh	r2, [r3, #0]
 800e4d0:	e017      	b.n	800e502 <USB_ActivateEndpoint+0x2fe>
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	691b      	ldr	r3, [r3, #16]
 800e4d6:	085b      	lsrs	r3, r3, #1
 800e4d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	691b      	ldr	r3, [r3, #16]
 800e4de:	f003 0301 	and.w	r3, r3, #1
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d002      	beq.n	800e4ec <USB_ActivateEndpoint+0x2e8>
 800e4e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ee:	881b      	ldrh	r3, [r3, #0]
 800e4f0:	b29a      	uxth	r2, r3
 800e4f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	029b      	lsls	r3, r3, #10
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	4313      	orrs	r3, r2
 800e4fc:	b29a      	uxth	r2, r3
 800e4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e500:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e502:	687a      	ldr	r2, [r7, #4]
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	009b      	lsls	r3, r3, #2
 800e50a:	4413      	add	r3, r2
 800e50c:	881b      	ldrh	r3, [r3, #0]
 800e50e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800e510:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e516:	2b00      	cmp	r3, #0
 800e518:	d01b      	beq.n	800e552 <USB_ActivateEndpoint+0x34e>
 800e51a:	687a      	ldr	r2, [r7, #4]
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	009b      	lsls	r3, r3, #2
 800e522:	4413      	add	r3, r2
 800e524:	881b      	ldrh	r3, [r3, #0]
 800e526:	b29b      	uxth	r3, r3
 800e528:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e52c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e530:	843b      	strh	r3, [r7, #32]
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	441a      	add	r2, r3
 800e53c:	8c3b      	ldrh	r3, [r7, #32]
 800e53e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e546:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e54a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e54e:	b29b      	uxth	r3, r3
 800e550:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d124      	bne.n	800e5a4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e55a:	687a      	ldr	r2, [r7, #4]
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	009b      	lsls	r3, r3, #2
 800e562:	4413      	add	r3, r2
 800e564:	881b      	ldrh	r3, [r3, #0]
 800e566:	b29b      	uxth	r3, r3
 800e568:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e56c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e570:	83bb      	strh	r3, [r7, #28]
 800e572:	8bbb      	ldrh	r3, [r7, #28]
 800e574:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e578:	83bb      	strh	r3, [r7, #28]
 800e57a:	8bbb      	ldrh	r3, [r7, #28]
 800e57c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e580:	83bb      	strh	r3, [r7, #28]
 800e582:	687a      	ldr	r2, [r7, #4]
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	441a      	add	r2, r3
 800e58c:	8bbb      	ldrh	r3, [r7, #28]
 800e58e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e59a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	8013      	strh	r3, [r2, #0]
 800e5a2:	e1ea      	b.n	800e97a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	4413      	add	r3, r2
 800e5ae:	881b      	ldrh	r3, [r3, #0]
 800e5b0:	b29b      	uxth	r3, r3
 800e5b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e5b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e5ba:	83fb      	strh	r3, [r7, #30]
 800e5bc:	8bfb      	ldrh	r3, [r7, #30]
 800e5be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e5c2:	83fb      	strh	r3, [r7, #30]
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	009b      	lsls	r3, r3, #2
 800e5cc:	441a      	add	r2, r3
 800e5ce:	8bfb      	ldrh	r3, [r7, #30]
 800e5d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e5d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e5d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e5dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	8013      	strh	r3, [r2, #0]
 800e5e4:	e1c9      	b.n	800e97a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	78db      	ldrb	r3, [r3, #3]
 800e5ea:	2b02      	cmp	r3, #2
 800e5ec:	d11e      	bne.n	800e62c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	4413      	add	r3, r2
 800e5f8:	881b      	ldrh	r3, [r3, #0]
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e604:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	009b      	lsls	r3, r3, #2
 800e610:	441a      	add	r2, r3
 800e612:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800e616:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e61a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e61e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e626:	b29b      	uxth	r3, r3
 800e628:	8013      	strh	r3, [r2, #0]
 800e62a:	e01d      	b.n	800e668 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	4413      	add	r3, r2
 800e636:	881b      	ldrh	r3, [r3, #0]
 800e638:	b29b      	uxth	r3, r3
 800e63a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800e63e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e642:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	009b      	lsls	r3, r3, #2
 800e64e:	441a      	add	r2, r3
 800e650:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800e654:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e658:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e65c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e664:	b29b      	uxth	r3, r3
 800e666:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e672:	b29b      	uxth	r3, r3
 800e674:	461a      	mov	r2, r3
 800e676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e678:	4413      	add	r3, r2
 800e67a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	00da      	lsls	r2, r3, #3
 800e682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e684:	4413      	add	r3, r2
 800e686:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e68a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	891b      	ldrh	r3, [r3, #8]
 800e690:	085b      	lsrs	r3, r3, #1
 800e692:	b29b      	uxth	r3, r3
 800e694:	005b      	lsls	r3, r3, #1
 800e696:	b29a      	uxth	r2, r3
 800e698:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e69a:	801a      	strh	r2, [r3, #0]
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e6a6:	b29b      	uxth	r3, r3
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6ac:	4413      	add	r3, r2
 800e6ae:	657b      	str	r3, [r7, #84]	@ 0x54
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	00da      	lsls	r2, r3, #3
 800e6b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6b8:	4413      	add	r3, r2
 800e6ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800e6be:	653b      	str	r3, [r7, #80]	@ 0x50
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	895b      	ldrh	r3, [r3, #10]
 800e6c4:	085b      	lsrs	r3, r3, #1
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	005b      	lsls	r3, r3, #1
 800e6ca:	b29a      	uxth	r2, r3
 800e6cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6ce:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	785b      	ldrb	r3, [r3, #1]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f040 8093 	bne.w	800e800 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e6da:	687a      	ldr	r2, [r7, #4]
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	4413      	add	r3, r2
 800e6e4:	881b      	ldrh	r3, [r3, #0]
 800e6e6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800e6ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800e6ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d01b      	beq.n	800e72e <USB_ActivateEndpoint+0x52a>
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	009b      	lsls	r3, r3, #2
 800e6fe:	4413      	add	r3, r2
 800e700:	881b      	ldrh	r3, [r3, #0]
 800e702:	b29b      	uxth	r3, r3
 800e704:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e70c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	009b      	lsls	r3, r3, #2
 800e716:	441a      	add	r2, r3
 800e718:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800e71a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e71e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e722:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e72e:	687a      	ldr	r2, [r7, #4]
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	4413      	add	r3, r2
 800e738:	881b      	ldrh	r3, [r3, #0]
 800e73a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800e73c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e73e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e742:	2b00      	cmp	r3, #0
 800e744:	d01b      	beq.n	800e77e <USB_ActivateEndpoint+0x57a>
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	009b      	lsls	r3, r3, #2
 800e74e:	4413      	add	r3, r2
 800e750:	881b      	ldrh	r3, [r3, #0]
 800e752:	b29b      	uxth	r3, r3
 800e754:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e75c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800e75e:	687a      	ldr	r2, [r7, #4]
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	441a      	add	r2, r3
 800e768:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e76a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e76e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e776:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	009b      	lsls	r3, r3, #2
 800e786:	4413      	add	r3, r2
 800e788:	881b      	ldrh	r3, [r3, #0]
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e794:	873b      	strh	r3, [r7, #56]	@ 0x38
 800e796:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800e798:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e79c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800e79e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800e7a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e7a4:	873b      	strh	r3, [r7, #56]	@ 0x38
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	441a      	add	r2, r3
 800e7b0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800e7b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e7b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e7ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e7be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7c2:	b29b      	uxth	r3, r3
 800e7c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	009b      	lsls	r3, r3, #2
 800e7ce:	4413      	add	r3, r2
 800e7d0:	881b      	ldrh	r3, [r3, #0]
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e7d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	441a      	add	r2, r3
 800e7e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e7ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e7ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e7f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e7f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	8013      	strh	r3, [r2, #0]
 800e7fe:	e0bc      	b.n	800e97a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e800:	687a      	ldr	r2, [r7, #4]
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	009b      	lsls	r3, r3, #2
 800e808:	4413      	add	r3, r2
 800e80a:	881b      	ldrh	r3, [r3, #0]
 800e80c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800e810:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e814:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d01d      	beq.n	800e858 <USB_ActivateEndpoint+0x654>
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	009b      	lsls	r3, r3, #2
 800e824:	4413      	add	r3, r2
 800e826:	881b      	ldrh	r3, [r3, #0]
 800e828:	b29b      	uxth	r3, r3
 800e82a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e82e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e832:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	441a      	add	r2, r3
 800e840:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800e844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e84c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e854:	b29b      	uxth	r3, r3
 800e856:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	009b      	lsls	r3, r3, #2
 800e860:	4413      	add	r3, r2
 800e862:	881b      	ldrh	r3, [r3, #0]
 800e864:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800e868:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800e86c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e870:	2b00      	cmp	r3, #0
 800e872:	d01d      	beq.n	800e8b0 <USB_ActivateEndpoint+0x6ac>
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	009b      	lsls	r3, r3, #2
 800e87c:	4413      	add	r3, r2
 800e87e:	881b      	ldrh	r3, [r3, #0]
 800e880:	b29b      	uxth	r3, r3
 800e882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e88a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	009b      	lsls	r3, r3, #2
 800e896:	441a      	add	r2, r3
 800e898:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800e89c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	78db      	ldrb	r3, [r3, #3]
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	d024      	beq.n	800e902 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	009b      	lsls	r3, r3, #2
 800e8c0:	4413      	add	r3, r2
 800e8c2:	881b      	ldrh	r3, [r3, #0]
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8ce:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800e8d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e8d6:	f083 0320 	eor.w	r3, r3, #32
 800e8da:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	009b      	lsls	r3, r3, #2
 800e8e6:	441a      	add	r2, r3
 800e8e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800e8ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	8013      	strh	r3, [r2, #0]
 800e900:	e01d      	b.n	800e93e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	009b      	lsls	r3, r3, #2
 800e90a:	4413      	add	r3, r2
 800e90c:	881b      	ldrh	r3, [r3, #0]
 800e90e:	b29b      	uxth	r3, r3
 800e910:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e918:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	009b      	lsls	r3, r3, #2
 800e924:	441a      	add	r2, r3
 800e926:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e92a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e92e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e932:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e93e:	687a      	ldr	r2, [r7, #4]
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	009b      	lsls	r3, r3, #2
 800e946:	4413      	add	r3, r2
 800e948:	881b      	ldrh	r3, [r3, #0]
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e954:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	441a      	add	r2, r3
 800e962:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e966:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e96a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e96e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e976:	b29b      	uxth	r3, r3
 800e978:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800e97a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3774      	adds	r7, #116	@ 0x74
 800e982:	46bd      	mov	sp, r7
 800e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e988:	4770      	bx	lr
 800e98a:	bf00      	nop

0800e98c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b08d      	sub	sp, #52	@ 0x34
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	7b1b      	ldrb	r3, [r3, #12]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	f040 808e 	bne.w	800eabc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	785b      	ldrb	r3, [r3, #1]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d044      	beq.n	800ea32 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	4413      	add	r3, r2
 800e9b2:	881b      	ldrh	r3, [r3, #0]
 800e9b4:	81bb      	strh	r3, [r7, #12]
 800e9b6:	89bb      	ldrh	r3, [r7, #12]
 800e9b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d01b      	beq.n	800e9f8 <USB_DeactivateEndpoint+0x6c>
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	009b      	lsls	r3, r3, #2
 800e9c8:	4413      	add	r3, r2
 800e9ca:	881b      	ldrh	r3, [r3, #0]
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e9d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e9d6:	817b      	strh	r3, [r7, #10]
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	441a      	add	r2, r3
 800e9e2:	897b      	ldrh	r3, [r7, #10]
 800e9e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e9e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e9ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e9f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e9f4:	b29b      	uxth	r3, r3
 800e9f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	009b      	lsls	r3, r3, #2
 800ea00:	4413      	add	r3, r2
 800ea02:	881b      	ldrh	r3, [r3, #0]
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ea0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea0e:	813b      	strh	r3, [r7, #8]
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	009b      	lsls	r3, r3, #2
 800ea18:	441a      	add	r2, r3
 800ea1a:	893b      	ldrh	r3, [r7, #8]
 800ea1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ea28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	8013      	strh	r3, [r2, #0]
 800ea30:	e192      	b.n	800ed58 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ea32:	687a      	ldr	r2, [r7, #4]
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	781b      	ldrb	r3, [r3, #0]
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	4413      	add	r3, r2
 800ea3c:	881b      	ldrh	r3, [r3, #0]
 800ea3e:	827b      	strh	r3, [r7, #18]
 800ea40:	8a7b      	ldrh	r3, [r7, #18]
 800ea42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d01b      	beq.n	800ea82 <USB_DeactivateEndpoint+0xf6>
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	009b      	lsls	r3, r3, #2
 800ea52:	4413      	add	r3, r2
 800ea54:	881b      	ldrh	r3, [r3, #0]
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ea5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea60:	823b      	strh	r3, [r7, #16]
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	009b      	lsls	r3, r3, #2
 800ea6a:	441a      	add	r2, r3
 800ea6c:	8a3b      	ldrh	r3, [r7, #16]
 800ea6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ea7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ea82:	687a      	ldr	r2, [r7, #4]
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	009b      	lsls	r3, r3, #2
 800ea8a:	4413      	add	r3, r2
 800ea8c:	881b      	ldrh	r3, [r3, #0]
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ea94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea98:	81fb      	strh	r3, [r7, #14]
 800ea9a:	687a      	ldr	r2, [r7, #4]
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	441a      	add	r2, r3
 800eaa4:	89fb      	ldrh	r3, [r7, #14]
 800eaa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eaaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eaae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	8013      	strh	r3, [r2, #0]
 800eaba:	e14d      	b.n	800ed58 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	785b      	ldrb	r3, [r3, #1]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	f040 80a5 	bne.w	800ec10 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	009b      	lsls	r3, r3, #2
 800eace:	4413      	add	r3, r2
 800ead0:	881b      	ldrh	r3, [r3, #0]
 800ead2:	843b      	strh	r3, [r7, #32]
 800ead4:	8c3b      	ldrh	r3, [r7, #32]
 800ead6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d01b      	beq.n	800eb16 <USB_DeactivateEndpoint+0x18a>
 800eade:	687a      	ldr	r2, [r7, #4]
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	009b      	lsls	r3, r3, #2
 800eae6:	4413      	add	r3, r2
 800eae8:	881b      	ldrh	r3, [r3, #0]
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eaf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eaf4:	83fb      	strh	r3, [r7, #30]
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	009b      	lsls	r3, r3, #2
 800eafe:	441a      	add	r2, r3
 800eb00:	8bfb      	ldrh	r3, [r7, #30]
 800eb02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eb06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eb0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800eb0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eb16:	687a      	ldr	r2, [r7, #4]
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	009b      	lsls	r3, r3, #2
 800eb1e:	4413      	add	r3, r2
 800eb20:	881b      	ldrh	r3, [r3, #0]
 800eb22:	83bb      	strh	r3, [r7, #28]
 800eb24:	8bbb      	ldrh	r3, [r7, #28]
 800eb26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d01b      	beq.n	800eb66 <USB_DeactivateEndpoint+0x1da>
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	009b      	lsls	r3, r3, #2
 800eb36:	4413      	add	r3, r2
 800eb38:	881b      	ldrh	r3, [r3, #0]
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eb40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb44:	837b      	strh	r3, [r7, #26]
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	009b      	lsls	r3, r3, #2
 800eb4e:	441a      	add	r2, r3
 800eb50:	8b7b      	ldrh	r3, [r7, #26]
 800eb52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eb56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eb5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eb5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	009b      	lsls	r3, r3, #2
 800eb6e:	4413      	add	r3, r2
 800eb70:	881b      	ldrh	r3, [r3, #0]
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eb78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb7c:	833b      	strh	r3, [r7, #24]
 800eb7e:	687a      	ldr	r2, [r7, #4]
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	009b      	lsls	r3, r3, #2
 800eb86:	441a      	add	r2, r3
 800eb88:	8b3b      	ldrh	r3, [r7, #24]
 800eb8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eb8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eb92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eb96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	009b      	lsls	r3, r3, #2
 800eba6:	4413      	add	r3, r2
 800eba8:	881b      	ldrh	r3, [r3, #0]
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ebb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ebb4:	82fb      	strh	r3, [r7, #22]
 800ebb6:	687a      	ldr	r2, [r7, #4]
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	441a      	add	r2, r3
 800ebc0:	8afb      	ldrh	r3, [r7, #22]
 800ebc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ebc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ebca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ebce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ebd6:	687a      	ldr	r2, [r7, #4]
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	4413      	add	r3, r2
 800ebe0:	881b      	ldrh	r3, [r3, #0]
 800ebe2:	b29b      	uxth	r3, r3
 800ebe4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ebe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ebec:	82bb      	strh	r3, [r7, #20]
 800ebee:	687a      	ldr	r2, [r7, #4]
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	009b      	lsls	r3, r3, #2
 800ebf6:	441a      	add	r2, r3
 800ebf8:	8abb      	ldrh	r3, [r7, #20]
 800ebfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ebfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ec02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ec06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	8013      	strh	r3, [r2, #0]
 800ec0e:	e0a3      	b.n	800ed58 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	4413      	add	r3, r2
 800ec1a:	881b      	ldrh	r3, [r3, #0]
 800ec1c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800ec1e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ec20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d01b      	beq.n	800ec60 <USB_DeactivateEndpoint+0x2d4>
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	009b      	lsls	r3, r3, #2
 800ec30:	4413      	add	r3, r2
 800ec32:	881b      	ldrh	r3, [r3, #0]
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ec3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec3e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800ec40:	687a      	ldr	r2, [r7, #4]
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	009b      	lsls	r3, r3, #2
 800ec48:	441a      	add	r2, r3
 800ec4a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ec4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ec50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ec54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ec58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec5c:	b29b      	uxth	r3, r3
 800ec5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	781b      	ldrb	r3, [r3, #0]
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	4413      	add	r3, r2
 800ec6a:	881b      	ldrh	r3, [r3, #0]
 800ec6c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800ec6e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ec70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d01b      	beq.n	800ecb0 <USB_DeactivateEndpoint+0x324>
 800ec78:	687a      	ldr	r2, [r7, #4]
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	4413      	add	r3, r2
 800ec82:	881b      	ldrh	r3, [r3, #0]
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ec8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec8e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	009b      	lsls	r3, r3, #2
 800ec98:	441a      	add	r2, r3
 800ec9a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ec9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eca8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ecb0:	687a      	ldr	r2, [r7, #4]
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	009b      	lsls	r3, r3, #2
 800ecb8:	4413      	add	r3, r2
 800ecba:	881b      	ldrh	r3, [r3, #0]
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ecc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ecc6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ecc8:	687a      	ldr	r2, [r7, #4]
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	009b      	lsls	r3, r3, #2
 800ecd0:	441a      	add	r2, r3
 800ecd2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ecd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ecd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ecdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ece0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	009b      	lsls	r3, r3, #2
 800ecf0:	4413      	add	r3, r2
 800ecf2:	881b      	ldrh	r3, [r3, #0]
 800ecf4:	b29b      	uxth	r3, r3
 800ecf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ecfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ecfe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ed00:	687a      	ldr	r2, [r7, #4]
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	009b      	lsls	r3, r3, #2
 800ed08:	441a      	add	r2, r3
 800ed0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ed10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ed14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ed18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	4413      	add	r3, r2
 800ed2a:	881b      	ldrh	r3, [r3, #0]
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ed32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed36:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	441a      	add	r2, r3
 800ed42:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ed44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ed48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ed4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ed50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ed58:	2300      	movs	r3, #0
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3734      	adds	r7, #52	@ 0x34
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr

0800ed66 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ed66:	b580      	push	{r7, lr}
 800ed68:	b0c2      	sub	sp, #264	@ 0x108
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ed74:	6018      	str	r0, [r3, #0]
 800ed76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed7e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ed80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	785b      	ldrb	r3, [r3, #1]
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	f040 86b7 	bne.w	800fb00 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ed92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	699a      	ldr	r2, [r3, #24]
 800ed9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eda2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	691b      	ldr	r3, [r3, #16]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d908      	bls.n	800edc0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800edae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	691b      	ldr	r3, [r3, #16]
 800edba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800edbe:	e007      	b.n	800edd0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800edc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	699b      	ldr	r3, [r3, #24]
 800edcc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800edd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	7b1b      	ldrb	r3, [r3, #12]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d13a      	bne.n	800ee56 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ede0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ede4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	6959      	ldr	r1, [r3, #20]
 800edec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	88da      	ldrh	r2, [r3, #6]
 800edf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edfc:	b29b      	uxth	r3, r3
 800edfe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ee02:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ee06:	6800      	ldr	r0, [r0, #0]
 800ee08:	f001 fc98 	bl	801073c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ee0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	613b      	str	r3, [r7, #16]
 800ee18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	461a      	mov	r2, r3
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	613b      	str	r3, [r7, #16]
 800ee30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	00da      	lsls	r2, r3, #3
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	4413      	add	r3, r2
 800ee42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ee46:	60fb      	str	r3, [r7, #12]
 800ee48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee4c:	b29a      	uxth	r2, r3
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	801a      	strh	r2, [r3, #0]
 800ee52:	f000 be1f 	b.w	800fa94 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ee56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	78db      	ldrb	r3, [r3, #3]
 800ee62:	2b02      	cmp	r3, #2
 800ee64:	f040 8462 	bne.w	800f72c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ee68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	6a1a      	ldr	r2, [r3, #32]
 800ee74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	691b      	ldr	r3, [r3, #16]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	f240 83df 	bls.w	800f644 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ee86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	4413      	add	r3, r2
 800eea0:	881b      	ldrh	r3, [r3, #0]
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eeac:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800eeb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eeb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	441a      	add	r2, r3
 800eeca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800eece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eed6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800eeda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eede:	b29b      	uxth	r3, r3
 800eee0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800eee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	6a1a      	ldr	r2, [r3, #32]
 800eeee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eef2:	1ad2      	subs	r2, r2, r3
 800eef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ef00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	009b      	lsls	r3, r3, #2
 800ef18:	4413      	add	r3, r2
 800ef1a:	881b      	ldrh	r3, [r3, #0]
 800ef1c:	b29b      	uxth	r3, r3
 800ef1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	f000 81c7 	beq.w	800f2b6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ef28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	633b      	str	r3, [r7, #48]	@ 0x30
 800ef34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	785b      	ldrb	r3, [r3, #1]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d177      	bne.n	800f034 <USB_EPStartXfer+0x2ce>
 800ef44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ef50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ef5e:	b29b      	uxth	r3, r3
 800ef60:	461a      	mov	r2, r3
 800ef62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef64:	4413      	add	r3, r2
 800ef66:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ef68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	00da      	lsls	r2, r3, #3
 800ef76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef78:	4413      	add	r3, r2
 800ef7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ef7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef82:	881b      	ldrh	r3, [r3, #0]
 800ef84:	b29b      	uxth	r3, r3
 800ef86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef8e:	801a      	strh	r2, [r3, #0]
 800ef90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef94:	2b3e      	cmp	r3, #62	@ 0x3e
 800ef96:	d921      	bls.n	800efdc <USB_EPStartXfer+0x276>
 800ef98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef9c:	095b      	lsrs	r3, r3, #5
 800ef9e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800efa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efa6:	f003 031f 	and.w	r3, r3, #31
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d104      	bne.n	800efb8 <USB_EPStartXfer+0x252>
 800efae:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800efb2:	3b01      	subs	r3, #1
 800efb4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800efb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efba:	881b      	ldrh	r3, [r3, #0]
 800efbc:	b29a      	uxth	r2, r3
 800efbe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	029b      	lsls	r3, r3, #10
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	4313      	orrs	r3, r2
 800efca:	b29b      	uxth	r3, r3
 800efcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800efd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800efd4:	b29a      	uxth	r2, r3
 800efd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd8:	801a      	strh	r2, [r3, #0]
 800efda:	e050      	b.n	800f07e <USB_EPStartXfer+0x318>
 800efdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d10a      	bne.n	800effa <USB_EPStartXfer+0x294>
 800efe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efe6:	881b      	ldrh	r3, [r3, #0]
 800efe8:	b29b      	uxth	r3, r3
 800efea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800efee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eff6:	801a      	strh	r2, [r3, #0]
 800eff8:	e041      	b.n	800f07e <USB_EPStartXfer+0x318>
 800effa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800effe:	085b      	lsrs	r3, r3, #1
 800f000:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800f004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f008:	f003 0301 	and.w	r3, r3, #1
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d004      	beq.n	800f01a <USB_EPStartXfer+0x2b4>
 800f010:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800f014:	3301      	adds	r3, #1
 800f016:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800f01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f01c:	881b      	ldrh	r3, [r3, #0]
 800f01e:	b29a      	uxth	r2, r3
 800f020:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800f024:	b29b      	uxth	r3, r3
 800f026:	029b      	lsls	r3, r3, #10
 800f028:	b29b      	uxth	r3, r3
 800f02a:	4313      	orrs	r3, r2
 800f02c:	b29a      	uxth	r2, r3
 800f02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f030:	801a      	strh	r2, [r3, #0]
 800f032:	e024      	b.n	800f07e <USB_EPStartXfer+0x318>
 800f034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	785b      	ldrb	r3, [r3, #1]
 800f040:	2b01      	cmp	r3, #1
 800f042:	d11c      	bne.n	800f07e <USB_EPStartXfer+0x318>
 800f044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f048:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f052:	b29b      	uxth	r3, r3
 800f054:	461a      	mov	r2, r3
 800f056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f058:	4413      	add	r3, r2
 800f05a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f05c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	00da      	lsls	r2, r3, #3
 800f06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f06c:	4413      	add	r3, r2
 800f06e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f078:	b29a      	uxth	r2, r3
 800f07a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f07c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f07e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	895b      	ldrh	r3, [r3, #10]
 800f08a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f08e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	6959      	ldr	r1, [r3, #20]
 800f09a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f0a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800f0a8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800f0ac:	6800      	ldr	r0, [r0, #0]
 800f0ae:	f001 fb45 	bl	801073c <USB_WritePMA>
            ep->xfer_buff += len;
 800f0b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	695a      	ldr	r2, [r3, #20]
 800f0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0c2:	441a      	add	r2, r3
 800f0c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f0d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	6a1a      	ldr	r2, [r3, #32]
 800f0dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	691b      	ldr	r3, [r3, #16]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d90f      	bls.n	800f10c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800f0ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	6a1a      	ldr	r2, [r3, #32]
 800f0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0fc:	1ad2      	subs	r2, r2, r3
 800f0fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	621a      	str	r2, [r3, #32]
 800f10a:	e00e      	b.n	800f12a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800f10c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	6a1b      	ldr	r3, [r3, #32]
 800f118:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800f11c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2200      	movs	r2, #0
 800f128:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f12a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f12e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	785b      	ldrb	r3, [r3, #1]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d177      	bne.n	800f22a <USB_EPStartXfer+0x4c4>
 800f13a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f13e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	61bb      	str	r3, [r7, #24]
 800f146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f14a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f154:	b29b      	uxth	r3, r3
 800f156:	461a      	mov	r2, r3
 800f158:	69bb      	ldr	r3, [r7, #24]
 800f15a:	4413      	add	r3, r2
 800f15c:	61bb      	str	r3, [r7, #24]
 800f15e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	00da      	lsls	r2, r3, #3
 800f16c:	69bb      	ldr	r3, [r7, #24]
 800f16e:	4413      	add	r3, r2
 800f170:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f174:	617b      	str	r3, [r7, #20]
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	881b      	ldrh	r3, [r3, #0]
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f180:	b29a      	uxth	r2, r3
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	801a      	strh	r2, [r3, #0]
 800f186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f18a:	2b3e      	cmp	r3, #62	@ 0x3e
 800f18c:	d921      	bls.n	800f1d2 <USB_EPStartXfer+0x46c>
 800f18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f192:	095b      	lsrs	r3, r3, #5
 800f194:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800f198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f19c:	f003 031f 	and.w	r3, r3, #31
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d104      	bne.n	800f1ae <USB_EPStartXfer+0x448>
 800f1a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f1a8:	3b01      	subs	r3, #1
 800f1aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	881b      	ldrh	r3, [r3, #0]
 800f1b2:	b29a      	uxth	r2, r3
 800f1b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	029b      	lsls	r3, r3, #10
 800f1bc:	b29b      	uxth	r3, r3
 800f1be:	4313      	orrs	r3, r2
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1ca:	b29a      	uxth	r2, r3
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	801a      	strh	r2, [r3, #0]
 800f1d0:	e056      	b.n	800f280 <USB_EPStartXfer+0x51a>
 800f1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d10a      	bne.n	800f1f0 <USB_EPStartXfer+0x48a>
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	881b      	ldrh	r3, [r3, #0]
 800f1de:	b29b      	uxth	r3, r3
 800f1e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1e8:	b29a      	uxth	r2, r3
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	801a      	strh	r2, [r3, #0]
 800f1ee:	e047      	b.n	800f280 <USB_EPStartXfer+0x51a>
 800f1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1f4:	085b      	lsrs	r3, r3, #1
 800f1f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800f1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1fe:	f003 0301 	and.w	r3, r3, #1
 800f202:	2b00      	cmp	r3, #0
 800f204:	d004      	beq.n	800f210 <USB_EPStartXfer+0x4aa>
 800f206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f20a:	3301      	adds	r3, #1
 800f20c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	881b      	ldrh	r3, [r3, #0]
 800f214:	b29a      	uxth	r2, r3
 800f216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	029b      	lsls	r3, r3, #10
 800f21e:	b29b      	uxth	r3, r3
 800f220:	4313      	orrs	r3, r2
 800f222:	b29a      	uxth	r2, r3
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	801a      	strh	r2, [r3, #0]
 800f228:	e02a      	b.n	800f280 <USB_EPStartXfer+0x51a>
 800f22a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f22e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	785b      	ldrb	r3, [r3, #1]
 800f236:	2b01      	cmp	r3, #1
 800f238:	d122      	bne.n	800f280 <USB_EPStartXfer+0x51a>
 800f23a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f23e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	623b      	str	r3, [r7, #32]
 800f246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f24a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f254:	b29b      	uxth	r3, r3
 800f256:	461a      	mov	r2, r3
 800f258:	6a3b      	ldr	r3, [r7, #32]
 800f25a:	4413      	add	r3, r2
 800f25c:	623b      	str	r3, [r7, #32]
 800f25e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	781b      	ldrb	r3, [r3, #0]
 800f26a:	00da      	lsls	r2, r3, #3
 800f26c:	6a3b      	ldr	r3, [r7, #32]
 800f26e:	4413      	add	r3, r2
 800f270:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f274:	61fb      	str	r3, [r7, #28]
 800f276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	69fb      	ldr	r3, [r7, #28]
 800f27e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	891b      	ldrh	r3, [r3, #8]
 800f28c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	6959      	ldr	r1, [r3, #20]
 800f29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2a0:	b29b      	uxth	r3, r3
 800f2a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f2a6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800f2aa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800f2ae:	6800      	ldr	r0, [r0, #0]
 800f2b0:	f001 fa44 	bl	801073c <USB_WritePMA>
 800f2b4:	e3ee      	b.n	800fa94 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	785b      	ldrb	r3, [r3, #1]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d177      	bne.n	800f3b6 <USB_EPStartXfer+0x650>
 800f2c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f2d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	461a      	mov	r2, r3
 800f2e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f2e6:	4413      	add	r3, r2
 800f2e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f2ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	00da      	lsls	r2, r3, #3
 800f2f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f2fa:	4413      	add	r3, r2
 800f2fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f300:	647b      	str	r3, [r7, #68]	@ 0x44
 800f302:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f304:	881b      	ldrh	r3, [r3, #0]
 800f306:	b29b      	uxth	r3, r3
 800f308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f310:	801a      	strh	r2, [r3, #0]
 800f312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f316:	2b3e      	cmp	r3, #62	@ 0x3e
 800f318:	d921      	bls.n	800f35e <USB_EPStartXfer+0x5f8>
 800f31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f31e:	095b      	lsrs	r3, r3, #5
 800f320:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800f324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f328:	f003 031f 	and.w	r3, r3, #31
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d104      	bne.n	800f33a <USB_EPStartXfer+0x5d4>
 800f330:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800f334:	3b01      	subs	r3, #1
 800f336:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800f33a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f33c:	881b      	ldrh	r3, [r3, #0]
 800f33e:	b29a      	uxth	r2, r3
 800f340:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800f344:	b29b      	uxth	r3, r3
 800f346:	029b      	lsls	r3, r3, #10
 800f348:	b29b      	uxth	r3, r3
 800f34a:	4313      	orrs	r3, r2
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f356:	b29a      	uxth	r2, r3
 800f358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f35a:	801a      	strh	r2, [r3, #0]
 800f35c:	e056      	b.n	800f40c <USB_EPStartXfer+0x6a6>
 800f35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f362:	2b00      	cmp	r3, #0
 800f364:	d10a      	bne.n	800f37c <USB_EPStartXfer+0x616>
 800f366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f368:	881b      	ldrh	r3, [r3, #0]
 800f36a:	b29b      	uxth	r3, r3
 800f36c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f374:	b29a      	uxth	r2, r3
 800f376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f378:	801a      	strh	r2, [r3, #0]
 800f37a:	e047      	b.n	800f40c <USB_EPStartXfer+0x6a6>
 800f37c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f380:	085b      	lsrs	r3, r3, #1
 800f382:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800f386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f38a:	f003 0301 	and.w	r3, r3, #1
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d004      	beq.n	800f39c <USB_EPStartXfer+0x636>
 800f392:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800f396:	3301      	adds	r3, #1
 800f398:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800f39c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f39e:	881b      	ldrh	r3, [r3, #0]
 800f3a0:	b29a      	uxth	r2, r3
 800f3a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	029b      	lsls	r3, r3, #10
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3b2:	801a      	strh	r2, [r3, #0]
 800f3b4:	e02a      	b.n	800f40c <USB_EPStartXfer+0x6a6>
 800f3b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f3ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	785b      	ldrb	r3, [r3, #1]
 800f3c2:	2b01      	cmp	r3, #1
 800f3c4:	d122      	bne.n	800f40c <USB_EPStartXfer+0x6a6>
 800f3c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f3ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	653b      	str	r3, [r7, #80]	@ 0x50
 800f3d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f3d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f3e6:	4413      	add	r3, r2
 800f3e8:	653b      	str	r3, [r7, #80]	@ 0x50
 800f3ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f3ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	00da      	lsls	r2, r3, #3
 800f3f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f3fa:	4413      	add	r3, r2
 800f3fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f400:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f406:	b29a      	uxth	r2, r3
 800f408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f40a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f40c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	891b      	ldrh	r3, [r3, #8]
 800f418:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f41c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	6959      	ldr	r1, [r3, #20]
 800f428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f432:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800f436:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800f43a:	6800      	ldr	r0, [r0, #0]
 800f43c:	f001 f97e 	bl	801073c <USB_WritePMA>
            ep->xfer_buff += len;
 800f440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	695a      	ldr	r2, [r3, #20]
 800f44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f450:	441a      	add	r2, r3
 800f452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f45e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	6a1a      	ldr	r2, [r3, #32]
 800f46a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f46e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	691b      	ldr	r3, [r3, #16]
 800f476:	429a      	cmp	r2, r3
 800f478:	d90f      	bls.n	800f49a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800f47a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f47e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	6a1a      	ldr	r2, [r3, #32]
 800f486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f48a:	1ad2      	subs	r2, r2, r3
 800f48c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	621a      	str	r2, [r3, #32]
 800f498:	e00e      	b.n	800f4b8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800f49a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f49e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	6a1b      	ldr	r3, [r3, #32]
 800f4a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800f4aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	643b      	str	r3, [r7, #64]	@ 0x40
 800f4c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	785b      	ldrb	r3, [r3, #1]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d177      	bne.n	800f5c4 <USB_EPStartXfer+0x85e>
 800f4d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f4e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f4ee:	b29b      	uxth	r3, r3
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4f4:	4413      	add	r3, r2
 800f4f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f4f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	00da      	lsls	r2, r3, #3
 800f506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f508:	4413      	add	r3, r2
 800f50a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f50e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f512:	881b      	ldrh	r3, [r3, #0]
 800f514:	b29b      	uxth	r3, r3
 800f516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f51a:	b29a      	uxth	r2, r3
 800f51c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f51e:	801a      	strh	r2, [r3, #0]
 800f520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f524:	2b3e      	cmp	r3, #62	@ 0x3e
 800f526:	d921      	bls.n	800f56c <USB_EPStartXfer+0x806>
 800f528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f52c:	095b      	lsrs	r3, r3, #5
 800f52e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800f532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f536:	f003 031f 	and.w	r3, r3, #31
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d104      	bne.n	800f548 <USB_EPStartXfer+0x7e2>
 800f53e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f542:	3b01      	subs	r3, #1
 800f544:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800f548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f54a:	881b      	ldrh	r3, [r3, #0]
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f552:	b29b      	uxth	r3, r3
 800f554:	029b      	lsls	r3, r3, #10
 800f556:	b29b      	uxth	r3, r3
 800f558:	4313      	orrs	r3, r2
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f564:	b29a      	uxth	r2, r3
 800f566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f568:	801a      	strh	r2, [r3, #0]
 800f56a:	e050      	b.n	800f60e <USB_EPStartXfer+0x8a8>
 800f56c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f570:	2b00      	cmp	r3, #0
 800f572:	d10a      	bne.n	800f58a <USB_EPStartXfer+0x824>
 800f574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f576:	881b      	ldrh	r3, [r3, #0]
 800f578:	b29b      	uxth	r3, r3
 800f57a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f57e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f582:	b29a      	uxth	r2, r3
 800f584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f586:	801a      	strh	r2, [r3, #0]
 800f588:	e041      	b.n	800f60e <USB_EPStartXfer+0x8a8>
 800f58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f58e:	085b      	lsrs	r3, r3, #1
 800f590:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800f594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f598:	f003 0301 	and.w	r3, r3, #1
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d004      	beq.n	800f5aa <USB_EPStartXfer+0x844>
 800f5a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800f5aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5ac:	881b      	ldrh	r3, [r3, #0]
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	029b      	lsls	r3, r3, #10
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	b29a      	uxth	r2, r3
 800f5be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5c0:	801a      	strh	r2, [r3, #0]
 800f5c2:	e024      	b.n	800f60e <USB_EPStartXfer+0x8a8>
 800f5c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f5c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	785b      	ldrb	r3, [r3, #1]
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d11c      	bne.n	800f60e <USB_EPStartXfer+0x8a8>
 800f5d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f5d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5e8:	4413      	add	r3, r2
 800f5ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800f5ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f5f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	00da      	lsls	r2, r3, #3
 800f5fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5fc:	4413      	add	r3, r2
 800f5fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f602:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f608:	b29a      	uxth	r2, r3
 800f60a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f60c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f60e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f612:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	895b      	ldrh	r3, [r3, #10]
 800f61a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f61e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	6959      	ldr	r1, [r3, #20]
 800f62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f62e:	b29b      	uxth	r3, r3
 800f630:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f634:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800f638:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800f63c:	6800      	ldr	r0, [r0, #0]
 800f63e:	f001 f87d 	bl	801073c <USB_WritePMA>
 800f642:	e227      	b.n	800fa94 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800f644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	6a1b      	ldr	r3, [r3, #32]
 800f650:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800f654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f658:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f65c:	681a      	ldr	r2, [r3, #0]
 800f65e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	009b      	lsls	r3, r3, #2
 800f66c:	4413      	add	r3, r2
 800f66e:	881b      	ldrh	r3, [r3, #0]
 800f670:	b29b      	uxth	r3, r3
 800f672:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800f676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f67a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800f67e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f682:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f686:	681a      	ldr	r2, [r3, #0]
 800f688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f68c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	441a      	add	r2, r3
 800f698:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800f69c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f6a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f6a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f6a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f6ac:	b29b      	uxth	r3, r3
 800f6ae:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f6b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f6b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f6bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f6c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f6ca:	b29b      	uxth	r3, r3
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f6d0:	4413      	add	r3, r2
 800f6d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f6d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f6d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	00da      	lsls	r2, r3, #3
 800f6e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f6e4:	4413      	add	r3, r2
 800f6e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f6ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f6f0:	b29a      	uxth	r2, r3
 800f6f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f6f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f6f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f6fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	891b      	ldrh	r3, [r3, #8]
 800f702:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f70a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	6959      	ldr	r1, [r3, #20]
 800f712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f716:	b29b      	uxth	r3, r3
 800f718:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f71c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800f720:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800f724:	6800      	ldr	r0, [r0, #0]
 800f726:	f001 f809 	bl	801073c <USB_WritePMA>
 800f72a:	e1b3      	b.n	800fa94 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800f72c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	6a1a      	ldr	r2, [r3, #32]
 800f738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f73c:	1ad2      	subs	r2, r2, r3
 800f73e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f74a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f74e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f752:	681a      	ldr	r2, [r3, #0]
 800f754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	009b      	lsls	r3, r3, #2
 800f762:	4413      	add	r3, r2
 800f764:	881b      	ldrh	r3, [r3, #0]
 800f766:	b29b      	uxth	r3, r3
 800f768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	f000 80c6 	beq.w	800f8fe <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f776:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	673b      	str	r3, [r7, #112]	@ 0x70
 800f77e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	785b      	ldrb	r3, [r3, #1]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d177      	bne.n	800f87e <USB_EPStartXfer+0xb18>
 800f78e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f792:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f79a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f79e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f7ae:	4413      	add	r3, r2
 800f7b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f7b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f7b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	00da      	lsls	r2, r3, #3
 800f7c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f7c2:	4413      	add	r3, r2
 800f7c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f7c8:	667b      	str	r3, [r7, #100]	@ 0x64
 800f7ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f7cc:	881b      	ldrh	r3, [r3, #0]
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f7d4:	b29a      	uxth	r2, r3
 800f7d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f7d8:	801a      	strh	r2, [r3, #0]
 800f7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f7de:	2b3e      	cmp	r3, #62	@ 0x3e
 800f7e0:	d921      	bls.n	800f826 <USB_EPStartXfer+0xac0>
 800f7e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f7e6:	095b      	lsrs	r3, r3, #5
 800f7e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800f7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f7f0:	f003 031f 	and.w	r3, r3, #31
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d104      	bne.n	800f802 <USB_EPStartXfer+0xa9c>
 800f7f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f7fc:	3b01      	subs	r3, #1
 800f7fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800f802:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f804:	881b      	ldrh	r3, [r3, #0]
 800f806:	b29a      	uxth	r2, r3
 800f808:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f80c:	b29b      	uxth	r3, r3
 800f80e:	029b      	lsls	r3, r3, #10
 800f810:	b29b      	uxth	r3, r3
 800f812:	4313      	orrs	r3, r2
 800f814:	b29b      	uxth	r3, r3
 800f816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f81a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f81e:	b29a      	uxth	r2, r3
 800f820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f822:	801a      	strh	r2, [r3, #0]
 800f824:	e050      	b.n	800f8c8 <USB_EPStartXfer+0xb62>
 800f826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d10a      	bne.n	800f844 <USB_EPStartXfer+0xade>
 800f82e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f830:	881b      	ldrh	r3, [r3, #0]
 800f832:	b29b      	uxth	r3, r3
 800f834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f83c:	b29a      	uxth	r2, r3
 800f83e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f840:	801a      	strh	r2, [r3, #0]
 800f842:	e041      	b.n	800f8c8 <USB_EPStartXfer+0xb62>
 800f844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f848:	085b      	lsrs	r3, r3, #1
 800f84a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800f84e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f852:	f003 0301 	and.w	r3, r3, #1
 800f856:	2b00      	cmp	r3, #0
 800f858:	d004      	beq.n	800f864 <USB_EPStartXfer+0xafe>
 800f85a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f85e:	3301      	adds	r3, #1
 800f860:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800f864:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f866:	881b      	ldrh	r3, [r3, #0]
 800f868:	b29a      	uxth	r2, r3
 800f86a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f86e:	b29b      	uxth	r3, r3
 800f870:	029b      	lsls	r3, r3, #10
 800f872:	b29b      	uxth	r3, r3
 800f874:	4313      	orrs	r3, r2
 800f876:	b29a      	uxth	r2, r3
 800f878:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f87a:	801a      	strh	r2, [r3, #0]
 800f87c:	e024      	b.n	800f8c8 <USB_EPStartXfer+0xb62>
 800f87e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	785b      	ldrb	r3, [r3, #1]
 800f88a:	2b01      	cmp	r3, #1
 800f88c:	d11c      	bne.n	800f8c8 <USB_EPStartXfer+0xb62>
 800f88e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	461a      	mov	r2, r3
 800f8a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f8a2:	4413      	add	r3, r2
 800f8a4:	673b      	str	r3, [r7, #112]	@ 0x70
 800f8a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f8aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	00da      	lsls	r2, r3, #3
 800f8b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f8b6:	4413      	add	r3, r2
 800f8b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f8bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f8c2:	b29a      	uxth	r2, r3
 800f8c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800f8c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f8cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	895b      	ldrh	r3, [r3, #10]
 800f8d4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f8d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f8dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	6959      	ldr	r1, [r3, #20]
 800f8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f8e8:	b29b      	uxth	r3, r3
 800f8ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f8ee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800f8f2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800f8f6:	6800      	ldr	r0, [r0, #0]
 800f8f8:	f000 ff20 	bl	801073c <USB_WritePMA>
 800f8fc:	e0ca      	b.n	800fa94 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f8fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	785b      	ldrb	r3, [r3, #1]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d177      	bne.n	800f9fe <USB_EPStartXfer+0xc98>
 800f90e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f912:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f91a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f91e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f928:	b29b      	uxth	r3, r3
 800f92a:	461a      	mov	r2, r3
 800f92c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f92e:	4413      	add	r3, r2
 800f930:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	00da      	lsls	r2, r3, #3
 800f940:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f942:	4413      	add	r3, r2
 800f944:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f948:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f94a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f94c:	881b      	ldrh	r3, [r3, #0]
 800f94e:	b29b      	uxth	r3, r3
 800f950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f954:	b29a      	uxth	r2, r3
 800f956:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f958:	801a      	strh	r2, [r3, #0]
 800f95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f95e:	2b3e      	cmp	r3, #62	@ 0x3e
 800f960:	d921      	bls.n	800f9a6 <USB_EPStartXfer+0xc40>
 800f962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f966:	095b      	lsrs	r3, r3, #5
 800f968:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f970:	f003 031f 	and.w	r3, r3, #31
 800f974:	2b00      	cmp	r3, #0
 800f976:	d104      	bne.n	800f982 <USB_EPStartXfer+0xc1c>
 800f978:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f97c:	3b01      	subs	r3, #1
 800f97e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f982:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f984:	881b      	ldrh	r3, [r3, #0]
 800f986:	b29a      	uxth	r2, r3
 800f988:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	029b      	lsls	r3, r3, #10
 800f990:	b29b      	uxth	r3, r3
 800f992:	4313      	orrs	r3, r2
 800f994:	b29b      	uxth	r3, r3
 800f996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f99a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f99e:	b29a      	uxth	r2, r3
 800f9a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f9a2:	801a      	strh	r2, [r3, #0]
 800f9a4:	e05c      	b.n	800fa60 <USB_EPStartXfer+0xcfa>
 800f9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d10a      	bne.n	800f9c4 <USB_EPStartXfer+0xc5e>
 800f9ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f9b0:	881b      	ldrh	r3, [r3, #0]
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f9b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f9bc:	b29a      	uxth	r2, r3
 800f9be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f9c0:	801a      	strh	r2, [r3, #0]
 800f9c2:	e04d      	b.n	800fa60 <USB_EPStartXfer+0xcfa>
 800f9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f9c8:	085b      	lsrs	r3, r3, #1
 800f9ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f9d2:	f003 0301 	and.w	r3, r3, #1
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d004      	beq.n	800f9e4 <USB_EPStartXfer+0xc7e>
 800f9da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f9de:	3301      	adds	r3, #1
 800f9e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f9e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f9e6:	881b      	ldrh	r3, [r3, #0]
 800f9e8:	b29a      	uxth	r2, r3
 800f9ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	029b      	lsls	r3, r3, #10
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	4313      	orrs	r3, r2
 800f9f6:	b29a      	uxth	r2, r3
 800f9f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f9fa:	801a      	strh	r2, [r3, #0]
 800f9fc:	e030      	b.n	800fa60 <USB_EPStartXfer+0xcfa>
 800f9fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fa02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	785b      	ldrb	r3, [r3, #1]
 800fa0a:	2b01      	cmp	r3, #1
 800fa0c:	d128      	bne.n	800fa60 <USB_EPStartXfer+0xcfa>
 800fa0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fa12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fa1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fa20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fa2a:	b29b      	uxth	r3, r3
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fa32:	4413      	add	r3, r2
 800fa34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fa38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fa3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	00da      	lsls	r2, r3, #3
 800fa46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fa4a:	4413      	add	r3, r2
 800fa4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800fa50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fa54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa58:	b29a      	uxth	r2, r3
 800fa5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fa5e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800fa60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fa64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	891b      	ldrh	r3, [r3, #8]
 800fa6c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fa70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fa74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	6959      	ldr	r1, [r3, #20]
 800fa7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800fa86:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800fa8a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800fa8e:	6800      	ldr	r0, [r0, #0]
 800fa90:	f000 fe54 	bl	801073c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800fa94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fa98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fa9c:	681a      	ldr	r2, [r3, #0]
 800fa9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800faa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	009b      	lsls	r3, r3, #2
 800faac:	4413      	add	r3, r2
 800faae:	881b      	ldrh	r3, [r3, #0]
 800fab0:	b29b      	uxth	r3, r3
 800fab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fab6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800faba:	817b      	strh	r3, [r7, #10]
 800fabc:	897b      	ldrh	r3, [r7, #10]
 800fabe:	f083 0310 	eor.w	r3, r3, #16
 800fac2:	817b      	strh	r3, [r7, #10]
 800fac4:	897b      	ldrh	r3, [r7, #10]
 800fac6:	f083 0320 	eor.w	r3, r3, #32
 800faca:	817b      	strh	r3, [r7, #10]
 800facc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fad0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fad4:	681a      	ldr	r2, [r3, #0]
 800fad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	009b      	lsls	r3, r3, #2
 800fae4:	441a      	add	r2, r3
 800fae6:	897b      	ldrh	r3, [r7, #10]
 800fae8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800faec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800faf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800faf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	8013      	strh	r3, [r2, #0]
 800fafc:	f000 bcde 	b.w	80104bc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800fb00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fb04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	7b1b      	ldrb	r3, [r3, #12]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f040 80bb 	bne.w	800fc88 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800fb12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fb16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	699a      	ldr	r2, [r3, #24]
 800fb1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fb22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	691b      	ldr	r3, [r3, #16]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d917      	bls.n	800fb5e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800fb2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fb32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	691b      	ldr	r3, [r3, #16]
 800fb3a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800fb3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fb42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	699a      	ldr	r2, [r3, #24]
 800fb4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb4e:	1ad2      	subs	r2, r2, r3
 800fb50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fb54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	619a      	str	r2, [r3, #24]
 800fb5c:	e00e      	b.n	800fb7c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800fb5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fb62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	699b      	ldr	r3, [r3, #24]
 800fb6a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800fb6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fb72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800fb7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fb80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fb8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fb8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fba0:	4413      	add	r3, r2
 800fba2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fbaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	00da      	lsls	r2, r3, #3
 800fbb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fbb8:	4413      	add	r3, r2
 800fbba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800fbbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800fbc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fbc6:	881b      	ldrh	r3, [r3, #0]
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fbce:	b29a      	uxth	r2, r3
 800fbd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fbd4:	801a      	strh	r2, [r3, #0]
 800fbd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fbda:	2b3e      	cmp	r3, #62	@ 0x3e
 800fbdc:	d924      	bls.n	800fc28 <USB_EPStartXfer+0xec2>
 800fbde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fbe2:	095b      	lsrs	r3, r3, #5
 800fbe4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800fbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fbec:	f003 031f 	and.w	r3, r3, #31
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d104      	bne.n	800fbfe <USB_EPStartXfer+0xe98>
 800fbf4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800fbf8:	3b01      	subs	r3, #1
 800fbfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800fbfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fc02:	881b      	ldrh	r3, [r3, #0]
 800fc04:	b29a      	uxth	r2, r3
 800fc06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	029b      	lsls	r3, r3, #10
 800fc0e:	b29b      	uxth	r3, r3
 800fc10:	4313      	orrs	r3, r2
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fc18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fc1c:	b29a      	uxth	r2, r3
 800fc1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fc22:	801a      	strh	r2, [r3, #0]
 800fc24:	f000 bc10 	b.w	8010448 <USB_EPStartXfer+0x16e2>
 800fc28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d10c      	bne.n	800fc4a <USB_EPStartXfer+0xee4>
 800fc30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fc34:	881b      	ldrh	r3, [r3, #0]
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fc3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fc40:	b29a      	uxth	r2, r3
 800fc42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fc46:	801a      	strh	r2, [r3, #0]
 800fc48:	e3fe      	b.n	8010448 <USB_EPStartXfer+0x16e2>
 800fc4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc4e:	085b      	lsrs	r3, r3, #1
 800fc50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800fc54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc58:	f003 0301 	and.w	r3, r3, #1
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d004      	beq.n	800fc6a <USB_EPStartXfer+0xf04>
 800fc60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800fc64:	3301      	adds	r3, #1
 800fc66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800fc6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fc6e:	881b      	ldrh	r3, [r3, #0]
 800fc70:	b29a      	uxth	r2, r3
 800fc72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	029b      	lsls	r3, r3, #10
 800fc7a:	b29b      	uxth	r3, r3
 800fc7c:	4313      	orrs	r3, r2
 800fc7e:	b29a      	uxth	r2, r3
 800fc80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fc84:	801a      	strh	r2, [r3, #0]
 800fc86:	e3df      	b.n	8010448 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800fc88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fc8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	78db      	ldrb	r3, [r3, #3]
 800fc94:	2b02      	cmp	r3, #2
 800fc96:	f040 8218 	bne.w	80100ca <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800fc9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fc9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	785b      	ldrb	r3, [r3, #1]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	f040 809d 	bne.w	800fde6 <USB_EPStartXfer+0x1080>
 800fcac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fcb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fcba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fcbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	461a      	mov	r2, r3
 800fccc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fcd0:	4413      	add	r3, r2
 800fcd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fcd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fcda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	00da      	lsls	r2, r3, #3
 800fce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fce8:	4413      	add	r3, r2
 800fcea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800fcee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800fcf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fcf6:	881b      	ldrh	r3, [r3, #0]
 800fcf8:	b29b      	uxth	r3, r3
 800fcfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fd04:	801a      	strh	r2, [r3, #0]
 800fd06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fd0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	691b      	ldr	r3, [r3, #16]
 800fd12:	2b3e      	cmp	r3, #62	@ 0x3e
 800fd14:	d92b      	bls.n	800fd6e <USB_EPStartXfer+0x1008>
 800fd16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fd1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	691b      	ldr	r3, [r3, #16]
 800fd22:	095b      	lsrs	r3, r3, #5
 800fd24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800fd28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fd2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	691b      	ldr	r3, [r3, #16]
 800fd34:	f003 031f 	and.w	r3, r3, #31
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d104      	bne.n	800fd46 <USB_EPStartXfer+0xfe0>
 800fd3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd40:	3b01      	subs	r3, #1
 800fd42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800fd46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fd4a:	881b      	ldrh	r3, [r3, #0]
 800fd4c:	b29a      	uxth	r2, r3
 800fd4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	029b      	lsls	r3, r3, #10
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	4313      	orrs	r3, r2
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd64:	b29a      	uxth	r2, r3
 800fd66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fd6a:	801a      	strh	r2, [r3, #0]
 800fd6c:	e070      	b.n	800fe50 <USB_EPStartXfer+0x10ea>
 800fd6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fd72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	691b      	ldr	r3, [r3, #16]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d10c      	bne.n	800fd98 <USB_EPStartXfer+0x1032>
 800fd7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fd82:	881b      	ldrh	r3, [r3, #0]
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd8e:	b29a      	uxth	r2, r3
 800fd90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fd94:	801a      	strh	r2, [r3, #0]
 800fd96:	e05b      	b.n	800fe50 <USB_EPStartXfer+0x10ea>
 800fd98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fd9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	691b      	ldr	r3, [r3, #16]
 800fda4:	085b      	lsrs	r3, r3, #1
 800fda6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800fdaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fdae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	691b      	ldr	r3, [r3, #16]
 800fdb6:	f003 0301 	and.w	r3, r3, #1
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d004      	beq.n	800fdc8 <USB_EPStartXfer+0x1062>
 800fdbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fdc2:	3301      	adds	r3, #1
 800fdc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800fdc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fdcc:	881b      	ldrh	r3, [r3, #0]
 800fdce:	b29a      	uxth	r2, r3
 800fdd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fdd4:	b29b      	uxth	r3, r3
 800fdd6:	029b      	lsls	r3, r3, #10
 800fdd8:	b29b      	uxth	r3, r3
 800fdda:	4313      	orrs	r3, r2
 800fddc:	b29a      	uxth	r2, r3
 800fdde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fde2:	801a      	strh	r2, [r3, #0]
 800fde4:	e034      	b.n	800fe50 <USB_EPStartXfer+0x10ea>
 800fde6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fdea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	785b      	ldrb	r3, [r3, #1]
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d12c      	bne.n	800fe50 <USB_EPStartXfer+0x10ea>
 800fdf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fdfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fe04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fe08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	461a      	mov	r2, r3
 800fe16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fe1a:	4413      	add	r3, r2
 800fe1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fe20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fe24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	00da      	lsls	r2, r3, #3
 800fe2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fe32:	4413      	add	r3, r2
 800fe34:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800fe38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fe3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fe40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	691b      	ldr	r3, [r3, #16]
 800fe48:	b29a      	uxth	r2, r3
 800fe4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800fe4e:	801a      	strh	r2, [r3, #0]
 800fe50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fe54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800fe5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fe62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	785b      	ldrb	r3, [r3, #1]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	f040 809d 	bne.w	800ffaa <USB_EPStartXfer+0x1244>
 800fe70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fe74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800fe7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fe82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fe8c:	b29b      	uxth	r3, r3
 800fe8e:	461a      	mov	r2, r3
 800fe90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fe94:	4413      	add	r3, r2
 800fe96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800fe9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fe9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	00da      	lsls	r2, r3, #3
 800fea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800feac:	4413      	add	r3, r2
 800feae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800feb2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800feb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800feba:	881b      	ldrh	r3, [r3, #0]
 800febc:	b29b      	uxth	r3, r3
 800febe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fec2:	b29a      	uxth	r2, r3
 800fec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fec8:	801a      	strh	r2, [r3, #0]
 800feca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	691b      	ldr	r3, [r3, #16]
 800fed6:	2b3e      	cmp	r3, #62	@ 0x3e
 800fed8:	d92b      	bls.n	800ff32 <USB_EPStartXfer+0x11cc>
 800feda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	691b      	ldr	r3, [r3, #16]
 800fee6:	095b      	lsrs	r3, r3, #5
 800fee8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800feec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	691b      	ldr	r3, [r3, #16]
 800fef8:	f003 031f 	and.w	r3, r3, #31
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d104      	bne.n	800ff0a <USB_EPStartXfer+0x11a4>
 800ff00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff04:	3b01      	subs	r3, #1
 800ff06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ff0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ff0e:	881b      	ldrh	r3, [r3, #0]
 800ff10:	b29a      	uxth	r2, r3
 800ff12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	029b      	lsls	r3, r3, #10
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	4313      	orrs	r3, r2
 800ff1e:	b29b      	uxth	r3, r3
 800ff20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff28:	b29a      	uxth	r2, r3
 800ff2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ff2e:	801a      	strh	r2, [r3, #0]
 800ff30:	e069      	b.n	8010006 <USB_EPStartXfer+0x12a0>
 800ff32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ff36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	691b      	ldr	r3, [r3, #16]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d10c      	bne.n	800ff5c <USB_EPStartXfer+0x11f6>
 800ff42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ff46:	881b      	ldrh	r3, [r3, #0]
 800ff48:	b29b      	uxth	r3, r3
 800ff4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff52:	b29a      	uxth	r2, r3
 800ff54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ff58:	801a      	strh	r2, [r3, #0]
 800ff5a:	e054      	b.n	8010006 <USB_EPStartXfer+0x12a0>
 800ff5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ff60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	691b      	ldr	r3, [r3, #16]
 800ff68:	085b      	lsrs	r3, r3, #1
 800ff6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ff6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ff72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	691b      	ldr	r3, [r3, #16]
 800ff7a:	f003 0301 	and.w	r3, r3, #1
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d004      	beq.n	800ff8c <USB_EPStartXfer+0x1226>
 800ff82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff86:	3301      	adds	r3, #1
 800ff88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ff8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ff90:	881b      	ldrh	r3, [r3, #0]
 800ff92:	b29a      	uxth	r2, r3
 800ff94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff98:	b29b      	uxth	r3, r3
 800ff9a:	029b      	lsls	r3, r3, #10
 800ff9c:	b29b      	uxth	r3, r3
 800ff9e:	4313      	orrs	r3, r2
 800ffa0:	b29a      	uxth	r2, r3
 800ffa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ffa6:	801a      	strh	r2, [r3, #0]
 800ffa8:	e02d      	b.n	8010006 <USB_EPStartXfer+0x12a0>
 800ffaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ffae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	785b      	ldrb	r3, [r3, #1]
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	d125      	bne.n	8010006 <USB_EPStartXfer+0x12a0>
 800ffba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ffbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	461a      	mov	r2, r3
 800ffcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ffd0:	4413      	add	r3, r2
 800ffd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ffd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ffda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	00da      	lsls	r2, r3, #3
 800ffe4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ffe8:	4413      	add	r3, r2
 800ffea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ffee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800fff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800fff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	691b      	ldr	r3, [r3, #16]
 800fffe:	b29a      	uxth	r2, r3
 8010000:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010004:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8010006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801000a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	69db      	ldr	r3, [r3, #28]
 8010012:	2b00      	cmp	r3, #0
 8010014:	f000 8218 	beq.w	8010448 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8010018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801001c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	009b      	lsls	r3, r3, #2
 8010030:	4413      	add	r3, r2
 8010032:	881b      	ldrh	r3, [r3, #0]
 8010034:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010038:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 801003c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010040:	2b00      	cmp	r3, #0
 8010042:	d005      	beq.n	8010050 <USB_EPStartXfer+0x12ea>
 8010044:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8010048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801004c:	2b00      	cmp	r3, #0
 801004e:	d10d      	bne.n	801006c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010050:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8010054:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010058:	2b00      	cmp	r3, #0
 801005a:	f040 81f5 	bne.w	8010448 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801005e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8010062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010066:	2b00      	cmp	r3, #0
 8010068:	f040 81ee 	bne.w	8010448 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801006c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010070:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801007a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	4413      	add	r3, r2
 8010086:	881b      	ldrh	r3, [r3, #0]
 8010088:	b29b      	uxth	r3, r3
 801008a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801008e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010092:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8010096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801009a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801009e:	681a      	ldr	r2, [r3, #0]
 80100a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80100a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	009b      	lsls	r3, r3, #2
 80100ae:	441a      	add	r2, r3
 80100b0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80100b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80100b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80100bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80100c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	8013      	strh	r3, [r2, #0]
 80100c8:	e1be      	b.n	8010448 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80100ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80100ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	78db      	ldrb	r3, [r3, #3]
 80100d6:	2b01      	cmp	r3, #1
 80100d8:	f040 81b4 	bne.w	8010444 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80100dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80100e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	699a      	ldr	r2, [r3, #24]
 80100e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80100ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	691b      	ldr	r3, [r3, #16]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d917      	bls.n	8010128 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80100f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80100fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	691b      	ldr	r3, [r3, #16]
 8010104:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8010108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801010c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	699a      	ldr	r2, [r3, #24]
 8010114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010118:	1ad2      	subs	r2, r2, r3
 801011a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801011e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	619a      	str	r2, [r3, #24]
 8010126:	e00e      	b.n	8010146 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8010128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801012c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	699b      	ldr	r3, [r3, #24]
 8010134:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8010138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801013c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	2200      	movs	r2, #0
 8010144:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8010146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801014a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	785b      	ldrb	r3, [r3, #1]
 8010152:	2b00      	cmp	r3, #0
 8010154:	f040 8085 	bne.w	8010262 <USB_EPStartXfer+0x14fc>
 8010158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801015c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8010166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801016a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010174:	b29b      	uxth	r3, r3
 8010176:	461a      	mov	r2, r3
 8010178:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801017c:	4413      	add	r3, r2
 801017e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8010182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	00da      	lsls	r2, r3, #3
 8010190:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010194:	4413      	add	r3, r2
 8010196:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801019a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801019e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80101a2:	881b      	ldrh	r3, [r3, #0]
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80101aa:	b29a      	uxth	r2, r3
 80101ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80101b0:	801a      	strh	r2, [r3, #0]
 80101b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80101b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80101b8:	d923      	bls.n	8010202 <USB_EPStartXfer+0x149c>
 80101ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80101be:	095b      	lsrs	r3, r3, #5
 80101c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80101c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80101c8:	f003 031f 	and.w	r3, r3, #31
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d104      	bne.n	80101da <USB_EPStartXfer+0x1474>
 80101d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80101d4:	3b01      	subs	r3, #1
 80101d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80101da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80101de:	881b      	ldrh	r3, [r3, #0]
 80101e0:	b29a      	uxth	r2, r3
 80101e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80101e6:	b29b      	uxth	r3, r3
 80101e8:	029b      	lsls	r3, r3, #10
 80101ea:	b29b      	uxth	r3, r3
 80101ec:	4313      	orrs	r3, r2
 80101ee:	b29b      	uxth	r3, r3
 80101f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80101f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80101f8:	b29a      	uxth	r2, r3
 80101fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80101fe:	801a      	strh	r2, [r3, #0]
 8010200:	e060      	b.n	80102c4 <USB_EPStartXfer+0x155e>
 8010202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010206:	2b00      	cmp	r3, #0
 8010208:	d10c      	bne.n	8010224 <USB_EPStartXfer+0x14be>
 801020a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801020e:	881b      	ldrh	r3, [r3, #0]
 8010210:	b29b      	uxth	r3, r3
 8010212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801021a:	b29a      	uxth	r2, r3
 801021c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010220:	801a      	strh	r2, [r3, #0]
 8010222:	e04f      	b.n	80102c4 <USB_EPStartXfer+0x155e>
 8010224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010228:	085b      	lsrs	r3, r3, #1
 801022a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801022e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010232:	f003 0301 	and.w	r3, r3, #1
 8010236:	2b00      	cmp	r3, #0
 8010238:	d004      	beq.n	8010244 <USB_EPStartXfer+0x14de>
 801023a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801023e:	3301      	adds	r3, #1
 8010240:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8010244:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010248:	881b      	ldrh	r3, [r3, #0]
 801024a:	b29a      	uxth	r2, r3
 801024c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010250:	b29b      	uxth	r3, r3
 8010252:	029b      	lsls	r3, r3, #10
 8010254:	b29b      	uxth	r3, r3
 8010256:	4313      	orrs	r3, r2
 8010258:	b29a      	uxth	r2, r3
 801025a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801025e:	801a      	strh	r2, [r3, #0]
 8010260:	e030      	b.n	80102c4 <USB_EPStartXfer+0x155e>
 8010262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	785b      	ldrb	r3, [r3, #1]
 801026e:	2b01      	cmp	r3, #1
 8010270:	d128      	bne.n	80102c4 <USB_EPStartXfer+0x155e>
 8010272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010276:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8010280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010284:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801028e:	b29b      	uxth	r3, r3
 8010290:	461a      	mov	r2, r3
 8010292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010296:	4413      	add	r3, r2
 8010298:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801029c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80102a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	00da      	lsls	r2, r3, #3
 80102aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80102ae:	4413      	add	r3, r2
 80102b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80102b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80102b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80102bc:	b29a      	uxth	r2, r3
 80102be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80102c2:	801a      	strh	r2, [r3, #0]
 80102c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80102c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80102d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80102d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	785b      	ldrb	r3, [r3, #1]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	f040 8085 	bne.w	80103ee <USB_EPStartXfer+0x1688>
 80102e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80102e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80102f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80102f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010300:	b29b      	uxth	r3, r3
 8010302:	461a      	mov	r2, r3
 8010304:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8010308:	4413      	add	r3, r2
 801030a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801030e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010312:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	00da      	lsls	r2, r3, #3
 801031c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8010320:	4413      	add	r3, r2
 8010322:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010326:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801032a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801032e:	881b      	ldrh	r3, [r3, #0]
 8010330:	b29b      	uxth	r3, r3
 8010332:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010336:	b29a      	uxth	r2, r3
 8010338:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801033c:	801a      	strh	r2, [r3, #0]
 801033e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010342:	2b3e      	cmp	r3, #62	@ 0x3e
 8010344:	d923      	bls.n	801038e <USB_EPStartXfer+0x1628>
 8010346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801034a:	095b      	lsrs	r3, r3, #5
 801034c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8010350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010354:	f003 031f 	and.w	r3, r3, #31
 8010358:	2b00      	cmp	r3, #0
 801035a:	d104      	bne.n	8010366 <USB_EPStartXfer+0x1600>
 801035c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010360:	3b01      	subs	r3, #1
 8010362:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8010366:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801036a:	881b      	ldrh	r3, [r3, #0]
 801036c:	b29a      	uxth	r2, r3
 801036e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010372:	b29b      	uxth	r3, r3
 8010374:	029b      	lsls	r3, r3, #10
 8010376:	b29b      	uxth	r3, r3
 8010378:	4313      	orrs	r3, r2
 801037a:	b29b      	uxth	r3, r3
 801037c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010384:	b29a      	uxth	r2, r3
 8010386:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801038a:	801a      	strh	r2, [r3, #0]
 801038c:	e05c      	b.n	8010448 <USB_EPStartXfer+0x16e2>
 801038e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010392:	2b00      	cmp	r3, #0
 8010394:	d10c      	bne.n	80103b0 <USB_EPStartXfer+0x164a>
 8010396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801039a:	881b      	ldrh	r3, [r3, #0]
 801039c:	b29b      	uxth	r3, r3
 801039e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80103a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80103a6:	b29a      	uxth	r2, r3
 80103a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80103ac:	801a      	strh	r2, [r3, #0]
 80103ae:	e04b      	b.n	8010448 <USB_EPStartXfer+0x16e2>
 80103b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80103b4:	085b      	lsrs	r3, r3, #1
 80103b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80103ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80103be:	f003 0301 	and.w	r3, r3, #1
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d004      	beq.n	80103d0 <USB_EPStartXfer+0x166a>
 80103c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80103ca:	3301      	adds	r3, #1
 80103cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80103d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80103d4:	881b      	ldrh	r3, [r3, #0]
 80103d6:	b29a      	uxth	r2, r3
 80103d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80103dc:	b29b      	uxth	r3, r3
 80103de:	029b      	lsls	r3, r3, #10
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	4313      	orrs	r3, r2
 80103e4:	b29a      	uxth	r2, r3
 80103e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80103ea:	801a      	strh	r2, [r3, #0]
 80103ec:	e02c      	b.n	8010448 <USB_EPStartXfer+0x16e2>
 80103ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80103f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	785b      	ldrb	r3, [r3, #1]
 80103fa:	2b01      	cmp	r3, #1
 80103fc:	d124      	bne.n	8010448 <USB_EPStartXfer+0x16e2>
 80103fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010402:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801040c:	b29b      	uxth	r3, r3
 801040e:	461a      	mov	r2, r3
 8010410:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010414:	4413      	add	r3, r2
 8010416:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801041a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801041e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	00da      	lsls	r2, r3, #3
 8010428:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801042c:	4413      	add	r3, r2
 801042e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010432:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801043a:	b29a      	uxth	r2, r3
 801043c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010440:	801a      	strh	r2, [r3, #0]
 8010442:	e001      	b.n	8010448 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8010444:	2301      	movs	r3, #1
 8010446:	e03a      	b.n	80104be <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801044c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010450:	681a      	ldr	r2, [r3, #0]
 8010452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	781b      	ldrb	r3, [r3, #0]
 801045e:	009b      	lsls	r3, r3, #2
 8010460:	4413      	add	r3, r2
 8010462:	881b      	ldrh	r3, [r3, #0]
 8010464:	b29b      	uxth	r3, r3
 8010466:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801046a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801046e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8010472:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010476:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801047a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 801047e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010482:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010486:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 801048a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801048e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010492:	681a      	ldr	r2, [r3, #0]
 8010494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	009b      	lsls	r3, r3, #2
 80104a2:	441a      	add	r2, r3
 80104a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80104a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80104ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80104b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80104b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80104bc:	2300      	movs	r3, #0
}
 80104be:	4618      	mov	r0, r3
 80104c0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}

080104c8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80104c8:	b480      	push	{r7}
 80104ca:	b085      	sub	sp, #20
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	785b      	ldrb	r3, [r3, #1]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d020      	beq.n	801051c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80104da:	687a      	ldr	r2, [r7, #4]
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	009b      	lsls	r3, r3, #2
 80104e2:	4413      	add	r3, r2
 80104e4:	881b      	ldrh	r3, [r3, #0]
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80104ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80104f0:	81bb      	strh	r3, [r7, #12]
 80104f2:	89bb      	ldrh	r3, [r7, #12]
 80104f4:	f083 0310 	eor.w	r3, r3, #16
 80104f8:	81bb      	strh	r3, [r7, #12]
 80104fa:	687a      	ldr	r2, [r7, #4]
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	009b      	lsls	r3, r3, #2
 8010502:	441a      	add	r2, r3
 8010504:	89bb      	ldrh	r3, [r7, #12]
 8010506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801050a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801050e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010516:	b29b      	uxth	r3, r3
 8010518:	8013      	strh	r3, [r2, #0]
 801051a:	e01f      	b.n	801055c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801051c:	687a      	ldr	r2, [r7, #4]
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	009b      	lsls	r3, r3, #2
 8010524:	4413      	add	r3, r2
 8010526:	881b      	ldrh	r3, [r3, #0]
 8010528:	b29b      	uxth	r3, r3
 801052a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801052e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010532:	81fb      	strh	r3, [r7, #14]
 8010534:	89fb      	ldrh	r3, [r7, #14]
 8010536:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801053a:	81fb      	strh	r3, [r7, #14]
 801053c:	687a      	ldr	r2, [r7, #4]
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	781b      	ldrb	r3, [r3, #0]
 8010542:	009b      	lsls	r3, r3, #2
 8010544:	441a      	add	r2, r3
 8010546:	89fb      	ldrh	r3, [r7, #14]
 8010548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801054c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010558:	b29b      	uxth	r3, r3
 801055a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801055c:	2300      	movs	r3, #0
}
 801055e:	4618      	mov	r0, r3
 8010560:	3714      	adds	r7, #20
 8010562:	46bd      	mov	sp, r7
 8010564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010568:	4770      	bx	lr

0801056a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801056a:	b480      	push	{r7}
 801056c:	b087      	sub	sp, #28
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
 8010572:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	7b1b      	ldrb	r3, [r3, #12]
 8010578:	2b00      	cmp	r3, #0
 801057a:	f040 809d 	bne.w	80106b8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	785b      	ldrb	r3, [r3, #1]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d04c      	beq.n	8010620 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	009b      	lsls	r3, r3, #2
 801058e:	4413      	add	r3, r2
 8010590:	881b      	ldrh	r3, [r3, #0]
 8010592:	823b      	strh	r3, [r7, #16]
 8010594:	8a3b      	ldrh	r3, [r7, #16]
 8010596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801059a:	2b00      	cmp	r3, #0
 801059c:	d01b      	beq.n	80105d6 <USB_EPClearStall+0x6c>
 801059e:	687a      	ldr	r2, [r7, #4]
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	009b      	lsls	r3, r3, #2
 80105a6:	4413      	add	r3, r2
 80105a8:	881b      	ldrh	r3, [r3, #0]
 80105aa:	b29b      	uxth	r3, r3
 80105ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80105b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80105b4:	81fb      	strh	r3, [r7, #14]
 80105b6:	687a      	ldr	r2, [r7, #4]
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	781b      	ldrb	r3, [r3, #0]
 80105bc:	009b      	lsls	r3, r3, #2
 80105be:	441a      	add	r2, r3
 80105c0:	89fb      	ldrh	r3, [r7, #14]
 80105c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80105c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80105ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80105ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80105d2:	b29b      	uxth	r3, r3
 80105d4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	78db      	ldrb	r3, [r3, #3]
 80105da:	2b01      	cmp	r3, #1
 80105dc:	d06c      	beq.n	80106b8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	009b      	lsls	r3, r3, #2
 80105e6:	4413      	add	r3, r2
 80105e8:	881b      	ldrh	r3, [r3, #0]
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80105f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80105f4:	81bb      	strh	r3, [r7, #12]
 80105f6:	89bb      	ldrh	r3, [r7, #12]
 80105f8:	f083 0320 	eor.w	r3, r3, #32
 80105fc:	81bb      	strh	r3, [r7, #12]
 80105fe:	687a      	ldr	r2, [r7, #4]
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	009b      	lsls	r3, r3, #2
 8010606:	441a      	add	r2, r3
 8010608:	89bb      	ldrh	r3, [r7, #12]
 801060a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801060e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801061a:	b29b      	uxth	r3, r3
 801061c:	8013      	strh	r3, [r2, #0]
 801061e:	e04b      	b.n	80106b8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010620:	687a      	ldr	r2, [r7, #4]
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	781b      	ldrb	r3, [r3, #0]
 8010626:	009b      	lsls	r3, r3, #2
 8010628:	4413      	add	r3, r2
 801062a:	881b      	ldrh	r3, [r3, #0]
 801062c:	82fb      	strh	r3, [r7, #22]
 801062e:	8afb      	ldrh	r3, [r7, #22]
 8010630:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010634:	2b00      	cmp	r3, #0
 8010636:	d01b      	beq.n	8010670 <USB_EPClearStall+0x106>
 8010638:	687a      	ldr	r2, [r7, #4]
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	009b      	lsls	r3, r3, #2
 8010640:	4413      	add	r3, r2
 8010642:	881b      	ldrh	r3, [r3, #0]
 8010644:	b29b      	uxth	r3, r3
 8010646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801064a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801064e:	82bb      	strh	r3, [r7, #20]
 8010650:	687a      	ldr	r2, [r7, #4]
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	781b      	ldrb	r3, [r3, #0]
 8010656:	009b      	lsls	r3, r3, #2
 8010658:	441a      	add	r2, r3
 801065a:	8abb      	ldrh	r3, [r7, #20]
 801065c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010660:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010664:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010668:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801066c:	b29b      	uxth	r3, r3
 801066e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010670:	687a      	ldr	r2, [r7, #4]
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	009b      	lsls	r3, r3, #2
 8010678:	4413      	add	r3, r2
 801067a:	881b      	ldrh	r3, [r3, #0]
 801067c:	b29b      	uxth	r3, r3
 801067e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010686:	827b      	strh	r3, [r7, #18]
 8010688:	8a7b      	ldrh	r3, [r7, #18]
 801068a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801068e:	827b      	strh	r3, [r7, #18]
 8010690:	8a7b      	ldrh	r3, [r7, #18]
 8010692:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010696:	827b      	strh	r3, [r7, #18]
 8010698:	687a      	ldr	r2, [r7, #4]
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	009b      	lsls	r3, r3, #2
 80106a0:	441a      	add	r2, r3
 80106a2:	8a7b      	ldrh	r3, [r7, #18]
 80106a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80106a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80106ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80106b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106b4:	b29b      	uxth	r3, r3
 80106b6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80106b8:	2300      	movs	r3, #0
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	371c      	adds	r7, #28
 80106be:	46bd      	mov	sp, r7
 80106c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c4:	4770      	bx	lr

080106c6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80106c6:	b480      	push	{r7}
 80106c8:	b083      	sub	sp, #12
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
 80106ce:	460b      	mov	r3, r1
 80106d0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80106d2:	78fb      	ldrb	r3, [r7, #3]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d103      	bne.n	80106e0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2280      	movs	r2, #128	@ 0x80
 80106dc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80106e0:	2300      	movs	r3, #0
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	370c      	adds	r7, #12
 80106e6:	46bd      	mov	sp, r7
 80106e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ec:	4770      	bx	lr

080106ee <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80106ee:	b480      	push	{r7}
 80106f0:	b083      	sub	sp, #12
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80106fc:	b29b      	uxth	r3, r3
 80106fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010706:	b29a      	uxth	r2, r3
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 801070e:	2300      	movs	r3, #0
}
 8010710:	4618      	mov	r0, r3
 8010712:	370c      	adds	r7, #12
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr

0801071c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 801071c:	b480      	push	{r7}
 801071e:	b085      	sub	sp, #20
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801072a:	b29b      	uxth	r3, r3
 801072c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801072e:	68fb      	ldr	r3, [r7, #12]
}
 8010730:	4618      	mov	r0, r3
 8010732:	3714      	adds	r7, #20
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801073c:	b480      	push	{r7}
 801073e:	b08b      	sub	sp, #44	@ 0x2c
 8010740:	af00      	add	r7, sp, #0
 8010742:	60f8      	str	r0, [r7, #12]
 8010744:	60b9      	str	r1, [r7, #8]
 8010746:	4611      	mov	r1, r2
 8010748:	461a      	mov	r2, r3
 801074a:	460b      	mov	r3, r1
 801074c:	80fb      	strh	r3, [r7, #6]
 801074e:	4613      	mov	r3, r2
 8010750:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8010752:	88bb      	ldrh	r3, [r7, #4]
 8010754:	3301      	adds	r3, #1
 8010756:	085b      	lsrs	r3, r3, #1
 8010758:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010762:	88fa      	ldrh	r2, [r7, #6]
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	4413      	add	r3, r2
 8010768:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801076c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801076e:	69bb      	ldr	r3, [r7, #24]
 8010770:	627b      	str	r3, [r7, #36]	@ 0x24
 8010772:	e01b      	b.n	80107ac <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8010774:	69fb      	ldr	r3, [r7, #28]
 8010776:	781b      	ldrb	r3, [r3, #0]
 8010778:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801077a:	69fb      	ldr	r3, [r7, #28]
 801077c:	3301      	adds	r3, #1
 801077e:	781b      	ldrb	r3, [r3, #0]
 8010780:	021b      	lsls	r3, r3, #8
 8010782:	b21a      	sxth	r2, r3
 8010784:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010788:	4313      	orrs	r3, r2
 801078a:	b21b      	sxth	r3, r3
 801078c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 801078e:	6a3b      	ldr	r3, [r7, #32]
 8010790:	8a7a      	ldrh	r2, [r7, #18]
 8010792:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8010794:	6a3b      	ldr	r3, [r7, #32]
 8010796:	3302      	adds	r3, #2
 8010798:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	3301      	adds	r3, #1
 801079e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80107a0:	69fb      	ldr	r3, [r7, #28]
 80107a2:	3301      	adds	r3, #1
 80107a4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80107a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a8:	3b01      	subs	r3, #1
 80107aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80107ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d1e0      	bne.n	8010774 <USB_WritePMA+0x38>
  }
}
 80107b2:	bf00      	nop
 80107b4:	bf00      	nop
 80107b6:	372c      	adds	r7, #44	@ 0x2c
 80107b8:	46bd      	mov	sp, r7
 80107ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107be:	4770      	bx	lr

080107c0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80107c0:	b480      	push	{r7}
 80107c2:	b08b      	sub	sp, #44	@ 0x2c
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	60f8      	str	r0, [r7, #12]
 80107c8:	60b9      	str	r1, [r7, #8]
 80107ca:	4611      	mov	r1, r2
 80107cc:	461a      	mov	r2, r3
 80107ce:	460b      	mov	r3, r1
 80107d0:	80fb      	strh	r3, [r7, #6]
 80107d2:	4613      	mov	r3, r2
 80107d4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80107d6:	88bb      	ldrh	r3, [r7, #4]
 80107d8:	085b      	lsrs	r3, r3, #1
 80107da:	b29b      	uxth	r3, r3
 80107dc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80107e6:	88fa      	ldrh	r2, [r7, #6]
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	4413      	add	r3, r2
 80107ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80107f0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80107f2:	69bb      	ldr	r3, [r7, #24]
 80107f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80107f6:	e018      	b.n	801082a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80107f8:	6a3b      	ldr	r3, [r7, #32]
 80107fa:	881b      	ldrh	r3, [r3, #0]
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8010800:	6a3b      	ldr	r3, [r7, #32]
 8010802:	3302      	adds	r3, #2
 8010804:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	b2da      	uxtb	r2, r3
 801080a:	69fb      	ldr	r3, [r7, #28]
 801080c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801080e:	69fb      	ldr	r3, [r7, #28]
 8010810:	3301      	adds	r3, #1
 8010812:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	0a1b      	lsrs	r3, r3, #8
 8010818:	b2da      	uxtb	r2, r3
 801081a:	69fb      	ldr	r3, [r7, #28]
 801081c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801081e:	69fb      	ldr	r3, [r7, #28]
 8010820:	3301      	adds	r3, #1
 8010822:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8010824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010826:	3b01      	subs	r3, #1
 8010828:	627b      	str	r3, [r7, #36]	@ 0x24
 801082a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801082c:	2b00      	cmp	r3, #0
 801082e:	d1e3      	bne.n	80107f8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8010830:	88bb      	ldrh	r3, [r7, #4]
 8010832:	f003 0301 	and.w	r3, r3, #1
 8010836:	b29b      	uxth	r3, r3
 8010838:	2b00      	cmp	r3, #0
 801083a:	d007      	beq.n	801084c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 801083c:	6a3b      	ldr	r3, [r7, #32]
 801083e:	881b      	ldrh	r3, [r3, #0]
 8010840:	b29b      	uxth	r3, r3
 8010842:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	b2da      	uxtb	r2, r3
 8010848:	69fb      	ldr	r3, [r7, #28]
 801084a:	701a      	strb	r2, [r3, #0]
  }
}
 801084c:	bf00      	nop
 801084e:	372c      	adds	r7, #44	@ 0x2c
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr

08010858 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b084      	sub	sp, #16
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
 8010860:	460b      	mov	r3, r1
 8010862:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010864:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8010868:	f002 f8fa 	bl	8012a60 <USBD_static_malloc>
 801086c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d105      	bne.n	8010880 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2200      	movs	r2, #0
 8010878:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 801087c:	2302      	movs	r3, #2
 801087e:	e066      	b.n	801094e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	68fa      	ldr	r2, [r7, #12]
 8010884:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	7c1b      	ldrb	r3, [r3, #16]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d119      	bne.n	80108c4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010890:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010894:	2202      	movs	r2, #2
 8010896:	2181      	movs	r1, #129	@ 0x81
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f001 ff88 	bl	80127ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2201      	movs	r2, #1
 80108a2:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80108a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80108a8:	2202      	movs	r2, #2
 80108aa:	2101      	movs	r1, #1
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f001 ff7e 	bl	80127ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2201      	movs	r2, #1
 80108b6:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	2210      	movs	r2, #16
 80108be:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 80108c2:	e016      	b.n	80108f2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80108c4:	2340      	movs	r3, #64	@ 0x40
 80108c6:	2202      	movs	r2, #2
 80108c8:	2181      	movs	r1, #129	@ 0x81
 80108ca:	6878      	ldr	r0, [r7, #4]
 80108cc:	f001 ff6f 	bl	80127ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2201      	movs	r2, #1
 80108d4:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80108d6:	2340      	movs	r3, #64	@ 0x40
 80108d8:	2202      	movs	r2, #2
 80108da:	2101      	movs	r1, #1
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f001 ff66 	bl	80127ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2201      	movs	r2, #1
 80108e6:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2210      	movs	r2, #16
 80108ee:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80108f2:	2308      	movs	r3, #8
 80108f4:	2203      	movs	r2, #3
 80108f6:	2182      	movs	r1, #130	@ 0x82
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f001 ff58 	bl	80127ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2201      	movs	r2, #1
 8010902:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	2200      	movs	r2, #0
 8010914:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	2200      	movs	r2, #0
 801091c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	7c1b      	ldrb	r3, [r3, #16]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d109      	bne.n	801093c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801092e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010932:	2101      	movs	r1, #1
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f002 f829 	bl	801298c <USBD_LL_PrepareReceive>
 801093a:	e007      	b.n	801094c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010942:	2340      	movs	r3, #64	@ 0x40
 8010944:	2101      	movs	r1, #1
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f002 f820 	bl	801298c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801094c:	2300      	movs	r3, #0
}
 801094e:	4618      	mov	r0, r3
 8010950:	3710      	adds	r7, #16
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}

08010956 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010956:	b580      	push	{r7, lr}
 8010958:	b082      	sub	sp, #8
 801095a:	af00      	add	r7, sp, #0
 801095c:	6078      	str	r0, [r7, #4]
 801095e:	460b      	mov	r3, r1
 8010960:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010962:	2181      	movs	r1, #129	@ 0x81
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f001 ff48 	bl	80127fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2200      	movs	r2, #0
 801096e:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010970:	2101      	movs	r1, #1
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f001 ff41 	bl	80127fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2200      	movs	r2, #0
 801097c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010980:	2182      	movs	r1, #130	@ 0x82
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f001 ff39 	bl	80127fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2200      	movs	r2, #0
 801098c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2200      	movs	r2, #0
 8010994:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d00e      	beq.n	80109c0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80109b2:	4618      	mov	r0, r3
 80109b4:	f002 f862 	bl	8012a7c <USBD_static_free>
    pdev->pClassData = NULL;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2200      	movs	r2, #0
 80109bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80109c0:	2300      	movs	r3, #0
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3708      	adds	r7, #8
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
	...

080109cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b086      	sub	sp, #24
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80109dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80109de:	2300      	movs	r3, #0
 80109e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80109e2:	2300      	movs	r3, #0
 80109e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80109e6:	2300      	movs	r3, #0
 80109e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d101      	bne.n	80109f4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80109f0:	2303      	movs	r3, #3
 80109f2:	e0af      	b.n	8010b54 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d03f      	beq.n	8010a80 <USBD_CDC_Setup+0xb4>
 8010a00:	2b20      	cmp	r3, #32
 8010a02:	f040 809f 	bne.w	8010b44 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	88db      	ldrh	r3, [r3, #6]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d02e      	beq.n	8010a6c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	b25b      	sxtb	r3, r3
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	da16      	bge.n	8010a46 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010a1e:	689b      	ldr	r3, [r3, #8]
 8010a20:	683a      	ldr	r2, [r7, #0]
 8010a22:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8010a24:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010a26:	683a      	ldr	r2, [r7, #0]
 8010a28:	88d2      	ldrh	r2, [r2, #6]
 8010a2a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	88db      	ldrh	r3, [r3, #6]
 8010a30:	2b07      	cmp	r3, #7
 8010a32:	bf28      	it	cs
 8010a34:	2307      	movcs	r3, #7
 8010a36:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	89fa      	ldrh	r2, [r7, #14]
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f001 facd 	bl	8011fde <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8010a44:	e085      	b.n	8010b52 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	785a      	ldrb	r2, [r3, #1]
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	88db      	ldrh	r3, [r3, #6]
 8010a54:	b2da      	uxtb	r2, r3
 8010a56:	693b      	ldr	r3, [r7, #16]
 8010a58:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010a5c:	6939      	ldr	r1, [r7, #16]
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	88db      	ldrh	r3, [r3, #6]
 8010a62:	461a      	mov	r2, r3
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f001 fae6 	bl	8012036 <USBD_CtlPrepareRx>
      break;
 8010a6a:	e072      	b.n	8010b52 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010a72:	689b      	ldr	r3, [r3, #8]
 8010a74:	683a      	ldr	r2, [r7, #0]
 8010a76:	7850      	ldrb	r0, [r2, #1]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	6839      	ldr	r1, [r7, #0]
 8010a7c:	4798      	blx	r3
      break;
 8010a7e:	e068      	b.n	8010b52 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	785b      	ldrb	r3, [r3, #1]
 8010a84:	2b0b      	cmp	r3, #11
 8010a86:	d852      	bhi.n	8010b2e <USBD_CDC_Setup+0x162>
 8010a88:	a201      	add	r2, pc, #4	@ (adr r2, 8010a90 <USBD_CDC_Setup+0xc4>)
 8010a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a8e:	bf00      	nop
 8010a90:	08010ac1 	.word	0x08010ac1
 8010a94:	08010b3d 	.word	0x08010b3d
 8010a98:	08010b2f 	.word	0x08010b2f
 8010a9c:	08010b2f 	.word	0x08010b2f
 8010aa0:	08010b2f 	.word	0x08010b2f
 8010aa4:	08010b2f 	.word	0x08010b2f
 8010aa8:	08010b2f 	.word	0x08010b2f
 8010aac:	08010b2f 	.word	0x08010b2f
 8010ab0:	08010b2f 	.word	0x08010b2f
 8010ab4:	08010b2f 	.word	0x08010b2f
 8010ab8:	08010aeb 	.word	0x08010aeb
 8010abc:	08010b15 	.word	0x08010b15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ac6:	b2db      	uxtb	r3, r3
 8010ac8:	2b03      	cmp	r3, #3
 8010aca:	d107      	bne.n	8010adc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010acc:	f107 030a 	add.w	r3, r7, #10
 8010ad0:	2202      	movs	r2, #2
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f001 fa82 	bl	8011fde <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010ada:	e032      	b.n	8010b42 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010adc:	6839      	ldr	r1, [r7, #0]
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f001 fa0c 	bl	8011efc <USBD_CtlError>
            ret = USBD_FAIL;
 8010ae4:	2303      	movs	r3, #3
 8010ae6:	75fb      	strb	r3, [r7, #23]
          break;
 8010ae8:	e02b      	b.n	8010b42 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010af0:	b2db      	uxtb	r3, r3
 8010af2:	2b03      	cmp	r3, #3
 8010af4:	d107      	bne.n	8010b06 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010af6:	f107 030d 	add.w	r3, r7, #13
 8010afa:	2201      	movs	r2, #1
 8010afc:	4619      	mov	r1, r3
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f001 fa6d 	bl	8011fde <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010b04:	e01d      	b.n	8010b42 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010b06:	6839      	ldr	r1, [r7, #0]
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f001 f9f7 	bl	8011efc <USBD_CtlError>
            ret = USBD_FAIL;
 8010b0e:	2303      	movs	r3, #3
 8010b10:	75fb      	strb	r3, [r7, #23]
          break;
 8010b12:	e016      	b.n	8010b42 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	2b03      	cmp	r3, #3
 8010b1e:	d00f      	beq.n	8010b40 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8010b20:	6839      	ldr	r1, [r7, #0]
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f001 f9ea 	bl	8011efc <USBD_CtlError>
            ret = USBD_FAIL;
 8010b28:	2303      	movs	r3, #3
 8010b2a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010b2c:	e008      	b.n	8010b40 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010b2e:	6839      	ldr	r1, [r7, #0]
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f001 f9e3 	bl	8011efc <USBD_CtlError>
          ret = USBD_FAIL;
 8010b36:	2303      	movs	r3, #3
 8010b38:	75fb      	strb	r3, [r7, #23]
          break;
 8010b3a:	e002      	b.n	8010b42 <USBD_CDC_Setup+0x176>
          break;
 8010b3c:	bf00      	nop
 8010b3e:	e008      	b.n	8010b52 <USBD_CDC_Setup+0x186>
          break;
 8010b40:	bf00      	nop
      }
      break;
 8010b42:	e006      	b.n	8010b52 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8010b44:	6839      	ldr	r1, [r7, #0]
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f001 f9d8 	bl	8011efc <USBD_CtlError>
      ret = USBD_FAIL;
 8010b4c:	2303      	movs	r3, #3
 8010b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8010b50:	bf00      	nop
  }

  return (uint8_t)ret;
 8010b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b54:	4618      	mov	r0, r3
 8010b56:	3718      	adds	r7, #24
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}

08010b5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b084      	sub	sp, #16
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	460b      	mov	r3, r1
 8010b66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d101      	bne.n	8010b7e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010b7a:	2303      	movs	r3, #3
 8010b7c:	e04f      	b.n	8010c1e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010b84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010b86:	78fa      	ldrb	r2, [r7, #3]
 8010b88:	6879      	ldr	r1, [r7, #4]
 8010b8a:	4613      	mov	r3, r2
 8010b8c:	009b      	lsls	r3, r3, #2
 8010b8e:	4413      	add	r3, r2
 8010b90:	009b      	lsls	r3, r3, #2
 8010b92:	440b      	add	r3, r1
 8010b94:	3318      	adds	r3, #24
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d029      	beq.n	8010bf0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010b9c:	78fa      	ldrb	r2, [r7, #3]
 8010b9e:	6879      	ldr	r1, [r7, #4]
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	009b      	lsls	r3, r3, #2
 8010ba4:	4413      	add	r3, r2
 8010ba6:	009b      	lsls	r3, r3, #2
 8010ba8:	440b      	add	r3, r1
 8010baa:	3318      	adds	r3, #24
 8010bac:	681a      	ldr	r2, [r3, #0]
 8010bae:	78f9      	ldrb	r1, [r7, #3]
 8010bb0:	68f8      	ldr	r0, [r7, #12]
 8010bb2:	460b      	mov	r3, r1
 8010bb4:	009b      	lsls	r3, r3, #2
 8010bb6:	440b      	add	r3, r1
 8010bb8:	00db      	lsls	r3, r3, #3
 8010bba:	4403      	add	r3, r0
 8010bbc:	3320      	adds	r3, #32
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	fbb2 f1f3 	udiv	r1, r2, r3
 8010bc4:	fb01 f303 	mul.w	r3, r1, r3
 8010bc8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d110      	bne.n	8010bf0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010bce:	78fa      	ldrb	r2, [r7, #3]
 8010bd0:	6879      	ldr	r1, [r7, #4]
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	009b      	lsls	r3, r3, #2
 8010bd6:	4413      	add	r3, r2
 8010bd8:	009b      	lsls	r3, r3, #2
 8010bda:	440b      	add	r3, r1
 8010bdc:	3318      	adds	r3, #24
 8010bde:	2200      	movs	r2, #0
 8010be0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010be2:	78f9      	ldrb	r1, [r7, #3]
 8010be4:	2300      	movs	r3, #0
 8010be6:	2200      	movs	r2, #0
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f001 feae 	bl	801294a <USBD_LL_Transmit>
 8010bee:	e015      	b.n	8010c1c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010bfe:	691b      	ldr	r3, [r3, #16]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d00b      	beq.n	8010c1c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010c0a:	691b      	ldr	r3, [r3, #16]
 8010c0c:	68ba      	ldr	r2, [r7, #8]
 8010c0e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8010c12:	68ba      	ldr	r2, [r7, #8]
 8010c14:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010c18:	78fa      	ldrb	r2, [r7, #3]
 8010c1a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010c1c:	2300      	movs	r3, #0
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3710      	adds	r7, #16
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}

08010c26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010c26:	b580      	push	{r7, lr}
 8010c28:	b084      	sub	sp, #16
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	6078      	str	r0, [r7, #4]
 8010c2e:	460b      	mov	r3, r1
 8010c30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010c38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d101      	bne.n	8010c48 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010c44:	2303      	movs	r3, #3
 8010c46:	e015      	b.n	8010c74 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010c48:	78fb      	ldrb	r3, [r7, #3]
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f001 febe 	bl	80129ce <USBD_LL_GetRxDataSize>
 8010c52:	4602      	mov	r2, r0
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010c60:	68db      	ldr	r3, [r3, #12]
 8010c62:	68fa      	ldr	r2, [r7, #12]
 8010c64:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8010c68:	68fa      	ldr	r2, [r7, #12]
 8010c6a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010c6e:	4611      	mov	r1, r2
 8010c70:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010c72:	2300      	movs	r3, #0
}
 8010c74:	4618      	mov	r0, r3
 8010c76:	3710      	adds	r7, #16
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}

08010c7c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b084      	sub	sp, #16
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010c8a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d101      	bne.n	8010c96 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8010c92:	2303      	movs	r3, #3
 8010c94:	e01a      	b.n	8010ccc <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d014      	beq.n	8010cca <USBD_CDC_EP0_RxReady+0x4e>
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8010ca6:	2bff      	cmp	r3, #255	@ 0xff
 8010ca8:	d00f      	beq.n	8010cca <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010cb0:	689b      	ldr	r3, [r3, #8]
 8010cb2:	68fa      	ldr	r2, [r7, #12]
 8010cb4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8010cb8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010cba:	68fa      	ldr	r2, [r7, #12]
 8010cbc:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010cc0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	22ff      	movs	r2, #255	@ 0xff
 8010cc6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8010cca:	2300      	movs	r3, #0
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3710      	adds	r7, #16
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010cd4:	b480      	push	{r7}
 8010cd6:	b083      	sub	sp, #12
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2243      	movs	r2, #67	@ 0x43
 8010ce0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010ce2:	4b03      	ldr	r3, [pc, #12]	@ (8010cf0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	370c      	adds	r7, #12
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cee:	4770      	bx	lr
 8010cf0:	20000094 	.word	0x20000094

08010cf4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	b083      	sub	sp, #12
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2243      	movs	r2, #67	@ 0x43
 8010d00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010d02:	4b03      	ldr	r3, [pc, #12]	@ (8010d10 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	370c      	adds	r7, #12
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0e:	4770      	bx	lr
 8010d10:	20000050 	.word	0x20000050

08010d14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b083      	sub	sp, #12
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2243      	movs	r2, #67	@ 0x43
 8010d20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010d22:	4b03      	ldr	r3, [pc, #12]	@ (8010d30 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	370c      	adds	r7, #12
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr
 8010d30:	200000d8 	.word	0x200000d8

08010d34 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010d34:	b480      	push	{r7}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	220a      	movs	r2, #10
 8010d40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010d42:	4b03      	ldr	r3, [pc, #12]	@ (8010d50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	370c      	adds	r7, #12
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr
 8010d50:	2000000c 	.word	0x2000000c

08010d54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b083      	sub	sp, #12
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d101      	bne.n	8010d68 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010d64:	2303      	movs	r3, #3
 8010d66:	e004      	b.n	8010d72 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	683a      	ldr	r2, [r7, #0]
 8010d6c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8010d70:	2300      	movs	r3, #0
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	370c      	adds	r7, #12
 8010d76:	46bd      	mov	sp, r7
 8010d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7c:	4770      	bx	lr

08010d7e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010d7e:	b480      	push	{r7}
 8010d80:	b087      	sub	sp, #28
 8010d82:	af00      	add	r7, sp, #0
 8010d84:	60f8      	str	r0, [r7, #12]
 8010d86:	60b9      	str	r1, [r7, #8]
 8010d88:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010d90:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d101      	bne.n	8010d9c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010d98:	2303      	movs	r3, #3
 8010d9a:	e008      	b.n	8010dae <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	68ba      	ldr	r2, [r7, #8]
 8010da0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	687a      	ldr	r2, [r7, #4]
 8010da8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8010dac:	2300      	movs	r3, #0
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	371c      	adds	r7, #28
 8010db2:	46bd      	mov	sp, r7
 8010db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db8:	4770      	bx	lr

08010dba <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010dba:	b480      	push	{r7}
 8010dbc:	b085      	sub	sp, #20
 8010dbe:	af00      	add	r7, sp, #0
 8010dc0:	6078      	str	r0, [r7, #4]
 8010dc2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010dca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d101      	bne.n	8010dd6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8010dd2:	2303      	movs	r3, #3
 8010dd4:	e004      	b.n	8010de0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	683a      	ldr	r2, [r7, #0]
 8010dda:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8010dde:	2300      	movs	r3, #0
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3714      	adds	r7, #20
 8010de4:	46bd      	mov	sp, r7
 8010de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dea:	4770      	bx	lr

08010dec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b084      	sub	sp, #16
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010dfa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d101      	bne.n	8010e0e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010e0a:	2303      	movs	r3, #3
 8010e0c:	e01a      	b.n	8010e44 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d114      	bne.n	8010e42 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010e36:	2181      	movs	r1, #129	@ 0x81
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f001 fd86 	bl	801294a <USBD_LL_Transmit>

    ret = USBD_OK;
 8010e3e:	2300      	movs	r3, #0
 8010e40:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3710      	adds	r7, #16
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b084      	sub	sp, #16
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010e5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d101      	bne.n	8010e6a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010e66:	2303      	movs	r3, #3
 8010e68:	e016      	b.n	8010e98 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	7c1b      	ldrb	r3, [r3, #16]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d109      	bne.n	8010e86 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010e78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010e7c:	2101      	movs	r1, #1
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f001 fd84 	bl	801298c <USBD_LL_PrepareReceive>
 8010e84:	e007      	b.n	8010e96 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010e8c:	2340      	movs	r3, #64	@ 0x40
 8010e8e:	2101      	movs	r1, #1
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f001 fd7b 	bl	801298c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010e96:	2300      	movs	r3, #0
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3710      	adds	r7, #16
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}

08010ea0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b086      	sub	sp, #24
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	60f8      	str	r0, [r7, #12]
 8010ea8:	60b9      	str	r1, [r7, #8]
 8010eaa:	4613      	mov	r3, r2
 8010eac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d101      	bne.n	8010eb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010eb4:	2303      	movs	r3, #3
 8010eb6:	e01f      	b.n	8010ef8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	2200      	movs	r2, #0
 8010ebc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d003      	beq.n	8010ede <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	68ba      	ldr	r2, [r7, #8]
 8010eda:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	2201      	movs	r2, #1
 8010ee2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	79fa      	ldrb	r2, [r7, #7]
 8010eea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010eec:	68f8      	ldr	r0, [r7, #12]
 8010eee:	f001 fbe3 	bl	80126b8 <USBD_LL_Init>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3718      	adds	r7, #24
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}

08010f00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b084      	sub	sp, #16
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
 8010f08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d101      	bne.n	8010f18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010f14:	2303      	movs	r3, #3
 8010f16:	e016      	b.n	8010f46 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	683a      	ldr	r2, [r7, #0]
 8010f1c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d00b      	beq.n	8010f44 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f34:	f107 020e 	add.w	r2, r7, #14
 8010f38:	4610      	mov	r0, r2
 8010f3a:	4798      	blx	r3
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8010f44:	2300      	movs	r3, #0
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3710      	adds	r7, #16
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}

08010f4e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010f4e:	b580      	push	{r7, lr}
 8010f50:	b082      	sub	sp, #8
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f001 fc0e 	bl	8012778 <USBD_LL_Start>
 8010f5c:	4603      	mov	r3, r0
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3708      	adds	r7, #8
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}

08010f66 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010f66:	b480      	push	{r7}
 8010f68:	b083      	sub	sp, #12
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010f6e:	2300      	movs	r3, #0
}
 8010f70:	4618      	mov	r0, r3
 8010f72:	370c      	adds	r7, #12
 8010f74:	46bd      	mov	sp, r7
 8010f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7a:	4770      	bx	lr

08010f7c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b084      	sub	sp, #16
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
 8010f84:	460b      	mov	r3, r1
 8010f86:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010f88:	2303      	movs	r3, #3
 8010f8a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d009      	beq.n	8010faa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	78fa      	ldrb	r2, [r7, #3]
 8010fa0:	4611      	mov	r1, r2
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	4798      	blx	r3
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3710      	adds	r7, #16
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}

08010fb4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	460b      	mov	r3, r1
 8010fbe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d007      	beq.n	8010fda <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010fd0:	685b      	ldr	r3, [r3, #4]
 8010fd2:	78fa      	ldrb	r2, [r7, #3]
 8010fd4:	4611      	mov	r1, r2
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	4798      	blx	r3
  }

  return USBD_OK;
 8010fda:	2300      	movs	r3, #0
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3708      	adds	r7, #8
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}

08010fe4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b084      	sub	sp, #16
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010ff4:	6839      	ldr	r1, [r7, #0]
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f000 ff46 	bl	8011e88 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2201      	movs	r2, #1
 8011000:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801100a:	461a      	mov	r2, r3
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011018:	f003 031f 	and.w	r3, r3, #31
 801101c:	2b02      	cmp	r3, #2
 801101e:	d01a      	beq.n	8011056 <USBD_LL_SetupStage+0x72>
 8011020:	2b02      	cmp	r3, #2
 8011022:	d822      	bhi.n	801106a <USBD_LL_SetupStage+0x86>
 8011024:	2b00      	cmp	r3, #0
 8011026:	d002      	beq.n	801102e <USBD_LL_SetupStage+0x4a>
 8011028:	2b01      	cmp	r3, #1
 801102a:	d00a      	beq.n	8011042 <USBD_LL_SetupStage+0x5e>
 801102c:	e01d      	b.n	801106a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011034:	4619      	mov	r1, r3
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f000 f9ee 	bl	8011418 <USBD_StdDevReq>
 801103c:	4603      	mov	r3, r0
 801103e:	73fb      	strb	r3, [r7, #15]
      break;
 8011040:	e020      	b.n	8011084 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011048:	4619      	mov	r1, r3
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 fa52 	bl	80114f4 <USBD_StdItfReq>
 8011050:	4603      	mov	r3, r0
 8011052:	73fb      	strb	r3, [r7, #15]
      break;
 8011054:	e016      	b.n	8011084 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801105c:	4619      	mov	r1, r3
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 fa91 	bl	8011586 <USBD_StdEPReq>
 8011064:	4603      	mov	r3, r0
 8011066:	73fb      	strb	r3, [r7, #15]
      break;
 8011068:	e00c      	b.n	8011084 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011070:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011074:	b2db      	uxtb	r3, r3
 8011076:	4619      	mov	r1, r3
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f001 fbdd 	bl	8012838 <USBD_LL_StallEP>
 801107e:	4603      	mov	r3, r0
 8011080:	73fb      	strb	r3, [r7, #15]
      break;
 8011082:	bf00      	nop
  }

  return ret;
 8011084:	7bfb      	ldrb	r3, [r7, #15]
}
 8011086:	4618      	mov	r0, r3
 8011088:	3710      	adds	r7, #16
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}

0801108e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801108e:	b580      	push	{r7, lr}
 8011090:	b086      	sub	sp, #24
 8011092:	af00      	add	r7, sp, #0
 8011094:	60f8      	str	r0, [r7, #12]
 8011096:	460b      	mov	r3, r1
 8011098:	607a      	str	r2, [r7, #4]
 801109a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801109c:	7afb      	ldrb	r3, [r7, #11]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d138      	bne.n	8011114 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80110a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80110b0:	2b03      	cmp	r3, #3
 80110b2:	d14a      	bne.n	801114a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	689a      	ldr	r2, [r3, #8]
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	68db      	ldr	r3, [r3, #12]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d913      	bls.n	80110e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	689a      	ldr	r2, [r3, #8]
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	68db      	ldr	r3, [r3, #12]
 80110c8:	1ad2      	subs	r2, r2, r3
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80110ce:	693b      	ldr	r3, [r7, #16]
 80110d0:	68da      	ldr	r2, [r3, #12]
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	689b      	ldr	r3, [r3, #8]
 80110d6:	4293      	cmp	r3, r2
 80110d8:	bf28      	it	cs
 80110da:	4613      	movcs	r3, r2
 80110dc:	461a      	mov	r2, r3
 80110de:	6879      	ldr	r1, [r7, #4]
 80110e0:	68f8      	ldr	r0, [r7, #12]
 80110e2:	f000 ffc5 	bl	8012070 <USBD_CtlContinueRx>
 80110e6:	e030      	b.n	801114a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80110ee:	b2db      	uxtb	r3, r3
 80110f0:	2b03      	cmp	r3, #3
 80110f2:	d10b      	bne.n	801110c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80110fa:	691b      	ldr	r3, [r3, #16]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d005      	beq.n	801110c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011106:	691b      	ldr	r3, [r3, #16]
 8011108:	68f8      	ldr	r0, [r7, #12]
 801110a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801110c:	68f8      	ldr	r0, [r7, #12]
 801110e:	f000 ffc0 	bl	8012092 <USBD_CtlSendStatus>
 8011112:	e01a      	b.n	801114a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801111a:	b2db      	uxtb	r3, r3
 801111c:	2b03      	cmp	r3, #3
 801111e:	d114      	bne.n	801114a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011126:	699b      	ldr	r3, [r3, #24]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d00e      	beq.n	801114a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011132:	699b      	ldr	r3, [r3, #24]
 8011134:	7afa      	ldrb	r2, [r7, #11]
 8011136:	4611      	mov	r1, r2
 8011138:	68f8      	ldr	r0, [r7, #12]
 801113a:	4798      	blx	r3
 801113c:	4603      	mov	r3, r0
 801113e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011140:	7dfb      	ldrb	r3, [r7, #23]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d001      	beq.n	801114a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8011146:	7dfb      	ldrb	r3, [r7, #23]
 8011148:	e000      	b.n	801114c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801114a:	2300      	movs	r3, #0
}
 801114c:	4618      	mov	r0, r3
 801114e:	3718      	adds	r7, #24
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}

08011154 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b086      	sub	sp, #24
 8011158:	af00      	add	r7, sp, #0
 801115a:	60f8      	str	r0, [r7, #12]
 801115c:	460b      	mov	r3, r1
 801115e:	607a      	str	r2, [r7, #4]
 8011160:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011162:	7afb      	ldrb	r3, [r7, #11]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d16b      	bne.n	8011240 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	3314      	adds	r3, #20
 801116c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011174:	2b02      	cmp	r3, #2
 8011176:	d156      	bne.n	8011226 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011178:	693b      	ldr	r3, [r7, #16]
 801117a:	689a      	ldr	r2, [r3, #8]
 801117c:	693b      	ldr	r3, [r7, #16]
 801117e:	68db      	ldr	r3, [r3, #12]
 8011180:	429a      	cmp	r2, r3
 8011182:	d914      	bls.n	80111ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	689a      	ldr	r2, [r3, #8]
 8011188:	693b      	ldr	r3, [r7, #16]
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	1ad2      	subs	r2, r2, r3
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011192:	693b      	ldr	r3, [r7, #16]
 8011194:	689b      	ldr	r3, [r3, #8]
 8011196:	461a      	mov	r2, r3
 8011198:	6879      	ldr	r1, [r7, #4]
 801119a:	68f8      	ldr	r0, [r7, #12]
 801119c:	f000 ff3a 	bl	8012014 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80111a0:	2300      	movs	r3, #0
 80111a2:	2200      	movs	r2, #0
 80111a4:	2100      	movs	r1, #0
 80111a6:	68f8      	ldr	r0, [r7, #12]
 80111a8:	f001 fbf0 	bl	801298c <USBD_LL_PrepareReceive>
 80111ac:	e03b      	b.n	8011226 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	68da      	ldr	r2, [r3, #12]
 80111b2:	693b      	ldr	r3, [r7, #16]
 80111b4:	689b      	ldr	r3, [r3, #8]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d11c      	bne.n	80111f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	685a      	ldr	r2, [r3, #4]
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d316      	bcc.n	80111f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	685a      	ldr	r2, [r3, #4]
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80111d0:	429a      	cmp	r2, r3
 80111d2:	d20f      	bcs.n	80111f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80111d4:	2200      	movs	r2, #0
 80111d6:	2100      	movs	r1, #0
 80111d8:	68f8      	ldr	r0, [r7, #12]
 80111da:	f000 ff1b 	bl	8012014 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	2200      	movs	r2, #0
 80111e2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80111e6:	2300      	movs	r3, #0
 80111e8:	2200      	movs	r2, #0
 80111ea:	2100      	movs	r1, #0
 80111ec:	68f8      	ldr	r0, [r7, #12]
 80111ee:	f001 fbcd 	bl	801298c <USBD_LL_PrepareReceive>
 80111f2:	e018      	b.n	8011226 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	2b03      	cmp	r3, #3
 80111fe:	d10b      	bne.n	8011218 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011206:	68db      	ldr	r3, [r3, #12]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d005      	beq.n	8011218 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011212:	68db      	ldr	r3, [r3, #12]
 8011214:	68f8      	ldr	r0, [r7, #12]
 8011216:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011218:	2180      	movs	r1, #128	@ 0x80
 801121a:	68f8      	ldr	r0, [r7, #12]
 801121c:	f001 fb0c 	bl	8012838 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011220:	68f8      	ldr	r0, [r7, #12]
 8011222:	f000 ff49 	bl	80120b8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801122c:	2b01      	cmp	r3, #1
 801122e:	d122      	bne.n	8011276 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011230:	68f8      	ldr	r0, [r7, #12]
 8011232:	f7ff fe98 	bl	8010f66 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	2200      	movs	r2, #0
 801123a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801123e:	e01a      	b.n	8011276 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011246:	b2db      	uxtb	r3, r3
 8011248:	2b03      	cmp	r3, #3
 801124a:	d114      	bne.n	8011276 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011252:	695b      	ldr	r3, [r3, #20]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d00e      	beq.n	8011276 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801125e:	695b      	ldr	r3, [r3, #20]
 8011260:	7afa      	ldrb	r2, [r7, #11]
 8011262:	4611      	mov	r1, r2
 8011264:	68f8      	ldr	r0, [r7, #12]
 8011266:	4798      	blx	r3
 8011268:	4603      	mov	r3, r0
 801126a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801126c:	7dfb      	ldrb	r3, [r7, #23]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d001      	beq.n	8011276 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8011272:	7dfb      	ldrb	r3, [r7, #23]
 8011274:	e000      	b.n	8011278 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011276:	2300      	movs	r3, #0
}
 8011278:	4618      	mov	r0, r3
 801127a:	3718      	adds	r7, #24
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}

08011280 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2201      	movs	r2, #1
 801128c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2200      	movs	r2, #0
 8011294:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2200      	movs	r2, #0
 801129c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	2200      	movs	r2, #0
 80112a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d101      	bne.n	80112b4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80112b0:	2303      	movs	r3, #3
 80112b2:	e02f      	b.n	8011314 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d00f      	beq.n	80112de <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112c4:	685b      	ldr	r3, [r3, #4]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d009      	beq.n	80112de <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112d0:	685b      	ldr	r3, [r3, #4]
 80112d2:	687a      	ldr	r2, [r7, #4]
 80112d4:	6852      	ldr	r2, [r2, #4]
 80112d6:	b2d2      	uxtb	r2, r2
 80112d8:	4611      	mov	r1, r2
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80112de:	2340      	movs	r3, #64	@ 0x40
 80112e0:	2200      	movs	r2, #0
 80112e2:	2100      	movs	r1, #0
 80112e4:	6878      	ldr	r0, [r7, #4]
 80112e6:	f001 fa62 	bl	80127ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2201      	movs	r2, #1
 80112ee:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2240      	movs	r2, #64	@ 0x40
 80112f6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80112fa:	2340      	movs	r3, #64	@ 0x40
 80112fc:	2200      	movs	r2, #0
 80112fe:	2180      	movs	r1, #128	@ 0x80
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f001 fa54 	bl	80127ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2201      	movs	r2, #1
 801130a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2240      	movs	r2, #64	@ 0x40
 8011310:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011312:	2300      	movs	r3, #0
}
 8011314:	4618      	mov	r0, r3
 8011316:	3708      	adds	r7, #8
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}

0801131c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801131c:	b480      	push	{r7}
 801131e:	b083      	sub	sp, #12
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	460b      	mov	r3, r1
 8011326:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	78fa      	ldrb	r2, [r7, #3]
 801132c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801132e:	2300      	movs	r3, #0
}
 8011330:	4618      	mov	r0, r3
 8011332:	370c      	adds	r7, #12
 8011334:	46bd      	mov	sp, r7
 8011336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133a:	4770      	bx	lr

0801133c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801133c:	b480      	push	{r7}
 801133e:	b083      	sub	sp, #12
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801134a:	b2da      	uxtb	r2, r3
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2204      	movs	r2, #4
 8011356:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801135a:	2300      	movs	r3, #0
}
 801135c:	4618      	mov	r0, r3
 801135e:	370c      	adds	r7, #12
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr

08011368 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011368:	b480      	push	{r7}
 801136a:	b083      	sub	sp, #12
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011376:	b2db      	uxtb	r3, r3
 8011378:	2b04      	cmp	r3, #4
 801137a:	d106      	bne.n	801138a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011382:	b2da      	uxtb	r2, r3
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801138a:	2300      	movs	r3, #0
}
 801138c:	4618      	mov	r0, r3
 801138e:	370c      	adds	r7, #12
 8011390:	46bd      	mov	sp, r7
 8011392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011396:	4770      	bx	lr

08011398 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d101      	bne.n	80113ae <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80113aa:	2303      	movs	r3, #3
 80113ac:	e012      	b.n	80113d4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113b4:	b2db      	uxtb	r3, r3
 80113b6:	2b03      	cmp	r3, #3
 80113b8:	d10b      	bne.n	80113d2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113c0:	69db      	ldr	r3, [r3, #28]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d005      	beq.n	80113d2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113cc:	69db      	ldr	r3, [r3, #28]
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80113d2:	2300      	movs	r3, #0
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3708      	adds	r7, #8
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}

080113dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80113dc:	b480      	push	{r7}
 80113de:	b087      	sub	sp, #28
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	781b      	ldrb	r3, [r3, #0]
 80113ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	3301      	adds	r3, #1
 80113f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80113fa:	8a3b      	ldrh	r3, [r7, #16]
 80113fc:	021b      	lsls	r3, r3, #8
 80113fe:	b21a      	sxth	r2, r3
 8011400:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011404:	4313      	orrs	r3, r2
 8011406:	b21b      	sxth	r3, r3
 8011408:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801140a:	89fb      	ldrh	r3, [r7, #14]
}
 801140c:	4618      	mov	r0, r3
 801140e:	371c      	adds	r7, #28
 8011410:	46bd      	mov	sp, r7
 8011412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011416:	4770      	bx	lr

08011418 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b084      	sub	sp, #16
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
 8011420:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011422:	2300      	movs	r3, #0
 8011424:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	781b      	ldrb	r3, [r3, #0]
 801142a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801142e:	2b40      	cmp	r3, #64	@ 0x40
 8011430:	d005      	beq.n	801143e <USBD_StdDevReq+0x26>
 8011432:	2b40      	cmp	r3, #64	@ 0x40
 8011434:	d853      	bhi.n	80114de <USBD_StdDevReq+0xc6>
 8011436:	2b00      	cmp	r3, #0
 8011438:	d00b      	beq.n	8011452 <USBD_StdDevReq+0x3a>
 801143a:	2b20      	cmp	r3, #32
 801143c:	d14f      	bne.n	80114de <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011444:	689b      	ldr	r3, [r3, #8]
 8011446:	6839      	ldr	r1, [r7, #0]
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	4798      	blx	r3
 801144c:	4603      	mov	r3, r0
 801144e:	73fb      	strb	r3, [r7, #15]
      break;
 8011450:	e04a      	b.n	80114e8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	785b      	ldrb	r3, [r3, #1]
 8011456:	2b09      	cmp	r3, #9
 8011458:	d83b      	bhi.n	80114d2 <USBD_StdDevReq+0xba>
 801145a:	a201      	add	r2, pc, #4	@ (adr r2, 8011460 <USBD_StdDevReq+0x48>)
 801145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011460:	080114b5 	.word	0x080114b5
 8011464:	080114c9 	.word	0x080114c9
 8011468:	080114d3 	.word	0x080114d3
 801146c:	080114bf 	.word	0x080114bf
 8011470:	080114d3 	.word	0x080114d3
 8011474:	08011493 	.word	0x08011493
 8011478:	08011489 	.word	0x08011489
 801147c:	080114d3 	.word	0x080114d3
 8011480:	080114ab 	.word	0x080114ab
 8011484:	0801149d 	.word	0x0801149d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011488:	6839      	ldr	r1, [r7, #0]
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f000 f9de 	bl	801184c <USBD_GetDescriptor>
          break;
 8011490:	e024      	b.n	80114dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011492:	6839      	ldr	r1, [r7, #0]
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f000 fb6d 	bl	8011b74 <USBD_SetAddress>
          break;
 801149a:	e01f      	b.n	80114dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801149c:	6839      	ldr	r1, [r7, #0]
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f000 fbac 	bl	8011bfc <USBD_SetConfig>
 80114a4:	4603      	mov	r3, r0
 80114a6:	73fb      	strb	r3, [r7, #15]
          break;
 80114a8:	e018      	b.n	80114dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80114aa:	6839      	ldr	r1, [r7, #0]
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f000 fc4b 	bl	8011d48 <USBD_GetConfig>
          break;
 80114b2:	e013      	b.n	80114dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80114b4:	6839      	ldr	r1, [r7, #0]
 80114b6:	6878      	ldr	r0, [r7, #4]
 80114b8:	f000 fc7c 	bl	8011db4 <USBD_GetStatus>
          break;
 80114bc:	e00e      	b.n	80114dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80114be:	6839      	ldr	r1, [r7, #0]
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f000 fcab 	bl	8011e1c <USBD_SetFeature>
          break;
 80114c6:	e009      	b.n	80114dc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80114c8:	6839      	ldr	r1, [r7, #0]
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f000 fcba 	bl	8011e44 <USBD_ClrFeature>
          break;
 80114d0:	e004      	b.n	80114dc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80114d2:	6839      	ldr	r1, [r7, #0]
 80114d4:	6878      	ldr	r0, [r7, #4]
 80114d6:	f000 fd11 	bl	8011efc <USBD_CtlError>
          break;
 80114da:	bf00      	nop
      }
      break;
 80114dc:	e004      	b.n	80114e8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80114de:	6839      	ldr	r1, [r7, #0]
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f000 fd0b 	bl	8011efc <USBD_CtlError>
      break;
 80114e6:	bf00      	nop
  }

  return ret;
 80114e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3710      	adds	r7, #16
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop

080114f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b084      	sub	sp, #16
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80114fe:	2300      	movs	r3, #0
 8011500:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	781b      	ldrb	r3, [r3, #0]
 8011506:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801150a:	2b40      	cmp	r3, #64	@ 0x40
 801150c:	d005      	beq.n	801151a <USBD_StdItfReq+0x26>
 801150e:	2b40      	cmp	r3, #64	@ 0x40
 8011510:	d82f      	bhi.n	8011572 <USBD_StdItfReq+0x7e>
 8011512:	2b00      	cmp	r3, #0
 8011514:	d001      	beq.n	801151a <USBD_StdItfReq+0x26>
 8011516:	2b20      	cmp	r3, #32
 8011518:	d12b      	bne.n	8011572 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011520:	b2db      	uxtb	r3, r3
 8011522:	3b01      	subs	r3, #1
 8011524:	2b02      	cmp	r3, #2
 8011526:	d81d      	bhi.n	8011564 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	889b      	ldrh	r3, [r3, #4]
 801152c:	b2db      	uxtb	r3, r3
 801152e:	2b01      	cmp	r3, #1
 8011530:	d813      	bhi.n	801155a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011538:	689b      	ldr	r3, [r3, #8]
 801153a:	6839      	ldr	r1, [r7, #0]
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	4798      	blx	r3
 8011540:	4603      	mov	r3, r0
 8011542:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	88db      	ldrh	r3, [r3, #6]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d110      	bne.n	801156e <USBD_StdItfReq+0x7a>
 801154c:	7bfb      	ldrb	r3, [r7, #15]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d10d      	bne.n	801156e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	f000 fd9d 	bl	8012092 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011558:	e009      	b.n	801156e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801155a:	6839      	ldr	r1, [r7, #0]
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f000 fccd 	bl	8011efc <USBD_CtlError>
          break;
 8011562:	e004      	b.n	801156e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8011564:	6839      	ldr	r1, [r7, #0]
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f000 fcc8 	bl	8011efc <USBD_CtlError>
          break;
 801156c:	e000      	b.n	8011570 <USBD_StdItfReq+0x7c>
          break;
 801156e:	bf00      	nop
      }
      break;
 8011570:	e004      	b.n	801157c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8011572:	6839      	ldr	r1, [r7, #0]
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f000 fcc1 	bl	8011efc <USBD_CtlError>
      break;
 801157a:	bf00      	nop
  }

  return ret;
 801157c:	7bfb      	ldrb	r3, [r7, #15]
}
 801157e:	4618      	mov	r0, r3
 8011580:	3710      	adds	r7, #16
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}

08011586 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011586:	b580      	push	{r7, lr}
 8011588:	b084      	sub	sp, #16
 801158a:	af00      	add	r7, sp, #0
 801158c:	6078      	str	r0, [r7, #4]
 801158e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011590:	2300      	movs	r3, #0
 8011592:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	889b      	ldrh	r3, [r3, #4]
 8011598:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	781b      	ldrb	r3, [r3, #0]
 801159e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80115a2:	2b40      	cmp	r3, #64	@ 0x40
 80115a4:	d007      	beq.n	80115b6 <USBD_StdEPReq+0x30>
 80115a6:	2b40      	cmp	r3, #64	@ 0x40
 80115a8:	f200 8145 	bhi.w	8011836 <USBD_StdEPReq+0x2b0>
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d00c      	beq.n	80115ca <USBD_StdEPReq+0x44>
 80115b0:	2b20      	cmp	r3, #32
 80115b2:	f040 8140 	bne.w	8011836 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115bc:	689b      	ldr	r3, [r3, #8]
 80115be:	6839      	ldr	r1, [r7, #0]
 80115c0:	6878      	ldr	r0, [r7, #4]
 80115c2:	4798      	blx	r3
 80115c4:	4603      	mov	r3, r0
 80115c6:	73fb      	strb	r3, [r7, #15]
      break;
 80115c8:	e13a      	b.n	8011840 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	785b      	ldrb	r3, [r3, #1]
 80115ce:	2b03      	cmp	r3, #3
 80115d0:	d007      	beq.n	80115e2 <USBD_StdEPReq+0x5c>
 80115d2:	2b03      	cmp	r3, #3
 80115d4:	f300 8129 	bgt.w	801182a <USBD_StdEPReq+0x2a4>
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d07f      	beq.n	80116dc <USBD_StdEPReq+0x156>
 80115dc:	2b01      	cmp	r3, #1
 80115de:	d03c      	beq.n	801165a <USBD_StdEPReq+0xd4>
 80115e0:	e123      	b.n	801182a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80115e8:	b2db      	uxtb	r3, r3
 80115ea:	2b02      	cmp	r3, #2
 80115ec:	d002      	beq.n	80115f4 <USBD_StdEPReq+0x6e>
 80115ee:	2b03      	cmp	r3, #3
 80115f0:	d016      	beq.n	8011620 <USBD_StdEPReq+0x9a>
 80115f2:	e02c      	b.n	801164e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80115f4:	7bbb      	ldrb	r3, [r7, #14]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d00d      	beq.n	8011616 <USBD_StdEPReq+0x90>
 80115fa:	7bbb      	ldrb	r3, [r7, #14]
 80115fc:	2b80      	cmp	r3, #128	@ 0x80
 80115fe:	d00a      	beq.n	8011616 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011600:	7bbb      	ldrb	r3, [r7, #14]
 8011602:	4619      	mov	r1, r3
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f001 f917 	bl	8012838 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801160a:	2180      	movs	r1, #128	@ 0x80
 801160c:	6878      	ldr	r0, [r7, #4]
 801160e:	f001 f913 	bl	8012838 <USBD_LL_StallEP>
 8011612:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011614:	e020      	b.n	8011658 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8011616:	6839      	ldr	r1, [r7, #0]
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f000 fc6f 	bl	8011efc <USBD_CtlError>
              break;
 801161e:	e01b      	b.n	8011658 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	885b      	ldrh	r3, [r3, #2]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d10e      	bne.n	8011646 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011628:	7bbb      	ldrb	r3, [r7, #14]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d00b      	beq.n	8011646 <USBD_StdEPReq+0xc0>
 801162e:	7bbb      	ldrb	r3, [r7, #14]
 8011630:	2b80      	cmp	r3, #128	@ 0x80
 8011632:	d008      	beq.n	8011646 <USBD_StdEPReq+0xc0>
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	88db      	ldrh	r3, [r3, #6]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d104      	bne.n	8011646 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801163c:	7bbb      	ldrb	r3, [r7, #14]
 801163e:	4619      	mov	r1, r3
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f001 f8f9 	bl	8012838 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	f000 fd23 	bl	8012092 <USBD_CtlSendStatus>

              break;
 801164c:	e004      	b.n	8011658 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801164e:	6839      	ldr	r1, [r7, #0]
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f000 fc53 	bl	8011efc <USBD_CtlError>
              break;
 8011656:	bf00      	nop
          }
          break;
 8011658:	e0ec      	b.n	8011834 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011660:	b2db      	uxtb	r3, r3
 8011662:	2b02      	cmp	r3, #2
 8011664:	d002      	beq.n	801166c <USBD_StdEPReq+0xe6>
 8011666:	2b03      	cmp	r3, #3
 8011668:	d016      	beq.n	8011698 <USBD_StdEPReq+0x112>
 801166a:	e030      	b.n	80116ce <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801166c:	7bbb      	ldrb	r3, [r7, #14]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d00d      	beq.n	801168e <USBD_StdEPReq+0x108>
 8011672:	7bbb      	ldrb	r3, [r7, #14]
 8011674:	2b80      	cmp	r3, #128	@ 0x80
 8011676:	d00a      	beq.n	801168e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011678:	7bbb      	ldrb	r3, [r7, #14]
 801167a:	4619      	mov	r1, r3
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f001 f8db 	bl	8012838 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011682:	2180      	movs	r1, #128	@ 0x80
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f001 f8d7 	bl	8012838 <USBD_LL_StallEP>
 801168a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801168c:	e025      	b.n	80116da <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801168e:	6839      	ldr	r1, [r7, #0]
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f000 fc33 	bl	8011efc <USBD_CtlError>
              break;
 8011696:	e020      	b.n	80116da <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	885b      	ldrh	r3, [r3, #2]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d11b      	bne.n	80116d8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80116a0:	7bbb      	ldrb	r3, [r7, #14]
 80116a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d004      	beq.n	80116b4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80116aa:	7bbb      	ldrb	r3, [r7, #14]
 80116ac:	4619      	mov	r1, r3
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f001 f8e1 	bl	8012876 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f000 fcec 	bl	8012092 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116c0:	689b      	ldr	r3, [r3, #8]
 80116c2:	6839      	ldr	r1, [r7, #0]
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	4798      	blx	r3
 80116c8:	4603      	mov	r3, r0
 80116ca:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80116cc:	e004      	b.n	80116d8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80116ce:	6839      	ldr	r1, [r7, #0]
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f000 fc13 	bl	8011efc <USBD_CtlError>
              break;
 80116d6:	e000      	b.n	80116da <USBD_StdEPReq+0x154>
              break;
 80116d8:	bf00      	nop
          }
          break;
 80116da:	e0ab      	b.n	8011834 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	2b02      	cmp	r3, #2
 80116e6:	d002      	beq.n	80116ee <USBD_StdEPReq+0x168>
 80116e8:	2b03      	cmp	r3, #3
 80116ea:	d032      	beq.n	8011752 <USBD_StdEPReq+0x1cc>
 80116ec:	e097      	b.n	801181e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80116ee:	7bbb      	ldrb	r3, [r7, #14]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d007      	beq.n	8011704 <USBD_StdEPReq+0x17e>
 80116f4:	7bbb      	ldrb	r3, [r7, #14]
 80116f6:	2b80      	cmp	r3, #128	@ 0x80
 80116f8:	d004      	beq.n	8011704 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80116fa:	6839      	ldr	r1, [r7, #0]
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f000 fbfd 	bl	8011efc <USBD_CtlError>
                break;
 8011702:	e091      	b.n	8011828 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011704:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011708:	2b00      	cmp	r3, #0
 801170a:	da0b      	bge.n	8011724 <USBD_StdEPReq+0x19e>
 801170c:	7bbb      	ldrb	r3, [r7, #14]
 801170e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011712:	4613      	mov	r3, r2
 8011714:	009b      	lsls	r3, r3, #2
 8011716:	4413      	add	r3, r2
 8011718:	009b      	lsls	r3, r3, #2
 801171a:	3310      	adds	r3, #16
 801171c:	687a      	ldr	r2, [r7, #4]
 801171e:	4413      	add	r3, r2
 8011720:	3304      	adds	r3, #4
 8011722:	e00b      	b.n	801173c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011724:	7bbb      	ldrb	r3, [r7, #14]
 8011726:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801172a:	4613      	mov	r3, r2
 801172c:	009b      	lsls	r3, r3, #2
 801172e:	4413      	add	r3, r2
 8011730:	009b      	lsls	r3, r3, #2
 8011732:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011736:	687a      	ldr	r2, [r7, #4]
 8011738:	4413      	add	r3, r2
 801173a:	3304      	adds	r3, #4
 801173c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	2200      	movs	r2, #0
 8011742:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	2202      	movs	r2, #2
 8011748:	4619      	mov	r1, r3
 801174a:	6878      	ldr	r0, [r7, #4]
 801174c:	f000 fc47 	bl	8011fde <USBD_CtlSendData>
              break;
 8011750:	e06a      	b.n	8011828 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011752:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011756:	2b00      	cmp	r3, #0
 8011758:	da11      	bge.n	801177e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801175a:	7bbb      	ldrb	r3, [r7, #14]
 801175c:	f003 020f 	and.w	r2, r3, #15
 8011760:	6879      	ldr	r1, [r7, #4]
 8011762:	4613      	mov	r3, r2
 8011764:	009b      	lsls	r3, r3, #2
 8011766:	4413      	add	r3, r2
 8011768:	009b      	lsls	r3, r3, #2
 801176a:	440b      	add	r3, r1
 801176c:	3324      	adds	r3, #36	@ 0x24
 801176e:	881b      	ldrh	r3, [r3, #0]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d117      	bne.n	80117a4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011774:	6839      	ldr	r1, [r7, #0]
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f000 fbc0 	bl	8011efc <USBD_CtlError>
                  break;
 801177c:	e054      	b.n	8011828 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801177e:	7bbb      	ldrb	r3, [r7, #14]
 8011780:	f003 020f 	and.w	r2, r3, #15
 8011784:	6879      	ldr	r1, [r7, #4]
 8011786:	4613      	mov	r3, r2
 8011788:	009b      	lsls	r3, r3, #2
 801178a:	4413      	add	r3, r2
 801178c:	009b      	lsls	r3, r3, #2
 801178e:	440b      	add	r3, r1
 8011790:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011794:	881b      	ldrh	r3, [r3, #0]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d104      	bne.n	80117a4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801179a:	6839      	ldr	r1, [r7, #0]
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f000 fbad 	bl	8011efc <USBD_CtlError>
                  break;
 80117a2:	e041      	b.n	8011828 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80117a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	da0b      	bge.n	80117c4 <USBD_StdEPReq+0x23e>
 80117ac:	7bbb      	ldrb	r3, [r7, #14]
 80117ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80117b2:	4613      	mov	r3, r2
 80117b4:	009b      	lsls	r3, r3, #2
 80117b6:	4413      	add	r3, r2
 80117b8:	009b      	lsls	r3, r3, #2
 80117ba:	3310      	adds	r3, #16
 80117bc:	687a      	ldr	r2, [r7, #4]
 80117be:	4413      	add	r3, r2
 80117c0:	3304      	adds	r3, #4
 80117c2:	e00b      	b.n	80117dc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80117c4:	7bbb      	ldrb	r3, [r7, #14]
 80117c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80117ca:	4613      	mov	r3, r2
 80117cc:	009b      	lsls	r3, r3, #2
 80117ce:	4413      	add	r3, r2
 80117d0:	009b      	lsls	r3, r3, #2
 80117d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80117d6:	687a      	ldr	r2, [r7, #4]
 80117d8:	4413      	add	r3, r2
 80117da:	3304      	adds	r3, #4
 80117dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80117de:	7bbb      	ldrb	r3, [r7, #14]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d002      	beq.n	80117ea <USBD_StdEPReq+0x264>
 80117e4:	7bbb      	ldrb	r3, [r7, #14]
 80117e6:	2b80      	cmp	r3, #128	@ 0x80
 80117e8:	d103      	bne.n	80117f2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80117ea:	68bb      	ldr	r3, [r7, #8]
 80117ec:	2200      	movs	r2, #0
 80117ee:	601a      	str	r2, [r3, #0]
 80117f0:	e00e      	b.n	8011810 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80117f2:	7bbb      	ldrb	r3, [r7, #14]
 80117f4:	4619      	mov	r1, r3
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f001 f85c 	bl	80128b4 <USBD_LL_IsStallEP>
 80117fc:	4603      	mov	r3, r0
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d003      	beq.n	801180a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	2201      	movs	r2, #1
 8011806:	601a      	str	r2, [r3, #0]
 8011808:	e002      	b.n	8011810 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801180a:	68bb      	ldr	r3, [r7, #8]
 801180c:	2200      	movs	r2, #0
 801180e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	2202      	movs	r2, #2
 8011814:	4619      	mov	r1, r3
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f000 fbe1 	bl	8011fde <USBD_CtlSendData>
              break;
 801181c:	e004      	b.n	8011828 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801181e:	6839      	ldr	r1, [r7, #0]
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f000 fb6b 	bl	8011efc <USBD_CtlError>
              break;
 8011826:	bf00      	nop
          }
          break;
 8011828:	e004      	b.n	8011834 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801182a:	6839      	ldr	r1, [r7, #0]
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f000 fb65 	bl	8011efc <USBD_CtlError>
          break;
 8011832:	bf00      	nop
      }
      break;
 8011834:	e004      	b.n	8011840 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8011836:	6839      	ldr	r1, [r7, #0]
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f000 fb5f 	bl	8011efc <USBD_CtlError>
      break;
 801183e:	bf00      	nop
  }

  return ret;
 8011840:	7bfb      	ldrb	r3, [r7, #15]
}
 8011842:	4618      	mov	r0, r3
 8011844:	3710      	adds	r7, #16
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}
	...

0801184c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b084      	sub	sp, #16
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011856:	2300      	movs	r3, #0
 8011858:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801185a:	2300      	movs	r3, #0
 801185c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801185e:	2300      	movs	r3, #0
 8011860:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	885b      	ldrh	r3, [r3, #2]
 8011866:	0a1b      	lsrs	r3, r3, #8
 8011868:	b29b      	uxth	r3, r3
 801186a:	3b01      	subs	r3, #1
 801186c:	2b0e      	cmp	r3, #14
 801186e:	f200 8152 	bhi.w	8011b16 <USBD_GetDescriptor+0x2ca>
 8011872:	a201      	add	r2, pc, #4	@ (adr r2, 8011878 <USBD_GetDescriptor+0x2c>)
 8011874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011878:	080118e9 	.word	0x080118e9
 801187c:	08011901 	.word	0x08011901
 8011880:	08011941 	.word	0x08011941
 8011884:	08011b17 	.word	0x08011b17
 8011888:	08011b17 	.word	0x08011b17
 801188c:	08011ab7 	.word	0x08011ab7
 8011890:	08011ae3 	.word	0x08011ae3
 8011894:	08011b17 	.word	0x08011b17
 8011898:	08011b17 	.word	0x08011b17
 801189c:	08011b17 	.word	0x08011b17
 80118a0:	08011b17 	.word	0x08011b17
 80118a4:	08011b17 	.word	0x08011b17
 80118a8:	08011b17 	.word	0x08011b17
 80118ac:	08011b17 	.word	0x08011b17
 80118b0:	080118b5 	.word	0x080118b5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80118ba:	69db      	ldr	r3, [r3, #28]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d00b      	beq.n	80118d8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80118c6:	69db      	ldr	r3, [r3, #28]
 80118c8:	687a      	ldr	r2, [r7, #4]
 80118ca:	7c12      	ldrb	r2, [r2, #16]
 80118cc:	f107 0108 	add.w	r1, r7, #8
 80118d0:	4610      	mov	r0, r2
 80118d2:	4798      	blx	r3
 80118d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80118d6:	e126      	b.n	8011b26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80118d8:	6839      	ldr	r1, [r7, #0]
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f000 fb0e 	bl	8011efc <USBD_CtlError>
        err++;
 80118e0:	7afb      	ldrb	r3, [r7, #11]
 80118e2:	3301      	adds	r3, #1
 80118e4:	72fb      	strb	r3, [r7, #11]
      break;
 80118e6:	e11e      	b.n	8011b26 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	687a      	ldr	r2, [r7, #4]
 80118f2:	7c12      	ldrb	r2, [r2, #16]
 80118f4:	f107 0108 	add.w	r1, r7, #8
 80118f8:	4610      	mov	r0, r2
 80118fa:	4798      	blx	r3
 80118fc:	60f8      	str	r0, [r7, #12]
      break;
 80118fe:	e112      	b.n	8011b26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	7c1b      	ldrb	r3, [r3, #16]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d10d      	bne.n	8011924 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801190e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011910:	f107 0208 	add.w	r2, r7, #8
 8011914:	4610      	mov	r0, r2
 8011916:	4798      	blx	r3
 8011918:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	3301      	adds	r3, #1
 801191e:	2202      	movs	r2, #2
 8011920:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011922:	e100      	b.n	8011b26 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801192a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801192c:	f107 0208 	add.w	r2, r7, #8
 8011930:	4610      	mov	r0, r2
 8011932:	4798      	blx	r3
 8011934:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	3301      	adds	r3, #1
 801193a:	2202      	movs	r2, #2
 801193c:	701a      	strb	r2, [r3, #0]
      break;
 801193e:	e0f2      	b.n	8011b26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	885b      	ldrh	r3, [r3, #2]
 8011944:	b2db      	uxtb	r3, r3
 8011946:	2b05      	cmp	r3, #5
 8011948:	f200 80ac 	bhi.w	8011aa4 <USBD_GetDescriptor+0x258>
 801194c:	a201      	add	r2, pc, #4	@ (adr r2, 8011954 <USBD_GetDescriptor+0x108>)
 801194e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011952:	bf00      	nop
 8011954:	0801196d 	.word	0x0801196d
 8011958:	080119a1 	.word	0x080119a1
 801195c:	080119d5 	.word	0x080119d5
 8011960:	08011a09 	.word	0x08011a09
 8011964:	08011a3d 	.word	0x08011a3d
 8011968:	08011a71 	.word	0x08011a71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011972:	685b      	ldr	r3, [r3, #4]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d00b      	beq.n	8011990 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801197e:	685b      	ldr	r3, [r3, #4]
 8011980:	687a      	ldr	r2, [r7, #4]
 8011982:	7c12      	ldrb	r2, [r2, #16]
 8011984:	f107 0108 	add.w	r1, r7, #8
 8011988:	4610      	mov	r0, r2
 801198a:	4798      	blx	r3
 801198c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801198e:	e091      	b.n	8011ab4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011990:	6839      	ldr	r1, [r7, #0]
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f000 fab2 	bl	8011efc <USBD_CtlError>
            err++;
 8011998:	7afb      	ldrb	r3, [r7, #11]
 801199a:	3301      	adds	r3, #1
 801199c:	72fb      	strb	r3, [r7, #11]
          break;
 801199e:	e089      	b.n	8011ab4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80119a6:	689b      	ldr	r3, [r3, #8]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d00b      	beq.n	80119c4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80119b2:	689b      	ldr	r3, [r3, #8]
 80119b4:	687a      	ldr	r2, [r7, #4]
 80119b6:	7c12      	ldrb	r2, [r2, #16]
 80119b8:	f107 0108 	add.w	r1, r7, #8
 80119bc:	4610      	mov	r0, r2
 80119be:	4798      	blx	r3
 80119c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80119c2:	e077      	b.n	8011ab4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80119c4:	6839      	ldr	r1, [r7, #0]
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f000 fa98 	bl	8011efc <USBD_CtlError>
            err++;
 80119cc:	7afb      	ldrb	r3, [r7, #11]
 80119ce:	3301      	adds	r3, #1
 80119d0:	72fb      	strb	r3, [r7, #11]
          break;
 80119d2:	e06f      	b.n	8011ab4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80119da:	68db      	ldr	r3, [r3, #12]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d00b      	beq.n	80119f8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80119e6:	68db      	ldr	r3, [r3, #12]
 80119e8:	687a      	ldr	r2, [r7, #4]
 80119ea:	7c12      	ldrb	r2, [r2, #16]
 80119ec:	f107 0108 	add.w	r1, r7, #8
 80119f0:	4610      	mov	r0, r2
 80119f2:	4798      	blx	r3
 80119f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80119f6:	e05d      	b.n	8011ab4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80119f8:	6839      	ldr	r1, [r7, #0]
 80119fa:	6878      	ldr	r0, [r7, #4]
 80119fc:	f000 fa7e 	bl	8011efc <USBD_CtlError>
            err++;
 8011a00:	7afb      	ldrb	r3, [r7, #11]
 8011a02:	3301      	adds	r3, #1
 8011a04:	72fb      	strb	r3, [r7, #11]
          break;
 8011a06:	e055      	b.n	8011ab4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011a0e:	691b      	ldr	r3, [r3, #16]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d00b      	beq.n	8011a2c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011a1a:	691b      	ldr	r3, [r3, #16]
 8011a1c:	687a      	ldr	r2, [r7, #4]
 8011a1e:	7c12      	ldrb	r2, [r2, #16]
 8011a20:	f107 0108 	add.w	r1, r7, #8
 8011a24:	4610      	mov	r0, r2
 8011a26:	4798      	blx	r3
 8011a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011a2a:	e043      	b.n	8011ab4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011a2c:	6839      	ldr	r1, [r7, #0]
 8011a2e:	6878      	ldr	r0, [r7, #4]
 8011a30:	f000 fa64 	bl	8011efc <USBD_CtlError>
            err++;
 8011a34:	7afb      	ldrb	r3, [r7, #11]
 8011a36:	3301      	adds	r3, #1
 8011a38:	72fb      	strb	r3, [r7, #11]
          break;
 8011a3a:	e03b      	b.n	8011ab4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011a42:	695b      	ldr	r3, [r3, #20]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d00b      	beq.n	8011a60 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011a4e:	695b      	ldr	r3, [r3, #20]
 8011a50:	687a      	ldr	r2, [r7, #4]
 8011a52:	7c12      	ldrb	r2, [r2, #16]
 8011a54:	f107 0108 	add.w	r1, r7, #8
 8011a58:	4610      	mov	r0, r2
 8011a5a:	4798      	blx	r3
 8011a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011a5e:	e029      	b.n	8011ab4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011a60:	6839      	ldr	r1, [r7, #0]
 8011a62:	6878      	ldr	r0, [r7, #4]
 8011a64:	f000 fa4a 	bl	8011efc <USBD_CtlError>
            err++;
 8011a68:	7afb      	ldrb	r3, [r7, #11]
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8011a6e:	e021      	b.n	8011ab4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011a76:	699b      	ldr	r3, [r3, #24]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d00b      	beq.n	8011a94 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011a82:	699b      	ldr	r3, [r3, #24]
 8011a84:	687a      	ldr	r2, [r7, #4]
 8011a86:	7c12      	ldrb	r2, [r2, #16]
 8011a88:	f107 0108 	add.w	r1, r7, #8
 8011a8c:	4610      	mov	r0, r2
 8011a8e:	4798      	blx	r3
 8011a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011a92:	e00f      	b.n	8011ab4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011a94:	6839      	ldr	r1, [r7, #0]
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	f000 fa30 	bl	8011efc <USBD_CtlError>
            err++;
 8011a9c:	7afb      	ldrb	r3, [r7, #11]
 8011a9e:	3301      	adds	r3, #1
 8011aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8011aa2:	e007      	b.n	8011ab4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011aa4:	6839      	ldr	r1, [r7, #0]
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f000 fa28 	bl	8011efc <USBD_CtlError>
          err++;
 8011aac:	7afb      	ldrb	r3, [r7, #11]
 8011aae:	3301      	adds	r3, #1
 8011ab0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8011ab2:	bf00      	nop
      }
      break;
 8011ab4:	e037      	b.n	8011b26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	7c1b      	ldrb	r3, [r3, #16]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d109      	bne.n	8011ad2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ac6:	f107 0208 	add.w	r2, r7, #8
 8011aca:	4610      	mov	r0, r2
 8011acc:	4798      	blx	r3
 8011ace:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011ad0:	e029      	b.n	8011b26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011ad2:	6839      	ldr	r1, [r7, #0]
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f000 fa11 	bl	8011efc <USBD_CtlError>
        err++;
 8011ada:	7afb      	ldrb	r3, [r7, #11]
 8011adc:	3301      	adds	r3, #1
 8011ade:	72fb      	strb	r3, [r7, #11]
      break;
 8011ae0:	e021      	b.n	8011b26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	7c1b      	ldrb	r3, [r3, #16]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d10d      	bne.n	8011b06 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011af2:	f107 0208 	add.w	r2, r7, #8
 8011af6:	4610      	mov	r0, r2
 8011af8:	4798      	blx	r3
 8011afa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	3301      	adds	r3, #1
 8011b00:	2207      	movs	r2, #7
 8011b02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011b04:	e00f      	b.n	8011b26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011b06:	6839      	ldr	r1, [r7, #0]
 8011b08:	6878      	ldr	r0, [r7, #4]
 8011b0a:	f000 f9f7 	bl	8011efc <USBD_CtlError>
        err++;
 8011b0e:	7afb      	ldrb	r3, [r7, #11]
 8011b10:	3301      	adds	r3, #1
 8011b12:	72fb      	strb	r3, [r7, #11]
      break;
 8011b14:	e007      	b.n	8011b26 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8011b16:	6839      	ldr	r1, [r7, #0]
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f000 f9ef 	bl	8011efc <USBD_CtlError>
      err++;
 8011b1e:	7afb      	ldrb	r3, [r7, #11]
 8011b20:	3301      	adds	r3, #1
 8011b22:	72fb      	strb	r3, [r7, #11]
      break;
 8011b24:	bf00      	nop
  }

  if (err != 0U)
 8011b26:	7afb      	ldrb	r3, [r7, #11]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d11e      	bne.n	8011b6a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	88db      	ldrh	r3, [r3, #6]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d016      	beq.n	8011b62 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8011b34:	893b      	ldrh	r3, [r7, #8]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d00e      	beq.n	8011b58 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	88da      	ldrh	r2, [r3, #6]
 8011b3e:	893b      	ldrh	r3, [r7, #8]
 8011b40:	4293      	cmp	r3, r2
 8011b42:	bf28      	it	cs
 8011b44:	4613      	movcs	r3, r2
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011b4a:	893b      	ldrh	r3, [r7, #8]
 8011b4c:	461a      	mov	r2, r3
 8011b4e:	68f9      	ldr	r1, [r7, #12]
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f000 fa44 	bl	8011fde <USBD_CtlSendData>
 8011b56:	e009      	b.n	8011b6c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011b58:	6839      	ldr	r1, [r7, #0]
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f000 f9ce 	bl	8011efc <USBD_CtlError>
 8011b60:	e004      	b.n	8011b6c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f000 fa95 	bl	8012092 <USBD_CtlSendStatus>
 8011b68:	e000      	b.n	8011b6c <USBD_GetDescriptor+0x320>
    return;
 8011b6a:	bf00      	nop
  }
}
 8011b6c:	3710      	adds	r7, #16
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
 8011b72:	bf00      	nop

08011b74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b084      	sub	sp, #16
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
 8011b7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	889b      	ldrh	r3, [r3, #4]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d131      	bne.n	8011bea <USBD_SetAddress+0x76>
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	88db      	ldrh	r3, [r3, #6]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d12d      	bne.n	8011bea <USBD_SetAddress+0x76>
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	885b      	ldrh	r3, [r3, #2]
 8011b92:	2b7f      	cmp	r3, #127	@ 0x7f
 8011b94:	d829      	bhi.n	8011bea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	885b      	ldrh	r3, [r3, #2]
 8011b9a:	b2db      	uxtb	r3, r3
 8011b9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ba0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ba8:	b2db      	uxtb	r3, r3
 8011baa:	2b03      	cmp	r3, #3
 8011bac:	d104      	bne.n	8011bb8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011bae:	6839      	ldr	r1, [r7, #0]
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f000 f9a3 	bl	8011efc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bb6:	e01d      	b.n	8011bf4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	7bfa      	ldrb	r2, [r7, #15]
 8011bbc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011bc0:	7bfb      	ldrb	r3, [r7, #15]
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	f000 fea1 	bl	801290c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f000 fa61 	bl	8012092 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011bd0:	7bfb      	ldrb	r3, [r7, #15]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d004      	beq.n	8011be0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2202      	movs	r2, #2
 8011bda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bde:	e009      	b.n	8011bf4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2201      	movs	r2, #1
 8011be4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011be8:	e004      	b.n	8011bf4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011bea:	6839      	ldr	r1, [r7, #0]
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f000 f985 	bl	8011efc <USBD_CtlError>
  }
}
 8011bf2:	bf00      	nop
 8011bf4:	bf00      	nop
 8011bf6:	3710      	adds	r7, #16
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd80      	pop	{r7, pc}

08011bfc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b084      	sub	sp, #16
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011c06:	2300      	movs	r3, #0
 8011c08:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	885b      	ldrh	r3, [r3, #2]
 8011c0e:	b2da      	uxtb	r2, r3
 8011c10:	4b4c      	ldr	r3, [pc, #304]	@ (8011d44 <USBD_SetConfig+0x148>)
 8011c12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011c14:	4b4b      	ldr	r3, [pc, #300]	@ (8011d44 <USBD_SetConfig+0x148>)
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	2b01      	cmp	r3, #1
 8011c1a:	d905      	bls.n	8011c28 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011c1c:	6839      	ldr	r1, [r7, #0]
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f000 f96c 	bl	8011efc <USBD_CtlError>
    return USBD_FAIL;
 8011c24:	2303      	movs	r3, #3
 8011c26:	e088      	b.n	8011d3a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c2e:	b2db      	uxtb	r3, r3
 8011c30:	2b02      	cmp	r3, #2
 8011c32:	d002      	beq.n	8011c3a <USBD_SetConfig+0x3e>
 8011c34:	2b03      	cmp	r3, #3
 8011c36:	d025      	beq.n	8011c84 <USBD_SetConfig+0x88>
 8011c38:	e071      	b.n	8011d1e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011c3a:	4b42      	ldr	r3, [pc, #264]	@ (8011d44 <USBD_SetConfig+0x148>)
 8011c3c:	781b      	ldrb	r3, [r3, #0]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d01c      	beq.n	8011c7c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8011c42:	4b40      	ldr	r3, [pc, #256]	@ (8011d44 <USBD_SetConfig+0x148>)
 8011c44:	781b      	ldrb	r3, [r3, #0]
 8011c46:	461a      	mov	r2, r3
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8011d44 <USBD_SetConfig+0x148>)
 8011c4e:	781b      	ldrb	r3, [r3, #0]
 8011c50:	4619      	mov	r1, r3
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f7ff f992 	bl	8010f7c <USBD_SetClassConfig>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011c5c:	7bfb      	ldrb	r3, [r7, #15]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d004      	beq.n	8011c6c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8011c62:	6839      	ldr	r1, [r7, #0]
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f000 f949 	bl	8011efc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011c6a:	e065      	b.n	8011d38 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	f000 fa10 	bl	8012092 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2203      	movs	r2, #3
 8011c76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011c7a:	e05d      	b.n	8011d38 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f000 fa08 	bl	8012092 <USBD_CtlSendStatus>
      break;
 8011c82:	e059      	b.n	8011d38 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011c84:	4b2f      	ldr	r3, [pc, #188]	@ (8011d44 <USBD_SetConfig+0x148>)
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d112      	bne.n	8011cb2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2202      	movs	r2, #2
 8011c90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011c94:	4b2b      	ldr	r3, [pc, #172]	@ (8011d44 <USBD_SetConfig+0x148>)
 8011c96:	781b      	ldrb	r3, [r3, #0]
 8011c98:	461a      	mov	r2, r3
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011c9e:	4b29      	ldr	r3, [pc, #164]	@ (8011d44 <USBD_SetConfig+0x148>)
 8011ca0:	781b      	ldrb	r3, [r3, #0]
 8011ca2:	4619      	mov	r1, r3
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	f7ff f985 	bl	8010fb4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f000 f9f1 	bl	8012092 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011cb0:	e042      	b.n	8011d38 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8011cb2:	4b24      	ldr	r3, [pc, #144]	@ (8011d44 <USBD_SetConfig+0x148>)
 8011cb4:	781b      	ldrb	r3, [r3, #0]
 8011cb6:	461a      	mov	r2, r3
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d02a      	beq.n	8011d16 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	b2db      	uxtb	r3, r3
 8011cc6:	4619      	mov	r1, r3
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f7ff f973 	bl	8010fb4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011cce:	4b1d      	ldr	r3, [pc, #116]	@ (8011d44 <USBD_SetConfig+0x148>)
 8011cd0:	781b      	ldrb	r3, [r3, #0]
 8011cd2:	461a      	mov	r2, r3
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8011d44 <USBD_SetConfig+0x148>)
 8011cda:	781b      	ldrb	r3, [r3, #0]
 8011cdc:	4619      	mov	r1, r3
 8011cde:	6878      	ldr	r0, [r7, #4]
 8011ce0:	f7ff f94c 	bl	8010f7c <USBD_SetClassConfig>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011ce8:	7bfb      	ldrb	r3, [r7, #15]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d00f      	beq.n	8011d0e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8011cee:	6839      	ldr	r1, [r7, #0]
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f000 f903 	bl	8011efc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	685b      	ldr	r3, [r3, #4]
 8011cfa:	b2db      	uxtb	r3, r3
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f7ff f958 	bl	8010fb4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2202      	movs	r2, #2
 8011d08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011d0c:	e014      	b.n	8011d38 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f000 f9bf 	bl	8012092 <USBD_CtlSendStatus>
      break;
 8011d14:	e010      	b.n	8011d38 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f000 f9bb 	bl	8012092 <USBD_CtlSendStatus>
      break;
 8011d1c:	e00c      	b.n	8011d38 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8011d1e:	6839      	ldr	r1, [r7, #0]
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f000 f8eb 	bl	8011efc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011d26:	4b07      	ldr	r3, [pc, #28]	@ (8011d44 <USBD_SetConfig+0x148>)
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	4619      	mov	r1, r3
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	f7ff f941 	bl	8010fb4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011d32:	2303      	movs	r3, #3
 8011d34:	73fb      	strb	r3, [r7, #15]
      break;
 8011d36:	bf00      	nop
  }

  return ret;
 8011d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	3710      	adds	r7, #16
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}
 8011d42:	bf00      	nop
 8011d44:	200007c4 	.word	0x200007c4

08011d48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	88db      	ldrh	r3, [r3, #6]
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d004      	beq.n	8011d64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011d5a:	6839      	ldr	r1, [r7, #0]
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f000 f8cd 	bl	8011efc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011d62:	e023      	b.n	8011dac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d6a:	b2db      	uxtb	r3, r3
 8011d6c:	2b02      	cmp	r3, #2
 8011d6e:	dc02      	bgt.n	8011d76 <USBD_GetConfig+0x2e>
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	dc03      	bgt.n	8011d7c <USBD_GetConfig+0x34>
 8011d74:	e015      	b.n	8011da2 <USBD_GetConfig+0x5a>
 8011d76:	2b03      	cmp	r3, #3
 8011d78:	d00b      	beq.n	8011d92 <USBD_GetConfig+0x4a>
 8011d7a:	e012      	b.n	8011da2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	3308      	adds	r3, #8
 8011d86:	2201      	movs	r2, #1
 8011d88:	4619      	mov	r1, r3
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f000 f927 	bl	8011fde <USBD_CtlSendData>
        break;
 8011d90:	e00c      	b.n	8011dac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	3304      	adds	r3, #4
 8011d96:	2201      	movs	r2, #1
 8011d98:	4619      	mov	r1, r3
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f000 f91f 	bl	8011fde <USBD_CtlSendData>
        break;
 8011da0:	e004      	b.n	8011dac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011da2:	6839      	ldr	r1, [r7, #0]
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f000 f8a9 	bl	8011efc <USBD_CtlError>
        break;
 8011daa:	bf00      	nop
}
 8011dac:	bf00      	nop
 8011dae:	3708      	adds	r7, #8
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}

08011db4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b082      	sub	sp, #8
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011dc4:	b2db      	uxtb	r3, r3
 8011dc6:	3b01      	subs	r3, #1
 8011dc8:	2b02      	cmp	r3, #2
 8011dca:	d81e      	bhi.n	8011e0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	88db      	ldrh	r3, [r3, #6]
 8011dd0:	2b02      	cmp	r3, #2
 8011dd2:	d004      	beq.n	8011dde <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011dd4:	6839      	ldr	r1, [r7, #0]
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f000 f890 	bl	8011efc <USBD_CtlError>
        break;
 8011ddc:	e01a      	b.n	8011e14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2201      	movs	r2, #1
 8011de2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d005      	beq.n	8011dfa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	68db      	ldr	r3, [r3, #12]
 8011df2:	f043 0202 	orr.w	r2, r3, #2
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	330c      	adds	r3, #12
 8011dfe:	2202      	movs	r2, #2
 8011e00:	4619      	mov	r1, r3
 8011e02:	6878      	ldr	r0, [r7, #4]
 8011e04:	f000 f8eb 	bl	8011fde <USBD_CtlSendData>
      break;
 8011e08:	e004      	b.n	8011e14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011e0a:	6839      	ldr	r1, [r7, #0]
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f000 f875 	bl	8011efc <USBD_CtlError>
      break;
 8011e12:	bf00      	nop
  }
}
 8011e14:	bf00      	nop
 8011e16:	3708      	adds	r7, #8
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}

08011e1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b082      	sub	sp, #8
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	885b      	ldrh	r3, [r3, #2]
 8011e2a:	2b01      	cmp	r3, #1
 8011e2c:	d106      	bne.n	8011e3c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	2201      	movs	r2, #1
 8011e32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f000 f92b 	bl	8012092 <USBD_CtlSendStatus>
  }
}
 8011e3c:	bf00      	nop
 8011e3e:	3708      	adds	r7, #8
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}

08011e44 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b082      	sub	sp, #8
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011e54:	b2db      	uxtb	r3, r3
 8011e56:	3b01      	subs	r3, #1
 8011e58:	2b02      	cmp	r3, #2
 8011e5a:	d80b      	bhi.n	8011e74 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	885b      	ldrh	r3, [r3, #2]
 8011e60:	2b01      	cmp	r3, #1
 8011e62:	d10c      	bne.n	8011e7e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2200      	movs	r2, #0
 8011e68:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	f000 f910 	bl	8012092 <USBD_CtlSendStatus>
      }
      break;
 8011e72:	e004      	b.n	8011e7e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011e74:	6839      	ldr	r1, [r7, #0]
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	f000 f840 	bl	8011efc <USBD_CtlError>
      break;
 8011e7c:	e000      	b.n	8011e80 <USBD_ClrFeature+0x3c>
      break;
 8011e7e:	bf00      	nop
  }
}
 8011e80:	bf00      	nop
 8011e82:	3708      	adds	r7, #8
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}

08011e88 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b084      	sub	sp, #16
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	781a      	ldrb	r2, [r3, #0]
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	3301      	adds	r3, #1
 8011ea2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	781a      	ldrb	r2, [r3, #0]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	3301      	adds	r3, #1
 8011eb0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011eb2:	68f8      	ldr	r0, [r7, #12]
 8011eb4:	f7ff fa92 	bl	80113dc <SWAPBYTE>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	461a      	mov	r2, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	3301      	adds	r3, #1
 8011ec4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	3301      	adds	r3, #1
 8011eca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011ecc:	68f8      	ldr	r0, [r7, #12]
 8011ece:	f7ff fa85 	bl	80113dc <SWAPBYTE>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	3301      	adds	r3, #1
 8011ede:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	3301      	adds	r3, #1
 8011ee4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011ee6:	68f8      	ldr	r0, [r7, #12]
 8011ee8:	f7ff fa78 	bl	80113dc <SWAPBYTE>
 8011eec:	4603      	mov	r3, r0
 8011eee:	461a      	mov	r2, r3
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	80da      	strh	r2, [r3, #6]
}
 8011ef4:	bf00      	nop
 8011ef6:	3710      	adds	r7, #16
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}

08011efc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b082      	sub	sp, #8
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
 8011f04:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f06:	2180      	movs	r1, #128	@ 0x80
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f000 fc95 	bl	8012838 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011f0e:	2100      	movs	r1, #0
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f000 fc91 	bl	8012838 <USBD_LL_StallEP>
}
 8011f16:	bf00      	nop
 8011f18:	3708      	adds	r7, #8
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}

08011f1e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011f1e:	b580      	push	{r7, lr}
 8011f20:	b086      	sub	sp, #24
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	60f8      	str	r0, [r7, #12]
 8011f26:	60b9      	str	r1, [r7, #8]
 8011f28:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d036      	beq.n	8011fa2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011f38:	6938      	ldr	r0, [r7, #16]
 8011f3a:	f000 f836 	bl	8011faa <USBD_GetLen>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	3301      	adds	r3, #1
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	005b      	lsls	r3, r3, #1
 8011f46:	b29a      	uxth	r2, r3
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011f4c:	7dfb      	ldrb	r3, [r7, #23]
 8011f4e:	68ba      	ldr	r2, [r7, #8]
 8011f50:	4413      	add	r3, r2
 8011f52:	687a      	ldr	r2, [r7, #4]
 8011f54:	7812      	ldrb	r2, [r2, #0]
 8011f56:	701a      	strb	r2, [r3, #0]
  idx++;
 8011f58:	7dfb      	ldrb	r3, [r7, #23]
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011f5e:	7dfb      	ldrb	r3, [r7, #23]
 8011f60:	68ba      	ldr	r2, [r7, #8]
 8011f62:	4413      	add	r3, r2
 8011f64:	2203      	movs	r2, #3
 8011f66:	701a      	strb	r2, [r3, #0]
  idx++;
 8011f68:	7dfb      	ldrb	r3, [r7, #23]
 8011f6a:	3301      	adds	r3, #1
 8011f6c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011f6e:	e013      	b.n	8011f98 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011f70:	7dfb      	ldrb	r3, [r7, #23]
 8011f72:	68ba      	ldr	r2, [r7, #8]
 8011f74:	4413      	add	r3, r2
 8011f76:	693a      	ldr	r2, [r7, #16]
 8011f78:	7812      	ldrb	r2, [r2, #0]
 8011f7a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011f7c:	693b      	ldr	r3, [r7, #16]
 8011f7e:	3301      	adds	r3, #1
 8011f80:	613b      	str	r3, [r7, #16]
    idx++;
 8011f82:	7dfb      	ldrb	r3, [r7, #23]
 8011f84:	3301      	adds	r3, #1
 8011f86:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011f88:	7dfb      	ldrb	r3, [r7, #23]
 8011f8a:	68ba      	ldr	r2, [r7, #8]
 8011f8c:	4413      	add	r3, r2
 8011f8e:	2200      	movs	r2, #0
 8011f90:	701a      	strb	r2, [r3, #0]
    idx++;
 8011f92:	7dfb      	ldrb	r3, [r7, #23]
 8011f94:	3301      	adds	r3, #1
 8011f96:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d1e7      	bne.n	8011f70 <USBD_GetString+0x52>
 8011fa0:	e000      	b.n	8011fa4 <USBD_GetString+0x86>
    return;
 8011fa2:	bf00      	nop
  }
}
 8011fa4:	3718      	adds	r7, #24
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}

08011faa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011faa:	b480      	push	{r7}
 8011fac:	b085      	sub	sp, #20
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011fba:	e005      	b.n	8011fc8 <USBD_GetLen+0x1e>
  {
    len++;
 8011fbc:	7bfb      	ldrb	r3, [r7, #15]
 8011fbe:	3301      	adds	r3, #1
 8011fc0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d1f5      	bne.n	8011fbc <USBD_GetLen+0x12>
  }

  return len;
 8011fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3714      	adds	r7, #20
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fdc:	4770      	bx	lr

08011fde <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011fde:	b580      	push	{r7, lr}
 8011fe0:	b084      	sub	sp, #16
 8011fe2:	af00      	add	r7, sp, #0
 8011fe4:	60f8      	str	r0, [r7, #12]
 8011fe6:	60b9      	str	r1, [r7, #8]
 8011fe8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	2202      	movs	r2, #2
 8011fee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	687a      	ldr	r2, [r7, #4]
 8011ff6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	687a      	ldr	r2, [r7, #4]
 8011ffc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	68ba      	ldr	r2, [r7, #8]
 8012002:	2100      	movs	r1, #0
 8012004:	68f8      	ldr	r0, [r7, #12]
 8012006:	f000 fca0 	bl	801294a <USBD_LL_Transmit>

  return USBD_OK;
 801200a:	2300      	movs	r3, #0
}
 801200c:	4618      	mov	r0, r3
 801200e:	3710      	adds	r7, #16
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}

08012014 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b084      	sub	sp, #16
 8012018:	af00      	add	r7, sp, #0
 801201a:	60f8      	str	r0, [r7, #12]
 801201c:	60b9      	str	r1, [r7, #8]
 801201e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	68ba      	ldr	r2, [r7, #8]
 8012024:	2100      	movs	r1, #0
 8012026:	68f8      	ldr	r0, [r7, #12]
 8012028:	f000 fc8f 	bl	801294a <USBD_LL_Transmit>

  return USBD_OK;
 801202c:	2300      	movs	r3, #0
}
 801202e:	4618      	mov	r0, r3
 8012030:	3710      	adds	r7, #16
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}

08012036 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012036:	b580      	push	{r7, lr}
 8012038:	b084      	sub	sp, #16
 801203a:	af00      	add	r7, sp, #0
 801203c:	60f8      	str	r0, [r7, #12]
 801203e:	60b9      	str	r1, [r7, #8]
 8012040:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	2203      	movs	r2, #3
 8012046:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	687a      	ldr	r2, [r7, #4]
 801204e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	687a      	ldr	r2, [r7, #4]
 8012056:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	68ba      	ldr	r2, [r7, #8]
 801205e:	2100      	movs	r1, #0
 8012060:	68f8      	ldr	r0, [r7, #12]
 8012062:	f000 fc93 	bl	801298c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012066:	2300      	movs	r3, #0
}
 8012068:	4618      	mov	r0, r3
 801206a:	3710      	adds	r7, #16
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b084      	sub	sp, #16
 8012074:	af00      	add	r7, sp, #0
 8012076:	60f8      	str	r0, [r7, #12]
 8012078:	60b9      	str	r1, [r7, #8]
 801207a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	68ba      	ldr	r2, [r7, #8]
 8012080:	2100      	movs	r1, #0
 8012082:	68f8      	ldr	r0, [r7, #12]
 8012084:	f000 fc82 	bl	801298c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012088:	2300      	movs	r3, #0
}
 801208a:	4618      	mov	r0, r3
 801208c:	3710      	adds	r7, #16
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}

08012092 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012092:	b580      	push	{r7, lr}
 8012094:	b082      	sub	sp, #8
 8012096:	af00      	add	r7, sp, #0
 8012098:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2204      	movs	r2, #4
 801209e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80120a2:	2300      	movs	r3, #0
 80120a4:	2200      	movs	r2, #0
 80120a6:	2100      	movs	r1, #0
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f000 fc4e 	bl	801294a <USBD_LL_Transmit>

  return USBD_OK;
 80120ae:	2300      	movs	r3, #0
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3708      	adds	r7, #8
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}

080120b8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b082      	sub	sp, #8
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2205      	movs	r2, #5
 80120c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80120c8:	2300      	movs	r3, #0
 80120ca:	2200      	movs	r2, #0
 80120cc:	2100      	movs	r1, #0
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f000 fc5c 	bl	801298c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80120d4:	2300      	movs	r3, #0
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3708      	adds	r7, #8
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}
	...

080120e0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80120e4:	2200      	movs	r2, #0
 80120e6:	4912      	ldr	r1, [pc, #72]	@ (8012130 <MX_USB_Device_Init+0x50>)
 80120e8:	4812      	ldr	r0, [pc, #72]	@ (8012134 <MX_USB_Device_Init+0x54>)
 80120ea:	f7fe fed9 	bl	8010ea0 <USBD_Init>
 80120ee:	4603      	mov	r3, r0
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d001      	beq.n	80120f8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80120f4:	f7f0 f890 	bl	8002218 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80120f8:	490f      	ldr	r1, [pc, #60]	@ (8012138 <MX_USB_Device_Init+0x58>)
 80120fa:	480e      	ldr	r0, [pc, #56]	@ (8012134 <MX_USB_Device_Init+0x54>)
 80120fc:	f7fe ff00 	bl	8010f00 <USBD_RegisterClass>
 8012100:	4603      	mov	r3, r0
 8012102:	2b00      	cmp	r3, #0
 8012104:	d001      	beq.n	801210a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012106:	f7f0 f887 	bl	8002218 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801210a:	490c      	ldr	r1, [pc, #48]	@ (801213c <MX_USB_Device_Init+0x5c>)
 801210c:	4809      	ldr	r0, [pc, #36]	@ (8012134 <MX_USB_Device_Init+0x54>)
 801210e:	f7fe fe21 	bl	8010d54 <USBD_CDC_RegisterInterface>
 8012112:	4603      	mov	r3, r0
 8012114:	2b00      	cmp	r3, #0
 8012116:	d001      	beq.n	801211c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012118:	f7f0 f87e 	bl	8002218 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801211c:	4805      	ldr	r0, [pc, #20]	@ (8012134 <MX_USB_Device_Init+0x54>)
 801211e:	f7fe ff16 	bl	8010f4e <USBD_Start>
 8012122:	4603      	mov	r3, r0
 8012124:	2b00      	cmp	r3, #0
 8012126:	d001      	beq.n	801212c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012128:	f7f0 f876 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801212c:	bf00      	nop
 801212e:	bd80      	pop	{r7, pc}
 8012130:	20000130 	.word	0x20000130
 8012134:	200007c8 	.word	0x200007c8
 8012138:	20000018 	.word	0x20000018
 801213c:	2000011c 	.word	0x2000011c

08012140 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012144:	2200      	movs	r2, #0
 8012146:	4905      	ldr	r1, [pc, #20]	@ (801215c <CDC_Init_FS+0x1c>)
 8012148:	4805      	ldr	r0, [pc, #20]	@ (8012160 <CDC_Init_FS+0x20>)
 801214a:	f7fe fe18 	bl	8010d7e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801214e:	4905      	ldr	r1, [pc, #20]	@ (8012164 <CDC_Init_FS+0x24>)
 8012150:	4803      	ldr	r0, [pc, #12]	@ (8012160 <CDC_Init_FS+0x20>)
 8012152:	f7fe fe32 	bl	8010dba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012156:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012158:	4618      	mov	r0, r3
 801215a:	bd80      	pop	{r7, pc}
 801215c:	20001298 	.word	0x20001298
 8012160:	200007c8 	.word	0x200007c8
 8012164:	20000a98 	.word	0x20000a98

08012168 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012168:	b480      	push	{r7}
 801216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801216c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801216e:	4618      	mov	r0, r3
 8012170:	46bd      	mov	sp, r7
 8012172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012176:	4770      	bx	lr

08012178 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012178:	b480      	push	{r7}
 801217a:	b083      	sub	sp, #12
 801217c:	af00      	add	r7, sp, #0
 801217e:	4603      	mov	r3, r0
 8012180:	6039      	str	r1, [r7, #0]
 8012182:	71fb      	strb	r3, [r7, #7]
 8012184:	4613      	mov	r3, r2
 8012186:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012188:	79fb      	ldrb	r3, [r7, #7]
 801218a:	2b23      	cmp	r3, #35	@ 0x23
 801218c:	d84a      	bhi.n	8012224 <CDC_Control_FS+0xac>
 801218e:	a201      	add	r2, pc, #4	@ (adr r2, 8012194 <CDC_Control_FS+0x1c>)
 8012190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012194:	08012225 	.word	0x08012225
 8012198:	08012225 	.word	0x08012225
 801219c:	08012225 	.word	0x08012225
 80121a0:	08012225 	.word	0x08012225
 80121a4:	08012225 	.word	0x08012225
 80121a8:	08012225 	.word	0x08012225
 80121ac:	08012225 	.word	0x08012225
 80121b0:	08012225 	.word	0x08012225
 80121b4:	08012225 	.word	0x08012225
 80121b8:	08012225 	.word	0x08012225
 80121bc:	08012225 	.word	0x08012225
 80121c0:	08012225 	.word	0x08012225
 80121c4:	08012225 	.word	0x08012225
 80121c8:	08012225 	.word	0x08012225
 80121cc:	08012225 	.word	0x08012225
 80121d0:	08012225 	.word	0x08012225
 80121d4:	08012225 	.word	0x08012225
 80121d8:	08012225 	.word	0x08012225
 80121dc:	08012225 	.word	0x08012225
 80121e0:	08012225 	.word	0x08012225
 80121e4:	08012225 	.word	0x08012225
 80121e8:	08012225 	.word	0x08012225
 80121ec:	08012225 	.word	0x08012225
 80121f0:	08012225 	.word	0x08012225
 80121f4:	08012225 	.word	0x08012225
 80121f8:	08012225 	.word	0x08012225
 80121fc:	08012225 	.word	0x08012225
 8012200:	08012225 	.word	0x08012225
 8012204:	08012225 	.word	0x08012225
 8012208:	08012225 	.word	0x08012225
 801220c:	08012225 	.word	0x08012225
 8012210:	08012225 	.word	0x08012225
 8012214:	08012225 	.word	0x08012225
 8012218:	08012225 	.word	0x08012225
 801221c:	08012225 	.word	0x08012225
 8012220:	08012225 	.word	0x08012225
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012224:	bf00      	nop
  }

  return (USBD_OK);
 8012226:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012228:	4618      	mov	r0, r3
 801222a:	370c      	adds	r7, #12
 801222c:	46bd      	mov	sp, r7
 801222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012232:	4770      	bx	lr

08012234 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b082      	sub	sp, #8
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
 801223c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801223e:	6879      	ldr	r1, [r7, #4]
 8012240:	4805      	ldr	r0, [pc, #20]	@ (8012258 <CDC_Receive_FS+0x24>)
 8012242:	f7fe fdba 	bl	8010dba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012246:	4804      	ldr	r0, [pc, #16]	@ (8012258 <CDC_Receive_FS+0x24>)
 8012248:	f7fe fe00 	bl	8010e4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801224c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801224e:	4618      	mov	r0, r3
 8012250:	3708      	adds	r7, #8
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}
 8012256:	bf00      	nop
 8012258:	200007c8 	.word	0x200007c8

0801225c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b084      	sub	sp, #16
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
 8012264:	460b      	mov	r3, r1
 8012266:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012268:	2300      	movs	r3, #0
 801226a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801226c:	4b0d      	ldr	r3, [pc, #52]	@ (80122a4 <CDC_Transmit_FS+0x48>)
 801226e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012272:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801227a:	2b00      	cmp	r3, #0
 801227c:	d001      	beq.n	8012282 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801227e:	2301      	movs	r3, #1
 8012280:	e00b      	b.n	801229a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012282:	887b      	ldrh	r3, [r7, #2]
 8012284:	461a      	mov	r2, r3
 8012286:	6879      	ldr	r1, [r7, #4]
 8012288:	4806      	ldr	r0, [pc, #24]	@ (80122a4 <CDC_Transmit_FS+0x48>)
 801228a:	f7fe fd78 	bl	8010d7e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801228e:	4805      	ldr	r0, [pc, #20]	@ (80122a4 <CDC_Transmit_FS+0x48>)
 8012290:	f7fe fdac 	bl	8010dec <USBD_CDC_TransmitPacket>
 8012294:	4603      	mov	r3, r0
 8012296:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012298:	7bfb      	ldrb	r3, [r7, #15]
}
 801229a:	4618      	mov	r0, r3
 801229c:	3710      	adds	r7, #16
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	200007c8 	.word	0x200007c8

080122a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80122a8:	b480      	push	{r7}
 80122aa:	b087      	sub	sp, #28
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	60b9      	str	r1, [r7, #8]
 80122b2:	4613      	mov	r3, r2
 80122b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80122b6:	2300      	movs	r3, #0
 80122b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80122ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80122be:	4618      	mov	r0, r3
 80122c0:	371c      	adds	r7, #28
 80122c2:	46bd      	mov	sp, r7
 80122c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c8:	4770      	bx	lr
	...

080122cc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122cc:	b480      	push	{r7}
 80122ce:	b083      	sub	sp, #12
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	4603      	mov	r3, r0
 80122d4:	6039      	str	r1, [r7, #0]
 80122d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	2212      	movs	r2, #18
 80122dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80122de:	4b03      	ldr	r3, [pc, #12]	@ (80122ec <USBD_CDC_DeviceDescriptor+0x20>)
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	370c      	adds	r7, #12
 80122e4:	46bd      	mov	sp, r7
 80122e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ea:	4770      	bx	lr
 80122ec:	20000150 	.word	0x20000150

080122f0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122f0:	b480      	push	{r7}
 80122f2:	b083      	sub	sp, #12
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	4603      	mov	r3, r0
 80122f8:	6039      	str	r1, [r7, #0]
 80122fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	2204      	movs	r2, #4
 8012300:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012302:	4b03      	ldr	r3, [pc, #12]	@ (8012310 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8012304:	4618      	mov	r0, r3
 8012306:	370c      	adds	r7, #12
 8012308:	46bd      	mov	sp, r7
 801230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230e:	4770      	bx	lr
 8012310:	20000164 	.word	0x20000164

08012314 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	4603      	mov	r3, r0
 801231c:	6039      	str	r1, [r7, #0]
 801231e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012320:	79fb      	ldrb	r3, [r7, #7]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d105      	bne.n	8012332 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012326:	683a      	ldr	r2, [r7, #0]
 8012328:	4907      	ldr	r1, [pc, #28]	@ (8012348 <USBD_CDC_ProductStrDescriptor+0x34>)
 801232a:	4808      	ldr	r0, [pc, #32]	@ (801234c <USBD_CDC_ProductStrDescriptor+0x38>)
 801232c:	f7ff fdf7 	bl	8011f1e <USBD_GetString>
 8012330:	e004      	b.n	801233c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012332:	683a      	ldr	r2, [r7, #0]
 8012334:	4904      	ldr	r1, [pc, #16]	@ (8012348 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012336:	4805      	ldr	r0, [pc, #20]	@ (801234c <USBD_CDC_ProductStrDescriptor+0x38>)
 8012338:	f7ff fdf1 	bl	8011f1e <USBD_GetString>
  }
  return USBD_StrDesc;
 801233c:	4b02      	ldr	r3, [pc, #8]	@ (8012348 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801233e:	4618      	mov	r0, r3
 8012340:	3708      	adds	r7, #8
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}
 8012346:	bf00      	nop
 8012348:	20001a98 	.word	0x20001a98
 801234c:	08014494 	.word	0x08014494

08012350 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b082      	sub	sp, #8
 8012354:	af00      	add	r7, sp, #0
 8012356:	4603      	mov	r3, r0
 8012358:	6039      	str	r1, [r7, #0]
 801235a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801235c:	683a      	ldr	r2, [r7, #0]
 801235e:	4904      	ldr	r1, [pc, #16]	@ (8012370 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8012360:	4804      	ldr	r0, [pc, #16]	@ (8012374 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8012362:	f7ff fddc 	bl	8011f1e <USBD_GetString>
  return USBD_StrDesc;
 8012366:	4b02      	ldr	r3, [pc, #8]	@ (8012370 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8012368:	4618      	mov	r0, r3
 801236a:	3708      	adds	r7, #8
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}
 8012370:	20001a98 	.word	0x20001a98
 8012374:	080144ac 	.word	0x080144ac

08012378 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b082      	sub	sp, #8
 801237c:	af00      	add	r7, sp, #0
 801237e:	4603      	mov	r3, r0
 8012380:	6039      	str	r1, [r7, #0]
 8012382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	221a      	movs	r2, #26
 8012388:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801238a:	f000 f843 	bl	8012414 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801238e:	4b02      	ldr	r3, [pc, #8]	@ (8012398 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8012390:	4618      	mov	r0, r3
 8012392:	3708      	adds	r7, #8
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}
 8012398:	20000168 	.word	0x20000168

0801239c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b082      	sub	sp, #8
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	4603      	mov	r3, r0
 80123a4:	6039      	str	r1, [r7, #0]
 80123a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80123a8:	79fb      	ldrb	r3, [r7, #7]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d105      	bne.n	80123ba <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80123ae:	683a      	ldr	r2, [r7, #0]
 80123b0:	4907      	ldr	r1, [pc, #28]	@ (80123d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80123b2:	4808      	ldr	r0, [pc, #32]	@ (80123d4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80123b4:	f7ff fdb3 	bl	8011f1e <USBD_GetString>
 80123b8:	e004      	b.n	80123c4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80123ba:	683a      	ldr	r2, [r7, #0]
 80123bc:	4904      	ldr	r1, [pc, #16]	@ (80123d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80123be:	4805      	ldr	r0, [pc, #20]	@ (80123d4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80123c0:	f7ff fdad 	bl	8011f1e <USBD_GetString>
  }
  return USBD_StrDesc;
 80123c4:	4b02      	ldr	r3, [pc, #8]	@ (80123d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80123c6:	4618      	mov	r0, r3
 80123c8:	3708      	adds	r7, #8
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}
 80123ce:	bf00      	nop
 80123d0:	20001a98 	.word	0x20001a98
 80123d4:	080144c0 	.word	0x080144c0

080123d8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	4603      	mov	r3, r0
 80123e0:	6039      	str	r1, [r7, #0]
 80123e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80123e4:	79fb      	ldrb	r3, [r7, #7]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d105      	bne.n	80123f6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80123ea:	683a      	ldr	r2, [r7, #0]
 80123ec:	4907      	ldr	r1, [pc, #28]	@ (801240c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80123ee:	4808      	ldr	r0, [pc, #32]	@ (8012410 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80123f0:	f7ff fd95 	bl	8011f1e <USBD_GetString>
 80123f4:	e004      	b.n	8012400 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80123f6:	683a      	ldr	r2, [r7, #0]
 80123f8:	4904      	ldr	r1, [pc, #16]	@ (801240c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80123fa:	4805      	ldr	r0, [pc, #20]	@ (8012410 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80123fc:	f7ff fd8f 	bl	8011f1e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012400:	4b02      	ldr	r3, [pc, #8]	@ (801240c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8012402:	4618      	mov	r0, r3
 8012404:	3708      	adds	r7, #8
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}
 801240a:	bf00      	nop
 801240c:	20001a98 	.word	0x20001a98
 8012410:	080144cc 	.word	0x080144cc

08012414 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b084      	sub	sp, #16
 8012418:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801241a:	4b0f      	ldr	r3, [pc, #60]	@ (8012458 <Get_SerialNum+0x44>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012420:	4b0e      	ldr	r3, [pc, #56]	@ (801245c <Get_SerialNum+0x48>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012426:	4b0e      	ldr	r3, [pc, #56]	@ (8012460 <Get_SerialNum+0x4c>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801242c:	68fa      	ldr	r2, [r7, #12]
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	4413      	add	r3, r2
 8012432:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d009      	beq.n	801244e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801243a:	2208      	movs	r2, #8
 801243c:	4909      	ldr	r1, [pc, #36]	@ (8012464 <Get_SerialNum+0x50>)
 801243e:	68f8      	ldr	r0, [r7, #12]
 8012440:	f000 f814 	bl	801246c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012444:	2204      	movs	r2, #4
 8012446:	4908      	ldr	r1, [pc, #32]	@ (8012468 <Get_SerialNum+0x54>)
 8012448:	68b8      	ldr	r0, [r7, #8]
 801244a:	f000 f80f 	bl	801246c <IntToUnicode>
  }
}
 801244e:	bf00      	nop
 8012450:	3710      	adds	r7, #16
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}
 8012456:	bf00      	nop
 8012458:	1fff7590 	.word	0x1fff7590
 801245c:	1fff7594 	.word	0x1fff7594
 8012460:	1fff7598 	.word	0x1fff7598
 8012464:	2000016a 	.word	0x2000016a
 8012468:	2000017a 	.word	0x2000017a

0801246c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801246c:	b480      	push	{r7}
 801246e:	b087      	sub	sp, #28
 8012470:	af00      	add	r7, sp, #0
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	60b9      	str	r1, [r7, #8]
 8012476:	4613      	mov	r3, r2
 8012478:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801247a:	2300      	movs	r3, #0
 801247c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801247e:	2300      	movs	r3, #0
 8012480:	75fb      	strb	r3, [r7, #23]
 8012482:	e027      	b.n	80124d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	0f1b      	lsrs	r3, r3, #28
 8012488:	2b09      	cmp	r3, #9
 801248a:	d80b      	bhi.n	80124a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	0f1b      	lsrs	r3, r3, #28
 8012490:	b2da      	uxtb	r2, r3
 8012492:	7dfb      	ldrb	r3, [r7, #23]
 8012494:	005b      	lsls	r3, r3, #1
 8012496:	4619      	mov	r1, r3
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	440b      	add	r3, r1
 801249c:	3230      	adds	r2, #48	@ 0x30
 801249e:	b2d2      	uxtb	r2, r2
 80124a0:	701a      	strb	r2, [r3, #0]
 80124a2:	e00a      	b.n	80124ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	0f1b      	lsrs	r3, r3, #28
 80124a8:	b2da      	uxtb	r2, r3
 80124aa:	7dfb      	ldrb	r3, [r7, #23]
 80124ac:	005b      	lsls	r3, r3, #1
 80124ae:	4619      	mov	r1, r3
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	440b      	add	r3, r1
 80124b4:	3237      	adds	r2, #55	@ 0x37
 80124b6:	b2d2      	uxtb	r2, r2
 80124b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	011b      	lsls	r3, r3, #4
 80124be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80124c0:	7dfb      	ldrb	r3, [r7, #23]
 80124c2:	005b      	lsls	r3, r3, #1
 80124c4:	3301      	adds	r3, #1
 80124c6:	68ba      	ldr	r2, [r7, #8]
 80124c8:	4413      	add	r3, r2
 80124ca:	2200      	movs	r2, #0
 80124cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80124ce:	7dfb      	ldrb	r3, [r7, #23]
 80124d0:	3301      	adds	r3, #1
 80124d2:	75fb      	strb	r3, [r7, #23]
 80124d4:	7dfa      	ldrb	r2, [r7, #23]
 80124d6:	79fb      	ldrb	r3, [r7, #7]
 80124d8:	429a      	cmp	r2, r3
 80124da:	d3d3      	bcc.n	8012484 <IntToUnicode+0x18>
  }
}
 80124dc:	bf00      	nop
 80124de:	bf00      	nop
 80124e0:	371c      	adds	r7, #28
 80124e2:	46bd      	mov	sp, r7
 80124e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e8:	4770      	bx	lr
	...

080124ec <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b098      	sub	sp, #96	@ 0x60
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80124f4:	f107 030c 	add.w	r3, r7, #12
 80124f8:	2254      	movs	r2, #84	@ 0x54
 80124fa:	2100      	movs	r1, #0
 80124fc:	4618      	mov	r0, r3
 80124fe:	f001 f931 	bl	8013764 <memset>
  if(pcdHandle->Instance==USB)
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	4a15      	ldr	r2, [pc, #84]	@ (801255c <HAL_PCD_MspInit+0x70>)
 8012508:	4293      	cmp	r3, r2
 801250a:	d123      	bne.n	8012554 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801250c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012510:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8012512:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8012516:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012518:	f107 030c 	add.w	r3, r7, #12
 801251c:	4618      	mov	r0, r3
 801251e:	f7f8 f97d 	bl	800a81c <HAL_RCCEx_PeriphCLKConfig>
 8012522:	4603      	mov	r3, r0
 8012524:	2b00      	cmp	r3, #0
 8012526:	d001      	beq.n	801252c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8012528:	f7ef fe76 	bl	8002218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801252c:	4b0c      	ldr	r3, [pc, #48]	@ (8012560 <HAL_PCD_MspInit+0x74>)
 801252e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012530:	4a0b      	ldr	r2, [pc, #44]	@ (8012560 <HAL_PCD_MspInit+0x74>)
 8012532:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8012536:	6593      	str	r3, [r2, #88]	@ 0x58
 8012538:	4b09      	ldr	r3, [pc, #36]	@ (8012560 <HAL_PCD_MspInit+0x74>)
 801253a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801253c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012540:	60bb      	str	r3, [r7, #8]
 8012542:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8012544:	2200      	movs	r2, #0
 8012546:	2100      	movs	r1, #0
 8012548:	2014      	movs	r0, #20
 801254a:	f7f3 f909 	bl	8005760 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801254e:	2014      	movs	r0, #20
 8012550:	f7f3 f930 	bl	80057b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012554:	bf00      	nop
 8012556:	3760      	adds	r7, #96	@ 0x60
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}
 801255c:	40005c00 	.word	0x40005c00
 8012560:	40021000 	.word	0x40021000

08012564 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b082      	sub	sp, #8
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8012578:	4619      	mov	r1, r3
 801257a:	4610      	mov	r0, r2
 801257c:	f7fe fd32 	bl	8010fe4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012580:	bf00      	nop
 8012582:	3708      	adds	r7, #8
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b082      	sub	sp, #8
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	460b      	mov	r3, r1
 8012592:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 801259a:	78fa      	ldrb	r2, [r7, #3]
 801259c:	6879      	ldr	r1, [r7, #4]
 801259e:	4613      	mov	r3, r2
 80125a0:	009b      	lsls	r3, r3, #2
 80125a2:	4413      	add	r3, r2
 80125a4:	00db      	lsls	r3, r3, #3
 80125a6:	440b      	add	r3, r1
 80125a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80125ac:	681a      	ldr	r2, [r3, #0]
 80125ae:	78fb      	ldrb	r3, [r7, #3]
 80125b0:	4619      	mov	r1, r3
 80125b2:	f7fe fd6c 	bl	801108e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80125b6:	bf00      	nop
 80125b8:	3708      	adds	r7, #8
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}

080125be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125be:	b580      	push	{r7, lr}
 80125c0:	b082      	sub	sp, #8
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	6078      	str	r0, [r7, #4]
 80125c6:	460b      	mov	r3, r1
 80125c8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80125d0:	78fa      	ldrb	r2, [r7, #3]
 80125d2:	6879      	ldr	r1, [r7, #4]
 80125d4:	4613      	mov	r3, r2
 80125d6:	009b      	lsls	r3, r3, #2
 80125d8:	4413      	add	r3, r2
 80125da:	00db      	lsls	r3, r3, #3
 80125dc:	440b      	add	r3, r1
 80125de:	3324      	adds	r3, #36	@ 0x24
 80125e0:	681a      	ldr	r2, [r3, #0]
 80125e2:	78fb      	ldrb	r3, [r7, #3]
 80125e4:	4619      	mov	r1, r3
 80125e6:	f7fe fdb5 	bl	8011154 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80125ea:	bf00      	nop
 80125ec:	3708      	adds	r7, #8
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}

080125f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125f2:	b580      	push	{r7, lr}
 80125f4:	b082      	sub	sp, #8
 80125f6:	af00      	add	r7, sp, #0
 80125f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012600:	4618      	mov	r0, r3
 8012602:	f7fe fec9 	bl	8011398 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8012606:	bf00      	nop
 8012608:	3708      	adds	r7, #8
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}

0801260e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801260e:	b580      	push	{r7, lr}
 8012610:	b084      	sub	sp, #16
 8012612:	af00      	add	r7, sp, #0
 8012614:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012616:	2301      	movs	r3, #1
 8012618:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	795b      	ldrb	r3, [r3, #5]
 801261e:	2b02      	cmp	r3, #2
 8012620:	d001      	beq.n	8012626 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012622:	f7ef fdf9 	bl	8002218 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801262c:	7bfa      	ldrb	r2, [r7, #15]
 801262e:	4611      	mov	r1, r2
 8012630:	4618      	mov	r0, r3
 8012632:	f7fe fe73 	bl	801131c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801263c:	4618      	mov	r0, r3
 801263e:	f7fe fe1f 	bl	8011280 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8012642:	bf00      	nop
 8012644:	3710      	adds	r7, #16
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}
	...

0801264c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b082      	sub	sp, #8
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801265a:	4618      	mov	r0, r3
 801265c:	f7fe fe6e 	bl	801133c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	7a5b      	ldrb	r3, [r3, #9]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d005      	beq.n	8012674 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012668:	4b04      	ldr	r3, [pc, #16]	@ (801267c <HAL_PCD_SuspendCallback+0x30>)
 801266a:	691b      	ldr	r3, [r3, #16]
 801266c:	4a03      	ldr	r2, [pc, #12]	@ (801267c <HAL_PCD_SuspendCallback+0x30>)
 801266e:	f043 0306 	orr.w	r3, r3, #6
 8012672:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8012674:	bf00      	nop
 8012676:	3708      	adds	r7, #8
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	e000ed00 	.word	0xe000ed00

08012680 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	7a5b      	ldrb	r3, [r3, #9]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d007      	beq.n	80126a0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012690:	4b08      	ldr	r3, [pc, #32]	@ (80126b4 <HAL_PCD_ResumeCallback+0x34>)
 8012692:	691b      	ldr	r3, [r3, #16]
 8012694:	4a07      	ldr	r2, [pc, #28]	@ (80126b4 <HAL_PCD_ResumeCallback+0x34>)
 8012696:	f023 0306 	bic.w	r3, r3, #6
 801269a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801269c:	f000 f9f8 	bl	8012a90 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80126a6:	4618      	mov	r0, r3
 80126a8:	f7fe fe5e 	bl	8011368 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80126ac:	bf00      	nop
 80126ae:	3708      	adds	r7, #8
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}
 80126b4:	e000ed00 	.word	0xe000ed00

080126b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80126c0:	4a2b      	ldr	r2, [pc, #172]	@ (8012770 <USBD_LL_Init+0xb8>)
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	4a29      	ldr	r2, [pc, #164]	@ (8012770 <USBD_LL_Init+0xb8>)
 80126cc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 80126d0:	4b27      	ldr	r3, [pc, #156]	@ (8012770 <USBD_LL_Init+0xb8>)
 80126d2:	4a28      	ldr	r2, [pc, #160]	@ (8012774 <USBD_LL_Init+0xbc>)
 80126d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80126d6:	4b26      	ldr	r3, [pc, #152]	@ (8012770 <USBD_LL_Init+0xb8>)
 80126d8:	2208      	movs	r2, #8
 80126da:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80126dc:	4b24      	ldr	r3, [pc, #144]	@ (8012770 <USBD_LL_Init+0xb8>)
 80126de:	2202      	movs	r2, #2
 80126e0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80126e2:	4b23      	ldr	r3, [pc, #140]	@ (8012770 <USBD_LL_Init+0xb8>)
 80126e4:	2202      	movs	r2, #2
 80126e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80126e8:	4b21      	ldr	r3, [pc, #132]	@ (8012770 <USBD_LL_Init+0xb8>)
 80126ea:	2200      	movs	r2, #0
 80126ec:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80126ee:	4b20      	ldr	r3, [pc, #128]	@ (8012770 <USBD_LL_Init+0xb8>)
 80126f0:	2200      	movs	r2, #0
 80126f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80126f4:	4b1e      	ldr	r3, [pc, #120]	@ (8012770 <USBD_LL_Init+0xb8>)
 80126f6:	2200      	movs	r2, #0
 80126f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80126fa:	4b1d      	ldr	r3, [pc, #116]	@ (8012770 <USBD_LL_Init+0xb8>)
 80126fc:	2200      	movs	r2, #0
 80126fe:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012700:	481b      	ldr	r0, [pc, #108]	@ (8012770 <USBD_LL_Init+0xb8>)
 8012702:	f7f5 fb07 	bl	8007d14 <HAL_PCD_Init>
 8012706:	4603      	mov	r3, r0
 8012708:	2b00      	cmp	r3, #0
 801270a:	d001      	beq.n	8012710 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 801270c:	f7ef fd84 	bl	8002218 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012716:	2318      	movs	r3, #24
 8012718:	2200      	movs	r2, #0
 801271a:	2100      	movs	r1, #0
 801271c:	f7f6 ffce 	bl	80096bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012726:	2358      	movs	r3, #88	@ 0x58
 8012728:	2200      	movs	r2, #0
 801272a:	2180      	movs	r1, #128	@ 0x80
 801272c:	f7f6 ffc6 	bl	80096bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012736:	23c0      	movs	r3, #192	@ 0xc0
 8012738:	2200      	movs	r2, #0
 801273a:	2181      	movs	r1, #129	@ 0x81
 801273c:	f7f6 ffbe 	bl	80096bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012746:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801274a:	2200      	movs	r2, #0
 801274c:	2101      	movs	r1, #1
 801274e:	f7f6 ffb5 	bl	80096bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012758:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801275c:	2200      	movs	r2, #0
 801275e:	2182      	movs	r1, #130	@ 0x82
 8012760:	f7f6 ffac 	bl	80096bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012764:	2300      	movs	r3, #0
}
 8012766:	4618      	mov	r0, r3
 8012768:	3708      	adds	r7, #8
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}
 801276e:	bf00      	nop
 8012770:	20001c98 	.word	0x20001c98
 8012774:	40005c00 	.word	0x40005c00

08012778 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b084      	sub	sp, #16
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012780:	2300      	movs	r3, #0
 8012782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012784:	2300      	movs	r3, #0
 8012786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801278e:	4618      	mov	r0, r3
 8012790:	f7f5 fb9c 	bl	8007ecc <HAL_PCD_Start>
 8012794:	4603      	mov	r3, r0
 8012796:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012798:	7bfb      	ldrb	r3, [r7, #15]
 801279a:	4618      	mov	r0, r3
 801279c:	f000 f97e 	bl	8012a9c <USBD_Get_USB_Status>
 80127a0:	4603      	mov	r3, r0
 80127a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	3710      	adds	r7, #16
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}

080127ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80127ae:	b580      	push	{r7, lr}
 80127b0:	b084      	sub	sp, #16
 80127b2:	af00      	add	r7, sp, #0
 80127b4:	6078      	str	r0, [r7, #4]
 80127b6:	4608      	mov	r0, r1
 80127b8:	4611      	mov	r1, r2
 80127ba:	461a      	mov	r2, r3
 80127bc:	4603      	mov	r3, r0
 80127be:	70fb      	strb	r3, [r7, #3]
 80127c0:	460b      	mov	r3, r1
 80127c2:	70bb      	strb	r3, [r7, #2]
 80127c4:	4613      	mov	r3, r2
 80127c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127c8:	2300      	movs	r3, #0
 80127ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127cc:	2300      	movs	r3, #0
 80127ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80127d6:	78bb      	ldrb	r3, [r7, #2]
 80127d8:	883a      	ldrh	r2, [r7, #0]
 80127da:	78f9      	ldrb	r1, [r7, #3]
 80127dc:	f7f5 fce3 	bl	80081a6 <HAL_PCD_EP_Open>
 80127e0:	4603      	mov	r3, r0
 80127e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127e4:	7bfb      	ldrb	r3, [r7, #15]
 80127e6:	4618      	mov	r0, r3
 80127e8:	f000 f958 	bl	8012a9c <USBD_Get_USB_Status>
 80127ec:	4603      	mov	r3, r0
 80127ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3710      	adds	r7, #16
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}

080127fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80127fa:	b580      	push	{r7, lr}
 80127fc:	b084      	sub	sp, #16
 80127fe:	af00      	add	r7, sp, #0
 8012800:	6078      	str	r0, [r7, #4]
 8012802:	460b      	mov	r3, r1
 8012804:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012806:	2300      	movs	r3, #0
 8012808:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801280a:	2300      	movs	r3, #0
 801280c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012814:	78fa      	ldrb	r2, [r7, #3]
 8012816:	4611      	mov	r1, r2
 8012818:	4618      	mov	r0, r3
 801281a:	f7f5 fd21 	bl	8008260 <HAL_PCD_EP_Close>
 801281e:	4603      	mov	r3, r0
 8012820:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012822:	7bfb      	ldrb	r3, [r7, #15]
 8012824:	4618      	mov	r0, r3
 8012826:	f000 f939 	bl	8012a9c <USBD_Get_USB_Status>
 801282a:	4603      	mov	r3, r0
 801282c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801282e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012830:	4618      	mov	r0, r3
 8012832:	3710      	adds	r7, #16
 8012834:	46bd      	mov	sp, r7
 8012836:	bd80      	pop	{r7, pc}

08012838 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b084      	sub	sp, #16
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
 8012840:	460b      	mov	r3, r1
 8012842:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012844:	2300      	movs	r3, #0
 8012846:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012848:	2300      	movs	r3, #0
 801284a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012852:	78fa      	ldrb	r2, [r7, #3]
 8012854:	4611      	mov	r1, r2
 8012856:	4618      	mov	r0, r3
 8012858:	f7f5 fdca 	bl	80083f0 <HAL_PCD_EP_SetStall>
 801285c:	4603      	mov	r3, r0
 801285e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012860:	7bfb      	ldrb	r3, [r7, #15]
 8012862:	4618      	mov	r0, r3
 8012864:	f000 f91a 	bl	8012a9c <USBD_Get_USB_Status>
 8012868:	4603      	mov	r3, r0
 801286a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801286c:	7bbb      	ldrb	r3, [r7, #14]
}
 801286e:	4618      	mov	r0, r3
 8012870:	3710      	adds	r7, #16
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}

08012876 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012876:	b580      	push	{r7, lr}
 8012878:	b084      	sub	sp, #16
 801287a:	af00      	add	r7, sp, #0
 801287c:	6078      	str	r0, [r7, #4]
 801287e:	460b      	mov	r3, r1
 8012880:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012882:	2300      	movs	r3, #0
 8012884:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012886:	2300      	movs	r3, #0
 8012888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012890:	78fa      	ldrb	r2, [r7, #3]
 8012892:	4611      	mov	r1, r2
 8012894:	4618      	mov	r0, r3
 8012896:	f7f5 fdfd 	bl	8008494 <HAL_PCD_EP_ClrStall>
 801289a:	4603      	mov	r3, r0
 801289c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801289e:	7bfb      	ldrb	r3, [r7, #15]
 80128a0:	4618      	mov	r0, r3
 80128a2:	f000 f8fb 	bl	8012a9c <USBD_Get_USB_Status>
 80128a6:	4603      	mov	r3, r0
 80128a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80128ac:	4618      	mov	r0, r3
 80128ae:	3710      	adds	r7, #16
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}

080128b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80128b4:	b480      	push	{r7}
 80128b6:	b085      	sub	sp, #20
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
 80128bc:	460b      	mov	r3, r1
 80128be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80128c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80128c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	da0b      	bge.n	80128e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80128d0:	78fb      	ldrb	r3, [r7, #3]
 80128d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80128d6:	68f9      	ldr	r1, [r7, #12]
 80128d8:	4613      	mov	r3, r2
 80128da:	009b      	lsls	r3, r3, #2
 80128dc:	4413      	add	r3, r2
 80128de:	00db      	lsls	r3, r3, #3
 80128e0:	440b      	add	r3, r1
 80128e2:	3312      	adds	r3, #18
 80128e4:	781b      	ldrb	r3, [r3, #0]
 80128e6:	e00b      	b.n	8012900 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80128e8:	78fb      	ldrb	r3, [r7, #3]
 80128ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80128ee:	68f9      	ldr	r1, [r7, #12]
 80128f0:	4613      	mov	r3, r2
 80128f2:	009b      	lsls	r3, r3, #2
 80128f4:	4413      	add	r3, r2
 80128f6:	00db      	lsls	r3, r3, #3
 80128f8:	440b      	add	r3, r1
 80128fa:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80128fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012900:	4618      	mov	r0, r3
 8012902:	3714      	adds	r7, #20
 8012904:	46bd      	mov	sp, r7
 8012906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290a:	4770      	bx	lr

0801290c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b084      	sub	sp, #16
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
 8012914:	460b      	mov	r3, r1
 8012916:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012918:	2300      	movs	r3, #0
 801291a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801291c:	2300      	movs	r3, #0
 801291e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012926:	78fa      	ldrb	r2, [r7, #3]
 8012928:	4611      	mov	r1, r2
 801292a:	4618      	mov	r0, r3
 801292c:	f7f5 fc17 	bl	800815e <HAL_PCD_SetAddress>
 8012930:	4603      	mov	r3, r0
 8012932:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012934:	7bfb      	ldrb	r3, [r7, #15]
 8012936:	4618      	mov	r0, r3
 8012938:	f000 f8b0 	bl	8012a9c <USBD_Get_USB_Status>
 801293c:	4603      	mov	r3, r0
 801293e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012940:	7bbb      	ldrb	r3, [r7, #14]
}
 8012942:	4618      	mov	r0, r3
 8012944:	3710      	adds	r7, #16
 8012946:	46bd      	mov	sp, r7
 8012948:	bd80      	pop	{r7, pc}

0801294a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801294a:	b580      	push	{r7, lr}
 801294c:	b086      	sub	sp, #24
 801294e:	af00      	add	r7, sp, #0
 8012950:	60f8      	str	r0, [r7, #12]
 8012952:	607a      	str	r2, [r7, #4]
 8012954:	603b      	str	r3, [r7, #0]
 8012956:	460b      	mov	r3, r1
 8012958:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801295a:	2300      	movs	r3, #0
 801295c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801295e:	2300      	movs	r3, #0
 8012960:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8012968:	7af9      	ldrb	r1, [r7, #11]
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	687a      	ldr	r2, [r7, #4]
 801296e:	f7f5 fd08 	bl	8008382 <HAL_PCD_EP_Transmit>
 8012972:	4603      	mov	r3, r0
 8012974:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012976:	7dfb      	ldrb	r3, [r7, #23]
 8012978:	4618      	mov	r0, r3
 801297a:	f000 f88f 	bl	8012a9c <USBD_Get_USB_Status>
 801297e:	4603      	mov	r3, r0
 8012980:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012982:	7dbb      	ldrb	r3, [r7, #22]
}
 8012984:	4618      	mov	r0, r3
 8012986:	3718      	adds	r7, #24
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}

0801298c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b086      	sub	sp, #24
 8012990:	af00      	add	r7, sp, #0
 8012992:	60f8      	str	r0, [r7, #12]
 8012994:	607a      	str	r2, [r7, #4]
 8012996:	603b      	str	r3, [r7, #0]
 8012998:	460b      	mov	r3, r1
 801299a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801299c:	2300      	movs	r3, #0
 801299e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129a0:	2300      	movs	r3, #0
 80129a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80129aa:	7af9      	ldrb	r1, [r7, #11]
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	687a      	ldr	r2, [r7, #4]
 80129b0:	f7f5 fc9e 	bl	80082f0 <HAL_PCD_EP_Receive>
 80129b4:	4603      	mov	r3, r0
 80129b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129b8:	7dfb      	ldrb	r3, [r7, #23]
 80129ba:	4618      	mov	r0, r3
 80129bc:	f000 f86e 	bl	8012a9c <USBD_Get_USB_Status>
 80129c0:	4603      	mov	r3, r0
 80129c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80129c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3718      	adds	r7, #24
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}

080129ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80129ce:	b580      	push	{r7, lr}
 80129d0:	b082      	sub	sp, #8
 80129d2:	af00      	add	r7, sp, #0
 80129d4:	6078      	str	r0, [r7, #4]
 80129d6:	460b      	mov	r3, r1
 80129d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80129e0:	78fa      	ldrb	r2, [r7, #3]
 80129e2:	4611      	mov	r1, r2
 80129e4:	4618      	mov	r0, r3
 80129e6:	f7f5 fcb4 	bl	8008352 <HAL_PCD_EP_GetRxCount>
 80129ea:	4603      	mov	r3, r0
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	3708      	adds	r7, #8
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}

080129f4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	460b      	mov	r3, r1
 80129fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8012a00:	78fb      	ldrb	r3, [r7, #3]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d002      	beq.n	8012a0c <HAL_PCDEx_LPM_Callback+0x18>
 8012a06:	2b01      	cmp	r3, #1
 8012a08:	d013      	beq.n	8012a32 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8012a0a:	e023      	b.n	8012a54 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	7a5b      	ldrb	r3, [r3, #9]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d007      	beq.n	8012a24 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012a14:	f000 f83c 	bl	8012a90 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012a18:	4b10      	ldr	r3, [pc, #64]	@ (8012a5c <HAL_PCDEx_LPM_Callback+0x68>)
 8012a1a:	691b      	ldr	r3, [r3, #16]
 8012a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8012a5c <HAL_PCDEx_LPM_Callback+0x68>)
 8012a1e:	f023 0306 	bic.w	r3, r3, #6
 8012a22:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7fe fc9c 	bl	8011368 <USBD_LL_Resume>
    break;
 8012a30:	e010      	b.n	8012a54 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7fe fc7f 	bl	801133c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	7a5b      	ldrb	r3, [r3, #9]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d005      	beq.n	8012a52 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012a46:	4b05      	ldr	r3, [pc, #20]	@ (8012a5c <HAL_PCDEx_LPM_Callback+0x68>)
 8012a48:	691b      	ldr	r3, [r3, #16]
 8012a4a:	4a04      	ldr	r2, [pc, #16]	@ (8012a5c <HAL_PCDEx_LPM_Callback+0x68>)
 8012a4c:	f043 0306 	orr.w	r3, r3, #6
 8012a50:	6113      	str	r3, [r2, #16]
    break;
 8012a52:	bf00      	nop
}
 8012a54:	bf00      	nop
 8012a56:	3708      	adds	r7, #8
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd80      	pop	{r7, pc}
 8012a5c:	e000ed00 	.word	0xe000ed00

08012a60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012a60:	b480      	push	{r7}
 8012a62:	b083      	sub	sp, #12
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012a68:	4b03      	ldr	r3, [pc, #12]	@ (8012a78 <USBD_static_malloc+0x18>)
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	370c      	adds	r7, #12
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a74:	4770      	bx	lr
 8012a76:	bf00      	nop
 8012a78:	20001f74 	.word	0x20001f74

08012a7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012a7c:	b480      	push	{r7}
 8012a7e:	b083      	sub	sp, #12
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]

}
 8012a84:	bf00      	nop
 8012a86:	370c      	adds	r7, #12
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8e:	4770      	bx	lr

08012a90 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012a94:	f7ef f8f4 	bl	8001c80 <SystemClock_Config>
}
 8012a98:	bf00      	nop
 8012a9a:	bd80      	pop	{r7, pc}

08012a9c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012a9c:	b480      	push	{r7}
 8012a9e:	b085      	sub	sp, #20
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012aaa:	79fb      	ldrb	r3, [r7, #7]
 8012aac:	2b03      	cmp	r3, #3
 8012aae:	d817      	bhi.n	8012ae0 <USBD_Get_USB_Status+0x44>
 8012ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8012ab8 <USBD_Get_USB_Status+0x1c>)
 8012ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ab6:	bf00      	nop
 8012ab8:	08012ac9 	.word	0x08012ac9
 8012abc:	08012acf 	.word	0x08012acf
 8012ac0:	08012ad5 	.word	0x08012ad5
 8012ac4:	08012adb 	.word	0x08012adb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	73fb      	strb	r3, [r7, #15]
    break;
 8012acc:	e00b      	b.n	8012ae6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012ace:	2303      	movs	r3, #3
 8012ad0:	73fb      	strb	r3, [r7, #15]
    break;
 8012ad2:	e008      	b.n	8012ae6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012ad4:	2301      	movs	r3, #1
 8012ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8012ad8:	e005      	b.n	8012ae6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012ada:	2303      	movs	r3, #3
 8012adc:	73fb      	strb	r3, [r7, #15]
    break;
 8012ade:	e002      	b.n	8012ae6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012ae0:	2303      	movs	r3, #3
 8012ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8012ae4:	bf00      	nop
  }
  return usb_status;
 8012ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3714      	adds	r7, #20
 8012aec:	46bd      	mov	sp, r7
 8012aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af2:	4770      	bx	lr

08012af4 <sinf>:
 8012af4:	ee10 3a10 	vmov	r3, s0
 8012af8:	b507      	push	{r0, r1, r2, lr}
 8012afa:	4a1f      	ldr	r2, [pc, #124]	@ (8012b78 <sinf+0x84>)
 8012afc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012b00:	4293      	cmp	r3, r2
 8012b02:	d807      	bhi.n	8012b14 <sinf+0x20>
 8012b04:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8012b7c <sinf+0x88>
 8012b08:	2000      	movs	r0, #0
 8012b0a:	b003      	add	sp, #12
 8012b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b10:	f000 b88e 	b.w	8012c30 <__kernel_sinf>
 8012b14:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012b18:	d304      	bcc.n	8012b24 <sinf+0x30>
 8012b1a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012b1e:	b003      	add	sp, #12
 8012b20:	f85d fb04 	ldr.w	pc, [sp], #4
 8012b24:	4668      	mov	r0, sp
 8012b26:	f000 f8cb 	bl	8012cc0 <__ieee754_rem_pio2f>
 8012b2a:	f000 0003 	and.w	r0, r0, #3
 8012b2e:	2801      	cmp	r0, #1
 8012b30:	d00a      	beq.n	8012b48 <sinf+0x54>
 8012b32:	2802      	cmp	r0, #2
 8012b34:	d00f      	beq.n	8012b56 <sinf+0x62>
 8012b36:	b9c0      	cbnz	r0, 8012b6a <sinf+0x76>
 8012b38:	eddd 0a01 	vldr	s1, [sp, #4]
 8012b3c:	ed9d 0a00 	vldr	s0, [sp]
 8012b40:	2001      	movs	r0, #1
 8012b42:	f000 f875 	bl	8012c30 <__kernel_sinf>
 8012b46:	e7ea      	b.n	8012b1e <sinf+0x2a>
 8012b48:	eddd 0a01 	vldr	s1, [sp, #4]
 8012b4c:	ed9d 0a00 	vldr	s0, [sp]
 8012b50:	f000 f816 	bl	8012b80 <__kernel_cosf>
 8012b54:	e7e3      	b.n	8012b1e <sinf+0x2a>
 8012b56:	eddd 0a01 	vldr	s1, [sp, #4]
 8012b5a:	ed9d 0a00 	vldr	s0, [sp]
 8012b5e:	2001      	movs	r0, #1
 8012b60:	f000 f866 	bl	8012c30 <__kernel_sinf>
 8012b64:	eeb1 0a40 	vneg.f32	s0, s0
 8012b68:	e7d9      	b.n	8012b1e <sinf+0x2a>
 8012b6a:	eddd 0a01 	vldr	s1, [sp, #4]
 8012b6e:	ed9d 0a00 	vldr	s0, [sp]
 8012b72:	f000 f805 	bl	8012b80 <__kernel_cosf>
 8012b76:	e7f5      	b.n	8012b64 <sinf+0x70>
 8012b78:	3f490fd8 	.word	0x3f490fd8
 8012b7c:	00000000 	.word	0x00000000

08012b80 <__kernel_cosf>:
 8012b80:	ee10 3a10 	vmov	r3, s0
 8012b84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012b88:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012b8c:	eef0 6a40 	vmov.f32	s13, s0
 8012b90:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012b94:	d204      	bcs.n	8012ba0 <__kernel_cosf+0x20>
 8012b96:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8012b9a:	ee17 2a90 	vmov	r2, s15
 8012b9e:	b342      	cbz	r2, 8012bf2 <__kernel_cosf+0x72>
 8012ba0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012ba4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8012c10 <__kernel_cosf+0x90>
 8012ba8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8012c14 <__kernel_cosf+0x94>
 8012bac:	4a1a      	ldr	r2, [pc, #104]	@ (8012c18 <__kernel_cosf+0x98>)
 8012bae:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012c1c <__kernel_cosf+0x9c>
 8012bb8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012bbc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8012c20 <__kernel_cosf+0xa0>
 8012bc0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012bc4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8012c24 <__kernel_cosf+0xa4>
 8012bc8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012bcc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8012c28 <__kernel_cosf+0xa8>
 8012bd0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012bd4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8012bd8:	ee26 6a07 	vmul.f32	s12, s12, s14
 8012bdc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012be0:	eee7 0a06 	vfma.f32	s1, s14, s12
 8012be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012be8:	d804      	bhi.n	8012bf4 <__kernel_cosf+0x74>
 8012bea:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012bee:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012bf2:	4770      	bx	lr
 8012bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8012c2c <__kernel_cosf+0xac>)
 8012bf6:	4293      	cmp	r3, r2
 8012bf8:	bf9a      	itte	ls
 8012bfa:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8012bfe:	ee07 3a10 	vmovls	s14, r3
 8012c02:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8012c06:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012c0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c0e:	e7ec      	b.n	8012bea <__kernel_cosf+0x6a>
 8012c10:	ad47d74e 	.word	0xad47d74e
 8012c14:	310f74f6 	.word	0x310f74f6
 8012c18:	3e999999 	.word	0x3e999999
 8012c1c:	b493f27c 	.word	0xb493f27c
 8012c20:	37d00d01 	.word	0x37d00d01
 8012c24:	bab60b61 	.word	0xbab60b61
 8012c28:	3d2aaaab 	.word	0x3d2aaaab
 8012c2c:	3f480000 	.word	0x3f480000

08012c30 <__kernel_sinf>:
 8012c30:	ee10 3a10 	vmov	r3, s0
 8012c34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012c38:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012c3c:	d204      	bcs.n	8012c48 <__kernel_sinf+0x18>
 8012c3e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012c42:	ee17 3a90 	vmov	r3, s15
 8012c46:	b35b      	cbz	r3, 8012ca0 <__kernel_sinf+0x70>
 8012c48:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012c4c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012ca4 <__kernel_sinf+0x74>
 8012c50:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8012ca8 <__kernel_sinf+0x78>
 8012c54:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012c58:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8012cac <__kernel_sinf+0x7c>
 8012c5c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012c60:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8012cb0 <__kernel_sinf+0x80>
 8012c64:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012c68:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8012cb4 <__kernel_sinf+0x84>
 8012c6c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012c70:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012c74:	b930      	cbnz	r0, 8012c84 <__kernel_sinf+0x54>
 8012c76:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8012cb8 <__kernel_sinf+0x88>
 8012c7a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012c7e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012c82:	4770      	bx	lr
 8012c84:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012c88:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8012c8c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012c90:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8012c94:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8012cbc <__kernel_sinf+0x8c>
 8012c98:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012c9c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012ca0:	4770      	bx	lr
 8012ca2:	bf00      	nop
 8012ca4:	2f2ec9d3 	.word	0x2f2ec9d3
 8012ca8:	b2d72f34 	.word	0xb2d72f34
 8012cac:	3638ef1b 	.word	0x3638ef1b
 8012cb0:	b9500d01 	.word	0xb9500d01
 8012cb4:	3c088889 	.word	0x3c088889
 8012cb8:	be2aaaab 	.word	0xbe2aaaab
 8012cbc:	3e2aaaab 	.word	0x3e2aaaab

08012cc0 <__ieee754_rem_pio2f>:
 8012cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cc2:	ee10 6a10 	vmov	r6, s0
 8012cc6:	4b88      	ldr	r3, [pc, #544]	@ (8012ee8 <__ieee754_rem_pio2f+0x228>)
 8012cc8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8012ccc:	429d      	cmp	r5, r3
 8012cce:	b087      	sub	sp, #28
 8012cd0:	4604      	mov	r4, r0
 8012cd2:	d805      	bhi.n	8012ce0 <__ieee754_rem_pio2f+0x20>
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	ed80 0a00 	vstr	s0, [r0]
 8012cda:	6043      	str	r3, [r0, #4]
 8012cdc:	2000      	movs	r0, #0
 8012cde:	e022      	b.n	8012d26 <__ieee754_rem_pio2f+0x66>
 8012ce0:	4b82      	ldr	r3, [pc, #520]	@ (8012eec <__ieee754_rem_pio2f+0x22c>)
 8012ce2:	429d      	cmp	r5, r3
 8012ce4:	d83a      	bhi.n	8012d5c <__ieee754_rem_pio2f+0x9c>
 8012ce6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012cea:	2e00      	cmp	r6, #0
 8012cec:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8012ef0 <__ieee754_rem_pio2f+0x230>
 8012cf0:	4a80      	ldr	r2, [pc, #512]	@ (8012ef4 <__ieee754_rem_pio2f+0x234>)
 8012cf2:	f023 030f 	bic.w	r3, r3, #15
 8012cf6:	dd18      	ble.n	8012d2a <__ieee754_rem_pio2f+0x6a>
 8012cf8:	4293      	cmp	r3, r2
 8012cfa:	ee70 7a47 	vsub.f32	s15, s0, s14
 8012cfe:	bf09      	itett	eq
 8012d00:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8012ef8 <__ieee754_rem_pio2f+0x238>
 8012d04:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8012efc <__ieee754_rem_pio2f+0x23c>
 8012d08:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8012f00 <__ieee754_rem_pio2f+0x240>
 8012d0c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8012d10:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8012d14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012d18:	ed80 7a00 	vstr	s14, [r0]
 8012d1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012d20:	edc0 7a01 	vstr	s15, [r0, #4]
 8012d24:	2001      	movs	r0, #1
 8012d26:	b007      	add	sp, #28
 8012d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d2a:	4293      	cmp	r3, r2
 8012d2c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012d30:	bf09      	itett	eq
 8012d32:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8012ef8 <__ieee754_rem_pio2f+0x238>
 8012d36:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8012efc <__ieee754_rem_pio2f+0x23c>
 8012d3a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8012f00 <__ieee754_rem_pio2f+0x240>
 8012d3e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8012d42:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012d46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012d4a:	ed80 7a00 	vstr	s14, [r0]
 8012d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d52:	edc0 7a01 	vstr	s15, [r0, #4]
 8012d56:	f04f 30ff 	mov.w	r0, #4294967295
 8012d5a:	e7e4      	b.n	8012d26 <__ieee754_rem_pio2f+0x66>
 8012d5c:	4b69      	ldr	r3, [pc, #420]	@ (8012f04 <__ieee754_rem_pio2f+0x244>)
 8012d5e:	429d      	cmp	r5, r3
 8012d60:	d873      	bhi.n	8012e4a <__ieee754_rem_pio2f+0x18a>
 8012d62:	f000 f8dd 	bl	8012f20 <fabsf>
 8012d66:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8012f08 <__ieee754_rem_pio2f+0x248>
 8012d6a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012d6e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012d7a:	ee17 0a90 	vmov	r0, s15
 8012d7e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8012ef0 <__ieee754_rem_pio2f+0x230>
 8012d82:	eea7 0a67 	vfms.f32	s0, s14, s15
 8012d86:	281f      	cmp	r0, #31
 8012d88:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8012efc <__ieee754_rem_pio2f+0x23c>
 8012d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d90:	eeb1 6a47 	vneg.f32	s12, s14
 8012d94:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012d98:	ee16 1a90 	vmov	r1, s13
 8012d9c:	dc09      	bgt.n	8012db2 <__ieee754_rem_pio2f+0xf2>
 8012d9e:	4a5b      	ldr	r2, [pc, #364]	@ (8012f0c <__ieee754_rem_pio2f+0x24c>)
 8012da0:	1e47      	subs	r7, r0, #1
 8012da2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012da6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8012daa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8012dae:	4293      	cmp	r3, r2
 8012db0:	d107      	bne.n	8012dc2 <__ieee754_rem_pio2f+0x102>
 8012db2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8012db6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8012dba:	2a08      	cmp	r2, #8
 8012dbc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8012dc0:	dc14      	bgt.n	8012dec <__ieee754_rem_pio2f+0x12c>
 8012dc2:	6021      	str	r1, [r4, #0]
 8012dc4:	ed94 7a00 	vldr	s14, [r4]
 8012dc8:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012dcc:	2e00      	cmp	r6, #0
 8012dce:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012dd2:	ed84 0a01 	vstr	s0, [r4, #4]
 8012dd6:	daa6      	bge.n	8012d26 <__ieee754_rem_pio2f+0x66>
 8012dd8:	eeb1 7a47 	vneg.f32	s14, s14
 8012ddc:	eeb1 0a40 	vneg.f32	s0, s0
 8012de0:	ed84 7a00 	vstr	s14, [r4]
 8012de4:	ed84 0a01 	vstr	s0, [r4, #4]
 8012de8:	4240      	negs	r0, r0
 8012dea:	e79c      	b.n	8012d26 <__ieee754_rem_pio2f+0x66>
 8012dec:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8012ef8 <__ieee754_rem_pio2f+0x238>
 8012df0:	eef0 6a40 	vmov.f32	s13, s0
 8012df4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8012df8:	ee70 7a66 	vsub.f32	s15, s0, s13
 8012dfc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012e00:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8012f00 <__ieee754_rem_pio2f+0x240>
 8012e04:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8012e08:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8012e0c:	ee15 2a90 	vmov	r2, s11
 8012e10:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8012e14:	1a5b      	subs	r3, r3, r1
 8012e16:	2b19      	cmp	r3, #25
 8012e18:	dc04      	bgt.n	8012e24 <__ieee754_rem_pio2f+0x164>
 8012e1a:	edc4 5a00 	vstr	s11, [r4]
 8012e1e:	eeb0 0a66 	vmov.f32	s0, s13
 8012e22:	e7cf      	b.n	8012dc4 <__ieee754_rem_pio2f+0x104>
 8012e24:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8012f10 <__ieee754_rem_pio2f+0x250>
 8012e28:	eeb0 0a66 	vmov.f32	s0, s13
 8012e2c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8012e30:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8012e34:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8012f14 <__ieee754_rem_pio2f+0x254>
 8012e38:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012e3c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8012e40:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012e44:	ed84 7a00 	vstr	s14, [r4]
 8012e48:	e7bc      	b.n	8012dc4 <__ieee754_rem_pio2f+0x104>
 8012e4a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8012e4e:	d306      	bcc.n	8012e5e <__ieee754_rem_pio2f+0x19e>
 8012e50:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012e54:	edc0 7a01 	vstr	s15, [r0, #4]
 8012e58:	edc0 7a00 	vstr	s15, [r0]
 8012e5c:	e73e      	b.n	8012cdc <__ieee754_rem_pio2f+0x1c>
 8012e5e:	15ea      	asrs	r2, r5, #23
 8012e60:	3a86      	subs	r2, #134	@ 0x86
 8012e62:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8012e66:	ee07 3a90 	vmov	s15, r3
 8012e6a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012e6e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8012f18 <__ieee754_rem_pio2f+0x258>
 8012e72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012e76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e7a:	ed8d 7a03 	vstr	s14, [sp, #12]
 8012e7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012e82:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012e86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012e8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e8e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8012e92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012e96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e9e:	edcd 7a05 	vstr	s15, [sp, #20]
 8012ea2:	d11e      	bne.n	8012ee2 <__ieee754_rem_pio2f+0x222>
 8012ea4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eac:	bf0c      	ite	eq
 8012eae:	2301      	moveq	r3, #1
 8012eb0:	2302      	movne	r3, #2
 8012eb2:	491a      	ldr	r1, [pc, #104]	@ (8012f1c <__ieee754_rem_pio2f+0x25c>)
 8012eb4:	9101      	str	r1, [sp, #4]
 8012eb6:	2102      	movs	r1, #2
 8012eb8:	9100      	str	r1, [sp, #0]
 8012eba:	a803      	add	r0, sp, #12
 8012ebc:	4621      	mov	r1, r4
 8012ebe:	f000 f837 	bl	8012f30 <__kernel_rem_pio2f>
 8012ec2:	2e00      	cmp	r6, #0
 8012ec4:	f6bf af2f 	bge.w	8012d26 <__ieee754_rem_pio2f+0x66>
 8012ec8:	edd4 7a00 	vldr	s15, [r4]
 8012ecc:	eef1 7a67 	vneg.f32	s15, s15
 8012ed0:	edc4 7a00 	vstr	s15, [r4]
 8012ed4:	edd4 7a01 	vldr	s15, [r4, #4]
 8012ed8:	eef1 7a67 	vneg.f32	s15, s15
 8012edc:	edc4 7a01 	vstr	s15, [r4, #4]
 8012ee0:	e782      	b.n	8012de8 <__ieee754_rem_pio2f+0x128>
 8012ee2:	2303      	movs	r3, #3
 8012ee4:	e7e5      	b.n	8012eb2 <__ieee754_rem_pio2f+0x1f2>
 8012ee6:	bf00      	nop
 8012ee8:	3f490fd8 	.word	0x3f490fd8
 8012eec:	4016cbe3 	.word	0x4016cbe3
 8012ef0:	3fc90f80 	.word	0x3fc90f80
 8012ef4:	3fc90fd0 	.word	0x3fc90fd0
 8012ef8:	37354400 	.word	0x37354400
 8012efc:	37354443 	.word	0x37354443
 8012f00:	2e85a308 	.word	0x2e85a308
 8012f04:	43490f80 	.word	0x43490f80
 8012f08:	3f22f984 	.word	0x3f22f984
 8012f0c:	080144ec 	.word	0x080144ec
 8012f10:	2e85a300 	.word	0x2e85a300
 8012f14:	248d3132 	.word	0x248d3132
 8012f18:	43800000 	.word	0x43800000
 8012f1c:	0801456c 	.word	0x0801456c

08012f20 <fabsf>:
 8012f20:	ee10 3a10 	vmov	r3, s0
 8012f24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012f28:	ee00 3a10 	vmov	s0, r3
 8012f2c:	4770      	bx	lr
	...

08012f30 <__kernel_rem_pio2f>:
 8012f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f34:	ed2d 8b04 	vpush	{d8-d9}
 8012f38:	b0d9      	sub	sp, #356	@ 0x164
 8012f3a:	4690      	mov	r8, r2
 8012f3c:	9001      	str	r0, [sp, #4]
 8012f3e:	4ab9      	ldr	r2, [pc, #740]	@ (8013224 <__kernel_rem_pio2f+0x2f4>)
 8012f40:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8012f42:	f118 0f04 	cmn.w	r8, #4
 8012f46:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8012f4a:	460f      	mov	r7, r1
 8012f4c:	f103 3bff 	add.w	fp, r3, #4294967295
 8012f50:	db27      	blt.n	8012fa2 <__kernel_rem_pio2f+0x72>
 8012f52:	f1b8 0203 	subs.w	r2, r8, #3
 8012f56:	bf48      	it	mi
 8012f58:	f108 0204 	addmi.w	r2, r8, #4
 8012f5c:	10d2      	asrs	r2, r2, #3
 8012f5e:	1c55      	adds	r5, r2, #1
 8012f60:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8012f62:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8013234 <__kernel_rem_pio2f+0x304>
 8012f66:	00e8      	lsls	r0, r5, #3
 8012f68:	eba2 060b 	sub.w	r6, r2, fp
 8012f6c:	9002      	str	r0, [sp, #8]
 8012f6e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8012f72:	eb0a 0c0b 	add.w	ip, sl, fp
 8012f76:	ac1c      	add	r4, sp, #112	@ 0x70
 8012f78:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8012f7c:	2000      	movs	r0, #0
 8012f7e:	4560      	cmp	r0, ip
 8012f80:	dd11      	ble.n	8012fa6 <__kernel_rem_pio2f+0x76>
 8012f82:	a91c      	add	r1, sp, #112	@ 0x70
 8012f84:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8012f88:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8012f8c:	f04f 0c00 	mov.w	ip, #0
 8012f90:	45d4      	cmp	ip, sl
 8012f92:	dc27      	bgt.n	8012fe4 <__kernel_rem_pio2f+0xb4>
 8012f94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012f98:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8013234 <__kernel_rem_pio2f+0x304>
 8012f9c:	4606      	mov	r6, r0
 8012f9e:	2400      	movs	r4, #0
 8012fa0:	e016      	b.n	8012fd0 <__kernel_rem_pio2f+0xa0>
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	e7db      	b.n	8012f5e <__kernel_rem_pio2f+0x2e>
 8012fa6:	42c6      	cmn	r6, r0
 8012fa8:	bf5d      	ittte	pl
 8012faa:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8012fae:	ee07 1a90 	vmovpl	s15, r1
 8012fb2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8012fb6:	eef0 7a47 	vmovmi.f32	s15, s14
 8012fba:	ece4 7a01 	vstmia	r4!, {s15}
 8012fbe:	3001      	adds	r0, #1
 8012fc0:	e7dd      	b.n	8012f7e <__kernel_rem_pio2f+0x4e>
 8012fc2:	ecfe 6a01 	vldmia	lr!, {s13}
 8012fc6:	ed96 7a00 	vldr	s14, [r6]
 8012fca:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012fce:	3401      	adds	r4, #1
 8012fd0:	455c      	cmp	r4, fp
 8012fd2:	f1a6 0604 	sub.w	r6, r6, #4
 8012fd6:	ddf4      	ble.n	8012fc2 <__kernel_rem_pio2f+0x92>
 8012fd8:	ece9 7a01 	vstmia	r9!, {s15}
 8012fdc:	f10c 0c01 	add.w	ip, ip, #1
 8012fe0:	3004      	adds	r0, #4
 8012fe2:	e7d5      	b.n	8012f90 <__kernel_rem_pio2f+0x60>
 8012fe4:	a908      	add	r1, sp, #32
 8012fe6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012fea:	9104      	str	r1, [sp, #16]
 8012fec:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8012fee:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8013230 <__kernel_rem_pio2f+0x300>
 8012ff2:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801322c <__kernel_rem_pio2f+0x2fc>
 8012ff6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8012ffa:	9203      	str	r2, [sp, #12]
 8012ffc:	4654      	mov	r4, sl
 8012ffe:	00a2      	lsls	r2, r4, #2
 8013000:	9205      	str	r2, [sp, #20]
 8013002:	aa58      	add	r2, sp, #352	@ 0x160
 8013004:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013008:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801300c:	a944      	add	r1, sp, #272	@ 0x110
 801300e:	aa08      	add	r2, sp, #32
 8013010:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8013014:	4694      	mov	ip, r2
 8013016:	4626      	mov	r6, r4
 8013018:	2e00      	cmp	r6, #0
 801301a:	f1a0 0004 	sub.w	r0, r0, #4
 801301e:	dc4c      	bgt.n	80130ba <__kernel_rem_pio2f+0x18a>
 8013020:	4628      	mov	r0, r5
 8013022:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013026:	f000 f9f5 	bl	8013414 <scalbnf>
 801302a:	eeb0 8a40 	vmov.f32	s16, s0
 801302e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8013032:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013036:	f000 fa53 	bl	80134e0 <floorf>
 801303a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801303e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013042:	2d00      	cmp	r5, #0
 8013044:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013048:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801304c:	ee17 9a90 	vmov	r9, s15
 8013050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013054:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013058:	dd41      	ble.n	80130de <__kernel_rem_pio2f+0x1ae>
 801305a:	f104 3cff 	add.w	ip, r4, #4294967295
 801305e:	a908      	add	r1, sp, #32
 8013060:	f1c5 0e08 	rsb	lr, r5, #8
 8013064:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8013068:	fa46 f00e 	asr.w	r0, r6, lr
 801306c:	4481      	add	r9, r0
 801306e:	fa00 f00e 	lsl.w	r0, r0, lr
 8013072:	1a36      	subs	r6, r6, r0
 8013074:	f1c5 0007 	rsb	r0, r5, #7
 8013078:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801307c:	4106      	asrs	r6, r0
 801307e:	2e00      	cmp	r6, #0
 8013080:	dd3c      	ble.n	80130fc <__kernel_rem_pio2f+0x1cc>
 8013082:	f04f 0e00 	mov.w	lr, #0
 8013086:	f109 0901 	add.w	r9, r9, #1
 801308a:	4670      	mov	r0, lr
 801308c:	4574      	cmp	r4, lr
 801308e:	dc68      	bgt.n	8013162 <__kernel_rem_pio2f+0x232>
 8013090:	2d00      	cmp	r5, #0
 8013092:	dd03      	ble.n	801309c <__kernel_rem_pio2f+0x16c>
 8013094:	2d01      	cmp	r5, #1
 8013096:	d074      	beq.n	8013182 <__kernel_rem_pio2f+0x252>
 8013098:	2d02      	cmp	r5, #2
 801309a:	d07d      	beq.n	8013198 <__kernel_rem_pio2f+0x268>
 801309c:	2e02      	cmp	r6, #2
 801309e:	d12d      	bne.n	80130fc <__kernel_rem_pio2f+0x1cc>
 80130a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80130a4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80130a8:	b340      	cbz	r0, 80130fc <__kernel_rem_pio2f+0x1cc>
 80130aa:	4628      	mov	r0, r5
 80130ac:	9306      	str	r3, [sp, #24]
 80130ae:	f000 f9b1 	bl	8013414 <scalbnf>
 80130b2:	9b06      	ldr	r3, [sp, #24]
 80130b4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80130b8:	e020      	b.n	80130fc <__kernel_rem_pio2f+0x1cc>
 80130ba:	ee60 7a28 	vmul.f32	s15, s0, s17
 80130be:	3e01      	subs	r6, #1
 80130c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80130c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130c8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80130cc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80130d0:	ecac 0a01 	vstmia	ip!, {s0}
 80130d4:	ed90 0a00 	vldr	s0, [r0]
 80130d8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80130dc:	e79c      	b.n	8013018 <__kernel_rem_pio2f+0xe8>
 80130de:	d105      	bne.n	80130ec <__kernel_rem_pio2f+0x1bc>
 80130e0:	1e60      	subs	r0, r4, #1
 80130e2:	a908      	add	r1, sp, #32
 80130e4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80130e8:	11f6      	asrs	r6, r6, #7
 80130ea:	e7c8      	b.n	801307e <__kernel_rem_pio2f+0x14e>
 80130ec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80130f0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80130f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130f8:	da31      	bge.n	801315e <__kernel_rem_pio2f+0x22e>
 80130fa:	2600      	movs	r6, #0
 80130fc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013104:	f040 8098 	bne.w	8013238 <__kernel_rem_pio2f+0x308>
 8013108:	1e60      	subs	r0, r4, #1
 801310a:	2200      	movs	r2, #0
 801310c:	4550      	cmp	r0, sl
 801310e:	da4b      	bge.n	80131a8 <__kernel_rem_pio2f+0x278>
 8013110:	2a00      	cmp	r2, #0
 8013112:	d065      	beq.n	80131e0 <__kernel_rem_pio2f+0x2b0>
 8013114:	3c01      	subs	r4, #1
 8013116:	ab08      	add	r3, sp, #32
 8013118:	3d08      	subs	r5, #8
 801311a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d0f8      	beq.n	8013114 <__kernel_rem_pio2f+0x1e4>
 8013122:	4628      	mov	r0, r5
 8013124:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013128:	f000 f974 	bl	8013414 <scalbnf>
 801312c:	1c63      	adds	r3, r4, #1
 801312e:	aa44      	add	r2, sp, #272	@ 0x110
 8013130:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8013230 <__kernel_rem_pio2f+0x300>
 8013134:	0099      	lsls	r1, r3, #2
 8013136:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801313a:	4623      	mov	r3, r4
 801313c:	2b00      	cmp	r3, #0
 801313e:	f280 80a9 	bge.w	8013294 <__kernel_rem_pio2f+0x364>
 8013142:	4623      	mov	r3, r4
 8013144:	2b00      	cmp	r3, #0
 8013146:	f2c0 80c7 	blt.w	80132d8 <__kernel_rem_pio2f+0x3a8>
 801314a:	aa44      	add	r2, sp, #272	@ 0x110
 801314c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8013150:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8013228 <__kernel_rem_pio2f+0x2f8>
 8013154:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8013234 <__kernel_rem_pio2f+0x304>
 8013158:	2000      	movs	r0, #0
 801315a:	1ae2      	subs	r2, r4, r3
 801315c:	e0b1      	b.n	80132c2 <__kernel_rem_pio2f+0x392>
 801315e:	2602      	movs	r6, #2
 8013160:	e78f      	b.n	8013082 <__kernel_rem_pio2f+0x152>
 8013162:	f852 1b04 	ldr.w	r1, [r2], #4
 8013166:	b948      	cbnz	r0, 801317c <__kernel_rem_pio2f+0x24c>
 8013168:	b121      	cbz	r1, 8013174 <__kernel_rem_pio2f+0x244>
 801316a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801316e:	f842 1c04 	str.w	r1, [r2, #-4]
 8013172:	2101      	movs	r1, #1
 8013174:	f10e 0e01 	add.w	lr, lr, #1
 8013178:	4608      	mov	r0, r1
 801317a:	e787      	b.n	801308c <__kernel_rem_pio2f+0x15c>
 801317c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8013180:	e7f5      	b.n	801316e <__kernel_rem_pio2f+0x23e>
 8013182:	f104 3cff 	add.w	ip, r4, #4294967295
 8013186:	aa08      	add	r2, sp, #32
 8013188:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801318c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8013190:	a908      	add	r1, sp, #32
 8013192:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8013196:	e781      	b.n	801309c <__kernel_rem_pio2f+0x16c>
 8013198:	f104 3cff 	add.w	ip, r4, #4294967295
 801319c:	aa08      	add	r2, sp, #32
 801319e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80131a2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80131a6:	e7f3      	b.n	8013190 <__kernel_rem_pio2f+0x260>
 80131a8:	a908      	add	r1, sp, #32
 80131aa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80131ae:	3801      	subs	r0, #1
 80131b0:	430a      	orrs	r2, r1
 80131b2:	e7ab      	b.n	801310c <__kernel_rem_pio2f+0x1dc>
 80131b4:	3201      	adds	r2, #1
 80131b6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80131ba:	2e00      	cmp	r6, #0
 80131bc:	d0fa      	beq.n	80131b4 <__kernel_rem_pio2f+0x284>
 80131be:	9905      	ldr	r1, [sp, #20]
 80131c0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80131c4:	eb0d 0001 	add.w	r0, sp, r1
 80131c8:	18e6      	adds	r6, r4, r3
 80131ca:	a91c      	add	r1, sp, #112	@ 0x70
 80131cc:	f104 0c01 	add.w	ip, r4, #1
 80131d0:	384c      	subs	r0, #76	@ 0x4c
 80131d2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80131d6:	4422      	add	r2, r4
 80131d8:	4562      	cmp	r2, ip
 80131da:	da04      	bge.n	80131e6 <__kernel_rem_pio2f+0x2b6>
 80131dc:	4614      	mov	r4, r2
 80131de:	e70e      	b.n	8012ffe <__kernel_rem_pio2f+0xce>
 80131e0:	9804      	ldr	r0, [sp, #16]
 80131e2:	2201      	movs	r2, #1
 80131e4:	e7e7      	b.n	80131b6 <__kernel_rem_pio2f+0x286>
 80131e6:	9903      	ldr	r1, [sp, #12]
 80131e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80131ec:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80131f0:	9105      	str	r1, [sp, #20]
 80131f2:	ee07 1a90 	vmov	s15, r1
 80131f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131fa:	2400      	movs	r4, #0
 80131fc:	ece6 7a01 	vstmia	r6!, {s15}
 8013200:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8013234 <__kernel_rem_pio2f+0x304>
 8013204:	46b1      	mov	r9, r6
 8013206:	455c      	cmp	r4, fp
 8013208:	dd04      	ble.n	8013214 <__kernel_rem_pio2f+0x2e4>
 801320a:	ece0 7a01 	vstmia	r0!, {s15}
 801320e:	f10c 0c01 	add.w	ip, ip, #1
 8013212:	e7e1      	b.n	80131d8 <__kernel_rem_pio2f+0x2a8>
 8013214:	ecfe 6a01 	vldmia	lr!, {s13}
 8013218:	ed39 7a01 	vldmdb	r9!, {s14}
 801321c:	3401      	adds	r4, #1
 801321e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013222:	e7f0      	b.n	8013206 <__kernel_rem_pio2f+0x2d6>
 8013224:	080148b0 	.word	0x080148b0
 8013228:	08014884 	.word	0x08014884
 801322c:	43800000 	.word	0x43800000
 8013230:	3b800000 	.word	0x3b800000
 8013234:	00000000 	.word	0x00000000
 8013238:	9b02      	ldr	r3, [sp, #8]
 801323a:	eeb0 0a48 	vmov.f32	s0, s16
 801323e:	eba3 0008 	sub.w	r0, r3, r8
 8013242:	f000 f8e7 	bl	8013414 <scalbnf>
 8013246:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801322c <__kernel_rem_pio2f+0x2fc>
 801324a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801324e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013252:	db19      	blt.n	8013288 <__kernel_rem_pio2f+0x358>
 8013254:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8013230 <__kernel_rem_pio2f+0x300>
 8013258:	ee60 7a27 	vmul.f32	s15, s0, s15
 801325c:	aa08      	add	r2, sp, #32
 801325e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013262:	3508      	adds	r5, #8
 8013264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013268:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801326c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013270:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013274:	ee10 3a10 	vmov	r3, s0
 8013278:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801327c:	ee17 3a90 	vmov	r3, s15
 8013280:	3401      	adds	r4, #1
 8013282:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013286:	e74c      	b.n	8013122 <__kernel_rem_pio2f+0x1f2>
 8013288:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801328c:	aa08      	add	r2, sp, #32
 801328e:	ee10 3a10 	vmov	r3, s0
 8013292:	e7f6      	b.n	8013282 <__kernel_rem_pio2f+0x352>
 8013294:	a808      	add	r0, sp, #32
 8013296:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801329a:	9001      	str	r0, [sp, #4]
 801329c:	ee07 0a90 	vmov	s15, r0
 80132a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132a4:	3b01      	subs	r3, #1
 80132a6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80132aa:	ee20 0a07 	vmul.f32	s0, s0, s14
 80132ae:	ed62 7a01 	vstmdb	r2!, {s15}
 80132b2:	e743      	b.n	801313c <__kernel_rem_pio2f+0x20c>
 80132b4:	ecfc 6a01 	vldmia	ip!, {s13}
 80132b8:	ecb5 7a01 	vldmia	r5!, {s14}
 80132bc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80132c0:	3001      	adds	r0, #1
 80132c2:	4550      	cmp	r0, sl
 80132c4:	dc01      	bgt.n	80132ca <__kernel_rem_pio2f+0x39a>
 80132c6:	4282      	cmp	r2, r0
 80132c8:	daf4      	bge.n	80132b4 <__kernel_rem_pio2f+0x384>
 80132ca:	a858      	add	r0, sp, #352	@ 0x160
 80132cc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80132d0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80132d4:	3b01      	subs	r3, #1
 80132d6:	e735      	b.n	8013144 <__kernel_rem_pio2f+0x214>
 80132d8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80132da:	2b02      	cmp	r3, #2
 80132dc:	dc09      	bgt.n	80132f2 <__kernel_rem_pio2f+0x3c2>
 80132de:	2b00      	cmp	r3, #0
 80132e0:	dc2b      	bgt.n	801333a <__kernel_rem_pio2f+0x40a>
 80132e2:	d044      	beq.n	801336e <__kernel_rem_pio2f+0x43e>
 80132e4:	f009 0007 	and.w	r0, r9, #7
 80132e8:	b059      	add	sp, #356	@ 0x164
 80132ea:	ecbd 8b04 	vpop	{d8-d9}
 80132ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132f2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80132f4:	2b03      	cmp	r3, #3
 80132f6:	d1f5      	bne.n	80132e4 <__kernel_rem_pio2f+0x3b4>
 80132f8:	aa30      	add	r2, sp, #192	@ 0xc0
 80132fa:	1f0b      	subs	r3, r1, #4
 80132fc:	4413      	add	r3, r2
 80132fe:	461a      	mov	r2, r3
 8013300:	4620      	mov	r0, r4
 8013302:	2800      	cmp	r0, #0
 8013304:	f1a2 0204 	sub.w	r2, r2, #4
 8013308:	dc52      	bgt.n	80133b0 <__kernel_rem_pio2f+0x480>
 801330a:	4622      	mov	r2, r4
 801330c:	2a01      	cmp	r2, #1
 801330e:	f1a3 0304 	sub.w	r3, r3, #4
 8013312:	dc5d      	bgt.n	80133d0 <__kernel_rem_pio2f+0x4a0>
 8013314:	ab30      	add	r3, sp, #192	@ 0xc0
 8013316:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8013234 <__kernel_rem_pio2f+0x304>
 801331a:	440b      	add	r3, r1
 801331c:	2c01      	cmp	r4, #1
 801331e:	dc67      	bgt.n	80133f0 <__kernel_rem_pio2f+0x4c0>
 8013320:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013324:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8013328:	2e00      	cmp	r6, #0
 801332a:	d167      	bne.n	80133fc <__kernel_rem_pio2f+0x4cc>
 801332c:	edc7 6a00 	vstr	s13, [r7]
 8013330:	ed87 7a01 	vstr	s14, [r7, #4]
 8013334:	edc7 7a02 	vstr	s15, [r7, #8]
 8013338:	e7d4      	b.n	80132e4 <__kernel_rem_pio2f+0x3b4>
 801333a:	ab30      	add	r3, sp, #192	@ 0xc0
 801333c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8013234 <__kernel_rem_pio2f+0x304>
 8013340:	440b      	add	r3, r1
 8013342:	4622      	mov	r2, r4
 8013344:	2a00      	cmp	r2, #0
 8013346:	da24      	bge.n	8013392 <__kernel_rem_pio2f+0x462>
 8013348:	b34e      	cbz	r6, 801339e <__kernel_rem_pio2f+0x46e>
 801334a:	eef1 7a47 	vneg.f32	s15, s14
 801334e:	edc7 7a00 	vstr	s15, [r7]
 8013352:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8013356:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801335a:	aa31      	add	r2, sp, #196	@ 0xc4
 801335c:	2301      	movs	r3, #1
 801335e:	429c      	cmp	r4, r3
 8013360:	da20      	bge.n	80133a4 <__kernel_rem_pio2f+0x474>
 8013362:	b10e      	cbz	r6, 8013368 <__kernel_rem_pio2f+0x438>
 8013364:	eef1 7a67 	vneg.f32	s15, s15
 8013368:	edc7 7a01 	vstr	s15, [r7, #4]
 801336c:	e7ba      	b.n	80132e4 <__kernel_rem_pio2f+0x3b4>
 801336e:	ab30      	add	r3, sp, #192	@ 0xc0
 8013370:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8013234 <__kernel_rem_pio2f+0x304>
 8013374:	440b      	add	r3, r1
 8013376:	2c00      	cmp	r4, #0
 8013378:	da05      	bge.n	8013386 <__kernel_rem_pio2f+0x456>
 801337a:	b10e      	cbz	r6, 8013380 <__kernel_rem_pio2f+0x450>
 801337c:	eef1 7a67 	vneg.f32	s15, s15
 8013380:	edc7 7a00 	vstr	s15, [r7]
 8013384:	e7ae      	b.n	80132e4 <__kernel_rem_pio2f+0x3b4>
 8013386:	ed33 7a01 	vldmdb	r3!, {s14}
 801338a:	3c01      	subs	r4, #1
 801338c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013390:	e7f1      	b.n	8013376 <__kernel_rem_pio2f+0x446>
 8013392:	ed73 7a01 	vldmdb	r3!, {s15}
 8013396:	3a01      	subs	r2, #1
 8013398:	ee37 7a27 	vadd.f32	s14, s14, s15
 801339c:	e7d2      	b.n	8013344 <__kernel_rem_pio2f+0x414>
 801339e:	eef0 7a47 	vmov.f32	s15, s14
 80133a2:	e7d4      	b.n	801334e <__kernel_rem_pio2f+0x41e>
 80133a4:	ecb2 7a01 	vldmia	r2!, {s14}
 80133a8:	3301      	adds	r3, #1
 80133aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80133ae:	e7d6      	b.n	801335e <__kernel_rem_pio2f+0x42e>
 80133b0:	edd2 7a00 	vldr	s15, [r2]
 80133b4:	edd2 6a01 	vldr	s13, [r2, #4]
 80133b8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80133bc:	3801      	subs	r0, #1
 80133be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80133c2:	ed82 7a00 	vstr	s14, [r2]
 80133c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133ca:	edc2 7a01 	vstr	s15, [r2, #4]
 80133ce:	e798      	b.n	8013302 <__kernel_rem_pio2f+0x3d2>
 80133d0:	edd3 7a00 	vldr	s15, [r3]
 80133d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80133d8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80133dc:	3a01      	subs	r2, #1
 80133de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80133e2:	ed83 7a00 	vstr	s14, [r3]
 80133e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133ea:	edc3 7a01 	vstr	s15, [r3, #4]
 80133ee:	e78d      	b.n	801330c <__kernel_rem_pio2f+0x3dc>
 80133f0:	ed33 7a01 	vldmdb	r3!, {s14}
 80133f4:	3c01      	subs	r4, #1
 80133f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80133fa:	e78f      	b.n	801331c <__kernel_rem_pio2f+0x3ec>
 80133fc:	eef1 6a66 	vneg.f32	s13, s13
 8013400:	eeb1 7a47 	vneg.f32	s14, s14
 8013404:	edc7 6a00 	vstr	s13, [r7]
 8013408:	ed87 7a01 	vstr	s14, [r7, #4]
 801340c:	eef1 7a67 	vneg.f32	s15, s15
 8013410:	e790      	b.n	8013334 <__kernel_rem_pio2f+0x404>
 8013412:	bf00      	nop

08013414 <scalbnf>:
 8013414:	ee10 3a10 	vmov	r3, s0
 8013418:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801341c:	d02b      	beq.n	8013476 <scalbnf+0x62>
 801341e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013422:	d302      	bcc.n	801342a <scalbnf+0x16>
 8013424:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013428:	4770      	bx	lr
 801342a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801342e:	d123      	bne.n	8013478 <scalbnf+0x64>
 8013430:	4b24      	ldr	r3, [pc, #144]	@ (80134c4 <scalbnf+0xb0>)
 8013432:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80134c8 <scalbnf+0xb4>
 8013436:	4298      	cmp	r0, r3
 8013438:	ee20 0a27 	vmul.f32	s0, s0, s15
 801343c:	db17      	blt.n	801346e <scalbnf+0x5a>
 801343e:	ee10 3a10 	vmov	r3, s0
 8013442:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013446:	3a19      	subs	r2, #25
 8013448:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801344c:	4288      	cmp	r0, r1
 801344e:	dd15      	ble.n	801347c <scalbnf+0x68>
 8013450:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80134cc <scalbnf+0xb8>
 8013454:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80134d0 <scalbnf+0xbc>
 8013458:	ee10 3a10 	vmov	r3, s0
 801345c:	eeb0 7a67 	vmov.f32	s14, s15
 8013460:	2b00      	cmp	r3, #0
 8013462:	bfb8      	it	lt
 8013464:	eef0 7a66 	vmovlt.f32	s15, s13
 8013468:	ee27 0a87 	vmul.f32	s0, s15, s14
 801346c:	4770      	bx	lr
 801346e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80134d4 <scalbnf+0xc0>
 8013472:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013476:	4770      	bx	lr
 8013478:	0dd2      	lsrs	r2, r2, #23
 801347a:	e7e5      	b.n	8013448 <scalbnf+0x34>
 801347c:	4410      	add	r0, r2
 801347e:	28fe      	cmp	r0, #254	@ 0xfe
 8013480:	dce6      	bgt.n	8013450 <scalbnf+0x3c>
 8013482:	2800      	cmp	r0, #0
 8013484:	dd06      	ble.n	8013494 <scalbnf+0x80>
 8013486:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801348a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801348e:	ee00 3a10 	vmov	s0, r3
 8013492:	4770      	bx	lr
 8013494:	f110 0f16 	cmn.w	r0, #22
 8013498:	da09      	bge.n	80134ae <scalbnf+0x9a>
 801349a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80134d4 <scalbnf+0xc0>
 801349e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80134d8 <scalbnf+0xc4>
 80134a2:	ee10 3a10 	vmov	r3, s0
 80134a6:	eeb0 7a67 	vmov.f32	s14, s15
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	e7d9      	b.n	8013462 <scalbnf+0x4e>
 80134ae:	3019      	adds	r0, #25
 80134b0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80134b4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80134b8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80134dc <scalbnf+0xc8>
 80134bc:	ee07 3a90 	vmov	s15, r3
 80134c0:	e7d7      	b.n	8013472 <scalbnf+0x5e>
 80134c2:	bf00      	nop
 80134c4:	ffff3cb0 	.word	0xffff3cb0
 80134c8:	4c000000 	.word	0x4c000000
 80134cc:	7149f2ca 	.word	0x7149f2ca
 80134d0:	f149f2ca 	.word	0xf149f2ca
 80134d4:	0da24260 	.word	0x0da24260
 80134d8:	8da24260 	.word	0x8da24260
 80134dc:	33000000 	.word	0x33000000

080134e0 <floorf>:
 80134e0:	ee10 3a10 	vmov	r3, s0
 80134e4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80134e8:	3a7f      	subs	r2, #127	@ 0x7f
 80134ea:	2a16      	cmp	r2, #22
 80134ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80134f0:	dc2b      	bgt.n	801354a <floorf+0x6a>
 80134f2:	2a00      	cmp	r2, #0
 80134f4:	da12      	bge.n	801351c <floorf+0x3c>
 80134f6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801355c <floorf+0x7c>
 80134fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80134fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013506:	dd06      	ble.n	8013516 <floorf+0x36>
 8013508:	2b00      	cmp	r3, #0
 801350a:	da24      	bge.n	8013556 <floorf+0x76>
 801350c:	2900      	cmp	r1, #0
 801350e:	4b14      	ldr	r3, [pc, #80]	@ (8013560 <floorf+0x80>)
 8013510:	bf08      	it	eq
 8013512:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8013516:	ee00 3a10 	vmov	s0, r3
 801351a:	4770      	bx	lr
 801351c:	4911      	ldr	r1, [pc, #68]	@ (8013564 <floorf+0x84>)
 801351e:	4111      	asrs	r1, r2
 8013520:	420b      	tst	r3, r1
 8013522:	d0fa      	beq.n	801351a <floorf+0x3a>
 8013524:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801355c <floorf+0x7c>
 8013528:	ee30 0a27 	vadd.f32	s0, s0, s15
 801352c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013534:	ddef      	ble.n	8013516 <floorf+0x36>
 8013536:	2b00      	cmp	r3, #0
 8013538:	bfbe      	ittt	lt
 801353a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801353e:	fa40 f202 	asrlt.w	r2, r0, r2
 8013542:	189b      	addlt	r3, r3, r2
 8013544:	ea23 0301 	bic.w	r3, r3, r1
 8013548:	e7e5      	b.n	8013516 <floorf+0x36>
 801354a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801354e:	d3e4      	bcc.n	801351a <floorf+0x3a>
 8013550:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013554:	4770      	bx	lr
 8013556:	2300      	movs	r3, #0
 8013558:	e7dd      	b.n	8013516 <floorf+0x36>
 801355a:	bf00      	nop
 801355c:	7149f2ca 	.word	0x7149f2ca
 8013560:	bf800000 	.word	0xbf800000
 8013564:	007fffff 	.word	0x007fffff

08013568 <calloc>:
 8013568:	4b02      	ldr	r3, [pc, #8]	@ (8013574 <calloc+0xc>)
 801356a:	460a      	mov	r2, r1
 801356c:	4601      	mov	r1, r0
 801356e:	6818      	ldr	r0, [r3, #0]
 8013570:	f000 b802 	b.w	8013578 <_calloc_r>
 8013574:	20000184 	.word	0x20000184

08013578 <_calloc_r>:
 8013578:	b570      	push	{r4, r5, r6, lr}
 801357a:	fba1 5402 	umull	r5, r4, r1, r2
 801357e:	b93c      	cbnz	r4, 8013590 <_calloc_r+0x18>
 8013580:	4629      	mov	r1, r5
 8013582:	f000 f82f 	bl	80135e4 <_malloc_r>
 8013586:	4606      	mov	r6, r0
 8013588:	b928      	cbnz	r0, 8013596 <_calloc_r+0x1e>
 801358a:	2600      	movs	r6, #0
 801358c:	4630      	mov	r0, r6
 801358e:	bd70      	pop	{r4, r5, r6, pc}
 8013590:	220c      	movs	r2, #12
 8013592:	6002      	str	r2, [r0, #0]
 8013594:	e7f9      	b.n	801358a <_calloc_r+0x12>
 8013596:	462a      	mov	r2, r5
 8013598:	4621      	mov	r1, r4
 801359a:	f000 f8e3 	bl	8013764 <memset>
 801359e:	e7f5      	b.n	801358c <_calloc_r+0x14>

080135a0 <sbrk_aligned>:
 80135a0:	b570      	push	{r4, r5, r6, lr}
 80135a2:	4e0f      	ldr	r6, [pc, #60]	@ (80135e0 <sbrk_aligned+0x40>)
 80135a4:	460c      	mov	r4, r1
 80135a6:	6831      	ldr	r1, [r6, #0]
 80135a8:	4605      	mov	r5, r0
 80135aa:	b911      	cbnz	r1, 80135b2 <sbrk_aligned+0x12>
 80135ac:	f000 f8e2 	bl	8013774 <_sbrk_r>
 80135b0:	6030      	str	r0, [r6, #0]
 80135b2:	4621      	mov	r1, r4
 80135b4:	4628      	mov	r0, r5
 80135b6:	f000 f8dd 	bl	8013774 <_sbrk_r>
 80135ba:	1c43      	adds	r3, r0, #1
 80135bc:	d103      	bne.n	80135c6 <sbrk_aligned+0x26>
 80135be:	f04f 34ff 	mov.w	r4, #4294967295
 80135c2:	4620      	mov	r0, r4
 80135c4:	bd70      	pop	{r4, r5, r6, pc}
 80135c6:	1cc4      	adds	r4, r0, #3
 80135c8:	f024 0403 	bic.w	r4, r4, #3
 80135cc:	42a0      	cmp	r0, r4
 80135ce:	d0f8      	beq.n	80135c2 <sbrk_aligned+0x22>
 80135d0:	1a21      	subs	r1, r4, r0
 80135d2:	4628      	mov	r0, r5
 80135d4:	f000 f8ce 	bl	8013774 <_sbrk_r>
 80135d8:	3001      	adds	r0, #1
 80135da:	d1f2      	bne.n	80135c2 <sbrk_aligned+0x22>
 80135dc:	e7ef      	b.n	80135be <sbrk_aligned+0x1e>
 80135de:	bf00      	nop
 80135e0:	20002194 	.word	0x20002194

080135e4 <_malloc_r>:
 80135e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135e8:	1ccd      	adds	r5, r1, #3
 80135ea:	f025 0503 	bic.w	r5, r5, #3
 80135ee:	3508      	adds	r5, #8
 80135f0:	2d0c      	cmp	r5, #12
 80135f2:	bf38      	it	cc
 80135f4:	250c      	movcc	r5, #12
 80135f6:	2d00      	cmp	r5, #0
 80135f8:	4606      	mov	r6, r0
 80135fa:	db01      	blt.n	8013600 <_malloc_r+0x1c>
 80135fc:	42a9      	cmp	r1, r5
 80135fe:	d904      	bls.n	801360a <_malloc_r+0x26>
 8013600:	230c      	movs	r3, #12
 8013602:	6033      	str	r3, [r6, #0]
 8013604:	2000      	movs	r0, #0
 8013606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801360a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80136e0 <_malloc_r+0xfc>
 801360e:	f000 f869 	bl	80136e4 <__malloc_lock>
 8013612:	f8d8 3000 	ldr.w	r3, [r8]
 8013616:	461c      	mov	r4, r3
 8013618:	bb44      	cbnz	r4, 801366c <_malloc_r+0x88>
 801361a:	4629      	mov	r1, r5
 801361c:	4630      	mov	r0, r6
 801361e:	f7ff ffbf 	bl	80135a0 <sbrk_aligned>
 8013622:	1c43      	adds	r3, r0, #1
 8013624:	4604      	mov	r4, r0
 8013626:	d158      	bne.n	80136da <_malloc_r+0xf6>
 8013628:	f8d8 4000 	ldr.w	r4, [r8]
 801362c:	4627      	mov	r7, r4
 801362e:	2f00      	cmp	r7, #0
 8013630:	d143      	bne.n	80136ba <_malloc_r+0xd6>
 8013632:	2c00      	cmp	r4, #0
 8013634:	d04b      	beq.n	80136ce <_malloc_r+0xea>
 8013636:	6823      	ldr	r3, [r4, #0]
 8013638:	4639      	mov	r1, r7
 801363a:	4630      	mov	r0, r6
 801363c:	eb04 0903 	add.w	r9, r4, r3
 8013640:	f000 f898 	bl	8013774 <_sbrk_r>
 8013644:	4581      	cmp	r9, r0
 8013646:	d142      	bne.n	80136ce <_malloc_r+0xea>
 8013648:	6821      	ldr	r1, [r4, #0]
 801364a:	1a6d      	subs	r5, r5, r1
 801364c:	4629      	mov	r1, r5
 801364e:	4630      	mov	r0, r6
 8013650:	f7ff ffa6 	bl	80135a0 <sbrk_aligned>
 8013654:	3001      	adds	r0, #1
 8013656:	d03a      	beq.n	80136ce <_malloc_r+0xea>
 8013658:	6823      	ldr	r3, [r4, #0]
 801365a:	442b      	add	r3, r5
 801365c:	6023      	str	r3, [r4, #0]
 801365e:	f8d8 3000 	ldr.w	r3, [r8]
 8013662:	685a      	ldr	r2, [r3, #4]
 8013664:	bb62      	cbnz	r2, 80136c0 <_malloc_r+0xdc>
 8013666:	f8c8 7000 	str.w	r7, [r8]
 801366a:	e00f      	b.n	801368c <_malloc_r+0xa8>
 801366c:	6822      	ldr	r2, [r4, #0]
 801366e:	1b52      	subs	r2, r2, r5
 8013670:	d420      	bmi.n	80136b4 <_malloc_r+0xd0>
 8013672:	2a0b      	cmp	r2, #11
 8013674:	d917      	bls.n	80136a6 <_malloc_r+0xc2>
 8013676:	1961      	adds	r1, r4, r5
 8013678:	42a3      	cmp	r3, r4
 801367a:	6025      	str	r5, [r4, #0]
 801367c:	bf18      	it	ne
 801367e:	6059      	strne	r1, [r3, #4]
 8013680:	6863      	ldr	r3, [r4, #4]
 8013682:	bf08      	it	eq
 8013684:	f8c8 1000 	streq.w	r1, [r8]
 8013688:	5162      	str	r2, [r4, r5]
 801368a:	604b      	str	r3, [r1, #4]
 801368c:	4630      	mov	r0, r6
 801368e:	f000 f82f 	bl	80136f0 <__malloc_unlock>
 8013692:	f104 000b 	add.w	r0, r4, #11
 8013696:	1d23      	adds	r3, r4, #4
 8013698:	f020 0007 	bic.w	r0, r0, #7
 801369c:	1ac2      	subs	r2, r0, r3
 801369e:	bf1c      	itt	ne
 80136a0:	1a1b      	subne	r3, r3, r0
 80136a2:	50a3      	strne	r3, [r4, r2]
 80136a4:	e7af      	b.n	8013606 <_malloc_r+0x22>
 80136a6:	6862      	ldr	r2, [r4, #4]
 80136a8:	42a3      	cmp	r3, r4
 80136aa:	bf0c      	ite	eq
 80136ac:	f8c8 2000 	streq.w	r2, [r8]
 80136b0:	605a      	strne	r2, [r3, #4]
 80136b2:	e7eb      	b.n	801368c <_malloc_r+0xa8>
 80136b4:	4623      	mov	r3, r4
 80136b6:	6864      	ldr	r4, [r4, #4]
 80136b8:	e7ae      	b.n	8013618 <_malloc_r+0x34>
 80136ba:	463c      	mov	r4, r7
 80136bc:	687f      	ldr	r7, [r7, #4]
 80136be:	e7b6      	b.n	801362e <_malloc_r+0x4a>
 80136c0:	461a      	mov	r2, r3
 80136c2:	685b      	ldr	r3, [r3, #4]
 80136c4:	42a3      	cmp	r3, r4
 80136c6:	d1fb      	bne.n	80136c0 <_malloc_r+0xdc>
 80136c8:	2300      	movs	r3, #0
 80136ca:	6053      	str	r3, [r2, #4]
 80136cc:	e7de      	b.n	801368c <_malloc_r+0xa8>
 80136ce:	230c      	movs	r3, #12
 80136d0:	6033      	str	r3, [r6, #0]
 80136d2:	4630      	mov	r0, r6
 80136d4:	f000 f80c 	bl	80136f0 <__malloc_unlock>
 80136d8:	e794      	b.n	8013604 <_malloc_r+0x20>
 80136da:	6005      	str	r5, [r0, #0]
 80136dc:	e7d6      	b.n	801368c <_malloc_r+0xa8>
 80136de:	bf00      	nop
 80136e0:	20002198 	.word	0x20002198

080136e4 <__malloc_lock>:
 80136e4:	4801      	ldr	r0, [pc, #4]	@ (80136ec <__malloc_lock+0x8>)
 80136e6:	f000 b87f 	b.w	80137e8 <__retarget_lock_acquire_recursive>
 80136ea:	bf00      	nop
 80136ec:	200022d8 	.word	0x200022d8

080136f0 <__malloc_unlock>:
 80136f0:	4801      	ldr	r0, [pc, #4]	@ (80136f8 <__malloc_unlock+0x8>)
 80136f2:	f000 b87a 	b.w	80137ea <__retarget_lock_release_recursive>
 80136f6:	bf00      	nop
 80136f8:	200022d8 	.word	0x200022d8

080136fc <sniprintf>:
 80136fc:	b40c      	push	{r2, r3}
 80136fe:	b530      	push	{r4, r5, lr}
 8013700:	4b17      	ldr	r3, [pc, #92]	@ (8013760 <sniprintf+0x64>)
 8013702:	1e0c      	subs	r4, r1, #0
 8013704:	681d      	ldr	r5, [r3, #0]
 8013706:	b09d      	sub	sp, #116	@ 0x74
 8013708:	da08      	bge.n	801371c <sniprintf+0x20>
 801370a:	238b      	movs	r3, #139	@ 0x8b
 801370c:	602b      	str	r3, [r5, #0]
 801370e:	f04f 30ff 	mov.w	r0, #4294967295
 8013712:	b01d      	add	sp, #116	@ 0x74
 8013714:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013718:	b002      	add	sp, #8
 801371a:	4770      	bx	lr
 801371c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013720:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013724:	bf14      	ite	ne
 8013726:	f104 33ff 	addne.w	r3, r4, #4294967295
 801372a:	4623      	moveq	r3, r4
 801372c:	9304      	str	r3, [sp, #16]
 801372e:	9307      	str	r3, [sp, #28]
 8013730:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013734:	9002      	str	r0, [sp, #8]
 8013736:	9006      	str	r0, [sp, #24]
 8013738:	f8ad 3016 	strh.w	r3, [sp, #22]
 801373c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801373e:	ab21      	add	r3, sp, #132	@ 0x84
 8013740:	a902      	add	r1, sp, #8
 8013742:	4628      	mov	r0, r5
 8013744:	9301      	str	r3, [sp, #4]
 8013746:	f000 f8f7 	bl	8013938 <_svfiprintf_r>
 801374a:	1c43      	adds	r3, r0, #1
 801374c:	bfbc      	itt	lt
 801374e:	238b      	movlt	r3, #139	@ 0x8b
 8013750:	602b      	strlt	r3, [r5, #0]
 8013752:	2c00      	cmp	r4, #0
 8013754:	d0dd      	beq.n	8013712 <sniprintf+0x16>
 8013756:	9b02      	ldr	r3, [sp, #8]
 8013758:	2200      	movs	r2, #0
 801375a:	701a      	strb	r2, [r3, #0]
 801375c:	e7d9      	b.n	8013712 <sniprintf+0x16>
 801375e:	bf00      	nop
 8013760:	20000184 	.word	0x20000184

08013764 <memset>:
 8013764:	4402      	add	r2, r0
 8013766:	4603      	mov	r3, r0
 8013768:	4293      	cmp	r3, r2
 801376a:	d100      	bne.n	801376e <memset+0xa>
 801376c:	4770      	bx	lr
 801376e:	f803 1b01 	strb.w	r1, [r3], #1
 8013772:	e7f9      	b.n	8013768 <memset+0x4>

08013774 <_sbrk_r>:
 8013774:	b538      	push	{r3, r4, r5, lr}
 8013776:	4d06      	ldr	r5, [pc, #24]	@ (8013790 <_sbrk_r+0x1c>)
 8013778:	2300      	movs	r3, #0
 801377a:	4604      	mov	r4, r0
 801377c:	4608      	mov	r0, r1
 801377e:	602b      	str	r3, [r5, #0]
 8013780:	f7ee fdfc 	bl	800237c <_sbrk>
 8013784:	1c43      	adds	r3, r0, #1
 8013786:	d102      	bne.n	801378e <_sbrk_r+0x1a>
 8013788:	682b      	ldr	r3, [r5, #0]
 801378a:	b103      	cbz	r3, 801378e <_sbrk_r+0x1a>
 801378c:	6023      	str	r3, [r4, #0]
 801378e:	bd38      	pop	{r3, r4, r5, pc}
 8013790:	200022d4 	.word	0x200022d4

08013794 <__errno>:
 8013794:	4b01      	ldr	r3, [pc, #4]	@ (801379c <__errno+0x8>)
 8013796:	6818      	ldr	r0, [r3, #0]
 8013798:	4770      	bx	lr
 801379a:	bf00      	nop
 801379c:	20000184 	.word	0x20000184

080137a0 <__libc_init_array>:
 80137a0:	b570      	push	{r4, r5, r6, lr}
 80137a2:	4d0d      	ldr	r5, [pc, #52]	@ (80137d8 <__libc_init_array+0x38>)
 80137a4:	4c0d      	ldr	r4, [pc, #52]	@ (80137dc <__libc_init_array+0x3c>)
 80137a6:	1b64      	subs	r4, r4, r5
 80137a8:	10a4      	asrs	r4, r4, #2
 80137aa:	2600      	movs	r6, #0
 80137ac:	42a6      	cmp	r6, r4
 80137ae:	d109      	bne.n	80137c4 <__libc_init_array+0x24>
 80137b0:	4d0b      	ldr	r5, [pc, #44]	@ (80137e0 <__libc_init_array+0x40>)
 80137b2:	4c0c      	ldr	r4, [pc, #48]	@ (80137e4 <__libc_init_array+0x44>)
 80137b4:	f000 fba8 	bl	8013f08 <_init>
 80137b8:	1b64      	subs	r4, r4, r5
 80137ba:	10a4      	asrs	r4, r4, #2
 80137bc:	2600      	movs	r6, #0
 80137be:	42a6      	cmp	r6, r4
 80137c0:	d105      	bne.n	80137ce <__libc_init_array+0x2e>
 80137c2:	bd70      	pop	{r4, r5, r6, pc}
 80137c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80137c8:	4798      	blx	r3
 80137ca:	3601      	adds	r6, #1
 80137cc:	e7ee      	b.n	80137ac <__libc_init_array+0xc>
 80137ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80137d2:	4798      	blx	r3
 80137d4:	3601      	adds	r6, #1
 80137d6:	e7f2      	b.n	80137be <__libc_init_array+0x1e>
 80137d8:	080148f8 	.word	0x080148f8
 80137dc:	080148f8 	.word	0x080148f8
 80137e0:	080148f8 	.word	0x080148f8
 80137e4:	080148fc 	.word	0x080148fc

080137e8 <__retarget_lock_acquire_recursive>:
 80137e8:	4770      	bx	lr

080137ea <__retarget_lock_release_recursive>:
 80137ea:	4770      	bx	lr

080137ec <_free_r>:
 80137ec:	b538      	push	{r3, r4, r5, lr}
 80137ee:	4605      	mov	r5, r0
 80137f0:	2900      	cmp	r1, #0
 80137f2:	d041      	beq.n	8013878 <_free_r+0x8c>
 80137f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137f8:	1f0c      	subs	r4, r1, #4
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	bfb8      	it	lt
 80137fe:	18e4      	addlt	r4, r4, r3
 8013800:	f7ff ff70 	bl	80136e4 <__malloc_lock>
 8013804:	4a1d      	ldr	r2, [pc, #116]	@ (801387c <_free_r+0x90>)
 8013806:	6813      	ldr	r3, [r2, #0]
 8013808:	b933      	cbnz	r3, 8013818 <_free_r+0x2c>
 801380a:	6063      	str	r3, [r4, #4]
 801380c:	6014      	str	r4, [r2, #0]
 801380e:	4628      	mov	r0, r5
 8013810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013814:	f7ff bf6c 	b.w	80136f0 <__malloc_unlock>
 8013818:	42a3      	cmp	r3, r4
 801381a:	d908      	bls.n	801382e <_free_r+0x42>
 801381c:	6820      	ldr	r0, [r4, #0]
 801381e:	1821      	adds	r1, r4, r0
 8013820:	428b      	cmp	r3, r1
 8013822:	bf01      	itttt	eq
 8013824:	6819      	ldreq	r1, [r3, #0]
 8013826:	685b      	ldreq	r3, [r3, #4]
 8013828:	1809      	addeq	r1, r1, r0
 801382a:	6021      	streq	r1, [r4, #0]
 801382c:	e7ed      	b.n	801380a <_free_r+0x1e>
 801382e:	461a      	mov	r2, r3
 8013830:	685b      	ldr	r3, [r3, #4]
 8013832:	b10b      	cbz	r3, 8013838 <_free_r+0x4c>
 8013834:	42a3      	cmp	r3, r4
 8013836:	d9fa      	bls.n	801382e <_free_r+0x42>
 8013838:	6811      	ldr	r1, [r2, #0]
 801383a:	1850      	adds	r0, r2, r1
 801383c:	42a0      	cmp	r0, r4
 801383e:	d10b      	bne.n	8013858 <_free_r+0x6c>
 8013840:	6820      	ldr	r0, [r4, #0]
 8013842:	4401      	add	r1, r0
 8013844:	1850      	adds	r0, r2, r1
 8013846:	4283      	cmp	r3, r0
 8013848:	6011      	str	r1, [r2, #0]
 801384a:	d1e0      	bne.n	801380e <_free_r+0x22>
 801384c:	6818      	ldr	r0, [r3, #0]
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	6053      	str	r3, [r2, #4]
 8013852:	4408      	add	r0, r1
 8013854:	6010      	str	r0, [r2, #0]
 8013856:	e7da      	b.n	801380e <_free_r+0x22>
 8013858:	d902      	bls.n	8013860 <_free_r+0x74>
 801385a:	230c      	movs	r3, #12
 801385c:	602b      	str	r3, [r5, #0]
 801385e:	e7d6      	b.n	801380e <_free_r+0x22>
 8013860:	6820      	ldr	r0, [r4, #0]
 8013862:	1821      	adds	r1, r4, r0
 8013864:	428b      	cmp	r3, r1
 8013866:	bf04      	itt	eq
 8013868:	6819      	ldreq	r1, [r3, #0]
 801386a:	685b      	ldreq	r3, [r3, #4]
 801386c:	6063      	str	r3, [r4, #4]
 801386e:	bf04      	itt	eq
 8013870:	1809      	addeq	r1, r1, r0
 8013872:	6021      	streq	r1, [r4, #0]
 8013874:	6054      	str	r4, [r2, #4]
 8013876:	e7ca      	b.n	801380e <_free_r+0x22>
 8013878:	bd38      	pop	{r3, r4, r5, pc}
 801387a:	bf00      	nop
 801387c:	20002198 	.word	0x20002198

08013880 <__ssputs_r>:
 8013880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013884:	688e      	ldr	r6, [r1, #8]
 8013886:	461f      	mov	r7, r3
 8013888:	42be      	cmp	r6, r7
 801388a:	680b      	ldr	r3, [r1, #0]
 801388c:	4682      	mov	sl, r0
 801388e:	460c      	mov	r4, r1
 8013890:	4690      	mov	r8, r2
 8013892:	d82d      	bhi.n	80138f0 <__ssputs_r+0x70>
 8013894:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013898:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801389c:	d026      	beq.n	80138ec <__ssputs_r+0x6c>
 801389e:	6965      	ldr	r5, [r4, #20]
 80138a0:	6909      	ldr	r1, [r1, #16]
 80138a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80138a6:	eba3 0901 	sub.w	r9, r3, r1
 80138aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80138ae:	1c7b      	adds	r3, r7, #1
 80138b0:	444b      	add	r3, r9
 80138b2:	106d      	asrs	r5, r5, #1
 80138b4:	429d      	cmp	r5, r3
 80138b6:	bf38      	it	cc
 80138b8:	461d      	movcc	r5, r3
 80138ba:	0553      	lsls	r3, r2, #21
 80138bc:	d527      	bpl.n	801390e <__ssputs_r+0x8e>
 80138be:	4629      	mov	r1, r5
 80138c0:	f7ff fe90 	bl	80135e4 <_malloc_r>
 80138c4:	4606      	mov	r6, r0
 80138c6:	b360      	cbz	r0, 8013922 <__ssputs_r+0xa2>
 80138c8:	6921      	ldr	r1, [r4, #16]
 80138ca:	464a      	mov	r2, r9
 80138cc:	f000 fad8 	bl	8013e80 <memcpy>
 80138d0:	89a3      	ldrh	r3, [r4, #12]
 80138d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80138d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80138da:	81a3      	strh	r3, [r4, #12]
 80138dc:	6126      	str	r6, [r4, #16]
 80138de:	6165      	str	r5, [r4, #20]
 80138e0:	444e      	add	r6, r9
 80138e2:	eba5 0509 	sub.w	r5, r5, r9
 80138e6:	6026      	str	r6, [r4, #0]
 80138e8:	60a5      	str	r5, [r4, #8]
 80138ea:	463e      	mov	r6, r7
 80138ec:	42be      	cmp	r6, r7
 80138ee:	d900      	bls.n	80138f2 <__ssputs_r+0x72>
 80138f0:	463e      	mov	r6, r7
 80138f2:	6820      	ldr	r0, [r4, #0]
 80138f4:	4632      	mov	r2, r6
 80138f6:	4641      	mov	r1, r8
 80138f8:	f000 faa8 	bl	8013e4c <memmove>
 80138fc:	68a3      	ldr	r3, [r4, #8]
 80138fe:	1b9b      	subs	r3, r3, r6
 8013900:	60a3      	str	r3, [r4, #8]
 8013902:	6823      	ldr	r3, [r4, #0]
 8013904:	4433      	add	r3, r6
 8013906:	6023      	str	r3, [r4, #0]
 8013908:	2000      	movs	r0, #0
 801390a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801390e:	462a      	mov	r2, r5
 8013910:	f000 fac4 	bl	8013e9c <_realloc_r>
 8013914:	4606      	mov	r6, r0
 8013916:	2800      	cmp	r0, #0
 8013918:	d1e0      	bne.n	80138dc <__ssputs_r+0x5c>
 801391a:	6921      	ldr	r1, [r4, #16]
 801391c:	4650      	mov	r0, sl
 801391e:	f7ff ff65 	bl	80137ec <_free_r>
 8013922:	230c      	movs	r3, #12
 8013924:	f8ca 3000 	str.w	r3, [sl]
 8013928:	89a3      	ldrh	r3, [r4, #12]
 801392a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801392e:	81a3      	strh	r3, [r4, #12]
 8013930:	f04f 30ff 	mov.w	r0, #4294967295
 8013934:	e7e9      	b.n	801390a <__ssputs_r+0x8a>
	...

08013938 <_svfiprintf_r>:
 8013938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801393c:	4698      	mov	r8, r3
 801393e:	898b      	ldrh	r3, [r1, #12]
 8013940:	061b      	lsls	r3, r3, #24
 8013942:	b09d      	sub	sp, #116	@ 0x74
 8013944:	4607      	mov	r7, r0
 8013946:	460d      	mov	r5, r1
 8013948:	4614      	mov	r4, r2
 801394a:	d510      	bpl.n	801396e <_svfiprintf_r+0x36>
 801394c:	690b      	ldr	r3, [r1, #16]
 801394e:	b973      	cbnz	r3, 801396e <_svfiprintf_r+0x36>
 8013950:	2140      	movs	r1, #64	@ 0x40
 8013952:	f7ff fe47 	bl	80135e4 <_malloc_r>
 8013956:	6028      	str	r0, [r5, #0]
 8013958:	6128      	str	r0, [r5, #16]
 801395a:	b930      	cbnz	r0, 801396a <_svfiprintf_r+0x32>
 801395c:	230c      	movs	r3, #12
 801395e:	603b      	str	r3, [r7, #0]
 8013960:	f04f 30ff 	mov.w	r0, #4294967295
 8013964:	b01d      	add	sp, #116	@ 0x74
 8013966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801396a:	2340      	movs	r3, #64	@ 0x40
 801396c:	616b      	str	r3, [r5, #20]
 801396e:	2300      	movs	r3, #0
 8013970:	9309      	str	r3, [sp, #36]	@ 0x24
 8013972:	2320      	movs	r3, #32
 8013974:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013978:	f8cd 800c 	str.w	r8, [sp, #12]
 801397c:	2330      	movs	r3, #48	@ 0x30
 801397e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013b1c <_svfiprintf_r+0x1e4>
 8013982:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013986:	f04f 0901 	mov.w	r9, #1
 801398a:	4623      	mov	r3, r4
 801398c:	469a      	mov	sl, r3
 801398e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013992:	b10a      	cbz	r2, 8013998 <_svfiprintf_r+0x60>
 8013994:	2a25      	cmp	r2, #37	@ 0x25
 8013996:	d1f9      	bne.n	801398c <_svfiprintf_r+0x54>
 8013998:	ebba 0b04 	subs.w	fp, sl, r4
 801399c:	d00b      	beq.n	80139b6 <_svfiprintf_r+0x7e>
 801399e:	465b      	mov	r3, fp
 80139a0:	4622      	mov	r2, r4
 80139a2:	4629      	mov	r1, r5
 80139a4:	4638      	mov	r0, r7
 80139a6:	f7ff ff6b 	bl	8013880 <__ssputs_r>
 80139aa:	3001      	adds	r0, #1
 80139ac:	f000 80a7 	beq.w	8013afe <_svfiprintf_r+0x1c6>
 80139b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80139b2:	445a      	add	r2, fp
 80139b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80139b6:	f89a 3000 	ldrb.w	r3, [sl]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	f000 809f 	beq.w	8013afe <_svfiprintf_r+0x1c6>
 80139c0:	2300      	movs	r3, #0
 80139c2:	f04f 32ff 	mov.w	r2, #4294967295
 80139c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139ca:	f10a 0a01 	add.w	sl, sl, #1
 80139ce:	9304      	str	r3, [sp, #16]
 80139d0:	9307      	str	r3, [sp, #28]
 80139d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80139d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80139d8:	4654      	mov	r4, sl
 80139da:	2205      	movs	r2, #5
 80139dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139e0:	484e      	ldr	r0, [pc, #312]	@ (8013b1c <_svfiprintf_r+0x1e4>)
 80139e2:	f7ec fc25 	bl	8000230 <memchr>
 80139e6:	9a04      	ldr	r2, [sp, #16]
 80139e8:	b9d8      	cbnz	r0, 8013a22 <_svfiprintf_r+0xea>
 80139ea:	06d0      	lsls	r0, r2, #27
 80139ec:	bf44      	itt	mi
 80139ee:	2320      	movmi	r3, #32
 80139f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80139f4:	0711      	lsls	r1, r2, #28
 80139f6:	bf44      	itt	mi
 80139f8:	232b      	movmi	r3, #43	@ 0x2b
 80139fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80139fe:	f89a 3000 	ldrb.w	r3, [sl]
 8013a02:	2b2a      	cmp	r3, #42	@ 0x2a
 8013a04:	d015      	beq.n	8013a32 <_svfiprintf_r+0xfa>
 8013a06:	9a07      	ldr	r2, [sp, #28]
 8013a08:	4654      	mov	r4, sl
 8013a0a:	2000      	movs	r0, #0
 8013a0c:	f04f 0c0a 	mov.w	ip, #10
 8013a10:	4621      	mov	r1, r4
 8013a12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a16:	3b30      	subs	r3, #48	@ 0x30
 8013a18:	2b09      	cmp	r3, #9
 8013a1a:	d94b      	bls.n	8013ab4 <_svfiprintf_r+0x17c>
 8013a1c:	b1b0      	cbz	r0, 8013a4c <_svfiprintf_r+0x114>
 8013a1e:	9207      	str	r2, [sp, #28]
 8013a20:	e014      	b.n	8013a4c <_svfiprintf_r+0x114>
 8013a22:	eba0 0308 	sub.w	r3, r0, r8
 8013a26:	fa09 f303 	lsl.w	r3, r9, r3
 8013a2a:	4313      	orrs	r3, r2
 8013a2c:	9304      	str	r3, [sp, #16]
 8013a2e:	46a2      	mov	sl, r4
 8013a30:	e7d2      	b.n	80139d8 <_svfiprintf_r+0xa0>
 8013a32:	9b03      	ldr	r3, [sp, #12]
 8013a34:	1d19      	adds	r1, r3, #4
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	9103      	str	r1, [sp, #12]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	bfbb      	ittet	lt
 8013a3e:	425b      	neglt	r3, r3
 8013a40:	f042 0202 	orrlt.w	r2, r2, #2
 8013a44:	9307      	strge	r3, [sp, #28]
 8013a46:	9307      	strlt	r3, [sp, #28]
 8013a48:	bfb8      	it	lt
 8013a4a:	9204      	strlt	r2, [sp, #16]
 8013a4c:	7823      	ldrb	r3, [r4, #0]
 8013a4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013a50:	d10a      	bne.n	8013a68 <_svfiprintf_r+0x130>
 8013a52:	7863      	ldrb	r3, [r4, #1]
 8013a54:	2b2a      	cmp	r3, #42	@ 0x2a
 8013a56:	d132      	bne.n	8013abe <_svfiprintf_r+0x186>
 8013a58:	9b03      	ldr	r3, [sp, #12]
 8013a5a:	1d1a      	adds	r2, r3, #4
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	9203      	str	r2, [sp, #12]
 8013a60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013a64:	3402      	adds	r4, #2
 8013a66:	9305      	str	r3, [sp, #20]
 8013a68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013b2c <_svfiprintf_r+0x1f4>
 8013a6c:	7821      	ldrb	r1, [r4, #0]
 8013a6e:	2203      	movs	r2, #3
 8013a70:	4650      	mov	r0, sl
 8013a72:	f7ec fbdd 	bl	8000230 <memchr>
 8013a76:	b138      	cbz	r0, 8013a88 <_svfiprintf_r+0x150>
 8013a78:	9b04      	ldr	r3, [sp, #16]
 8013a7a:	eba0 000a 	sub.w	r0, r0, sl
 8013a7e:	2240      	movs	r2, #64	@ 0x40
 8013a80:	4082      	lsls	r2, r0
 8013a82:	4313      	orrs	r3, r2
 8013a84:	3401      	adds	r4, #1
 8013a86:	9304      	str	r3, [sp, #16]
 8013a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a8c:	4824      	ldr	r0, [pc, #144]	@ (8013b20 <_svfiprintf_r+0x1e8>)
 8013a8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013a92:	2206      	movs	r2, #6
 8013a94:	f7ec fbcc 	bl	8000230 <memchr>
 8013a98:	2800      	cmp	r0, #0
 8013a9a:	d036      	beq.n	8013b0a <_svfiprintf_r+0x1d2>
 8013a9c:	4b21      	ldr	r3, [pc, #132]	@ (8013b24 <_svfiprintf_r+0x1ec>)
 8013a9e:	bb1b      	cbnz	r3, 8013ae8 <_svfiprintf_r+0x1b0>
 8013aa0:	9b03      	ldr	r3, [sp, #12]
 8013aa2:	3307      	adds	r3, #7
 8013aa4:	f023 0307 	bic.w	r3, r3, #7
 8013aa8:	3308      	adds	r3, #8
 8013aaa:	9303      	str	r3, [sp, #12]
 8013aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013aae:	4433      	add	r3, r6
 8013ab0:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ab2:	e76a      	b.n	801398a <_svfiprintf_r+0x52>
 8013ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ab8:	460c      	mov	r4, r1
 8013aba:	2001      	movs	r0, #1
 8013abc:	e7a8      	b.n	8013a10 <_svfiprintf_r+0xd8>
 8013abe:	2300      	movs	r3, #0
 8013ac0:	3401      	adds	r4, #1
 8013ac2:	9305      	str	r3, [sp, #20]
 8013ac4:	4619      	mov	r1, r3
 8013ac6:	f04f 0c0a 	mov.w	ip, #10
 8013aca:	4620      	mov	r0, r4
 8013acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ad0:	3a30      	subs	r2, #48	@ 0x30
 8013ad2:	2a09      	cmp	r2, #9
 8013ad4:	d903      	bls.n	8013ade <_svfiprintf_r+0x1a6>
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d0c6      	beq.n	8013a68 <_svfiprintf_r+0x130>
 8013ada:	9105      	str	r1, [sp, #20]
 8013adc:	e7c4      	b.n	8013a68 <_svfiprintf_r+0x130>
 8013ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ae2:	4604      	mov	r4, r0
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	e7f0      	b.n	8013aca <_svfiprintf_r+0x192>
 8013ae8:	ab03      	add	r3, sp, #12
 8013aea:	9300      	str	r3, [sp, #0]
 8013aec:	462a      	mov	r2, r5
 8013aee:	4b0e      	ldr	r3, [pc, #56]	@ (8013b28 <_svfiprintf_r+0x1f0>)
 8013af0:	a904      	add	r1, sp, #16
 8013af2:	4638      	mov	r0, r7
 8013af4:	f3af 8000 	nop.w
 8013af8:	1c42      	adds	r2, r0, #1
 8013afa:	4606      	mov	r6, r0
 8013afc:	d1d6      	bne.n	8013aac <_svfiprintf_r+0x174>
 8013afe:	89ab      	ldrh	r3, [r5, #12]
 8013b00:	065b      	lsls	r3, r3, #25
 8013b02:	f53f af2d 	bmi.w	8013960 <_svfiprintf_r+0x28>
 8013b06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b08:	e72c      	b.n	8013964 <_svfiprintf_r+0x2c>
 8013b0a:	ab03      	add	r3, sp, #12
 8013b0c:	9300      	str	r3, [sp, #0]
 8013b0e:	462a      	mov	r2, r5
 8013b10:	4b05      	ldr	r3, [pc, #20]	@ (8013b28 <_svfiprintf_r+0x1f0>)
 8013b12:	a904      	add	r1, sp, #16
 8013b14:	4638      	mov	r0, r7
 8013b16:	f000 f879 	bl	8013c0c <_printf_i>
 8013b1a:	e7ed      	b.n	8013af8 <_svfiprintf_r+0x1c0>
 8013b1c:	080148bc 	.word	0x080148bc
 8013b20:	080148c6 	.word	0x080148c6
 8013b24:	00000000 	.word	0x00000000
 8013b28:	08013881 	.word	0x08013881
 8013b2c:	080148c2 	.word	0x080148c2

08013b30 <_printf_common>:
 8013b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b34:	4616      	mov	r6, r2
 8013b36:	4698      	mov	r8, r3
 8013b38:	688a      	ldr	r2, [r1, #8]
 8013b3a:	690b      	ldr	r3, [r1, #16]
 8013b3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013b40:	4293      	cmp	r3, r2
 8013b42:	bfb8      	it	lt
 8013b44:	4613      	movlt	r3, r2
 8013b46:	6033      	str	r3, [r6, #0]
 8013b48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013b4c:	4607      	mov	r7, r0
 8013b4e:	460c      	mov	r4, r1
 8013b50:	b10a      	cbz	r2, 8013b56 <_printf_common+0x26>
 8013b52:	3301      	adds	r3, #1
 8013b54:	6033      	str	r3, [r6, #0]
 8013b56:	6823      	ldr	r3, [r4, #0]
 8013b58:	0699      	lsls	r1, r3, #26
 8013b5a:	bf42      	ittt	mi
 8013b5c:	6833      	ldrmi	r3, [r6, #0]
 8013b5e:	3302      	addmi	r3, #2
 8013b60:	6033      	strmi	r3, [r6, #0]
 8013b62:	6825      	ldr	r5, [r4, #0]
 8013b64:	f015 0506 	ands.w	r5, r5, #6
 8013b68:	d106      	bne.n	8013b78 <_printf_common+0x48>
 8013b6a:	f104 0a19 	add.w	sl, r4, #25
 8013b6e:	68e3      	ldr	r3, [r4, #12]
 8013b70:	6832      	ldr	r2, [r6, #0]
 8013b72:	1a9b      	subs	r3, r3, r2
 8013b74:	42ab      	cmp	r3, r5
 8013b76:	dc26      	bgt.n	8013bc6 <_printf_common+0x96>
 8013b78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013b7c:	6822      	ldr	r2, [r4, #0]
 8013b7e:	3b00      	subs	r3, #0
 8013b80:	bf18      	it	ne
 8013b82:	2301      	movne	r3, #1
 8013b84:	0692      	lsls	r2, r2, #26
 8013b86:	d42b      	bmi.n	8013be0 <_printf_common+0xb0>
 8013b88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013b8c:	4641      	mov	r1, r8
 8013b8e:	4638      	mov	r0, r7
 8013b90:	47c8      	blx	r9
 8013b92:	3001      	adds	r0, #1
 8013b94:	d01e      	beq.n	8013bd4 <_printf_common+0xa4>
 8013b96:	6823      	ldr	r3, [r4, #0]
 8013b98:	6922      	ldr	r2, [r4, #16]
 8013b9a:	f003 0306 	and.w	r3, r3, #6
 8013b9e:	2b04      	cmp	r3, #4
 8013ba0:	bf02      	ittt	eq
 8013ba2:	68e5      	ldreq	r5, [r4, #12]
 8013ba4:	6833      	ldreq	r3, [r6, #0]
 8013ba6:	1aed      	subeq	r5, r5, r3
 8013ba8:	68a3      	ldr	r3, [r4, #8]
 8013baa:	bf0c      	ite	eq
 8013bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013bb0:	2500      	movne	r5, #0
 8013bb2:	4293      	cmp	r3, r2
 8013bb4:	bfc4      	itt	gt
 8013bb6:	1a9b      	subgt	r3, r3, r2
 8013bb8:	18ed      	addgt	r5, r5, r3
 8013bba:	2600      	movs	r6, #0
 8013bbc:	341a      	adds	r4, #26
 8013bbe:	42b5      	cmp	r5, r6
 8013bc0:	d11a      	bne.n	8013bf8 <_printf_common+0xc8>
 8013bc2:	2000      	movs	r0, #0
 8013bc4:	e008      	b.n	8013bd8 <_printf_common+0xa8>
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	4652      	mov	r2, sl
 8013bca:	4641      	mov	r1, r8
 8013bcc:	4638      	mov	r0, r7
 8013bce:	47c8      	blx	r9
 8013bd0:	3001      	adds	r0, #1
 8013bd2:	d103      	bne.n	8013bdc <_printf_common+0xac>
 8013bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8013bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bdc:	3501      	adds	r5, #1
 8013bde:	e7c6      	b.n	8013b6e <_printf_common+0x3e>
 8013be0:	18e1      	adds	r1, r4, r3
 8013be2:	1c5a      	adds	r2, r3, #1
 8013be4:	2030      	movs	r0, #48	@ 0x30
 8013be6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013bea:	4422      	add	r2, r4
 8013bec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013bf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013bf4:	3302      	adds	r3, #2
 8013bf6:	e7c7      	b.n	8013b88 <_printf_common+0x58>
 8013bf8:	2301      	movs	r3, #1
 8013bfa:	4622      	mov	r2, r4
 8013bfc:	4641      	mov	r1, r8
 8013bfe:	4638      	mov	r0, r7
 8013c00:	47c8      	blx	r9
 8013c02:	3001      	adds	r0, #1
 8013c04:	d0e6      	beq.n	8013bd4 <_printf_common+0xa4>
 8013c06:	3601      	adds	r6, #1
 8013c08:	e7d9      	b.n	8013bbe <_printf_common+0x8e>
	...

08013c0c <_printf_i>:
 8013c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013c10:	7e0f      	ldrb	r7, [r1, #24]
 8013c12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013c14:	2f78      	cmp	r7, #120	@ 0x78
 8013c16:	4691      	mov	r9, r2
 8013c18:	4680      	mov	r8, r0
 8013c1a:	460c      	mov	r4, r1
 8013c1c:	469a      	mov	sl, r3
 8013c1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013c22:	d807      	bhi.n	8013c34 <_printf_i+0x28>
 8013c24:	2f62      	cmp	r7, #98	@ 0x62
 8013c26:	d80a      	bhi.n	8013c3e <_printf_i+0x32>
 8013c28:	2f00      	cmp	r7, #0
 8013c2a:	f000 80d2 	beq.w	8013dd2 <_printf_i+0x1c6>
 8013c2e:	2f58      	cmp	r7, #88	@ 0x58
 8013c30:	f000 80b9 	beq.w	8013da6 <_printf_i+0x19a>
 8013c34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013c38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013c3c:	e03a      	b.n	8013cb4 <_printf_i+0xa8>
 8013c3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013c42:	2b15      	cmp	r3, #21
 8013c44:	d8f6      	bhi.n	8013c34 <_printf_i+0x28>
 8013c46:	a101      	add	r1, pc, #4	@ (adr r1, 8013c4c <_printf_i+0x40>)
 8013c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013c4c:	08013ca5 	.word	0x08013ca5
 8013c50:	08013cb9 	.word	0x08013cb9
 8013c54:	08013c35 	.word	0x08013c35
 8013c58:	08013c35 	.word	0x08013c35
 8013c5c:	08013c35 	.word	0x08013c35
 8013c60:	08013c35 	.word	0x08013c35
 8013c64:	08013cb9 	.word	0x08013cb9
 8013c68:	08013c35 	.word	0x08013c35
 8013c6c:	08013c35 	.word	0x08013c35
 8013c70:	08013c35 	.word	0x08013c35
 8013c74:	08013c35 	.word	0x08013c35
 8013c78:	08013db9 	.word	0x08013db9
 8013c7c:	08013ce3 	.word	0x08013ce3
 8013c80:	08013d73 	.word	0x08013d73
 8013c84:	08013c35 	.word	0x08013c35
 8013c88:	08013c35 	.word	0x08013c35
 8013c8c:	08013ddb 	.word	0x08013ddb
 8013c90:	08013c35 	.word	0x08013c35
 8013c94:	08013ce3 	.word	0x08013ce3
 8013c98:	08013c35 	.word	0x08013c35
 8013c9c:	08013c35 	.word	0x08013c35
 8013ca0:	08013d7b 	.word	0x08013d7b
 8013ca4:	6833      	ldr	r3, [r6, #0]
 8013ca6:	1d1a      	adds	r2, r3, #4
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	6032      	str	r2, [r6, #0]
 8013cac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013cb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	e09d      	b.n	8013df4 <_printf_i+0x1e8>
 8013cb8:	6833      	ldr	r3, [r6, #0]
 8013cba:	6820      	ldr	r0, [r4, #0]
 8013cbc:	1d19      	adds	r1, r3, #4
 8013cbe:	6031      	str	r1, [r6, #0]
 8013cc0:	0606      	lsls	r6, r0, #24
 8013cc2:	d501      	bpl.n	8013cc8 <_printf_i+0xbc>
 8013cc4:	681d      	ldr	r5, [r3, #0]
 8013cc6:	e003      	b.n	8013cd0 <_printf_i+0xc4>
 8013cc8:	0645      	lsls	r5, r0, #25
 8013cca:	d5fb      	bpl.n	8013cc4 <_printf_i+0xb8>
 8013ccc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013cd0:	2d00      	cmp	r5, #0
 8013cd2:	da03      	bge.n	8013cdc <_printf_i+0xd0>
 8013cd4:	232d      	movs	r3, #45	@ 0x2d
 8013cd6:	426d      	negs	r5, r5
 8013cd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013cdc:	4859      	ldr	r0, [pc, #356]	@ (8013e44 <_printf_i+0x238>)
 8013cde:	230a      	movs	r3, #10
 8013ce0:	e011      	b.n	8013d06 <_printf_i+0xfa>
 8013ce2:	6821      	ldr	r1, [r4, #0]
 8013ce4:	6833      	ldr	r3, [r6, #0]
 8013ce6:	0608      	lsls	r0, r1, #24
 8013ce8:	f853 5b04 	ldr.w	r5, [r3], #4
 8013cec:	d402      	bmi.n	8013cf4 <_printf_i+0xe8>
 8013cee:	0649      	lsls	r1, r1, #25
 8013cf0:	bf48      	it	mi
 8013cf2:	b2ad      	uxthmi	r5, r5
 8013cf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8013cf6:	4853      	ldr	r0, [pc, #332]	@ (8013e44 <_printf_i+0x238>)
 8013cf8:	6033      	str	r3, [r6, #0]
 8013cfa:	bf14      	ite	ne
 8013cfc:	230a      	movne	r3, #10
 8013cfe:	2308      	moveq	r3, #8
 8013d00:	2100      	movs	r1, #0
 8013d02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013d06:	6866      	ldr	r6, [r4, #4]
 8013d08:	60a6      	str	r6, [r4, #8]
 8013d0a:	2e00      	cmp	r6, #0
 8013d0c:	bfa2      	ittt	ge
 8013d0e:	6821      	ldrge	r1, [r4, #0]
 8013d10:	f021 0104 	bicge.w	r1, r1, #4
 8013d14:	6021      	strge	r1, [r4, #0]
 8013d16:	b90d      	cbnz	r5, 8013d1c <_printf_i+0x110>
 8013d18:	2e00      	cmp	r6, #0
 8013d1a:	d04b      	beq.n	8013db4 <_printf_i+0x1a8>
 8013d1c:	4616      	mov	r6, r2
 8013d1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8013d22:	fb03 5711 	mls	r7, r3, r1, r5
 8013d26:	5dc7      	ldrb	r7, [r0, r7]
 8013d28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013d2c:	462f      	mov	r7, r5
 8013d2e:	42bb      	cmp	r3, r7
 8013d30:	460d      	mov	r5, r1
 8013d32:	d9f4      	bls.n	8013d1e <_printf_i+0x112>
 8013d34:	2b08      	cmp	r3, #8
 8013d36:	d10b      	bne.n	8013d50 <_printf_i+0x144>
 8013d38:	6823      	ldr	r3, [r4, #0]
 8013d3a:	07df      	lsls	r7, r3, #31
 8013d3c:	d508      	bpl.n	8013d50 <_printf_i+0x144>
 8013d3e:	6923      	ldr	r3, [r4, #16]
 8013d40:	6861      	ldr	r1, [r4, #4]
 8013d42:	4299      	cmp	r1, r3
 8013d44:	bfde      	ittt	le
 8013d46:	2330      	movle	r3, #48	@ 0x30
 8013d48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013d4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013d50:	1b92      	subs	r2, r2, r6
 8013d52:	6122      	str	r2, [r4, #16]
 8013d54:	f8cd a000 	str.w	sl, [sp]
 8013d58:	464b      	mov	r3, r9
 8013d5a:	aa03      	add	r2, sp, #12
 8013d5c:	4621      	mov	r1, r4
 8013d5e:	4640      	mov	r0, r8
 8013d60:	f7ff fee6 	bl	8013b30 <_printf_common>
 8013d64:	3001      	adds	r0, #1
 8013d66:	d14a      	bne.n	8013dfe <_printf_i+0x1f2>
 8013d68:	f04f 30ff 	mov.w	r0, #4294967295
 8013d6c:	b004      	add	sp, #16
 8013d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d72:	6823      	ldr	r3, [r4, #0]
 8013d74:	f043 0320 	orr.w	r3, r3, #32
 8013d78:	6023      	str	r3, [r4, #0]
 8013d7a:	4833      	ldr	r0, [pc, #204]	@ (8013e48 <_printf_i+0x23c>)
 8013d7c:	2778      	movs	r7, #120	@ 0x78
 8013d7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013d82:	6823      	ldr	r3, [r4, #0]
 8013d84:	6831      	ldr	r1, [r6, #0]
 8013d86:	061f      	lsls	r7, r3, #24
 8013d88:	f851 5b04 	ldr.w	r5, [r1], #4
 8013d8c:	d402      	bmi.n	8013d94 <_printf_i+0x188>
 8013d8e:	065f      	lsls	r7, r3, #25
 8013d90:	bf48      	it	mi
 8013d92:	b2ad      	uxthmi	r5, r5
 8013d94:	6031      	str	r1, [r6, #0]
 8013d96:	07d9      	lsls	r1, r3, #31
 8013d98:	bf44      	itt	mi
 8013d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8013d9e:	6023      	strmi	r3, [r4, #0]
 8013da0:	b11d      	cbz	r5, 8013daa <_printf_i+0x19e>
 8013da2:	2310      	movs	r3, #16
 8013da4:	e7ac      	b.n	8013d00 <_printf_i+0xf4>
 8013da6:	4827      	ldr	r0, [pc, #156]	@ (8013e44 <_printf_i+0x238>)
 8013da8:	e7e9      	b.n	8013d7e <_printf_i+0x172>
 8013daa:	6823      	ldr	r3, [r4, #0]
 8013dac:	f023 0320 	bic.w	r3, r3, #32
 8013db0:	6023      	str	r3, [r4, #0]
 8013db2:	e7f6      	b.n	8013da2 <_printf_i+0x196>
 8013db4:	4616      	mov	r6, r2
 8013db6:	e7bd      	b.n	8013d34 <_printf_i+0x128>
 8013db8:	6833      	ldr	r3, [r6, #0]
 8013dba:	6825      	ldr	r5, [r4, #0]
 8013dbc:	6961      	ldr	r1, [r4, #20]
 8013dbe:	1d18      	adds	r0, r3, #4
 8013dc0:	6030      	str	r0, [r6, #0]
 8013dc2:	062e      	lsls	r6, r5, #24
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	d501      	bpl.n	8013dcc <_printf_i+0x1c0>
 8013dc8:	6019      	str	r1, [r3, #0]
 8013dca:	e002      	b.n	8013dd2 <_printf_i+0x1c6>
 8013dcc:	0668      	lsls	r0, r5, #25
 8013dce:	d5fb      	bpl.n	8013dc8 <_printf_i+0x1bc>
 8013dd0:	8019      	strh	r1, [r3, #0]
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	6123      	str	r3, [r4, #16]
 8013dd6:	4616      	mov	r6, r2
 8013dd8:	e7bc      	b.n	8013d54 <_printf_i+0x148>
 8013dda:	6833      	ldr	r3, [r6, #0]
 8013ddc:	1d1a      	adds	r2, r3, #4
 8013dde:	6032      	str	r2, [r6, #0]
 8013de0:	681e      	ldr	r6, [r3, #0]
 8013de2:	6862      	ldr	r2, [r4, #4]
 8013de4:	2100      	movs	r1, #0
 8013de6:	4630      	mov	r0, r6
 8013de8:	f7ec fa22 	bl	8000230 <memchr>
 8013dec:	b108      	cbz	r0, 8013df2 <_printf_i+0x1e6>
 8013dee:	1b80      	subs	r0, r0, r6
 8013df0:	6060      	str	r0, [r4, #4]
 8013df2:	6863      	ldr	r3, [r4, #4]
 8013df4:	6123      	str	r3, [r4, #16]
 8013df6:	2300      	movs	r3, #0
 8013df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013dfc:	e7aa      	b.n	8013d54 <_printf_i+0x148>
 8013dfe:	6923      	ldr	r3, [r4, #16]
 8013e00:	4632      	mov	r2, r6
 8013e02:	4649      	mov	r1, r9
 8013e04:	4640      	mov	r0, r8
 8013e06:	47d0      	blx	sl
 8013e08:	3001      	adds	r0, #1
 8013e0a:	d0ad      	beq.n	8013d68 <_printf_i+0x15c>
 8013e0c:	6823      	ldr	r3, [r4, #0]
 8013e0e:	079b      	lsls	r3, r3, #30
 8013e10:	d413      	bmi.n	8013e3a <_printf_i+0x22e>
 8013e12:	68e0      	ldr	r0, [r4, #12]
 8013e14:	9b03      	ldr	r3, [sp, #12]
 8013e16:	4298      	cmp	r0, r3
 8013e18:	bfb8      	it	lt
 8013e1a:	4618      	movlt	r0, r3
 8013e1c:	e7a6      	b.n	8013d6c <_printf_i+0x160>
 8013e1e:	2301      	movs	r3, #1
 8013e20:	4632      	mov	r2, r6
 8013e22:	4649      	mov	r1, r9
 8013e24:	4640      	mov	r0, r8
 8013e26:	47d0      	blx	sl
 8013e28:	3001      	adds	r0, #1
 8013e2a:	d09d      	beq.n	8013d68 <_printf_i+0x15c>
 8013e2c:	3501      	adds	r5, #1
 8013e2e:	68e3      	ldr	r3, [r4, #12]
 8013e30:	9903      	ldr	r1, [sp, #12]
 8013e32:	1a5b      	subs	r3, r3, r1
 8013e34:	42ab      	cmp	r3, r5
 8013e36:	dcf2      	bgt.n	8013e1e <_printf_i+0x212>
 8013e38:	e7eb      	b.n	8013e12 <_printf_i+0x206>
 8013e3a:	2500      	movs	r5, #0
 8013e3c:	f104 0619 	add.w	r6, r4, #25
 8013e40:	e7f5      	b.n	8013e2e <_printf_i+0x222>
 8013e42:	bf00      	nop
 8013e44:	080148cd 	.word	0x080148cd
 8013e48:	080148de 	.word	0x080148de

08013e4c <memmove>:
 8013e4c:	4288      	cmp	r0, r1
 8013e4e:	b510      	push	{r4, lr}
 8013e50:	eb01 0402 	add.w	r4, r1, r2
 8013e54:	d902      	bls.n	8013e5c <memmove+0x10>
 8013e56:	4284      	cmp	r4, r0
 8013e58:	4623      	mov	r3, r4
 8013e5a:	d807      	bhi.n	8013e6c <memmove+0x20>
 8013e5c:	1e43      	subs	r3, r0, #1
 8013e5e:	42a1      	cmp	r1, r4
 8013e60:	d008      	beq.n	8013e74 <memmove+0x28>
 8013e62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013e6a:	e7f8      	b.n	8013e5e <memmove+0x12>
 8013e6c:	4402      	add	r2, r0
 8013e6e:	4601      	mov	r1, r0
 8013e70:	428a      	cmp	r2, r1
 8013e72:	d100      	bne.n	8013e76 <memmove+0x2a>
 8013e74:	bd10      	pop	{r4, pc}
 8013e76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013e7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013e7e:	e7f7      	b.n	8013e70 <memmove+0x24>

08013e80 <memcpy>:
 8013e80:	440a      	add	r2, r1
 8013e82:	4291      	cmp	r1, r2
 8013e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8013e88:	d100      	bne.n	8013e8c <memcpy+0xc>
 8013e8a:	4770      	bx	lr
 8013e8c:	b510      	push	{r4, lr}
 8013e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e96:	4291      	cmp	r1, r2
 8013e98:	d1f9      	bne.n	8013e8e <memcpy+0xe>
 8013e9a:	bd10      	pop	{r4, pc}

08013e9c <_realloc_r>:
 8013e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ea0:	4680      	mov	r8, r0
 8013ea2:	4615      	mov	r5, r2
 8013ea4:	460c      	mov	r4, r1
 8013ea6:	b921      	cbnz	r1, 8013eb2 <_realloc_r+0x16>
 8013ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013eac:	4611      	mov	r1, r2
 8013eae:	f7ff bb99 	b.w	80135e4 <_malloc_r>
 8013eb2:	b92a      	cbnz	r2, 8013ec0 <_realloc_r+0x24>
 8013eb4:	f7ff fc9a 	bl	80137ec <_free_r>
 8013eb8:	2400      	movs	r4, #0
 8013eba:	4620      	mov	r0, r4
 8013ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ec0:	f000 f81a 	bl	8013ef8 <_malloc_usable_size_r>
 8013ec4:	4285      	cmp	r5, r0
 8013ec6:	4606      	mov	r6, r0
 8013ec8:	d802      	bhi.n	8013ed0 <_realloc_r+0x34>
 8013eca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013ece:	d8f4      	bhi.n	8013eba <_realloc_r+0x1e>
 8013ed0:	4629      	mov	r1, r5
 8013ed2:	4640      	mov	r0, r8
 8013ed4:	f7ff fb86 	bl	80135e4 <_malloc_r>
 8013ed8:	4607      	mov	r7, r0
 8013eda:	2800      	cmp	r0, #0
 8013edc:	d0ec      	beq.n	8013eb8 <_realloc_r+0x1c>
 8013ede:	42b5      	cmp	r5, r6
 8013ee0:	462a      	mov	r2, r5
 8013ee2:	4621      	mov	r1, r4
 8013ee4:	bf28      	it	cs
 8013ee6:	4632      	movcs	r2, r6
 8013ee8:	f7ff ffca 	bl	8013e80 <memcpy>
 8013eec:	4621      	mov	r1, r4
 8013eee:	4640      	mov	r0, r8
 8013ef0:	f7ff fc7c 	bl	80137ec <_free_r>
 8013ef4:	463c      	mov	r4, r7
 8013ef6:	e7e0      	b.n	8013eba <_realloc_r+0x1e>

08013ef8 <_malloc_usable_size_r>:
 8013ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013efc:	1f18      	subs	r0, r3, #4
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	bfbc      	itt	lt
 8013f02:	580b      	ldrlt	r3, [r1, r0]
 8013f04:	18c0      	addlt	r0, r0, r3
 8013f06:	4770      	bx	lr

08013f08 <_init>:
 8013f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f0a:	bf00      	nop
 8013f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f0e:	bc08      	pop	{r3}
 8013f10:	469e      	mov	lr, r3
 8013f12:	4770      	bx	lr

08013f14 <_fini>:
 8013f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f16:	bf00      	nop
 8013f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f1a:	bc08      	pop	{r3}
 8013f1c:	469e      	mov	lr, r3
 8013f1e:	4770      	bx	lr
